// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad-@PROC@.smt2 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2
     && TagFamily(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == tytagFamily$_#Func2);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx) } 
  Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx)
     == Set#IsMember(rd[heap, bx0, bx1], bx));

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r)) } 
            r != null && Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hPartialFunc2
     && TagFamily(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#PartialFunc2);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hTotalFunc2
     && TagFamily(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#TotalFunc2);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

const unique class.State.__default: ClassName;

// function declaration for State._default.Return
function State.__default.Return(State._default.Return$A: Ty, x#0: Box) : DatatypeType
uses {
// consequence axiom for State.__default.Return
axiom 1 <= $FunctionContextHeight
   ==> (forall State._default.Return$A: Ty, x#0: Box :: 
    { State.__default.Return(State._default.Return$A, x#0) } 
    State.__default.Return#canCall(State._default.Return$A, x#0)
         || (1 < $FunctionContextHeight && $IsBox(x#0, State._default.Return$A))
       ==> $Is(State.__default.Return(State._default.Return$A, x#0), 
        Tclass.State.M(State._default.Return$A)));
// alloc consequence axiom for State.__default.Return
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, State._default.Return$A: Ty, x#0: Box :: 
    { $IsAlloc(State.__default.Return(State._default.Return$A, x#0), 
        Tclass.State.M(State._default.Return$A), 
        $Heap) } 
    (State.__default.Return#canCall(State._default.Return$A, x#0)
           || (1 < $FunctionContextHeight
             && 
            $IsBox(x#0, State._default.Return$A)
             && $IsAllocBox(x#0, State._default.Return$A, $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(State.__default.Return(State._default.Return$A, x#0), 
        Tclass.State.M(State._default.Return$A), 
        $Heap));
// definition axiom for State.__default.Return (revealed)
axiom {:id "id8"} 1 <= $FunctionContextHeight
   ==> (forall State._default.Return$A: Ty, x#0: Box :: 
    { State.__default.Return(State._default.Return$A, x#0) } 
    State.__default.Return#canCall(State._default.Return$A, x#0)
         || (1 < $FunctionContextHeight && $IsBox(x#0, State._default.Return$A))
       ==> State.__default.Return(State._default.Return$A, x#0)
         == Lit(#State.M.State(Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                  Handle1((lambda $l#0#heap#0: Heap, $l#0#s#0: Box :: 
                      $Box(#_System._tuple#2._#Make2(x#0, $l#0#s#0))), 
                    (lambda $l#0#heap#0: Heap, $l#0#s#0: Box :: $IsBox($l#0#s#0, TInt)), 
                    (lambda $l#0#heap#0: Heap, $l#0#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                $LS($LZ))))));
// definition axiom for State.__default.Return for all literals (revealed)
axiom {:id "id9"} 1 <= $FunctionContextHeight
   ==> (forall State._default.Return$A: Ty, x#0: Box :: 
    {:weight 3} { State.__default.Return(State._default.Return$A, Lit(x#0)) } 
    State.__default.Return#canCall(State._default.Return$A, Lit(x#0))
         || (1 < $FunctionContextHeight && $IsBox(x#0, State._default.Return$A))
       ==> State.__default.Return(State._default.Return$A, Lit(x#0))
         == Lit(#State.M.State(Lit(AtLayer((lambda $l#2#ly#0: LayerType :: 
                  Handle1((lambda $l#2#heap#0: Heap, $l#2#s#0: Box :: 
                      $Box(#_System._tuple#2._#Make2(Lit(x#0), $l#2#s#0))), 
                    (lambda $l#2#heap#0: Heap, $l#2#s#0: Box :: $IsBox($l#2#s#0, TInt)), 
                    (lambda $l#2#heap#0: Heap, $l#2#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#2#o#0: ref :: false))))), 
                $LS($LZ))))));
}

function State.__default.Return#canCall(State._default.Return$A: Ty, x#0: Box) : bool;

function Tclass.State.M(Ty) : Ty;

const unique Tagclass.State.M: TyTag;

// Tclass.State.M Tag
axiom (forall State.M$A: Ty :: 
  { Tclass.State.M(State.M$A) } 
  Tag(Tclass.State.M(State.M$A)) == Tagclass.State.M
     && TagFamily(Tclass.State.M(State.M$A)) == tytagFamily$M);

function Tclass.State.M_0(Ty) : Ty;

// Tclass.State.M injectivity 0
axiom (forall State.M$A: Ty :: 
  { Tclass.State.M(State.M$A) } 
  Tclass.State.M_0(Tclass.State.M(State.M$A)) == State.M$A);

// Box/unbox axiom for Tclass.State.M
axiom (forall State.M$A: Ty, bx: Box :: 
  { $IsBox(bx, Tclass.State.M(State.M$A)) } 
  $IsBox(bx, Tclass.State.M(State.M$A))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.State.M(State.M$A)));

function State.__default.Return#requires(Ty, Box) : bool;

// #requires axiom for State.__default.Return
axiom (forall State._default.Return$A: Ty, x#0: Box :: 
  { State.__default.Return#requires(State._default.Return$A, x#0) } 
  $IsBox(x#0, State._default.Return$A)
     ==> State.__default.Return#requires(State._default.Return$A, x#0) == true);

procedure {:verboseName "State.Return (well-formedness)"} CheckWellformed$$State.__default.Return(State._default.Return$A: Ty, x#0: Box where $IsBox(x#0, State._default.Return$A));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for State._default.Bind
function State.__default.Bind(State._default.Bind$A: Ty, 
    State._default.Bind$B: Ty, 
    m#0: DatatypeType, 
    f#0: HandleType)
   : DatatypeType
uses {
// consequence axiom for State.__default.Bind
axiom 1 <= $FunctionContextHeight
   ==> (forall State._default.Bind$A: Ty, 
      State._default.Bind$B: Ty, 
      m#0: DatatypeType, 
      f#0: HandleType :: 
    { State.__default.Bind(State._default.Bind$A, State._default.Bind$B, m#0, f#0) } 
    State.__default.Bind#canCall(State._default.Bind$A, State._default.Bind$B, m#0, f#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(m#0, Tclass.State.M(State._default.Bind$A))
           && $Is(f#0, 
            Tclass._System.___hTotalFunc1(State._default.Bind$A, Tclass.State.M(State._default.Bind$B))))
       ==> $Is(State.__default.Bind(State._default.Bind$A, State._default.Bind$B, m#0, f#0), 
        Tclass.State.M(State._default.Bind$B)));
// alloc consequence axiom for State.__default.Bind
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      State._default.Bind$A: Ty, 
      State._default.Bind$B: Ty, 
      m#0: DatatypeType, 
      f#0: HandleType :: 
    { $IsAlloc(State.__default.Bind(State._default.Bind$A, State._default.Bind$B, m#0, f#0), 
        Tclass.State.M(State._default.Bind$B), 
        $Heap) } 
    (State.__default.Bind#canCall(State._default.Bind$A, State._default.Bind$B, m#0, f#0)
           || (1 < $FunctionContextHeight
             && 
            $Is(m#0, Tclass.State.M(State._default.Bind$A))
             && $IsAlloc(m#0, Tclass.State.M(State._default.Bind$A), $Heap)
             && 
            $Is(f#0, 
              Tclass._System.___hTotalFunc1(State._default.Bind$A, Tclass.State.M(State._default.Bind$B)))
             && $IsAlloc(f#0, 
              Tclass._System.___hTotalFunc1(State._default.Bind$A, Tclass.State.M(State._default.Bind$B)), 
              $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(State.__default.Bind(State._default.Bind$A, State._default.Bind$B, m#0, f#0), 
        Tclass.State.M(State._default.Bind$B), 
        $Heap));
// definition axiom for State.__default.Bind (revealed)
axiom {:id "id12"} 1 <= $FunctionContextHeight
   ==> (forall State._default.Bind$A: Ty, 
      State._default.Bind$B: Ty, 
      $Heap: Heap, 
      m#0: DatatypeType, 
      f#0: HandleType :: 
    { State.__default.Bind(State._default.Bind$A, State._default.Bind$B, m#0, f#0), $IsGoodHeap($Heap) } 
    State.__default.Bind#canCall(State._default.Bind$A, State._default.Bind$B, m#0, f#0)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(m#0, Tclass.State.M(State._default.Bind$A))
           && $Is(f#0, 
            Tclass._System.___hTotalFunc1(State._default.Bind$A, Tclass.State.M(State._default.Bind$B))))
       ==> State.M.State_q(m#0)
         && (var h#1 := State.M.runState(m#0); 
          (forall $l#1#s#0: int, $l#1#heap#0: Heap :: 
            $IsGoodHeap($l#1#heap#0)
               ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                      Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                      $l#1#heap#0, 
                      h#1, 
                      $Box($l#1#s#0))): DatatypeType)
                 && 
                _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                      Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                      $l#1#heap#0, 
                      h#1, 
                      $Box($l#1#s#0))): DatatypeType)
                 && (var a#1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                          $l#1#heap#0, 
                          h#1, 
                          $Box($l#1#s#0))): DatatypeType); 
                  State.M.State_q($Unbox(Apply1(State._default.Bind$A, 
                        Tclass.State.M(State._default.Bind$B), 
                        $l#1#heap#0, 
                        f#0, 
                        a#1)): DatatypeType))))
         && State.__default.Bind(State._default.Bind$A, State._default.Bind$B, m#0, f#0)
           == (var h#0 := State.M.runState(m#0); 
            Lit(#State.M.State(Lit(AtLayer((lambda $l#0#ly#0: LayerType :: 
                      Handle1((lambda $l#0#heap#0: Heap, $l#0#s#0: Box :: 
                          $Box((var newState#0 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                                        $l#0#heap#0, 
                                        h#0, 
                                        $Box($Unbox($l#0#s#0): int))): DatatypeType)): int; 
                              (var a#0 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                                        $l#0#heap#0, 
                                        h#0, 
                                        $Box($Unbox($l#0#s#0): int))): DatatypeType); 
                                (var g#0 := State.M.runState($Unbox(Apply1(State._default.Bind$A, 
                                          Tclass.State.M(State._default.Bind$B), 
                                          $l#0#heap#0, 
                                          f#0, 
                                          a#0)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Bind$B, TInt), 
                                      $l#0#heap#0, 
                                      g#0, 
                                      $Box(newState#0))): DatatypeType))))), 
                        (lambda $l#0#heap#0: Heap, $l#0#s#0: Box :: $IsBox($l#0#s#0, TInt)), 
                        (lambda $l#0#heap#0: Heap, $l#0#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0#o#0: ref :: false))))), 
                    $LS($LZ)))))));
// definition axiom for State.__default.Bind for decreasing-related literals (revealed)
axiom {:id "id13"} 1 <= $FunctionContextHeight
   ==> (forall State._default.Bind$A: Ty, 
      State._default.Bind$B: Ty, 
      $Heap: Heap, 
      m#0: DatatypeType, 
      f#0: HandleType :: 
    {:weight 3} { State.__default.Bind(State._default.Bind$A, State._default.Bind$B, Lit(m#0), f#0), $IsGoodHeap($Heap) } 
    State.__default.Bind#canCall(State._default.Bind$A, State._default.Bind$B, Lit(m#0), f#0)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(m#0, Tclass.State.M(State._default.Bind$A))
           && $Is(f#0, 
            Tclass._System.___hTotalFunc1(State._default.Bind$A, Tclass.State.M(State._default.Bind$B))))
       ==> State.M.State_q(Lit(m#0))
         && (var h#3 := Lit(State.M.runState(Lit(m#0))); 
          (forall $l#3#s#0: int, $l#3#heap#0: Heap :: 
            $IsGoodHeap($l#3#heap#0)
               ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                      Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                      $l#3#heap#0, 
                      h#3, 
                      $Box($l#3#s#0))): DatatypeType)
                 && 
                _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                      Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                      $l#3#heap#0, 
                      h#3, 
                      $Box($l#3#s#0))): DatatypeType)
                 && (var a#3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                          $l#3#heap#0, 
                          h#3, 
                          $Box($l#3#s#0))): DatatypeType); 
                  State.M.State_q($Unbox(Apply1(State._default.Bind$A, 
                        Tclass.State.M(State._default.Bind$B), 
                        $l#3#heap#0, 
                        f#0, 
                        a#3)): DatatypeType))))
         && State.__default.Bind(State._default.Bind$A, State._default.Bind$B, Lit(m#0), f#0)
           == (var h#2 := Lit(State.M.runState(Lit(m#0))); 
            Lit(#State.M.State(Lit(AtLayer((lambda $l#2#ly#0: LayerType :: 
                      Handle1((lambda $l#2#heap#0: Heap, $l#2#s#0: Box :: 
                          $Box((var newState#2 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                                        $l#2#heap#0, 
                                        h#2, 
                                        $Box($Unbox($l#2#s#0): int))): DatatypeType)): int; 
                              (var a#2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                                        $l#2#heap#0, 
                                        h#2, 
                                        $Box($Unbox($l#2#s#0): int))): DatatypeType); 
                                (var g#2 := State.M.runState($Unbox(Apply1(State._default.Bind$A, 
                                          Tclass.State.M(State._default.Bind$B), 
                                          $l#2#heap#0, 
                                          f#0, 
                                          a#2)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Bind$B, TInt), 
                                      $l#2#heap#0, 
                                      g#2, 
                                      $Box(newState#2))): DatatypeType))))), 
                        (lambda $l#2#heap#0: Heap, $l#2#s#0: Box :: $IsBox($l#2#s#0, TInt)), 
                        (lambda $l#2#heap#0: Heap, $l#2#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#2#o#0: ref :: false))))), 
                    $LS($LZ)))))));
// definition axiom for State.__default.Bind for all literals (revealed)
axiom {:id "id14"} 1 <= $FunctionContextHeight
   ==> (forall State._default.Bind$A: Ty, 
      State._default.Bind$B: Ty, 
      $Heap: Heap, 
      m#0: DatatypeType, 
      f#0: HandleType :: 
    {:weight 3} { State.__default.Bind(State._default.Bind$A, State._default.Bind$B, Lit(m#0), Lit(f#0)), $IsGoodHeap($Heap) } 
    State.__default.Bind#canCall(State._default.Bind$A, State._default.Bind$B, Lit(m#0), Lit(f#0))
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(m#0, Tclass.State.M(State._default.Bind$A))
           && $Is(f#0, 
            Tclass._System.___hTotalFunc1(State._default.Bind$A, Tclass.State.M(State._default.Bind$B))))
       ==> State.M.State_q(Lit(m#0))
         && (var h#5 := Lit(State.M.runState(Lit(m#0))); 
          (forall $l#5#s#0: int, $l#5#heap#0: Heap :: 
            $IsGoodHeap($l#5#heap#0)
               ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                      Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                      $l#5#heap#0, 
                      h#5, 
                      $Box($l#5#s#0))): DatatypeType)
                 && 
                _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                      Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                      $l#5#heap#0, 
                      h#5, 
                      $Box($l#5#s#0))): DatatypeType)
                 && (var a#5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                          $l#5#heap#0, 
                          h#5, 
                          $Box($l#5#s#0))): DatatypeType); 
                  State.M.State_q($Unbox(Apply1(State._default.Bind$A, 
                        Tclass.State.M(State._default.Bind$B), 
                        $l#5#heap#0, 
                        Lit(f#0), 
                        a#5)): DatatypeType))))
         && State.__default.Bind(State._default.Bind$A, State._default.Bind$B, Lit(m#0), Lit(f#0))
           == (var h#4 := Lit(State.M.runState(Lit(m#0))); 
            Lit(#State.M.State(Lit(AtLayer((lambda $l#4#ly#0: LayerType :: 
                      Handle1((lambda $l#4#heap#0: Heap, $l#4#s#0: Box :: 
                          $Box((var newState#4 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                                        $l#4#heap#0, 
                                        h#4, 
                                        $Box($Unbox($l#4#s#0): int))): DatatypeType)): int; 
                              (var a#4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Bind$A, TInt), 
                                        $l#4#heap#0, 
                                        h#4, 
                                        $Box($Unbox($l#4#s#0): int))): DatatypeType); 
                                (var g#4 := State.M.runState($Unbox(Apply1(State._default.Bind$A, 
                                          Tclass.State.M(State._default.Bind$B), 
                                          $l#4#heap#0, 
                                          Lit(f#0), 
                                          a#4)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Bind$B, TInt), 
                                      $l#4#heap#0, 
                                      g#4, 
                                      $Box(newState#4))): DatatypeType))))), 
                        (lambda $l#4#heap#0: Heap, $l#4#s#0: Box :: $IsBox($l#4#s#0, TInt)), 
                        (lambda $l#4#heap#0: Heap, $l#4#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#4#o#0: ref :: false))))), 
                    $LS($LZ)))))));
}

function State.__default.Bind#canCall(State._default.Bind$A: Ty, 
    State._default.Bind$B: Ty, 
    m#0: DatatypeType, 
    f#0: HandleType)
   : bool;

function State.__default.Bind#requires(Ty, Ty, DatatypeType, HandleType) : bool;

// #requires axiom for State.__default.Bind
axiom (forall State._default.Bind$A: Ty, 
    State._default.Bind$B: Ty, 
    $Heap: Heap, 
    m#0: DatatypeType, 
    f#0: HandleType :: 
  { State.__default.Bind#requires(State._default.Bind$A, State._default.Bind$B, m#0, f#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && $Is(m#0, Tclass.State.M(State._default.Bind$A))
       && $Is(f#0, 
        Tclass._System.___hTotalFunc1(State._default.Bind$A, Tclass.State.M(State._default.Bind$B)))
     ==> State.__default.Bind#requires(State._default.Bind$A, State._default.Bind$B, m#0, f#0)
       == true);

procedure {:verboseName "State.Bind (well-formedness)"} CheckWellformed$$State.__default.Bind(State._default.Bind$A: Ty, 
    State._default.Bind$B: Ty, 
    m#0: DatatypeType where $Is(m#0, Tclass.State.M(State._default.Bind$A)), 
    f#0: HandleType
       where $Is(f#0, 
        Tclass._System.___hTotalFunc1(State._default.Bind$A, Tclass.State.M(State._default.Bind$B))));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "State.FunEq (well-formedness)"} CheckWellFormed$$State.__default.FunEq(State._default.FunEq$X: Ty, 
    State._default.FunEq$Y: Ty, 
    f#0: HandleType
       where $Is(f#0, 
          Tclass._System.___hTotalFunc1(State._default.FunEq$X, State._default.FunEq$Y))
         && $IsAlloc(f#0, 
          Tclass._System.___hTotalFunc1(State._default.FunEq$X, State._default.FunEq$Y), 
          $Heap), 
    g#0: HandleType
       where $Is(g#0, 
          Tclass._System.___hTotalFunc1(State._default.FunEq$X, State._default.FunEq$Y))
         && $IsAlloc(g#0, 
          Tclass._System.___hTotalFunc1(State._default.FunEq$X, State._default.FunEq$Y), 
          $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "State.FunEq (call)"} Call$$State.__default.FunEq(State._default.FunEq$X: Ty, 
    State._default.FunEq$Y: Ty, 
    f#0: HandleType
       where $Is(f#0, 
          Tclass._System.___hTotalFunc1(State._default.FunEq$X, State._default.FunEq$Y))
         && $IsAlloc(f#0, 
          Tclass._System.___hTotalFunc1(State._default.FunEq$X, State._default.FunEq$Y), 
          $Heap), 
    g#0: HandleType
       where $Is(g#0, 
          Tclass._System.___hTotalFunc1(State._default.FunEq$X, State._default.FunEq$Y))
         && $IsAlloc(g#0, 
          Tclass._System.___hTotalFunc1(State._default.FunEq$X, State._default.FunEq$Y), 
          $Heap));
  // user-defined preconditions
  requires {:id "id28"} (forall x#1: Box :: 
    { Apply1(State._default.FunEq$X, State._default.FunEq$Y, $Heap, g#0, x#1) } 
      { Apply1(State._default.FunEq$X, State._default.FunEq$Y, $Heap, f#0, x#1) } 
    $IsBox(x#1, State._default.FunEq$X)
         && $IsAllocBox(x#1, State._default.FunEq$X, $Heap)
       ==> Apply1(State._default.FunEq$X, State._default.FunEq$Y, $Heap, f#0, x#1)
         == Apply1(State._default.FunEq$X, State._default.FunEq$Y, $Heap, g#0, x#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures true;
  ensures {:id "id29"} f#0 == g#0;
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "State.LeftIdentity (well-formedness)"} CheckWellFormed$$State.__default.LeftIdentity(State._default.LeftIdentity$A: Ty, 
    State._default.LeftIdentity$B: Ty, 
    x#0: Box
       where $IsBox(x#0, State._default.LeftIdentity$A)
         && $IsAllocBox(x#0, State._default.LeftIdentity$A, $Heap), 
    f#0: HandleType
       where $Is(f#0, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)))
         && $IsAlloc(f#0, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)), 
          $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "State.LeftIdentity (call)"} Call$$State.__default.LeftIdentity(State._default.LeftIdentity$A: Ty, 
    State._default.LeftIdentity$B: Ty, 
    x#0: Box
       where $IsBox(x#0, State._default.LeftIdentity$A)
         && $IsAllocBox(x#0, State._default.LeftIdentity$A, $Heap), 
    f#0: HandleType
       where $Is(f#0, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)))
         && $IsAlloc(f#0, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)), 
          $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#State.M(State.__default.Bind(State._default.LeftIdentity$A, 
        State._default.LeftIdentity$B, 
        State.__default.Return(State._default.LeftIdentity$A, x#0), 
        f#0))
     && $IsA#State.M($Unbox(Apply1(State._default.LeftIdentity$A, 
          Tclass.State.M(State._default.LeftIdentity$B), 
          $Heap, 
          f#0, 
          x#0)): DatatypeType)
     && 
    State.__default.Return#canCall(State._default.LeftIdentity$A, x#0)
     && State.__default.Bind#canCall(State._default.LeftIdentity$A, 
      State._default.LeftIdentity$B, 
      State.__default.Return(State._default.LeftIdentity$A, x#0), 
      f#0);
  ensures {:id "id32"} State.M#Equal(State.__default.Bind(State._default.LeftIdentity$A, 
      State._default.LeftIdentity$B, 
      State.__default.Return(State._default.LeftIdentity$A, x#0), 
      f#0), 
    $Unbox(Apply1(State._default.LeftIdentity$A, 
        Tclass.State.M(State._default.LeftIdentity$B), 
        $Heap, 
        f#0, 
        x#0)): DatatypeType);
  free ensures $IsA#State.M(State.__default.Bind(State._default.LeftIdentity$A, 
        State._default.LeftIdentity$B, 
        State.__default.Return(State._default.LeftIdentity$A, x#0), 
        f#0))
     && $IsA#State.M($Unbox(Apply1(State._default.LeftIdentity$A, 
          Tclass.State.M(State._default.LeftIdentity$B), 
          $Heap, 
          f#0, 
          x#0)): DatatypeType)
     && 
    State.__default.Return#canCall(State._default.LeftIdentity$A, x#0)
     && State.__default.Bind#canCall(State._default.LeftIdentity$A, 
      State._default.LeftIdentity$B, 
      State.__default.Return(State._default.LeftIdentity$A, x#0), 
      f#0);
  ensures {:id "id33"} State.M#Equal(State.__default.Bind(State._default.LeftIdentity$A, 
      State._default.LeftIdentity$B, 
      State.__default.Return(State._default.LeftIdentity$A, x#0), 
      f#0), 
    $Unbox(Apply1(State._default.LeftIdentity$A, 
        Tclass.State.M(State._default.LeftIdentity$B), 
        $Heap, 
        f#0, 
        x#0)): DatatypeType);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "State.LeftIdentity (correctness)"} Impl$$State.__default.LeftIdentity(State._default.LeftIdentity$A: Ty, 
    State._default.LeftIdentity$B: Ty, 
    x#0: Box
       where $IsBox(x#0, State._default.LeftIdentity$A)
         && $IsAllocBox(x#0, State._default.LeftIdentity$A, $Heap), 
    f#0: HandleType
       where $Is(f#0, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)))
         && $IsAlloc(f#0, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)), 
          $Heap))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#State.M(State.__default.Bind(State._default.LeftIdentity$A, 
        State._default.LeftIdentity$B, 
        State.__default.Return(State._default.LeftIdentity$A, x#0), 
        f#0))
     && $IsA#State.M($Unbox(Apply1(State._default.LeftIdentity$A, 
          Tclass.State.M(State._default.LeftIdentity$B), 
          $Heap, 
          f#0, 
          x#0)): DatatypeType)
     && 
    State.__default.Return#canCall(State._default.LeftIdentity$A, x#0)
     && State.__default.Bind#canCall(State._default.LeftIdentity$A, 
      State._default.LeftIdentity$B, 
      State.__default.Return(State._default.LeftIdentity$A, x#0), 
      f#0);
  ensures {:id "id34"} State.M#Equal(State.__default.Bind(State._default.LeftIdentity$A, 
      State._default.LeftIdentity$B, 
      State.__default.Return(State._default.LeftIdentity$A, x#0), 
      f#0), 
    $Unbox(Apply1(State._default.LeftIdentity$A, 
        Tclass.State.M(State._default.LeftIdentity$B), 
        $Heap, 
        f#0, 
        x#0)): DatatypeType);
  free ensures $IsA#State.M(State.__default.Bind(State._default.LeftIdentity$A, 
        State._default.LeftIdentity$B, 
        State.__default.Return(State._default.LeftIdentity$A, x#0), 
        f#0))
     && $IsA#State.M($Unbox(Apply1(State._default.LeftIdentity$A, 
          Tclass.State.M(State._default.LeftIdentity$B), 
          $Heap, 
          f#0, 
          x#0)): DatatypeType)
     && 
    State.__default.Return#canCall(State._default.LeftIdentity$A, x#0)
     && State.__default.Bind#canCall(State._default.LeftIdentity$A, 
      State._default.LeftIdentity$B, 
      State.__default.Return(State._default.LeftIdentity$A, x#0), 
      f#0);
  ensures {:id "id35"} State.M#Equal(State.__default.Bind(State._default.LeftIdentity$A, 
      State._default.LeftIdentity$B, 
      State.__default.Return(State._default.LeftIdentity$A, x#0), 
      f#0), 
    $Unbox(Apply1(State._default.LeftIdentity$A, 
        Tclass.State.M(State._default.LeftIdentity$B), 
        $Heap, 
        f#0, 
        x#0)): DatatypeType);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "State.LeftIdentity (correctness)"} Impl$$State.__default.LeftIdentity(State._default.LeftIdentity$A: Ty, 
    State._default.LeftIdentity$B: Ty, 
    x#0: Box, 
    f#0: HandleType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var h#0: HandleType;
  var let#0#0#0: DatatypeType;
  var $lambdaHeap#0: Heap;
  var s#0: int;
  var $_Frame#l0: [ref,Field]bool;
  var lambdaResult#0: DatatypeType;
  var g2#0: HandleType;
  var let#1#0#0: DatatypeType;
  var $lambdaHeap#0_1_0: Heap;
  var s#0_1_0: int;
  var $_Frame#l0_1_0: [ref,Field]bool;
  var lambdaResult#0_1_0: DatatypeType;
  var _mcc#6#0_1_0: HandleType;
  var g#Z#0_1_0: HandleType;
  var let#0_1_0#0#0: HandleType;
  var f##0_1_0: HandleType;
  var $lambdaHeap#0_1_1: Heap;
  var s#0_1_1: int;
  var $_Frame#l0_1_1: [ref,Field]bool;
  var lambdaResult#0_1_1: DatatypeType;
  var _mcc#17#0_1_0: HandleType;
  var g#Z#0_1_1: HandleType;
  var let#0_1_1#0#0: HandleType;
  var g##0_1_0: HandleType;
  var $lambdaHeap#0_2_0: Heap;
  var s#0_2_0: int;
  var $_Frame#l0_2_0: [ref,Field]bool;
  var lambdaResult#0_2_0: DatatypeType;
  var _mcc#3#0_2_0: Box;
  var _mcc#4#0_2_0: int;
  var newState#Z#0_2_0: int;
  var let#0_2_0#0#0: int;
  var a#Z#0_2_0: Box;
  var let#0_2_1#0#0: Box;
  var _mcc#5#0_2_0: HandleType;
  var g#Z#0_2_0: HandleType;
  var let#0_2_2#0#0: HandleType;
  var f##0_2_0: HandleType;
  var $lambdaHeap#0_2_1: Heap;
  var s#0_2_1: int;
  var $_Frame#l0_2_1: [ref,Field]bool;
  var lambdaResult#0_2_1: DatatypeType;
  var _mcc#13#0_2_0: Box;
  var _mcc#14#0_2_0: int;
  var newState#Z#0_2_1: int;
  var let#0_2_3#0#0: int;
  var a#Z#0_2_1: Box;
  var let#0_2_4#0#0: Box;
  var _mcc#15#0_2_0: HandleType;
  var g#Z#0_2_1: HandleType;
  var let#0_2_5#0#0: HandleType;
  var g##0_2_0: HandleType;
  var $lambdaHeap#0_2_2: Heap;
  var s#0_2_2: int;
  var $_Frame#l0_2_2: [ref,Field]bool;
  var lambdaResult#0_2_2: DatatypeType;
  var _mcc#16#0_2_0: HandleType;
  var g#Z#0_2_2: HandleType;
  var let#0_2_6#0#0: HandleType;
  var $lambdaHeap#0_2_3: Heap;
  var s#0_2_3: int;
  var $_Frame#l0_2_3: [ref,Field]bool;
  var lambdaResult#0_2_3: DatatypeType;
  var g#Z#0_2_3: HandleType;
  var let#0_2_7#0#0: HandleType;
  var $lambdaHeap#0_3_0: Heap;
  var s#0_3_0: int;
  var $_Frame#l0_3_0: [ref,Field]bool;
  var lambdaResult#0_3_0: DatatypeType;
  var $lambdaHeap#0_3_1: Heap;
  var s#0_3_1: int;
  var $_Frame#l0_3_1: [ref,Field]bool;
  var lambdaResult#0_3_1: DatatypeType;
  var _mcc#0#0_3_0: Box;
  var _mcc#1#0_3_0: int;
  var newState#Z#0_3_0: int;
  var let#0_3_0#0#0: int;
  var a#Z#0_3_0: Box;
  var let#0_3_1#0#0: Box;
  var _mcc#2#0_3_0: HandleType;
  var g#Z#0_3_0: HandleType;
  var let#0_3_2#0#0: HandleType;
  var f##0_3_0: HandleType;
  var $lambdaHeap#0_3_2: Heap;
  var s#0_3_2: int;
  var $_Frame#l0_3_2: [ref,Field]bool;
  var lambdaResult#0_3_2: DatatypeType;
  var $lambdaHeap#0_3_3: Heap;
  var s#0_3_3: int;
  var $_Frame#l0_3_3: [ref,Field]bool;
  var lambdaResult#0_3_3: DatatypeType;
  var _mcc#7#0_3_0: Box;
  var _mcc#8#0_3_0: int;
  var newState#Z#0_3_1: int;
  var let#0_3_3#0#0: int;
  var a#Z#0_3_1: Box;
  var let#0_3_4#0#0: Box;
  var _mcc#9#0_3_0: HandleType;
  var g#Z#0_3_1: HandleType;
  var let#0_3_5#0#0: HandleType;
  var g##0_3_0: HandleType;
  var $lambdaHeap#0_3_4: Heap;
  var s#0_3_4: int;
  var $_Frame#l0_3_4: [ref,Field]bool;
  var lambdaResult#0_3_4: DatatypeType;
  var _mcc#10#0_3_0: Box;
  var _mcc#11#0_3_0: int;
  var newState#Z#0_3_2: int;
  var let#0_3_6#0#0: int;
  var a#Z#0_3_2: Box;
  var let#0_3_7#0#0: Box;
  var _mcc#12#0_3_0: HandleType;
  var g#Z#0_3_2: HandleType;
  var let#0_3_8#0#0: HandleType;
  var $lambdaHeap#0_3_5: Heap;
  var s#0_3_5: int;
  var $_Frame#l0_3_5: [ref,Field]bool;
  var lambdaResult#0_3_5: DatatypeType;
  var newState#Z#0_3_3: int;
  var let#0_3_9#0#0: int;
  var a#Z#0_3_3: Box;
  var let#0_3_10#0#0: Box;
  var g#Z#0_3_3: HandleType;
  var let#0_3_11#0#0: HandleType;
  var ##m#0_4_0: DatatypeType;
  var $lambdaHeap#0_4_0: Heap;
  var s#0_4_0: int;
  var $_Frame#l0_4_0: [ref,Field]bool;
  var lambdaResult#0_4_0: DatatypeType;
  var ##f#0_4_0: HandleType;
  var $lambdaHeap#0_4_1: Heap;
  var s#0_4_1: int;
  var $_Frame#l0_4_1: [ref,Field]bool;
  var lambdaResult#0_4_1: DatatypeType;
  var $lambdaHeap#0_4_2: Heap;
  var s#0_4_2: int;
  var $_Frame#l0_4_2: [ref,Field]bool;
  var lambdaResult#0_4_2: DatatypeType;
  var newState#Z#0_4_0: int;
  var let#0_4_0#0#0: int;
  var a#Z#0_4_0: Box;
  var let#0_4_1#0#0: Box;
  var g#Z#0_4_0: HandleType;
  var let#0_4_2#0#0: HandleType;
  var ##m#0_5_0: DatatypeType;
  var ##x#0_5_0: Box;
  var ##f#0_5_0: HandleType;
  var ##m#0_5_1: DatatypeType;
  var $lambdaHeap#0_5_0: Heap;
  var s#0_5_0: int;
  var $_Frame#l0_5_0: [ref,Field]bool;
  var lambdaResult#0_5_0: DatatypeType;
  var ##f#0_5_1: HandleType;
  var ##m#0_0: DatatypeType;
  var ##x#0_0: Box;
  var ##f#0_0: HandleType;

    // AddMethodImpl: LeftIdentity, Impl$$State.__default.LeftIdentity
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    havoc h#0;
    assume $Is(h#0, 
        Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt)))
       && $IsAlloc(h#0, 
        Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt)), 
        $Heap);
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#0;
        assume $IsGoodHeap($lambdaHeap#0);
        assume $Heap == $lambdaHeap#0 || $HeapSucc($Heap, $lambdaHeap#0);
        havoc s#0;
        if (true)
        {
            $_Frame#l0 := (lambda $o: ref, $f: Field :: 
              $o != null && $Unbox(read($lambdaHeap#0, $o, alloc)): bool ==> false);
            assume {:id "id36"} lambdaResult#0 == #_System._tuple#2._#Make2(x#0, $Box(s#0));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#0, Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt));
        }

        assume false;
    }

    // End Comprehension WF check
    assume {:id "id37"} let#0#0#0
       == Lit(#State.M.State(Lit(AtLayer((lambda $l#2#ly#0: LayerType :: 
                Handle1((lambda $l#2#heap#0: Heap, $l#2#s#0: Box :: 
                    $Box(#_System._tuple#2._#Make2(x#0, $l#2#s#0))), 
                  (lambda $l#2#heap#0: Heap, $l#2#s#0: Box :: $IsBox($l#2#s#0, TInt)), 
                  (lambda $l#2#heap#0: Heap, $l#2#s#0: Box :: 
                    SetRef_to_SetBox((lambda $l#2#o#0: ref :: false))))), 
              $LS($LZ)))));
    assume true;
    assume true;
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, Tclass.State.M(State._default.LeftIdentity$A));
    assume State.M.State_q(let#0#0#0);
    assume {:id "id38"} #State.M.State(h#0) == let#0#0#0;
    havoc g2#0;
    assume $Is(g2#0, 
        Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)))
       && $IsAlloc(g2#0, 
        Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)), 
        $Heap);
    assume {:id "id39"} let#1#0#0
       == $Unbox(Apply1(State._default.LeftIdentity$A, 
          Tclass.State.M(State._default.LeftIdentity$B), 
          $Heap, 
          f#0, 
          x#0)): DatatypeType;
    assume true;
    assume true;
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass.State.M(State._default.LeftIdentity$B));
    assume State.M.State_q(let#1#0#0);
    assume {:id "id40"} #State.M.State(g2#0) == let#1#0#0;
    // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
    // Assume Fuel Constant
    if (*)
    {
        // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        ##x#0_0 := x#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##x#0_0, State._default.LeftIdentity$A, $Heap);
        assume State.__default.Return#canCall(State._default.LeftIdentity$A, x#0);
        assume State.M.State_q(State.__default.Return(State._default.LeftIdentity$A, x#0));
        ##m#0_0 := State.__default.Return(State._default.LeftIdentity$A, x#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##m#0_0, Tclass.State.M(State._default.LeftIdentity$A), $Heap);
        ##f#0_0 := f#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_0, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)), 
          $Heap);
        assume State.__default.Bind#canCall(State._default.LeftIdentity$A, 
          State._default.LeftIdentity$B, 
          State.__default.Return(State._default.LeftIdentity$A, x#0), 
          f#0);
        assume State.M.State_q(State.__default.Bind(State._default.LeftIdentity$A, 
            State._default.LeftIdentity$B, 
            State.__default.Return(State._default.LeftIdentity$A, x#0), 
            f#0));
        assume State.__default.Return#canCall(State._default.LeftIdentity$A, x#0)
           && State.__default.Bind#canCall(State._default.LeftIdentity$A, 
            State._default.LeftIdentity$B, 
            State.__default.Return(State._default.LeftIdentity$A, x#0), 
            f#0);
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        ##x#0_5_0 := x#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##x#0_5_0, State._default.LeftIdentity$A, $Heap);
        assume State.__default.Return#canCall(State._default.LeftIdentity$A, x#0);
        assume State.M.State_q(State.__default.Return(State._default.LeftIdentity$A, x#0));
        ##m#0_5_0 := State.__default.Return(State._default.LeftIdentity$A, x#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##m#0_5_0, Tclass.State.M(State._default.LeftIdentity$A), $Heap);
        ##f#0_5_0 := f#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_5_0, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)), 
          $Heap);
        assume State.__default.Bind#canCall(State._default.LeftIdentity$A, 
          State._default.LeftIdentity$B, 
          State.__default.Return(State._default.LeftIdentity$A, x#0), 
          f#0);
        assume State.M.State_q(State.__default.Bind(State._default.LeftIdentity$A, 
            State._default.LeftIdentity$B, 
            State.__default.Return(State._default.LeftIdentity$A, x#0), 
            f#0));
        assume State.__default.Return#canCall(State._default.LeftIdentity$A, x#0)
           && State.__default.Bind#canCall(State._default.LeftIdentity$A, 
            State._default.LeftIdentity$B, 
            State.__default.Return(State._default.LeftIdentity$A, x#0), 
            f#0);
        // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_5_0;
            assume $IsGoodHeap($lambdaHeap#0_5_0);
            assume $Heap == $lambdaHeap#0_5_0 || $HeapSucc($Heap, $lambdaHeap#0_5_0);
            havoc s#0_5_0;
            if (true)
            {
                $_Frame#l0_5_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_5_0, $o, alloc)): bool ==> false);
                assume {:id "id114"} lambdaResult#0_5_0 == #_System._tuple#2._#Make2(x#0, $Box(s#0_5_0));
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_5_0, Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt));
            }

            assume false;
        }

        // End Comprehension WF check
        ##m#0_5_1 := Lit(#State.M.State(Lit(AtLayer((lambda $l#0_5_2#ly#0: LayerType :: 
                  Handle1((lambda $l#0_5_2#heap#0: Heap, $l#0_5_2#s#0: Box :: 
                      $Box(#_System._tuple#2._#Make2(x#0, $l#0_5_2#s#0))), 
                    (lambda $l#0_5_2#heap#0: Heap, $l#0_5_2#s#0: Box :: $IsBox($l#0_5_2#s#0, TInt)), 
                    (lambda $l#0_5_2#heap#0: Heap, $l#0_5_2#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_5_2#o#0: ref :: false))))), 
                $LS($LZ)))));
        // assume allocatedness for argument to function
        assume $IsAlloc(##m#0_5_1, Tclass.State.M(State._default.LeftIdentity$A), $Heap);
        ##f#0_5_1 := f#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_5_1, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)), 
          $Heap);
        assume State.__default.Bind#canCall(State._default.LeftIdentity$A, 
          State._default.LeftIdentity$B, 
          Lit(#State.M.State(Lit(AtLayer((lambda $l#0_5_3#ly#0: LayerType :: 
                    Handle1((lambda $l#0_5_3#heap#0: Heap, $l#0_5_3#s#0: Box :: 
                        $Box(#_System._tuple#2._#Make2(x#0, $l#0_5_3#s#0))), 
                      (lambda $l#0_5_3#heap#0: Heap, $l#0_5_3#s#0: Box :: $IsBox($l#0_5_3#s#0, TInt)), 
                      (lambda $l#0_5_3#heap#0: Heap, $l#0_5_3#s#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_5_3#o#0: ref :: false))))), 
                  $LS($LZ))))), 
          f#0);
        assume State.M.State_q(State.__default.Bind(State._default.LeftIdentity$A, 
            State._default.LeftIdentity$B, 
            Lit(#State.M.State(Lit(AtLayer((lambda $l#0_5_4#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_4#heap#0: Heap, $l#0_5_4#s#0: Box :: 
                          $Box(#_System._tuple#2._#Make2(x#0, $l#0_5_4#s#0))), 
                        (lambda $l#0_5_4#heap#0: Heap, $l#0_5_4#s#0: Box :: $IsBox($l#0_5_4#s#0, TInt)), 
                        (lambda $l#0_5_4#heap#0: Heap, $l#0_5_4#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_4#o#0: ref :: false))))), 
                    $LS($LZ))))), 
            f#0));
        assume State.__default.Bind#canCall(State._default.LeftIdentity$A, 
          State._default.LeftIdentity$B, 
          Lit(#State.M.State(Lit(AtLayer((lambda $l#0_5_6#ly#0: LayerType :: 
                    Handle1((lambda $l#0_5_6#heap#0: Heap, $l#0_5_6#s#0: Box :: 
                        $Box(#_System._tuple#2._#Make2(x#0, $l#0_5_6#s#0))), 
                      (lambda $l#0_5_6#heap#0: Heap, $l#0_5_6#s#0: Box :: $IsBox($l#0_5_6#s#0, TInt)), 
                      (lambda $l#0_5_6#heap#0: Heap, $l#0_5_6#s#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_5_6#o#0: ref :: false))))), 
                  $LS($LZ))))), 
          f#0);
        // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        assert {:id "id115"} {:subsumption 0} State.M#Equal(State.__default.Bind(State._default.LeftIdentity$A, 
            State._default.LeftIdentity$B, 
            State.__default.Return(State._default.LeftIdentity$A, x#0), 
            f#0), 
          State.__default.Bind(State._default.LeftIdentity$A, 
            State._default.LeftIdentity$B, 
            Lit(#State.M.State(Lit(AtLayer((lambda $l#0_5_8#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_8#heap#0: Heap, $l#0_5_8#s#0: Box :: 
                          $Box(#_System._tuple#2._#Make2(x#0, $l#0_5_8#s#0))), 
                        (lambda $l#0_5_8#heap#0: Heap, $l#0_5_8#s#0: Box :: $IsBox($l#0_5_8#s#0, TInt)), 
                        (lambda $l#0_5_8#heap#0: Heap, $l#0_5_8#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_8#o#0: ref :: false))))), 
                    $LS($LZ))))), 
            f#0));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_4_0;
            assume $IsGoodHeap($lambdaHeap#0_4_0);
            assume $Heap == $lambdaHeap#0_4_0 || $HeapSucc($Heap, $lambdaHeap#0_4_0);
            havoc s#0_4_0;
            if (true)
            {
                $_Frame#l0_4_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_4_0, $o, alloc)): bool ==> false);
                assume {:id "id104"} lambdaResult#0_4_0 == #_System._tuple#2._#Make2(x#0, $Box(s#0_4_0));
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_4_0, Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt));
            }

            assume false;
        }

        // End Comprehension WF check
        ##m#0_4_0 := Lit(#State.M.State(Lit(AtLayer((lambda $l#0_4_2#ly#0: LayerType :: 
                  Handle1((lambda $l#0_4_2#heap#0: Heap, $l#0_4_2#s#0: Box :: 
                      $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_2#s#0))), 
                    (lambda $l#0_4_2#heap#0: Heap, $l#0_4_2#s#0: Box :: $IsBox($l#0_4_2#s#0, TInt)), 
                    (lambda $l#0_4_2#heap#0: Heap, $l#0_4_2#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_4_2#o#0: ref :: false))))), 
                $LS($LZ)))));
        // assume allocatedness for argument to function
        assume $IsAlloc(##m#0_4_0, Tclass.State.M(State._default.LeftIdentity$A), $Heap);
        ##f#0_4_0 := f#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_4_0, 
          Tclass._System.___hTotalFunc1(State._default.LeftIdentity$A, Tclass.State.M(State._default.LeftIdentity$B)), 
          $Heap);
        assume State.__default.Bind#canCall(State._default.LeftIdentity$A, 
          State._default.LeftIdentity$B, 
          Lit(#State.M.State(Lit(AtLayer((lambda $l#0_4_3#ly#0: LayerType :: 
                    Handle1((lambda $l#0_4_3#heap#0: Heap, $l#0_4_3#s#0: Box :: 
                        $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_3#s#0))), 
                      (lambda $l#0_4_3#heap#0: Heap, $l#0_4_3#s#0: Box :: $IsBox($l#0_4_3#s#0, TInt)), 
                      (lambda $l#0_4_3#heap#0: Heap, $l#0_4_3#s#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_4_3#o#0: ref :: false))))), 
                  $LS($LZ))))), 
          f#0);
        assume State.M.State_q(State.__default.Bind(State._default.LeftIdentity$A, 
            State._default.LeftIdentity$B, 
            Lit(#State.M.State(Lit(AtLayer((lambda $l#0_4_4#ly#0: LayerType :: 
                      Handle1((lambda $l#0_4_4#heap#0: Heap, $l#0_4_4#s#0: Box :: 
                          $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_4#s#0))), 
                        (lambda $l#0_4_4#heap#0: Heap, $l#0_4_4#s#0: Box :: $IsBox($l#0_4_4#s#0, TInt)), 
                        (lambda $l#0_4_4#heap#0: Heap, $l#0_4_4#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_4_4#o#0: ref :: false))))), 
                    $LS($LZ))))), 
            f#0));
        assume State.__default.Bind#canCall(State._default.LeftIdentity$A, 
          State._default.LeftIdentity$B, 
          Lit(#State.M.State(Lit(AtLayer((lambda $l#0_4_6#ly#0: LayerType :: 
                    Handle1((lambda $l#0_4_6#heap#0: Heap, $l#0_4_6#s#0: Box :: 
                        $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_6#s#0))), 
                      (lambda $l#0_4_6#heap#0: Heap, $l#0_4_6#s#0: Box :: $IsBox($l#0_4_6#s#0, TInt)), 
                      (lambda $l#0_4_6#heap#0: Heap, $l#0_4_6#s#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_4_6#o#0: ref :: false))))), 
                  $LS($LZ))))), 
          f#0);
        // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_4_1;
            assume $IsGoodHeap($lambdaHeap#0_4_1);
            assume $Heap == $lambdaHeap#0_4_1 || $HeapSucc($Heap, $lambdaHeap#0_4_1);
            havoc s#0_4_1;
            if (true)
            {
                $_Frame#l0_4_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_4_1, $o, alloc)): bool ==> false);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_4_2;
                    assume $IsGoodHeap($lambdaHeap#0_4_2);
                    assume $lambdaHeap#0_4_1 == $lambdaHeap#0_4_2
                       || $HeapSucc($lambdaHeap#0_4_1, $lambdaHeap#0_4_2);
                    havoc s#0_4_2;
                    if (true)
                    {
                        $_Frame#l0_4_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_4_2, $o, alloc)): bool ==> false);
                        assume {:id "id105"} lambdaResult#0_4_2 == #_System._tuple#2._#Make2(x#0, $Box(s#0_4_2));
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_4_2, Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt));
                    }

                    assume false;
                }

                // End Comprehension WF check
                if ($Unbox(Apply1(TInt, 
                      Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                      $lambdaHeap#0_4_1, 
                      Lit(AtLayer((lambda $l#0_4_8#ly#0: LayerType :: 
                            Handle1((lambda $l#0_4_8#heap#0: Heap, $l#0_4_8#s#0: Box :: 
                                $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_8#s#0))), 
                              (lambda $l#0_4_8#heap#0: Heap, $l#0_4_8#s#0: Box :: $IsBox($l#0_4_8#s#0, TInt)), 
                              (lambda $l#0_4_8#heap#0: Heap, $l#0_4_8#s#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_4_8#o#0: ref :: false))))), 
                          $LS($LZ))), 
                      $Box(s#0_4_1))): DatatypeType
                   == #_System._tuple#2._#Make2(_mcc#0#0_3_0, $Box(_mcc#1#0_3_0)))
                {
                    assume $IsBox(_mcc#0#0_3_0, State._default.LeftIdentity$A);
                    havoc newState#Z#0_4_0;
                    assume {:id "id106"} let#0_4_0#0#0 == _mcc#1#0_3_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_4_0#0#0, TInt);
                    assume {:id "id107"} newState#Z#0_4_0 == let#0_4_0#0#0;
                    havoc a#Z#0_4_0;
                    assume {:id "id108"} let#0_4_1#0#0 == _mcc#0#0_3_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $IsBox(let#0_4_1#0#0, State._default.LeftIdentity$A);
                    assume {:id "id109"} a#Z#0_4_0 == let#0_4_1#0#0;
                    if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                          Tclass.State.M(State._default.LeftIdentity$B), 
                          $lambdaHeap#0_4_1, 
                          f#0, 
                          a#Z#0_4_0)): DatatypeType
                       == #State.M.State(_mcc#2#0_3_0))
                    {
                        assume $Is(_mcc#2#0_3_0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        havoc g#Z#0_4_0;
                        assume {:id "id110"} let#0_4_2#0#0 == _mcc#2#0_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_4_2#0#0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        assume {:id "id111"} g#Z#0_4_0 == let#0_4_2#0#0;
                        assume {:id "id112"} lambdaResult#0_4_1
                           == $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $Heap, 
                              g#Z#0_4_0, 
                              $Box(newState#Z#0_4_0))): DatatypeType;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_4_1, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                    }
                    else
                    {
                        assume false;
                    }
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_4_12#s#0: int, $l#0_4_12#heap#0: Heap :: 
          $IsGoodHeap($l#0_4_12#heap#0)
             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                    $l#0_4_12#heap#0, 
                    Lit(AtLayer((lambda $l#0_4_14#ly#0: LayerType :: 
                          Handle1((lambda $l#0_4_14#heap#0: Heap, $l#0_4_14#s#0: Box :: 
                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_14#s#0))), 
                            (lambda $l#0_4_14#heap#0: Heap, $l#0_4_14#s#0: Box :: 
                              $IsBox($l#0_4_14#s#0, TInt)), 
                            (lambda $l#0_4_14#heap#0: Heap, $l#0_4_14#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_4_14#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box($l#0_4_12#s#0))): DatatypeType)
               && 
              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                    $l#0_4_12#heap#0, 
                    Lit(AtLayer((lambda $l#0_4_16#ly#0: LayerType :: 
                          Handle1((lambda $l#0_4_16#heap#0: Heap, $l#0_4_16#s#0: Box :: 
                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_16#s#0))), 
                            (lambda $l#0_4_16#heap#0: Heap, $l#0_4_16#s#0: Box :: 
                              $IsBox($l#0_4_16#s#0, TInt)), 
                            (lambda $l#0_4_16#heap#0: Heap, $l#0_4_16#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_4_16#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box($l#0_4_12#s#0))): DatatypeType)
               && (var a#0_4_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                        $l#0_4_12#heap#0, 
                        Lit(AtLayer((lambda $l#0_4_17#ly#0: LayerType :: 
                              Handle1((lambda $l#0_4_17#heap#0: Heap, $l#0_4_17#s#0: Box :: 
                                  $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_17#s#0))), 
                                (lambda $l#0_4_17#heap#0: Heap, $l#0_4_17#s#0: Box :: 
                                  $IsBox($l#0_4_17#s#0, TInt)), 
                                (lambda $l#0_4_17#heap#0: Heap, $l#0_4_17#s#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_4_17#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box($l#0_4_12#s#0))): DatatypeType); 
                State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $l#0_4_12#heap#0, 
                      f#0, 
                      a#0_4_1)): DatatypeType)));
        // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        assert {:id "id113"} {:subsumption 0} State.M#Equal(State.__default.Bind(State._default.LeftIdentity$A, 
            State._default.LeftIdentity$B, 
            Lit(#State.M.State(Lit(AtLayer((lambda $l#0_4_23#ly#0: LayerType :: 
                      Handle1((lambda $l#0_4_23#heap#0: Heap, $l#0_4_23#s#0: Box :: 
                          $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_23#s#0))), 
                        (lambda $l#0_4_23#heap#0: Heap, $l#0_4_23#s#0: Box :: 
                          $IsBox($l#0_4_23#s#0, TInt)), 
                        (lambda $l#0_4_23#heap#0: Heap, $l#0_4_23#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_4_23#o#0: ref :: false))))), 
                    $LS($LZ))))), 
            f#0), 
          #State.M.State(Lit(AtLayer((lambda $l#0_4_24#ly#0: LayerType :: 
                  Handle1((lambda $l#0_4_24#heap#0: Heap, $l#0_4_24#s#0: Box :: 
                      $Box((var newState#0_4_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                                    $l#0_4_24#heap#0, 
                                    Lit(AtLayer((lambda $l#0_4_25#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_4_25#heap#0: Heap, $l#0_4_25#s#0: Box :: 
                                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_25#s#0))), 
                                            (lambda $l#0_4_25#heap#0: Heap, $l#0_4_25#s#0: Box :: 
                                              $IsBox($l#0_4_25#s#0, TInt)), 
                                            (lambda $l#0_4_25#heap#0: Heap, $l#0_4_25#s#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_4_25#o#0: ref :: false))))), 
                                        $l#0_4_24#ly#0)), 
                                    $Box($Unbox($l#0_4_24#s#0): int))): DatatypeType)): int; 
                          (var a#0_4_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                                    $l#0_4_24#heap#0, 
                                    Lit(AtLayer((lambda $l#0_4_26#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_4_26#heap#0: Heap, $l#0_4_26#s#0: Box :: 
                                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_4_26#s#0))), 
                                            (lambda $l#0_4_26#heap#0: Heap, $l#0_4_26#s#0: Box :: 
                                              $IsBox($l#0_4_26#s#0, TInt)), 
                                            (lambda $l#0_4_26#heap#0: Heap, $l#0_4_26#s#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_4_26#o#0: ref :: false))))), 
                                        $l#0_4_24#ly#0)), 
                                    $Box($Unbox($l#0_4_24#s#0): int))): DatatypeType); 
                            (var g#0_4_3 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                                      Tclass.State.M(State._default.LeftIdentity$B), 
                                      $l#0_4_24#heap#0, 
                                      f#0, 
                                      a#0_4_3)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                                  $l#0_4_24#heap#0, 
                                  g#0_4_3, 
                                  $Box(newState#0_4_3))): DatatypeType))))), 
                    (lambda $l#0_4_24#heap#0: Heap, $l#0_4_24#s#0: Box :: 
                      $IsBox($l#0_4_24#s#0, TInt)), 
                    (lambda $l#0_4_24#heap#0: Heap, $l#0_4_24#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_4_24#o#0: ref :: false))))), 
                $LS($LZ)))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_0;
            assume $IsGoodHeap($lambdaHeap#0_3_0);
            assume $Heap == $lambdaHeap#0_3_0 || $HeapSucc($Heap, $lambdaHeap#0_3_0);
            havoc s#0_3_0;
            if (true)
            {
                $_Frame#l0_3_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_0, $o, alloc)): bool ==> false);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_3_1;
                    assume $IsGoodHeap($lambdaHeap#0_3_1);
                    assume $lambdaHeap#0_3_0 == $lambdaHeap#0_3_1
                       || $HeapSucc($lambdaHeap#0_3_0, $lambdaHeap#0_3_1);
                    havoc s#0_3_1;
                    if (true)
                    {
                        $_Frame#l0_3_1 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_3_1, $o, alloc)): bool ==> false);
                        assume {:id "id72"} lambdaResult#0_3_1 == #_System._tuple#2._#Make2(x#0, $Box(s#0_3_1));
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_1, Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt));
                    }

                    assume false;
                }

                // End Comprehension WF check
                if ($Unbox(Apply1(TInt, 
                      Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                      $lambdaHeap#0_3_0, 
                      Lit(AtLayer((lambda $l#0_3_1#ly#0: LayerType :: 
                            Handle1((lambda $l#0_3_1#heap#0: Heap, $l#0_3_1#s#0: Box :: 
                                $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_1#s#0))), 
                              (lambda $l#0_3_1#heap#0: Heap, $l#0_3_1#s#0: Box :: $IsBox($l#0_3_1#s#0, TInt)), 
                              (lambda $l#0_3_1#heap#0: Heap, $l#0_3_1#s#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_3_1#o#0: ref :: false))))), 
                          $LS($LZ))), 
                      $Box(s#0_3_0))): DatatypeType
                   == #_System._tuple#2._#Make2(_mcc#0#0_3_0, $Box(_mcc#1#0_3_0)))
                {
                    assume $IsBox(_mcc#0#0_3_0, State._default.LeftIdentity$A);
                    havoc newState#Z#0_3_0;
                    assume {:id "id73"} let#0_3_0#0#0 == _mcc#1#0_3_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_3_0#0#0, TInt);
                    assume {:id "id74"} newState#Z#0_3_0 == let#0_3_0#0#0;
                    havoc a#Z#0_3_0;
                    assume {:id "id75"} let#0_3_1#0#0 == _mcc#0#0_3_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $IsBox(let#0_3_1#0#0, State._default.LeftIdentity$A);
                    assume {:id "id76"} a#Z#0_3_0 == let#0_3_1#0#0;
                    if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                          Tclass.State.M(State._default.LeftIdentity$B), 
                          $lambdaHeap#0_3_0, 
                          f#0, 
                          a#Z#0_3_0)): DatatypeType
                       == #State.M.State(_mcc#2#0_3_0))
                    {
                        assume $Is(_mcc#2#0_3_0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        havoc g#Z#0_3_0;
                        assume {:id "id77"} let#0_3_2#0#0 == _mcc#2#0_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_3_2#0#0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        assume {:id "id78"} g#Z#0_3_0 == let#0_3_2#0#0;
                        assume {:id "id79"} lambdaResult#0_3_0
                           == $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $Heap, 
                              g#Z#0_3_0, 
                              $Box(newState#Z#0_3_0))): DatatypeType;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_0, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                    }
                    else
                    {
                        assume false;
                    }
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_3_5#s#0: int, $l#0_3_5#heap#0: Heap :: 
          $IsGoodHeap($l#0_3_5#heap#0)
             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                    $l#0_3_5#heap#0, 
                    Lit(AtLayer((lambda $l#0_3_7#ly#0: LayerType :: 
                          Handle1((lambda $l#0_3_7#heap#0: Heap, $l#0_3_7#s#0: Box :: 
                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_7#s#0))), 
                            (lambda $l#0_3_7#heap#0: Heap, $l#0_3_7#s#0: Box :: $IsBox($l#0_3_7#s#0, TInt)), 
                            (lambda $l#0_3_7#heap#0: Heap, $l#0_3_7#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_3_7#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box($l#0_3_5#s#0))): DatatypeType)
               && 
              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                    $l#0_3_5#heap#0, 
                    Lit(AtLayer((lambda $l#0_3_9#ly#0: LayerType :: 
                          Handle1((lambda $l#0_3_9#heap#0: Heap, $l#0_3_9#s#0: Box :: 
                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_9#s#0))), 
                            (lambda $l#0_3_9#heap#0: Heap, $l#0_3_9#s#0: Box :: $IsBox($l#0_3_9#s#0, TInt)), 
                            (lambda $l#0_3_9#heap#0: Heap, $l#0_3_9#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_3_9#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box($l#0_3_5#s#0))): DatatypeType)
               && (var a#0_3_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                        $l#0_3_5#heap#0, 
                        Lit(AtLayer((lambda $l#0_3_10#ly#0: LayerType :: 
                              Handle1((lambda $l#0_3_10#heap#0: Heap, $l#0_3_10#s#0: Box :: 
                                  $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_10#s#0))), 
                                (lambda $l#0_3_10#heap#0: Heap, $l#0_3_10#s#0: Box :: 
                                  $IsBox($l#0_3_10#s#0, TInt)), 
                                (lambda $l#0_3_10#heap#0: Heap, $l#0_3_10#s#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_3_10#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box($l#0_3_5#s#0))): DatatypeType); 
                State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $l#0_3_5#heap#0, 
                      f#0, 
                      a#0_3_1)): DatatypeType)));
        // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(59,18)
        // TrCallStmt: Before ProcessCallStmt
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_2;
            assume $IsGoodHeap($lambdaHeap#0_3_2);
            assume $Heap == $lambdaHeap#0_3_2 || $HeapSucc($Heap, $lambdaHeap#0_3_2);
            havoc s#0_3_2;
            if (true)
            {
                $_Frame#l0_3_2 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_2, $o, alloc)): bool ==> false);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_3_3;
                    assume $IsGoodHeap($lambdaHeap#0_3_3);
                    assume $lambdaHeap#0_3_2 == $lambdaHeap#0_3_3
                       || $HeapSucc($lambdaHeap#0_3_2, $lambdaHeap#0_3_3);
                    havoc s#0_3_3;
                    if (true)
                    {
                        $_Frame#l0_3_3 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_3_3, $o, alloc)): bool ==> false);
                        assume {:id "id80"} lambdaResult#0_3_3 == #_System._tuple#2._#Make2(x#0, $Box(s#0_3_3));
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_3, Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt));
                    }

                    assume false;
                }

                // End Comprehension WF check
                if ($Unbox(Apply1(TInt, 
                      Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                      $lambdaHeap#0_3_2, 
                      Lit(AtLayer((lambda $l#0_3_13#ly#0: LayerType :: 
                            Handle1((lambda $l#0_3_13#heap#0: Heap, $l#0_3_13#s#0: Box :: 
                                $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_13#s#0))), 
                              (lambda $l#0_3_13#heap#0: Heap, $l#0_3_13#s#0: Box :: 
                                $IsBox($l#0_3_13#s#0, TInt)), 
                              (lambda $l#0_3_13#heap#0: Heap, $l#0_3_13#s#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_3_13#o#0: ref :: false))))), 
                          $LS($LZ))), 
                      $Box(s#0_3_2))): DatatypeType
                   == #_System._tuple#2._#Make2(_mcc#7#0_3_0, $Box(_mcc#8#0_3_0)))
                {
                    assume $IsBox(_mcc#7#0_3_0, State._default.LeftIdentity$A);
                    havoc newState#Z#0_3_1;
                    assume {:id "id81"} let#0_3_3#0#0 == _mcc#8#0_3_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_3_3#0#0, TInt);
                    assume {:id "id82"} newState#Z#0_3_1 == let#0_3_3#0#0;
                    havoc a#Z#0_3_1;
                    assume {:id "id83"} let#0_3_4#0#0 == _mcc#7#0_3_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $IsBox(let#0_3_4#0#0, State._default.LeftIdentity$A);
                    assume {:id "id84"} a#Z#0_3_1 == let#0_3_4#0#0;
                    if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                          Tclass.State.M(State._default.LeftIdentity$B), 
                          $lambdaHeap#0_3_2, 
                          f#0, 
                          a#Z#0_3_1)): DatatypeType
                       == #State.M.State(_mcc#9#0_3_0))
                    {
                        assume $Is(_mcc#9#0_3_0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        havoc g#Z#0_3_1;
                        assume {:id "id85"} let#0_3_5#0#0 == _mcc#9#0_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_3_5#0#0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        assume {:id "id86"} g#Z#0_3_1 == let#0_3_5#0#0;
                        assume {:id "id87"} lambdaResult#0_3_2
                           == $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $Heap, 
                              g#Z#0_3_1, 
                              $Box(newState#Z#0_3_1))): DatatypeType;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_2, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                    }
                    else
                    {
                        assume false;
                    }
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_3_14#s#0: int, $l#0_3_14#heap#0: Heap :: 
          $IsGoodHeap($l#0_3_14#heap#0)
             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                    $l#0_3_14#heap#0, 
                    Lit(AtLayer((lambda $l#0_3_16#ly#0: LayerType :: 
                          Handle1((lambda $l#0_3_16#heap#0: Heap, $l#0_3_16#s#0: Box :: 
                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_16#s#0))), 
                            (lambda $l#0_3_16#heap#0: Heap, $l#0_3_16#s#0: Box :: 
                              $IsBox($l#0_3_16#s#0, TInt)), 
                            (lambda $l#0_3_16#heap#0: Heap, $l#0_3_16#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_3_16#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box($l#0_3_14#s#0))): DatatypeType)
               && 
              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                    $l#0_3_14#heap#0, 
                    Lit(AtLayer((lambda $l#0_3_18#ly#0: LayerType :: 
                          Handle1((lambda $l#0_3_18#heap#0: Heap, $l#0_3_18#s#0: Box :: 
                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_18#s#0))), 
                            (lambda $l#0_3_18#heap#0: Heap, $l#0_3_18#s#0: Box :: 
                              $IsBox($l#0_3_18#s#0, TInt)), 
                            (lambda $l#0_3_18#heap#0: Heap, $l#0_3_18#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_3_18#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box($l#0_3_14#s#0))): DatatypeType)
               && (var a#0_3_2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                        $l#0_3_14#heap#0, 
                        Lit(AtLayer((lambda $l#0_3_19#ly#0: LayerType :: 
                              Handle1((lambda $l#0_3_19#heap#0: Heap, $l#0_3_19#s#0: Box :: 
                                  $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_19#s#0))), 
                                (lambda $l#0_3_19#heap#0: Heap, $l#0_3_19#s#0: Box :: 
                                  $IsBox($l#0_3_19#s#0, TInt)), 
                                (lambda $l#0_3_19#heap#0: Heap, $l#0_3_19#s#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_3_19#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box($l#0_3_14#s#0))): DatatypeType); 
                State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $l#0_3_14#heap#0, 
                      f#0, 
                      a#0_3_2)): DatatypeType)));
        // ProcessCallStmt: CheckSubrange
        f##0_3_0 := Lit(AtLayer((lambda $l#0_3_21#ly#0: LayerType :: 
              Handle1((lambda $l#0_3_21#heap#0: Heap, $l#0_3_21#s#0: Box :: 
                  $Box((var newState#0_3_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                                $l#0_3_21#heap#0, 
                                Lit(AtLayer((lambda $l#0_3_22#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_3_22#heap#0: Heap, $l#0_3_22#s#0: Box :: 
                                          $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_22#s#0))), 
                                        (lambda $l#0_3_22#heap#0: Heap, $l#0_3_22#s#0: Box :: 
                                          $IsBox($l#0_3_22#s#0, TInt)), 
                                        (lambda $l#0_3_22#heap#0: Heap, $l#0_3_22#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_3_22#o#0: ref :: false))))), 
                                    $l#0_3_21#ly#0)), 
                                $Box($Unbox($l#0_3_21#s#0): int))): DatatypeType)): int; 
                      (var a#0_3_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                                $l#0_3_21#heap#0, 
                                Lit(AtLayer((lambda $l#0_3_23#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_3_23#heap#0: Heap, $l#0_3_23#s#0: Box :: 
                                          $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_23#s#0))), 
                                        (lambda $l#0_3_23#heap#0: Heap, $l#0_3_23#s#0: Box :: 
                                          $IsBox($l#0_3_23#s#0, TInt)), 
                                        (lambda $l#0_3_23#heap#0: Heap, $l#0_3_23#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_3_23#o#0: ref :: false))))), 
                                    $l#0_3_21#ly#0)), 
                                $Box($Unbox($l#0_3_21#s#0): int))): DatatypeType); 
                        (var g#0_3_3 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                                  Tclass.State.M(State._default.LeftIdentity$B), 
                                  $l#0_3_21#heap#0, 
                                  f#0, 
                                  a#0_3_3)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $l#0_3_21#heap#0, 
                              g#0_3_3, 
                              $Box(newState#0_3_3))): DatatypeType))))), 
                (lambda $l#0_3_21#heap#0: Heap, $l#0_3_21#s#0: Box :: 
                  $IsBox($l#0_3_21#s#0, TInt)), 
                (lambda $l#0_3_21#heap#0: Heap, $l#0_3_21#s#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_3_21#o#0: ref :: false))))), 
            $LS($LZ)));
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_4;
            assume $IsGoodHeap($lambdaHeap#0_3_4);
            assume $Heap == $lambdaHeap#0_3_4 || $HeapSucc($Heap, $lambdaHeap#0_3_4);
            havoc s#0_3_4;
            if (true)
            {
                $_Frame#l0_3_4 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_4, $o, alloc)): bool ==> false);
                if (#_System._tuple#2._#Make2(x#0, $Box(s#0_3_4))
                   == #_System._tuple#2._#Make2(_mcc#10#0_3_0, $Box(_mcc#11#0_3_0)))
                {
                    assume $IsBox(_mcc#10#0_3_0, State._default.LeftIdentity$A);
                    havoc newState#Z#0_3_2;
                    assume {:id "id88"} let#0_3_6#0#0 == _mcc#11#0_3_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_3_6#0#0, TInt);
                    assume {:id "id89"} newState#Z#0_3_2 == let#0_3_6#0#0;
                    havoc a#Z#0_3_2;
                    assume {:id "id90"} let#0_3_7#0#0 == _mcc#10#0_3_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $IsBox(let#0_3_7#0#0, State._default.LeftIdentity$A);
                    assume {:id "id91"} a#Z#0_3_2 == let#0_3_7#0#0;
                    if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                          Tclass.State.M(State._default.LeftIdentity$B), 
                          $lambdaHeap#0_3_4, 
                          f#0, 
                          a#Z#0_3_2)): DatatypeType
                       == #State.M.State(_mcc#12#0_3_0))
                    {
                        assume $Is(_mcc#12#0_3_0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        havoc g#Z#0_3_2;
                        assume {:id "id92"} let#0_3_8#0#0 == _mcc#12#0_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_3_8#0#0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        assume {:id "id93"} g#Z#0_3_2 == let#0_3_8#0#0;
                        assume {:id "id94"} lambdaResult#0_3_4
                           == $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $Heap, 
                              g#Z#0_3_2, 
                              $Box(newState#Z#0_3_2))): DatatypeType;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_4, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                    }
                    else
                    {
                        assume false;
                    }
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_3_24#s#0: int, $l#0_3_24#heap#0: Heap :: 
          $IsGoodHeap($l#0_3_24#heap#0)
             ==> _System.Tuple2.___hMake2_q(#_System._tuple#2._#Make2(x#0, $Box($l#0_3_24#s#0)))
               && 
              _System.Tuple2.___hMake2_q(#_System._tuple#2._#Make2(x#0, $Box($l#0_3_24#s#0)))
               && (var a#0_3_4 := _System.Tuple2._0(#_System._tuple#2._#Make2(x#0, $Box($l#0_3_24#s#0))); 
                State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $l#0_3_24#heap#0, 
                      f#0, 
                      a#0_3_4)): DatatypeType)));
        // ProcessCallStmt: CheckSubrange
        g##0_3_0 := Lit(AtLayer((lambda $l#0_3_25#ly#0: LayerType :: 
              Handle1((lambda $l#0_3_25#heap#0: Heap, $l#0_3_25#s#0: Box :: 
                  $Box((var newState#0_3_5 := $Unbox(_System.Tuple2._1(#_System._tuple#2._#Make2(x#0, $l#0_3_25#s#0))): int; 
                      (var a#0_3_5 := _System.Tuple2._0(#_System._tuple#2._#Make2(x#0, $l#0_3_25#s#0)); 
                        (var g#0_3_5 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                                  Tclass.State.M(State._default.LeftIdentity$B), 
                                  $l#0_3_25#heap#0, 
                                  f#0, 
                                  a#0_3_5)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $l#0_3_25#heap#0, 
                              g#0_3_5, 
                              $Box(newState#0_3_5))): DatatypeType))))), 
                (lambda $l#0_3_25#heap#0: Heap, $l#0_3_25#s#0: Box :: 
                  $IsBox($l#0_3_25#s#0, TInt)), 
                (lambda $l#0_3_25#heap#0: Heap, $l#0_3_25#s#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_3_25#o#0: ref :: false))))), 
            $LS($LZ)));
        call {:id "id95"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), f##0_3_0, g##0_3_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_5;
            assume $IsGoodHeap($lambdaHeap#0_3_5);
            assume $Heap == $lambdaHeap#0_3_5 || $HeapSucc($Heap, $lambdaHeap#0_3_5);
            havoc s#0_3_5;
            if (true)
            {
                $_Frame#l0_3_5 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_5, $o, alloc)): bool ==> false);
                if (#_System._tuple#2._#Make2(x#0, $Box(s#0_3_5))
                   == #_System._tuple#2._#Make2(_mcc#3#0_2_0, $Box(_mcc#4#0_2_0)))
                {
                    assume $IsBox(_mcc#3#0_2_0, State._default.LeftIdentity$A);
                    havoc newState#Z#0_3_3;
                    assume {:id "id96"} let#0_3_9#0#0 == _mcc#4#0_2_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_3_9#0#0, TInt);
                    assume {:id "id97"} newState#Z#0_3_3 == let#0_3_9#0#0;
                    havoc a#Z#0_3_3;
                    assume {:id "id98"} let#0_3_10#0#0 == _mcc#3#0_2_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $IsBox(let#0_3_10#0#0, State._default.LeftIdentity$A);
                    assume {:id "id99"} a#Z#0_3_3 == let#0_3_10#0#0;
                    if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                          Tclass.State.M(State._default.LeftIdentity$B), 
                          $lambdaHeap#0_3_5, 
                          f#0, 
                          a#Z#0_3_3)): DatatypeType
                       == #State.M.State(_mcc#5#0_2_0))
                    {
                        assume $Is(_mcc#5#0_2_0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        havoc g#Z#0_3_3;
                        assume {:id "id100"} let#0_3_11#0#0 == _mcc#5#0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_3_11#0#0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        assume {:id "id101"} g#Z#0_3_3 == let#0_3_11#0#0;
                        assume {:id "id102"} lambdaResult#0_3_5
                           == $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $Heap, 
                              g#Z#0_3_3, 
                              $Box(newState#Z#0_3_3))): DatatypeType;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_5, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                    }
                    else
                    {
                        assume false;
                    }
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_3_27#s#0: int, $l#0_3_27#heap#0: Heap :: 
          $IsGoodHeap($l#0_3_27#heap#0)
             ==> _System.Tuple2.___hMake2_q(#_System._tuple#2._#Make2(x#0, $Box($l#0_3_27#s#0)))
               && 
              _System.Tuple2.___hMake2_q(#_System._tuple#2._#Make2(x#0, $Box($l#0_3_27#s#0)))
               && (var a#0_3_7 := _System.Tuple2._0(#_System._tuple#2._#Make2(x#0, $Box($l#0_3_27#s#0))); 
                State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $l#0_3_27#heap#0, 
                      f#0, 
                      a#0_3_7)): DatatypeType)));
        // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        assert {:id "id103"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_3_32#ly#0: LayerType :: 
                  Handle1((lambda $l#0_3_32#heap#0: Heap, $l#0_3_32#s#0: Box :: 
                      $Box((var newState#0_3_10 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                                    $l#0_3_32#heap#0, 
                                    Lit(AtLayer((lambda $l#0_3_33#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_3_33#heap#0: Heap, $l#0_3_33#s#0: Box :: 
                                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_33#s#0))), 
                                            (lambda $l#0_3_33#heap#0: Heap, $l#0_3_33#s#0: Box :: 
                                              $IsBox($l#0_3_33#s#0, TInt)), 
                                            (lambda $l#0_3_33#heap#0: Heap, $l#0_3_33#s#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_3_33#o#0: ref :: false))))), 
                                        $l#0_3_32#ly#0)), 
                                    $Box($Unbox($l#0_3_32#s#0): int))): DatatypeType)): int; 
                          (var a#0_3_10 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.LeftIdentity$A, TInt), 
                                    $l#0_3_32#heap#0, 
                                    Lit(AtLayer((lambda $l#0_3_34#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_3_34#heap#0: Heap, $l#0_3_34#s#0: Box :: 
                                              $Box(#_System._tuple#2._#Make2(x#0, $l#0_3_34#s#0))), 
                                            (lambda $l#0_3_34#heap#0: Heap, $l#0_3_34#s#0: Box :: 
                                              $IsBox($l#0_3_34#s#0, TInt)), 
                                            (lambda $l#0_3_34#heap#0: Heap, $l#0_3_34#s#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_3_34#o#0: ref :: false))))), 
                                        $l#0_3_32#ly#0)), 
                                    $Box($Unbox($l#0_3_32#s#0): int))): DatatypeType); 
                            (var g#0_3_10 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                                      Tclass.State.M(State._default.LeftIdentity$B), 
                                      $l#0_3_32#heap#0, 
                                      f#0, 
                                      a#0_3_10)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                                  $l#0_3_32#heap#0, 
                                  g#0_3_10, 
                                  $Box(newState#0_3_10))): DatatypeType))))), 
                    (lambda $l#0_3_32#heap#0: Heap, $l#0_3_32#s#0: Box :: 
                      $IsBox($l#0_3_32#s#0, TInt)), 
                    (lambda $l#0_3_32#heap#0: Heap, $l#0_3_32#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_3_32#o#0: ref :: false))))), 
                $LS($LZ)))), 
          #State.M.State(Lit(AtLayer((lambda $l#0_3_35#ly#0: LayerType :: 
                  Handle1((lambda $l#0_3_35#heap#0: Heap, $l#0_3_35#s#0: Box :: 
                      $Box((var newState#0_3_11 := $Unbox(_System.Tuple2._1(#_System._tuple#2._#Make2(x#0, $l#0_3_35#s#0))): int; 
                          (var a#0_3_11 := _System.Tuple2._0(#_System._tuple#2._#Make2(x#0, $l#0_3_35#s#0)); 
                            (var g#0_3_11 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                                      Tclass.State.M(State._default.LeftIdentity$B), 
                                      $l#0_3_35#heap#0, 
                                      f#0, 
                                      a#0_3_11)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                                  $l#0_3_35#heap#0, 
                                  g#0_3_11, 
                                  $Box(newState#0_3_11))): DatatypeType))))), 
                    (lambda $l#0_3_35#heap#0: Heap, $l#0_3_35#s#0: Box :: 
                      $IsBox($l#0_3_35#s#0, TInt)), 
                    (lambda $l#0_3_35#heap#0: Heap, $l#0_3_35#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_3_35#o#0: ref :: false))))), 
                $LS($LZ)))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_2_0;
            assume $IsGoodHeap($lambdaHeap#0_2_0);
            assume $Heap == $lambdaHeap#0_2_0 || $HeapSucc($Heap, $lambdaHeap#0_2_0);
            havoc s#0_2_0;
            if (true)
            {
                $_Frame#l0_2_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_2_0, $o, alloc)): bool ==> false);
                if (#_System._tuple#2._#Make2(x#0, $Box(s#0_2_0))
                   == #_System._tuple#2._#Make2(_mcc#3#0_2_0, $Box(_mcc#4#0_2_0)))
                {
                    assume $IsBox(_mcc#3#0_2_0, State._default.LeftIdentity$A);
                    havoc newState#Z#0_2_0;
                    assume {:id "id50"} let#0_2_0#0#0 == _mcc#4#0_2_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_2_0#0#0, TInt);
                    assume {:id "id51"} newState#Z#0_2_0 == let#0_2_0#0#0;
                    havoc a#Z#0_2_0;
                    assume {:id "id52"} let#0_2_1#0#0 == _mcc#3#0_2_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $IsBox(let#0_2_1#0#0, State._default.LeftIdentity$A);
                    assume {:id "id53"} a#Z#0_2_0 == let#0_2_1#0#0;
                    if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                          Tclass.State.M(State._default.LeftIdentity$B), 
                          $lambdaHeap#0_2_0, 
                          f#0, 
                          a#Z#0_2_0)): DatatypeType
                       == #State.M.State(_mcc#5#0_2_0))
                    {
                        assume $Is(_mcc#5#0_2_0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        havoc g#Z#0_2_0;
                        assume {:id "id54"} let#0_2_2#0#0 == _mcc#5#0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_2_2#0#0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        assume {:id "id55"} g#Z#0_2_0 == let#0_2_2#0#0;
                        assume {:id "id56"} lambdaResult#0_2_0
                           == $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $Heap, 
                              g#Z#0_2_0, 
                              $Box(newState#Z#0_2_0))): DatatypeType;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_2_0, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                    }
                    else
                    {
                        assume false;
                    }
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_2_1#s#0: int, $l#0_2_1#heap#0: Heap :: 
          $IsGoodHeap($l#0_2_1#heap#0)
             ==> _System.Tuple2.___hMake2_q(#_System._tuple#2._#Make2(x#0, $Box($l#0_2_1#s#0)))
               && 
              _System.Tuple2.___hMake2_q(#_System._tuple#2._#Make2(x#0, $Box($l#0_2_1#s#0)))
               && (var a#0_2_1 := _System.Tuple2._0(#_System._tuple#2._#Make2(x#0, $Box($l#0_2_1#s#0))); 
                State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $l#0_2_1#heap#0, 
                      f#0, 
                      a#0_2_1)): DatatypeType)));
        // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(75,18)
        // TrCallStmt: Before ProcessCallStmt
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_2_1;
            assume $IsGoodHeap($lambdaHeap#0_2_1);
            assume $Heap == $lambdaHeap#0_2_1 || $HeapSucc($Heap, $lambdaHeap#0_2_1);
            havoc s#0_2_1;
            if (true)
            {
                $_Frame#l0_2_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_2_1, $o, alloc)): bool ==> false);
                if (#_System._tuple#2._#Make2(x#0, $Box(s#0_2_1))
                   == #_System._tuple#2._#Make2(_mcc#13#0_2_0, $Box(_mcc#14#0_2_0)))
                {
                    assume $IsBox(_mcc#13#0_2_0, State._default.LeftIdentity$A);
                    havoc newState#Z#0_2_1;
                    assume {:id "id57"} let#0_2_3#0#0 == _mcc#14#0_2_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_2_3#0#0, TInt);
                    assume {:id "id58"} newState#Z#0_2_1 == let#0_2_3#0#0;
                    havoc a#Z#0_2_1;
                    assume {:id "id59"} let#0_2_4#0#0 == _mcc#13#0_2_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $IsBox(let#0_2_4#0#0, State._default.LeftIdentity$A);
                    assume {:id "id60"} a#Z#0_2_1 == let#0_2_4#0#0;
                    if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                          Tclass.State.M(State._default.LeftIdentity$B), 
                          $lambdaHeap#0_2_1, 
                          f#0, 
                          a#Z#0_2_1)): DatatypeType
                       == #State.M.State(_mcc#15#0_2_0))
                    {
                        assume $Is(_mcc#15#0_2_0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        havoc g#Z#0_2_1;
                        assume {:id "id61"} let#0_2_5#0#0 == _mcc#15#0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_2_5#0#0, 
                          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                        assume {:id "id62"} g#Z#0_2_1 == let#0_2_5#0#0;
                        assume {:id "id63"} lambdaResult#0_2_1
                           == $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $Heap, 
                              g#Z#0_2_1, 
                              $Box(newState#Z#0_2_1))): DatatypeType;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_2_1, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                    }
                    else
                    {
                        assume false;
                    }
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_2_2#s#0: int, $l#0_2_2#heap#0: Heap :: 
          $IsGoodHeap($l#0_2_2#heap#0)
             ==> _System.Tuple2.___hMake2_q(#_System._tuple#2._#Make2(x#0, $Box($l#0_2_2#s#0)))
               && 
              _System.Tuple2.___hMake2_q(#_System._tuple#2._#Make2(x#0, $Box($l#0_2_2#s#0)))
               && (var a#0_2_2 := _System.Tuple2._0(#_System._tuple#2._#Make2(x#0, $Box($l#0_2_2#s#0))); 
                State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $l#0_2_2#heap#0, 
                      f#0, 
                      a#0_2_2)): DatatypeType)));
        // ProcessCallStmt: CheckSubrange
        f##0_2_0 := Lit(AtLayer((lambda $l#0_2_3#ly#0: LayerType :: 
              Handle1((lambda $l#0_2_3#heap#0: Heap, $l#0_2_3#s#0: Box :: 
                  $Box((var newState#0_2_3 := $Unbox(_System.Tuple2._1(#_System._tuple#2._#Make2(x#0, $l#0_2_3#s#0))): int; 
                      (var a#0_2_3 := _System.Tuple2._0(#_System._tuple#2._#Make2(x#0, $l#0_2_3#s#0)); 
                        (var g#0_2_3 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                                  Tclass.State.M(State._default.LeftIdentity$B), 
                                  $l#0_2_3#heap#0, 
                                  f#0, 
                                  a#0_2_3)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $l#0_2_3#heap#0, 
                              g#0_2_3, 
                              $Box(newState#0_2_3))): DatatypeType))))), 
                (lambda $l#0_2_3#heap#0: Heap, $l#0_2_3#s#0: Box :: $IsBox($l#0_2_3#s#0, TInt)), 
                (lambda $l#0_2_3#heap#0: Heap, $l#0_2_3#s#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_2_3#o#0: ref :: false))))), 
            $LS($LZ)));
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_2_2;
            assume $IsGoodHeap($lambdaHeap#0_2_2);
            assume $Heap == $lambdaHeap#0_2_2 || $HeapSucc($Heap, $lambdaHeap#0_2_2);
            havoc s#0_2_2;
            if (true)
            {
                $_Frame#l0_2_2 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_2_2, $o, alloc)): bool ==> false);
                if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $lambdaHeap#0_2_2, 
                      f#0, 
                      x#0)): DatatypeType
                   == #State.M.State(_mcc#16#0_2_0))
                {
                    assume $Is(_mcc#16#0_2_0, 
                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                    havoc g#Z#0_2_2;
                    assume {:id "id64"} let#0_2_6#0#0 == _mcc#16#0_2_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_2_6#0#0, 
                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                    assume {:id "id65"} g#Z#0_2_2 == let#0_2_6#0#0;
                    assume {:id "id66"} lambdaResult#0_2_2
                       == $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                          $Heap, 
                          g#Z#0_2_2, 
                          $Box(s#0_2_2))): DatatypeType;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_2_2, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_2_4#heap#0: Heap :: 
          $IsGoodHeap($l#0_2_4#heap#0)
             ==> State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                  Tclass.State.M(State._default.LeftIdentity$B), 
                  $l#0_2_4#heap#0, 
                  f#0, 
                  x#0)): DatatypeType));
        // ProcessCallStmt: CheckSubrange
        g##0_2_0 := Lit(AtLayer((lambda $l#0_2_5#ly#0: LayerType :: 
              Handle1((lambda $l#0_2_5#heap#0: Heap, $l#0_2_5#s#0: Box :: 
                  $Box((var g#0_2_5 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                              Tclass.State.M(State._default.LeftIdentity$B), 
                              $l#0_2_5#heap#0, 
                              f#0, 
                              x#0)): DatatypeType); 
                      $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                          $l#0_2_5#heap#0, 
                          g#0_2_5, 
                          $Box($Unbox($l#0_2_5#s#0): int))): DatatypeType))), 
                (lambda $l#0_2_5#heap#0: Heap, $l#0_2_5#s#0: Box :: $IsBox($l#0_2_5#s#0, TInt)), 
                (lambda $l#0_2_5#heap#0: Heap, $l#0_2_5#s#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_2_5#o#0: ref :: false))))), 
            $LS($LZ)));
        call {:id "id67"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), f##0_2_0, g##0_2_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_2_3;
            assume $IsGoodHeap($lambdaHeap#0_2_3);
            assume $Heap == $lambdaHeap#0_2_3 || $HeapSucc($Heap, $lambdaHeap#0_2_3);
            havoc s#0_2_3;
            if (true)
            {
                $_Frame#l0_2_3 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_2_3, $o, alloc)): bool ==> false);
                if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $lambdaHeap#0_2_3, 
                      f#0, 
                      x#0)): DatatypeType
                   == #State.M.State(_mcc#6#0_1_0))
                {
                    assume $Is(_mcc#6#0_1_0, 
                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                    havoc g#Z#0_2_3;
                    assume {:id "id68"} let#0_2_7#0#0 == _mcc#6#0_1_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_2_7#0#0, 
                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                    assume {:id "id69"} g#Z#0_2_3 == let#0_2_7#0#0;
                    assume {:id "id70"} lambdaResult#0_2_3
                       == $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                          $Heap, 
                          g#Z#0_2_3, 
                          $Box(s#0_2_3))): DatatypeType;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_2_3, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_2_7#heap#0: Heap :: 
          $IsGoodHeap($l#0_2_7#heap#0)
             ==> State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                  Tclass.State.M(State._default.LeftIdentity$B), 
                  $l#0_2_7#heap#0, 
                  f#0, 
                  x#0)): DatatypeType));
        // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        assert {:id "id71"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_2_10#ly#0: LayerType :: 
                  Handle1((lambda $l#0_2_10#heap#0: Heap, $l#0_2_10#s#0: Box :: 
                      $Box((var newState#0_2_5 := $Unbox(_System.Tuple2._1(#_System._tuple#2._#Make2(x#0, $l#0_2_10#s#0))): int; 
                          (var a#0_2_5 := _System.Tuple2._0(#_System._tuple#2._#Make2(x#0, $l#0_2_10#s#0)); 
                            (var g#0_2_10 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                                      Tclass.State.M(State._default.LeftIdentity$B), 
                                      $l#0_2_10#heap#0, 
                                      f#0, 
                                      a#0_2_5)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                                  $l#0_2_10#heap#0, 
                                  g#0_2_10, 
                                  $Box(newState#0_2_5))): DatatypeType))))), 
                    (lambda $l#0_2_10#heap#0: Heap, $l#0_2_10#s#0: Box :: 
                      $IsBox($l#0_2_10#s#0, TInt)), 
                    (lambda $l#0_2_10#heap#0: Heap, $l#0_2_10#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_2_10#o#0: ref :: false))))), 
                $LS($LZ)))), 
          #State.M.State(Lit(AtLayer((lambda $l#0_2_11#ly#0: LayerType :: 
                  Handle1((lambda $l#0_2_11#heap#0: Heap, $l#0_2_11#s#0: Box :: 
                      $Box((var g#0_2_11 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                                  Tclass.State.M(State._default.LeftIdentity$B), 
                                  $l#0_2_11#heap#0, 
                                  f#0, 
                                  x#0)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $l#0_2_11#heap#0, 
                              g#0_2_11, 
                              $Box($Unbox($l#0_2_11#s#0): int))): DatatypeType))), 
                    (lambda $l#0_2_11#heap#0: Heap, $l#0_2_11#s#0: Box :: 
                      $IsBox($l#0_2_11#s#0, TInt)), 
                    (lambda $l#0_2_11#heap#0: Heap, $l#0_2_11#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_2_11#o#0: ref :: false))))), 
                $LS($LZ)))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_1_0;
            assume $IsGoodHeap($lambdaHeap#0_1_0);
            assume $Heap == $lambdaHeap#0_1_0 || $HeapSucc($Heap, $lambdaHeap#0_1_0);
            havoc s#0_1_0;
            if (true)
            {
                $_Frame#l0_1_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_1_0, $o, alloc)): bool ==> false);
                if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $lambdaHeap#0_1_0, 
                      f#0, 
                      x#0)): DatatypeType
                   == #State.M.State(_mcc#6#0_1_0))
                {
                    assume $Is(_mcc#6#0_1_0, 
                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                    havoc g#Z#0_1_0;
                    assume {:id "id42"} let#0_1_0#0#0 == _mcc#6#0_1_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_1_0#0#0, 
                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                    assume {:id "id43"} g#Z#0_1_0 == let#0_1_0#0#0;
                    assume {:id "id44"} lambdaResult#0_1_0
                       == $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                          $Heap, 
                          g#Z#0_1_0, 
                          $Box(s#0_1_0))): DatatypeType;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_1_0, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_1_1#heap#0: Heap :: 
          $IsGoodHeap($l#0_1_1#heap#0)
             ==> State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                  Tclass.State.M(State._default.LeftIdentity$B), 
                  $l#0_1_1#heap#0, 
                  f#0, 
                  x#0)): DatatypeType));
        // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(81,17)
        // TrCallStmt: Before ProcessCallStmt
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_1_1;
            assume $IsGoodHeap($lambdaHeap#0_1_1);
            assume $Heap == $lambdaHeap#0_1_1 || $HeapSucc($Heap, $lambdaHeap#0_1_1);
            havoc s#0_1_1;
            if (true)
            {
                $_Frame#l0_1_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_1_1, $o, alloc)): bool ==> false);
                if ($Unbox(Apply1(State._default.LeftIdentity$A, 
                      Tclass.State.M(State._default.LeftIdentity$B), 
                      $lambdaHeap#0_1_1, 
                      f#0, 
                      x#0)): DatatypeType
                   == #State.M.State(_mcc#17#0_1_0))
                {
                    assume $Is(_mcc#17#0_1_0, 
                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                    havoc g#Z#0_1_1;
                    assume {:id "id45"} let#0_1_1#0#0 == _mcc#17#0_1_0;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0_1_1#0#0, 
                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt)));
                    assume {:id "id46"} g#Z#0_1_1 == let#0_1_1#0#0;
                    assume {:id "id47"} lambdaResult#0_1_1
                       == $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                          $Heap, 
                          g#Z#0_1_1, 
                          $Box(s#0_1_1))): DatatypeType;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_1_1, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt));
                }
                else
                {
                    assume false;
                }
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_1_2#heap#0: Heap :: 
          $IsGoodHeap($l#0_1_2#heap#0)
             ==> State.M.State_q($Unbox(Apply1(State._default.LeftIdentity$A, 
                  Tclass.State.M(State._default.LeftIdentity$B), 
                  $l#0_1_2#heap#0, 
                  f#0, 
                  x#0)): DatatypeType));
        // ProcessCallStmt: CheckSubrange
        f##0_1_0 := Lit(AtLayer((lambda $l#0_1_3#ly#0: LayerType :: 
              Handle1((lambda $l#0_1_3#heap#0: Heap, $l#0_1_3#s#0: Box :: 
                  $Box((var g#0_1_3 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                              Tclass.State.M(State._default.LeftIdentity$B), 
                              $l#0_1_3#heap#0, 
                              f#0, 
                              x#0)): DatatypeType); 
                      $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                          $l#0_1_3#heap#0, 
                          g#0_1_3, 
                          $Box($Unbox($l#0_1_3#s#0): int))): DatatypeType))), 
                (lambda $l#0_1_3#heap#0: Heap, $l#0_1_3#s#0: Box :: $IsBox($l#0_1_3#s#0, TInt)), 
                (lambda $l#0_1_3#heap#0: Heap, $l#0_1_3#s#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_1_3#o#0: ref :: false))))), 
            $LS($LZ)));
        assume true;
        // ProcessCallStmt: CheckSubrange
        g##0_1_0 := g2#0;
        call {:id "id48"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), f##0_1_0, g##0_1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        assume true;
        // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        assert {:id "id49"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_1_5#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_5#heap#0: Heap, $l#0_1_5#s#0: Box :: 
                      $Box((var g#0_1_5 := State.M.runState($Unbox(Apply1(State._default.LeftIdentity$A, 
                                  Tclass.State.M(State._default.LeftIdentity$B), 
                                  $l#0_1_5#heap#0, 
                                  f#0, 
                                  x#0)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.LeftIdentity$B, TInt), 
                              $l#0_1_5#heap#0, 
                              g#0_1_5, 
                              $Box($Unbox($l#0_1_5#s#0): int))): DatatypeType))), 
                    (lambda $l#0_1_5#heap#0: Heap, $l#0_1_5#s#0: Box :: $IsBox($l#0_1_5#s#0, TInt)), 
                    (lambda $l#0_1_5#heap#0: Heap, $l#0_1_5#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_5#o#0: ref :: false))))), 
                $LS($LZ)))), 
          #State.M.State(g2#0));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        assume true;
        // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        assume true;
        // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(48,7)
        assert {:id "id41"} {:subsumption 0} State.M#Equal(#State.M.State(g2#0), 
          $Unbox(Apply1(State._default.LeftIdentity$A, 
              Tclass.State.M(State._default.LeftIdentity$B), 
              $Heap, 
              f#0, 
              x#0)): DatatypeType);
        assume false;
    }

    assume {:id "id116"} State.M#Equal(State.__default.Bind(State._default.LeftIdentity$A, 
        State._default.LeftIdentity$B, 
        State.__default.Return(State._default.LeftIdentity$A, x#0), 
        f#0), 
      $Unbox(Apply1(State._default.LeftIdentity$A, 
          Tclass.State.M(State._default.LeftIdentity$B), 
          $Heap, 
          f#0, 
          x#0)): DatatypeType);
}



procedure {:verboseName "State.RightIdentity (well-formedness)"} CheckWellFormed$$State.__default.RightIdentity(State._default.RightIdentity$A: Ty, 
    m#0: DatatypeType
       where $Is(m#0, Tclass.State.M(State._default.RightIdentity$A))
         && $IsAlloc(m#0, Tclass.State.M(State._default.RightIdentity$A), $Heap)
         && $IsA#State.M(m#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "State.RightIdentity (call)"} Call$$State.__default.RightIdentity(State._default.RightIdentity$A: Ty, 
    m#0: DatatypeType
       where $Is(m#0, Tclass.State.M(State._default.RightIdentity$A))
         && $IsAlloc(m#0, Tclass.State.M(State._default.RightIdentity$A), $Heap)
         && $IsA#State.M(m#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#State.M(State.__default.Bind(State._default.RightIdentity$A, 
        State._default.RightIdentity$A, 
        m#0, 
        Lit(AtLayer((lambda $l#7#ly#0: LayerType :: 
              Handle1((lambda $l#7#heap#0: Heap, $l#7#x#0: Box :: 
                  $Box(State.__default.Return(State._default.RightIdentity$A, $l#7#x#0))), 
                (lambda $l#7#heap#0: Heap, $l#7#x#0: Box :: 
                  $IsBox($l#7#x#0, State._default.RightIdentity$A)), 
                (lambda $l#7#heap#0: Heap, $l#7#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#7#o#0: ref :: false))))), 
            $LS($LZ)))))
     && $IsA#State.M(m#0)
     && 
    (forall $l#5#x#0: Box :: 
      $IsBox($l#5#x#0, State._default.RightIdentity$A)
         ==> State.__default.Return#canCall(State._default.RightIdentity$A, $l#5#x#0))
     && State.__default.Bind#canCall(State._default.RightIdentity$A, 
      State._default.RightIdentity$A, 
      m#0, 
      Lit(AtLayer((lambda $l#6#ly#0: LayerType :: 
            Handle1((lambda $l#6#heap#0: Heap, $l#6#x#0: Box :: 
                $Box(State.__default.Return(State._default.RightIdentity$A, $l#6#x#0))), 
              (lambda $l#6#heap#0: Heap, $l#6#x#0: Box :: 
                $IsBox($l#6#x#0, State._default.RightIdentity$A)), 
              (lambda $l#6#heap#0: Heap, $l#6#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#6#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id119"} State.M#Equal(State.__default.Bind(State._default.RightIdentity$A, 
      State._default.RightIdentity$A, 
      m#0, 
      Lit(AtLayer((lambda $l#8#ly#0: LayerType :: 
            Handle1((lambda $l#8#heap#0: Heap, $l#8#x#0: Box :: 
                $Box(State.__default.Return(State._default.RightIdentity$A, $l#8#x#0))), 
              (lambda $l#8#heap#0: Heap, $l#8#x#0: Box :: 
                $IsBox($l#8#x#0, State._default.RightIdentity$A)), 
              (lambda $l#8#heap#0: Heap, $l#8#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#8#o#0: ref :: false))))), 
          $LS($LZ)))), 
    m#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "State.RightIdentity (correctness)"} Impl$$State.__default.RightIdentity(State._default.RightIdentity$A: Ty, 
    m#0: DatatypeType
       where $Is(m#0, Tclass.State.M(State._default.RightIdentity$A))
         && $IsAlloc(m#0, Tclass.State.M(State._default.RightIdentity$A), $Heap)
         && $IsA#State.M(m#0))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#State.M(State.__default.Bind(State._default.RightIdentity$A, 
        State._default.RightIdentity$A, 
        m#0, 
        Lit(AtLayer((lambda $l#11#ly#0: LayerType :: 
              Handle1((lambda $l#11#heap#0: Heap, $l#11#x#0: Box :: 
                  $Box(State.__default.Return(State._default.RightIdentity$A, $l#11#x#0))), 
                (lambda $l#11#heap#0: Heap, $l#11#x#0: Box :: 
                  $IsBox($l#11#x#0, State._default.RightIdentity$A)), 
                (lambda $l#11#heap#0: Heap, $l#11#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#11#o#0: ref :: false))))), 
            $LS($LZ)))))
     && $IsA#State.M(m#0)
     && 
    (forall $l#9#x#0: Box :: 
      $IsBox($l#9#x#0, State._default.RightIdentity$A)
         ==> State.__default.Return#canCall(State._default.RightIdentity$A, $l#9#x#0))
     && State.__default.Bind#canCall(State._default.RightIdentity$A, 
      State._default.RightIdentity$A, 
      m#0, 
      Lit(AtLayer((lambda $l#10#ly#0: LayerType :: 
            Handle1((lambda $l#10#heap#0: Heap, $l#10#x#0: Box :: 
                $Box(State.__default.Return(State._default.RightIdentity$A, $l#10#x#0))), 
              (lambda $l#10#heap#0: Heap, $l#10#x#0: Box :: 
                $IsBox($l#10#x#0, State._default.RightIdentity$A)), 
              (lambda $l#10#heap#0: Heap, $l#10#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#10#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id120"} State.M#Equal(State.__default.Bind(State._default.RightIdentity$A, 
      State._default.RightIdentity$A, 
      m#0, 
      Lit(AtLayer((lambda $l#12#ly#0: LayerType :: 
            Handle1((lambda $l#12#heap#0: Heap, $l#12#x#0: Box :: 
                $Box(State.__default.Return(State._default.RightIdentity$A, $l#12#x#0))), 
              (lambda $l#12#heap#0: Heap, $l#12#x#0: Box :: 
                $IsBox($l#12#x#0, State._default.RightIdentity$A)), 
              (lambda $l#12#heap#0: Heap, $l#12#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#12#o#0: ref :: false))))), 
          $LS($LZ)))), 
    m#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "State.RightIdentity (correctness)"} Impl$$State.__default.RightIdentity(State._default.RightIdentity$A: Ty, m#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var _mcc#0#0_0: HandleType;
  var h#0_0: HandleType;
  var let#0_0#0#0: HandleType;
  var $lambdaHeap#0_0_1_0: Heap;
  var s#0_0_1_0: int;
  var $_Frame#l0_0_1_0: [ref,Field]bool;
  var lambdaResult#0_0_1_0: DatatypeType;
  var f##0_0_1_0: HandleType;
  var $lambdaHeap#0_0_1_1: Heap;
  var s#0_0_1_1: int;
  var $_Frame#l0_0_1_1: [ref,Field]bool;
  var lambdaResult#0_0_1_1: DatatypeType;
  var g##0_0_1_0: HandleType;
  var $lambdaHeap#0_0_2_0: Heap;
  var s#0_0_2_0: int;
  var $_Frame#l0_0_2_0: [ref,Field]bool;
  var lambdaResult#0_0_2_0: DatatypeType;
  var _mcc#4#0_0_2_0: Box;
  var _mcc#5#0_0_2_0: int;
  var newState#Z#0_0_2_0: int;
  var let#0_0_2_0#0#0: int;
  var a#Z#0_0_2_0: Box;
  var let#0_0_2_1#0#0: Box;
  var $lambdaHeap#0_0_2_1: Heap;
  var x#0_0_2_0: Box;
  var $_Frame#l0_0_2_1: [ref,Field]bool;
  var lambdaResult#0_0_2_1: DatatypeType;
  var ##x#0_0_2_0: Box;
  var _mcc#6#0_0_2_0: HandleType;
  var g#Z#0_0_2_0: HandleType;
  var let#0_0_2_2#0#0: HandleType;
  var f##0_0_2_0: HandleType;
  var $lambdaHeap#0_0_2_2: Heap;
  var s#0_0_2_1: int;
  var $_Frame#l0_0_2_2: [ref,Field]bool;
  var lambdaResult#0_0_2_2: DatatypeType;
  var _mcc#7#0_0_2_0: Box;
  var _mcc#8#0_0_2_0: int;
  var newState#Z#0_0_2_1: int;
  var let#0_0_2_3#0#0: int;
  var a#Z#0_0_2_1: Box;
  var let#0_0_2_4#0#0: Box;
  var $lambdaHeap#0_0_2_3: Heap;
  var x#0_0_2_1: Box;
  var $_Frame#l0_0_2_3: [ref,Field]bool;
  var lambdaResult#0_0_2_3: DatatypeType;
  var ##x#0_0_2_1: Box;
  var _mcc#9#0_0_2_0: HandleType;
  var g#Z#0_0_2_1: HandleType;
  var let#0_0_2_5#0#0: HandleType;
  var g##0_0_2_0: HandleType;
  var $lambdaHeap#0_0_2_4: Heap;
  var s#0_0_2_2: int;
  var $_Frame#l0_0_2_4: [ref,Field]bool;
  var lambdaResult#0_0_2_4: DatatypeType;
  var $lambdaHeap#0_0_2_5: Heap;
  var s#0_0_2_3: int;
  var $_Frame#l0_0_2_5: [ref,Field]bool;
  var lambdaResult#0_0_2_5: DatatypeType;
  var ##m#0_0_3_0: DatatypeType;
  var ##f#0_0_3_0: HandleType;
  var $lambdaHeap#0_0_3_0: Heap;
  var x#0_0_3_0: Box;
  var $_Frame#l0_0_3_0: [ref,Field]bool;
  var lambdaResult#0_0_3_0: DatatypeType;
  var ##x#0_0_3_0: Box;
  var $lambdaHeap#0_0_3_1: Heap;
  var s#0_0_3_0: int;
  var $_Frame#l0_0_3_1: [ref,Field]bool;
  var lambdaResult#0_0_3_1: DatatypeType;
  var _mcc#1#0_0_3_0: Box;
  var _mcc#2#0_0_3_0: int;
  var newState#Z#0_0_3_0: int;
  var let#0_0_3_0#0#0: int;
  var a#Z#0_0_3_0: Box;
  var let#0_0_3_1#0#0: Box;
  var $lambdaHeap#0_0_3_2: Heap;
  var x#0_0_3_1: Box;
  var $_Frame#l0_0_3_2: [ref,Field]bool;
  var lambdaResult#0_0_3_2: DatatypeType;
  var ##x#0_0_3_1: Box;
  var _mcc#3#0_0_3_0: HandleType;
  var g#Z#0_0_3_0: HandleType;
  var let#0_0_3_2#0#0: HandleType;
  var ##m#0_0_0: DatatypeType;
  var ##f#0_0_0: HandleType;
  var $lambdaHeap#0_0_0: Heap;
  var x#0_0_0: Box;
  var $_Frame#l0_0_0: [ref,Field]bool;
  var lambdaResult#0_0_0: DatatypeType;
  var ##x#0_0_0: Box;

    // AddMethodImpl: RightIdentity, Impl$$State.__default.RightIdentity
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0;
    if (m#0 == #State.M.State(_mcc#0#0_0))
    {
        assume $Is(_mcc#0#0_0, 
          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)));
        havoc h#0_0;
        assume $Is(h#0_0, 
            Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)))
           && $IsAlloc(h#0_0, 
            Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)), 
            $Heap);
        assume {:id "id121"} let#0_0#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, 
          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)));
        assume {:id "id122"} h#0_0 == let#0_0#0#0;
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            ##m#0_0_0 := m#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_0_0, Tclass.State.M(State._default.RightIdentity$A), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0;
                assume $IsGoodHeap($lambdaHeap#0_0_0);
                assume $Heap == $lambdaHeap#0_0_0 || $HeapSucc($Heap, $lambdaHeap#0_0_0);
                havoc x#0_0_0;
                if ($IsBox(x#0_0_0, State._default.RightIdentity$A)
                   && $IsAllocBox(x#0_0_0, State._default.RightIdentity$A, $lambdaHeap#0_0_0))
                {
                    $_Frame#l0_0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0, $o, alloc)): bool ==> false);
                    ##x#0_0_0 := x#0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##x#0_0_0, State._default.RightIdentity$A, $lambdaHeap#0_0_0);
                    assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_0);
                    assume State.M.State_q(State.__default.Return(State._default.RightIdentity$A, x#0_0_0));
                    assume {:id "id158"} lambdaResult#0_0_0
                       == State.__default.Return(State._default.RightIdentity$A, x#0_0_0);
                    assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_0, Tclass.State.M(State._default.RightIdentity$A));
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#0_0_0 := Lit(AtLayer((lambda $l#0_0_1#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#x#0: Box :: 
                      $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_1#x#0))), 
                    (lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#x#0: Box :: 
                      $IsBox($l#0_0_1#x#0, State._default.RightIdentity$A)), 
                    (lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_1#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_0_0, 
              Tclass._System.___hTotalFunc1(State._default.RightIdentity$A, Tclass.State.M(State._default.RightIdentity$A)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.RightIdentity$A, 
              State._default.RightIdentity$A, 
              m#0, 
              Lit(AtLayer((lambda $l#0_0_2#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#x#0: Box :: 
                        $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_2#x#0))), 
                      (lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#x#0: Box :: 
                        $IsBox($l#0_0_2#x#0, State._default.RightIdentity$A)), 
                      (lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_2#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume State.M.State_q(State.__default.Bind(State._default.RightIdentity$A, 
                State._default.RightIdentity$A, 
                m#0, 
                Lit(AtLayer((lambda $l#0_0_3#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_3#heap#0: Heap, $l#0_0_3#x#0: Box :: 
                          $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_3#x#0))), 
                        (lambda $l#0_0_3#heap#0: Heap, $l#0_0_3#x#0: Box :: 
                          $IsBox($l#0_0_3#x#0, State._default.RightIdentity$A)), 
                        (lambda $l#0_0_3#heap#0: Heap, $l#0_0_3#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_3#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume (forall $l#0_0_4#x#0: Box :: 
                $IsBox($l#0_0_4#x#0, State._default.RightIdentity$A)
                   ==> State.__default.Return#canCall(State._default.RightIdentity$A, $l#0_0_4#x#0))
               && State.__default.Bind#canCall(State._default.RightIdentity$A, 
                State._default.RightIdentity$A, 
                m#0, 
                Lit(AtLayer((lambda $l#0_0_5#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_5#heap#0: Heap, $l#0_0_5#x#0: Box :: 
                          $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_5#x#0))), 
                        (lambda $l#0_0_5#heap#0: Heap, $l#0_0_5#x#0: Box :: 
                          $IsBox($l#0_0_5#x#0, State._default.RightIdentity$A)), 
                        (lambda $l#0_0_5#heap#0: Heap, $l#0_0_5#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_5#o#0: ref :: false))))), 
                    $LS($LZ))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            ##m#0_0_3_0 := m#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_0_3_0, Tclass.State.M(State._default.RightIdentity$A), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_3_0;
                assume $IsGoodHeap($lambdaHeap#0_0_3_0);
                assume $Heap == $lambdaHeap#0_0_3_0 || $HeapSucc($Heap, $lambdaHeap#0_0_3_0);
                havoc x#0_0_3_0;
                if ($IsBox(x#0_0_3_0, State._default.RightIdentity$A)
                   && $IsAllocBox(x#0_0_3_0, State._default.RightIdentity$A, $lambdaHeap#0_0_3_0))
                {
                    $_Frame#l0_0_3_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_3_0, $o, alloc)): bool ==> false);
                    ##x#0_0_3_0 := x#0_0_3_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##x#0_0_3_0, State._default.RightIdentity$A, $lambdaHeap#0_0_3_0);
                    assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_3_0);
                    assume State.M.State_q(State.__default.Return(State._default.RightIdentity$A, x#0_0_3_0));
                    assume {:id "id148"} lambdaResult#0_0_3_0
                       == State.__default.Return(State._default.RightIdentity$A, x#0_0_3_0);
                    assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_3_0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_3_0, Tclass.State.M(State._default.RightIdentity$A));
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#0_0_3_0 := Lit(AtLayer((lambda $l#0_0_3_1#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_3_1#heap#0: Heap, $l#0_0_3_1#x#0: Box :: 
                      $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_3_1#x#0))), 
                    (lambda $l#0_0_3_1#heap#0: Heap, $l#0_0_3_1#x#0: Box :: 
                      $IsBox($l#0_0_3_1#x#0, State._default.RightIdentity$A)), 
                    (lambda $l#0_0_3_1#heap#0: Heap, $l#0_0_3_1#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_3_1#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_0_3_0, 
              Tclass._System.___hTotalFunc1(State._default.RightIdentity$A, Tclass.State.M(State._default.RightIdentity$A)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.RightIdentity$A, 
              State._default.RightIdentity$A, 
              m#0, 
              Lit(AtLayer((lambda $l#0_0_3_2#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_3_2#heap#0: Heap, $l#0_0_3_2#x#0: Box :: 
                        $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_3_2#x#0))), 
                      (lambda $l#0_0_3_2#heap#0: Heap, $l#0_0_3_2#x#0: Box :: 
                        $IsBox($l#0_0_3_2#x#0, State._default.RightIdentity$A)), 
                      (lambda $l#0_0_3_2#heap#0: Heap, $l#0_0_3_2#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_3_2#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume State.M.State_q(State.__default.Bind(State._default.RightIdentity$A, 
                State._default.RightIdentity$A, 
                m#0, 
                Lit(AtLayer((lambda $l#0_0_3_3#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_3_3#heap#0: Heap, $l#0_0_3_3#x#0: Box :: 
                          $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_3_3#x#0))), 
                        (lambda $l#0_0_3_3#heap#0: Heap, $l#0_0_3_3#x#0: Box :: 
                          $IsBox($l#0_0_3_3#x#0, State._default.RightIdentity$A)), 
                        (lambda $l#0_0_3_3#heap#0: Heap, $l#0_0_3_3#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_3_3#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume (forall $l#0_0_3_4#x#0: Box :: 
                $IsBox($l#0_0_3_4#x#0, State._default.RightIdentity$A)
                   ==> State.__default.Return#canCall(State._default.RightIdentity$A, $l#0_0_3_4#x#0))
               && State.__default.Bind#canCall(State._default.RightIdentity$A, 
                State._default.RightIdentity$A, 
                m#0, 
                Lit(AtLayer((lambda $l#0_0_3_5#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_3_5#heap#0: Heap, $l#0_0_3_5#x#0: Box :: 
                          $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_3_5#x#0))), 
                        (lambda $l#0_0_3_5#heap#0: Heap, $l#0_0_3_5#x#0: Box :: 
                          $IsBox($l#0_0_3_5#x#0, State._default.RightIdentity$A)), 
                        (lambda $l#0_0_3_5#heap#0: Heap, $l#0_0_3_5#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_3_5#o#0: ref :: false))))), 
                    $LS($LZ))));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_3_1;
                assume $IsGoodHeap($lambdaHeap#0_0_3_1);
                assume $Heap == $lambdaHeap#0_0_3_1 || $HeapSucc($Heap, $lambdaHeap#0_0_3_1);
                havoc s#0_0_3_0;
                if (true)
                {
                    $_Frame#l0_0_3_1 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_3_1, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                          $lambdaHeap#0_0_3_1, 
                          h#0_0, 
                          $Box(s#0_0_3_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#1#0_0_3_0, $Box(_mcc#2#0_0_3_0)))
                    {
                        assume $IsBox(_mcc#1#0_0_3_0, State._default.RightIdentity$A);
                        havoc newState#Z#0_0_3_0;
                        assume {:id "id149"} let#0_0_3_0#0#0 == _mcc#2#0_0_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_3_0#0#0, TInt);
                        assume {:id "id150"} newState#Z#0_0_3_0 == let#0_0_3_0#0#0;
                        havoc a#Z#0_0_3_0;
                        assume {:id "id151"} let#0_0_3_1#0#0 == _mcc#1#0_0_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_3_1#0#0, State._default.RightIdentity$A);
                        assume {:id "id152"} a#Z#0_0_3_0 == let#0_0_3_1#0#0;
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_0_3_2;
                            assume $IsGoodHeap($lambdaHeap#0_0_3_2);
                            assume $lambdaHeap#0_0_3_1 == $lambdaHeap#0_0_3_2
                               || $HeapSucc($lambdaHeap#0_0_3_1, $lambdaHeap#0_0_3_2);
                            havoc x#0_0_3_1;
                            if ($IsBox(x#0_0_3_1, State._default.RightIdentity$A)
                               && $IsAllocBox(x#0_0_3_1, State._default.RightIdentity$A, $lambdaHeap#0_0_3_2))
                            {
                                $_Frame#l0_0_3_2 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_0_3_2, $o, alloc)): bool ==> false);
                                ##x#0_0_3_1 := x#0_0_3_1;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##x#0_0_3_1, State._default.RightIdentity$A, $lambdaHeap#0_0_3_2);
                                assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_3_1);
                                assume State.M.State_q(State.__default.Return(State._default.RightIdentity$A, x#0_0_3_1));
                                assume {:id "id153"} lambdaResult#0_0_3_2
                                   == State.__default.Return(State._default.RightIdentity$A, x#0_0_3_1);
                                assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_3_1);
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_0_3_2, Tclass.State.M(State._default.RightIdentity$A));
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        if ($Unbox(Apply1(State._default.RightIdentity$A, 
                              Tclass.State.M(State._default.RightIdentity$A), 
                              $lambdaHeap#0_0_3_1, 
                              Lit(AtLayer((lambda $l#0_0_3_7#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_0_3_7#heap#0: Heap, $l#0_0_3_7#x#0: Box :: 
                                        $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_3_7#x#0))), 
                                      (lambda $l#0_0_3_7#heap#0: Heap, $l#0_0_3_7#x#0: Box :: 
                                        $IsBox($l#0_0_3_7#x#0, State._default.RightIdentity$A)), 
                                      (lambda $l#0_0_3_7#heap#0: Heap, $l#0_0_3_7#x#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_0_3_7#o#0: ref :: false))))), 
                                  $LS($LZ))), 
                              a#Z#0_0_3_0)): DatatypeType
                           == #State.M.State(_mcc#3#0_0_3_0))
                        {
                            assume $Is(_mcc#3#0_0_3_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)));
                            havoc g#Z#0_0_3_0;
                            assume {:id "id154"} let#0_0_3_2#0#0 == _mcc#3#0_0_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_3_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)));
                            assume {:id "id155"} g#Z#0_0_3_0 == let#0_0_3_2#0#0;
                            assume {:id "id156"} lambdaResult#0_0_3_1
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                  $Heap, 
                                  g#Z#0_0_3_0, 
                                  $Box(newState#Z#0_0_3_0))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_3_1, 
                              Tclass._System.Tuple2(State._default.RightIdentity$A, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_3_10#s#0: int, $l#0_0_3_10#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_3_10#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                        $l#0_0_3_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_3_10#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                        $l#0_0_3_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_3_10#s#0))): DatatypeType)
                   && (var a#0_0_3_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                            $l#0_0_3_10#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_3_10#s#0))): DatatypeType); 
                    (forall $l#0_0_3_11#x#0: Box :: 
                        $IsBox($l#0_0_3_11#x#0, State._default.RightIdentity$A)
                           ==> State.__default.Return#canCall(State._default.RightIdentity$A, $l#0_0_3_11#x#0))
                       && State.M.State_q($Unbox(Apply1(State._default.RightIdentity$A, 
                            Tclass.State.M(State._default.RightIdentity$A), 
                            $l#0_0_3_10#heap#0, 
                            Lit(AtLayer((lambda $l#0_0_3_12#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_3_12#heap#0: Heap, $l#0_0_3_12#x#0: Box :: 
                                      $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_3_12#x#0))), 
                                    (lambda $l#0_0_3_12#heap#0: Heap, $l#0_0_3_12#x#0: Box :: 
                                      $IsBox($l#0_0_3_12#x#0, State._default.RightIdentity$A)), 
                                    (lambda $l#0_0_3_12#heap#0: Heap, $l#0_0_3_12#x#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_3_12#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            a#0_0_3_1)): DatatypeType)));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            assert {:id "id157"} {:subsumption 0} State.M#Equal(State.__default.Bind(State._default.RightIdentity$A, 
                State._default.RightIdentity$A, 
                m#0, 
                Lit(AtLayer((lambda $l#0_0_3_17#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_3_17#heap#0: Heap, $l#0_0_3_17#x#0: Box :: 
                          $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_3_17#x#0))), 
                        (lambda $l#0_0_3_17#heap#0: Heap, $l#0_0_3_17#x#0: Box :: 
                          $IsBox($l#0_0_3_17#x#0, State._default.RightIdentity$A)), 
                        (lambda $l#0_0_3_17#heap#0: Heap, $l#0_0_3_17#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_3_17#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_0_3_18#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_3_18#heap#0: Heap, $l#0_0_3_18#s#0: Box :: 
                          $Box((var newState#0_0_3_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                        $l#0_0_3_18#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_0_3_18#s#0): int))): DatatypeType)): int; 
                              (var a#0_0_3_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                        $l#0_0_3_18#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_0_3_18#s#0): int))): DatatypeType); 
                                (var g#0_0_3_3 := State.M.runState($Unbox(Apply1(State._default.RightIdentity$A, 
                                          Tclass.State.M(State._default.RightIdentity$A), 
                                          $l#0_0_3_18#heap#0, 
                                          Lit(AtLayer((lambda $l#0_0_3_19#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_0_3_19#heap#0: Heap, $l#0_0_3_19#x#0: Box :: 
                                                    $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_3_19#x#0))), 
                                                  (lambda $l#0_0_3_19#heap#0: Heap, $l#0_0_3_19#x#0: Box :: 
                                                    $IsBox($l#0_0_3_19#x#0, State._default.RightIdentity$A)), 
                                                  (lambda $l#0_0_3_19#heap#0: Heap, $l#0_0_3_19#x#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_0_3_19#o#0: ref :: false))))), 
                                              $l#0_0_3_18#ly#0)), 
                                          a#0_0_3_3)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                      $l#0_0_3_18#heap#0, 
                                      g#0_0_3_3, 
                                      $Box(newState#0_0_3_3))): DatatypeType))))), 
                        (lambda $l#0_0_3_18#heap#0: Heap, $l#0_0_3_18#s#0: Box :: 
                          $IsBox($l#0_0_3_18#s#0, TInt)), 
                        (lambda $l#0_0_3_18#heap#0: Heap, $l#0_0_3_18#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_3_18#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_2_0;
                assume $IsGoodHeap($lambdaHeap#0_0_2_0);
                assume $Heap == $lambdaHeap#0_0_2_0 || $HeapSucc($Heap, $lambdaHeap#0_0_2_0);
                havoc s#0_0_2_0;
                if (true)
                {
                    $_Frame#l0_0_2_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_2_0, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                          $lambdaHeap#0_0_2_0, 
                          h#0_0, 
                          $Box(s#0_0_2_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#4#0_0_2_0, $Box(_mcc#5#0_0_2_0)))
                    {
                        assume $IsBox(_mcc#4#0_0_2_0, State._default.RightIdentity$A);
                        havoc newState#Z#0_0_2_0;
                        assume {:id "id128"} let#0_0_2_0#0#0 == _mcc#5#0_0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_2_0#0#0, TInt);
                        assume {:id "id129"} newState#Z#0_0_2_0 == let#0_0_2_0#0#0;
                        havoc a#Z#0_0_2_0;
                        assume {:id "id130"} let#0_0_2_1#0#0 == _mcc#4#0_0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_2_1#0#0, State._default.RightIdentity$A);
                        assume {:id "id131"} a#Z#0_0_2_0 == let#0_0_2_1#0#0;
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_0_2_1;
                            assume $IsGoodHeap($lambdaHeap#0_0_2_1);
                            assume $lambdaHeap#0_0_2_0 == $lambdaHeap#0_0_2_1
                               || $HeapSucc($lambdaHeap#0_0_2_0, $lambdaHeap#0_0_2_1);
                            havoc x#0_0_2_0;
                            if ($IsBox(x#0_0_2_0, State._default.RightIdentity$A)
                               && $IsAllocBox(x#0_0_2_0, State._default.RightIdentity$A, $lambdaHeap#0_0_2_1))
                            {
                                $_Frame#l0_0_2_1 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_0_2_1, $o, alloc)): bool ==> false);
                                ##x#0_0_2_0 := x#0_0_2_0;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##x#0_0_2_0, State._default.RightIdentity$A, $lambdaHeap#0_0_2_1);
                                assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_2_0);
                                assume State.M.State_q(State.__default.Return(State._default.RightIdentity$A, x#0_0_2_0));
                                assume {:id "id132"} lambdaResult#0_0_2_1
                                   == State.__default.Return(State._default.RightIdentity$A, x#0_0_2_0);
                                assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_2_0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_0_2_1, Tclass.State.M(State._default.RightIdentity$A));
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        if ($Unbox(Apply1(State._default.RightIdentity$A, 
                              Tclass.State.M(State._default.RightIdentity$A), 
                              $lambdaHeap#0_0_2_0, 
                              Lit(AtLayer((lambda $l#0_0_2_1#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_0_2_1#heap#0: Heap, $l#0_0_2_1#x#0: Box :: 
                                        $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_2_1#x#0))), 
                                      (lambda $l#0_0_2_1#heap#0: Heap, $l#0_0_2_1#x#0: Box :: 
                                        $IsBox($l#0_0_2_1#x#0, State._default.RightIdentity$A)), 
                                      (lambda $l#0_0_2_1#heap#0: Heap, $l#0_0_2_1#x#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_0_2_1#o#0: ref :: false))))), 
                                  $LS($LZ))), 
                              a#Z#0_0_2_0)): DatatypeType
                           == #State.M.State(_mcc#6#0_0_2_0))
                        {
                            assume $Is(_mcc#6#0_0_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)));
                            havoc g#Z#0_0_2_0;
                            assume {:id "id133"} let#0_0_2_2#0#0 == _mcc#6#0_0_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_2_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)));
                            assume {:id "id134"} g#Z#0_0_2_0 == let#0_0_2_2#0#0;
                            assume {:id "id135"} lambdaResult#0_0_2_0
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                  $Heap, 
                                  g#Z#0_0_2_0, 
                                  $Box(newState#Z#0_0_2_0))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_2_0, 
                              Tclass._System.Tuple2(State._default.RightIdentity$A, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_2_4#s#0: int, $l#0_0_2_4#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_2_4#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                        $l#0_0_2_4#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_2_4#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                        $l#0_0_2_4#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_2_4#s#0))): DatatypeType)
                   && (var a#0_0_2_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                            $l#0_0_2_4#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_2_4#s#0))): DatatypeType); 
                    (forall $l#0_0_2_5#x#0: Box :: 
                        $IsBox($l#0_0_2_5#x#0, State._default.RightIdentity$A)
                           ==> State.__default.Return#canCall(State._default.RightIdentity$A, $l#0_0_2_5#x#0))
                       && State.M.State_q($Unbox(Apply1(State._default.RightIdentity$A, 
                            Tclass.State.M(State._default.RightIdentity$A), 
                            $l#0_0_2_4#heap#0, 
                            Lit(AtLayer((lambda $l#0_0_2_6#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_2_6#heap#0: Heap, $l#0_0_2_6#x#0: Box :: 
                                      $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_2_6#x#0))), 
                                    (lambda $l#0_0_2_6#heap#0: Heap, $l#0_0_2_6#x#0: Box :: 
                                      $IsBox($l#0_0_2_6#x#0, State._default.RightIdentity$A)), 
                                    (lambda $l#0_0_2_6#heap#0: Heap, $l#0_0_2_6#x#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_2_6#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            a#0_0_2_1)): DatatypeType)));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(99,18)
            // TrCallStmt: Before ProcessCallStmt
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_2_2;
                assume $IsGoodHeap($lambdaHeap#0_0_2_2);
                assume $Heap == $lambdaHeap#0_0_2_2 || $HeapSucc($Heap, $lambdaHeap#0_0_2_2);
                havoc s#0_0_2_1;
                if (true)
                {
                    $_Frame#l0_0_2_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_2_2, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                          $lambdaHeap#0_0_2_2, 
                          h#0_0, 
                          $Box(s#0_0_2_1))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#7#0_0_2_0, $Box(_mcc#8#0_0_2_0)))
                    {
                        assume $IsBox(_mcc#7#0_0_2_0, State._default.RightIdentity$A);
                        havoc newState#Z#0_0_2_1;
                        assume {:id "id136"} let#0_0_2_3#0#0 == _mcc#8#0_0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_2_3#0#0, TInt);
                        assume {:id "id137"} newState#Z#0_0_2_1 == let#0_0_2_3#0#0;
                        havoc a#Z#0_0_2_1;
                        assume {:id "id138"} let#0_0_2_4#0#0 == _mcc#7#0_0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_2_4#0#0, State._default.RightIdentity$A);
                        assume {:id "id139"} a#Z#0_0_2_1 == let#0_0_2_4#0#0;
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_0_2_3;
                            assume $IsGoodHeap($lambdaHeap#0_0_2_3);
                            assume $lambdaHeap#0_0_2_2 == $lambdaHeap#0_0_2_3
                               || $HeapSucc($lambdaHeap#0_0_2_2, $lambdaHeap#0_0_2_3);
                            havoc x#0_0_2_1;
                            if ($IsBox(x#0_0_2_1, State._default.RightIdentity$A)
                               && $IsAllocBox(x#0_0_2_1, State._default.RightIdentity$A, $lambdaHeap#0_0_2_3))
                            {
                                $_Frame#l0_0_2_3 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_0_2_3, $o, alloc)): bool ==> false);
                                ##x#0_0_2_1 := x#0_0_2_1;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##x#0_0_2_1, State._default.RightIdentity$A, $lambdaHeap#0_0_2_3);
                                assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_2_1);
                                assume State.M.State_q(State.__default.Return(State._default.RightIdentity$A, x#0_0_2_1));
                                assume {:id "id140"} lambdaResult#0_0_2_3
                                   == State.__default.Return(State._default.RightIdentity$A, x#0_0_2_1);
                                assume State.__default.Return#canCall(State._default.RightIdentity$A, x#0_0_2_1);
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_0_2_3, Tclass.State.M(State._default.RightIdentity$A));
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        if ($Unbox(Apply1(State._default.RightIdentity$A, 
                              Tclass.State.M(State._default.RightIdentity$A), 
                              $lambdaHeap#0_0_2_2, 
                              Lit(AtLayer((lambda $l#0_0_2_9#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_0_2_9#heap#0: Heap, $l#0_0_2_9#x#0: Box :: 
                                        $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_2_9#x#0))), 
                                      (lambda $l#0_0_2_9#heap#0: Heap, $l#0_0_2_9#x#0: Box :: 
                                        $IsBox($l#0_0_2_9#x#0, State._default.RightIdentity$A)), 
                                      (lambda $l#0_0_2_9#heap#0: Heap, $l#0_0_2_9#x#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_0_2_9#o#0: ref :: false))))), 
                                  $LS($LZ))), 
                              a#Z#0_0_2_1)): DatatypeType
                           == #State.M.State(_mcc#9#0_0_2_0))
                        {
                            assume $Is(_mcc#9#0_0_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)));
                            havoc g#Z#0_0_2_1;
                            assume {:id "id141"} let#0_0_2_5#0#0 == _mcc#9#0_0_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_2_5#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt)));
                            assume {:id "id142"} g#Z#0_0_2_1 == let#0_0_2_5#0#0;
                            assume {:id "id143"} lambdaResult#0_0_2_2
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                  $Heap, 
                                  g#Z#0_0_2_1, 
                                  $Box(newState#Z#0_0_2_1))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_2_2, 
                              Tclass._System.Tuple2(State._default.RightIdentity$A, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_2_10#s#0: int, $l#0_0_2_10#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_2_10#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                        $l#0_0_2_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_2_10#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                        $l#0_0_2_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_2_10#s#0))): DatatypeType)
                   && (var a#0_0_2_2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                            $l#0_0_2_10#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_2_10#s#0))): DatatypeType); 
                    (forall $l#0_0_2_11#x#0: Box :: 
                        $IsBox($l#0_0_2_11#x#0, State._default.RightIdentity$A)
                           ==> State.__default.Return#canCall(State._default.RightIdentity$A, $l#0_0_2_11#x#0))
                       && State.M.State_q($Unbox(Apply1(State._default.RightIdentity$A, 
                            Tclass.State.M(State._default.RightIdentity$A), 
                            $l#0_0_2_10#heap#0, 
                            Lit(AtLayer((lambda $l#0_0_2_12#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_2_12#heap#0: Heap, $l#0_0_2_12#x#0: Box :: 
                                      $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_2_12#x#0))), 
                                    (lambda $l#0_0_2_12#heap#0: Heap, $l#0_0_2_12#x#0: Box :: 
                                      $IsBox($l#0_0_2_12#x#0, State._default.RightIdentity$A)), 
                                    (lambda $l#0_0_2_12#heap#0: Heap, $l#0_0_2_12#x#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_2_12#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            a#0_0_2_2)): DatatypeType)));
            // ProcessCallStmt: CheckSubrange
            f##0_0_2_0 := Lit(AtLayer((lambda $l#0_0_2_14#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_2_14#heap#0: Heap, $l#0_0_2_14#s#0: Box :: 
                      $Box((var newState#0_0_2_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                    $l#0_0_2_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_0_2_14#s#0): int))): DatatypeType)): int; 
                          (var a#0_0_2_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                    $l#0_0_2_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_0_2_14#s#0): int))): DatatypeType); 
                            (var g#0_0_2_3 := State.M.runState($Unbox(Apply1(State._default.RightIdentity$A, 
                                      Tclass.State.M(State._default.RightIdentity$A), 
                                      $l#0_0_2_14#heap#0, 
                                      Lit(AtLayer((lambda $l#0_0_2_15#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_0_2_15#heap#0: Heap, $l#0_0_2_15#x#0: Box :: 
                                                $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_2_15#x#0))), 
                                              (lambda $l#0_0_2_15#heap#0: Heap, $l#0_0_2_15#x#0: Box :: 
                                                $IsBox($l#0_0_2_15#x#0, State._default.RightIdentity$A)), 
                                              (lambda $l#0_0_2_15#heap#0: Heap, $l#0_0_2_15#x#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_0_2_15#o#0: ref :: false))))), 
                                          $l#0_0_2_14#ly#0)), 
                                      a#0_0_2_3)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                  $l#0_0_2_14#heap#0, 
                                  g#0_0_2_3, 
                                  $Box(newState#0_0_2_3))): DatatypeType))))), 
                    (lambda $l#0_0_2_14#heap#0: Heap, $l#0_0_2_14#s#0: Box :: 
                      $IsBox($l#0_0_2_14#s#0, TInt)), 
                    (lambda $l#0_0_2_14#heap#0: Heap, $l#0_0_2_14#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_2_14#o#0: ref :: false))))), 
                $LS($LZ)));
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_2_4;
                assume $IsGoodHeap($lambdaHeap#0_0_2_4);
                assume $Heap == $lambdaHeap#0_0_2_4 || $HeapSucc($Heap, $lambdaHeap#0_0_2_4);
                havoc s#0_0_2_2;
                if (true)
                {
                    $_Frame#l0_0_2_4 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_2_4, $o, alloc)): bool ==> false);
                    assume {:id "id144"} lambdaResult#0_0_2_4
                       == $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                          $Heap, 
                          h#0_0, 
                          $Box(s#0_0_2_2))): DatatypeType;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_2_4, 
                      Tclass._System.Tuple2(State._default.RightIdentity$A, TInt));
                }

                assume false;
            }

            // End Comprehension WF check
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_2_0 := Lit(AtLayer((lambda $l#0_0_2_17#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_2_17#heap#0: Heap, $l#0_0_2_17#s#0: Box :: 
                      $Box($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                            $l#0_0_2_17#heap#0, 
                            h#0_0, 
                            $Box($Unbox($l#0_0_2_17#s#0): int))): DatatypeType)), 
                    (lambda $l#0_0_2_17#heap#0: Heap, $l#0_0_2_17#s#0: Box :: 
                      $IsBox($l#0_0_2_17#s#0, TInt)), 
                    (lambda $l#0_0_2_17#heap#0: Heap, $l#0_0_2_17#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_2_17#o#0: ref :: false))))), 
                $LS($LZ)));
            call {:id "id145"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), f##0_0_2_0, g##0_0_2_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_2_5;
                assume $IsGoodHeap($lambdaHeap#0_0_2_5);
                assume $Heap == $lambdaHeap#0_0_2_5 || $HeapSucc($Heap, $lambdaHeap#0_0_2_5);
                havoc s#0_0_2_3;
                if (true)
                {
                    $_Frame#l0_0_2_5 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_2_5, $o, alloc)): bool ==> false);
                    assume {:id "id146"} lambdaResult#0_0_2_5
                       == $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                          $Heap, 
                          h#0_0, 
                          $Box(s#0_0_2_3))): DatatypeType;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_2_5, 
                      Tclass._System.Tuple2(State._default.RightIdentity$A, TInt));
                }

                assume false;
            }

            // End Comprehension WF check
            assume true;
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            assert {:id "id147"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_0_2_23#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_2_23#heap#0: Heap, $l#0_0_2_23#s#0: Box :: 
                          $Box((var newState#0_0_2_5 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                        $l#0_0_2_23#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_0_2_23#s#0): int))): DatatypeType)): int; 
                              (var a#0_0_2_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                        $l#0_0_2_23#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_0_2_23#s#0): int))): DatatypeType); 
                                (var g#0_0_2_5 := State.M.runState($Unbox(Apply1(State._default.RightIdentity$A, 
                                          Tclass.State.M(State._default.RightIdentity$A), 
                                          $l#0_0_2_23#heap#0, 
                                          Lit(AtLayer((lambda $l#0_0_2_24#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_0_2_24#heap#0: Heap, $l#0_0_2_24#x#0: Box :: 
                                                    $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_2_24#x#0))), 
                                                  (lambda $l#0_0_2_24#heap#0: Heap, $l#0_0_2_24#x#0: Box :: 
                                                    $IsBox($l#0_0_2_24#x#0, State._default.RightIdentity$A)), 
                                                  (lambda $l#0_0_2_24#heap#0: Heap, $l#0_0_2_24#x#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_0_2_24#o#0: ref :: false))))), 
                                              $l#0_0_2_23#ly#0)), 
                                          a#0_0_2_5)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                      $l#0_0_2_23#heap#0, 
                                      g#0_0_2_5, 
                                      $Box(newState#0_0_2_5))): DatatypeType))))), 
                        (lambda $l#0_0_2_23#heap#0: Heap, $l#0_0_2_23#s#0: Box :: 
                          $IsBox($l#0_0_2_23#s#0, TInt)), 
                        (lambda $l#0_0_2_23#heap#0: Heap, $l#0_0_2_23#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_2_23#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_0_2_25#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_2_25#heap#0: Heap, $l#0_0_2_25#s#0: Box :: 
                          $Box($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                $l#0_0_2_25#heap#0, 
                                h#0_0, 
                                $Box($Unbox($l#0_0_2_25#s#0): int))): DatatypeType)), 
                        (lambda $l#0_0_2_25#heap#0: Heap, $l#0_0_2_25#s#0: Box :: 
                          $IsBox($l#0_0_2_25#s#0, TInt)), 
                        (lambda $l#0_0_2_25#heap#0: Heap, $l#0_0_2_25#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_2_25#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_1_0;
                assume $IsGoodHeap($lambdaHeap#0_0_1_0);
                assume $Heap == $lambdaHeap#0_0_1_0 || $HeapSucc($Heap, $lambdaHeap#0_0_1_0);
                havoc s#0_0_1_0;
                if (true)
                {
                    $_Frame#l0_0_1_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_1_0, $o, alloc)): bool ==> false);
                    assume {:id "id124"} lambdaResult#0_0_1_0
                       == $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                          $Heap, 
                          h#0_0, 
                          $Box(s#0_0_1_0))): DatatypeType;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_1_0, 
                      Tclass._System.Tuple2(State._default.RightIdentity$A, TInt));
                }

                assume false;
            }

            // End Comprehension WF check
            assume true;
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(105,19)
            // TrCallStmt: Before ProcessCallStmt
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_1_1;
                assume $IsGoodHeap($lambdaHeap#0_0_1_1);
                assume $Heap == $lambdaHeap#0_0_1_1 || $HeapSucc($Heap, $lambdaHeap#0_0_1_1);
                havoc s#0_0_1_1;
                if (true)
                {
                    $_Frame#l0_0_1_1 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_1_1, $o, alloc)): bool ==> false);
                    assume {:id "id125"} lambdaResult#0_0_1_1
                       == $Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                          $Heap, 
                          h#0_0, 
                          $Box(s#0_0_1_1))): DatatypeType;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_1_1, 
                      Tclass._System.Tuple2(State._default.RightIdentity$A, TInt));
                }

                assume false;
            }

            // End Comprehension WF check
            assume true;
            // ProcessCallStmt: CheckSubrange
            f##0_0_1_0 := Lit(AtLayer((lambda $l#0_0_1_3#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_1_3#heap#0: Heap, $l#0_0_1_3#s#0: Box :: 
                      $Box($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                            $l#0_0_1_3#heap#0, 
                            h#0_0, 
                            $Box($Unbox($l#0_0_1_3#s#0): int))): DatatypeType)), 
                    (lambda $l#0_0_1_3#heap#0: Heap, $l#0_0_1_3#s#0: Box :: 
                      $IsBox($l#0_0_1_3#s#0, TInt)), 
                    (lambda $l#0_0_1_3#heap#0: Heap, $l#0_0_1_3#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_1_3#o#0: ref :: false))))), 
                $LS($LZ)));
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##0_0_1_0 := h#0_0;
            call {:id "id126"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), f##0_0_1_0, g##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            assume true;
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            assert {:id "id127"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_0_1_5#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_1_5#heap#0: Heap, $l#0_0_1_5#s#0: Box :: 
                          $Box($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.RightIdentity$A, TInt), 
                                $l#0_0_1_5#heap#0, 
                                h#0_0, 
                                $Box($Unbox($l#0_0_1_5#s#0): int))): DatatypeType)), 
                        (lambda $l#0_0_1_5#heap#0: Heap, $l#0_0_1_5#s#0: Box :: 
                          $IsBox($l#0_0_1_5#s#0, TInt)), 
                        (lambda $l#0_0_1_5#heap#0: Heap, $l#0_0_1_5#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_1_5#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(h#0_0));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            assume true;
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            assume true;
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(91,9)
            assert {:id "id123"} {:subsumption 0} State.M#Equal(#State.M.State(h#0_0), m#0);
            assume false;
        }

        assume {:id "id159"} State.M#Equal(State.__default.Bind(State._default.RightIdentity$A, 
            State._default.RightIdentity$A, 
            m#0, 
            Lit(AtLayer((lambda $l#0_0_6#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_6#heap#0: Heap, $l#0_0_6#x#0: Box :: 
                      $Box(State.__default.Return(State._default.RightIdentity$A, $l#0_0_6#x#0))), 
                    (lambda $l#0_0_6#heap#0: Heap, $l#0_0_6#x#0: Box :: 
                      $IsBox($l#0_0_6#x#0, State._default.RightIdentity$A)), 
                    (lambda $l#0_0_6#heap#0: Heap, $l#0_0_6#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_6#o#0: ref :: false))))), 
                $LS($LZ)))), 
          m#0);
    }
    else
    {
        assume false;
    }
}



procedure {:verboseName "State.Associativity (well-formedness)"} CheckWellFormed$$State.__default.Associativity(State._default.Associativity$A: Ty, 
    State._default.Associativity$B: Ty, 
    State._default.Associativity$C: Ty, 
    m#0: DatatypeType
       where $Is(m#0, Tclass.State.M(State._default.Associativity$A))
         && $IsAlloc(m#0, Tclass.State.M(State._default.Associativity$A), $Heap)
         && $IsA#State.M(m#0), 
    f#0: HandleType
       where $Is(f#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)))
         && $IsAlloc(f#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)), 
          $Heap), 
    g#0: HandleType
       where $Is(g#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)))
         && $IsAlloc(g#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
          $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "State.Associativity (call)"} Call$$State.__default.Associativity(State._default.Associativity$A: Ty, 
    State._default.Associativity$B: Ty, 
    State._default.Associativity$C: Ty, 
    m#0: DatatypeType
       where $Is(m#0, Tclass.State.M(State._default.Associativity$A))
         && $IsAlloc(m#0, Tclass.State.M(State._default.Associativity$A), $Heap)
         && $IsA#State.M(m#0), 
    f#0: HandleType
       where $Is(f#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)))
         && $IsAlloc(f#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)), 
          $Heap), 
    g#0: HandleType
       where $Is(g#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)))
         && $IsAlloc(g#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
          $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#State.M(State.__default.Bind(State._default.Associativity$B, 
        State._default.Associativity$C, 
        State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
        g#0))
     && $IsA#State.M(State.__default.Bind(State._default.Associativity$A, 
        State._default.Associativity$C, 
        m#0, 
        Lit(AtLayer((lambda $l#12#ly#0: LayerType :: 
              Handle1((lambda $l#12#heap#0: Heap, $l#12#x#0: Box :: 
                  $Box(State.__default.Bind(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#12#heap#0, 
                          f#0, 
                          $l#12#x#0)): DatatypeType, 
                      g#0))), 
                (lambda $l#12#heap#0: Heap, $l#12#x#0: Box :: 
                  $IsBox($l#12#x#0, State._default.Associativity$A)), 
                (lambda $l#12#heap#0: Heap, $l#12#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#12#o#0: ref :: false))))), 
            $LS($LZ)))))
     && 
    State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
     && State.__default.Bind#canCall(State._default.Associativity$B, 
      State._default.Associativity$C, 
      State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
      g#0)
     && 
    (forall $l#10#x#0: Box, $l#10#heap#0: Heap :: 
      $IsBox($l#10#x#0, State._default.Associativity$A) && $IsGoodHeap($l#10#heap#0)
         ==> State.__default.Bind#canCall(State._default.Associativity$B, 
          State._default.Associativity$C, 
          $Unbox(Apply1(State._default.Associativity$A, 
              Tclass.State.M(State._default.Associativity$B), 
              $l#10#heap#0, 
              f#0, 
              $l#10#x#0)): DatatypeType, 
          g#0))
     && State.__default.Bind#canCall(State._default.Associativity$A, 
      State._default.Associativity$C, 
      m#0, 
      Lit(AtLayer((lambda $l#11#ly#0: LayerType :: 
            Handle1((lambda $l#11#heap#0: Heap, $l#11#x#0: Box :: 
                $Box(State.__default.Bind(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#11#heap#0, 
                        f#0, 
                        $l#11#x#0)): DatatypeType, 
                    g#0))), 
              (lambda $l#11#heap#0: Heap, $l#11#x#0: Box :: 
                $IsBox($l#11#x#0, State._default.Associativity$A)), 
              (lambda $l#11#heap#0: Heap, $l#11#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#11#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id164"} State.M#Equal(State.__default.Bind(State._default.Associativity$B, 
      State._default.Associativity$C, 
      State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
      g#0), 
    State.__default.Bind(State._default.Associativity$A, 
      State._default.Associativity$C, 
      m#0, 
      Lit(AtLayer((lambda $l#13#ly#0: LayerType :: 
            Handle1((lambda $l#13#heap#0: Heap, $l#13#x#0: Box :: 
                $Box(State.__default.Bind(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#13#heap#0, 
                        f#0, 
                        $l#13#x#0)): DatatypeType, 
                    g#0))), 
              (lambda $l#13#heap#0: Heap, $l#13#x#0: Box :: 
                $IsBox($l#13#x#0, State._default.Associativity$A)), 
              (lambda $l#13#heap#0: Heap, $l#13#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#13#o#0: ref :: false))))), 
          $LS($LZ)))));
  free ensures $IsA#State.M(State.__default.Bind(State._default.Associativity$B, 
        State._default.Associativity$C, 
        State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
        g#0))
     && $IsA#State.M(State.__default.Bind(State._default.Associativity$A, 
        State._default.Associativity$C, 
        m#0, 
        Lit(AtLayer((lambda $l#16#ly#0: LayerType :: 
              Handle1((lambda $l#16#heap#0: Heap, $l#16#x#0: Box :: 
                  $Box(State.__default.Bind(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#16#heap#0, 
                          f#0, 
                          $l#16#x#0)): DatatypeType, 
                      g#0))), 
                (lambda $l#16#heap#0: Heap, $l#16#x#0: Box :: 
                  $IsBox($l#16#x#0, State._default.Associativity$A)), 
                (lambda $l#16#heap#0: Heap, $l#16#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#16#o#0: ref :: false))))), 
            $LS($LZ)))))
     && 
    State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
     && State.__default.Bind#canCall(State._default.Associativity$B, 
      State._default.Associativity$C, 
      State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
      g#0)
     && 
    (forall $l#14#x#0: Box, $l#14#heap#0: Heap :: 
      $IsBox($l#14#x#0, State._default.Associativity$A) && $IsGoodHeap($l#14#heap#0)
         ==> State.__default.Bind#canCall(State._default.Associativity$B, 
          State._default.Associativity$C, 
          $Unbox(Apply1(State._default.Associativity$A, 
              Tclass.State.M(State._default.Associativity$B), 
              $l#14#heap#0, 
              f#0, 
              $l#14#x#0)): DatatypeType, 
          g#0))
     && State.__default.Bind#canCall(State._default.Associativity$A, 
      State._default.Associativity$C, 
      m#0, 
      Lit(AtLayer((lambda $l#15#ly#0: LayerType :: 
            Handle1((lambda $l#15#heap#0: Heap, $l#15#x#0: Box :: 
                $Box(State.__default.Bind(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#15#heap#0, 
                        f#0, 
                        $l#15#x#0)): DatatypeType, 
                    g#0))), 
              (lambda $l#15#heap#0: Heap, $l#15#x#0: Box :: 
                $IsBox($l#15#x#0, State._default.Associativity$A)), 
              (lambda $l#15#heap#0: Heap, $l#15#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#15#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id165"} State.M#Equal(State.__default.Bind(State._default.Associativity$B, 
      State._default.Associativity$C, 
      State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
      g#0), 
    State.__default.Bind(State._default.Associativity$A, 
      State._default.Associativity$C, 
      m#0, 
      Lit(AtLayer((lambda $l#17#ly#0: LayerType :: 
            Handle1((lambda $l#17#heap#0: Heap, $l#17#x#0: Box :: 
                $Box(State.__default.Bind(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#17#heap#0, 
                        f#0, 
                        $l#17#x#0)): DatatypeType, 
                    g#0))), 
              (lambda $l#17#heap#0: Heap, $l#17#x#0: Box :: 
                $IsBox($l#17#x#0, State._default.Associativity$A)), 
              (lambda $l#17#heap#0: Heap, $l#17#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#17#o#0: ref :: false))))), 
          $LS($LZ)))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "State.Associativity (correctness)"} Impl$$State.__default.Associativity(State._default.Associativity$A: Ty, 
    State._default.Associativity$B: Ty, 
    State._default.Associativity$C: Ty, 
    m#0: DatatypeType
       where $Is(m#0, Tclass.State.M(State._default.Associativity$A))
         && $IsAlloc(m#0, Tclass.State.M(State._default.Associativity$A), $Heap)
         && $IsA#State.M(m#0), 
    f#0: HandleType
       where $Is(f#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)))
         && $IsAlloc(f#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)), 
          $Heap), 
    g#0: HandleType
       where $Is(g#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)))
         && $IsAlloc(g#0, 
          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
          $Heap))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#State.M(State.__default.Bind(State._default.Associativity$B, 
        State._default.Associativity$C, 
        State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
        g#0))
     && $IsA#State.M(State.__default.Bind(State._default.Associativity$A, 
        State._default.Associativity$C, 
        m#0, 
        Lit(AtLayer((lambda $l#20#ly#0: LayerType :: 
              Handle1((lambda $l#20#heap#0: Heap, $l#20#x#0: Box :: 
                  $Box(State.__default.Bind(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#20#heap#0, 
                          f#0, 
                          $l#20#x#0)): DatatypeType, 
                      g#0))), 
                (lambda $l#20#heap#0: Heap, $l#20#x#0: Box :: 
                  $IsBox($l#20#x#0, State._default.Associativity$A)), 
                (lambda $l#20#heap#0: Heap, $l#20#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#20#o#0: ref :: false))))), 
            $LS($LZ)))))
     && 
    State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
     && State.__default.Bind#canCall(State._default.Associativity$B, 
      State._default.Associativity$C, 
      State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
      g#0)
     && 
    (forall $l#18#x#0: Box, $l#18#heap#0: Heap :: 
      $IsBox($l#18#x#0, State._default.Associativity$A) && $IsGoodHeap($l#18#heap#0)
         ==> State.__default.Bind#canCall(State._default.Associativity$B, 
          State._default.Associativity$C, 
          $Unbox(Apply1(State._default.Associativity$A, 
              Tclass.State.M(State._default.Associativity$B), 
              $l#18#heap#0, 
              f#0, 
              $l#18#x#0)): DatatypeType, 
          g#0))
     && State.__default.Bind#canCall(State._default.Associativity$A, 
      State._default.Associativity$C, 
      m#0, 
      Lit(AtLayer((lambda $l#19#ly#0: LayerType :: 
            Handle1((lambda $l#19#heap#0: Heap, $l#19#x#0: Box :: 
                $Box(State.__default.Bind(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#19#heap#0, 
                        f#0, 
                        $l#19#x#0)): DatatypeType, 
                    g#0))), 
              (lambda $l#19#heap#0: Heap, $l#19#x#0: Box :: 
                $IsBox($l#19#x#0, State._default.Associativity$A)), 
              (lambda $l#19#heap#0: Heap, $l#19#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#19#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id166"} State.M#Equal(State.__default.Bind(State._default.Associativity$B, 
      State._default.Associativity$C, 
      State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
      g#0), 
    State.__default.Bind(State._default.Associativity$A, 
      State._default.Associativity$C, 
      m#0, 
      Lit(AtLayer((lambda $l#21#ly#0: LayerType :: 
            Handle1((lambda $l#21#heap#0: Heap, $l#21#x#0: Box :: 
                $Box(State.__default.Bind(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#21#heap#0, 
                        f#0, 
                        $l#21#x#0)): DatatypeType, 
                    g#0))), 
              (lambda $l#21#heap#0: Heap, $l#21#x#0: Box :: 
                $IsBox($l#21#x#0, State._default.Associativity$A)), 
              (lambda $l#21#heap#0: Heap, $l#21#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#21#o#0: ref :: false))))), 
          $LS($LZ)))));
  free ensures $IsA#State.M(State.__default.Bind(State._default.Associativity$B, 
        State._default.Associativity$C, 
        State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
        g#0))
     && $IsA#State.M(State.__default.Bind(State._default.Associativity$A, 
        State._default.Associativity$C, 
        m#0, 
        Lit(AtLayer((lambda $l#24#ly#0: LayerType :: 
              Handle1((lambda $l#24#heap#0: Heap, $l#24#x#0: Box :: 
                  $Box(State.__default.Bind(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#24#heap#0, 
                          f#0, 
                          $l#24#x#0)): DatatypeType, 
                      g#0))), 
                (lambda $l#24#heap#0: Heap, $l#24#x#0: Box :: 
                  $IsBox($l#24#x#0, State._default.Associativity$A)), 
                (lambda $l#24#heap#0: Heap, $l#24#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#24#o#0: ref :: false))))), 
            $LS($LZ)))))
     && 
    State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
     && State.__default.Bind#canCall(State._default.Associativity$B, 
      State._default.Associativity$C, 
      State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
      g#0)
     && 
    (forall $l#22#x#0: Box, $l#22#heap#0: Heap :: 
      $IsBox($l#22#x#0, State._default.Associativity$A) && $IsGoodHeap($l#22#heap#0)
         ==> State.__default.Bind#canCall(State._default.Associativity$B, 
          State._default.Associativity$C, 
          $Unbox(Apply1(State._default.Associativity$A, 
              Tclass.State.M(State._default.Associativity$B), 
              $l#22#heap#0, 
              f#0, 
              $l#22#x#0)): DatatypeType, 
          g#0))
     && State.__default.Bind#canCall(State._default.Associativity$A, 
      State._default.Associativity$C, 
      m#0, 
      Lit(AtLayer((lambda $l#23#ly#0: LayerType :: 
            Handle1((lambda $l#23#heap#0: Heap, $l#23#x#0: Box :: 
                $Box(State.__default.Bind(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#23#heap#0, 
                        f#0, 
                        $l#23#x#0)): DatatypeType, 
                    g#0))), 
              (lambda $l#23#heap#0: Heap, $l#23#x#0: Box :: 
                $IsBox($l#23#x#0, State._default.Associativity$A)), 
              (lambda $l#23#heap#0: Heap, $l#23#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#23#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id167"} State.M#Equal(State.__default.Bind(State._default.Associativity$B, 
      State._default.Associativity$C, 
      State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
      g#0), 
    State.__default.Bind(State._default.Associativity$A, 
      State._default.Associativity$C, 
      m#0, 
      Lit(AtLayer((lambda $l#25#ly#0: LayerType :: 
            Handle1((lambda $l#25#heap#0: Heap, $l#25#x#0: Box :: 
                $Box(State.__default.Bind(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#25#heap#0, 
                        f#0, 
                        $l#25#x#0)): DatatypeType, 
                    g#0))), 
              (lambda $l#25#heap#0: Heap, $l#25#x#0: Box :: 
                $IsBox($l#25#x#0, State._default.Associativity$A)), 
              (lambda $l#25#heap#0: Heap, $l#25#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#25#o#0: ref :: false))))), 
          $LS($LZ)))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "State.Associativity (correctness)"} Impl$$State.__default.Associativity(State._default.Associativity$A: Ty, 
    State._default.Associativity$B: Ty, 
    State._default.Associativity$C: Ty, 
    m#0: DatatypeType, 
    f#0: HandleType, 
    g#0: HandleType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var _mcc#0#0_0: HandleType;
  var h#0_0: HandleType;
  var let#0_0#0#0: HandleType;
  var $lambdaHeap#0_0_0_0: Heap;
  var s#0_0_0_0: int;
  var $_Frame#l0_0_0_0: [ref,Field]bool;
  var lambdaResult#0_0_0_0: DatatypeType;
  var _mcc#43#0_0_0_0: Box;
  var _mcc#44#0_0_0_0: int;
  var newState#Z#0_0_0_0: int;
  var let#0_0_0_0#0#0: int;
  var a#Z#0_0_0_0: Box;
  var let#0_0_0_1#0#0: Box;
  var _mcc#45#0_0_0_0: HandleType;
  var g2#Z#0_0_0_0: HandleType;
  var let#0_0_0_2#0#0: HandleType;
  var _mcc#41#0_0_0_0: Box;
  var _mcc#42#0_0_0_0: int;
  var newState#Z#0_0_0_1: int;
  var let#0_0_0_3#0#0: int;
  var a#Z#0_0_0_1: Box;
  var let#0_0_0_4#0#0: Box;
  var _mcc#46#0_0_0_0: HandleType;
  var h1#Z#0_0_0_0: HandleType;
  var let#0_0_0_5#0#0: HandleType;
  var f##0_0_0_0: HandleType;
  var $lambdaHeap#0_0_0_1: Heap;
  var s#0_0_0_1: int;
  var $_Frame#l0_0_0_1: [ref,Field]bool;
  var lambdaResult#0_0_0_1: DatatypeType;
  var _mcc#85#0_0_0_0: Box;
  var _mcc#86#0_0_0_0: int;
  var newState#Z#0_0_0_2: int;
  var let#0_0_0_6#0#0: int;
  var a#Z#0_0_0_2: Box;
  var let#0_0_0_7#0#0: Box;
  var _mcc#87#0_0_0_0: HandleType;
  var g2#Z#0_0_0_1: HandleType;
  var let#0_0_0_8#0#0: HandleType;
  var _mcc#83#0_0_0_0: Box;
  var _mcc#84#0_0_0_0: int;
  var newState#Z#0_0_0_3: int;
  var let#0_0_0_9#0#0: int;
  var a#Z#0_0_0_3: Box;
  var let#0_0_0_10#0#0: Box;
  var _mcc#88#0_0_0_0: HandleType;
  var h1#Z#0_0_0_1: HandleType;
  var let#0_0_0_11#0#0: HandleType;
  var g##0_0_0_0: HandleType;
  var $lambdaHeap#0_0_0_2: Heap;
  var s#0_0_0_2: int;
  var $_Frame#l0_0_0_2: [ref,Field]bool;
  var lambdaResult#0_0_0_2: DatatypeType;
  var _mcc#89#0_0_0_0: Box;
  var _mcc#90#0_0_0_0: int;
  var newState#Z#0_0_0_4: int;
  var let#0_0_0_12#0#0: int;
  var a#Z#0_0_0_4: Box;
  var let#0_0_0_13#0#0: Box;
  var _mcc#91#0_0_0_0: HandleType;
  var g2#Z#0_0_0_2: HandleType;
  var let#0_0_0_14#0#0: HandleType;
  var _mcc#92#0_0_0_0: Box;
  var _mcc#93#0_0_0_0: int;
  var newState2#Z#0_0_0_0: int;
  var let#0_0_0_15#0#0: int;
  var b#Z#0_0_0_0: Box;
  var let#0_0_0_16#0#0: Box;
  var _mcc#94#0_0_0_0: HandleType;
  var h1#Z#0_0_0_2: HandleType;
  var let#0_0_0_17#0#0: HandleType;
  var $lambdaHeap#0_0_0_3: Heap;
  var s#0_0_0_3: int;
  var $_Frame#l0_0_0_3: [ref,Field]bool;
  var lambdaResult#0_0_0_3: DatatypeType;
  var _mcc#47#0_0_0_0: Box;
  var _mcc#48#0_0_0_0: int;
  var newState#Z#0_0_0_5: int;
  var let#0_0_0_18#0#0: int;
  var a#Z#0_0_0_5: Box;
  var let#0_0_0_19#0#0: Box;
  var _mcc#49#0_0_0_0: HandleType;
  var g2#Z#0_0_0_3: HandleType;
  var let#0_0_0_20#0#0: HandleType;
  var _mcc#50#0_0_0_0: Box;
  var _mcc#51#0_0_0_0: int;
  var newState2#Z#0_0_0_1: int;
  var let#0_0_0_21#0#0: int;
  var b#Z#0_0_0_1: Box;
  var let#0_0_0_22#0#0: Box;
  var _mcc#52#0_0_0_0: HandleType;
  var h1#Z#0_0_0_3: HandleType;
  var let#0_0_0_23#0#0: HandleType;
  var $lambdaHeap#0_0_1_0: Heap;
  var s#0_0_1_0: int;
  var $_Frame#l0_0_1_0: [ref,Field]bool;
  var lambdaResult#0_0_1_0: DatatypeType;
  var $lambdaHeap#0_0_1_1: Heap;
  var s#0_0_1_1: int;
  var $_Frame#l0_0_1_1: [ref,Field]bool;
  var lambdaResult#0_0_1_1: DatatypeType;
  var _mcc#31#0_0_1_0: Box;
  var _mcc#32#0_0_1_0: int;
  var newState#Z#0_0_1_0: int;
  var let#0_0_1_0#0#0: int;
  var a#Z#0_0_1_0: Box;
  var let#0_0_1_1#0#0: Box;
  var _mcc#33#0_0_1_0: HandleType;
  var g2#Z#0_0_1_0: HandleType;
  var let#0_0_1_2#0#0: HandleType;
  var _mcc#29#0_0_1_0: Box;
  var _mcc#30#0_0_1_0: int;
  var newState#Z#0_0_1_1: int;
  var let#0_0_1_3#0#0: int;
  var a#Z#0_0_1_1: Box;
  var let#0_0_1_4#0#0: Box;
  var _mcc#34#0_0_1_0: HandleType;
  var h1#Z#0_0_1_0: HandleType;
  var let#0_0_1_5#0#0: HandleType;
  var f##0_0_1_0: HandleType;
  var $lambdaHeap#0_0_1_2: Heap;
  var s#0_0_1_2: int;
  var $_Frame#l0_0_1_2: [ref,Field]bool;
  var lambdaResult#0_0_1_2: DatatypeType;
  var $lambdaHeap#0_0_1_3: Heap;
  var s#0_0_1_3: int;
  var $_Frame#l0_0_1_3: [ref,Field]bool;
  var lambdaResult#0_0_1_3: DatatypeType;
  var _mcc#73#0_0_1_0: Box;
  var _mcc#74#0_0_1_0: int;
  var newState#Z#0_0_1_2: int;
  var let#0_0_1_6#0#0: int;
  var a#Z#0_0_1_2: Box;
  var let#0_0_1_7#0#0: Box;
  var _mcc#75#0_0_1_0: HandleType;
  var g2#Z#0_0_1_1: HandleType;
  var let#0_0_1_8#0#0: HandleType;
  var _mcc#71#0_0_1_0: Box;
  var _mcc#72#0_0_1_0: int;
  var newState#Z#0_0_1_3: int;
  var let#0_0_1_9#0#0: int;
  var a#Z#0_0_1_3: Box;
  var let#0_0_1_10#0#0: Box;
  var _mcc#76#0_0_1_0: HandleType;
  var h1#Z#0_0_1_1: HandleType;
  var let#0_0_1_11#0#0: HandleType;
  var g##0_0_1_0: HandleType;
  var $lambdaHeap#0_0_1_4: Heap;
  var s#0_0_1_4: int;
  var $_Frame#l0_0_1_4: [ref,Field]bool;
  var lambdaResult#0_0_1_4: DatatypeType;
  var _mcc#79#0_0_1_0: Box;
  var _mcc#80#0_0_1_0: int;
  var newState#Z#0_0_1_4: int;
  var let#0_0_1_12#0#0: int;
  var a#Z#0_0_1_4: Box;
  var let#0_0_1_13#0#0: Box;
  var _mcc#81#0_0_1_0: HandleType;
  var g2#Z#0_0_1_2: HandleType;
  var let#0_0_1_14#0#0: HandleType;
  var _mcc#77#0_0_1_0: Box;
  var _mcc#78#0_0_1_0: int;
  var newState#Z#0_0_1_5: int;
  var let#0_0_1_15#0#0: int;
  var a#Z#0_0_1_5: Box;
  var let#0_0_1_16#0#0: Box;
  var _mcc#82#0_0_1_0: HandleType;
  var h1#Z#0_0_1_2: HandleType;
  var let#0_0_1_17#0#0: HandleType;
  var $lambdaHeap#0_0_1_5: Heap;
  var s#0_0_1_5: int;
  var $_Frame#l0_0_1_5: [ref,Field]bool;
  var lambdaResult#0_0_1_5: DatatypeType;
  var _mcc#37#0_0_1_0: Box;
  var _mcc#38#0_0_1_0: int;
  var newState#Z#0_0_1_6: int;
  var let#0_0_1_18#0#0: int;
  var a#Z#0_0_1_6: Box;
  var let#0_0_1_19#0#0: Box;
  var _mcc#39#0_0_1_0: HandleType;
  var g2#Z#0_0_1_3: HandleType;
  var let#0_0_1_20#0#0: HandleType;
  var _mcc#35#0_0_1_0: Box;
  var _mcc#36#0_0_1_0: int;
  var newState#Z#0_0_1_7: int;
  var let#0_0_1_21#0#0: int;
  var a#Z#0_0_1_7: Box;
  var let#0_0_1_22#0#0: Box;
  var _mcc#40#0_0_1_0: HandleType;
  var h1#Z#0_0_1_3: HandleType;
  var let#0_0_1_23#0#0: HandleType;
  var $lambdaHeap#0_0_2_0: Heap;
  var s#0_0_2_0: int;
  var $_Frame#l0_0_2_0: [ref,Field]bool;
  var lambdaResult#0_0_2_0: DatatypeType;
  var _mcc#17#0_0_2_0: Box;
  var _mcc#18#0_0_2_0: int;
  var newState#Z#0_0_2_0: int;
  var let#0_0_2_0#0#0: int;
  var a#Z#0_0_2_0: Box;
  var let#0_0_2_1#0#0: Box;
  var _mcc#19#0_0_2_0: HandleType;
  var g2#Z#0_0_2_0: HandleType;
  var let#0_0_2_2#0#0: HandleType;
  var _mcc#16#0_0_2_0: HandleType;
  var h1#Z#0_0_2_0: HandleType;
  var let#0_0_2_3#0#0: HandleType;
  var $lambdaHeap#0_0_2_1: Heap;
  var s#0_0_2_1: int;
  var $_Frame#l0_0_2_1: [ref,Field]bool;
  var lambdaResult#0_0_2_1: DatatypeType;
  var _mcc#20#0_0_2_0: Box;
  var _mcc#21#0_0_2_0: int;
  var newState#Z#0_0_2_1: int;
  var let#0_0_2_4#0#0: int;
  var a#Z#0_0_2_1: Box;
  var let#0_0_2_5#0#0: Box;
  var _mcc#22#0_0_2_0: HandleType;
  var h1#Z#0_0_2_1: HandleType;
  var let#0_0_2_6#0#0: HandleType;
  var $lambdaHeap#0_0_2_2: Heap;
  var s#0_0_2_2: int;
  var $_Frame#l0_0_2_2: [ref,Field]bool;
  var lambdaResult#0_0_2_2: DatatypeType;
  var $lambdaHeap#0_0_2_3: Heap;
  var s#0_0_2_3: int;
  var $_Frame#l0_0_2_3: [ref,Field]bool;
  var lambdaResult#0_0_2_3: DatatypeType;
  var _mcc#25#0_0_2_0: Box;
  var _mcc#26#0_0_2_0: int;
  var newState#Z#0_0_2_2: int;
  var let#0_0_2_7#0#0: int;
  var a#Z#0_0_2_2: Box;
  var let#0_0_2_8#0#0: Box;
  var _mcc#27#0_0_2_0: HandleType;
  var g2#Z#0_0_2_1: HandleType;
  var let#0_0_2_9#0#0: HandleType;
  var _mcc#23#0_0_2_0: Box;
  var _mcc#24#0_0_2_0: int;
  var newState#Z#0_0_2_3: int;
  var let#0_0_2_10#0#0: int;
  var a#Z#0_0_2_3: Box;
  var let#0_0_2_11#0#0: Box;
  var _mcc#28#0_0_2_0: HandleType;
  var h1#Z#0_0_2_2: HandleType;
  var let#0_0_2_12#0#0: HandleType;
  var ##m#0_0_3_0: DatatypeType;
  var ##f#0_0_3_0: HandleType;
  var _mcc#5#0_0_3_0: HandleType;
  var h1#Z#0_0_3_0: HandleType;
  var let#0_0_3_0#0#0: HandleType;
  var $lambdaHeap#0_0_3_0: Heap;
  var s#0_0_3_0: int;
  var $_Frame#l0_0_3_0: [ref,Field]bool;
  var lambdaResult#0_0_3_0: DatatypeType;
  var _mcc#6#0_0_3_0: Box;
  var _mcc#7#0_0_3_0: int;
  var newState#Z#0_0_3_0: int;
  var let#0_0_3_1#0#0: int;
  var a#Z#0_0_3_0: Box;
  var let#0_0_3_2#0#0: Box;
  var _mcc#8#0_0_3_0: HandleType;
  var h1#Z#0_0_3_1: HandleType;
  var let#0_0_3_3#0#0: HandleType;
  var $lambdaHeap#0_0_3_1: Heap;
  var s#0_0_3_1: int;
  var $_Frame#l0_0_3_1: [ref,Field]bool;
  var lambdaResult#0_0_3_1: DatatypeType;
  var _mcc#10#0_0_3_0: Box;
  var _mcc#11#0_0_3_0: int;
  var newState#Z#0_0_3_1: int;
  var let#0_0_3_4#0#0: int;
  var a#Z#0_0_3_1: Box;
  var let#0_0_3_5#0#0: Box;
  var _mcc#12#0_0_3_0: HandleType;
  var g2#Z#0_0_3_0: HandleType;
  var let#0_0_3_6#0#0: HandleType;
  var _mcc#9#0_0_3_0: HandleType;
  var h1#Z#0_0_3_2: HandleType;
  var let#0_0_3_7#0#0: HandleType;
  var $lambdaHeap#0_0_3_2: Heap;
  var s#0_0_3_2: int;
  var $_Frame#l0_0_3_2: [ref,Field]bool;
  var lambdaResult#0_0_3_2: DatatypeType;
  var _mcc#13#0_0_3_0: Box;
  var _mcc#14#0_0_3_0: int;
  var newState#Z#0_0_3_2: int;
  var let#0_0_3_8#0#0: int;
  var a#Z#0_0_3_2: Box;
  var let#0_0_3_9#0#0: Box;
  var _mcc#15#0_0_3_0: HandleType;
  var h1#Z#0_0_3_3: HandleType;
  var let#0_0_3_10#0#0: HandleType;
  var ##m#0_0_4_0: DatatypeType;
  var ##m#0_0_4_1: DatatypeType;
  var ##f#0_0_4_0: HandleType;
  var ##f#0_0_4_1: HandleType;
  var ##m#0_0_4_2: DatatypeType;
  var ##f#0_0_4_2: HandleType;
  var _mcc#1#0_0_4_0: HandleType;
  var h1#Z#0_0_4_0: HandleType;
  var let#0_0_4_0#0#0: HandleType;
  var $lambdaHeap#0_0_4_0: Heap;
  var s#0_0_4_0: int;
  var $_Frame#l0_0_4_0: [ref,Field]bool;
  var lambdaResult#0_0_4_0: DatatypeType;
  var _mcc#2#0_0_4_0: Box;
  var _mcc#3#0_0_4_0: int;
  var newState#Z#0_0_4_0: int;
  var let#0_0_4_1#0#0: int;
  var a#Z#0_0_4_0: Box;
  var let#0_0_4_2#0#0: Box;
  var _mcc#4#0_0_4_0: HandleType;
  var h1#Z#0_0_4_1: HandleType;
  var let#0_0_4_3#0#0: HandleType;
  var ##m#0_0_0: DatatypeType;
  var ##m#0_0_1: DatatypeType;
  var ##f#0_0_0: HandleType;
  var ##f#0_0_1: HandleType;
  var $lambdaHeap#0_1_0_0: Heap;
  var s#0_1_0_0: int;
  var $_Frame#l0_1_0_0: [ref,Field]bool;
  var lambdaResult#0_1_0_0: DatatypeType;
  var _mcc#141#0_1_0_0: Box;
  var _mcc#142#0_1_0_0: int;
  var newState#Z#0_1_0_0: int;
  var let#0_1_0_0#0#0: int;
  var a#Z#0_1_0_0: Box;
  var let#0_1_0_1#0#0: Box;
  var _mcc#143#0_1_0_0: HandleType;
  var h2#Z#0_1_0_0: HandleType;
  var let#0_1_0_2#0#0: HandleType;
  var $lambdaHeap#0_1_0_1: Heap;
  var s#0_1_0_1: int;
  var $_Frame#l0_1_0_1: [ref,Field]bool;
  var lambdaResult#0_1_0_1: DatatypeType;
  var _mcc#144#0_1_0_0: Box;
  var _mcc#145#0_1_0_0: int;
  var newState2#Z#0_1_0_0: int;
  var let#0_1_0_3#0#0: int;
  var a2#Z#0_1_0_0: Box;
  var let#0_1_0_4#0#0: Box;
  var _mcc#146#0_1_0_0: HandleType;
  var g2#Z#0_1_0_0: HandleType;
  var let#0_1_0_5#0#0: HandleType;
  var f##0_1_0_0: HandleType;
  var $lambdaHeap#0_1_0_2: Heap;
  var s#0_1_0_2: int;
  var $_Frame#l0_1_0_2: [ref,Field]bool;
  var lambdaResult#0_1_0_2: DatatypeType;
  var _mcc#214#0_1_0_0: Box;
  var _mcc#215#0_1_0_0: int;
  var newState#Z#0_1_0_1: int;
  var let#0_1_0_6#0#0: int;
  var a#Z#0_1_0_1: Box;
  var let#0_1_0_7#0#0: Box;
  var _mcc#216#0_1_0_0: HandleType;
  var h2#Z#0_1_0_1: HandleType;
  var let#0_1_0_8#0#0: HandleType;
  var $lambdaHeap#0_1_0_3: Heap;
  var s#0_1_0_3: int;
  var $_Frame#l0_1_0_3: [ref,Field]bool;
  var lambdaResult#0_1_0_3: DatatypeType;
  var _mcc#217#0_1_0_0: Box;
  var _mcc#218#0_1_0_0: int;
  var newState2#Z#0_1_0_1: int;
  var let#0_1_0_9#0#0: int;
  var a2#Z#0_1_0_1: Box;
  var let#0_1_0_10#0#0: Box;
  var _mcc#219#0_1_0_0: HandleType;
  var g2#Z#0_1_0_1: HandleType;
  var let#0_1_0_11#0#0: HandleType;
  var g##0_1_0_0: HandleType;
  var $lambdaHeap#0_1_0_4: Heap;
  var s#0_1_0_4: int;
  var $_Frame#l0_1_0_4: [ref,Field]bool;
  var lambdaResult#0_1_0_4: DatatypeType;
  var _mcc#220#0_1_0_0: Box;
  var _mcc#221#0_1_0_0: int;
  var newState#Z#0_1_0_2: int;
  var let#0_1_0_12#0#0: int;
  var a#Z#0_1_0_2: Box;
  var let#0_1_0_13#0#0: Box;
  var _mcc#222#0_1_0_0: HandleType;
  var h2#Z#0_1_0_2: HandleType;
  var let#0_1_0_14#0#0: HandleType;
  var _mcc#223#0_1_0_0: Box;
  var _mcc#224#0_1_0_0: int;
  var newState2#Z#0_1_0_2: int;
  var let#0_1_0_15#0#0: int;
  var a2#Z#0_1_0_2: Box;
  var let#0_1_0_16#0#0: Box;
  var _mcc#225#0_1_0_0: HandleType;
  var g2#Z#0_1_0_2: HandleType;
  var let#0_1_0_17#0#0: HandleType;
  var $lambdaHeap#0_1_0_5: Heap;
  var s#0_1_0_5: int;
  var $_Frame#l0_1_0_5: [ref,Field]bool;
  var lambdaResult#0_1_0_5: DatatypeType;
  var _mcc#147#0_1_0_0: Box;
  var _mcc#148#0_1_0_0: int;
  var newState#Z#0_1_0_3: int;
  var let#0_1_0_18#0#0: int;
  var a#Z#0_1_0_3: Box;
  var let#0_1_0_19#0#0: Box;
  var _mcc#149#0_1_0_0: HandleType;
  var h2#Z#0_1_0_3: HandleType;
  var let#0_1_0_20#0#0: HandleType;
  var _mcc#150#0_1_0_0: Box;
  var _mcc#151#0_1_0_0: int;
  var newState2#Z#0_1_0_3: int;
  var let#0_1_0_21#0#0: int;
  var a2#Z#0_1_0_3: Box;
  var let#0_1_0_22#0#0: Box;
  var _mcc#152#0_1_0_0: HandleType;
  var g2#Z#0_1_0_3: HandleType;
  var let#0_1_0_23#0#0: HandleType;
  var $lambdaHeap#0_1_1_0: Heap;
  var s#0_1_1_0: int;
  var $_Frame#l0_1_1_0: [ref,Field]bool;
  var lambdaResult#0_1_1_0: DatatypeType;
  var _mcc#128#0_1_1_0: Box;
  var _mcc#129#0_1_1_0: int;
  var newState#Z#0_1_1_0: int;
  var let#0_1_1_0#0#0: int;
  var a#Z#0_1_1_0: Box;
  var let#0_1_1_1#0#0: Box;
  var _mcc#130#0_1_1_0: HandleType;
  var h2#Z#0_1_1_0: HandleType;
  var let#0_1_1_2#0#0: HandleType;
  var $lambdaHeap#0_1_1_1: Heap;
  var s#0_1_1_1: int;
  var $_Frame#l0_1_1_1: [ref,Field]bool;
  var lambdaResult#0_1_1_1: DatatypeType;
  var _mcc#132#0_1_1_0: Box;
  var _mcc#133#0_1_1_0: int;
  var newState2#Z#0_1_1_0: int;
  var let#0_1_1_3#0#0: int;
  var a2#Z#0_1_1_0: Box;
  var let#0_1_1_4#0#0: Box;
  var _mcc#134#0_1_1_0: HandleType;
  var g2#Z#0_1_1_0: HandleType;
  var let#0_1_1_5#0#0: HandleType;
  var _mcc#131#0_1_1_0: HandleType;
  var g3#Z#0_1_1_0: HandleType;
  var let#0_1_1_6#0#0: HandleType;
  var f##0_1_1_0: HandleType;
  var $lambdaHeap#0_1_1_2: Heap;
  var s#0_1_1_2: int;
  var $_Frame#l0_1_1_2: [ref,Field]bool;
  var lambdaResult#0_1_1_2: DatatypeType;
  var _mcc#201#0_1_1_0: Box;
  var _mcc#202#0_1_1_0: int;
  var newState#Z#0_1_1_1: int;
  var let#0_1_1_7#0#0: int;
  var a#Z#0_1_1_1: Box;
  var let#0_1_1_8#0#0: Box;
  var _mcc#203#0_1_1_0: HandleType;
  var h2#Z#0_1_1_1: HandleType;
  var let#0_1_1_9#0#0: HandleType;
  var $lambdaHeap#0_1_1_3: Heap;
  var s#0_1_1_3: int;
  var $_Frame#l0_1_1_3: [ref,Field]bool;
  var lambdaResult#0_1_1_3: DatatypeType;
  var _mcc#205#0_1_1_0: Box;
  var _mcc#206#0_1_1_0: int;
  var newState2#Z#0_1_1_1: int;
  var let#0_1_1_10#0#0: int;
  var a2#Z#0_1_1_1: Box;
  var let#0_1_1_11#0#0: Box;
  var _mcc#207#0_1_1_0: HandleType;
  var g2#Z#0_1_1_1: HandleType;
  var let#0_1_1_12#0#0: HandleType;
  var _mcc#204#0_1_1_0: HandleType;
  var g3#Z#0_1_1_1: HandleType;
  var let#0_1_1_13#0#0: HandleType;
  var g##0_1_1_0: HandleType;
  var $lambdaHeap#0_1_1_4: Heap;
  var s#0_1_1_4: int;
  var $_Frame#l0_1_1_4: [ref,Field]bool;
  var lambdaResult#0_1_1_4: DatatypeType;
  var _mcc#208#0_1_1_0: Box;
  var _mcc#209#0_1_1_0: int;
  var newState#Z#0_1_1_2: int;
  var let#0_1_1_14#0#0: int;
  var a#Z#0_1_1_2: Box;
  var let#0_1_1_15#0#0: Box;
  var _mcc#210#0_1_1_0: HandleType;
  var h2#Z#0_1_1_2: HandleType;
  var let#0_1_1_16#0#0: HandleType;
  var $lambdaHeap#0_1_1_5: Heap;
  var s#0_1_1_5: int;
  var $_Frame#l0_1_1_5: [ref,Field]bool;
  var lambdaResult#0_1_1_5: DatatypeType;
  var _mcc#211#0_1_1_0: Box;
  var _mcc#212#0_1_1_0: int;
  var newState2#Z#0_1_1_2: int;
  var let#0_1_1_17#0#0: int;
  var a2#Z#0_1_1_2: Box;
  var let#0_1_1_18#0#0: Box;
  var _mcc#213#0_1_1_0: HandleType;
  var g2#Z#0_1_1_2: HandleType;
  var let#0_1_1_19#0#0: HandleType;
  var $lambdaHeap#0_1_1_6: Heap;
  var s#0_1_1_6: int;
  var $_Frame#l0_1_1_6: [ref,Field]bool;
  var lambdaResult#0_1_1_6: DatatypeType;
  var _mcc#135#0_1_1_0: Box;
  var _mcc#136#0_1_1_0: int;
  var newState#Z#0_1_1_3: int;
  var let#0_1_1_20#0#0: int;
  var a#Z#0_1_1_3: Box;
  var let#0_1_1_21#0#0: Box;
  var _mcc#137#0_1_1_0: HandleType;
  var h2#Z#0_1_1_3: HandleType;
  var let#0_1_1_22#0#0: HandleType;
  var $lambdaHeap#0_1_1_7: Heap;
  var s#0_1_1_7: int;
  var $_Frame#l0_1_1_7: [ref,Field]bool;
  var lambdaResult#0_1_1_7: DatatypeType;
  var _mcc#138#0_1_1_0: Box;
  var _mcc#139#0_1_1_0: int;
  var newState2#Z#0_1_1_3: int;
  var let#0_1_1_23#0#0: int;
  var a2#Z#0_1_1_3: Box;
  var let#0_1_1_24#0#0: Box;
  var _mcc#140#0_1_1_0: HandleType;
  var g2#Z#0_1_1_3: HandleType;
  var let#0_1_1_25#0#0: HandleType;
  var $lambdaHeap#0_1_2_0: Heap;
  var s#0_1_2_0: int;
  var $_Frame#l0_1_2_0: [ref,Field]bool;
  var lambdaResult#0_1_2_0: DatatypeType;
  var _mcc#114#0_1_2_0: Box;
  var _mcc#115#0_1_2_0: int;
  var newState#Z#0_1_2_0: int;
  var let#0_1_2_0#0#0: int;
  var a#Z#0_1_2_0: Box;
  var let#0_1_2_1#0#0: Box;
  var _mcc#117#0_1_2_0: HandleType;
  var h2#Z#0_1_2_0: HandleType;
  var let#0_1_2_2#0#0: HandleType;
  var $lambdaHeap#0_1_2_1: Heap;
  var s#0_1_2_1: int;
  var $_Frame#l0_1_2_1: [ref,Field]bool;
  var lambdaResult#0_1_2_1: DatatypeType;
  var _mcc#118#0_1_2_0: Box;
  var _mcc#119#0_1_2_0: int;
  var newState2#Z#0_1_2_0: int;
  var let#0_1_2_3#0#0: int;
  var a2#Z#0_1_2_0: Box;
  var let#0_1_2_4#0#0: Box;
  var _mcc#120#0_1_2_0: HandleType;
  var g2#Z#0_1_2_0: HandleType;
  var let#0_1_2_5#0#0: HandleType;
  var _mcc#116#0_1_2_0: HandleType;
  var g3#Z#0_1_2_0: HandleType;
  var let#0_1_2_6#0#0: HandleType;
  var f##0_1_2_0: HandleType;
  var $lambdaHeap#0_1_2_2: Heap;
  var s#0_1_2_2: int;
  var $_Frame#l0_1_2_2: [ref,Field]bool;
  var lambdaResult#0_1_2_2: DatatypeType;
  var _mcc#187#0_1_2_0: Box;
  var _mcc#188#0_1_2_0: int;
  var newState#Z#0_1_2_1: int;
  var let#0_1_2_7#0#0: int;
  var a#Z#0_1_2_1: Box;
  var let#0_1_2_8#0#0: Box;
  var _mcc#190#0_1_2_0: HandleType;
  var h2#Z#0_1_2_1: HandleType;
  var let#0_1_2_9#0#0: HandleType;
  var $lambdaHeap#0_1_2_3: Heap;
  var s#0_1_2_3: int;
  var $_Frame#l0_1_2_3: [ref,Field]bool;
  var lambdaResult#0_1_2_3: DatatypeType;
  var _mcc#191#0_1_2_0: Box;
  var _mcc#192#0_1_2_0: int;
  var newState2#Z#0_1_2_1: int;
  var let#0_1_2_10#0#0: int;
  var a2#Z#0_1_2_1: Box;
  var let#0_1_2_11#0#0: Box;
  var _mcc#193#0_1_2_0: HandleType;
  var g2#Z#0_1_2_1: HandleType;
  var let#0_1_2_12#0#0: HandleType;
  var _mcc#189#0_1_2_0: HandleType;
  var g3#Z#0_1_2_1: HandleType;
  var let#0_1_2_13#0#0: HandleType;
  var g##0_1_2_0: HandleType;
  var $lambdaHeap#0_1_2_4: Heap;
  var s#0_1_2_4: int;
  var $_Frame#l0_1_2_4: [ref,Field]bool;
  var lambdaResult#0_1_2_4: DatatypeType;
  var _mcc#194#0_1_2_0: Box;
  var _mcc#195#0_1_2_0: int;
  var newState#Z#0_1_2_2: int;
  var let#0_1_2_14#0#0: int;
  var a#Z#0_1_2_2: Box;
  var let#0_1_2_15#0#0: Box;
  var _mcc#196#0_1_2_0: HandleType;
  var h2#Z#0_1_2_2: HandleType;
  var let#0_1_2_16#0#0: HandleType;
  var $lambdaHeap#0_1_2_5: Heap;
  var s#0_1_2_5: int;
  var $_Frame#l0_1_2_5: [ref,Field]bool;
  var lambdaResult#0_1_2_5: DatatypeType;
  var _mcc#198#0_1_2_0: Box;
  var _mcc#199#0_1_2_0: int;
  var newState2#Z#0_1_2_2: int;
  var let#0_1_2_17#0#0: int;
  var a2#Z#0_1_2_2: Box;
  var let#0_1_2_18#0#0: Box;
  var _mcc#200#0_1_2_0: HandleType;
  var g2#Z#0_1_2_2: HandleType;
  var let#0_1_2_19#0#0: HandleType;
  var _mcc#197#0_1_2_0: HandleType;
  var g3#Z#0_1_2_2: HandleType;
  var let#0_1_2_20#0#0: HandleType;
  var $lambdaHeap#0_1_2_6: Heap;
  var s#0_1_2_6: int;
  var $_Frame#l0_1_2_6: [ref,Field]bool;
  var lambdaResult#0_1_2_6: DatatypeType;
  var _mcc#121#0_1_2_0: Box;
  var _mcc#122#0_1_2_0: int;
  var newState#Z#0_1_2_3: int;
  var let#0_1_2_21#0#0: int;
  var a#Z#0_1_2_3: Box;
  var let#0_1_2_22#0#0: Box;
  var _mcc#123#0_1_2_0: HandleType;
  var h2#Z#0_1_2_3: HandleType;
  var let#0_1_2_23#0#0: HandleType;
  var $lambdaHeap#0_1_2_7: Heap;
  var s#0_1_2_7: int;
  var $_Frame#l0_1_2_7: [ref,Field]bool;
  var lambdaResult#0_1_2_7: DatatypeType;
  var _mcc#125#0_1_2_0: Box;
  var _mcc#126#0_1_2_0: int;
  var newState2#Z#0_1_2_3: int;
  var let#0_1_2_24#0#0: int;
  var a2#Z#0_1_2_3: Box;
  var let#0_1_2_25#0#0: Box;
  var _mcc#127#0_1_2_0: HandleType;
  var g2#Z#0_1_2_3: HandleType;
  var let#0_1_2_26#0#0: HandleType;
  var _mcc#124#0_1_2_0: HandleType;
  var g3#Z#0_1_2_3: HandleType;
  var let#0_1_2_27#0#0: HandleType;
  var $lambdaHeap#0_1_3_0: Heap;
  var s#0_1_3_0: int;
  var $_Frame#l0_1_3_0: [ref,Field]bool;
  var lambdaResult#0_1_3_0: DatatypeType;
  var _mcc#104#0_1_3_0: Box;
  var _mcc#105#0_1_3_0: int;
  var newState#Z#0_1_3_0: int;
  var let#0_1_3_0#0#0: int;
  var a#Z#0_1_3_0: Box;
  var let#0_1_3_1#0#0: Box;
  var ##m#0_1_3_0: DatatypeType;
  var ##f#0_1_3_0: HandleType;
  var _mcc#106#0_1_3_0: HandleType;
  var g2#Z#0_1_3_0: HandleType;
  var let#0_1_3_2#0#0: HandleType;
  var f##0_1_3_0: HandleType;
  var $lambdaHeap#0_1_3_1: Heap;
  var s#0_1_3_1: int;
  var $_Frame#l0_1_3_1: [ref,Field]bool;
  var lambdaResult#0_1_3_1: DatatypeType;
  var _mcc#177#0_1_3_0: Box;
  var _mcc#178#0_1_3_0: int;
  var newState#Z#0_1_3_1: int;
  var let#0_1_3_3#0#0: int;
  var a#Z#0_1_3_1: Box;
  var let#0_1_3_4#0#0: Box;
  var ##m#0_1_3_1: DatatypeType;
  var ##f#0_1_3_1: HandleType;
  var _mcc#179#0_1_3_0: HandleType;
  var g2#Z#0_1_3_1: HandleType;
  var let#0_1_3_5#0#0: HandleType;
  var g##0_1_3_0: HandleType;
  var $lambdaHeap#0_1_3_2: Heap;
  var s#0_1_3_2: int;
  var $_Frame#l0_1_3_2: [ref,Field]bool;
  var lambdaResult#0_1_3_2: DatatypeType;
  var _mcc#180#0_1_3_0: Box;
  var _mcc#181#0_1_3_0: int;
  var newState#Z#0_1_3_2: int;
  var let#0_1_3_6#0#0: int;
  var a#Z#0_1_3_2: Box;
  var let#0_1_3_7#0#0: Box;
  var _mcc#183#0_1_3_0: HandleType;
  var h2#Z#0_1_3_0: HandleType;
  var let#0_1_3_8#0#0: HandleType;
  var $lambdaHeap#0_1_3_3: Heap;
  var s#0_1_3_3: int;
  var $_Frame#l0_1_3_3: [ref,Field]bool;
  var lambdaResult#0_1_3_3: DatatypeType;
  var _mcc#184#0_1_3_0: Box;
  var _mcc#185#0_1_3_0: int;
  var newState2#Z#0_1_3_0: int;
  var let#0_1_3_9#0#0: int;
  var a2#Z#0_1_3_0: Box;
  var let#0_1_3_10#0#0: Box;
  var _mcc#186#0_1_3_0: HandleType;
  var g2#Z#0_1_3_2: HandleType;
  var let#0_1_3_11#0#0: HandleType;
  var _mcc#182#0_1_3_0: HandleType;
  var g3#Z#0_1_3_0: HandleType;
  var let#0_1_3_12#0#0: HandleType;
  var $lambdaHeap#0_1_3_4: Heap;
  var s#0_1_3_4: int;
  var $_Frame#l0_1_3_4: [ref,Field]bool;
  var lambdaResult#0_1_3_4: DatatypeType;
  var _mcc#107#0_1_3_0: Box;
  var _mcc#108#0_1_3_0: int;
  var newState#Z#0_1_3_3: int;
  var let#0_1_3_13#0#0: int;
  var a#Z#0_1_3_3: Box;
  var let#0_1_3_14#0#0: Box;
  var _mcc#110#0_1_3_0: HandleType;
  var h2#Z#0_1_3_1: HandleType;
  var let#0_1_3_15#0#0: HandleType;
  var $lambdaHeap#0_1_3_5: Heap;
  var s#0_1_3_5: int;
  var $_Frame#l0_1_3_5: [ref,Field]bool;
  var lambdaResult#0_1_3_5: DatatypeType;
  var _mcc#111#0_1_3_0: Box;
  var _mcc#112#0_1_3_0: int;
  var newState2#Z#0_1_3_1: int;
  var let#0_1_3_16#0#0: int;
  var a2#Z#0_1_3_1: Box;
  var let#0_1_3_17#0#0: Box;
  var _mcc#113#0_1_3_0: HandleType;
  var g2#Z#0_1_3_3: HandleType;
  var let#0_1_3_18#0#0: HandleType;
  var _mcc#109#0_1_3_0: HandleType;
  var g3#Z#0_1_3_1: HandleType;
  var let#0_1_3_19#0#0: HandleType;
  var $lambdaHeap#0_1_4_0: Heap;
  var s#0_1_4_0: int;
  var $_Frame#l0_1_4_0: [ref,Field]bool;
  var lambdaResult#0_1_4_0: DatatypeType;
  var _mcc#98#0_1_4_0: Box;
  var _mcc#99#0_1_4_0: int;
  var newState#Z#0_1_4_0: int;
  var let#0_1_4_0#0#0: int;
  var a#Z#0_1_4_0: Box;
  var let#0_1_4_1#0#0: Box;
  var $lambdaHeap#0_1_4_1: Heap;
  var x#0_1_4_0: Box;
  var $_Frame#l0_1_4_1: [ref,Field]bool;
  var lambdaResult#0_1_4_1: DatatypeType;
  var ##m#0_1_4_0: DatatypeType;
  var ##f#0_1_4_0: HandleType;
  var _mcc#100#0_1_4_0: HandleType;
  var g2#Z#0_1_4_0: HandleType;
  var let#0_1_4_2#0#0: HandleType;
  var f##0_1_4_0: HandleType;
  var $lambdaHeap#0_1_4_2: Heap;
  var s#0_1_4_1: int;
  var $_Frame#l0_1_4_2: [ref,Field]bool;
  var lambdaResult#0_1_4_2: DatatypeType;
  var _mcc#171#0_1_4_0: Box;
  var _mcc#172#0_1_4_0: int;
  var newState#Z#0_1_4_1: int;
  var let#0_1_4_3#0#0: int;
  var a#Z#0_1_4_1: Box;
  var let#0_1_4_4#0#0: Box;
  var $lambdaHeap#0_1_4_3: Heap;
  var x#0_1_4_1: Box;
  var $_Frame#l0_1_4_3: [ref,Field]bool;
  var lambdaResult#0_1_4_3: DatatypeType;
  var ##m#0_1_4_1: DatatypeType;
  var ##f#0_1_4_1: HandleType;
  var _mcc#173#0_1_4_0: HandleType;
  var g2#Z#0_1_4_1: HandleType;
  var let#0_1_4_5#0#0: HandleType;
  var g##0_1_4_0: HandleType;
  var $lambdaHeap#0_1_4_4: Heap;
  var s#0_1_4_2: int;
  var $_Frame#l0_1_4_4: [ref,Field]bool;
  var lambdaResult#0_1_4_4: DatatypeType;
  var _mcc#174#0_1_4_0: Box;
  var _mcc#175#0_1_4_0: int;
  var newState#Z#0_1_4_2: int;
  var let#0_1_4_6#0#0: int;
  var a#Z#0_1_4_2: Box;
  var let#0_1_4_7#0#0: Box;
  var ##m#0_1_4_2: DatatypeType;
  var ##f#0_1_4_2: HandleType;
  var _mcc#176#0_1_4_0: HandleType;
  var g2#Z#0_1_4_2: HandleType;
  var let#0_1_4_8#0#0: HandleType;
  var $lambdaHeap#0_1_4_5: Heap;
  var s#0_1_4_3: int;
  var $_Frame#l0_1_4_5: [ref,Field]bool;
  var lambdaResult#0_1_4_5: DatatypeType;
  var _mcc#101#0_1_4_0: Box;
  var _mcc#102#0_1_4_0: int;
  var newState#Z#0_1_4_3: int;
  var let#0_1_4_9#0#0: int;
  var a#Z#0_1_4_3: Box;
  var let#0_1_4_10#0#0: Box;
  var ##m#0_1_4_3: DatatypeType;
  var ##f#0_1_4_3: HandleType;
  var _mcc#103#0_1_4_0: HandleType;
  var g2#Z#0_1_4_3: HandleType;
  var let#0_1_4_11#0#0: HandleType;
  var ##m#0_1_5_0: DatatypeType;
  var ##f#0_1_5_0: HandleType;
  var $lambdaHeap#0_1_5_0: Heap;
  var x#0_1_5_0: Box;
  var $_Frame#l0_1_5_0: [ref,Field]bool;
  var lambdaResult#0_1_5_0: DatatypeType;
  var ##m#0_1_5_1: DatatypeType;
  var ##f#0_1_5_1: HandleType;
  var $lambdaHeap#0_1_5_1: Heap;
  var s#0_1_5_0: int;
  var $_Frame#l0_1_5_1: [ref,Field]bool;
  var lambdaResult#0_1_5_1: DatatypeType;
  var _mcc#95#0_1_5_0: Box;
  var _mcc#96#0_1_5_0: int;
  var newState#Z#0_1_5_0: int;
  var let#0_1_5_0#0#0: int;
  var a#Z#0_1_5_0: Box;
  var let#0_1_5_1#0#0: Box;
  var $lambdaHeap#0_1_5_2: Heap;
  var x#0_1_5_1: Box;
  var $_Frame#l0_1_5_2: [ref,Field]bool;
  var lambdaResult#0_1_5_2: DatatypeType;
  var ##m#0_1_5_2: DatatypeType;
  var ##f#0_1_5_2: HandleType;
  var _mcc#97#0_1_5_0: HandleType;
  var g2#Z#0_1_5_0: HandleType;
  var let#0_1_5_2#0#0: HandleType;
  var ##m#0_1_6_0: DatatypeType;
  var ##f#0_1_6_0: HandleType;
  var $lambdaHeap#0_1_6_0: Heap;
  var x#0_1_6_0: Box;
  var $_Frame#l0_1_6_0: [ref,Field]bool;
  var lambdaResult#0_1_6_0: DatatypeType;
  var ##m#0_1_6_1: DatatypeType;
  var ##f#0_1_6_1: HandleType;
  var ##m#0_1_6_2: DatatypeType;
  var ##f#0_1_6_2: HandleType;
  var $lambdaHeap#0_1_6_1: Heap;
  var x#0_1_6_1: Box;
  var $_Frame#l0_1_6_1: [ref,Field]bool;
  var lambdaResult#0_1_6_1: DatatypeType;
  var ##m#0_1_6_3: DatatypeType;
  var ##f#0_1_6_3: HandleType;
  var ##m#0_1_0: DatatypeType;
  var ##f#0_1_0: HandleType;
  var $lambdaHeap#0_1_0: Heap;
  var x#0_1_0: Box;
  var $_Frame#l0_1_0: [ref,Field]bool;
  var lambdaResult#0_1_0: DatatypeType;
  var ##m#0_1_1: DatatypeType;
  var ##f#0_1_1: HandleType;

    // AddMethodImpl: Associativity, Impl$$State.__default.Associativity
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    assume true;
    havoc _mcc#0#0_0;
    if (m#0 == #State.M.State(_mcc#0#0_0))
    {
        assume $Is(_mcc#0#0_0, 
          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$A, TInt)));
        havoc h#0_0;
        assume $Is(h#0_0, 
            Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$A, TInt)))
           && $IsAlloc(h#0_0, 
            Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$A, TInt)), 
            $Heap);
        assume {:id "id168"} let#0_0#0#0 == _mcc#0#0_0;
        assume true;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0_0#0#0, 
          Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$A, TInt)));
        assume {:id "id169"} h#0_0 == let#0_0#0#0;
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            ##m#0_0_1 := m#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_0_1, Tclass.State.M(State._default.Associativity$A), $Heap);
            ##f#0_0_0 := f#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_0_0, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0);
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0));
            ##m#0_0_0 := State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_0_0, Tclass.State.M(State._default.Associativity$B), $Heap);
            ##f#0_0_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_0_1, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$B, 
              State._default.Associativity$C, 
              State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
              g#0);
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                State._default.Associativity$C, 
                State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
                g#0));
            assume State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
               && State.__default.Bind#canCall(State._default.Associativity$B, 
                State._default.Associativity$C, 
                State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
                g#0);
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            ##m#0_0_4_1 := m#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_0_4_1, Tclass.State.M(State._default.Associativity$A), $Heap);
            ##f#0_0_4_0 := f#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_0_4_0, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0);
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0));
            ##m#0_0_4_0 := State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_0_4_0, Tclass.State.M(State._default.Associativity$B), $Heap);
            ##f#0_0_4_1 := g#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_0_4_1, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$B, 
              State._default.Associativity$C, 
              State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
              g#0);
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                State._default.Associativity$C, 
                State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
                g#0));
            assume State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
               && State.__default.Bind#canCall(State._default.Associativity$B, 
                State._default.Associativity$C, 
                State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
                g#0);
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            push;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            ##m#0_0_4_2 := m#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_0_4_2, Tclass.State.M(State._default.Associativity$A), $Heap);
            ##f#0_0_4_2 := f#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_0_4_2, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0);
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0));
            if (State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
               == #State.M.State(_mcc#1#0_0_4_0))
            {
                assume $Is(_mcc#1#0_0_4_0, 
                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                havoc h1#Z#0_0_4_0;
                assume {:id "id337"} let#0_0_4_0#0#0 == _mcc#1#0_0_4_0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(let#0_0_4_0#0#0, 
                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                assume {:id "id338"} h1#Z#0_0_4_0 == let#0_0_4_0#0#0;
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_0_4_0;
                    assume $IsGoodHeap($lambdaHeap#0_0_4_0);
                    assume $Heap == $lambdaHeap#0_0_4_0 || $HeapSucc($Heap, $lambdaHeap#0_0_4_0);
                    havoc s#0_0_4_0;
                    if (true)
                    {
                        $_Frame#l0_0_4_0 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_0_4_0, $o, alloc)): bool ==> false);
                        if ($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $lambdaHeap#0_0_4_0, 
                              h1#Z#0_0_4_0, 
                              $Box(s#0_0_4_0))): DatatypeType
                           == #_System._tuple#2._#Make2(_mcc#2#0_0_4_0, $Box(_mcc#3#0_0_4_0)))
                        {
                            assume $IsBox(_mcc#2#0_0_4_0, State._default.Associativity$B);
                            havoc newState#Z#0_0_4_0;
                            assume {:id "id339"} let#0_0_4_1#0#0 == _mcc#3#0_0_4_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_4_1#0#0, TInt);
                            assume {:id "id340"} newState#Z#0_0_4_0 == let#0_0_4_1#0#0;
                            havoc a#Z#0_0_4_0;
                            assume {:id "id341"} let#0_0_4_2#0#0 == _mcc#2#0_0_4_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $IsBox(let#0_0_4_2#0#0, State._default.Associativity$B);
                            assume {:id "id342"} a#Z#0_0_4_0 == let#0_0_4_2#0#0;
                            if ($Unbox(Apply1(State._default.Associativity$B, 
                                  Tclass.State.M(State._default.Associativity$C), 
                                  $lambdaHeap#0_0_4_0, 
                                  g#0, 
                                  a#Z#0_0_4_0)): DatatypeType
                               == #State.M.State(_mcc#4#0_0_4_0))
                            {
                                assume $Is(_mcc#4#0_0_4_0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                havoc h1#Z#0_0_4_1;
                                assume {:id "id343"} let#0_0_4_3#0#0 == _mcc#4#0_0_4_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_0_4_3#0#0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                assume {:id "id344"} h1#Z#0_0_4_1 == let#0_0_4_3#0#0;
                                assume {:id "id345"} lambdaResult#0_0_4_0
                                   == $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $Heap, 
                                      h1#Z#0_0_4_1, 
                                      $Box(newState#Z#0_0_4_0))): DatatypeType;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_0_4_0, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }

                    assume false;
                }

                // End Comprehension WF check
            }
            else
            {
                assume false;
            }

            assume State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
               && State.M.State_q(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0))
               && (var h1#0_0_4_1 := State.M.runState(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)); 
                (forall $l#0_0_4_1#s#0: int, $l#0_0_4_1#heap#0: Heap :: 
                  $IsGoodHeap($l#0_0_4_1#heap#0)
                     ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_4_1#heap#0, 
                            h1#0_0_4_1, 
                            $Box($l#0_0_4_1#s#0))): DatatypeType)
                       && 
                      _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_4_1#heap#0, 
                            h1#0_0_4_1, 
                            $Box($l#0_0_4_1#s#0))): DatatypeType)
                       && (var a#0_0_4_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                $l#0_0_4_1#heap#0, 
                                h1#0_0_4_1, 
                                $Box($l#0_0_4_1#s#0))): DatatypeType); 
                        State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $l#0_0_4_1#heap#0, 
                              g#0, 
                              a#0_0_4_1)): DatatypeType))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            assert {:id "id346"} {:subsumption 0} State.M#Equal(State.__default.Bind(State._default.Associativity$B, 
                State._default.Associativity$C, 
                State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
                g#0), 
              (var h1#0_0_4_5 := State.M.runState(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)); 
                Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_4_3#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_4_3#heap#0: Heap, $l#0_0_4_3#s#0: Box :: 
                              $Box((var newState#0_0_4_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_0_4_3#heap#0, 
                                            h1#0_0_4_5, 
                                            $Box($Unbox($l#0_0_4_3#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_4_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_0_4_3#heap#0, 
                                            h1#0_0_4_5, 
                                            $Box($Unbox($l#0_0_4_3#s#0): int))): DatatypeType); 
                                    (var h1#0_0_4_6 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $l#0_0_4_3#heap#0, 
                                              g#0, 
                                              a#0_0_4_3)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                          $l#0_0_4_3#heap#0, 
                                          h1#0_0_4_6, 
                                          $Box(newState#0_0_4_3))): DatatypeType))))), 
                            (lambda $l#0_0_4_3#heap#0: Heap, $l#0_0_4_3#s#0: Box :: 
                              $IsBox($l#0_0_4_3#s#0, TInt)), 
                            (lambda $l#0_0_4_3#heap#0: Heap, $l#0_0_4_3#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_4_3#o#0: ref :: false))))), 
                        $LS($LZ)))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            ##m#0_0_3_0 := m#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_0_3_0, Tclass.State.M(State._default.Associativity$A), $Heap);
            ##f#0_0_3_0 := f#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_0_3_0, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$B)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0);
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0));
            if (State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
               == #State.M.State(_mcc#5#0_0_3_0))
            {
                assume $Is(_mcc#5#0_0_3_0, 
                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                havoc h1#Z#0_0_3_0;
                assume {:id "id311"} let#0_0_3_0#0#0 == _mcc#5#0_0_3_0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(let#0_0_3_0#0#0, 
                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                assume {:id "id312"} h1#Z#0_0_3_0 == let#0_0_3_0#0#0;
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_0_3_0;
                    assume $IsGoodHeap($lambdaHeap#0_0_3_0);
                    assume $Heap == $lambdaHeap#0_0_3_0 || $HeapSucc($Heap, $lambdaHeap#0_0_3_0);
                    havoc s#0_0_3_0;
                    if (true)
                    {
                        $_Frame#l0_0_3_0 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_0_3_0, $o, alloc)): bool ==> false);
                        if ($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $lambdaHeap#0_0_3_0, 
                              h1#Z#0_0_3_0, 
                              $Box(s#0_0_3_0))): DatatypeType
                           == #_System._tuple#2._#Make2(_mcc#6#0_0_3_0, $Box(_mcc#7#0_0_3_0)))
                        {
                            assume $IsBox(_mcc#6#0_0_3_0, State._default.Associativity$B);
                            havoc newState#Z#0_0_3_0;
                            assume {:id "id313"} let#0_0_3_1#0#0 == _mcc#7#0_0_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_3_1#0#0, TInt);
                            assume {:id "id314"} newState#Z#0_0_3_0 == let#0_0_3_1#0#0;
                            havoc a#Z#0_0_3_0;
                            assume {:id "id315"} let#0_0_3_2#0#0 == _mcc#6#0_0_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $IsBox(let#0_0_3_2#0#0, State._default.Associativity$B);
                            assume {:id "id316"} a#Z#0_0_3_0 == let#0_0_3_2#0#0;
                            if ($Unbox(Apply1(State._default.Associativity$B, 
                                  Tclass.State.M(State._default.Associativity$C), 
                                  $lambdaHeap#0_0_3_0, 
                                  g#0, 
                                  a#Z#0_0_3_0)): DatatypeType
                               == #State.M.State(_mcc#8#0_0_3_0))
                            {
                                assume $Is(_mcc#8#0_0_3_0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                havoc h1#Z#0_0_3_1;
                                assume {:id "id317"} let#0_0_3_3#0#0 == _mcc#8#0_0_3_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_0_3_3#0#0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                assume {:id "id318"} h1#Z#0_0_3_1 == let#0_0_3_3#0#0;
                                assume {:id "id319"} lambdaResult#0_0_3_0
                                   == $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $Heap, 
                                      h1#Z#0_0_3_1, 
                                      $Box(newState#Z#0_0_3_0))): DatatypeType;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_0_3_0, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }

                    assume false;
                }

                // End Comprehension WF check
            }
            else
            {
                assume false;
            }

            assume State.__default.Bind#canCall(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)
               && State.M.State_q(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0))
               && (var h1#0_0_3_1 := State.M.runState(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)); 
                (forall $l#0_0_3_1#s#0: int, $l#0_0_3_1#heap#0: Heap :: 
                  $IsGoodHeap($l#0_0_3_1#heap#0)
                     ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_3_1#heap#0, 
                            h1#0_0_3_1, 
                            $Box($l#0_0_3_1#s#0))): DatatypeType)
                       && 
                      _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_3_1#heap#0, 
                            h1#0_0_3_1, 
                            $Box($l#0_0_3_1#s#0))): DatatypeType)
                       && (var a#0_0_3_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                $l#0_0_3_1#heap#0, 
                                h1#0_0_3_1, 
                                $Box($l#0_0_3_1#s#0))): DatatypeType); 
                        State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $l#0_0_3_1#heap#0, 
                              g#0, 
                              a#0_0_3_1)): DatatypeType))));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            push;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_3_1;
                assume $IsGoodHeap($lambdaHeap#0_0_3_1);
                assume $Heap == $lambdaHeap#0_0_3_1 || $HeapSucc($Heap, $lambdaHeap#0_0_3_1);
                havoc s#0_0_3_1;
                if (true)
                {
                    $_Frame#l0_0_3_1 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_3_1, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_0_3_1, 
                          h#0_0, 
                          $Box(s#0_0_3_1))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#10#0_0_3_0, $Box(_mcc#11#0_0_3_0)))
                    {
                        assume $IsBox(_mcc#10#0_0_3_0, State._default.Associativity$A);
                        havoc newState#Z#0_0_3_1;
                        assume {:id "id320"} let#0_0_3_4#0#0 == _mcc#11#0_0_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_3_4#0#0, TInt);
                        assume {:id "id321"} newState#Z#0_0_3_1 == let#0_0_3_4#0#0;
                        havoc a#Z#0_0_3_1;
                        assume {:id "id322"} let#0_0_3_5#0#0 == _mcc#10#0_0_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_3_5#0#0, State._default.Associativity$A);
                        assume {:id "id323"} a#Z#0_0_3_1 == let#0_0_3_5#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_0_3_1, 
                              f#0, 
                              a#Z#0_0_3_1)): DatatypeType
                           == #State.M.State(_mcc#12#0_0_3_0))
                        {
                            assume $Is(_mcc#12#0_0_3_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc g2#Z#0_0_3_0;
                            assume {:id "id324"} let#0_0_3_6#0#0 == _mcc#12#0_0_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_3_6#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id325"} g2#Z#0_0_3_0 == let#0_0_3_6#0#0;
                            assume {:id "id326"} lambdaResult#0_0_3_1
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $Heap, 
                                  g2#Z#0_0_3_0, 
                                  $Box(newState#Z#0_0_3_1))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_3_1, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            if (Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_3_3#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0_3_3#heap#0: Heap, $l#0_0_3_3#s#0: Box :: 
                            $Box((var newState#0_0_3_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                          $l#0_0_3_3#heap#0, 
                                          h#0_0, 
                                          $Box($Unbox($l#0_0_3_3#s#0): int))): DatatypeType)): int; 
                                (var a#0_0_3_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                          $l#0_0_3_3#heap#0, 
                                          h#0_0, 
                                          $Box($Unbox($l#0_0_3_3#s#0): int))): DatatypeType); 
                                  (var g2#0_0_3_1 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                            Tclass.State.M(State._default.Associativity$B), 
                                            $l#0_0_3_3#heap#0, 
                                            f#0, 
                                            a#0_0_3_3)): DatatypeType); 
                                    $Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_0_3_3#heap#0, 
                                        g2#0_0_3_1, 
                                        $Box(newState#0_0_3_3))): DatatypeType))))), 
                          (lambda $l#0_0_3_3#heap#0: Heap, $l#0_0_3_3#s#0: Box :: 
                            $IsBox($l#0_0_3_3#s#0, TInt)), 
                          (lambda $l#0_0_3_3#heap#0: Heap, $l#0_0_3_3#s#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0_3_3#o#0: ref :: false))))), 
                      $LS($LZ)))))
               == #State.M.State(_mcc#9#0_0_3_0))
            {
                assume $Is(_mcc#9#0_0_3_0, 
                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                havoc h1#Z#0_0_3_2;
                assume {:id "id327"} let#0_0_3_7#0#0 == _mcc#9#0_0_3_0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(let#0_0_3_7#0#0, 
                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                assume {:id "id328"} h1#Z#0_0_3_2 == let#0_0_3_7#0#0;
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_0_3_2;
                    assume $IsGoodHeap($lambdaHeap#0_0_3_2);
                    assume $Heap == $lambdaHeap#0_0_3_2 || $HeapSucc($Heap, $lambdaHeap#0_0_3_2);
                    havoc s#0_0_3_2;
                    if (true)
                    {
                        $_Frame#l0_0_3_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_0_3_2, $o, alloc)): bool ==> false);
                        if ($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $lambdaHeap#0_0_3_2, 
                              h1#Z#0_0_3_2, 
                              $Box(s#0_0_3_2))): DatatypeType
                           == #_System._tuple#2._#Make2(_mcc#13#0_0_3_0, $Box(_mcc#14#0_0_3_0)))
                        {
                            assume $IsBox(_mcc#13#0_0_3_0, State._default.Associativity$B);
                            havoc newState#Z#0_0_3_2;
                            assume {:id "id329"} let#0_0_3_8#0#0 == _mcc#14#0_0_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_3_8#0#0, TInt);
                            assume {:id "id330"} newState#Z#0_0_3_2 == let#0_0_3_8#0#0;
                            havoc a#Z#0_0_3_2;
                            assume {:id "id331"} let#0_0_3_9#0#0 == _mcc#13#0_0_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $IsBox(let#0_0_3_9#0#0, State._default.Associativity$B);
                            assume {:id "id332"} a#Z#0_0_3_2 == let#0_0_3_9#0#0;
                            if ($Unbox(Apply1(State._default.Associativity$B, 
                                  Tclass.State.M(State._default.Associativity$C), 
                                  $lambdaHeap#0_0_3_2, 
                                  g#0, 
                                  a#Z#0_0_3_2)): DatatypeType
                               == #State.M.State(_mcc#15#0_0_3_0))
                            {
                                assume $Is(_mcc#15#0_0_3_0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                havoc h1#Z#0_0_3_3;
                                assume {:id "id333"} let#0_0_3_10#0#0 == _mcc#15#0_0_3_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_0_3_10#0#0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                assume {:id "id334"} h1#Z#0_0_3_3 == let#0_0_3_10#0#0;
                                assume {:id "id335"} lambdaResult#0_0_3_2
                                   == $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $Heap, 
                                      h1#Z#0_0_3_3, 
                                      $Box(newState#Z#0_0_3_2))): DatatypeType;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_0_3_2, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }

                    assume false;
                }

                // End Comprehension WF check
            }
            else
            {
                assume false;
            }

            assume (forall $l#0_0_3_5#s#0: int, $l#0_0_3_5#heap#0: Heap :: 
                $IsGoodHeap($l#0_0_3_5#heap#0)
                   ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $l#0_0_3_5#heap#0, 
                          h#0_0, 
                          $Box($l#0_0_3_5#s#0))): DatatypeType)
                     && 
                    _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $l#0_0_3_5#heap#0, 
                          h#0_0, 
                          $Box($l#0_0_3_5#s#0))): DatatypeType)
                     && (var a#0_0_3_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_3_5#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_3_5#s#0))): DatatypeType); 
                      State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_0_3_5#heap#0, 
                            f#0, 
                            a#0_0_3_5)): DatatypeType)))
               && State.M.State_q(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_3_6#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_3_6#heap#0: Heap, $l#0_0_3_6#s#0: Box :: 
                              $Box((var newState#0_0_3_6 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_3_6#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_3_6#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_3_6 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_3_6#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_3_6#s#0): int))): DatatypeType); 
                                    (var g2#0_0_3_3 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                              Tclass.State.M(State._default.Associativity$B), 
                                              $l#0_0_3_6#heap#0, 
                                              f#0, 
                                              a#0_0_3_6)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_3_6#heap#0, 
                                          g2#0_0_3_3, 
                                          $Box(newState#0_0_3_6))): DatatypeType))))), 
                            (lambda $l#0_0_3_6#heap#0: Heap, $l#0_0_3_6#s#0: Box :: 
                              $IsBox($l#0_0_3_6#s#0, TInt)), 
                            (lambda $l#0_0_3_6#heap#0: Heap, $l#0_0_3_6#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_3_6#o#0: ref :: false))))), 
                        $LS($LZ))))))
               && (var h1#0_0_3_4 := Lit(State.M.runState(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_3_8#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_3_8#heap#0: Heap, $l#0_0_3_8#s#0: Box :: 
                                    $Box((var newState#0_0_3_8 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_3_8#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_3_8#s#0): int))): DatatypeType)): int; 
                                        (var a#0_0_3_8 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_3_8#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_3_8#s#0): int))): DatatypeType); 
                                          (var g2#0_0_3_4 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                    Tclass.State.M(State._default.Associativity$B), 
                                                    $l#0_0_3_8#heap#0, 
                                                    f#0, 
                                                    a#0_0_3_8)): DatatypeType); 
                                            $Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                $l#0_0_3_8#heap#0, 
                                                g2#0_0_3_4, 
                                                $Box(newState#0_0_3_8))): DatatypeType))))), 
                                  (lambda $l#0_0_3_8#heap#0: Heap, $l#0_0_3_8#s#0: Box :: 
                                    $IsBox($l#0_0_3_8#s#0, TInt)), 
                                  (lambda $l#0_0_3_8#heap#0: Heap, $l#0_0_3_8#s#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_3_8#o#0: ref :: false))))), 
                              $LS($LZ))))))); 
                (forall $l#0_0_3_7#s#0: int, $l#0_0_3_7#heap#0: Heap :: 
                  $IsGoodHeap($l#0_0_3_7#heap#0)
                     ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_3_7#heap#0, 
                            h1#0_0_3_4, 
                            $Box($l#0_0_3_7#s#0))): DatatypeType)
                       && 
                      _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_3_7#heap#0, 
                            h1#0_0_3_4, 
                            $Box($l#0_0_3_7#s#0))): DatatypeType)
                       && (var a#0_0_3_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                $l#0_0_3_7#heap#0, 
                                h1#0_0_3_4, 
                                $Box($l#0_0_3_7#s#0))): DatatypeType); 
                        State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $l#0_0_3_7#heap#0, 
                              g#0, 
                              a#0_0_3_7)): DatatypeType))));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            assert {:id "id336"} {:subsumption 0} State.M#Equal((var h1#0_0_3_10 := State.M.runState(State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0)); 
                Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_3_12#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_3_12#heap#0: Heap, $l#0_0_3_12#s#0: Box :: 
                              $Box((var newState#0_0_3_12 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_0_3_12#heap#0, 
                                            h1#0_0_3_10, 
                                            $Box($Unbox($l#0_0_3_12#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_3_12 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_0_3_12#heap#0, 
                                            h1#0_0_3_10, 
                                            $Box($Unbox($l#0_0_3_12#s#0): int))): DatatypeType); 
                                    (var h1#0_0_3_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $l#0_0_3_12#heap#0, 
                                              g#0, 
                                              a#0_0_3_12)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                          $l#0_0_3_12#heap#0, 
                                          h1#0_0_3_11, 
                                          $Box(newState#0_0_3_12))): DatatypeType))))), 
                            (lambda $l#0_0_3_12#heap#0: Heap, $l#0_0_3_12#s#0: Box :: 
                              $IsBox($l#0_0_3_12#s#0, TInt)), 
                            (lambda $l#0_0_3_12#heap#0: Heap, $l#0_0_3_12#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_3_12#o#0: ref :: false))))), 
                        $LS($LZ)))))), 
              (var h1#0_0_3_12 := Lit(State.M.runState(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_3_13#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_3_13#heap#0: Heap, $l#0_0_3_13#s#0: Box :: 
                                    $Box((var newState#0_0_3_13 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_3_13#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_3_13#s#0): int))): DatatypeType)): int; 
                                        (var a#0_0_3_13 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_3_13#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_3_13#s#0): int))): DatatypeType); 
                                          (var g2#0_0_3_6 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                    Tclass.State.M(State._default.Associativity$B), 
                                                    $l#0_0_3_13#heap#0, 
                                                    f#0, 
                                                    a#0_0_3_13)): DatatypeType); 
                                            $Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                $l#0_0_3_13#heap#0, 
                                                g2#0_0_3_6, 
                                                $Box(newState#0_0_3_13))): DatatypeType))))), 
                                  (lambda $l#0_0_3_13#heap#0: Heap, $l#0_0_3_13#s#0: Box :: 
                                    $IsBox($l#0_0_3_13#s#0, TInt)), 
                                  (lambda $l#0_0_3_13#heap#0: Heap, $l#0_0_3_13#s#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_3_13#o#0: ref :: false))))), 
                              $LS($LZ))))))); 
                Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_3_14#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_3_14#heap#0: Heap, $l#0_0_3_14#s#0: Box :: 
                              $Box((var newState#0_0_3_14 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_0_3_14#heap#0, 
                                            h1#0_0_3_12, 
                                            $Box($Unbox($l#0_0_3_14#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_3_14 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_0_3_14#heap#0, 
                                            h1#0_0_3_12, 
                                            $Box($Unbox($l#0_0_3_14#s#0): int))): DatatypeType); 
                                    (var h1#0_0_3_13 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $l#0_0_3_14#heap#0, 
                                              g#0, 
                                              a#0_0_3_14)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                          $l#0_0_3_14#heap#0, 
                                          h1#0_0_3_13, 
                                          $Box(newState#0_0_3_14))): DatatypeType))))), 
                            (lambda $l#0_0_3_14#heap#0: Heap, $l#0_0_3_14#s#0: Box :: 
                              $IsBox($l#0_0_3_14#s#0, TInt)), 
                            (lambda $l#0_0_3_14#heap#0: Heap, $l#0_0_3_14#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_3_14#o#0: ref :: false))))), 
                        $LS($LZ)))))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_2_0;
                assume $IsGoodHeap($lambdaHeap#0_0_2_0);
                assume $Heap == $lambdaHeap#0_0_2_0 || $HeapSucc($Heap, $lambdaHeap#0_0_2_0);
                havoc s#0_0_2_0;
                if (true)
                {
                    $_Frame#l0_0_2_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_2_0, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_0_2_0, 
                          h#0_0, 
                          $Box(s#0_0_2_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#17#0_0_2_0, $Box(_mcc#18#0_0_2_0)))
                    {
                        assume $IsBox(_mcc#17#0_0_2_0, State._default.Associativity$A);
                        havoc newState#Z#0_0_2_0;
                        assume {:id "id280"} let#0_0_2_0#0#0 == _mcc#18#0_0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_2_0#0#0, TInt);
                        assume {:id "id281"} newState#Z#0_0_2_0 == let#0_0_2_0#0#0;
                        havoc a#Z#0_0_2_0;
                        assume {:id "id282"} let#0_0_2_1#0#0 == _mcc#17#0_0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_2_1#0#0, State._default.Associativity$A);
                        assume {:id "id283"} a#Z#0_0_2_0 == let#0_0_2_1#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_0_2_0, 
                              f#0, 
                              a#Z#0_0_2_0)): DatatypeType
                           == #State.M.State(_mcc#19#0_0_2_0))
                        {
                            assume $Is(_mcc#19#0_0_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc g2#Z#0_0_2_0;
                            assume {:id "id284"} let#0_0_2_2#0#0 == _mcc#19#0_0_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_2_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id285"} g2#Z#0_0_2_0 == let#0_0_2_2#0#0;
                            assume {:id "id286"} lambdaResult#0_0_2_0
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $Heap, 
                                  g2#Z#0_0_2_0, 
                                  $Box(newState#Z#0_0_2_0))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_2_0, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            if (Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_2_1#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0_2_1#heap#0: Heap, $l#0_0_2_1#s#0: Box :: 
                            $Box((var newState#0_0_2_1 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                          $l#0_0_2_1#heap#0, 
                                          h#0_0, 
                                          $Box($Unbox($l#0_0_2_1#s#0): int))): DatatypeType)): int; 
                                (var a#0_0_2_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                          $l#0_0_2_1#heap#0, 
                                          h#0_0, 
                                          $Box($Unbox($l#0_0_2_1#s#0): int))): DatatypeType); 
                                  (var g2#0_0_2_1 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                            Tclass.State.M(State._default.Associativity$B), 
                                            $l#0_0_2_1#heap#0, 
                                            f#0, 
                                            a#0_0_2_1)): DatatypeType); 
                                    $Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_0_2_1#heap#0, 
                                        g2#0_0_2_1, 
                                        $Box(newState#0_0_2_1))): DatatypeType))))), 
                          (lambda $l#0_0_2_1#heap#0: Heap, $l#0_0_2_1#s#0: Box :: 
                            $IsBox($l#0_0_2_1#s#0, TInt)), 
                          (lambda $l#0_0_2_1#heap#0: Heap, $l#0_0_2_1#s#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0_2_1#o#0: ref :: false))))), 
                      $LS($LZ)))))
               == #State.M.State(_mcc#16#0_0_2_0))
            {
                assume $Is(_mcc#16#0_0_2_0, 
                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                havoc h1#Z#0_0_2_0;
                assume {:id "id287"} let#0_0_2_3#0#0 == _mcc#16#0_0_2_0;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(let#0_0_2_3#0#0, 
                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                assume {:id "id288"} h1#Z#0_0_2_0 == let#0_0_2_3#0#0;
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_0_2_1;
                    assume $IsGoodHeap($lambdaHeap#0_0_2_1);
                    assume $Heap == $lambdaHeap#0_0_2_1 || $HeapSucc($Heap, $lambdaHeap#0_0_2_1);
                    havoc s#0_0_2_1;
                    if (true)
                    {
                        $_Frame#l0_0_2_1 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_0_2_1, $o, alloc)): bool ==> false);
                        if ($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $lambdaHeap#0_0_2_1, 
                              h1#Z#0_0_2_0, 
                              $Box(s#0_0_2_1))): DatatypeType
                           == #_System._tuple#2._#Make2(_mcc#20#0_0_2_0, $Box(_mcc#21#0_0_2_0)))
                        {
                            assume $IsBox(_mcc#20#0_0_2_0, State._default.Associativity$B);
                            havoc newState#Z#0_0_2_1;
                            assume {:id "id289"} let#0_0_2_4#0#0 == _mcc#21#0_0_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_2_4#0#0, TInt);
                            assume {:id "id290"} newState#Z#0_0_2_1 == let#0_0_2_4#0#0;
                            havoc a#Z#0_0_2_1;
                            assume {:id "id291"} let#0_0_2_5#0#0 == _mcc#20#0_0_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $IsBox(let#0_0_2_5#0#0, State._default.Associativity$B);
                            assume {:id "id292"} a#Z#0_0_2_1 == let#0_0_2_5#0#0;
                            if ($Unbox(Apply1(State._default.Associativity$B, 
                                  Tclass.State.M(State._default.Associativity$C), 
                                  $lambdaHeap#0_0_2_1, 
                                  g#0, 
                                  a#Z#0_0_2_1)): DatatypeType
                               == #State.M.State(_mcc#22#0_0_2_0))
                            {
                                assume $Is(_mcc#22#0_0_2_0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                havoc h1#Z#0_0_2_1;
                                assume {:id "id293"} let#0_0_2_6#0#0 == _mcc#22#0_0_2_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_0_2_6#0#0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                assume {:id "id294"} h1#Z#0_0_2_1 == let#0_0_2_6#0#0;
                                assume {:id "id295"} lambdaResult#0_0_2_1
                                   == $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $Heap, 
                                      h1#Z#0_0_2_1, 
                                      $Box(newState#Z#0_0_2_1))): DatatypeType;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_0_2_1, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }

                    assume false;
                }

                // End Comprehension WF check
            }
            else
            {
                assume false;
            }

            assume (forall $l#0_0_2_3#s#0: int, $l#0_0_2_3#heap#0: Heap :: 
                $IsGoodHeap($l#0_0_2_3#heap#0)
                   ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $l#0_0_2_3#heap#0, 
                          h#0_0, 
                          $Box($l#0_0_2_3#s#0))): DatatypeType)
                     && 
                    _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $l#0_0_2_3#heap#0, 
                          h#0_0, 
                          $Box($l#0_0_2_3#s#0))): DatatypeType)
                     && (var a#0_0_2_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_2_3#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_2_3#s#0))): DatatypeType); 
                      State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_0_2_3#heap#0, 
                            f#0, 
                            a#0_0_2_3)): DatatypeType)))
               && State.M.State_q(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_2_4#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_2_4#heap#0: Heap, $l#0_0_2_4#s#0: Box :: 
                              $Box((var newState#0_0_2_4 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_2_4#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_2_4#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_2_4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_2_4#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_2_4#s#0): int))): DatatypeType); 
                                    (var g2#0_0_2_3 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                              Tclass.State.M(State._default.Associativity$B), 
                                              $l#0_0_2_4#heap#0, 
                                              f#0, 
                                              a#0_0_2_4)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_2_4#heap#0, 
                                          g2#0_0_2_3, 
                                          $Box(newState#0_0_2_4))): DatatypeType))))), 
                            (lambda $l#0_0_2_4#heap#0: Heap, $l#0_0_2_4#s#0: Box :: 
                              $IsBox($l#0_0_2_4#s#0, TInt)), 
                            (lambda $l#0_0_2_4#heap#0: Heap, $l#0_0_2_4#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_2_4#o#0: ref :: false))))), 
                        $LS($LZ))))))
               && (var h1#0_0_2_1 := Lit(State.M.runState(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_2_6#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_2_6#heap#0: Heap, $l#0_0_2_6#s#0: Box :: 
                                    $Box((var newState#0_0_2_6 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_2_6#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_2_6#s#0): int))): DatatypeType)): int; 
                                        (var a#0_0_2_6 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_2_6#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_2_6#s#0): int))): DatatypeType); 
                                          (var g2#0_0_2_4 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                    Tclass.State.M(State._default.Associativity$B), 
                                                    $l#0_0_2_6#heap#0, 
                                                    f#0, 
                                                    a#0_0_2_6)): DatatypeType); 
                                            $Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                $l#0_0_2_6#heap#0, 
                                                g2#0_0_2_4, 
                                                $Box(newState#0_0_2_6))): DatatypeType))))), 
                                  (lambda $l#0_0_2_6#heap#0: Heap, $l#0_0_2_6#s#0: Box :: 
                                    $IsBox($l#0_0_2_6#s#0, TInt)), 
                                  (lambda $l#0_0_2_6#heap#0: Heap, $l#0_0_2_6#s#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_2_6#o#0: ref :: false))))), 
                              $LS($LZ))))))); 
                (forall $l#0_0_2_5#s#0: int, $l#0_0_2_5#heap#0: Heap :: 
                  $IsGoodHeap($l#0_0_2_5#heap#0)
                     ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_2_5#heap#0, 
                            h1#0_0_2_1, 
                            $Box($l#0_0_2_5#s#0))): DatatypeType)
                       && 
                      _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_2_5#heap#0, 
                            h1#0_0_2_1, 
                            $Box($l#0_0_2_5#s#0))): DatatypeType)
                       && (var a#0_0_2_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                $l#0_0_2_5#heap#0, 
                                h1#0_0_2_1, 
                                $Box($l#0_0_2_5#s#0))): DatatypeType); 
                        State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $l#0_0_2_5#heap#0, 
                              g#0, 
                              a#0_0_2_5)): DatatypeType))));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            push;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_2_2;
                assume $IsGoodHeap($lambdaHeap#0_0_2_2);
                assume $Heap == $lambdaHeap#0_0_2_2 || $HeapSucc($Heap, $lambdaHeap#0_0_2_2);
                havoc s#0_0_2_2;
                if (true)
                {
                    $_Frame#l0_0_2_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_2_2, $o, alloc)): bool ==> false);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_0_2_3;
                        assume $IsGoodHeap($lambdaHeap#0_0_2_3);
                        assume $lambdaHeap#0_0_2_2 == $lambdaHeap#0_0_2_3
                           || $HeapSucc($lambdaHeap#0_0_2_2, $lambdaHeap#0_0_2_3);
                        havoc s#0_0_2_3;
                        if (true)
                        {
                            $_Frame#l0_0_2_3 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_0_2_3, $o, alloc)): bool ==> false);
                            if ($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_2_3, 
                                  h#0_0, 
                                  $Box(s#0_0_2_3))): DatatypeType
                               == #_System._tuple#2._#Make2(_mcc#25#0_0_2_0, $Box(_mcc#26#0_0_2_0)))
                            {
                                assume $IsBox(_mcc#25#0_0_2_0, State._default.Associativity$A);
                                havoc newState#Z#0_0_2_2;
                                assume {:id "id296"} let#0_0_2_7#0#0 == _mcc#26#0_0_2_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_0_2_7#0#0, TInt);
                                assume {:id "id297"} newState#Z#0_0_2_2 == let#0_0_2_7#0#0;
                                havoc a#Z#0_0_2_2;
                                assume {:id "id298"} let#0_0_2_8#0#0 == _mcc#25#0_0_2_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $IsBox(let#0_0_2_8#0#0, State._default.Associativity$A);
                                assume {:id "id299"} a#Z#0_0_2_2 == let#0_0_2_8#0#0;
                                if ($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $lambdaHeap#0_0_2_3, 
                                      f#0, 
                                      a#Z#0_0_2_2)): DatatypeType
                                   == #State.M.State(_mcc#27#0_0_2_0))
                                {
                                    assume $Is(_mcc#27#0_0_2_0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                                    havoc g2#Z#0_0_2_1;
                                    assume {:id "id300"} let#0_0_2_9#0#0 == _mcc#27#0_0_2_0;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#0_0_2_9#0#0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                                    assume {:id "id301"} g2#Z#0_0_2_1 == let#0_0_2_9#0#0;
                                    assume {:id "id302"} lambdaResult#0_0_2_3
                                       == $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_0_2_2, 
                                          g2#Z#0_0_2_1, 
                                          $Box(newState#Z#0_0_2_2))): DatatypeType;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(lambdaResult#0_0_2_3, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt));
                                }
                                else
                                {
                                    assume false;
                                }
                            }
                            else
                            {
                                assume false;
                            }
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                          $lambdaHeap#0_0_2_2, 
                          Lit(AtLayer((lambda $l#0_0_2_8#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_2_8#heap#0: Heap, $l#0_0_2_8#s#0: Box :: 
                                    $Box((var newState#0_0_2_8 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_2_8#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_2_8#s#0): int))): DatatypeType)): int; 
                                        (var a#0_0_2_8 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_2_8#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_2_8#s#0): int))): DatatypeType); 
                                          (var g2#0_0_2_6 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                    Tclass.State.M(State._default.Associativity$B), 
                                                    $l#0_0_2_8#heap#0, 
                                                    f#0, 
                                                    a#0_0_2_8)): DatatypeType); 
                                            $Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                $l#0_0_2_8#heap#0, 
                                                g2#0_0_2_6, 
                                                $Box(newState#0_0_2_8))): DatatypeType))))), 
                                  (lambda $l#0_0_2_8#heap#0: Heap, $l#0_0_2_8#s#0: Box :: 
                                    $IsBox($l#0_0_2_8#s#0, TInt)), 
                                  (lambda $l#0_0_2_8#heap#0: Heap, $l#0_0_2_8#s#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_2_8#o#0: ref :: false))))), 
                              $LS($LZ))), 
                          $Box(s#0_0_2_2))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#23#0_0_2_0, $Box(_mcc#24#0_0_2_0)))
                    {
                        assume $IsBox(_mcc#23#0_0_2_0, State._default.Associativity$B);
                        havoc newState#Z#0_0_2_3;
                        assume {:id "id303"} let#0_0_2_10#0#0 == _mcc#24#0_0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_2_10#0#0, TInt);
                        assume {:id "id304"} newState#Z#0_0_2_3 == let#0_0_2_10#0#0;
                        havoc a#Z#0_0_2_3;
                        assume {:id "id305"} let#0_0_2_11#0#0 == _mcc#23#0_0_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_2_11#0#0, State._default.Associativity$B);
                        assume {:id "id306"} a#Z#0_0_2_3 == let#0_0_2_11#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_0_2_2, 
                              g#0, 
                              a#Z#0_0_2_3)): DatatypeType
                           == #State.M.State(_mcc#28#0_0_2_0))
                        {
                            assume $Is(_mcc#28#0_0_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc h1#Z#0_0_2_2;
                            assume {:id "id307"} let#0_0_2_12#0#0 == _mcc#28#0_0_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_2_12#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id308"} h1#Z#0_0_2_2 == let#0_0_2_12#0#0;
                            assume {:id "id309"} lambdaResult#0_0_2_2
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  h1#Z#0_0_2_2, 
                                  $Box(newState#Z#0_0_2_3))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_2_2, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_2_12#s#0: int, $l#0_0_2_12#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_2_12#heap#0)
                 ==> (forall $l#0_0_2_13#s#0: int, $l#0_0_2_13#heap#0: Heap :: 
                    $IsGoodHeap($l#0_0_2_13#heap#0)
                       ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_2_13#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_2_13#s#0))): DatatypeType)
                         && 
                        _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_2_13#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_2_13#s#0))): DatatypeType)
                         && (var a#0_0_2_12 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $l#0_0_2_13#heap#0, 
                                  h#0_0, 
                                  $Box($l#0_0_2_13#s#0))): DatatypeType); 
                          State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_0_2_13#heap#0, 
                                f#0, 
                                a#0_0_2_12)): DatatypeType)))
                   && _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                        $l#0_0_2_12#heap#0, 
                        Lit(AtLayer((lambda $l#0_0_2_14#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_2_14#heap#0: Heap, $l#0_0_2_14#s#0: Box :: 
                                  $Box((var newState#0_0_2_13 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_2_14#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_2_14#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_2_13 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_2_14#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_2_14#s#0): int))): DatatypeType); 
                                        (var g2#0_0_2_10 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_2_14#heap#0, 
                                                  f#0, 
                                                  a#0_0_2_13)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_2_14#heap#0, 
                                              g2#0_0_2_10, 
                                              $Box(newState#0_0_2_13))): DatatypeType))))), 
                                (lambda $l#0_0_2_14#heap#0: Heap, $l#0_0_2_14#s#0: Box :: 
                                  $IsBox($l#0_0_2_14#s#0, TInt)), 
                                (lambda $l#0_0_2_14#heap#0: Heap, $l#0_0_2_14#s#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_2_14#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box($l#0_0_2_12#s#0))): DatatypeType)
                   && 
                  (forall $l#0_0_2_15#s#0: int, $l#0_0_2_15#heap#0: Heap :: 
                    $IsGoodHeap($l#0_0_2_15#heap#0)
                       ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_2_15#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_2_15#s#0))): DatatypeType)
                         && 
                        _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_2_15#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_2_15#s#0))): DatatypeType)
                         && (var a#0_0_2_14 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $l#0_0_2_15#heap#0, 
                                  h#0_0, 
                                  $Box($l#0_0_2_15#s#0))): DatatypeType); 
                          State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_0_2_15#heap#0, 
                                f#0, 
                                a#0_0_2_14)): DatatypeType)))
                   && _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                        $l#0_0_2_12#heap#0, 
                        Lit(AtLayer((lambda $l#0_0_2_16#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_2_16#heap#0: Heap, $l#0_0_2_16#s#0: Box :: 
                                  $Box((var newState#0_0_2_15 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_2_16#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_2_16#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_2_15 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_2_16#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_2_16#s#0): int))): DatatypeType); 
                                        (var g2#0_0_2_12 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_2_16#heap#0, 
                                                  f#0, 
                                                  a#0_0_2_15)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_2_16#heap#0, 
                                              g2#0_0_2_12, 
                                              $Box(newState#0_0_2_15))): DatatypeType))))), 
                                (lambda $l#0_0_2_16#heap#0: Heap, $l#0_0_2_16#s#0: Box :: 
                                  $IsBox($l#0_0_2_16#s#0, TInt)), 
                                (lambda $l#0_0_2_16#heap#0: Heap, $l#0_0_2_16#s#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_2_16#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box($l#0_0_2_12#s#0))): DatatypeType)
                   && (var a#0_0_2_16 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_2_12#heap#0, 
                            Lit(AtLayer((lambda $l#0_0_2_17#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_2_17#heap#0: Heap, $l#0_0_2_17#s#0: Box :: 
                                      $Box((var newState#0_0_2_16 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                    $l#0_0_2_17#heap#0, 
                                                    h#0_0, 
                                                    $Box($Unbox($l#0_0_2_17#s#0): int))): DatatypeType)): int; 
                                          (var a#0_0_2_17 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                    $l#0_0_2_17#heap#0, 
                                                    h#0_0, 
                                                    $Box($Unbox($l#0_0_2_17#s#0): int))): DatatypeType); 
                                            (var g2#0_0_2_13 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                      Tclass.State.M(State._default.Associativity$B), 
                                                      $l#0_0_2_17#heap#0, 
                                                      f#0, 
                                                      a#0_0_2_17)): DatatypeType); 
                                              $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                  $l#0_0_2_17#heap#0, 
                                                  g2#0_0_2_13, 
                                                  $Box(newState#0_0_2_16))): DatatypeType))))), 
                                    (lambda $l#0_0_2_17#heap#0: Heap, $l#0_0_2_17#s#0: Box :: 
                                      $IsBox($l#0_0_2_17#s#0, TInt)), 
                                    (lambda $l#0_0_2_17#heap#0: Heap, $l#0_0_2_17#s#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_2_17#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            $Box($l#0_0_2_12#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                          Tclass.State.M(State._default.Associativity$C), 
                          $l#0_0_2_12#heap#0, 
                          g#0, 
                          a#0_0_2_16)): DatatypeType)));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            assert {:id "id310"} {:subsumption 0} State.M#Equal((var h1#0_0_2_8 := Lit(State.M.runState(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_2_24#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_2_24#heap#0: Heap, $l#0_0_2_24#s#0: Box :: 
                                    $Box((var newState#0_0_2_24 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_2_24#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_2_24#s#0): int))): DatatypeType)): int; 
                                        (var a#0_0_2_24 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_2_24#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_2_24#s#0): int))): DatatypeType); 
                                          (var g2#0_0_2_18 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                    Tclass.State.M(State._default.Associativity$B), 
                                                    $l#0_0_2_24#heap#0, 
                                                    f#0, 
                                                    a#0_0_2_24)): DatatypeType); 
                                            $Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                $l#0_0_2_24#heap#0, 
                                                g2#0_0_2_18, 
                                                $Box(newState#0_0_2_24))): DatatypeType))))), 
                                  (lambda $l#0_0_2_24#heap#0: Heap, $l#0_0_2_24#s#0: Box :: 
                                    $IsBox($l#0_0_2_24#s#0, TInt)), 
                                  (lambda $l#0_0_2_24#heap#0: Heap, $l#0_0_2_24#s#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_2_24#o#0: ref :: false))))), 
                              $LS($LZ))))))); 
                Lit(#State.M.State(Lit(AtLayer((lambda $l#0_0_2_25#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_2_25#heap#0: Heap, $l#0_0_2_25#s#0: Box :: 
                              $Box((var newState#0_0_2_25 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_0_2_25#heap#0, 
                                            h1#0_0_2_8, 
                                            $Box($Unbox($l#0_0_2_25#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_2_25 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_0_2_25#heap#0, 
                                            h1#0_0_2_8, 
                                            $Box($Unbox($l#0_0_2_25#s#0): int))): DatatypeType); 
                                    (var h1#0_0_2_9 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $l#0_0_2_25#heap#0, 
                                              g#0, 
                                              a#0_0_2_25)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                          $l#0_0_2_25#heap#0, 
                                          h1#0_0_2_9, 
                                          $Box(newState#0_0_2_25))): DatatypeType))))), 
                            (lambda $l#0_0_2_25#heap#0: Heap, $l#0_0_2_25#s#0: Box :: 
                              $IsBox($l#0_0_2_25#s#0, TInt)), 
                            (lambda $l#0_0_2_25#heap#0: Heap, $l#0_0_2_25#s#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_2_25#o#0: ref :: false))))), 
                        $LS($LZ)))))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_0_2_26#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_2_26#heap#0: Heap, $l#0_0_2_26#s#0: Box :: 
                          $Box((var newState#0_0_2_27 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_0_2_26#heap#0, 
                                        Lit(AtLayer((lambda $l#0_0_2_27#ly#0: LayerType :: 
                                              Handle1((lambda $l#0_0_2_27#heap#0: Heap, $l#0_0_2_27#s#0: Box :: 
                                                  $Box((var newState#0_0_2_26 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                                $l#0_0_2_27#heap#0, 
                                                                h#0_0, 
                                                                $Box($Unbox($l#0_0_2_27#s#0): int))): DatatypeType)): int; 
                                                      (var a#0_0_2_26 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                                $l#0_0_2_27#heap#0, 
                                                                h#0_0, 
                                                                $Box($Unbox($l#0_0_2_27#s#0): int))): DatatypeType); 
                                                        (var g2#0_0_2_19 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                                  Tclass.State.M(State._default.Associativity$B), 
                                                                  $l#0_0_2_27#heap#0, 
                                                                  f#0, 
                                                                  a#0_0_2_26)): DatatypeType); 
                                                          $Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                              $l#0_0_2_27#heap#0, 
                                                              g2#0_0_2_19, 
                                                              $Box(newState#0_0_2_26))): DatatypeType))))), 
                                                (lambda $l#0_0_2_27#heap#0: Heap, $l#0_0_2_27#s#0: Box :: 
                                                  $IsBox($l#0_0_2_27#s#0, TInt)), 
                                                (lambda $l#0_0_2_27#heap#0: Heap, $l#0_0_2_27#s#0: Box :: 
                                                  SetRef_to_SetBox((lambda $l#0_0_2_27#o#0: ref :: false))))), 
                                            $l#0_0_2_26#ly#0)), 
                                        $Box($Unbox($l#0_0_2_26#s#0): int))): DatatypeType)): int; 
                              (var a#0_0_2_28 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_0_2_26#heap#0, 
                                        Lit(AtLayer((lambda $l#0_0_2_28#ly#0: LayerType :: 
                                              Handle1((lambda $l#0_0_2_28#heap#0: Heap, $l#0_0_2_28#s#0: Box :: 
                                                  $Box((var newState#0_0_2_28 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                                $l#0_0_2_28#heap#0, 
                                                                h#0_0, 
                                                                $Box($Unbox($l#0_0_2_28#s#0): int))): DatatypeType)): int; 
                                                      (var a#0_0_2_27 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                                $l#0_0_2_28#heap#0, 
                                                                h#0_0, 
                                                                $Box($Unbox($l#0_0_2_28#s#0): int))): DatatypeType); 
                                                        (var g2#0_0_2_20 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                                  Tclass.State.M(State._default.Associativity$B), 
                                                                  $l#0_0_2_28#heap#0, 
                                                                  f#0, 
                                                                  a#0_0_2_27)): DatatypeType); 
                                                          $Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                              $l#0_0_2_28#heap#0, 
                                                              g2#0_0_2_20, 
                                                              $Box(newState#0_0_2_28))): DatatypeType))))), 
                                                (lambda $l#0_0_2_28#heap#0: Heap, $l#0_0_2_28#s#0: Box :: 
                                                  $IsBox($l#0_0_2_28#s#0, TInt)), 
                                                (lambda $l#0_0_2_28#heap#0: Heap, $l#0_0_2_28#s#0: Box :: 
                                                  SetRef_to_SetBox((lambda $l#0_0_2_28#o#0: ref :: false))))), 
                                            $l#0_0_2_26#ly#0)), 
                                        $Box($Unbox($l#0_0_2_26#s#0): int))): DatatypeType); 
                                (var h1#0_0_2_10 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_0_2_26#heap#0, 
                                          g#0, 
                                          a#0_0_2_28)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_0_2_26#heap#0, 
                                      h1#0_0_2_10, 
                                      $Box(newState#0_0_2_27))): DatatypeType))))), 
                        (lambda $l#0_0_2_26#heap#0: Heap, $l#0_0_2_26#s#0: Box :: 
                          $IsBox($l#0_0_2_26#s#0, TInt)), 
                        (lambda $l#0_0_2_26#heap#0: Heap, $l#0_0_2_26#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_2_26#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_1_0;
                assume $IsGoodHeap($lambdaHeap#0_0_1_0);
                assume $Heap == $lambdaHeap#0_0_1_0 || $HeapSucc($Heap, $lambdaHeap#0_0_1_0);
                havoc s#0_0_1_0;
                if (true)
                {
                    $_Frame#l0_0_1_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_1_0, $o, alloc)): bool ==> false);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_0_1_1;
                        assume $IsGoodHeap($lambdaHeap#0_0_1_1);
                        assume $lambdaHeap#0_0_1_0 == $lambdaHeap#0_0_1_1
                           || $HeapSucc($lambdaHeap#0_0_1_0, $lambdaHeap#0_0_1_1);
                        havoc s#0_0_1_1;
                        if (true)
                        {
                            $_Frame#l0_0_1_1 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_0_1_1, $o, alloc)): bool ==> false);
                            if ($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_1_1, 
                                  h#0_0, 
                                  $Box(s#0_0_1_1))): DatatypeType
                               == #_System._tuple#2._#Make2(_mcc#31#0_0_1_0, $Box(_mcc#32#0_0_1_0)))
                            {
                                assume $IsBox(_mcc#31#0_0_1_0, State._default.Associativity$A);
                                havoc newState#Z#0_0_1_0;
                                assume {:id "id224"} let#0_0_1_0#0#0 == _mcc#32#0_0_1_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_0_1_0#0#0, TInt);
                                assume {:id "id225"} newState#Z#0_0_1_0 == let#0_0_1_0#0#0;
                                havoc a#Z#0_0_1_0;
                                assume {:id "id226"} let#0_0_1_1#0#0 == _mcc#31#0_0_1_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $IsBox(let#0_0_1_1#0#0, State._default.Associativity$A);
                                assume {:id "id227"} a#Z#0_0_1_0 == let#0_0_1_1#0#0;
                                if ($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $lambdaHeap#0_0_1_1, 
                                      f#0, 
                                      a#Z#0_0_1_0)): DatatypeType
                                   == #State.M.State(_mcc#33#0_0_1_0))
                                {
                                    assume $Is(_mcc#33#0_0_1_0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                                    havoc g2#Z#0_0_1_0;
                                    assume {:id "id228"} let#0_0_1_2#0#0 == _mcc#33#0_0_1_0;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#0_0_1_2#0#0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                                    assume {:id "id229"} g2#Z#0_0_1_0 == let#0_0_1_2#0#0;
                                    assume {:id "id230"} lambdaResult#0_0_1_1
                                       == $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_0_1_0, 
                                          g2#Z#0_0_1_0, 
                                          $Box(newState#Z#0_0_1_0))): DatatypeType;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(lambdaResult#0_0_1_1, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt));
                                }
                                else
                                {
                                    assume false;
                                }
                            }
                            else
                            {
                                assume false;
                            }
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                          $lambdaHeap#0_0_1_0, 
                          Lit(AtLayer((lambda $l#0_0_1_1#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_1_1#heap#0: Heap, $l#0_0_1_1#s#0: Box :: 
                                    $Box((var newState#0_0_1_1 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_1_1#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_1_1#s#0): int))): DatatypeType)): int; 
                                        (var a#0_0_1_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_1_1#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_1_1#s#0): int))): DatatypeType); 
                                          (var g2#0_0_1_1 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                    Tclass.State.M(State._default.Associativity$B), 
                                                    $l#0_0_1_1#heap#0, 
                                                    f#0, 
                                                    a#0_0_1_1)): DatatypeType); 
                                            $Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                $l#0_0_1_1#heap#0, 
                                                g2#0_0_1_1, 
                                                $Box(newState#0_0_1_1))): DatatypeType))))), 
                                  (lambda $l#0_0_1_1#heap#0: Heap, $l#0_0_1_1#s#0: Box :: 
                                    $IsBox($l#0_0_1_1#s#0, TInt)), 
                                  (lambda $l#0_0_1_1#heap#0: Heap, $l#0_0_1_1#s#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_1_1#o#0: ref :: false))))), 
                              $LS($LZ))), 
                          $Box(s#0_0_1_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#29#0_0_1_0, $Box(_mcc#30#0_0_1_0)))
                    {
                        assume $IsBox(_mcc#29#0_0_1_0, State._default.Associativity$B);
                        havoc newState#Z#0_0_1_1;
                        assume {:id "id231"} let#0_0_1_3#0#0 == _mcc#30#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_1_3#0#0, TInt);
                        assume {:id "id232"} newState#Z#0_0_1_1 == let#0_0_1_3#0#0;
                        havoc a#Z#0_0_1_1;
                        assume {:id "id233"} let#0_0_1_4#0#0 == _mcc#29#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_1_4#0#0, State._default.Associativity$B);
                        assume {:id "id234"} a#Z#0_0_1_1 == let#0_0_1_4#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_0_1_0, 
                              g#0, 
                              a#Z#0_0_1_1)): DatatypeType
                           == #State.M.State(_mcc#34#0_0_1_0))
                        {
                            assume $Is(_mcc#34#0_0_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc h1#Z#0_0_1_0;
                            assume {:id "id235"} let#0_0_1_5#0#0 == _mcc#34#0_0_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_1_5#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id236"} h1#Z#0_0_1_0 == let#0_0_1_5#0#0;
                            assume {:id "id237"} lambdaResult#0_0_1_0
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  h1#Z#0_0_1_0, 
                                  $Box(newState#Z#0_0_1_1))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_1_0, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_1_5#s#0: int, $l#0_0_1_5#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_1_5#heap#0)
                 ==> (forall $l#0_0_1_6#s#0: int, $l#0_0_1_6#heap#0: Heap :: 
                    $IsGoodHeap($l#0_0_1_6#heap#0)
                       ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_1_6#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_1_6#s#0))): DatatypeType)
                         && 
                        _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_1_6#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_1_6#s#0))): DatatypeType)
                         && (var a#0_0_1_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $l#0_0_1_6#heap#0, 
                                  h#0_0, 
                                  $Box($l#0_0_1_6#s#0))): DatatypeType); 
                          State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_0_1_6#heap#0, 
                                f#0, 
                                a#0_0_1_5)): DatatypeType)))
                   && _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                        $l#0_0_1_5#heap#0, 
                        Lit(AtLayer((lambda $l#0_0_1_7#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_1_7#heap#0: Heap, $l#0_0_1_7#s#0: Box :: 
                                  $Box((var newState#0_0_1_6 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_7#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_7#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_1_6 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_7#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_7#s#0): int))): DatatypeType); 
                                        (var g2#0_0_1_5 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_1_7#heap#0, 
                                                  f#0, 
                                                  a#0_0_1_6)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_1_7#heap#0, 
                                              g2#0_0_1_5, 
                                              $Box(newState#0_0_1_6))): DatatypeType))))), 
                                (lambda $l#0_0_1_7#heap#0: Heap, $l#0_0_1_7#s#0: Box :: 
                                  $IsBox($l#0_0_1_7#s#0, TInt)), 
                                (lambda $l#0_0_1_7#heap#0: Heap, $l#0_0_1_7#s#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_1_7#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box($l#0_0_1_5#s#0))): DatatypeType)
                   && 
                  (forall $l#0_0_1_8#s#0: int, $l#0_0_1_8#heap#0: Heap :: 
                    $IsGoodHeap($l#0_0_1_8#heap#0)
                       ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_1_8#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_1_8#s#0))): DatatypeType)
                         && 
                        _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_1_8#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_1_8#s#0))): DatatypeType)
                         && (var a#0_0_1_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $l#0_0_1_8#heap#0, 
                                  h#0_0, 
                                  $Box($l#0_0_1_8#s#0))): DatatypeType); 
                          State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_0_1_8#heap#0, 
                                f#0, 
                                a#0_0_1_7)): DatatypeType)))
                   && _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                        $l#0_0_1_5#heap#0, 
                        Lit(AtLayer((lambda $l#0_0_1_9#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_1_9#heap#0: Heap, $l#0_0_1_9#s#0: Box :: 
                                  $Box((var newState#0_0_1_8 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_9#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_9#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_1_8 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_9#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_9#s#0): int))): DatatypeType); 
                                        (var g2#0_0_1_7 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_1_9#heap#0, 
                                                  f#0, 
                                                  a#0_0_1_8)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_1_9#heap#0, 
                                              g2#0_0_1_7, 
                                              $Box(newState#0_0_1_8))): DatatypeType))))), 
                                (lambda $l#0_0_1_9#heap#0: Heap, $l#0_0_1_9#s#0: Box :: 
                                  $IsBox($l#0_0_1_9#s#0, TInt)), 
                                (lambda $l#0_0_1_9#heap#0: Heap, $l#0_0_1_9#s#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_1_9#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box($l#0_0_1_5#s#0))): DatatypeType)
                   && (var a#0_0_1_9 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_1_5#heap#0, 
                            Lit(AtLayer((lambda $l#0_0_1_10#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_1_10#heap#0: Heap, $l#0_0_1_10#s#0: Box :: 
                                      $Box((var newState#0_0_1_9 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                    $l#0_0_1_10#heap#0, 
                                                    h#0_0, 
                                                    $Box($Unbox($l#0_0_1_10#s#0): int))): DatatypeType)): int; 
                                          (var a#0_0_1_10 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                    $l#0_0_1_10#heap#0, 
                                                    h#0_0, 
                                                    $Box($Unbox($l#0_0_1_10#s#0): int))): DatatypeType); 
                                            (var g2#0_0_1_8 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                      Tclass.State.M(State._default.Associativity$B), 
                                                      $l#0_0_1_10#heap#0, 
                                                      f#0, 
                                                      a#0_0_1_10)): DatatypeType); 
                                              $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                  $l#0_0_1_10#heap#0, 
                                                  g2#0_0_1_8, 
                                                  $Box(newState#0_0_1_9))): DatatypeType))))), 
                                    (lambda $l#0_0_1_10#heap#0: Heap, $l#0_0_1_10#s#0: Box :: 
                                      $IsBox($l#0_0_1_10#s#0, TInt)), 
                                    (lambda $l#0_0_1_10#heap#0: Heap, $l#0_0_1_10#s#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_1_10#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            $Box($l#0_0_1_5#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                          Tclass.State.M(State._default.Associativity$C), 
                          $l#0_0_1_5#heap#0, 
                          g#0, 
                          a#0_0_1_9)): DatatypeType)));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            push;
            push;
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(140,20)
            // TrCallStmt: Before ProcessCallStmt
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_1_2;
                assume $IsGoodHeap($lambdaHeap#0_0_1_2);
                assume $Heap == $lambdaHeap#0_0_1_2 || $HeapSucc($Heap, $lambdaHeap#0_0_1_2);
                havoc s#0_0_1_2;
                if (true)
                {
                    $_Frame#l0_0_1_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_1_2, $o, alloc)): bool ==> false);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_0_1_3;
                        assume $IsGoodHeap($lambdaHeap#0_0_1_3);
                        assume $lambdaHeap#0_0_1_2 == $lambdaHeap#0_0_1_3
                           || $HeapSucc($lambdaHeap#0_0_1_2, $lambdaHeap#0_0_1_3);
                        havoc s#0_0_1_3;
                        if (true)
                        {
                            $_Frame#l0_0_1_3 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_0_1_3, $o, alloc)): bool ==> false);
                            if ($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_1_3, 
                                  h#0_0, 
                                  $Box(s#0_0_1_3))): DatatypeType
                               == #_System._tuple#2._#Make2(_mcc#73#0_0_1_0, $Box(_mcc#74#0_0_1_0)))
                            {
                                assume $IsBox(_mcc#73#0_0_1_0, State._default.Associativity$A);
                                havoc newState#Z#0_0_1_2;
                                assume {:id "id238"} let#0_0_1_6#0#0 == _mcc#74#0_0_1_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_0_1_6#0#0, TInt);
                                assume {:id "id239"} newState#Z#0_0_1_2 == let#0_0_1_6#0#0;
                                havoc a#Z#0_0_1_2;
                                assume {:id "id240"} let#0_0_1_7#0#0 == _mcc#73#0_0_1_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $IsBox(let#0_0_1_7#0#0, State._default.Associativity$A);
                                assume {:id "id241"} a#Z#0_0_1_2 == let#0_0_1_7#0#0;
                                if ($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $lambdaHeap#0_0_1_3, 
                                      f#0, 
                                      a#Z#0_0_1_2)): DatatypeType
                                   == #State.M.State(_mcc#75#0_0_1_0))
                                {
                                    assume $Is(_mcc#75#0_0_1_0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                                    havoc g2#Z#0_0_1_1;
                                    assume {:id "id242"} let#0_0_1_8#0#0 == _mcc#75#0_0_1_0;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#0_0_1_8#0#0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                                    assume {:id "id243"} g2#Z#0_0_1_1 == let#0_0_1_8#0#0;
                                    assume {:id "id244"} lambdaResult#0_0_1_3
                                       == $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_0_1_2, 
                                          g2#Z#0_0_1_1, 
                                          $Box(newState#Z#0_0_1_2))): DatatypeType;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(lambdaResult#0_0_1_3, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt));
                                }
                                else
                                {
                                    assume false;
                                }
                            }
                            else
                            {
                                assume false;
                            }
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                          $lambdaHeap#0_0_1_2, 
                          Lit(AtLayer((lambda $l#0_0_1_13#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_1_13#heap#0: Heap, $l#0_0_1_13#s#0: Box :: 
                                    $Box((var newState#0_0_1_13 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_1_13#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_1_13#s#0): int))): DatatypeType)): int; 
                                        (var a#0_0_1_13 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                  $l#0_0_1_13#heap#0, 
                                                  h#0_0, 
                                                  $Box($Unbox($l#0_0_1_13#s#0): int))): DatatypeType); 
                                          (var g2#0_0_1_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                    Tclass.State.M(State._default.Associativity$B), 
                                                    $l#0_0_1_13#heap#0, 
                                                    f#0, 
                                                    a#0_0_1_13)): DatatypeType); 
                                            $Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                $l#0_0_1_13#heap#0, 
                                                g2#0_0_1_11, 
                                                $Box(newState#0_0_1_13))): DatatypeType))))), 
                                  (lambda $l#0_0_1_13#heap#0: Heap, $l#0_0_1_13#s#0: Box :: 
                                    $IsBox($l#0_0_1_13#s#0, TInt)), 
                                  (lambda $l#0_0_1_13#heap#0: Heap, $l#0_0_1_13#s#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_1_13#o#0: ref :: false))))), 
                              $LS($LZ))), 
                          $Box(s#0_0_1_2))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#71#0_0_1_0, $Box(_mcc#72#0_0_1_0)))
                    {
                        assume $IsBox(_mcc#71#0_0_1_0, State._default.Associativity$B);
                        havoc newState#Z#0_0_1_3;
                        assume {:id "id245"} let#0_0_1_9#0#0 == _mcc#72#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_1_9#0#0, TInt);
                        assume {:id "id246"} newState#Z#0_0_1_3 == let#0_0_1_9#0#0;
                        havoc a#Z#0_0_1_3;
                        assume {:id "id247"} let#0_0_1_10#0#0 == _mcc#71#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_1_10#0#0, State._default.Associativity$B);
                        assume {:id "id248"} a#Z#0_0_1_3 == let#0_0_1_10#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_0_1_2, 
                              g#0, 
                              a#Z#0_0_1_3)): DatatypeType
                           == #State.M.State(_mcc#76#0_0_1_0))
                        {
                            assume $Is(_mcc#76#0_0_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc h1#Z#0_0_1_1;
                            assume {:id "id249"} let#0_0_1_11#0#0 == _mcc#76#0_0_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_1_11#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id250"} h1#Z#0_0_1_1 == let#0_0_1_11#0#0;
                            assume {:id "id251"} lambdaResult#0_0_1_2
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  h1#Z#0_0_1_1, 
                                  $Box(newState#Z#0_0_1_3))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_1_2, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_1_14#s#0: int, $l#0_0_1_14#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_1_14#heap#0)
                 ==> (forall $l#0_0_1_15#s#0: int, $l#0_0_1_15#heap#0: Heap :: 
                    $IsGoodHeap($l#0_0_1_15#heap#0)
                       ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_1_15#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_1_15#s#0))): DatatypeType)
                         && 
                        _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_1_15#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_1_15#s#0))): DatatypeType)
                         && (var a#0_0_1_14 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $l#0_0_1_15#heap#0, 
                                  h#0_0, 
                                  $Box($l#0_0_1_15#s#0))): DatatypeType); 
                          State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_0_1_15#heap#0, 
                                f#0, 
                                a#0_0_1_14)): DatatypeType)))
                   && _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                        $l#0_0_1_14#heap#0, 
                        Lit(AtLayer((lambda $l#0_0_1_16#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_1_16#heap#0: Heap, $l#0_0_1_16#s#0: Box :: 
                                  $Box((var newState#0_0_1_15 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_16#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_16#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_1_15 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_16#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_16#s#0): int))): DatatypeType); 
                                        (var g2#0_0_1_13 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_1_16#heap#0, 
                                                  f#0, 
                                                  a#0_0_1_15)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_1_16#heap#0, 
                                              g2#0_0_1_13, 
                                              $Box(newState#0_0_1_15))): DatatypeType))))), 
                                (lambda $l#0_0_1_16#heap#0: Heap, $l#0_0_1_16#s#0: Box :: 
                                  $IsBox($l#0_0_1_16#s#0, TInt)), 
                                (lambda $l#0_0_1_16#heap#0: Heap, $l#0_0_1_16#s#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_1_16#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box($l#0_0_1_14#s#0))): DatatypeType)
                   && 
                  (forall $l#0_0_1_17#s#0: int, $l#0_0_1_17#heap#0: Heap :: 
                    $IsGoodHeap($l#0_0_1_17#heap#0)
                       ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_1_17#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_1_17#s#0))): DatatypeType)
                         && 
                        _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_1_17#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_1_17#s#0))): DatatypeType)
                         && (var a#0_0_1_16 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $l#0_0_1_17#heap#0, 
                                  h#0_0, 
                                  $Box($l#0_0_1_17#s#0))): DatatypeType); 
                          State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_0_1_17#heap#0, 
                                f#0, 
                                a#0_0_1_16)): DatatypeType)))
                   && _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                        $l#0_0_1_14#heap#0, 
                        Lit(AtLayer((lambda $l#0_0_1_18#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_1_18#heap#0: Heap, $l#0_0_1_18#s#0: Box :: 
                                  $Box((var newState#0_0_1_17 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_18#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_18#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_1_17 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_18#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_18#s#0): int))): DatatypeType); 
                                        (var g2#0_0_1_15 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_1_18#heap#0, 
                                                  f#0, 
                                                  a#0_0_1_17)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_1_18#heap#0, 
                                              g2#0_0_1_15, 
                                              $Box(newState#0_0_1_17))): DatatypeType))))), 
                                (lambda $l#0_0_1_18#heap#0: Heap, $l#0_0_1_18#s#0: Box :: 
                                  $IsBox($l#0_0_1_18#s#0, TInt)), 
                                (lambda $l#0_0_1_18#heap#0: Heap, $l#0_0_1_18#s#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_1_18#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box($l#0_0_1_14#s#0))): DatatypeType)
                   && (var a#0_0_1_18 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                            $l#0_0_1_14#heap#0, 
                            Lit(AtLayer((lambda $l#0_0_1_19#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_1_19#heap#0: Heap, $l#0_0_1_19#s#0: Box :: 
                                      $Box((var newState#0_0_1_18 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                    $l#0_0_1_19#heap#0, 
                                                    h#0_0, 
                                                    $Box($Unbox($l#0_0_1_19#s#0): int))): DatatypeType)): int; 
                                          (var a#0_0_1_19 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                    $l#0_0_1_19#heap#0, 
                                                    h#0_0, 
                                                    $Box($Unbox($l#0_0_1_19#s#0): int))): DatatypeType); 
                                            (var g2#0_0_1_16 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                      Tclass.State.M(State._default.Associativity$B), 
                                                      $l#0_0_1_19#heap#0, 
                                                      f#0, 
                                                      a#0_0_1_19)): DatatypeType); 
                                              $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                  $l#0_0_1_19#heap#0, 
                                                  g2#0_0_1_16, 
                                                  $Box(newState#0_0_1_18))): DatatypeType))))), 
                                    (lambda $l#0_0_1_19#heap#0: Heap, $l#0_0_1_19#s#0: Box :: 
                                      $IsBox($l#0_0_1_19#s#0, TInt)), 
                                    (lambda $l#0_0_1_19#heap#0: Heap, $l#0_0_1_19#s#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_1_19#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            $Box($l#0_0_1_14#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                          Tclass.State.M(State._default.Associativity$C), 
                          $l#0_0_1_14#heap#0, 
                          g#0, 
                          a#0_0_1_18)): DatatypeType)));
            // ProcessCallStmt: CheckSubrange
            f##0_0_1_0 := Lit(AtLayer((lambda $l#0_0_1_21#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_1_21#heap#0: Heap, $l#0_0_1_21#s#0: Box :: 
                      $Box((var newState#0_0_1_22 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_0_1_21#heap#0, 
                                    Lit(AtLayer((lambda $l#0_0_1_22#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_0_1_22#heap#0: Heap, $l#0_0_1_22#s#0: Box :: 
                                              $Box((var newState#0_0_1_21 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                            $l#0_0_1_22#heap#0, 
                                                            h#0_0, 
                                                            $Box($Unbox($l#0_0_1_22#s#0): int))): DatatypeType)): int; 
                                                  (var a#0_0_1_21 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                            $l#0_0_1_22#heap#0, 
                                                            h#0_0, 
                                                            $Box($Unbox($l#0_0_1_22#s#0): int))): DatatypeType); 
                                                    (var g2#0_0_1_18 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                              Tclass.State.M(State._default.Associativity$B), 
                                                              $l#0_0_1_22#heap#0, 
                                                              f#0, 
                                                              a#0_0_1_21)): DatatypeType); 
                                                      $Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_0_1_22#heap#0, 
                                                          g2#0_0_1_18, 
                                                          $Box(newState#0_0_1_21))): DatatypeType))))), 
                                            (lambda $l#0_0_1_22#heap#0: Heap, $l#0_0_1_22#s#0: Box :: 
                                              $IsBox($l#0_0_1_22#s#0, TInt)), 
                                            (lambda $l#0_0_1_22#heap#0: Heap, $l#0_0_1_22#s#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_0_1_22#o#0: ref :: false))))), 
                                        $l#0_0_1_21#ly#0)), 
                                    $Box($Unbox($l#0_0_1_21#s#0): int))): DatatypeType)): int; 
                          (var a#0_0_1_23 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_0_1_21#heap#0, 
                                    Lit(AtLayer((lambda $l#0_0_1_23#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_0_1_23#heap#0: Heap, $l#0_0_1_23#s#0: Box :: 
                                              $Box((var newState#0_0_1_23 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                            $l#0_0_1_23#heap#0, 
                                                            h#0_0, 
                                                            $Box($Unbox($l#0_0_1_23#s#0): int))): DatatypeType)): int; 
                                                  (var a#0_0_1_22 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                            $l#0_0_1_23#heap#0, 
                                                            h#0_0, 
                                                            $Box($Unbox($l#0_0_1_23#s#0): int))): DatatypeType); 
                                                    (var g2#0_0_1_19 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                              Tclass.State.M(State._default.Associativity$B), 
                                                              $l#0_0_1_23#heap#0, 
                                                              f#0, 
                                                              a#0_0_1_22)): DatatypeType); 
                                                      $Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_0_1_23#heap#0, 
                                                          g2#0_0_1_19, 
                                                          $Box(newState#0_0_1_23))): DatatypeType))))), 
                                            (lambda $l#0_0_1_23#heap#0: Heap, $l#0_0_1_23#s#0: Box :: 
                                              $IsBox($l#0_0_1_23#s#0, TInt)), 
                                            (lambda $l#0_0_1_23#heap#0: Heap, $l#0_0_1_23#s#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_0_1_23#o#0: ref :: false))))), 
                                        $l#0_0_1_21#ly#0)), 
                                    $Box($Unbox($l#0_0_1_21#s#0): int))): DatatypeType); 
                            (var h1#0_0_1_3 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_0_1_21#heap#0, 
                                      g#0, 
                                      a#0_0_1_23)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_0_1_21#heap#0, 
                                  h1#0_0_1_3, 
                                  $Box(newState#0_0_1_22))): DatatypeType))))), 
                    (lambda $l#0_0_1_21#heap#0: Heap, $l#0_0_1_21#s#0: Box :: 
                      $IsBox($l#0_0_1_21#s#0, TInt)), 
                    (lambda $l#0_0_1_21#heap#0: Heap, $l#0_0_1_21#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_1_21#o#0: ref :: false))))), 
                $LS($LZ)));
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_1_4;
                assume $IsGoodHeap($lambdaHeap#0_0_1_4);
                assume $Heap == $lambdaHeap#0_0_1_4 || $HeapSucc($Heap, $lambdaHeap#0_0_1_4);
                havoc s#0_0_1_4;
                if (true)
                {
                    $_Frame#l0_0_1_4 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_1_4, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_0_1_4, 
                          h#0_0, 
                          $Box(s#0_0_1_4))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#79#0_0_1_0, $Box(_mcc#80#0_0_1_0)))
                    {
                        assume $IsBox(_mcc#79#0_0_1_0, State._default.Associativity$A);
                        havoc newState#Z#0_0_1_4;
                        assume {:id "id252"} let#0_0_1_12#0#0 == _mcc#80#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_1_12#0#0, TInt);
                        assume {:id "id253"} newState#Z#0_0_1_4 == let#0_0_1_12#0#0;
                        havoc a#Z#0_0_1_4;
                        assume {:id "id254"} let#0_0_1_13#0#0 == _mcc#79#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_1_13#0#0, State._default.Associativity$A);
                        assume {:id "id255"} a#Z#0_0_1_4 == let#0_0_1_13#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_0_1_4, 
                              f#0, 
                              a#Z#0_0_1_4)): DatatypeType
                           == #State.M.State(_mcc#81#0_0_1_0))
                        {
                            assume $Is(_mcc#81#0_0_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc g2#Z#0_0_1_2;
                            assume {:id "id256"} let#0_0_1_14#0#0 == _mcc#81#0_0_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_1_14#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id257"} g2#Z#0_0_1_2 == let#0_0_1_14#0#0;
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }

                    if ((var newState#0_0_1_24 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_1_4, 
                                  h#0_0, 
                                  $Box(s#0_0_1_4))): DatatypeType)): int; 
                        (var a#0_0_1_24 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_1_4, 
                                  h#0_0, 
                                  $Box(s#0_0_1_4))): DatatypeType); 
                          (var g2#0_0_1_20 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_0_1_4, 
                                    f#0, 
                                    a#0_0_1_24)): DatatypeType); 
                            $Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                $lambdaHeap#0_0_1_4, 
                                g2#0_0_1_20, 
                                $Box(newState#0_0_1_24))): DatatypeType)))
                       == #_System._tuple#2._#Make2(_mcc#77#0_0_1_0, $Box(_mcc#78#0_0_1_0)))
                    {
                        assume $IsBox(_mcc#77#0_0_1_0, State._default.Associativity$B);
                        havoc newState#Z#0_0_1_5;
                        assume {:id "id258"} let#0_0_1_15#0#0 == _mcc#78#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_1_15#0#0, TInt);
                        assume {:id "id259"} newState#Z#0_0_1_5 == let#0_0_1_15#0#0;
                        havoc a#Z#0_0_1_5;
                        assume {:id "id260"} let#0_0_1_16#0#0 == _mcc#77#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_1_16#0#0, State._default.Associativity$B);
                        assume {:id "id261"} a#Z#0_0_1_5 == let#0_0_1_16#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_0_1_4, 
                              g#0, 
                              a#Z#0_0_1_5)): DatatypeType
                           == #State.M.State(_mcc#82#0_0_1_0))
                        {
                            assume $Is(_mcc#82#0_0_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc h1#Z#0_0_1_2;
                            assume {:id "id262"} let#0_0_1_17#0#0 == _mcc#82#0_0_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_1_17#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id263"} h1#Z#0_0_1_2 == let#0_0_1_17#0#0;
                            assume {:id "id264"} lambdaResult#0_0_1_4
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  h1#Z#0_0_1_2, 
                                  $Box(newState#Z#0_0_1_5))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_1_4, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_1_24#s#0: int, $l#0_0_1_24#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_1_24#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_1_24#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_1_24#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_1_24#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_1_24#s#0))): DatatypeType)
                   && (var a#0_0_1_25 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_1_24#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_1_24#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#0_0_1_24#heap#0, 
                          f#0, 
                          a#0_0_1_25)): DatatypeType))
                   && _System.Tuple2.___hMake2_q((var newState#0_0_1_26 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_1_24#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_1_24#s#0))): DatatypeType)): int; 
                      (var a#0_0_1_26 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_1_24#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_1_24#s#0))): DatatypeType); 
                        (var g2#0_0_1_22 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_0_1_24#heap#0, 
                                  f#0, 
                                  a#0_0_1_26)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $l#0_0_1_24#heap#0, 
                              g2#0_0_1_22, 
                              $Box(newState#0_0_1_26))): DatatypeType))))
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_1_24#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_1_24#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_1_24#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_1_24#s#0))): DatatypeType)
                   && (var a#0_0_1_27 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_1_24#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_1_24#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#0_0_1_24#heap#0, 
                          f#0, 
                          a#0_0_1_27)): DatatypeType))
                   && _System.Tuple2.___hMake2_q((var newState#0_0_1_28 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_1_24#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_1_24#s#0))): DatatypeType)): int; 
                      (var a#0_0_1_28 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_1_24#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_1_24#s#0))): DatatypeType); 
                        (var g2#0_0_1_24 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_0_1_24#heap#0, 
                                  f#0, 
                                  a#0_0_1_28)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $l#0_0_1_24#heap#0, 
                              g2#0_0_1_24, 
                              $Box(newState#0_0_1_28))): DatatypeType))))
                   && (var a#0_0_1_29 := _System.Tuple2._0((var newState#0_0_1_29 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_1_24#heap#0, 
                                    h#0_0, 
                                    $Box($l#0_0_1_24#s#0))): DatatypeType)): int; 
                          (var a#0_0_1_30 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_1_24#heap#0, 
                                    h#0_0, 
                                    $Box($l#0_0_1_24#s#0))): DatatypeType); 
                            (var g2#0_0_1_25 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_0_1_24#heap#0, 
                                      f#0, 
                                      a#0_0_1_30)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $l#0_0_1_24#heap#0, 
                                  g2#0_0_1_25, 
                                  $Box(newState#0_0_1_29))): DatatypeType)))); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                          Tclass.State.M(State._default.Associativity$C), 
                          $l#0_0_1_24#heap#0, 
                          g#0, 
                          a#0_0_1_29)): DatatypeType)));
            // ProcessCallStmt: CheckSubrange
            g##0_0_1_0 := Lit(AtLayer((lambda $l#0_0_1_25#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_1_25#heap#0: Heap, $l#0_0_1_25#s#0: Box :: 
                      $Box((var newState#0_0_1_33 := $Unbox(_System.Tuple2._1((var newState#0_0_1_32 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_1_25#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_1_25#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_1_32 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_1_25#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_1_25#s#0): int))): DatatypeType); 
                                    (var g2#0_0_1_27 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                              Tclass.State.M(State._default.Associativity$B), 
                                              $l#0_0_1_25#heap#0, 
                                              f#0, 
                                              a#0_0_1_32)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_1_25#heap#0, 
                                          g2#0_0_1_27, 
                                          $Box(newState#0_0_1_32))): DatatypeType))))): int; 
                          (var a#0_0_1_34 := _System.Tuple2._0((var newState#0_0_1_34 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_1_25#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_1_25#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_1_33 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_1_25#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_1_25#s#0): int))): DatatypeType); 
                                    (var g2#0_0_1_28 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                              Tclass.State.M(State._default.Associativity$B), 
                                              $l#0_0_1_25#heap#0, 
                                              f#0, 
                                              a#0_0_1_33)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_1_25#heap#0, 
                                          g2#0_0_1_28, 
                                          $Box(newState#0_0_1_34))): DatatypeType)))); 
                            (var h1#0_0_1_5 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_0_1_25#heap#0, 
                                      g#0, 
                                      a#0_0_1_34)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_0_1_25#heap#0, 
                                  h1#0_0_1_5, 
                                  $Box(newState#0_0_1_33))): DatatypeType))))), 
                    (lambda $l#0_0_1_25#heap#0: Heap, $l#0_0_1_25#s#0: Box :: 
                      $IsBox($l#0_0_1_25#s#0, TInt)), 
                    (lambda $l#0_0_1_25#heap#0: Heap, $l#0_0_1_25#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_1_25#o#0: ref :: false))))), 
                $LS($LZ)));
            call {:id "id265"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt), f##0_0_1_0, g##0_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            pop;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_1_5;
                assume $IsGoodHeap($lambdaHeap#0_0_1_5);
                assume $Heap == $lambdaHeap#0_0_1_5 || $HeapSucc($Heap, $lambdaHeap#0_0_1_5);
                havoc s#0_0_1_5;
                if (true)
                {
                    $_Frame#l0_0_1_5 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_1_5, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_0_1_5, 
                          h#0_0, 
                          $Box(s#0_0_1_5))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#37#0_0_1_0, $Box(_mcc#38#0_0_1_0)))
                    {
                        assume $IsBox(_mcc#37#0_0_1_0, State._default.Associativity$A);
                        havoc newState#Z#0_0_1_6;
                        assume {:id "id266"} let#0_0_1_18#0#0 == _mcc#38#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_1_18#0#0, TInt);
                        assume {:id "id267"} newState#Z#0_0_1_6 == let#0_0_1_18#0#0;
                        havoc a#Z#0_0_1_6;
                        assume {:id "id268"} let#0_0_1_19#0#0 == _mcc#37#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_1_19#0#0, State._default.Associativity$A);
                        assume {:id "id269"} a#Z#0_0_1_6 == let#0_0_1_19#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_0_1_5, 
                              f#0, 
                              a#Z#0_0_1_6)): DatatypeType
                           == #State.M.State(_mcc#39#0_0_1_0))
                        {
                            assume $Is(_mcc#39#0_0_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc g2#Z#0_0_1_3;
                            assume {:id "id270"} let#0_0_1_20#0#0 == _mcc#39#0_0_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_1_20#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id271"} g2#Z#0_0_1_3 == let#0_0_1_20#0#0;
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }

                    if ((var newState#0_0_1_35 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_1_5, 
                                  h#0_0, 
                                  $Box(s#0_0_1_5))): DatatypeType)): int; 
                        (var a#0_0_1_35 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_1_5, 
                                  h#0_0, 
                                  $Box(s#0_0_1_5))): DatatypeType); 
                          (var g2#0_0_1_29 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_0_1_5, 
                                    f#0, 
                                    a#0_0_1_35)): DatatypeType); 
                            $Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                $lambdaHeap#0_0_1_5, 
                                g2#0_0_1_29, 
                                $Box(newState#0_0_1_35))): DatatypeType)))
                       == #_System._tuple#2._#Make2(_mcc#35#0_0_1_0, $Box(_mcc#36#0_0_1_0)))
                    {
                        assume $IsBox(_mcc#35#0_0_1_0, State._default.Associativity$B);
                        havoc newState#Z#0_0_1_7;
                        assume {:id "id272"} let#0_0_1_21#0#0 == _mcc#36#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_1_21#0#0, TInt);
                        assume {:id "id273"} newState#Z#0_0_1_7 == let#0_0_1_21#0#0;
                        havoc a#Z#0_0_1_7;
                        assume {:id "id274"} let#0_0_1_22#0#0 == _mcc#35#0_0_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_1_22#0#0, State._default.Associativity$B);
                        assume {:id "id275"} a#Z#0_0_1_7 == let#0_0_1_22#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_0_1_5, 
                              g#0, 
                              a#Z#0_0_1_7)): DatatypeType
                           == #State.M.State(_mcc#40#0_0_1_0))
                        {
                            assume $Is(_mcc#40#0_0_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc h1#Z#0_0_1_3;
                            assume {:id "id276"} let#0_0_1_23#0#0 == _mcc#40#0_0_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_1_23#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id277"} h1#Z#0_0_1_3 == let#0_0_1_23#0#0;
                            assume {:id "id278"} lambdaResult#0_0_1_5
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  h1#Z#0_0_1_3, 
                                  $Box(newState#Z#0_0_1_7))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_1_5, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_1_27#s#0: int, $l#0_0_1_27#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_1_27#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_1_27#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_1_27#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_1_27#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_1_27#s#0))): DatatypeType)
                   && (var a#0_0_1_39 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_1_27#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_1_27#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#0_0_1_27#heap#0, 
                          f#0, 
                          a#0_0_1_39)): DatatypeType))
                   && _System.Tuple2.___hMake2_q((var newState#0_0_1_40 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_1_27#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_1_27#s#0))): DatatypeType)): int; 
                      (var a#0_0_1_40 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_1_27#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_1_27#s#0))): DatatypeType); 
                        (var g2#0_0_1_33 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_0_1_27#heap#0, 
                                  f#0, 
                                  a#0_0_1_40)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $l#0_0_1_27#heap#0, 
                              g2#0_0_1_33, 
                              $Box(newState#0_0_1_40))): DatatypeType))))
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_1_27#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_1_27#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_1_27#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_1_27#s#0))): DatatypeType)
                   && (var a#0_0_1_41 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_1_27#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_1_27#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#0_0_1_27#heap#0, 
                          f#0, 
                          a#0_0_1_41)): DatatypeType))
                   && _System.Tuple2.___hMake2_q((var newState#0_0_1_42 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_1_27#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_1_27#s#0))): DatatypeType)): int; 
                      (var a#0_0_1_42 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_1_27#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_1_27#s#0))): DatatypeType); 
                        (var g2#0_0_1_35 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_0_1_27#heap#0, 
                                  f#0, 
                                  a#0_0_1_42)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $l#0_0_1_27#heap#0, 
                              g2#0_0_1_35, 
                              $Box(newState#0_0_1_42))): DatatypeType))))
                   && (var a#0_0_1_43 := _System.Tuple2._0((var newState#0_0_1_43 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_1_27#heap#0, 
                                    h#0_0, 
                                    $Box($l#0_0_1_27#s#0))): DatatypeType)): int; 
                          (var a#0_0_1_44 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_1_27#heap#0, 
                                    h#0_0, 
                                    $Box($l#0_0_1_27#s#0))): DatatypeType); 
                            (var g2#0_0_1_36 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_0_1_27#heap#0, 
                                      f#0, 
                                      a#0_0_1_44)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $l#0_0_1_27#heap#0, 
                                  g2#0_0_1_36, 
                                  $Box(newState#0_0_1_43))): DatatypeType)))); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                          Tclass.State.M(State._default.Associativity$C), 
                          $l#0_0_1_27#heap#0, 
                          g#0, 
                          a#0_0_1_43)): DatatypeType)));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            assert {:id "id279"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_0_1_32#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_1_32#heap#0: Heap, $l#0_0_1_32#s#0: Box :: 
                          $Box((var newState#0_0_1_53 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_0_1_32#heap#0, 
                                        Lit(AtLayer((lambda $l#0_0_1_33#ly#0: LayerType :: 
                                              Handle1((lambda $l#0_0_1_33#heap#0: Heap, $l#0_0_1_33#s#0: Box :: 
                                                  $Box((var newState#0_0_1_52 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                                $l#0_0_1_33#heap#0, 
                                                                h#0_0, 
                                                                $Box($Unbox($l#0_0_1_33#s#0): int))): DatatypeType)): int; 
                                                      (var a#0_0_1_52 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                                $l#0_0_1_33#heap#0, 
                                                                h#0_0, 
                                                                $Box($Unbox($l#0_0_1_33#s#0): int))): DatatypeType); 
                                                        (var g2#0_0_1_42 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                                  Tclass.State.M(State._default.Associativity$B), 
                                                                  $l#0_0_1_33#heap#0, 
                                                                  f#0, 
                                                                  a#0_0_1_52)): DatatypeType); 
                                                          $Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                              $l#0_0_1_33#heap#0, 
                                                              g2#0_0_1_42, 
                                                              $Box(newState#0_0_1_52))): DatatypeType))))), 
                                                (lambda $l#0_0_1_33#heap#0: Heap, $l#0_0_1_33#s#0: Box :: 
                                                  $IsBox($l#0_0_1_33#s#0, TInt)), 
                                                (lambda $l#0_0_1_33#heap#0: Heap, $l#0_0_1_33#s#0: Box :: 
                                                  SetRef_to_SetBox((lambda $l#0_0_1_33#o#0: ref :: false))))), 
                                            $l#0_0_1_32#ly#0)), 
                                        $Box($Unbox($l#0_0_1_32#s#0): int))): DatatypeType)): int; 
                              (var a#0_0_1_54 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_0_1_32#heap#0, 
                                        Lit(AtLayer((lambda $l#0_0_1_34#ly#0: LayerType :: 
                                              Handle1((lambda $l#0_0_1_34#heap#0: Heap, $l#0_0_1_34#s#0: Box :: 
                                                  $Box((var newState#0_0_1_54 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                                $l#0_0_1_34#heap#0, 
                                                                h#0_0, 
                                                                $Box($Unbox($l#0_0_1_34#s#0): int))): DatatypeType)): int; 
                                                      (var a#0_0_1_53 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                                $l#0_0_1_34#heap#0, 
                                                                h#0_0, 
                                                                $Box($Unbox($l#0_0_1_34#s#0): int))): DatatypeType); 
                                                        (var g2#0_0_1_43 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                                  Tclass.State.M(State._default.Associativity$B), 
                                                                  $l#0_0_1_34#heap#0, 
                                                                  f#0, 
                                                                  a#0_0_1_53)): DatatypeType); 
                                                          $Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                              $l#0_0_1_34#heap#0, 
                                                              g2#0_0_1_43, 
                                                              $Box(newState#0_0_1_54))): DatatypeType))))), 
                                                (lambda $l#0_0_1_34#heap#0: Heap, $l#0_0_1_34#s#0: Box :: 
                                                  $IsBox($l#0_0_1_34#s#0, TInt)), 
                                                (lambda $l#0_0_1_34#heap#0: Heap, $l#0_0_1_34#s#0: Box :: 
                                                  SetRef_to_SetBox((lambda $l#0_0_1_34#o#0: ref :: false))))), 
                                            $l#0_0_1_32#ly#0)), 
                                        $Box($Unbox($l#0_0_1_32#s#0): int))): DatatypeType); 
                                (var h1#0_0_1_10 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_0_1_32#heap#0, 
                                          g#0, 
                                          a#0_0_1_54)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_0_1_32#heap#0, 
                                      h1#0_0_1_10, 
                                      $Box(newState#0_0_1_53))): DatatypeType))))), 
                        (lambda $l#0_0_1_32#heap#0: Heap, $l#0_0_1_32#s#0: Box :: 
                          $IsBox($l#0_0_1_32#s#0, TInt)), 
                        (lambda $l#0_0_1_32#heap#0: Heap, $l#0_0_1_32#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_1_32#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_0_1_35#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_1_35#heap#0: Heap, $l#0_0_1_35#s#0: Box :: 
                          $Box((var newState#0_0_1_56 := $Unbox(_System.Tuple2._1((var newState#0_0_1_55 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_35#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_35#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_1_55 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_35#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_35#s#0): int))): DatatypeType); 
                                        (var g2#0_0_1_44 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_1_35#heap#0, 
                                                  f#0, 
                                                  a#0_0_1_55)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_1_35#heap#0, 
                                              g2#0_0_1_44, 
                                              $Box(newState#0_0_1_55))): DatatypeType))))): int; 
                              (var a#0_0_1_57 := _System.Tuple2._0((var newState#0_0_1_57 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_35#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_35#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_1_56 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_1_35#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_1_35#s#0): int))): DatatypeType); 
                                        (var g2#0_0_1_45 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_1_35#heap#0, 
                                                  f#0, 
                                                  a#0_0_1_56)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_1_35#heap#0, 
                                              g2#0_0_1_45, 
                                              $Box(newState#0_0_1_57))): DatatypeType)))); 
                                (var h1#0_0_1_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_0_1_35#heap#0, 
                                          g#0, 
                                          a#0_0_1_57)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_0_1_35#heap#0, 
                                      h1#0_0_1_11, 
                                      $Box(newState#0_0_1_56))): DatatypeType))))), 
                        (lambda $l#0_0_1_35#heap#0: Heap, $l#0_0_1_35#s#0: Box :: 
                          $IsBox($l#0_0_1_35#s#0, TInt)), 
                        (lambda $l#0_0_1_35#heap#0: Heap, $l#0_0_1_35#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_1_35#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0_0;
                assume $IsGoodHeap($lambdaHeap#0_0_0_0);
                assume $Heap == $lambdaHeap#0_0_0_0 || $HeapSucc($Heap, $lambdaHeap#0_0_0_0);
                havoc s#0_0_0_0;
                if (true)
                {
                    $_Frame#l0_0_0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0_0, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_0_0_0, 
                          h#0_0, 
                          $Box(s#0_0_0_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#43#0_0_0_0, $Box(_mcc#44#0_0_0_0)))
                    {
                        assume $IsBox(_mcc#43#0_0_0_0, State._default.Associativity$A);
                        havoc newState#Z#0_0_0_0;
                        assume {:id "id170"} let#0_0_0_0#0#0 == _mcc#44#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_0_0#0#0, TInt);
                        assume {:id "id171"} newState#Z#0_0_0_0 == let#0_0_0_0#0#0;
                        havoc a#Z#0_0_0_0;
                        assume {:id "id172"} let#0_0_0_1#0#0 == _mcc#43#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_0_1#0#0, State._default.Associativity$A);
                        assume {:id "id173"} a#Z#0_0_0_0 == let#0_0_0_1#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_0_0_0, 
                              f#0, 
                              a#Z#0_0_0_0)): DatatypeType
                           == #State.M.State(_mcc#45#0_0_0_0))
                        {
                            assume $Is(_mcc#45#0_0_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc g2#Z#0_0_0_0;
                            assume {:id "id174"} let#0_0_0_2#0#0 == _mcc#45#0_0_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_0_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id175"} g2#Z#0_0_0_0 == let#0_0_0_2#0#0;
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }

                    if ((var newState#0_0_0_0 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_0_0, 
                                  h#0_0, 
                                  $Box(s#0_0_0_0))): DatatypeType)): int; 
                        (var a#0_0_0_0 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_0_0, 
                                  h#0_0, 
                                  $Box(s#0_0_0_0))): DatatypeType); 
                          (var g2#0_0_0_0 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_0_0_0, 
                                    f#0, 
                                    a#0_0_0_0)): DatatypeType); 
                            $Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                $lambdaHeap#0_0_0_0, 
                                g2#0_0_0_0, 
                                $Box(newState#0_0_0_0))): DatatypeType)))
                       == #_System._tuple#2._#Make2(_mcc#41#0_0_0_0, $Box(_mcc#42#0_0_0_0)))
                    {
                        assume $IsBox(_mcc#41#0_0_0_0, State._default.Associativity$B);
                        havoc newState#Z#0_0_0_1;
                        assume {:id "id176"} let#0_0_0_3#0#0 == _mcc#42#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_0_3#0#0, TInt);
                        assume {:id "id177"} newState#Z#0_0_0_1 == let#0_0_0_3#0#0;
                        havoc a#Z#0_0_0_1;
                        assume {:id "id178"} let#0_0_0_4#0#0 == _mcc#41#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_0_4#0#0, State._default.Associativity$B);
                        assume {:id "id179"} a#Z#0_0_0_1 == let#0_0_0_4#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_0_0_0, 
                              g#0, 
                              a#Z#0_0_0_1)): DatatypeType
                           == #State.M.State(_mcc#46#0_0_0_0))
                        {
                            assume $Is(_mcc#46#0_0_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc h1#Z#0_0_0_0;
                            assume {:id "id180"} let#0_0_0_5#0#0 == _mcc#46#0_0_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_0_5#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id181"} h1#Z#0_0_0_0 == let#0_0_0_5#0#0;
                            assume {:id "id182"} lambdaResult#0_0_0_0
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  h1#Z#0_0_0_0, 
                                  $Box(newState#Z#0_0_0_1))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_0_0, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_0_1#s#0: int, $l#0_0_0_1#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_0_1#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_1#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_1#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_1#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_1#s#0))): DatatypeType)
                   && (var a#0_0_0_4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_0_1#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_0_1#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#0_0_0_1#heap#0, 
                          f#0, 
                          a#0_0_0_4)): DatatypeType))
                   && _System.Tuple2.___hMake2_q((var newState#0_0_0_5 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_1#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_1#s#0))): DatatypeType)): int; 
                      (var a#0_0_0_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_1#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_1#s#0))): DatatypeType); 
                        (var g2#0_0_0_4 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_0_0_1#heap#0, 
                                  f#0, 
                                  a#0_0_0_5)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $l#0_0_0_1#heap#0, 
                              g2#0_0_0_4, 
                              $Box(newState#0_0_0_5))): DatatypeType))))
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_1#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_1#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_1#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_1#s#0))): DatatypeType)
                   && (var a#0_0_0_6 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_0_1#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_0_1#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#0_0_0_1#heap#0, 
                          f#0, 
                          a#0_0_0_6)): DatatypeType))
                   && _System.Tuple2.___hMake2_q((var newState#0_0_0_7 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_1#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_1#s#0))): DatatypeType)): int; 
                      (var a#0_0_0_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_1#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_1#s#0))): DatatypeType); 
                        (var g2#0_0_0_6 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_0_0_1#heap#0, 
                                  f#0, 
                                  a#0_0_0_7)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $l#0_0_0_1#heap#0, 
                              g2#0_0_0_6, 
                              $Box(newState#0_0_0_7))): DatatypeType))))
                   && (var a#0_0_0_8 := _System.Tuple2._0((var newState#0_0_0_8 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_0_1#heap#0, 
                                    h#0_0, 
                                    $Box($l#0_0_0_1#s#0))): DatatypeType)): int; 
                          (var a#0_0_0_9 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_0_1#heap#0, 
                                    h#0_0, 
                                    $Box($l#0_0_0_1#s#0))): DatatypeType); 
                            (var g2#0_0_0_7 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_0_0_1#heap#0, 
                                      f#0, 
                                      a#0_0_0_9)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $l#0_0_0_1#heap#0, 
                                  g2#0_0_0_7, 
                                  $Box(newState#0_0_0_8))): DatatypeType)))); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                          Tclass.State.M(State._default.Associativity$C), 
                          $l#0_0_0_1#heap#0, 
                          g#0, 
                          a#0_0_0_8)): DatatypeType)));
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            push;
            push;
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(158,19)
            // TrCallStmt: Before ProcessCallStmt
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0_1;
                assume $IsGoodHeap($lambdaHeap#0_0_0_1);
                assume $Heap == $lambdaHeap#0_0_0_1 || $HeapSucc($Heap, $lambdaHeap#0_0_0_1);
                havoc s#0_0_0_1;
                if (true)
                {
                    $_Frame#l0_0_0_1 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0_1, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_0_0_1, 
                          h#0_0, 
                          $Box(s#0_0_0_1))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#85#0_0_0_0, $Box(_mcc#86#0_0_0_0)))
                    {
                        assume $IsBox(_mcc#85#0_0_0_0, State._default.Associativity$A);
                        havoc newState#Z#0_0_0_2;
                        assume {:id "id183"} let#0_0_0_6#0#0 == _mcc#86#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_0_6#0#0, TInt);
                        assume {:id "id184"} newState#Z#0_0_0_2 == let#0_0_0_6#0#0;
                        havoc a#Z#0_0_0_2;
                        assume {:id "id185"} let#0_0_0_7#0#0 == _mcc#85#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_0_7#0#0, State._default.Associativity$A);
                        assume {:id "id186"} a#Z#0_0_0_2 == let#0_0_0_7#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_0_0_1, 
                              f#0, 
                              a#Z#0_0_0_2)): DatatypeType
                           == #State.M.State(_mcc#87#0_0_0_0))
                        {
                            assume $Is(_mcc#87#0_0_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc g2#Z#0_0_0_1;
                            assume {:id "id187"} let#0_0_0_8#0#0 == _mcc#87#0_0_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_0_8#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id188"} g2#Z#0_0_0_1 == let#0_0_0_8#0#0;
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }

                    if ((var newState#0_0_0_11 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_0_1, 
                                  h#0_0, 
                                  $Box(s#0_0_0_1))): DatatypeType)): int; 
                        (var a#0_0_0_11 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                  $lambdaHeap#0_0_0_1, 
                                  h#0_0, 
                                  $Box(s#0_0_0_1))): DatatypeType); 
                          (var g2#0_0_0_9 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_0_0_1, 
                                    f#0, 
                                    a#0_0_0_11)): DatatypeType); 
                            $Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                $lambdaHeap#0_0_0_1, 
                                g2#0_0_0_9, 
                                $Box(newState#0_0_0_11))): DatatypeType)))
                       == #_System._tuple#2._#Make2(_mcc#83#0_0_0_0, $Box(_mcc#84#0_0_0_0)))
                    {
                        assume $IsBox(_mcc#83#0_0_0_0, State._default.Associativity$B);
                        havoc newState#Z#0_0_0_3;
                        assume {:id "id189"} let#0_0_0_9#0#0 == _mcc#84#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_0_9#0#0, TInt);
                        assume {:id "id190"} newState#Z#0_0_0_3 == let#0_0_0_9#0#0;
                        havoc a#Z#0_0_0_3;
                        assume {:id "id191"} let#0_0_0_10#0#0 == _mcc#83#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_0_10#0#0, State._default.Associativity$B);
                        assume {:id "id192"} a#Z#0_0_0_3 == let#0_0_0_10#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$B, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_0_0_1, 
                              g#0, 
                              a#Z#0_0_0_3)): DatatypeType
                           == #State.M.State(_mcc#88#0_0_0_0))
                        {
                            assume $Is(_mcc#88#0_0_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc h1#Z#0_0_0_1;
                            assume {:id "id193"} let#0_0_0_11#0#0 == _mcc#88#0_0_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_0_11#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id194"} h1#Z#0_0_0_1 == let#0_0_0_11#0#0;
                            assume {:id "id195"} lambdaResult#0_0_0_1
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  h1#Z#0_0_0_1, 
                                  $Box(newState#Z#0_0_0_3))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_0_1, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_0_2#s#0: int, $l#0_0_0_2#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_0_2#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_2#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_2#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_2#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_2#s#0))): DatatypeType)
                   && (var a#0_0_0_12 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_0_2#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_0_2#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#0_0_0_2#heap#0, 
                          f#0, 
                          a#0_0_0_12)): DatatypeType))
                   && _System.Tuple2.___hMake2_q((var newState#0_0_0_13 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_2#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_2#s#0))): DatatypeType)): int; 
                      (var a#0_0_0_13 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_2#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_2#s#0))): DatatypeType); 
                        (var g2#0_0_0_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_0_0_2#heap#0, 
                                  f#0, 
                                  a#0_0_0_13)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $l#0_0_0_2#heap#0, 
                              g2#0_0_0_11, 
                              $Box(newState#0_0_0_13))): DatatypeType))))
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_2#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_2#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_2#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_2#s#0))): DatatypeType)
                   && (var a#0_0_0_14 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_0_2#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_0_2#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $l#0_0_0_2#heap#0, 
                          f#0, 
                          a#0_0_0_14)): DatatypeType))
                   && _System.Tuple2.___hMake2_q((var newState#0_0_0_15 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_2#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_2#s#0))): DatatypeType)): int; 
                      (var a#0_0_0_15 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_2#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_2#s#0))): DatatypeType); 
                        (var g2#0_0_0_13 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_0_0_2#heap#0, 
                                  f#0, 
                                  a#0_0_0_15)): DatatypeType); 
                          $Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                              $l#0_0_0_2#heap#0, 
                              g2#0_0_0_13, 
                              $Box(newState#0_0_0_15))): DatatypeType))))
                   && (var a#0_0_0_16 := _System.Tuple2._0((var newState#0_0_0_16 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_0_2#heap#0, 
                                    h#0_0, 
                                    $Box($l#0_0_0_2#s#0))): DatatypeType)): int; 
                          (var a#0_0_0_17 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_0_2#heap#0, 
                                    h#0_0, 
                                    $Box($l#0_0_0_2#s#0))): DatatypeType); 
                            (var g2#0_0_0_14 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_0_0_2#heap#0, 
                                      f#0, 
                                      a#0_0_0_17)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $l#0_0_0_2#heap#0, 
                                  g2#0_0_0_14, 
                                  $Box(newState#0_0_0_16))): DatatypeType)))); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                          Tclass.State.M(State._default.Associativity$C), 
                          $l#0_0_0_2#heap#0, 
                          g#0, 
                          a#0_0_0_16)): DatatypeType)));
            // ProcessCallStmt: CheckSubrange
            f##0_0_0_0 := Lit(AtLayer((lambda $l#0_0_0_3#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_0_3#heap#0: Heap, $l#0_0_0_3#s#0: Box :: 
                      $Box((var newState#0_0_0_20 := $Unbox(_System.Tuple2._1((var newState#0_0_0_19 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_0_3#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_0_3#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_0_19 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_0_3#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_0_3#s#0): int))): DatatypeType); 
                                    (var g2#0_0_0_16 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                              Tclass.State.M(State._default.Associativity$B), 
                                              $l#0_0_0_3#heap#0, 
                                              f#0, 
                                              a#0_0_0_19)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_0_3#heap#0, 
                                          g2#0_0_0_16, 
                                          $Box(newState#0_0_0_19))): DatatypeType))))): int; 
                          (var a#0_0_0_21 := _System.Tuple2._0((var newState#0_0_0_21 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_0_3#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_0_3#s#0): int))): DatatypeType)): int; 
                                  (var a#0_0_0_20 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                            $l#0_0_0_3#heap#0, 
                                            h#0_0, 
                                            $Box($Unbox($l#0_0_0_3#s#0): int))): DatatypeType); 
                                    (var g2#0_0_0_17 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                              Tclass.State.M(State._default.Associativity$B), 
                                              $l#0_0_0_3#heap#0, 
                                              f#0, 
                                              a#0_0_0_20)): DatatypeType); 
                                      $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_0_3#heap#0, 
                                          g2#0_0_0_17, 
                                          $Box(newState#0_0_0_21))): DatatypeType)))); 
                            (var h1#0_0_0_3 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_0_0_3#heap#0, 
                                      g#0, 
                                      a#0_0_0_21)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_0_0_3#heap#0, 
                                  h1#0_0_0_3, 
                                  $Box(newState#0_0_0_20))): DatatypeType))))), 
                    (lambda $l#0_0_0_3#heap#0: Heap, $l#0_0_0_3#s#0: Box :: 
                      $IsBox($l#0_0_0_3#s#0, TInt)), 
                    (lambda $l#0_0_0_3#heap#0: Heap, $l#0_0_0_3#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_0_3#o#0: ref :: false))))), 
                $LS($LZ)));
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0_2;
                assume $IsGoodHeap($lambdaHeap#0_0_0_2);
                assume $Heap == $lambdaHeap#0_0_0_2 || $HeapSucc($Heap, $lambdaHeap#0_0_0_2);
                havoc s#0_0_0_2;
                if (true)
                {
                    $_Frame#l0_0_0_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0_2, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_0_0_2, 
                          h#0_0, 
                          $Box(s#0_0_0_2))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#89#0_0_0_0, $Box(_mcc#90#0_0_0_0)))
                    {
                        assume $IsBox(_mcc#89#0_0_0_0, State._default.Associativity$A);
                        havoc newState#Z#0_0_0_4;
                        assume {:id "id196"} let#0_0_0_12#0#0 == _mcc#90#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_0_12#0#0, TInt);
                        assume {:id "id197"} newState#Z#0_0_0_4 == let#0_0_0_12#0#0;
                        havoc a#Z#0_0_0_4;
                        assume {:id "id198"} let#0_0_0_13#0#0 == _mcc#89#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_0_13#0#0, State._default.Associativity$A);
                        assume {:id "id199"} a#Z#0_0_0_4 == let#0_0_0_13#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_0_0_2, 
                              f#0, 
                              a#Z#0_0_0_4)): DatatypeType
                           == #State.M.State(_mcc#91#0_0_0_0))
                        {
                            assume $Is(_mcc#91#0_0_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc g2#Z#0_0_0_2;
                            assume {:id "id200"} let#0_0_0_14#0#0 == _mcc#91#0_0_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_0_14#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id201"} g2#Z#0_0_0_2 == let#0_0_0_14#0#0;
                            if ($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $lambdaHeap#0_0_0_2, 
                                  g2#Z#0_0_0_2, 
                                  $Box(newState#Z#0_0_0_4))): DatatypeType
                               == #_System._tuple#2._#Make2(_mcc#92#0_0_0_0, $Box(_mcc#93#0_0_0_0)))
                            {
                                assume $IsBox(_mcc#92#0_0_0_0, State._default.Associativity$B);
                                havoc newState2#Z#0_0_0_0;
                                assume {:id "id202"} let#0_0_0_15#0#0 == _mcc#93#0_0_0_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_0_0_15#0#0, TInt);
                                assume {:id "id203"} newState2#Z#0_0_0_0 == let#0_0_0_15#0#0;
                                havoc b#Z#0_0_0_0;
                                assume {:id "id204"} let#0_0_0_16#0#0 == _mcc#92#0_0_0_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $IsBox(let#0_0_0_16#0#0, State._default.Associativity$B);
                                assume {:id "id205"} b#Z#0_0_0_0 == let#0_0_0_16#0#0;
                                if ($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $lambdaHeap#0_0_0_2, 
                                      g#0, 
                                      b#Z#0_0_0_0)): DatatypeType
                                   == #State.M.State(_mcc#94#0_0_0_0))
                                {
                                    assume $Is(_mcc#94#0_0_0_0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                    havoc h1#Z#0_0_0_2;
                                    assume {:id "id206"} let#0_0_0_17#0#0 == _mcc#94#0_0_0_0;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#0_0_0_17#0#0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                    assume {:id "id207"} h1#Z#0_0_0_2 == let#0_0_0_17#0#0;
                                    assume {:id "id208"} lambdaResult#0_0_0_2
                                       == $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                          $Heap, 
                                          h1#Z#0_0_0_2, 
                                          $Box(newState2#Z#0_0_0_0))): DatatypeType;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(lambdaResult#0_0_0_2, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                }
                                else
                                {
                                    assume false;
                                }
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_0_4#s#0: int, $l#0_0_0_4#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_0_4#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_4#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_4#s#0))): DatatypeType)
                   && (var newState#0_0_0_22 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_0_4#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_0_4#s#0))): DatatypeType)): int; 
                    _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_0_4#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_0_4#s#0))): DatatypeType)
                       && (var a#0_0_0_22 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_4#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_4#s#0))): DatatypeType); 
                        State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_0_0_4#heap#0, 
                                f#0, 
                                a#0_0_0_22)): DatatypeType)
                           && (var g2#0_0_0_18 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $l#0_0_0_4#heap#0, 
                                    f#0, 
                                    a#0_0_0_22)): DatatypeType); 
                            _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_0_0_4#heap#0, 
                                    g2#0_0_0_18, 
                                    $Box(newState#0_0_0_22))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_0_0_4#heap#0, 
                                    g2#0_0_0_18, 
                                    $Box(newState#0_0_0_22))): DatatypeType)
                               && (var b#0_0_0_0 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_0_0_4#heap#0, 
                                        g2#0_0_0_18, 
                                        $Box(newState#0_0_0_22))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_0_0_4#heap#0, 
                                      g#0, 
                                      b#0_0_0_0)): DatatypeType))))));
            // ProcessCallStmt: CheckSubrange
            g##0_0_0_0 := Lit(AtLayer((lambda $l#0_0_0_5#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_0_5#heap#0: Heap, $l#0_0_0_5#s#0: Box :: 
                      $Box((var newState#0_0_0_23 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_0_5#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_0_0_5#s#0): int))): DatatypeType)): int; 
                          (var a#0_0_0_23 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_0_5#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_0_0_5#s#0): int))): DatatypeType); 
                            (var g2#0_0_0_19 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_0_0_5#heap#0, 
                                      f#0, 
                                      a#0_0_0_23)): DatatypeType); 
                              (var newState2#0_0_0_1 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_0_5#heap#0, 
                                          g2#0_0_0_19, 
                                          $Box(newState#0_0_0_23))): DatatypeType)): int; 
                                (var b#0_0_0_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_0_5#heap#0, 
                                          g2#0_0_0_19, 
                                          $Box(newState#0_0_0_23))): DatatypeType); 
                                  (var h1#0_0_0_5 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                            Tclass.State.M(State._default.Associativity$C), 
                                            $l#0_0_0_5#heap#0, 
                                            g#0, 
                                            b#0_0_0_1)): DatatypeType); 
                                    $Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                        $l#0_0_0_5#heap#0, 
                                        h1#0_0_0_5, 
                                        $Box(newState2#0_0_0_1))): DatatypeType)))))))), 
                    (lambda $l#0_0_0_5#heap#0: Heap, $l#0_0_0_5#s#0: Box :: 
                      $IsBox($l#0_0_0_5#s#0, TInt)), 
                    (lambda $l#0_0_0_5#heap#0: Heap, $l#0_0_0_5#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_0_5#o#0: ref :: false))))), 
                $LS($LZ)));
            call {:id "id209"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt), f##0_0_0_0, g##0_0_0_0);
            // TrCallStmt: After ProcessCallStmt
            pop;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0_3;
                assume $IsGoodHeap($lambdaHeap#0_0_0_3);
                assume $Heap == $lambdaHeap#0_0_0_3 || $HeapSucc($Heap, $lambdaHeap#0_0_0_3);
                havoc s#0_0_0_3;
                if (true)
                {
                    $_Frame#l0_0_0_3 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0_3, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_0_0_3, 
                          h#0_0, 
                          $Box(s#0_0_0_3))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#47#0_0_0_0, $Box(_mcc#48#0_0_0_0)))
                    {
                        assume $IsBox(_mcc#47#0_0_0_0, State._default.Associativity$A);
                        havoc newState#Z#0_0_0_5;
                        assume {:id "id210"} let#0_0_0_18#0#0 == _mcc#48#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_0_0_18#0#0, TInt);
                        assume {:id "id211"} newState#Z#0_0_0_5 == let#0_0_0_18#0#0;
                        havoc a#Z#0_0_0_5;
                        assume {:id "id212"} let#0_0_0_19#0#0 == _mcc#47#0_0_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_0_0_19#0#0, State._default.Associativity$A);
                        assume {:id "id213"} a#Z#0_0_0_5 == let#0_0_0_19#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_0_0_3, 
                              f#0, 
                              a#Z#0_0_0_5)): DatatypeType
                           == #State.M.State(_mcc#49#0_0_0_0))
                        {
                            assume $Is(_mcc#49#0_0_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc g2#Z#0_0_0_3;
                            assume {:id "id214"} let#0_0_0_20#0#0 == _mcc#49#0_0_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_0_0_20#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id215"} g2#Z#0_0_0_3 == let#0_0_0_20#0#0;
                            if ($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $lambdaHeap#0_0_0_3, 
                                  g2#Z#0_0_0_3, 
                                  $Box(newState#Z#0_0_0_5))): DatatypeType
                               == #_System._tuple#2._#Make2(_mcc#50#0_0_0_0, $Box(_mcc#51#0_0_0_0)))
                            {
                                assume $IsBox(_mcc#50#0_0_0_0, State._default.Associativity$B);
                                havoc newState2#Z#0_0_0_1;
                                assume {:id "id216"} let#0_0_0_21#0#0 == _mcc#51#0_0_0_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_0_0_21#0#0, TInt);
                                assume {:id "id217"} newState2#Z#0_0_0_1 == let#0_0_0_21#0#0;
                                havoc b#Z#0_0_0_1;
                                assume {:id "id218"} let#0_0_0_22#0#0 == _mcc#50#0_0_0_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $IsBox(let#0_0_0_22#0#0, State._default.Associativity$B);
                                assume {:id "id219"} b#Z#0_0_0_1 == let#0_0_0_22#0#0;
                                if ($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $lambdaHeap#0_0_0_3, 
                                      g#0, 
                                      b#Z#0_0_0_1)): DatatypeType
                                   == #State.M.State(_mcc#52#0_0_0_0))
                                {
                                    assume $Is(_mcc#52#0_0_0_0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                    havoc h1#Z#0_0_0_3;
                                    assume {:id "id220"} let#0_0_0_23#0#0 == _mcc#52#0_0_0_0;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#0_0_0_23#0#0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                    assume {:id "id221"} h1#Z#0_0_0_3 == let#0_0_0_23#0#0;
                                    assume {:id "id222"} lambdaResult#0_0_0_3
                                       == $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                          $Heap, 
                                          h1#Z#0_0_0_3, 
                                          $Box(newState2#Z#0_0_0_1))): DatatypeType;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(lambdaResult#0_0_0_3, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                }
                                else
                                {
                                    assume false;
                                }
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_0_7#s#0: int, $l#0_0_0_7#heap#0: Heap :: 
              $IsGoodHeap($l#0_0_0_7#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_0_0_7#heap#0, 
                        h#0_0, 
                        $Box($l#0_0_0_7#s#0))): DatatypeType)
                   && (var newState#0_0_0_25 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_0_0_7#heap#0, 
                              h#0_0, 
                              $Box($l#0_0_0_7#s#0))): DatatypeType)): int; 
                    _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_0_0_7#heap#0, 
                            h#0_0, 
                            $Box($l#0_0_0_7#s#0))): DatatypeType)
                       && (var a#0_0_0_25 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_0_0_7#heap#0, 
                                h#0_0, 
                                $Box($l#0_0_0_7#s#0))): DatatypeType); 
                        State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_0_0_7#heap#0, 
                                f#0, 
                                a#0_0_0_25)): DatatypeType)
                           && (var g2#0_0_0_21 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $l#0_0_0_7#heap#0, 
                                    f#0, 
                                    a#0_0_0_25)): DatatypeType); 
                            _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_0_0_7#heap#0, 
                                    g2#0_0_0_21, 
                                    $Box(newState#0_0_0_25))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_0_0_7#heap#0, 
                                    g2#0_0_0_21, 
                                    $Box(newState#0_0_0_25))): DatatypeType)
                               && (var b#0_0_0_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_0_0_7#heap#0, 
                                        g2#0_0_0_21, 
                                        $Box(newState#0_0_0_25))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_0_0_7#heap#0, 
                                      g#0, 
                                      b#0_0_0_3)): DatatypeType))))));
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(116,9)
            assert {:id "id223"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_0_0_10#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_0_10#heap#0: Heap, $l#0_0_0_10#s#0: Box :: 
                          $Box((var newState#0_0_0_31 := $Unbox(_System.Tuple2._1((var newState#0_0_0_30 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_0_10#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_0_10#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_0_30 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_0_10#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_0_10#s#0): int))): DatatypeType); 
                                        (var g2#0_0_0_25 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_0_10#heap#0, 
                                                  f#0, 
                                                  a#0_0_0_30)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_0_10#heap#0, 
                                              g2#0_0_0_25, 
                                              $Box(newState#0_0_0_30))): DatatypeType))))): int; 
                              (var a#0_0_0_32 := _System.Tuple2._0((var newState#0_0_0_32 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_0_10#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_0_10#s#0): int))): DatatypeType)): int; 
                                      (var a#0_0_0_31 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                                $l#0_0_0_10#heap#0, 
                                                h#0_0, 
                                                $Box($Unbox($l#0_0_0_10#s#0): int))): DatatypeType); 
                                        (var g2#0_0_0_26 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                  Tclass.State.M(State._default.Associativity$B), 
                                                  $l#0_0_0_10#heap#0, 
                                                  f#0, 
                                                  a#0_0_0_31)): DatatypeType); 
                                          $Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_0_10#heap#0, 
                                              g2#0_0_0_26, 
                                              $Box(newState#0_0_0_32))): DatatypeType)))); 
                                (var h1#0_0_0_10 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_0_0_10#heap#0, 
                                          g#0, 
                                          a#0_0_0_32)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_0_0_10#heap#0, 
                                      h1#0_0_0_10, 
                                      $Box(newState#0_0_0_31))): DatatypeType))))), 
                        (lambda $l#0_0_0_10#heap#0: Heap, $l#0_0_0_10#s#0: Box :: 
                          $IsBox($l#0_0_0_10#s#0, TInt)), 
                        (lambda $l#0_0_0_10#heap#0: Heap, $l#0_0_0_10#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_0_10#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_0_0_11#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_0_11#heap#0: Heap, $l#0_0_0_11#s#0: Box :: 
                          $Box((var newState#0_0_0_33 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_0_0_11#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_0_0_11#s#0): int))): DatatypeType)): int; 
                              (var a#0_0_0_33 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_0_0_11#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_0_0_11#s#0): int))): DatatypeType); 
                                (var g2#0_0_0_27 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                          Tclass.State.M(State._default.Associativity$B), 
                                          $l#0_0_0_11#heap#0, 
                                          f#0, 
                                          a#0_0_0_33)): DatatypeType); 
                                  (var newState2#0_0_0_5 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_0_11#heap#0, 
                                              g2#0_0_0_27, 
                                              $Box(newState#0_0_0_33))): DatatypeType)): int; 
                                    (var b#0_0_0_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_0_0_11#heap#0, 
                                              g2#0_0_0_27, 
                                              $Box(newState#0_0_0_33))): DatatypeType); 
                                      (var h1#0_0_0_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                Tclass.State.M(State._default.Associativity$C), 
                                                $l#0_0_0_11#heap#0, 
                                                g#0, 
                                                b#0_0_0_5)): DatatypeType); 
                                        $Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                            $l#0_0_0_11#heap#0, 
                                            h1#0_0_0_11, 
                                            $Box(newState2#0_0_0_5))): DatatypeType)))))))), 
                        (lambda $l#0_0_0_11#heap#0: Heap, $l#0_0_0_11#s#0: Box :: 
                          $IsBox($l#0_0_0_11#s#0, TInt)), 
                        (lambda $l#0_0_0_11#heap#0: Heap, $l#0_0_0_11#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_0_11#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }

        assume {:id "id347"} State.M#Equal(State.__default.Bind(State._default.Associativity$B, 
            State._default.Associativity$C, 
            State.__default.Bind(State._default.Associativity$A, State._default.Associativity$B, m#0, f#0), 
            g#0), 
          #State.M.State(Lit(AtLayer((lambda $l#0_0_0#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_0#heap#0: Heap, $l#0_0_0#s#0: Box :: 
                      $Box((var newState#0_0_0 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_0#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_0_0#s#0): int))): DatatypeType)): int; 
                          (var a#0_0_0 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_0_0#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_0_0#s#0): int))): DatatypeType); 
                            (var g2#0_0_0 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_0_0#heap#0, 
                                      f#0, 
                                      a#0_0_0)): DatatypeType); 
                              (var newState2#0_0_0 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_0#heap#0, 
                                          g2#0_0_0, 
                                          $Box(newState#0_0_0))): DatatypeType)): int; 
                                (var b#0_0_0 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_0_0#heap#0, 
                                          g2#0_0_0, 
                                          $Box(newState#0_0_0))): DatatypeType); 
                                  (var h1#0_0_0 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                            Tclass.State.M(State._default.Associativity$C), 
                                            $l#0_0_0#heap#0, 
                                            g#0, 
                                            b#0_0_0)): DatatypeType); 
                                    $Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                        $l#0_0_0#heap#0, 
                                        h1#0_0_0, 
                                        $Box(newState2#0_0_0))): DatatypeType)))))))), 
                    (lambda $l#0_0_0#heap#0: Heap, $l#0_0_0#s#0: Box :: $IsBox($l#0_0_0#s#0, TInt)), 
                    (lambda $l#0_0_0#heap#0: Heap, $l#0_0_0#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_0#o#0: ref :: false))))), 
                $LS($LZ)))));
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            ##m#0_1_0 := m#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_1_0, Tclass.State.M(State._default.Associativity$A), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_0;
                assume $IsGoodHeap($lambdaHeap#0_1_0);
                assume $Heap == $lambdaHeap#0_1_0 || $HeapSucc($Heap, $lambdaHeap#0_1_0);
                havoc x#0_1_0;
                if ($IsBox(x#0_1_0, State._default.Associativity$A)
                   && $IsAllocBox(x#0_1_0, State._default.Associativity$A, $lambdaHeap#0_1_0))
                {
                    $_Frame#l0_1_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_0, $o, alloc)): bool ==> false);
                    ##m#0_1_1 := $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $lambdaHeap#0_1_0, 
                        f#0, 
                        x#0_1_0)): DatatypeType;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##m#0_1_1, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_0);
                    ##f#0_1_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#0_1_1, 
                      Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                      $lambdaHeap#0_1_0);
                    assume State.__default.Bind#canCall(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $lambdaHeap#0_1_0, 
                          f#0, 
                          x#0_1_0)): DatatypeType, 
                      g#0);
                    assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $lambdaHeap#0_1_0, 
                            f#0, 
                            x#0_1_0)): DatatypeType, 
                        g#0));
                    assume {:id "id625"} lambdaResult#0_1_0
                       == State.__default.Bind(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $Heap, 
                            f#0, 
                            x#0_1_0)): DatatypeType, 
                        g#0);
                    assume State.__default.Bind#canCall(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $Heap, 
                          f#0, 
                          x#0_1_0)): DatatypeType, 
                      g#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_1_0, Tclass.State.M(State._default.Associativity$C));
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#0_1_0 := Lit(AtLayer((lambda $l#0_1_1#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_1#heap#0: Heap, $l#0_1_1#x#0: Box :: 
                      $Box(State.__default.Bind(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $l#0_1_1#heap#0, 
                              f#0, 
                              $l#0_1_1#x#0)): DatatypeType, 
                          g#0))), 
                    (lambda $l#0_1_1#heap#0: Heap, $l#0_1_1#x#0: Box :: 
                      $IsBox($l#0_1_1#x#0, State._default.Associativity$A)), 
                    (lambda $l#0_1_1#heap#0: Heap, $l#0_1_1#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_1#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_1_0, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$C)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$A, 
              State._default.Associativity$C, 
              m#0, 
              Lit(AtLayer((lambda $l#0_1_2#ly#0: LayerType :: 
                    Handle1((lambda $l#0_1_2#heap#0: Heap, $l#0_1_2#x#0: Box :: 
                        $Box(State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_2#heap#0, 
                                f#0, 
                                $l#0_1_2#x#0)): DatatypeType, 
                            g#0))), 
                      (lambda $l#0_1_2#heap#0: Heap, $l#0_1_2#x#0: Box :: 
                        $IsBox($l#0_1_2#x#0, State._default.Associativity$A)), 
                      (lambda $l#0_1_2#heap#0: Heap, $l#0_1_2#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_1_2#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$A, 
                State._default.Associativity$C, 
                m#0, 
                Lit(AtLayer((lambda $l#0_1_3#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_3#heap#0: Heap, $l#0_1_3#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_3#heap#0, 
                                  f#0, 
                                  $l#0_1_3#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_3#heap#0: Heap, $l#0_1_3#x#0: Box :: 
                          $IsBox($l#0_1_3#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_3#heap#0: Heap, $l#0_1_3#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_3#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume (forall $l#0_1_4#x#0: Box, $l#0_1_4#heap#0: Heap :: 
                $IsBox($l#0_1_4#x#0, State._default.Associativity$A)
                     && $IsGoodHeap($l#0_1_4#heap#0)
                   ==> State.__default.Bind#canCall(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#0_1_4#heap#0, 
                        f#0, 
                        $l#0_1_4#x#0)): DatatypeType, 
                    g#0))
               && State.__default.Bind#canCall(State._default.Associativity$A, 
                State._default.Associativity$C, 
                m#0, 
                Lit(AtLayer((lambda $l#0_1_5#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_5#heap#0: Heap, $l#0_1_5#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_5#heap#0, 
                                  f#0, 
                                  $l#0_1_5#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_5#heap#0: Heap, $l#0_1_5#x#0: Box :: 
                          $IsBox($l#0_1_5#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_5#heap#0: Heap, $l#0_1_5#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_5#o#0: ref :: false))))), 
                    $LS($LZ))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            ##m#0_1_6_0 := m#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_1_6_0, Tclass.State.M(State._default.Associativity$A), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_6_0;
                assume $IsGoodHeap($lambdaHeap#0_1_6_0);
                assume $Heap == $lambdaHeap#0_1_6_0 || $HeapSucc($Heap, $lambdaHeap#0_1_6_0);
                havoc x#0_1_6_0;
                if ($IsBox(x#0_1_6_0, State._default.Associativity$A)
                   && $IsAllocBox(x#0_1_6_0, State._default.Associativity$A, $lambdaHeap#0_1_6_0))
                {
                    $_Frame#l0_1_6_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_6_0, $o, alloc)): bool ==> false);
                    ##m#0_1_6_1 := $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $lambdaHeap#0_1_6_0, 
                        f#0, 
                        x#0_1_6_0)): DatatypeType;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##m#0_1_6_1, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_6_0);
                    ##f#0_1_6_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#0_1_6_1, 
                      Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                      $lambdaHeap#0_1_6_0);
                    assume State.__default.Bind#canCall(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $lambdaHeap#0_1_6_0, 
                          f#0, 
                          x#0_1_6_0)): DatatypeType, 
                      g#0);
                    assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $lambdaHeap#0_1_6_0, 
                            f#0, 
                            x#0_1_6_0)): DatatypeType, 
                        g#0));
                    assume {:id "id622"} lambdaResult#0_1_6_0
                       == State.__default.Bind(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $Heap, 
                            f#0, 
                            x#0_1_6_0)): DatatypeType, 
                        g#0);
                    assume State.__default.Bind#canCall(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $Heap, 
                          f#0, 
                          x#0_1_6_0)): DatatypeType, 
                      g#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_1_6_0, Tclass.State.M(State._default.Associativity$C));
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#0_1_6_0 := Lit(AtLayer((lambda $l#0_1_6_1#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_6_1#heap#0: Heap, $l#0_1_6_1#x#0: Box :: 
                      $Box(State.__default.Bind(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $l#0_1_6_1#heap#0, 
                              f#0, 
                              $l#0_1_6_1#x#0)): DatatypeType, 
                          g#0))), 
                    (lambda $l#0_1_6_1#heap#0: Heap, $l#0_1_6_1#x#0: Box :: 
                      $IsBox($l#0_1_6_1#x#0, State._default.Associativity$A)), 
                    (lambda $l#0_1_6_1#heap#0: Heap, $l#0_1_6_1#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_6_1#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_1_6_0, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$C)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$A, 
              State._default.Associativity$C, 
              m#0, 
              Lit(AtLayer((lambda $l#0_1_6_2#ly#0: LayerType :: 
                    Handle1((lambda $l#0_1_6_2#heap#0: Heap, $l#0_1_6_2#x#0: Box :: 
                        $Box(State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_6_2#heap#0, 
                                f#0, 
                                $l#0_1_6_2#x#0)): DatatypeType, 
                            g#0))), 
                      (lambda $l#0_1_6_2#heap#0: Heap, $l#0_1_6_2#x#0: Box :: 
                        $IsBox($l#0_1_6_2#x#0, State._default.Associativity$A)), 
                      (lambda $l#0_1_6_2#heap#0: Heap, $l#0_1_6_2#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_1_6_2#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$A, 
                State._default.Associativity$C, 
                m#0, 
                Lit(AtLayer((lambda $l#0_1_6_3#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_6_3#heap#0: Heap, $l#0_1_6_3#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_6_3#heap#0, 
                                  f#0, 
                                  $l#0_1_6_3#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_6_3#heap#0: Heap, $l#0_1_6_3#x#0: Box :: 
                          $IsBox($l#0_1_6_3#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_6_3#heap#0: Heap, $l#0_1_6_3#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_6_3#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume (forall $l#0_1_6_4#x#0: Box, $l#0_1_6_4#heap#0: Heap :: 
                $IsBox($l#0_1_6_4#x#0, State._default.Associativity$A)
                     && $IsGoodHeap($l#0_1_6_4#heap#0)
                   ==> State.__default.Bind#canCall(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#0_1_6_4#heap#0, 
                        f#0, 
                        $l#0_1_6_4#x#0)): DatatypeType, 
                    g#0))
               && State.__default.Bind#canCall(State._default.Associativity$A, 
                State._default.Associativity$C, 
                m#0, 
                Lit(AtLayer((lambda $l#0_1_6_5#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_6_5#heap#0: Heap, $l#0_1_6_5#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_6_5#heap#0, 
                                  f#0, 
                                  $l#0_1_6_5#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_6_5#heap#0: Heap, $l#0_1_6_5#x#0: Box :: 
                          $IsBox($l#0_1_6_5#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_6_5#heap#0: Heap, $l#0_1_6_5#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_6_5#o#0: ref :: false))))), 
                    $LS($LZ))));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            ##m#0_1_6_2 := #State.M.State(h#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_1_6_2, Tclass.State.M(State._default.Associativity$A), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_6_1;
                assume $IsGoodHeap($lambdaHeap#0_1_6_1);
                assume $Heap == $lambdaHeap#0_1_6_1 || $HeapSucc($Heap, $lambdaHeap#0_1_6_1);
                havoc x#0_1_6_1;
                if ($IsBox(x#0_1_6_1, State._default.Associativity$A)
                   && $IsAllocBox(x#0_1_6_1, State._default.Associativity$A, $lambdaHeap#0_1_6_1))
                {
                    $_Frame#l0_1_6_1 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_6_1, $o, alloc)): bool ==> false);
                    ##m#0_1_6_3 := $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $lambdaHeap#0_1_6_1, 
                        f#0, 
                        x#0_1_6_1)): DatatypeType;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##m#0_1_6_3, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_6_1);
                    ##f#0_1_6_3 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#0_1_6_3, 
                      Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                      $lambdaHeap#0_1_6_1);
                    assume State.__default.Bind#canCall(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $lambdaHeap#0_1_6_1, 
                          f#0, 
                          x#0_1_6_1)): DatatypeType, 
                      g#0);
                    assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $lambdaHeap#0_1_6_1, 
                            f#0, 
                            x#0_1_6_1)): DatatypeType, 
                        g#0));
                    assume {:id "id623"} lambdaResult#0_1_6_1
                       == State.__default.Bind(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $Heap, 
                            f#0, 
                            x#0_1_6_1)): DatatypeType, 
                        g#0);
                    assume State.__default.Bind#canCall(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $Heap, 
                          f#0, 
                          x#0_1_6_1)): DatatypeType, 
                      g#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_1_6_1, Tclass.State.M(State._default.Associativity$C));
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#0_1_6_2 := Lit(AtLayer((lambda $l#0_1_6_7#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_6_7#heap#0: Heap, $l#0_1_6_7#x#0: Box :: 
                      $Box(State.__default.Bind(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $l#0_1_6_7#heap#0, 
                              f#0, 
                              $l#0_1_6_7#x#0)): DatatypeType, 
                          g#0))), 
                    (lambda $l#0_1_6_7#heap#0: Heap, $l#0_1_6_7#x#0: Box :: 
                      $IsBox($l#0_1_6_7#x#0, State._default.Associativity$A)), 
                    (lambda $l#0_1_6_7#heap#0: Heap, $l#0_1_6_7#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_6_7#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_1_6_2, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$C)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$A, 
              State._default.Associativity$C, 
              #State.M.State(h#0_0), 
              Lit(AtLayer((lambda $l#0_1_6_8#ly#0: LayerType :: 
                    Handle1((lambda $l#0_1_6_8#heap#0: Heap, $l#0_1_6_8#x#0: Box :: 
                        $Box(State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_6_8#heap#0, 
                                f#0, 
                                $l#0_1_6_8#x#0)): DatatypeType, 
                            g#0))), 
                      (lambda $l#0_1_6_8#heap#0: Heap, $l#0_1_6_8#x#0: Box :: 
                        $IsBox($l#0_1_6_8#x#0, State._default.Associativity$A)), 
                      (lambda $l#0_1_6_8#heap#0: Heap, $l#0_1_6_8#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_1_6_8#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$A, 
                State._default.Associativity$C, 
                #State.M.State(h#0_0), 
                Lit(AtLayer((lambda $l#0_1_6_9#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_6_9#heap#0: Heap, $l#0_1_6_9#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_6_9#heap#0, 
                                  f#0, 
                                  $l#0_1_6_9#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_6_9#heap#0: Heap, $l#0_1_6_9#x#0: Box :: 
                          $IsBox($l#0_1_6_9#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_6_9#heap#0: Heap, $l#0_1_6_9#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_6_9#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume (forall $l#0_1_6_10#x#0: Box, $l#0_1_6_10#heap#0: Heap :: 
                $IsBox($l#0_1_6_10#x#0, State._default.Associativity$A)
                     && $IsGoodHeap($l#0_1_6_10#heap#0)
                   ==> State.__default.Bind#canCall(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#0_1_6_10#heap#0, 
                        f#0, 
                        $l#0_1_6_10#x#0)): DatatypeType, 
                    g#0))
               && State.__default.Bind#canCall(State._default.Associativity$A, 
                State._default.Associativity$C, 
                #State.M.State(h#0_0), 
                Lit(AtLayer((lambda $l#0_1_6_11#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_6_11#heap#0: Heap, $l#0_1_6_11#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_6_11#heap#0, 
                                  f#0, 
                                  $l#0_1_6_11#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_6_11#heap#0: Heap, $l#0_1_6_11#x#0: Box :: 
                          $IsBox($l#0_1_6_11#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_6_11#heap#0: Heap, $l#0_1_6_11#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_6_11#o#0: ref :: false))))), 
                    $LS($LZ))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            assert {:id "id624"} {:subsumption 0} State.M#Equal(State.__default.Bind(State._default.Associativity$A, 
                State._default.Associativity$C, 
                m#0, 
                Lit(AtLayer((lambda $l#0_1_6_14#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_6_14#heap#0: Heap, $l#0_1_6_14#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_6_14#heap#0, 
                                  f#0, 
                                  $l#0_1_6_14#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_6_14#heap#0: Heap, $l#0_1_6_14#x#0: Box :: 
                          $IsBox($l#0_1_6_14#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_6_14#heap#0: Heap, $l#0_1_6_14#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_6_14#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              State.__default.Bind(State._default.Associativity$A, 
                State._default.Associativity$C, 
                #State.M.State(h#0_0), 
                Lit(AtLayer((lambda $l#0_1_6_15#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_6_15#heap#0: Heap, $l#0_1_6_15#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_6_15#heap#0, 
                                  f#0, 
                                  $l#0_1_6_15#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_6_15#heap#0: Heap, $l#0_1_6_15#x#0: Box :: 
                          $IsBox($l#0_1_6_15#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_6_15#heap#0: Heap, $l#0_1_6_15#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_6_15#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            ##m#0_1_5_0 := #State.M.State(h#0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##m#0_1_5_0, Tclass.State.M(State._default.Associativity$A), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_5_0;
                assume $IsGoodHeap($lambdaHeap#0_1_5_0);
                assume $Heap == $lambdaHeap#0_1_5_0 || $HeapSucc($Heap, $lambdaHeap#0_1_5_0);
                havoc x#0_1_5_0;
                if ($IsBox(x#0_1_5_0, State._default.Associativity$A)
                   && $IsAllocBox(x#0_1_5_0, State._default.Associativity$A, $lambdaHeap#0_1_5_0))
                {
                    $_Frame#l0_1_5_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_5_0, $o, alloc)): bool ==> false);
                    ##m#0_1_5_1 := $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $lambdaHeap#0_1_5_0, 
                        f#0, 
                        x#0_1_5_0)): DatatypeType;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##m#0_1_5_1, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_5_0);
                    ##f#0_1_5_1 := g#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#0_1_5_1, 
                      Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                      $lambdaHeap#0_1_5_0);
                    assume State.__default.Bind#canCall(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $lambdaHeap#0_1_5_0, 
                          f#0, 
                          x#0_1_5_0)): DatatypeType, 
                      g#0);
                    assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $lambdaHeap#0_1_5_0, 
                            f#0, 
                            x#0_1_5_0)): DatatypeType, 
                        g#0));
                    assume {:id "id612"} lambdaResult#0_1_5_0
                       == State.__default.Bind(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $Heap, 
                            f#0, 
                            x#0_1_5_0)): DatatypeType, 
                        g#0);
                    assume State.__default.Bind#canCall(State._default.Associativity$B, 
                      State._default.Associativity$C, 
                      $Unbox(Apply1(State._default.Associativity$A, 
                          Tclass.State.M(State._default.Associativity$B), 
                          $Heap, 
                          f#0, 
                          x#0_1_5_0)): DatatypeType, 
                      g#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_1_5_0, Tclass.State.M(State._default.Associativity$C));
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#0_1_5_0 := Lit(AtLayer((lambda $l#0_1_5_1#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_5_1#heap#0: Heap, $l#0_1_5_1#x#0: Box :: 
                      $Box(State.__default.Bind(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $l#0_1_5_1#heap#0, 
                              f#0, 
                              $l#0_1_5_1#x#0)): DatatypeType, 
                          g#0))), 
                    (lambda $l#0_1_5_1#heap#0: Heap, $l#0_1_5_1#x#0: Box :: 
                      $IsBox($l#0_1_5_1#x#0, State._default.Associativity$A)), 
                    (lambda $l#0_1_5_1#heap#0: Heap, $l#0_1_5_1#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_5_1#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_1_5_0, 
              Tclass._System.___hTotalFunc1(State._default.Associativity$A, Tclass.State.M(State._default.Associativity$C)), 
              $Heap);
            assume State.__default.Bind#canCall(State._default.Associativity$A, 
              State._default.Associativity$C, 
              #State.M.State(h#0_0), 
              Lit(AtLayer((lambda $l#0_1_5_2#ly#0: LayerType :: 
                    Handle1((lambda $l#0_1_5_2#heap#0: Heap, $l#0_1_5_2#x#0: Box :: 
                        $Box(State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_5_2#heap#0, 
                                f#0, 
                                $l#0_1_5_2#x#0)): DatatypeType, 
                            g#0))), 
                      (lambda $l#0_1_5_2#heap#0: Heap, $l#0_1_5_2#x#0: Box :: 
                        $IsBox($l#0_1_5_2#x#0, State._default.Associativity$A)), 
                      (lambda $l#0_1_5_2#heap#0: Heap, $l#0_1_5_2#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_1_5_2#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume State.M.State_q(State.__default.Bind(State._default.Associativity$A, 
                State._default.Associativity$C, 
                #State.M.State(h#0_0), 
                Lit(AtLayer((lambda $l#0_1_5_3#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_5_3#heap#0: Heap, $l#0_1_5_3#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_5_3#heap#0, 
                                  f#0, 
                                  $l#0_1_5_3#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_5_3#heap#0: Heap, $l#0_1_5_3#x#0: Box :: 
                          $IsBox($l#0_1_5_3#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_5_3#heap#0: Heap, $l#0_1_5_3#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_5_3#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume (forall $l#0_1_5_4#x#0: Box, $l#0_1_5_4#heap#0: Heap :: 
                $IsBox($l#0_1_5_4#x#0, State._default.Associativity$A)
                     && $IsGoodHeap($l#0_1_5_4#heap#0)
                   ==> State.__default.Bind#canCall(State._default.Associativity$B, 
                    State._default.Associativity$C, 
                    $Unbox(Apply1(State._default.Associativity$A, 
                        Tclass.State.M(State._default.Associativity$B), 
                        $l#0_1_5_4#heap#0, 
                        f#0, 
                        $l#0_1_5_4#x#0)): DatatypeType, 
                    g#0))
               && State.__default.Bind#canCall(State._default.Associativity$A, 
                State._default.Associativity$C, 
                #State.M.State(h#0_0), 
                Lit(AtLayer((lambda $l#0_1_5_5#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_5_5#heap#0: Heap, $l#0_1_5_5#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_5_5#heap#0, 
                                  f#0, 
                                  $l#0_1_5_5#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_5_5#heap#0: Heap, $l#0_1_5_5#x#0: Box :: 
                          $IsBox($l#0_1_5_5#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_5_5#heap#0: Heap, $l#0_1_5_5#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_5_5#o#0: ref :: false))))), 
                    $LS($LZ))));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_5_1;
                assume $IsGoodHeap($lambdaHeap#0_1_5_1);
                assume $Heap == $lambdaHeap#0_1_5_1 || $HeapSucc($Heap, $lambdaHeap#0_1_5_1);
                havoc s#0_1_5_0;
                if (true)
                {
                    $_Frame#l0_1_5_1 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_5_1, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_5_1, 
                          h#0_0, 
                          $Box(s#0_1_5_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#95#0_1_5_0, $Box(_mcc#96#0_1_5_0)))
                    {
                        assume $IsBox(_mcc#95#0_1_5_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_5_0;
                        assume {:id "id613"} let#0_1_5_0#0#0 == _mcc#96#0_1_5_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_5_0#0#0, TInt);
                        assume {:id "id614"} newState#Z#0_1_5_0 == let#0_1_5_0#0#0;
                        havoc a#Z#0_1_5_0;
                        assume {:id "id615"} let#0_1_5_1#0#0 == _mcc#95#0_1_5_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_5_1#0#0, State._default.Associativity$A);
                        assume {:id "id616"} a#Z#0_1_5_0 == let#0_1_5_1#0#0;
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_1_5_2;
                            assume $IsGoodHeap($lambdaHeap#0_1_5_2);
                            assume $lambdaHeap#0_1_5_1 == $lambdaHeap#0_1_5_2
                               || $HeapSucc($lambdaHeap#0_1_5_1, $lambdaHeap#0_1_5_2);
                            havoc x#0_1_5_1;
                            if ($IsBox(x#0_1_5_1, State._default.Associativity$A)
                               && $IsAllocBox(x#0_1_5_1, State._default.Associativity$A, $lambdaHeap#0_1_5_2))
                            {
                                $_Frame#l0_1_5_2 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_1_5_2, $o, alloc)): bool ==> false);
                                ##m#0_1_5_2 := $Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_1_5_2, 
                                    f#0, 
                                    x#0_1_5_1)): DatatypeType;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##m#0_1_5_2, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_5_2);
                                ##f#0_1_5_2 := g#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##f#0_1_5_2, 
                                  Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                                  $lambdaHeap#0_1_5_2);
                                assume State.__default.Bind#canCall(State._default.Associativity$B, 
                                  State._default.Associativity$C, 
                                  $Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $lambdaHeap#0_1_5_2, 
                                      f#0, 
                                      x#0_1_5_1)): DatatypeType, 
                                  g#0);
                                assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                                    State._default.Associativity$C, 
                                    $Unbox(Apply1(State._default.Associativity$A, 
                                        Tclass.State.M(State._default.Associativity$B), 
                                        $lambdaHeap#0_1_5_2, 
                                        f#0, 
                                        x#0_1_5_1)): DatatypeType, 
                                    g#0));
                                assume {:id "id617"} lambdaResult#0_1_5_2
                                   == State.__default.Bind(State._default.Associativity$B, 
                                    State._default.Associativity$C, 
                                    $Unbox(Apply1(State._default.Associativity$A, 
                                        Tclass.State.M(State._default.Associativity$B), 
                                        $lambdaHeap#0_1_5_1, 
                                        f#0, 
                                        x#0_1_5_1)): DatatypeType, 
                                    g#0);
                                assume State.__default.Bind#canCall(State._default.Associativity$B, 
                                  State._default.Associativity$C, 
                                  $Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $lambdaHeap#0_1_5_1, 
                                      f#0, 
                                      x#0_1_5_1)): DatatypeType, 
                                  g#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_1_5_2, Tclass.State.M(State._default.Associativity$C));
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_1_5_1, 
                              Lit(AtLayer((lambda $l#0_1_5_7#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_1_5_7#heap#0: Heap, $l#0_1_5_7#x#0: Box :: 
                                        $Box(State.__default.Bind(State._default.Associativity$B, 
                                            State._default.Associativity$C, 
                                            $Unbox(Apply1(State._default.Associativity$A, 
                                                Tclass.State.M(State._default.Associativity$B), 
                                                $l#0_1_5_7#heap#0, 
                                                f#0, 
                                                $l#0_1_5_7#x#0)): DatatypeType, 
                                            g#0))), 
                                      (lambda $l#0_1_5_7#heap#0: Heap, $l#0_1_5_7#x#0: Box :: 
                                        $IsBox($l#0_1_5_7#x#0, State._default.Associativity$A)), 
                                      (lambda $l#0_1_5_7#heap#0: Heap, $l#0_1_5_7#x#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_1_5_7#o#0: ref :: false))))), 
                                  $LS($LZ))), 
                              a#Z#0_1_5_0)): DatatypeType
                           == #State.M.State(_mcc#97#0_1_5_0))
                        {
                            assume $Is(_mcc#97#0_1_5_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g2#Z#0_1_5_0;
                            assume {:id "id618"} let#0_1_5_2#0#0 == _mcc#97#0_1_5_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_5_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id619"} g2#Z#0_1_5_0 == let#0_1_5_2#0#0;
                            assume {:id "id620"} lambdaResult#0_1_5_1
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g2#Z#0_1_5_0, 
                                  $Box(newState#Z#0_1_5_0))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_5_1, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_5_10#s#0: int, $l#0_1_5_10#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_5_10#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_5_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_5_10#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_5_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_5_10#s#0))): DatatypeType)
                   && (var a#0_1_5_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_5_10#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_5_10#s#0))): DatatypeType); 
                    (forall $l#0_1_5_11#x#0: Box, $l#0_1_5_11#heap#0: Heap :: 
                        $IsBox($l#0_1_5_11#x#0, State._default.Associativity$A)
                             && $IsGoodHeap($l#0_1_5_11#heap#0)
                           ==> State.__default.Bind#canCall(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_5_11#heap#0, 
                                f#0, 
                                $l#0_1_5_11#x#0)): DatatypeType, 
                            g#0))
                       && State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$C), 
                            $l#0_1_5_10#heap#0, 
                            Lit(AtLayer((lambda $l#0_1_5_12#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_1_5_12#heap#0: Heap, $l#0_1_5_12#x#0: Box :: 
                                      $Box(State.__default.Bind(State._default.Associativity$B, 
                                          State._default.Associativity$C, 
                                          $Unbox(Apply1(State._default.Associativity$A, 
                                              Tclass.State.M(State._default.Associativity$B), 
                                              $l#0_1_5_12#heap#0, 
                                              f#0, 
                                              $l#0_1_5_12#x#0)): DatatypeType, 
                                          g#0))), 
                                    (lambda $l#0_1_5_12#heap#0: Heap, $l#0_1_5_12#x#0: Box :: 
                                      $IsBox($l#0_1_5_12#x#0, State._default.Associativity$A)), 
                                    (lambda $l#0_1_5_12#heap#0: Heap, $l#0_1_5_12#x#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_1_5_12#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            a#0_1_5_1)): DatatypeType)));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            assert {:id "id621"} {:subsumption 0} State.M#Equal(State.__default.Bind(State._default.Associativity$A, 
                State._default.Associativity$C, 
                #State.M.State(h#0_0), 
                Lit(AtLayer((lambda $l#0_1_5_17#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_5_17#heap#0: Heap, $l#0_1_5_17#x#0: Box :: 
                          $Box(State.__default.Bind(State._default.Associativity$B, 
                              State._default.Associativity$C, 
                              $Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_5_17#heap#0, 
                                  f#0, 
                                  $l#0_1_5_17#x#0)): DatatypeType, 
                              g#0))), 
                        (lambda $l#0_1_5_17#heap#0: Heap, $l#0_1_5_17#x#0: Box :: 
                          $IsBox($l#0_1_5_17#x#0, State._default.Associativity$A)), 
                        (lambda $l#0_1_5_17#heap#0: Heap, $l#0_1_5_17#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_5_17#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_1_5_18#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_5_18#heap#0: Heap, $l#0_1_5_18#s#0: Box :: 
                          $Box((var newState#0_1_5_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_5_18#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_5_18#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_5_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_5_18#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_5_18#s#0): int))): DatatypeType); 
                                (var g2#0_1_5_3 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_1_5_18#heap#0, 
                                          Lit(AtLayer((lambda $l#0_1_5_19#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_1_5_19#heap#0: Heap, $l#0_1_5_19#x#0: Box :: 
                                                    $Box(State.__default.Bind(State._default.Associativity$B, 
                                                        State._default.Associativity$C, 
                                                        $Unbox(Apply1(State._default.Associativity$A, 
                                                            Tclass.State.M(State._default.Associativity$B), 
                                                            $l#0_1_5_19#heap#0, 
                                                            f#0, 
                                                            $l#0_1_5_19#x#0)): DatatypeType, 
                                                        g#0))), 
                                                  (lambda $l#0_1_5_19#heap#0: Heap, $l#0_1_5_19#x#0: Box :: 
                                                    $IsBox($l#0_1_5_19#x#0, State._default.Associativity$A)), 
                                                  (lambda $l#0_1_5_19#heap#0: Heap, $l#0_1_5_19#x#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_1_5_19#o#0: ref :: false))))), 
                                              $l#0_1_5_18#ly#0)), 
                                          a#0_1_5_3)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_1_5_18#heap#0, 
                                      g2#0_1_5_3, 
                                      $Box(newState#0_1_5_3))): DatatypeType))))), 
                        (lambda $l#0_1_5_18#heap#0: Heap, $l#0_1_5_18#s#0: Box :: 
                          $IsBox($l#0_1_5_18#s#0, TInt)), 
                        (lambda $l#0_1_5_18#heap#0: Heap, $l#0_1_5_18#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_5_18#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_4_0;
                assume $IsGoodHeap($lambdaHeap#0_1_4_0);
                assume $Heap == $lambdaHeap#0_1_4_0 || $HeapSucc($Heap, $lambdaHeap#0_1_4_0);
                havoc s#0_1_4_0;
                if (true)
                {
                    $_Frame#l0_1_4_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_4_0, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_4_0, 
                          h#0_0, 
                          $Box(s#0_1_4_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#98#0_1_4_0, $Box(_mcc#99#0_1_4_0)))
                    {
                        assume $IsBox(_mcc#98#0_1_4_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_4_0;
                        assume {:id "id580"} let#0_1_4_0#0#0 == _mcc#99#0_1_4_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_4_0#0#0, TInt);
                        assume {:id "id581"} newState#Z#0_1_4_0 == let#0_1_4_0#0#0;
                        havoc a#Z#0_1_4_0;
                        assume {:id "id582"} let#0_1_4_1#0#0 == _mcc#98#0_1_4_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_4_1#0#0, State._default.Associativity$A);
                        assume {:id "id583"} a#Z#0_1_4_0 == let#0_1_4_1#0#0;
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_1_4_1;
                            assume $IsGoodHeap($lambdaHeap#0_1_4_1);
                            assume $lambdaHeap#0_1_4_0 == $lambdaHeap#0_1_4_1
                               || $HeapSucc($lambdaHeap#0_1_4_0, $lambdaHeap#0_1_4_1);
                            havoc x#0_1_4_0;
                            if ($IsBox(x#0_1_4_0, State._default.Associativity$A)
                               && $IsAllocBox(x#0_1_4_0, State._default.Associativity$A, $lambdaHeap#0_1_4_1))
                            {
                                $_Frame#l0_1_4_1 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_1_4_1, $o, alloc)): bool ==> false);
                                ##m#0_1_4_0 := $Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_1_4_1, 
                                    f#0, 
                                    x#0_1_4_0)): DatatypeType;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##m#0_1_4_0, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_4_1);
                                ##f#0_1_4_0 := g#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##f#0_1_4_0, 
                                  Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                                  $lambdaHeap#0_1_4_1);
                                assume State.__default.Bind#canCall(State._default.Associativity$B, 
                                  State._default.Associativity$C, 
                                  $Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $lambdaHeap#0_1_4_1, 
                                      f#0, 
                                      x#0_1_4_0)): DatatypeType, 
                                  g#0);
                                assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                                    State._default.Associativity$C, 
                                    $Unbox(Apply1(State._default.Associativity$A, 
                                        Tclass.State.M(State._default.Associativity$B), 
                                        $lambdaHeap#0_1_4_1, 
                                        f#0, 
                                        x#0_1_4_0)): DatatypeType, 
                                    g#0));
                                assume {:id "id584"} lambdaResult#0_1_4_1
                                   == State.__default.Bind(State._default.Associativity$B, 
                                    State._default.Associativity$C, 
                                    $Unbox(Apply1(State._default.Associativity$A, 
                                        Tclass.State.M(State._default.Associativity$B), 
                                        $lambdaHeap#0_1_4_0, 
                                        f#0, 
                                        x#0_1_4_0)): DatatypeType, 
                                    g#0);
                                assume State.__default.Bind#canCall(State._default.Associativity$B, 
                                  State._default.Associativity$C, 
                                  $Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $lambdaHeap#0_1_4_0, 
                                      f#0, 
                                      x#0_1_4_0)): DatatypeType, 
                                  g#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_1_4_1, Tclass.State.M(State._default.Associativity$C));
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_1_4_0, 
                              Lit(AtLayer((lambda $l#0_1_4_1#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_1_4_1#heap#0: Heap, $l#0_1_4_1#x#0: Box :: 
                                        $Box(State.__default.Bind(State._default.Associativity$B, 
                                            State._default.Associativity$C, 
                                            $Unbox(Apply1(State._default.Associativity$A, 
                                                Tclass.State.M(State._default.Associativity$B), 
                                                $l#0_1_4_1#heap#0, 
                                                f#0, 
                                                $l#0_1_4_1#x#0)): DatatypeType, 
                                            g#0))), 
                                      (lambda $l#0_1_4_1#heap#0: Heap, $l#0_1_4_1#x#0: Box :: 
                                        $IsBox($l#0_1_4_1#x#0, State._default.Associativity$A)), 
                                      (lambda $l#0_1_4_1#heap#0: Heap, $l#0_1_4_1#x#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_1_4_1#o#0: ref :: false))))), 
                                  $LS($LZ))), 
                              a#Z#0_1_4_0)): DatatypeType
                           == #State.M.State(_mcc#100#0_1_4_0))
                        {
                            assume $Is(_mcc#100#0_1_4_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g2#Z#0_1_4_0;
                            assume {:id "id585"} let#0_1_4_2#0#0 == _mcc#100#0_1_4_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_4_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id586"} g2#Z#0_1_4_0 == let#0_1_4_2#0#0;
                            assume {:id "id587"} lambdaResult#0_1_4_0
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g2#Z#0_1_4_0, 
                                  $Box(newState#Z#0_1_4_0))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_4_0, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_4_4#s#0: int, $l#0_1_4_4#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_4_4#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_4_4#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_4_4#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_4_4#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_4_4#s#0))): DatatypeType)
                   && (var a#0_1_4_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_4_4#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_4_4#s#0))): DatatypeType); 
                    (forall $l#0_1_4_5#x#0: Box, $l#0_1_4_5#heap#0: Heap :: 
                        $IsBox($l#0_1_4_5#x#0, State._default.Associativity$A)
                             && $IsGoodHeap($l#0_1_4_5#heap#0)
                           ==> State.__default.Bind#canCall(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_4_5#heap#0, 
                                f#0, 
                                $l#0_1_4_5#x#0)): DatatypeType, 
                            g#0))
                       && State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$C), 
                            $l#0_1_4_4#heap#0, 
                            Lit(AtLayer((lambda $l#0_1_4_6#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_1_4_6#heap#0: Heap, $l#0_1_4_6#x#0: Box :: 
                                      $Box(State.__default.Bind(State._default.Associativity$B, 
                                          State._default.Associativity$C, 
                                          $Unbox(Apply1(State._default.Associativity$A, 
                                              Tclass.State.M(State._default.Associativity$B), 
                                              $l#0_1_4_6#heap#0, 
                                              f#0, 
                                              $l#0_1_4_6#x#0)): DatatypeType, 
                                          g#0))), 
                                    (lambda $l#0_1_4_6#heap#0: Heap, $l#0_1_4_6#x#0: Box :: 
                                      $IsBox($l#0_1_4_6#x#0, State._default.Associativity$A)), 
                                    (lambda $l#0_1_4_6#heap#0: Heap, $l#0_1_4_6#x#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_1_4_6#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            a#0_1_4_1)): DatatypeType)));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(187,18)
            // TrCallStmt: Before ProcessCallStmt
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_4_2;
                assume $IsGoodHeap($lambdaHeap#0_1_4_2);
                assume $Heap == $lambdaHeap#0_1_4_2 || $HeapSucc($Heap, $lambdaHeap#0_1_4_2);
                havoc s#0_1_4_1;
                if (true)
                {
                    $_Frame#l0_1_4_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_4_2, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_4_2, 
                          h#0_0, 
                          $Box(s#0_1_4_1))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#171#0_1_4_0, $Box(_mcc#172#0_1_4_0)))
                    {
                        assume $IsBox(_mcc#171#0_1_4_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_4_1;
                        assume {:id "id588"} let#0_1_4_3#0#0 == _mcc#172#0_1_4_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_4_3#0#0, TInt);
                        assume {:id "id589"} newState#Z#0_1_4_1 == let#0_1_4_3#0#0;
                        havoc a#Z#0_1_4_1;
                        assume {:id "id590"} let#0_1_4_4#0#0 == _mcc#171#0_1_4_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_4_4#0#0, State._default.Associativity$A);
                        assume {:id "id591"} a#Z#0_1_4_1 == let#0_1_4_4#0#0;
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_1_4_3;
                            assume $IsGoodHeap($lambdaHeap#0_1_4_3);
                            assume $lambdaHeap#0_1_4_2 == $lambdaHeap#0_1_4_3
                               || $HeapSucc($lambdaHeap#0_1_4_2, $lambdaHeap#0_1_4_3);
                            havoc x#0_1_4_1;
                            if ($IsBox(x#0_1_4_1, State._default.Associativity$A)
                               && $IsAllocBox(x#0_1_4_1, State._default.Associativity$A, $lambdaHeap#0_1_4_3))
                            {
                                $_Frame#l0_1_4_3 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_1_4_3, $o, alloc)): bool ==> false);
                                ##m#0_1_4_1 := $Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_1_4_3, 
                                    f#0, 
                                    x#0_1_4_1)): DatatypeType;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##m#0_1_4_1, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_4_3);
                                ##f#0_1_4_1 := g#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##f#0_1_4_1, 
                                  Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                                  $lambdaHeap#0_1_4_3);
                                assume State.__default.Bind#canCall(State._default.Associativity$B, 
                                  State._default.Associativity$C, 
                                  $Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $lambdaHeap#0_1_4_3, 
                                      f#0, 
                                      x#0_1_4_1)): DatatypeType, 
                                  g#0);
                                assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                                    State._default.Associativity$C, 
                                    $Unbox(Apply1(State._default.Associativity$A, 
                                        Tclass.State.M(State._default.Associativity$B), 
                                        $lambdaHeap#0_1_4_3, 
                                        f#0, 
                                        x#0_1_4_1)): DatatypeType, 
                                    g#0));
                                assume {:id "id592"} lambdaResult#0_1_4_3
                                   == State.__default.Bind(State._default.Associativity$B, 
                                    State._default.Associativity$C, 
                                    $Unbox(Apply1(State._default.Associativity$A, 
                                        Tclass.State.M(State._default.Associativity$B), 
                                        $lambdaHeap#0_1_4_2, 
                                        f#0, 
                                        x#0_1_4_1)): DatatypeType, 
                                    g#0);
                                assume State.__default.Bind#canCall(State._default.Associativity$B, 
                                  State._default.Associativity$C, 
                                  $Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $lambdaHeap#0_1_4_2, 
                                      f#0, 
                                      x#0_1_4_1)): DatatypeType, 
                                  g#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_1_4_3, Tclass.State.M(State._default.Associativity$C));
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$C), 
                              $lambdaHeap#0_1_4_2, 
                              Lit(AtLayer((lambda $l#0_1_4_9#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_1_4_9#heap#0: Heap, $l#0_1_4_9#x#0: Box :: 
                                        $Box(State.__default.Bind(State._default.Associativity$B, 
                                            State._default.Associativity$C, 
                                            $Unbox(Apply1(State._default.Associativity$A, 
                                                Tclass.State.M(State._default.Associativity$B), 
                                                $l#0_1_4_9#heap#0, 
                                                f#0, 
                                                $l#0_1_4_9#x#0)): DatatypeType, 
                                            g#0))), 
                                      (lambda $l#0_1_4_9#heap#0: Heap, $l#0_1_4_9#x#0: Box :: 
                                        $IsBox($l#0_1_4_9#x#0, State._default.Associativity$A)), 
                                      (lambda $l#0_1_4_9#heap#0: Heap, $l#0_1_4_9#x#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_1_4_9#o#0: ref :: false))))), 
                                  $LS($LZ))), 
                              a#Z#0_1_4_1)): DatatypeType
                           == #State.M.State(_mcc#173#0_1_4_0))
                        {
                            assume $Is(_mcc#173#0_1_4_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g2#Z#0_1_4_1;
                            assume {:id "id593"} let#0_1_4_5#0#0 == _mcc#173#0_1_4_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_4_5#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id594"} g2#Z#0_1_4_1 == let#0_1_4_5#0#0;
                            assume {:id "id595"} lambdaResult#0_1_4_2
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g2#Z#0_1_4_1, 
                                  $Box(newState#Z#0_1_4_1))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_4_2, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_4_10#s#0: int, $l#0_1_4_10#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_4_10#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_4_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_4_10#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_4_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_4_10#s#0))): DatatypeType)
                   && (var a#0_1_4_2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_4_10#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_4_10#s#0))): DatatypeType); 
                    (forall $l#0_1_4_11#x#0: Box, $l#0_1_4_11#heap#0: Heap :: 
                        $IsBox($l#0_1_4_11#x#0, State._default.Associativity$A)
                             && $IsGoodHeap($l#0_1_4_11#heap#0)
                           ==> State.__default.Bind#canCall(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_4_11#heap#0, 
                                f#0, 
                                $l#0_1_4_11#x#0)): DatatypeType, 
                            g#0))
                       && State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$C), 
                            $l#0_1_4_10#heap#0, 
                            Lit(AtLayer((lambda $l#0_1_4_12#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_1_4_12#heap#0: Heap, $l#0_1_4_12#x#0: Box :: 
                                      $Box(State.__default.Bind(State._default.Associativity$B, 
                                          State._default.Associativity$C, 
                                          $Unbox(Apply1(State._default.Associativity$A, 
                                              Tclass.State.M(State._default.Associativity$B), 
                                              $l#0_1_4_12#heap#0, 
                                              f#0, 
                                              $l#0_1_4_12#x#0)): DatatypeType, 
                                          g#0))), 
                                    (lambda $l#0_1_4_12#heap#0: Heap, $l#0_1_4_12#x#0: Box :: 
                                      $IsBox($l#0_1_4_12#x#0, State._default.Associativity$A)), 
                                    (lambda $l#0_1_4_12#heap#0: Heap, $l#0_1_4_12#x#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_1_4_12#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            a#0_1_4_2)): DatatypeType)));
            // ProcessCallStmt: CheckSubrange
            f##0_1_4_0 := Lit(AtLayer((lambda $l#0_1_4_14#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_4_14#heap#0: Heap, $l#0_1_4_14#s#0: Box :: 
                      $Box((var newState#0_1_4_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_4_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_4_14#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_4_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_4_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_4_14#s#0): int))): DatatypeType); 
                            (var g2#0_1_4_3 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_4_14#heap#0, 
                                      Lit(AtLayer((lambda $l#0_1_4_15#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_1_4_15#heap#0: Heap, $l#0_1_4_15#x#0: Box :: 
                                                $Box(State.__default.Bind(State._default.Associativity$B, 
                                                    State._default.Associativity$C, 
                                                    $Unbox(Apply1(State._default.Associativity$A, 
                                                        Tclass.State.M(State._default.Associativity$B), 
                                                        $l#0_1_4_15#heap#0, 
                                                        f#0, 
                                                        $l#0_1_4_15#x#0)): DatatypeType, 
                                                    g#0))), 
                                              (lambda $l#0_1_4_15#heap#0: Heap, $l#0_1_4_15#x#0: Box :: 
                                                $IsBox($l#0_1_4_15#x#0, State._default.Associativity$A)), 
                                              (lambda $l#0_1_4_15#heap#0: Heap, $l#0_1_4_15#x#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_1_4_15#o#0: ref :: false))))), 
                                          $l#0_1_4_14#ly#0)), 
                                      a#0_1_4_3)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_1_4_14#heap#0, 
                                  g2#0_1_4_3, 
                                  $Box(newState#0_1_4_3))): DatatypeType))))), 
                    (lambda $l#0_1_4_14#heap#0: Heap, $l#0_1_4_14#s#0: Box :: 
                      $IsBox($l#0_1_4_14#s#0, TInt)), 
                    (lambda $l#0_1_4_14#heap#0: Heap, $l#0_1_4_14#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_4_14#o#0: ref :: false))))), 
                $LS($LZ)));
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_4_4;
                assume $IsGoodHeap($lambdaHeap#0_1_4_4);
                assume $Heap == $lambdaHeap#0_1_4_4 || $HeapSucc($Heap, $lambdaHeap#0_1_4_4);
                havoc s#0_1_4_2;
                if (true)
                {
                    $_Frame#l0_1_4_4 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_4_4, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_4_4, 
                          h#0_0, 
                          $Box(s#0_1_4_2))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#174#0_1_4_0, $Box(_mcc#175#0_1_4_0)))
                    {
                        assume $IsBox(_mcc#174#0_1_4_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_4_2;
                        assume {:id "id596"} let#0_1_4_6#0#0 == _mcc#175#0_1_4_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_4_6#0#0, TInt);
                        assume {:id "id597"} newState#Z#0_1_4_2 == let#0_1_4_6#0#0;
                        havoc a#Z#0_1_4_2;
                        assume {:id "id598"} let#0_1_4_7#0#0 == _mcc#174#0_1_4_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_4_7#0#0, State._default.Associativity$A);
                        assume {:id "id599"} a#Z#0_1_4_2 == let#0_1_4_7#0#0;
                        ##m#0_1_4_2 := $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $lambdaHeap#0_1_4_4, 
                            f#0, 
                            a#Z#0_1_4_2)): DatatypeType;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##m#0_1_4_2, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_4_4);
                        ##f#0_1_4_2 := g#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_1_4_2, 
                          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                          $lambdaHeap#0_1_4_4);
                        assume State.__default.Bind#canCall(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_4_4, 
                              f#0, 
                              a#Z#0_1_4_2)): DatatypeType, 
                          g#0);
                        assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $lambdaHeap#0_1_4_4, 
                                f#0, 
                                a#Z#0_1_4_2)): DatatypeType, 
                            g#0));
                        if (State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $lambdaHeap#0_1_4_4, 
                                f#0, 
                                a#Z#0_1_4_2)): DatatypeType, 
                            g#0)
                           == #State.M.State(_mcc#176#0_1_4_0))
                        {
                            assume $Is(_mcc#176#0_1_4_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g2#Z#0_1_4_2;
                            assume {:id "id600"} let#0_1_4_8#0#0 == _mcc#176#0_1_4_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_4_8#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id601"} g2#Z#0_1_4_2 == let#0_1_4_8#0#0;
                            assume {:id "id602"} lambdaResult#0_1_4_4
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g2#Z#0_1_4_2, 
                                  $Box(newState#Z#0_1_4_2))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_4_4, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_4_16#s#0: int, $l#0_1_4_16#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_4_16#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_4_16#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_4_16#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_4_16#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_4_16#s#0))): DatatypeType)
                   && (var a#0_1_4_4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_4_16#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_4_16#s#0))): DatatypeType); 
                    State.__default.Bind#canCall(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_4_16#heap#0, 
                            f#0, 
                            a#0_1_4_4)): DatatypeType, 
                        g#0)
                       && State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $l#0_1_4_16#heap#0, 
                              f#0, 
                              a#0_1_4_4)): DatatypeType, 
                          g#0))));
            // ProcessCallStmt: CheckSubrange
            g##0_1_4_0 := Lit(AtLayer((lambda $l#0_1_4_17#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_4_17#heap#0: Heap, $l#0_1_4_17#s#0: Box :: 
                      $Box((var newState#0_1_4_5 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_4_17#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_4_17#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_4_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_4_17#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_4_17#s#0): int))): DatatypeType); 
                            (var g2#0_1_4_5 := State.M.runState(State.__default.Bind(State._default.Associativity$B, 
                                    State._default.Associativity$C, 
                                    $Unbox(Apply1(State._default.Associativity$A, 
                                        Tclass.State.M(State._default.Associativity$B), 
                                        $l#0_1_4_17#heap#0, 
                                        f#0, 
                                        a#0_1_4_5)): DatatypeType, 
                                    g#0)); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_1_4_17#heap#0, 
                                  g2#0_1_4_5, 
                                  $Box(newState#0_1_4_5))): DatatypeType))))), 
                    (lambda $l#0_1_4_17#heap#0: Heap, $l#0_1_4_17#s#0: Box :: 
                      $IsBox($l#0_1_4_17#s#0, TInt)), 
                    (lambda $l#0_1_4_17#heap#0: Heap, $l#0_1_4_17#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_4_17#o#0: ref :: false))))), 
                $LS($LZ)));
            call {:id "id603"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt), f##0_1_4_0, g##0_1_4_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_4_5;
                assume $IsGoodHeap($lambdaHeap#0_1_4_5);
                assume $Heap == $lambdaHeap#0_1_4_5 || $HeapSucc($Heap, $lambdaHeap#0_1_4_5);
                havoc s#0_1_4_3;
                if (true)
                {
                    $_Frame#l0_1_4_5 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_4_5, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_4_5, 
                          h#0_0, 
                          $Box(s#0_1_4_3))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#101#0_1_4_0, $Box(_mcc#102#0_1_4_0)))
                    {
                        assume $IsBox(_mcc#101#0_1_4_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_4_3;
                        assume {:id "id604"} let#0_1_4_9#0#0 == _mcc#102#0_1_4_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_4_9#0#0, TInt);
                        assume {:id "id605"} newState#Z#0_1_4_3 == let#0_1_4_9#0#0;
                        havoc a#Z#0_1_4_3;
                        assume {:id "id606"} let#0_1_4_10#0#0 == _mcc#101#0_1_4_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_4_10#0#0, State._default.Associativity$A);
                        assume {:id "id607"} a#Z#0_1_4_3 == let#0_1_4_10#0#0;
                        ##m#0_1_4_3 := $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $lambdaHeap#0_1_4_5, 
                            f#0, 
                            a#Z#0_1_4_3)): DatatypeType;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##m#0_1_4_3, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_4_5);
                        ##f#0_1_4_3 := g#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_1_4_3, 
                          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                          $lambdaHeap#0_1_4_5);
                        assume State.__default.Bind#canCall(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_4_5, 
                              f#0, 
                              a#Z#0_1_4_3)): DatatypeType, 
                          g#0);
                        assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $lambdaHeap#0_1_4_5, 
                                f#0, 
                                a#Z#0_1_4_3)): DatatypeType, 
                            g#0));
                        if (State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $lambdaHeap#0_1_4_5, 
                                f#0, 
                                a#Z#0_1_4_3)): DatatypeType, 
                            g#0)
                           == #State.M.State(_mcc#103#0_1_4_0))
                        {
                            assume $Is(_mcc#103#0_1_4_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g2#Z#0_1_4_3;
                            assume {:id "id608"} let#0_1_4_11#0#0 == _mcc#103#0_1_4_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_4_11#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id609"} g2#Z#0_1_4_3 == let#0_1_4_11#0#0;
                            assume {:id "id610"} lambdaResult#0_1_4_5
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g2#Z#0_1_4_3, 
                                  $Box(newState#Z#0_1_4_3))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_4_5, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_4_19#s#0: int, $l#0_1_4_19#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_4_19#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_4_19#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_4_19#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_4_19#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_4_19#s#0))): DatatypeType)
                   && (var a#0_1_4_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_4_19#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_4_19#s#0))): DatatypeType); 
                    State.__default.Bind#canCall(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_4_19#heap#0, 
                            f#0, 
                            a#0_1_4_7)): DatatypeType, 
                        g#0)
                       && State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $l#0_1_4_19#heap#0, 
                              f#0, 
                              a#0_1_4_7)): DatatypeType, 
                          g#0))));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            assert {:id "id611"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_1_4_23#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_4_23#heap#0: Heap, $l#0_1_4_23#s#0: Box :: 
                          $Box((var newState#0_1_4_10 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_4_23#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_4_23#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_4_10 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_4_23#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_4_23#s#0): int))): DatatypeType); 
                                (var g2#0_1_4_10 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_1_4_23#heap#0, 
                                          Lit(AtLayer((lambda $l#0_1_4_24#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_1_4_24#heap#0: Heap, $l#0_1_4_24#x#0: Box :: 
                                                    $Box(State.__default.Bind(State._default.Associativity$B, 
                                                        State._default.Associativity$C, 
                                                        $Unbox(Apply1(State._default.Associativity$A, 
                                                            Tclass.State.M(State._default.Associativity$B), 
                                                            $l#0_1_4_24#heap#0, 
                                                            f#0, 
                                                            $l#0_1_4_24#x#0)): DatatypeType, 
                                                        g#0))), 
                                                  (lambda $l#0_1_4_24#heap#0: Heap, $l#0_1_4_24#x#0: Box :: 
                                                    $IsBox($l#0_1_4_24#x#0, State._default.Associativity$A)), 
                                                  (lambda $l#0_1_4_24#heap#0: Heap, $l#0_1_4_24#x#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_1_4_24#o#0: ref :: false))))), 
                                              $l#0_1_4_23#ly#0)), 
                                          a#0_1_4_10)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_1_4_23#heap#0, 
                                      g2#0_1_4_10, 
                                      $Box(newState#0_1_4_10))): DatatypeType))))), 
                        (lambda $l#0_1_4_23#heap#0: Heap, $l#0_1_4_23#s#0: Box :: 
                          $IsBox($l#0_1_4_23#s#0, TInt)), 
                        (lambda $l#0_1_4_23#heap#0: Heap, $l#0_1_4_23#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_4_23#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_1_4_25#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_4_25#heap#0: Heap, $l#0_1_4_25#s#0: Box :: 
                          $Box((var newState#0_1_4_11 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_4_25#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_4_25#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_4_11 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_4_25#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_4_25#s#0): int))): DatatypeType); 
                                (var g2#0_1_4_11 := State.M.runState(State.__default.Bind(State._default.Associativity$B, 
                                        State._default.Associativity$C, 
                                        $Unbox(Apply1(State._default.Associativity$A, 
                                            Tclass.State.M(State._default.Associativity$B), 
                                            $l#0_1_4_25#heap#0, 
                                            f#0, 
                                            a#0_1_4_11)): DatatypeType, 
                                        g#0)); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_1_4_25#heap#0, 
                                      g2#0_1_4_11, 
                                      $Box(newState#0_1_4_11))): DatatypeType))))), 
                        (lambda $l#0_1_4_25#heap#0: Heap, $l#0_1_4_25#s#0: Box :: 
                          $IsBox($l#0_1_4_25#s#0, TInt)), 
                        (lambda $l#0_1_4_25#heap#0: Heap, $l#0_1_4_25#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_4_25#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_3_0;
                assume $IsGoodHeap($lambdaHeap#0_1_3_0);
                assume $Heap == $lambdaHeap#0_1_3_0 || $HeapSucc($Heap, $lambdaHeap#0_1_3_0);
                havoc s#0_1_3_0;
                if (true)
                {
                    $_Frame#l0_1_3_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_3_0, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_3_0, 
                          h#0_0, 
                          $Box(s#0_1_3_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#104#0_1_3_0, $Box(_mcc#105#0_1_3_0)))
                    {
                        assume $IsBox(_mcc#104#0_1_3_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_3_0;
                        assume {:id "id532"} let#0_1_3_0#0#0 == _mcc#105#0_1_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_3_0#0#0, TInt);
                        assume {:id "id533"} newState#Z#0_1_3_0 == let#0_1_3_0#0#0;
                        havoc a#Z#0_1_3_0;
                        assume {:id "id534"} let#0_1_3_1#0#0 == _mcc#104#0_1_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_3_1#0#0, State._default.Associativity$A);
                        assume {:id "id535"} a#Z#0_1_3_0 == let#0_1_3_1#0#0;
                        ##m#0_1_3_0 := $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $lambdaHeap#0_1_3_0, 
                            f#0, 
                            a#Z#0_1_3_0)): DatatypeType;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##m#0_1_3_0, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_3_0);
                        ##f#0_1_3_0 := g#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_1_3_0, 
                          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                          $lambdaHeap#0_1_3_0);
                        assume State.__default.Bind#canCall(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_3_0, 
                              f#0, 
                              a#Z#0_1_3_0)): DatatypeType, 
                          g#0);
                        assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $lambdaHeap#0_1_3_0, 
                                f#0, 
                                a#Z#0_1_3_0)): DatatypeType, 
                            g#0));
                        if (State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $lambdaHeap#0_1_3_0, 
                                f#0, 
                                a#Z#0_1_3_0)): DatatypeType, 
                            g#0)
                           == #State.M.State(_mcc#106#0_1_3_0))
                        {
                            assume $Is(_mcc#106#0_1_3_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g2#Z#0_1_3_0;
                            assume {:id "id536"} let#0_1_3_2#0#0 == _mcc#106#0_1_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_3_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id537"} g2#Z#0_1_3_0 == let#0_1_3_2#0#0;
                            assume {:id "id538"} lambdaResult#0_1_3_0
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g2#Z#0_1_3_0, 
                                  $Box(newState#Z#0_1_3_0))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_3_0, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_3_1#s#0: int, $l#0_1_3_1#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_3_1#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_3_1#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_3_1#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_3_1#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_3_1#s#0))): DatatypeType)
                   && (var a#0_1_3_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_3_1#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_3_1#s#0))): DatatypeType); 
                    State.__default.Bind#canCall(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_3_1#heap#0, 
                            f#0, 
                            a#0_1_3_1)): DatatypeType, 
                        g#0)
                       && State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $l#0_1_3_1#heap#0, 
                              f#0, 
                              a#0_1_3_1)): DatatypeType, 
                          g#0))));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(195,18)
            // TrCallStmt: Before ProcessCallStmt
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_3_1;
                assume $IsGoodHeap($lambdaHeap#0_1_3_1);
                assume $Heap == $lambdaHeap#0_1_3_1 || $HeapSucc($Heap, $lambdaHeap#0_1_3_1);
                havoc s#0_1_3_1;
                if (true)
                {
                    $_Frame#l0_1_3_1 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_3_1, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_3_1, 
                          h#0_0, 
                          $Box(s#0_1_3_1))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#177#0_1_3_0, $Box(_mcc#178#0_1_3_0)))
                    {
                        assume $IsBox(_mcc#177#0_1_3_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_3_1;
                        assume {:id "id539"} let#0_1_3_3#0#0 == _mcc#178#0_1_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_3_3#0#0, TInt);
                        assume {:id "id540"} newState#Z#0_1_3_1 == let#0_1_3_3#0#0;
                        havoc a#Z#0_1_3_1;
                        assume {:id "id541"} let#0_1_3_4#0#0 == _mcc#177#0_1_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_3_4#0#0, State._default.Associativity$A);
                        assume {:id "id542"} a#Z#0_1_3_1 == let#0_1_3_4#0#0;
                        ##m#0_1_3_1 := $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $lambdaHeap#0_1_3_1, 
                            f#0, 
                            a#Z#0_1_3_1)): DatatypeType;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##m#0_1_3_1, Tclass.State.M(State._default.Associativity$B), $lambdaHeap#0_1_3_1);
                        ##f#0_1_3_1 := g#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_1_3_1, 
                          Tclass._System.___hTotalFunc1(State._default.Associativity$B, Tclass.State.M(State._default.Associativity$C)), 
                          $lambdaHeap#0_1_3_1);
                        assume State.__default.Bind#canCall(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_3_1, 
                              f#0, 
                              a#Z#0_1_3_1)): DatatypeType, 
                          g#0);
                        assume State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $lambdaHeap#0_1_3_1, 
                                f#0, 
                                a#Z#0_1_3_1)): DatatypeType, 
                            g#0));
                        if (State.__default.Bind(State._default.Associativity$B, 
                            State._default.Associativity$C, 
                            $Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $lambdaHeap#0_1_3_1, 
                                f#0, 
                                a#Z#0_1_3_1)): DatatypeType, 
                            g#0)
                           == #State.M.State(_mcc#179#0_1_3_0))
                        {
                            assume $Is(_mcc#179#0_1_3_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g2#Z#0_1_3_1;
                            assume {:id "id543"} let#0_1_3_5#0#0 == _mcc#179#0_1_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_3_5#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id544"} g2#Z#0_1_3_1 == let#0_1_3_5#0#0;
                            assume {:id "id545"} lambdaResult#0_1_3_1
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g2#Z#0_1_3_1, 
                                  $Box(newState#Z#0_1_3_1))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_3_1, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_3_2#s#0: int, $l#0_1_3_2#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_3_2#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_3_2#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_3_2#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_3_2#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_3_2#s#0))): DatatypeType)
                   && (var a#0_1_3_2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_3_2#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_3_2#s#0))): DatatypeType); 
                    State.__default.Bind#canCall(State._default.Associativity$B, 
                        State._default.Associativity$C, 
                        $Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_3_2#heap#0, 
                            f#0, 
                            a#0_1_3_2)): DatatypeType, 
                        g#0)
                       && State.M.State_q(State.__default.Bind(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $l#0_1_3_2#heap#0, 
                              f#0, 
                              a#0_1_3_2)): DatatypeType, 
                          g#0))));
            // ProcessCallStmt: CheckSubrange
            f##0_1_3_0 := Lit(AtLayer((lambda $l#0_1_3_3#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_3_3#heap#0: Heap, $l#0_1_3_3#s#0: Box :: 
                      $Box((var newState#0_1_3_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_3_3#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_3_3#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_3_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_3_3#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_3_3#s#0): int))): DatatypeType); 
                            (var g2#0_1_3_3 := State.M.runState(State.__default.Bind(State._default.Associativity$B, 
                                    State._default.Associativity$C, 
                                    $Unbox(Apply1(State._default.Associativity$A, 
                                        Tclass.State.M(State._default.Associativity$B), 
                                        $l#0_1_3_3#heap#0, 
                                        f#0, 
                                        a#0_1_3_3)): DatatypeType, 
                                    g#0)); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_1_3_3#heap#0, 
                                  g2#0_1_3_3, 
                                  $Box(newState#0_1_3_3))): DatatypeType))))), 
                    (lambda $l#0_1_3_3#heap#0: Heap, $l#0_1_3_3#s#0: Box :: 
                      $IsBox($l#0_1_3_3#s#0, TInt)), 
                    (lambda $l#0_1_3_3#heap#0: Heap, $l#0_1_3_3#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_3_3#o#0: ref :: false))))), 
                $LS($LZ)));
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_3_2;
                assume $IsGoodHeap($lambdaHeap#0_1_3_2);
                assume $Heap == $lambdaHeap#0_1_3_2 || $HeapSucc($Heap, $lambdaHeap#0_1_3_2);
                havoc s#0_1_3_2;
                if (true)
                {
                    $_Frame#l0_1_3_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_3_2, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_3_2, 
                          h#0_0, 
                          $Box(s#0_1_3_2))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#180#0_1_3_0, $Box(_mcc#181#0_1_3_0)))
                    {
                        assume $IsBox(_mcc#180#0_1_3_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_3_2;
                        assume {:id "id546"} let#0_1_3_6#0#0 == _mcc#181#0_1_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_3_6#0#0, TInt);
                        assume {:id "id547"} newState#Z#0_1_3_2 == let#0_1_3_6#0#0;
                        havoc a#Z#0_1_3_2;
                        assume {:id "id548"} let#0_1_3_7#0#0 == _mcc#180#0_1_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_3_7#0#0, State._default.Associativity$A);
                        assume {:id "id549"} a#Z#0_1_3_2 == let#0_1_3_7#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_3_2, 
                              f#0, 
                              a#Z#0_1_3_2)): DatatypeType
                           == #State.M.State(_mcc#183#0_1_3_0))
                        {
                            assume $Is(_mcc#183#0_1_3_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_3_0;
                            assume {:id "id550"} let#0_1_3_8#0#0 == _mcc#183#0_1_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_3_8#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id551"} h2#Z#0_1_3_0 == let#0_1_3_8#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_3_3;
                                assume $IsGoodHeap($lambdaHeap#0_1_3_3);
                                assume $lambdaHeap#0_1_3_2 == $lambdaHeap#0_1_3_3
                                   || $HeapSucc($lambdaHeap#0_1_3_2, $lambdaHeap#0_1_3_3);
                                havoc s#0_1_3_3;
                                if (true)
                                {
                                    $_Frame#l0_1_3_3 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_3_3, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_3_3, 
                                          h2#Z#0_1_3_0, 
                                          $Box(s#0_1_3_3))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#184#0_1_3_0, $Box(_mcc#185#0_1_3_0)))
                                    {
                                        assume $IsBox(_mcc#184#0_1_3_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_3_0;
                                        assume {:id "id552"} let#0_1_3_9#0#0 == _mcc#185#0_1_3_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_3_9#0#0, TInt);
                                        assume {:id "id553"} newState2#Z#0_1_3_0 == let#0_1_3_9#0#0;
                                        havoc a2#Z#0_1_3_0;
                                        assume {:id "id554"} let#0_1_3_10#0#0 == _mcc#184#0_1_3_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_3_10#0#0, State._default.Associativity$B);
                                        assume {:id "id555"} a2#Z#0_1_3_0 == let#0_1_3_10#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_3_3, 
                                              g#0, 
                                              a2#Z#0_1_3_0)): DatatypeType
                                           == #State.M.State(_mcc#186#0_1_3_0))
                                        {
                                            assume $Is(_mcc#186#0_1_3_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_3_2;
                                            assume {:id "id556"} let#0_1_3_11#0#0 == _mcc#186#0_1_3_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_3_11#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id557"} g2#Z#0_1_3_2 == let#0_1_3_11#0#0;
                                            assume {:id "id558"} lambdaResult#0_1_3_3
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_3_2, 
                                                  g2#Z#0_1_3_2, 
                                                  $Box(newState2#Z#0_1_3_0))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_3_3, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                        }
                        else
                        {
                            assume false;
                        }

                        if ((var h2#0_1_3_0 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_1_3_2, 
                                    f#0, 
                                    a#Z#0_1_3_2)): DatatypeType); 
                            Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_3_5#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_1_3_5#heap#0: Heap, $l#0_1_3_5#s#0: Box :: 
                                          $Box((var newState2#0_1_3_1 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_3_5#heap#0, 
                                                        h2#0_1_3_0, 
                                                        $Box($Unbox($l#0_1_3_5#s#0): int))): DatatypeType)): int; 
                                              (var a2#0_1_3_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_3_5#heap#0, 
                                                        h2#0_1_3_0, 
                                                        $Box($Unbox($l#0_1_3_5#s#0): int))): DatatypeType); 
                                                (var g2#0_1_3_5 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                          Tclass.State.M(State._default.Associativity$C), 
                                                          $l#0_1_3_5#heap#0, 
                                                          g#0, 
                                                          a2#0_1_3_1)): DatatypeType); 
                                                  $Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                      $l#0_1_3_5#heap#0, 
                                                      g2#0_1_3_5, 
                                                      $Box(newState2#0_1_3_1))): DatatypeType))))), 
                                        (lambda $l#0_1_3_5#heap#0: Heap, $l#0_1_3_5#s#0: Box :: 
                                          $IsBox($l#0_1_3_5#s#0, TInt)), 
                                        (lambda $l#0_1_3_5#heap#0: Heap, $l#0_1_3_5#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_1_3_5#o#0: ref :: false))))), 
                                    $LS($LZ))))))
                           == #State.M.State(_mcc#182#0_1_3_0))
                        {
                            assume $Is(_mcc#182#0_1_3_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g3#Z#0_1_3_0;
                            assume {:id "id559"} let#0_1_3_12#0#0 == _mcc#182#0_1_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_3_12#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id560"} g3#Z#0_1_3_0 == let#0_1_3_12#0#0;
                            assume {:id "id561"} lambdaResult#0_1_3_2
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g3#Z#0_1_3_0, 
                                  $Box(newState#Z#0_1_3_2))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_3_2, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_3_6#s#0: int, $l#0_1_3_6#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_3_6#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_3_6#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_3_6#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_3_6#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_3_6#s#0))): DatatypeType)
                   && (var a#0_1_3_4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_3_6#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_3_6#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_3_6#heap#0, 
                            f#0, 
                            a#0_1_3_4)): DatatypeType)
                       && (var h2#0_1_3_1 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_3_6#heap#0, 
                                f#0, 
                                a#0_1_3_4)): DatatypeType); 
                        (forall $l#0_1_3_7#s#0: int, $l#0_1_3_7#heap#0: Heap :: 
                          $IsGoodHeap($l#0_1_3_7#heap#0)
                             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_3_7#heap#0, 
                                    h2#0_1_3_1, 
                                    $Box($l#0_1_3_7#s#0))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_3_7#heap#0, 
                                    h2#0_1_3_1, 
                                    $Box($l#0_1_3_7#s#0))): DatatypeType)
                               && (var a2#0_1_3_2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_3_7#heap#0, 
                                        h2#0_1_3_1, 
                                        $Box($l#0_1_3_7#s#0))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_3_7#heap#0, 
                                      g#0, 
                                      a2#0_1_3_2)): DatatypeType))))
                       && State.M.State_q((var h2#0_1_3_2 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_3_6#heap#0, 
                                  f#0, 
                                  a#0_1_3_4)): DatatypeType); 
                          Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_3_8#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_1_3_8#heap#0: Heap, $l#0_1_3_8#s#0: Box :: 
                                        $Box((var newState2#0_1_3_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                      $l#0_1_3_8#heap#0, 
                                                      h2#0_1_3_2, 
                                                      $Box($Unbox($l#0_1_3_8#s#0): int))): DatatypeType)): int; 
                                            (var a2#0_1_3_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                      $l#0_1_3_8#heap#0, 
                                                      h2#0_1_3_2, 
                                                      $Box($Unbox($l#0_1_3_8#s#0): int))): DatatypeType); 
                                              (var g2#0_1_3_7 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                        Tclass.State.M(State._default.Associativity$C), 
                                                        $l#0_1_3_8#heap#0, 
                                                        g#0, 
                                                        a2#0_1_3_3)): DatatypeType); 
                                                $Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                    $l#0_1_3_8#heap#0, 
                                                    g2#0_1_3_7, 
                                                    $Box(newState2#0_1_3_3))): DatatypeType))))), 
                                      (lambda $l#0_1_3_8#heap#0: Heap, $l#0_1_3_8#s#0: Box :: 
                                        $IsBox($l#0_1_3_8#s#0, TInt)), 
                                      (lambda $l#0_1_3_8#heap#0: Heap, $l#0_1_3_8#s#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_1_3_8#o#0: ref :: false))))), 
                                  $LS($LZ)))))))));
            // ProcessCallStmt: CheckSubrange
            g##0_1_3_0 := Lit(AtLayer((lambda $l#0_1_3_10#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_3_10#heap#0: Heap, $l#0_1_3_10#s#0: Box :: 
                      $Box((var newState#0_1_3_5 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_3_10#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_3_10#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_3_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_3_10#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_3_10#s#0): int))): DatatypeType); 
                            (var g3#0_1_3_1 := State.M.runState((var h2#0_1_3_4 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                            Tclass.State.M(State._default.Associativity$B), 
                                            $l#0_1_3_10#heap#0, 
                                            f#0, 
                                            a#0_1_3_5)): DatatypeType); 
                                    Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_3_11#ly#0: LayerType :: 
                                              Handle1((lambda $l#0_1_3_11#heap#0: Heap, $l#0_1_3_11#s#0: Box :: 
                                                  $Box((var newState2#0_1_3_5 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                $l#0_1_3_11#heap#0, 
                                                                h2#0_1_3_4, 
                                                                $Box($Unbox($l#0_1_3_11#s#0): int))): DatatypeType)): int; 
                                                      (var a2#0_1_3_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                $l#0_1_3_11#heap#0, 
                                                                h2#0_1_3_4, 
                                                                $Box($Unbox($l#0_1_3_11#s#0): int))): DatatypeType); 
                                                        (var g2#0_1_3_9 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                  Tclass.State.M(State._default.Associativity$C), 
                                                                  $l#0_1_3_11#heap#0, 
                                                                  g#0, 
                                                                  a2#0_1_3_5)): DatatypeType); 
                                                          $Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                              $l#0_1_3_11#heap#0, 
                                                              g2#0_1_3_9, 
                                                              $Box(newState2#0_1_3_5))): DatatypeType))))), 
                                                (lambda $l#0_1_3_11#heap#0: Heap, $l#0_1_3_11#s#0: Box :: 
                                                  $IsBox($l#0_1_3_11#s#0, TInt)), 
                                                (lambda $l#0_1_3_11#heap#0: Heap, $l#0_1_3_11#s#0: Box :: 
                                                  SetRef_to_SetBox((lambda $l#0_1_3_11#o#0: ref :: false))))), 
                                            $l#0_1_3_10#ly#0)))))); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_1_3_10#heap#0, 
                                  g3#0_1_3_1, 
                                  $Box(newState#0_1_3_5))): DatatypeType))))), 
                    (lambda $l#0_1_3_10#heap#0: Heap, $l#0_1_3_10#s#0: Box :: 
                      $IsBox($l#0_1_3_10#s#0, TInt)), 
                    (lambda $l#0_1_3_10#heap#0: Heap, $l#0_1_3_10#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_3_10#o#0: ref :: false))))), 
                $LS($LZ)));
            call {:id "id562"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt), f##0_1_3_0, g##0_1_3_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_3_4;
                assume $IsGoodHeap($lambdaHeap#0_1_3_4);
                assume $Heap == $lambdaHeap#0_1_3_4 || $HeapSucc($Heap, $lambdaHeap#0_1_3_4);
                havoc s#0_1_3_4;
                if (true)
                {
                    $_Frame#l0_1_3_4 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_3_4, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_3_4, 
                          h#0_0, 
                          $Box(s#0_1_3_4))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#107#0_1_3_0, $Box(_mcc#108#0_1_3_0)))
                    {
                        assume $IsBox(_mcc#107#0_1_3_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_3_3;
                        assume {:id "id563"} let#0_1_3_13#0#0 == _mcc#108#0_1_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_3_13#0#0, TInt);
                        assume {:id "id564"} newState#Z#0_1_3_3 == let#0_1_3_13#0#0;
                        havoc a#Z#0_1_3_3;
                        assume {:id "id565"} let#0_1_3_14#0#0 == _mcc#107#0_1_3_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_3_14#0#0, State._default.Associativity$A);
                        assume {:id "id566"} a#Z#0_1_3_3 == let#0_1_3_14#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_3_4, 
                              f#0, 
                              a#Z#0_1_3_3)): DatatypeType
                           == #State.M.State(_mcc#110#0_1_3_0))
                        {
                            assume $Is(_mcc#110#0_1_3_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_3_1;
                            assume {:id "id567"} let#0_1_3_15#0#0 == _mcc#110#0_1_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_3_15#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id568"} h2#Z#0_1_3_1 == let#0_1_3_15#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_3_5;
                                assume $IsGoodHeap($lambdaHeap#0_1_3_5);
                                assume $lambdaHeap#0_1_3_4 == $lambdaHeap#0_1_3_5
                                   || $HeapSucc($lambdaHeap#0_1_3_4, $lambdaHeap#0_1_3_5);
                                havoc s#0_1_3_5;
                                if (true)
                                {
                                    $_Frame#l0_1_3_5 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_3_5, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_3_5, 
                                          h2#Z#0_1_3_1, 
                                          $Box(s#0_1_3_5))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#111#0_1_3_0, $Box(_mcc#112#0_1_3_0)))
                                    {
                                        assume $IsBox(_mcc#111#0_1_3_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_3_1;
                                        assume {:id "id569"} let#0_1_3_16#0#0 == _mcc#112#0_1_3_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_3_16#0#0, TInt);
                                        assume {:id "id570"} newState2#Z#0_1_3_1 == let#0_1_3_16#0#0;
                                        havoc a2#Z#0_1_3_1;
                                        assume {:id "id571"} let#0_1_3_17#0#0 == _mcc#111#0_1_3_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_3_17#0#0, State._default.Associativity$B);
                                        assume {:id "id572"} a2#Z#0_1_3_1 == let#0_1_3_17#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_3_5, 
                                              g#0, 
                                              a2#Z#0_1_3_1)): DatatypeType
                                           == #State.M.State(_mcc#113#0_1_3_0))
                                        {
                                            assume $Is(_mcc#113#0_1_3_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_3_3;
                                            assume {:id "id573"} let#0_1_3_18#0#0 == _mcc#113#0_1_3_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_3_18#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id574"} g2#Z#0_1_3_3 == let#0_1_3_18#0#0;
                                            assume {:id "id575"} lambdaResult#0_1_3_5
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_3_4, 
                                                  g2#Z#0_1_3_3, 
                                                  $Box(newState2#Z#0_1_3_1))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_3_5, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                        }
                        else
                        {
                            assume false;
                        }

                        if ((var h2#0_1_3_5 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_1_3_4, 
                                    f#0, 
                                    a#Z#0_1_3_3)): DatatypeType); 
                            Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_3_13#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_1_3_13#heap#0: Heap, $l#0_1_3_13#s#0: Box :: 
                                          $Box((var newState2#0_1_3_7 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_3_13#heap#0, 
                                                        h2#0_1_3_5, 
                                                        $Box($Unbox($l#0_1_3_13#s#0): int))): DatatypeType)): int; 
                                              (var a2#0_1_3_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_3_13#heap#0, 
                                                        h2#0_1_3_5, 
                                                        $Box($Unbox($l#0_1_3_13#s#0): int))): DatatypeType); 
                                                (var g2#0_1_3_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                          Tclass.State.M(State._default.Associativity$C), 
                                                          $l#0_1_3_13#heap#0, 
                                                          g#0, 
                                                          a2#0_1_3_7)): DatatypeType); 
                                                  $Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                      $l#0_1_3_13#heap#0, 
                                                      g2#0_1_3_11, 
                                                      $Box(newState2#0_1_3_7))): DatatypeType))))), 
                                        (lambda $l#0_1_3_13#heap#0: Heap, $l#0_1_3_13#s#0: Box :: 
                                          $IsBox($l#0_1_3_13#s#0, TInt)), 
                                        (lambda $l#0_1_3_13#heap#0: Heap, $l#0_1_3_13#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_1_3_13#o#0: ref :: false))))), 
                                    $LS($LZ))))))
                           == #State.M.State(_mcc#109#0_1_3_0))
                        {
                            assume $Is(_mcc#109#0_1_3_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g3#Z#0_1_3_1;
                            assume {:id "id576"} let#0_1_3_19#0#0 == _mcc#109#0_1_3_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_3_19#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id577"} g3#Z#0_1_3_1 == let#0_1_3_19#0#0;
                            assume {:id "id578"} lambdaResult#0_1_3_4
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g3#Z#0_1_3_1, 
                                  $Box(newState#Z#0_1_3_3))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_3_4, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_3_16#s#0: int, $l#0_1_3_16#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_3_16#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_3_16#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_3_16#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_3_16#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_3_16#s#0))): DatatypeType)
                   && (var a#0_1_3_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_3_16#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_3_16#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_3_16#heap#0, 
                            f#0, 
                            a#0_1_3_7)): DatatypeType)
                       && (var h2#0_1_3_7 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_3_16#heap#0, 
                                f#0, 
                                a#0_1_3_7)): DatatypeType); 
                        (forall $l#0_1_3_17#s#0: int, $l#0_1_3_17#heap#0: Heap :: 
                          $IsGoodHeap($l#0_1_3_17#heap#0)
                             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_3_17#heap#0, 
                                    h2#0_1_3_7, 
                                    $Box($l#0_1_3_17#s#0))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_3_17#heap#0, 
                                    h2#0_1_3_7, 
                                    $Box($l#0_1_3_17#s#0))): DatatypeType)
                               && (var a2#0_1_3_9 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_3_17#heap#0, 
                                        h2#0_1_3_7, 
                                        $Box($l#0_1_3_17#s#0))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_3_17#heap#0, 
                                      g#0, 
                                      a2#0_1_3_9)): DatatypeType))))
                       && State.M.State_q((var h2#0_1_3_8 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_3_16#heap#0, 
                                  f#0, 
                                  a#0_1_3_7)): DatatypeType); 
                          Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_3_18#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_1_3_18#heap#0: Heap, $l#0_1_3_18#s#0: Box :: 
                                        $Box((var newState2#0_1_3_10 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                      $l#0_1_3_18#heap#0, 
                                                      h2#0_1_3_8, 
                                                      $Box($Unbox($l#0_1_3_18#s#0): int))): DatatypeType)): int; 
                                            (var a2#0_1_3_10 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                      $l#0_1_3_18#heap#0, 
                                                      h2#0_1_3_8, 
                                                      $Box($Unbox($l#0_1_3_18#s#0): int))): DatatypeType); 
                                              (var g2#0_1_3_14 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                        Tclass.State.M(State._default.Associativity$C), 
                                                        $l#0_1_3_18#heap#0, 
                                                        g#0, 
                                                        a2#0_1_3_10)): DatatypeType); 
                                                $Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                    $l#0_1_3_18#heap#0, 
                                                    g2#0_1_3_14, 
                                                    $Box(newState2#0_1_3_10))): DatatypeType))))), 
                                      (lambda $l#0_1_3_18#heap#0: Heap, $l#0_1_3_18#s#0: Box :: 
                                        $IsBox($l#0_1_3_18#s#0, TInt)), 
                                      (lambda $l#0_1_3_18#heap#0: Heap, $l#0_1_3_18#s#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_1_3_18#o#0: ref :: false))))), 
                                  $LS($LZ)))))))));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            assert {:id "id579"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_1_3_23#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_3_23#heap#0: Heap, $l#0_1_3_23#s#0: Box :: 
                          $Box((var newState#0_1_3_10 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_3_23#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_3_23#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_3_10 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_3_23#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_3_23#s#0): int))): DatatypeType); 
                                (var g2#0_1_3_18 := State.M.runState(State.__default.Bind(State._default.Associativity$B, 
                                        State._default.Associativity$C, 
                                        $Unbox(Apply1(State._default.Associativity$A, 
                                            Tclass.State.M(State._default.Associativity$B), 
                                            $l#0_1_3_23#heap#0, 
                                            f#0, 
                                            a#0_1_3_10)): DatatypeType, 
                                        g#0)); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_1_3_23#heap#0, 
                                      g2#0_1_3_18, 
                                      $Box(newState#0_1_3_10))): DatatypeType))))), 
                        (lambda $l#0_1_3_23#heap#0: Heap, $l#0_1_3_23#s#0: Box :: 
                          $IsBox($l#0_1_3_23#s#0, TInt)), 
                        (lambda $l#0_1_3_23#heap#0: Heap, $l#0_1_3_23#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_3_23#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_1_3_24#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_3_24#heap#0: Heap, $l#0_1_3_24#s#0: Box :: 
                          $Box((var newState#0_1_3_11 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_3_24#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_3_24#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_3_11 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_3_24#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_3_24#s#0): int))): DatatypeType); 
                                (var g3#0_1_3_5 := State.M.runState((var h2#0_1_3_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                Tclass.State.M(State._default.Associativity$B), 
                                                $l#0_1_3_24#heap#0, 
                                                f#0, 
                                                a#0_1_3_11)): DatatypeType); 
                                        Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_3_25#ly#0: LayerType :: 
                                                  Handle1((lambda $l#0_1_3_25#heap#0: Heap, $l#0_1_3_25#s#0: Box :: 
                                                      $Box((var newState2#0_1_3_13 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                    $l#0_1_3_25#heap#0, 
                                                                    h2#0_1_3_11, 
                                                                    $Box($Unbox($l#0_1_3_25#s#0): int))): DatatypeType)): int; 
                                                          (var a2#0_1_3_13 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                    $l#0_1_3_25#heap#0, 
                                                                    h2#0_1_3_11, 
                                                                    $Box($Unbox($l#0_1_3_25#s#0): int))): DatatypeType); 
                                                            (var g2#0_1_3_19 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                      Tclass.State.M(State._default.Associativity$C), 
                                                                      $l#0_1_3_25#heap#0, 
                                                                      g#0, 
                                                                      a2#0_1_3_13)): DatatypeType); 
                                                              $Unbox(Apply1(TInt, 
                                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                                  $l#0_1_3_25#heap#0, 
                                                                  g2#0_1_3_19, 
                                                                  $Box(newState2#0_1_3_13))): DatatypeType))))), 
                                                    (lambda $l#0_1_3_25#heap#0: Heap, $l#0_1_3_25#s#0: Box :: 
                                                      $IsBox($l#0_1_3_25#s#0, TInt)), 
                                                    (lambda $l#0_1_3_25#heap#0: Heap, $l#0_1_3_25#s#0: Box :: 
                                                      SetRef_to_SetBox((lambda $l#0_1_3_25#o#0: ref :: false))))), 
                                                $l#0_1_3_24#ly#0)))))); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_1_3_24#heap#0, 
                                      g3#0_1_3_5, 
                                      $Box(newState#0_1_3_11))): DatatypeType))))), 
                        (lambda $l#0_1_3_24#heap#0: Heap, $l#0_1_3_24#s#0: Box :: 
                          $IsBox($l#0_1_3_24#s#0, TInt)), 
                        (lambda $l#0_1_3_24#heap#0: Heap, $l#0_1_3_24#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_3_24#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_2_0;
                assume $IsGoodHeap($lambdaHeap#0_1_2_0);
                assume $Heap == $lambdaHeap#0_1_2_0 || $HeapSucc($Heap, $lambdaHeap#0_1_2_0);
                havoc s#0_1_2_0;
                if (true)
                {
                    $_Frame#l0_1_2_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_2_0, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_2_0, 
                          h#0_0, 
                          $Box(s#0_1_2_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#114#0_1_2_0, $Box(_mcc#115#0_1_2_0)))
                    {
                        assume $IsBox(_mcc#114#0_1_2_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_2_0;
                        assume {:id "id466"} let#0_1_2_0#0#0 == _mcc#115#0_1_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_2_0#0#0, TInt);
                        assume {:id "id467"} newState#Z#0_1_2_0 == let#0_1_2_0#0#0;
                        havoc a#Z#0_1_2_0;
                        assume {:id "id468"} let#0_1_2_1#0#0 == _mcc#114#0_1_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_2_1#0#0, State._default.Associativity$A);
                        assume {:id "id469"} a#Z#0_1_2_0 == let#0_1_2_1#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_2_0, 
                              f#0, 
                              a#Z#0_1_2_0)): DatatypeType
                           == #State.M.State(_mcc#117#0_1_2_0))
                        {
                            assume $Is(_mcc#117#0_1_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_2_0;
                            assume {:id "id470"} let#0_1_2_2#0#0 == _mcc#117#0_1_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_2_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id471"} h2#Z#0_1_2_0 == let#0_1_2_2#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_2_1;
                                assume $IsGoodHeap($lambdaHeap#0_1_2_1);
                                assume $lambdaHeap#0_1_2_0 == $lambdaHeap#0_1_2_1
                                   || $HeapSucc($lambdaHeap#0_1_2_0, $lambdaHeap#0_1_2_1);
                                havoc s#0_1_2_1;
                                if (true)
                                {
                                    $_Frame#l0_1_2_1 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_2_1, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_2_1, 
                                          h2#Z#0_1_2_0, 
                                          $Box(s#0_1_2_1))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#118#0_1_2_0, $Box(_mcc#119#0_1_2_0)))
                                    {
                                        assume $IsBox(_mcc#118#0_1_2_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_2_0;
                                        assume {:id "id472"} let#0_1_2_3#0#0 == _mcc#119#0_1_2_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_2_3#0#0, TInt);
                                        assume {:id "id473"} newState2#Z#0_1_2_0 == let#0_1_2_3#0#0;
                                        havoc a2#Z#0_1_2_0;
                                        assume {:id "id474"} let#0_1_2_4#0#0 == _mcc#118#0_1_2_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_2_4#0#0, State._default.Associativity$B);
                                        assume {:id "id475"} a2#Z#0_1_2_0 == let#0_1_2_4#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_2_1, 
                                              g#0, 
                                              a2#Z#0_1_2_0)): DatatypeType
                                           == #State.M.State(_mcc#120#0_1_2_0))
                                        {
                                            assume $Is(_mcc#120#0_1_2_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_2_0;
                                            assume {:id "id476"} let#0_1_2_5#0#0 == _mcc#120#0_1_2_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_2_5#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id477"} g2#Z#0_1_2_0 == let#0_1_2_5#0#0;
                                            assume {:id "id478"} lambdaResult#0_1_2_1
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_2_0, 
                                                  g2#Z#0_1_2_0, 
                                                  $Box(newState2#Z#0_1_2_0))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_2_1, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                        }
                        else
                        {
                            assume false;
                        }

                        if ((var h2#0_1_2_0 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_1_2_0, 
                                    f#0, 
                                    a#Z#0_1_2_0)): DatatypeType); 
                            Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_1#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_1_2_1#heap#0: Heap, $l#0_1_2_1#s#0: Box :: 
                                          $Box((var newState2#0_1_2_1 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_2_1#heap#0, 
                                                        h2#0_1_2_0, 
                                                        $Box($Unbox($l#0_1_2_1#s#0): int))): DatatypeType)): int; 
                                              (var a2#0_1_2_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_2_1#heap#0, 
                                                        h2#0_1_2_0, 
                                                        $Box($Unbox($l#0_1_2_1#s#0): int))): DatatypeType); 
                                                (var g2#0_1_2_1 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                          Tclass.State.M(State._default.Associativity$C), 
                                                          $l#0_1_2_1#heap#0, 
                                                          g#0, 
                                                          a2#0_1_2_1)): DatatypeType); 
                                                  $Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                      $l#0_1_2_1#heap#0, 
                                                      g2#0_1_2_1, 
                                                      $Box(newState2#0_1_2_1))): DatatypeType))))), 
                                        (lambda $l#0_1_2_1#heap#0: Heap, $l#0_1_2_1#s#0: Box :: 
                                          $IsBox($l#0_1_2_1#s#0, TInt)), 
                                        (lambda $l#0_1_2_1#heap#0: Heap, $l#0_1_2_1#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_1_2_1#o#0: ref :: false))))), 
                                    $LS($LZ))))))
                           == #State.M.State(_mcc#116#0_1_2_0))
                        {
                            assume $Is(_mcc#116#0_1_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g3#Z#0_1_2_0;
                            assume {:id "id479"} let#0_1_2_6#0#0 == _mcc#116#0_1_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_2_6#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id480"} g3#Z#0_1_2_0 == let#0_1_2_6#0#0;
                            assume {:id "id481"} lambdaResult#0_1_2_0
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g3#Z#0_1_2_0, 
                                  $Box(newState#Z#0_1_2_0))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_2_0, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_2_4#s#0: int, $l#0_1_2_4#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_2_4#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_2_4#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_2_4#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_2_4#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_2_4#s#0))): DatatypeType)
                   && (var a#0_1_2_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_2_4#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_2_4#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_2_4#heap#0, 
                            f#0, 
                            a#0_1_2_1)): DatatypeType)
                       && (var h2#0_1_2_2 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_2_4#heap#0, 
                                f#0, 
                                a#0_1_2_1)): DatatypeType); 
                        (forall $l#0_1_2_5#s#0: int, $l#0_1_2_5#heap#0: Heap :: 
                          $IsGoodHeap($l#0_1_2_5#heap#0)
                             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_2_5#heap#0, 
                                    h2#0_1_2_2, 
                                    $Box($l#0_1_2_5#s#0))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_2_5#heap#0, 
                                    h2#0_1_2_2, 
                                    $Box($l#0_1_2_5#s#0))): DatatypeType)
                               && (var a2#0_1_2_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_2_5#heap#0, 
                                        h2#0_1_2_2, 
                                        $Box($l#0_1_2_5#s#0))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_2_5#heap#0, 
                                      g#0, 
                                      a2#0_1_2_3)): DatatypeType))))
                       && State.M.State_q((var h2#0_1_2_3 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_2_4#heap#0, 
                                  f#0, 
                                  a#0_1_2_1)): DatatypeType); 
                          Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_6#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_1_2_6#heap#0: Heap, $l#0_1_2_6#s#0: Box :: 
                                        $Box((var newState2#0_1_2_4 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                      $l#0_1_2_6#heap#0, 
                                                      h2#0_1_2_3, 
                                                      $Box($Unbox($l#0_1_2_6#s#0): int))): DatatypeType)): int; 
                                            (var a2#0_1_2_4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                      $l#0_1_2_6#heap#0, 
                                                      h2#0_1_2_3, 
                                                      $Box($Unbox($l#0_1_2_6#s#0): int))): DatatypeType); 
                                              (var g2#0_1_2_4 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                        Tclass.State.M(State._default.Associativity$C), 
                                                        $l#0_1_2_6#heap#0, 
                                                        g#0, 
                                                        a2#0_1_2_4)): DatatypeType); 
                                                $Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                    $l#0_1_2_6#heap#0, 
                                                    g2#0_1_2_4, 
                                                    $Box(newState2#0_1_2_4))): DatatypeType))))), 
                                      (lambda $l#0_1_2_6#heap#0: Heap, $l#0_1_2_6#s#0: Box :: 
                                        $IsBox($l#0_1_2_6#s#0, TInt)), 
                                      (lambda $l#0_1_2_6#heap#0: Heap, $l#0_1_2_6#s#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_1_2_6#o#0: ref :: false))))), 
                                  $LS($LZ)))))))));
            // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(213,18)
            // TrCallStmt: Before ProcessCallStmt
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_2_2;
                assume $IsGoodHeap($lambdaHeap#0_1_2_2);
                assume $Heap == $lambdaHeap#0_1_2_2 || $HeapSucc($Heap, $lambdaHeap#0_1_2_2);
                havoc s#0_1_2_2;
                if (true)
                {
                    $_Frame#l0_1_2_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_2_2, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_2_2, 
                          h#0_0, 
                          $Box(s#0_1_2_2))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#187#0_1_2_0, $Box(_mcc#188#0_1_2_0)))
                    {
                        assume $IsBox(_mcc#187#0_1_2_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_2_1;
                        assume {:id "id482"} let#0_1_2_7#0#0 == _mcc#188#0_1_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_2_7#0#0, TInt);
                        assume {:id "id483"} newState#Z#0_1_2_1 == let#0_1_2_7#0#0;
                        havoc a#Z#0_1_2_1;
                        assume {:id "id484"} let#0_1_2_8#0#0 == _mcc#187#0_1_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_2_8#0#0, State._default.Associativity$A);
                        assume {:id "id485"} a#Z#0_1_2_1 == let#0_1_2_8#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_2_2, 
                              f#0, 
                              a#Z#0_1_2_1)): DatatypeType
                           == #State.M.State(_mcc#190#0_1_2_0))
                        {
                            assume $Is(_mcc#190#0_1_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_2_1;
                            assume {:id "id486"} let#0_1_2_9#0#0 == _mcc#190#0_1_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_2_9#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id487"} h2#Z#0_1_2_1 == let#0_1_2_9#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_2_3;
                                assume $IsGoodHeap($lambdaHeap#0_1_2_3);
                                assume $lambdaHeap#0_1_2_2 == $lambdaHeap#0_1_2_3
                                   || $HeapSucc($lambdaHeap#0_1_2_2, $lambdaHeap#0_1_2_3);
                                havoc s#0_1_2_3;
                                if (true)
                                {
                                    $_Frame#l0_1_2_3 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_2_3, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_2_3, 
                                          h2#Z#0_1_2_1, 
                                          $Box(s#0_1_2_3))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#191#0_1_2_0, $Box(_mcc#192#0_1_2_0)))
                                    {
                                        assume $IsBox(_mcc#191#0_1_2_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_2_1;
                                        assume {:id "id488"} let#0_1_2_10#0#0 == _mcc#192#0_1_2_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_2_10#0#0, TInt);
                                        assume {:id "id489"} newState2#Z#0_1_2_1 == let#0_1_2_10#0#0;
                                        havoc a2#Z#0_1_2_1;
                                        assume {:id "id490"} let#0_1_2_11#0#0 == _mcc#191#0_1_2_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_2_11#0#0, State._default.Associativity$B);
                                        assume {:id "id491"} a2#Z#0_1_2_1 == let#0_1_2_11#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_2_3, 
                                              g#0, 
                                              a2#Z#0_1_2_1)): DatatypeType
                                           == #State.M.State(_mcc#193#0_1_2_0))
                                        {
                                            assume $Is(_mcc#193#0_1_2_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_2_1;
                                            assume {:id "id492"} let#0_1_2_12#0#0 == _mcc#193#0_1_2_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_2_12#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id493"} g2#Z#0_1_2_1 == let#0_1_2_12#0#0;
                                            assume {:id "id494"} lambdaResult#0_1_2_3
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_2_2, 
                                                  g2#Z#0_1_2_1, 
                                                  $Box(newState2#Z#0_1_2_1))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_2_3, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                        }
                        else
                        {
                            assume false;
                        }

                        if ((var h2#0_1_2_5 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $lambdaHeap#0_1_2_2, 
                                    f#0, 
                                    a#Z#0_1_2_1)): DatatypeType); 
                            Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_9#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_1_2_9#heap#0: Heap, $l#0_1_2_9#s#0: Box :: 
                                          $Box((var newState2#0_1_2_7 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_2_9#heap#0, 
                                                        h2#0_1_2_5, 
                                                        $Box($Unbox($l#0_1_2_9#s#0): int))): DatatypeType)): int; 
                                              (var a2#0_1_2_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_2_9#heap#0, 
                                                        h2#0_1_2_5, 
                                                        $Box($Unbox($l#0_1_2_9#s#0): int))): DatatypeType); 
                                                (var g2#0_1_2_7 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                          Tclass.State.M(State._default.Associativity$C), 
                                                          $l#0_1_2_9#heap#0, 
                                                          g#0, 
                                                          a2#0_1_2_7)): DatatypeType); 
                                                  $Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                      $l#0_1_2_9#heap#0, 
                                                      g2#0_1_2_7, 
                                                      $Box(newState2#0_1_2_7))): DatatypeType))))), 
                                        (lambda $l#0_1_2_9#heap#0: Heap, $l#0_1_2_9#s#0: Box :: 
                                          $IsBox($l#0_1_2_9#s#0, TInt)), 
                                        (lambda $l#0_1_2_9#heap#0: Heap, $l#0_1_2_9#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_1_2_9#o#0: ref :: false))))), 
                                    $LS($LZ))))))
                           == #State.M.State(_mcc#189#0_1_2_0))
                        {
                            assume $Is(_mcc#189#0_1_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            havoc g3#Z#0_1_2_1;
                            assume {:id "id495"} let#0_1_2_13#0#0 == _mcc#189#0_1_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_2_13#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                            assume {:id "id496"} g3#Z#0_1_2_1 == let#0_1_2_13#0#0;
                            assume {:id "id497"} lambdaResult#0_1_2_2
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  g3#Z#0_1_2_1, 
                                  $Box(newState#Z#0_1_2_1))): DatatypeType;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_2_2, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_2_10#s#0: int, $l#0_1_2_10#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_2_10#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_2_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_2_10#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_2_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_2_10#s#0))): DatatypeType)
                   && (var a#0_1_2_2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_2_10#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_2_10#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_2_10#heap#0, 
                            f#0, 
                            a#0_1_2_2)): DatatypeType)
                       && (var h2#0_1_2_6 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_2_10#heap#0, 
                                f#0, 
                                a#0_1_2_2)): DatatypeType); 
                        (forall $l#0_1_2_11#s#0: int, $l#0_1_2_11#heap#0: Heap :: 
                          $IsGoodHeap($l#0_1_2_11#heap#0)
                             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_2_11#heap#0, 
                                    h2#0_1_2_6, 
                                    $Box($l#0_1_2_11#s#0))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_2_11#heap#0, 
                                    h2#0_1_2_6, 
                                    $Box($l#0_1_2_11#s#0))): DatatypeType)
                               && (var a2#0_1_2_8 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_2_11#heap#0, 
                                        h2#0_1_2_6, 
                                        $Box($l#0_1_2_11#s#0))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_2_11#heap#0, 
                                      g#0, 
                                      a2#0_1_2_8)): DatatypeType))))
                       && State.M.State_q((var h2#0_1_2_7 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                  Tclass.State.M(State._default.Associativity$B), 
                                  $l#0_1_2_10#heap#0, 
                                  f#0, 
                                  a#0_1_2_2)): DatatypeType); 
                          Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_12#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_1_2_12#heap#0: Heap, $l#0_1_2_12#s#0: Box :: 
                                        $Box((var newState2#0_1_2_9 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                      $l#0_1_2_12#heap#0, 
                                                      h2#0_1_2_7, 
                                                      $Box($Unbox($l#0_1_2_12#s#0): int))): DatatypeType)): int; 
                                            (var a2#0_1_2_9 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                      $l#0_1_2_12#heap#0, 
                                                      h2#0_1_2_7, 
                                                      $Box($Unbox($l#0_1_2_12#s#0): int))): DatatypeType); 
                                              (var g2#0_1_2_9 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                        Tclass.State.M(State._default.Associativity$C), 
                                                        $l#0_1_2_12#heap#0, 
                                                        g#0, 
                                                        a2#0_1_2_9)): DatatypeType); 
                                                $Unbox(Apply1(TInt, 
                                                    Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                    $l#0_1_2_12#heap#0, 
                                                    g2#0_1_2_9, 
                                                    $Box(newState2#0_1_2_9))): DatatypeType))))), 
                                      (lambda $l#0_1_2_12#heap#0: Heap, $l#0_1_2_12#s#0: Box :: 
                                        $IsBox($l#0_1_2_12#s#0, TInt)), 
                                      (lambda $l#0_1_2_12#heap#0: Heap, $l#0_1_2_12#s#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_1_2_12#o#0: ref :: false))))), 
                                  $LS($LZ)))))))));
            // ProcessCallStmt: CheckSubrange
            f##0_1_2_0 := Lit(AtLayer((lambda $l#0_1_2_14#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_2_14#heap#0: Heap, $l#0_1_2_14#s#0: Box :: 
                      $Box((var newState#0_1_2_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_2_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_2_14#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_2_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_2_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_2_14#s#0): int))): DatatypeType); 
                            (var g3#0_1_2_3 := State.M.runState((var h2#0_1_2_9 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                            Tclass.State.M(State._default.Associativity$B), 
                                            $l#0_1_2_14#heap#0, 
                                            f#0, 
                                            a#0_1_2_3)): DatatypeType); 
                                    Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_15#ly#0: LayerType :: 
                                              Handle1((lambda $l#0_1_2_15#heap#0: Heap, $l#0_1_2_15#s#0: Box :: 
                                                  $Box((var newState2#0_1_2_11 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                $l#0_1_2_15#heap#0, 
                                                                h2#0_1_2_9, 
                                                                $Box($Unbox($l#0_1_2_15#s#0): int))): DatatypeType)): int; 
                                                      (var a2#0_1_2_11 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                $l#0_1_2_15#heap#0, 
                                                                h2#0_1_2_9, 
                                                                $Box($Unbox($l#0_1_2_15#s#0): int))): DatatypeType); 
                                                        (var g2#0_1_2_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                  Tclass.State.M(State._default.Associativity$C), 
                                                                  $l#0_1_2_15#heap#0, 
                                                                  g#0, 
                                                                  a2#0_1_2_11)): DatatypeType); 
                                                          $Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                              $l#0_1_2_15#heap#0, 
                                                              g2#0_1_2_11, 
                                                              $Box(newState2#0_1_2_11))): DatatypeType))))), 
                                                (lambda $l#0_1_2_15#heap#0: Heap, $l#0_1_2_15#s#0: Box :: 
                                                  $IsBox($l#0_1_2_15#s#0, TInt)), 
                                                (lambda $l#0_1_2_15#heap#0: Heap, $l#0_1_2_15#s#0: Box :: 
                                                  SetRef_to_SetBox((lambda $l#0_1_2_15#o#0: ref :: false))))), 
                                            $l#0_1_2_14#ly#0)))))); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_1_2_14#heap#0, 
                                  g3#0_1_2_3, 
                                  $Box(newState#0_1_2_3))): DatatypeType))))), 
                    (lambda $l#0_1_2_14#heap#0: Heap, $l#0_1_2_14#s#0: Box :: 
                      $IsBox($l#0_1_2_14#s#0, TInt)), 
                    (lambda $l#0_1_2_14#heap#0: Heap, $l#0_1_2_14#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_2_14#o#0: ref :: false))))), 
                $LS($LZ)));
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_2_4;
                assume $IsGoodHeap($lambdaHeap#0_1_2_4);
                assume $Heap == $lambdaHeap#0_1_2_4 || $HeapSucc($Heap, $lambdaHeap#0_1_2_4);
                havoc s#0_1_2_4;
                if (true)
                {
                    $_Frame#l0_1_2_4 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_2_4, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_2_4, 
                          h#0_0, 
                          $Box(s#0_1_2_4))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#194#0_1_2_0, $Box(_mcc#195#0_1_2_0)))
                    {
                        assume $IsBox(_mcc#194#0_1_2_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_2_2;
                        assume {:id "id498"} let#0_1_2_14#0#0 == _mcc#195#0_1_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_2_14#0#0, TInt);
                        assume {:id "id499"} newState#Z#0_1_2_2 == let#0_1_2_14#0#0;
                        havoc a#Z#0_1_2_2;
                        assume {:id "id500"} let#0_1_2_15#0#0 == _mcc#194#0_1_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_2_15#0#0, State._default.Associativity$A);
                        assume {:id "id501"} a#Z#0_1_2_2 == let#0_1_2_15#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_2_4, 
                              f#0, 
                              a#Z#0_1_2_2)): DatatypeType
                           == #State.M.State(_mcc#196#0_1_2_0))
                        {
                            assume $Is(_mcc#196#0_1_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_2_2;
                            assume {:id "id502"} let#0_1_2_16#0#0 == _mcc#196#0_1_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_2_16#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id503"} h2#Z#0_1_2_2 == let#0_1_2_16#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_2_5;
                                assume $IsGoodHeap($lambdaHeap#0_1_2_5);
                                assume $lambdaHeap#0_1_2_4 == $lambdaHeap#0_1_2_5
                                   || $HeapSucc($lambdaHeap#0_1_2_4, $lambdaHeap#0_1_2_5);
                                havoc s#0_1_2_5;
                                if (true)
                                {
                                    $_Frame#l0_1_2_5 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_2_5, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_2_5, 
                                          h2#Z#0_1_2_2, 
                                          $Box(s#0_1_2_5))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#198#0_1_2_0, $Box(_mcc#199#0_1_2_0)))
                                    {
                                        assume $IsBox(_mcc#198#0_1_2_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_2_2;
                                        assume {:id "id504"} let#0_1_2_17#0#0 == _mcc#199#0_1_2_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_2_17#0#0, TInt);
                                        assume {:id "id505"} newState2#Z#0_1_2_2 == let#0_1_2_17#0#0;
                                        havoc a2#Z#0_1_2_2;
                                        assume {:id "id506"} let#0_1_2_18#0#0 == _mcc#198#0_1_2_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_2_18#0#0, State._default.Associativity$B);
                                        assume {:id "id507"} a2#Z#0_1_2_2 == let#0_1_2_18#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_2_5, 
                                              g#0, 
                                              a2#Z#0_1_2_2)): DatatypeType
                                           == #State.M.State(_mcc#200#0_1_2_0))
                                        {
                                            assume $Is(_mcc#200#0_1_2_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_2_2;
                                            assume {:id "id508"} let#0_1_2_19#0#0 == _mcc#200#0_1_2_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_2_19#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id509"} g2#Z#0_1_2_2 == let#0_1_2_19#0#0;
                                            assume {:id "id510"} lambdaResult#0_1_2_5
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_2_4, 
                                                  g2#Z#0_1_2_2, 
                                                  $Box(newState2#Z#0_1_2_2))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_2_5, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            if (Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_17#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_2_17#heap#0: Heap, $l#0_1_2_17#s#0: Box :: 
                                            $Box((var newState2#0_1_2_13 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_2_17#heap#0, 
                                                          h2#Z#0_1_2_2, 
                                                          $Box($Unbox($l#0_1_2_17#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_2_13 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_2_17#heap#0, 
                                                          h2#Z#0_1_2_2, 
                                                          $Box($Unbox($l#0_1_2_17#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_2_13 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_2_17#heap#0, 
                                                            g#0, 
                                                            a2#0_1_2_13)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_2_17#heap#0, 
                                                        g2#0_1_2_13, 
                                                        $Box(newState2#0_1_2_13))): DatatypeType))))), 
                                          (lambda $l#0_1_2_17#heap#0: Heap, $l#0_1_2_17#s#0: Box :: 
                                            $IsBox($l#0_1_2_17#s#0, TInt)), 
                                          (lambda $l#0_1_2_17#heap#0: Heap, $l#0_1_2_17#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_2_17#o#0: ref :: false))))), 
                                      $LS($LZ)))))
                               == #State.M.State(_mcc#197#0_1_2_0))
                            {
                                assume $Is(_mcc#197#0_1_2_0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                havoc g3#Z#0_1_2_2;
                                assume {:id "id511"} let#0_1_2_20#0#0 == _mcc#197#0_1_2_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_1_2_20#0#0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                assume {:id "id512"} g3#Z#0_1_2_2 == let#0_1_2_20#0#0;
                                assume {:id "id513"} lambdaResult#0_1_2_4
                                   == $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $Heap, 
                                      g3#Z#0_1_2_2, 
                                      $Box(newState#Z#0_1_2_2))): DatatypeType;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_1_2_4, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_2_18#s#0: int, $l#0_1_2_18#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_2_18#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_2_18#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_2_18#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_2_18#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_2_18#s#0))): DatatypeType)
                   && (var a#0_1_2_4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_2_18#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_2_18#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_2_18#heap#0, 
                            f#0, 
                            a#0_1_2_4)): DatatypeType)
                       && (var h2#0_1_2_10 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_2_18#heap#0, 
                                f#0, 
                                a#0_1_2_4)): DatatypeType); 
                        (forall $l#0_1_2_19#s#0: int, $l#0_1_2_19#heap#0: Heap :: 
                            $IsGoodHeap($l#0_1_2_19#heap#0)
                               ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                      $l#0_1_2_19#heap#0, 
                                      h2#0_1_2_10, 
                                      $Box($l#0_1_2_19#s#0))): DatatypeType)
                                 && 
                                _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                      $l#0_1_2_19#heap#0, 
                                      h2#0_1_2_10, 
                                      $Box($l#0_1_2_19#s#0))): DatatypeType)
                                 && (var a2#0_1_2_14 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_1_2_19#heap#0, 
                                          h2#0_1_2_10, 
                                          $Box($l#0_1_2_19#s#0))): DatatypeType); 
                                  State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                        Tclass.State.M(State._default.Associativity$C), 
                                        $l#0_1_2_19#heap#0, 
                                        g#0, 
                                        a2#0_1_2_14)): DatatypeType)))
                           && State.M.State_q(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_20#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_1_2_20#heap#0: Heap, $l#0_1_2_20#s#0: Box :: 
                                          $Box((var newState2#0_1_2_15 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_2_20#heap#0, 
                                                        h2#0_1_2_10, 
                                                        $Box($Unbox($l#0_1_2_20#s#0): int))): DatatypeType)): int; 
                                              (var a2#0_1_2_15 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_2_20#heap#0, 
                                                        h2#0_1_2_10, 
                                                        $Box($Unbox($l#0_1_2_20#s#0): int))): DatatypeType); 
                                                (var g2#0_1_2_15 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                          Tclass.State.M(State._default.Associativity$C), 
                                                          $l#0_1_2_20#heap#0, 
                                                          g#0, 
                                                          a2#0_1_2_15)): DatatypeType); 
                                                  $Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                      $l#0_1_2_20#heap#0, 
                                                      g2#0_1_2_15, 
                                                      $Box(newState2#0_1_2_15))): DatatypeType))))), 
                                        (lambda $l#0_1_2_20#heap#0: Heap, $l#0_1_2_20#s#0: Box :: 
                                          $IsBox($l#0_1_2_20#s#0, TInt)), 
                                        (lambda $l#0_1_2_20#heap#0: Heap, $l#0_1_2_20#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_1_2_20#o#0: ref :: false))))), 
                                    $LS($LZ)))))))));
            // ProcessCallStmt: CheckSubrange
            g##0_1_2_0 := Lit(AtLayer((lambda $l#0_1_2_22#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_2_22#heap#0: Heap, $l#0_1_2_22#s#0: Box :: 
                      $Box((var newState#0_1_2_5 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_2_22#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_2_22#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_2_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_2_22#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_2_22#s#0): int))): DatatypeType); 
                            (var h2#0_1_2_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_1_2_22#heap#0, 
                                      f#0, 
                                      a#0_1_2_5)): DatatypeType); 
                              (var g3#0_1_2_5 := Lit(State.M.runState(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_23#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_1_2_23#heap#0: Heap, $l#0_1_2_23#s#0: Box :: 
                                                    $Box((var newState2#0_1_2_17 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                  $l#0_1_2_23#heap#0, 
                                                                  h2#0_1_2_11, 
                                                                  $Box($Unbox($l#0_1_2_23#s#0): int))): DatatypeType)): int; 
                                                        (var a2#0_1_2_17 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                  $l#0_1_2_23#heap#0, 
                                                                  h2#0_1_2_11, 
                                                                  $Box($Unbox($l#0_1_2_23#s#0): int))): DatatypeType); 
                                                          (var g2#0_1_2_17 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                    Tclass.State.M(State._default.Associativity$C), 
                                                                    $l#0_1_2_23#heap#0, 
                                                                    g#0, 
                                                                    a2#0_1_2_17)): DatatypeType); 
                                                            $Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                                $l#0_1_2_23#heap#0, 
                                                                g2#0_1_2_17, 
                                                                $Box(newState2#0_1_2_17))): DatatypeType))))), 
                                                  (lambda $l#0_1_2_23#heap#0: Heap, $l#0_1_2_23#s#0: Box :: 
                                                    $IsBox($l#0_1_2_23#s#0, TInt)), 
                                                  (lambda $l#0_1_2_23#heap#0: Heap, $l#0_1_2_23#s#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_1_2_23#o#0: ref :: false))))), 
                                              $l#0_1_2_22#ly#0)))))); 
                                $Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                    $l#0_1_2_22#heap#0, 
                                    g3#0_1_2_5, 
                                    $Box(newState#0_1_2_5))): DatatypeType)))))), 
                    (lambda $l#0_1_2_22#heap#0: Heap, $l#0_1_2_22#s#0: Box :: 
                      $IsBox($l#0_1_2_22#s#0, TInt)), 
                    (lambda $l#0_1_2_22#heap#0: Heap, $l#0_1_2_22#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_2_22#o#0: ref :: false))))), 
                $LS($LZ)));
            call {:id "id514"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt), f##0_1_2_0, g##0_1_2_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_2_6;
                assume $IsGoodHeap($lambdaHeap#0_1_2_6);
                assume $Heap == $lambdaHeap#0_1_2_6 || $HeapSucc($Heap, $lambdaHeap#0_1_2_6);
                havoc s#0_1_2_6;
                if (true)
                {
                    $_Frame#l0_1_2_6 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_2_6, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_2_6, 
                          h#0_0, 
                          $Box(s#0_1_2_6))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#121#0_1_2_0, $Box(_mcc#122#0_1_2_0)))
                    {
                        assume $IsBox(_mcc#121#0_1_2_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_2_3;
                        assume {:id "id515"} let#0_1_2_21#0#0 == _mcc#122#0_1_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_2_21#0#0, TInt);
                        assume {:id "id516"} newState#Z#0_1_2_3 == let#0_1_2_21#0#0;
                        havoc a#Z#0_1_2_3;
                        assume {:id "id517"} let#0_1_2_22#0#0 == _mcc#121#0_1_2_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_2_22#0#0, State._default.Associativity$A);
                        assume {:id "id518"} a#Z#0_1_2_3 == let#0_1_2_22#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_2_6, 
                              f#0, 
                              a#Z#0_1_2_3)): DatatypeType
                           == #State.M.State(_mcc#123#0_1_2_0))
                        {
                            assume $Is(_mcc#123#0_1_2_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_2_3;
                            assume {:id "id519"} let#0_1_2_23#0#0 == _mcc#123#0_1_2_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_2_23#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id520"} h2#Z#0_1_2_3 == let#0_1_2_23#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_2_7;
                                assume $IsGoodHeap($lambdaHeap#0_1_2_7);
                                assume $lambdaHeap#0_1_2_6 == $lambdaHeap#0_1_2_7
                                   || $HeapSucc($lambdaHeap#0_1_2_6, $lambdaHeap#0_1_2_7);
                                havoc s#0_1_2_7;
                                if (true)
                                {
                                    $_Frame#l0_1_2_7 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_2_7, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_2_7, 
                                          h2#Z#0_1_2_3, 
                                          $Box(s#0_1_2_7))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#125#0_1_2_0, $Box(_mcc#126#0_1_2_0)))
                                    {
                                        assume $IsBox(_mcc#125#0_1_2_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_2_3;
                                        assume {:id "id521"} let#0_1_2_24#0#0 == _mcc#126#0_1_2_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_2_24#0#0, TInt);
                                        assume {:id "id522"} newState2#Z#0_1_2_3 == let#0_1_2_24#0#0;
                                        havoc a2#Z#0_1_2_3;
                                        assume {:id "id523"} let#0_1_2_25#0#0 == _mcc#125#0_1_2_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_2_25#0#0, State._default.Associativity$B);
                                        assume {:id "id524"} a2#Z#0_1_2_3 == let#0_1_2_25#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_2_7, 
                                              g#0, 
                                              a2#Z#0_1_2_3)): DatatypeType
                                           == #State.M.State(_mcc#127#0_1_2_0))
                                        {
                                            assume $Is(_mcc#127#0_1_2_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_2_3;
                                            assume {:id "id525"} let#0_1_2_26#0#0 == _mcc#127#0_1_2_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_2_26#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id526"} g2#Z#0_1_2_3 == let#0_1_2_26#0#0;
                                            assume {:id "id527"} lambdaResult#0_1_2_7
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_2_6, 
                                                  g2#Z#0_1_2_3, 
                                                  $Box(newState2#Z#0_1_2_3))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_2_7, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            if (Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_25#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_2_25#heap#0: Heap, $l#0_1_2_25#s#0: Box :: 
                                            $Box((var newState2#0_1_2_19 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_2_25#heap#0, 
                                                          h2#Z#0_1_2_3, 
                                                          $Box($Unbox($l#0_1_2_25#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_2_19 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_2_25#heap#0, 
                                                          h2#Z#0_1_2_3, 
                                                          $Box($Unbox($l#0_1_2_25#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_2_19 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_2_25#heap#0, 
                                                            g#0, 
                                                            a2#0_1_2_19)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_2_25#heap#0, 
                                                        g2#0_1_2_19, 
                                                        $Box(newState2#0_1_2_19))): DatatypeType))))), 
                                          (lambda $l#0_1_2_25#heap#0: Heap, $l#0_1_2_25#s#0: Box :: 
                                            $IsBox($l#0_1_2_25#s#0, TInt)), 
                                          (lambda $l#0_1_2_25#heap#0: Heap, $l#0_1_2_25#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_2_25#o#0: ref :: false))))), 
                                      $LS($LZ)))))
                               == #State.M.State(_mcc#124#0_1_2_0))
                            {
                                assume $Is(_mcc#124#0_1_2_0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                havoc g3#Z#0_1_2_3;
                                assume {:id "id528"} let#0_1_2_27#0#0 == _mcc#124#0_1_2_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_1_2_27#0#0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                assume {:id "id529"} g3#Z#0_1_2_3 == let#0_1_2_27#0#0;
                                assume {:id "id530"} lambdaResult#0_1_2_6
                                   == $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $Heap, 
                                      g3#Z#0_1_2_3, 
                                      $Box(newState#Z#0_1_2_3))): DatatypeType;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_1_2_6, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_2_28#s#0: int, $l#0_1_2_28#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_2_28#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_2_28#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_2_28#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_2_28#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_2_28#s#0))): DatatypeType)
                   && (var a#0_1_2_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_2_28#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_2_28#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_2_28#heap#0, 
                            f#0, 
                            a#0_1_2_7)): DatatypeType)
                       && (var h2#0_1_2_13 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_2_28#heap#0, 
                                f#0, 
                                a#0_1_2_7)): DatatypeType); 
                        (forall $l#0_1_2_29#s#0: int, $l#0_1_2_29#heap#0: Heap :: 
                            $IsGoodHeap($l#0_1_2_29#heap#0)
                               ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                      $l#0_1_2_29#heap#0, 
                                      h2#0_1_2_13, 
                                      $Box($l#0_1_2_29#s#0))): DatatypeType)
                                 && 
                                _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                      $l#0_1_2_29#heap#0, 
                                      h2#0_1_2_13, 
                                      $Box($l#0_1_2_29#s#0))): DatatypeType)
                                 && (var a2#0_1_2_21 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_1_2_29#heap#0, 
                                          h2#0_1_2_13, 
                                          $Box($l#0_1_2_29#s#0))): DatatypeType); 
                                  State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                        Tclass.State.M(State._default.Associativity$C), 
                                        $l#0_1_2_29#heap#0, 
                                        g#0, 
                                        a2#0_1_2_21)): DatatypeType)))
                           && State.M.State_q(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_30#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_1_2_30#heap#0: Heap, $l#0_1_2_30#s#0: Box :: 
                                          $Box((var newState2#0_1_2_22 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_2_30#heap#0, 
                                                        h2#0_1_2_13, 
                                                        $Box($Unbox($l#0_1_2_30#s#0): int))): DatatypeType)): int; 
                                              (var a2#0_1_2_22 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_2_30#heap#0, 
                                                        h2#0_1_2_13, 
                                                        $Box($Unbox($l#0_1_2_30#s#0): int))): DatatypeType); 
                                                (var g2#0_1_2_22 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                          Tclass.State.M(State._default.Associativity$C), 
                                                          $l#0_1_2_30#heap#0, 
                                                          g#0, 
                                                          a2#0_1_2_22)): DatatypeType); 
                                                  $Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                      $l#0_1_2_30#heap#0, 
                                                      g2#0_1_2_22, 
                                                      $Box(newState2#0_1_2_22))): DatatypeType))))), 
                                        (lambda $l#0_1_2_30#heap#0: Heap, $l#0_1_2_30#s#0: Box :: 
                                          $IsBox($l#0_1_2_30#s#0, TInt)), 
                                        (lambda $l#0_1_2_30#heap#0: Heap, $l#0_1_2_30#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_1_2_30#o#0: ref :: false))))), 
                                    $LS($LZ)))))))));
            // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            assert {:id "id531"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_36#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_2_36#heap#0: Heap, $l#0_1_2_36#s#0: Box :: 
                          $Box((var newState#0_1_2_10 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_2_36#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_2_36#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_2_10 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_2_36#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_2_36#s#0): int))): DatatypeType); 
                                (var g3#0_1_2_10 := State.M.runState((var h2#0_1_2_16 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                                Tclass.State.M(State._default.Associativity$B), 
                                                $l#0_1_2_36#heap#0, 
                                                f#0, 
                                                a#0_1_2_10)): DatatypeType); 
                                        Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_37#ly#0: LayerType :: 
                                                  Handle1((lambda $l#0_1_2_37#heap#0: Heap, $l#0_1_2_37#s#0: Box :: 
                                                      $Box((var newState2#0_1_2_26 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                    $l#0_1_2_37#heap#0, 
                                                                    h2#0_1_2_16, 
                                                                    $Box($Unbox($l#0_1_2_37#s#0): int))): DatatypeType)): int; 
                                                          (var a2#0_1_2_26 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                    $l#0_1_2_37#heap#0, 
                                                                    h2#0_1_2_16, 
                                                                    $Box($Unbox($l#0_1_2_37#s#0): int))): DatatypeType); 
                                                            (var g2#0_1_2_26 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                      Tclass.State.M(State._default.Associativity$C), 
                                                                      $l#0_1_2_37#heap#0, 
                                                                      g#0, 
                                                                      a2#0_1_2_26)): DatatypeType); 
                                                              $Unbox(Apply1(TInt, 
                                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                                  $l#0_1_2_37#heap#0, 
                                                                  g2#0_1_2_26, 
                                                                  $Box(newState2#0_1_2_26))): DatatypeType))))), 
                                                    (lambda $l#0_1_2_37#heap#0: Heap, $l#0_1_2_37#s#0: Box :: 
                                                      $IsBox($l#0_1_2_37#s#0, TInt)), 
                                                    (lambda $l#0_1_2_37#heap#0: Heap, $l#0_1_2_37#s#0: Box :: 
                                                      SetRef_to_SetBox((lambda $l#0_1_2_37#o#0: ref :: false))))), 
                                                $l#0_1_2_36#ly#0)))))); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_1_2_36#heap#0, 
                                      g3#0_1_2_10, 
                                      $Box(newState#0_1_2_10))): DatatypeType))))), 
                        (lambda $l#0_1_2_36#heap#0: Heap, $l#0_1_2_36#s#0: Box :: 
                          $IsBox($l#0_1_2_36#s#0, TInt)), 
                        (lambda $l#0_1_2_36#heap#0: Heap, $l#0_1_2_36#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_2_36#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_1_2_38#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_2_38#heap#0: Heap, $l#0_1_2_38#s#0: Box :: 
                          $Box((var newState#0_1_2_11 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_2_38#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_2_38#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_2_11 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_2_38#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_2_38#s#0): int))): DatatypeType); 
                                (var h2#0_1_2_17 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                          Tclass.State.M(State._default.Associativity$B), 
                                          $l#0_1_2_38#heap#0, 
                                          f#0, 
                                          a#0_1_2_11)): DatatypeType); 
                                  (var g3#0_1_2_11 := Lit(State.M.runState(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_2_39#ly#0: LayerType :: 
                                                    Handle1((lambda $l#0_1_2_39#heap#0: Heap, $l#0_1_2_39#s#0: Box :: 
                                                        $Box((var newState2#0_1_2_27 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                      $l#0_1_2_39#heap#0, 
                                                                      h2#0_1_2_17, 
                                                                      $Box($Unbox($l#0_1_2_39#s#0): int))): DatatypeType)): int; 
                                                            (var a2#0_1_2_27 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                      $l#0_1_2_39#heap#0, 
                                                                      h2#0_1_2_17, 
                                                                      $Box($Unbox($l#0_1_2_39#s#0): int))): DatatypeType); 
                                                              (var g2#0_1_2_27 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                        Tclass.State.M(State._default.Associativity$C), 
                                                                        $l#0_1_2_39#heap#0, 
                                                                        g#0, 
                                                                        a2#0_1_2_27)): DatatypeType); 
                                                                $Unbox(Apply1(TInt, 
                                                                    Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                                    $l#0_1_2_39#heap#0, 
                                                                    g2#0_1_2_27, 
                                                                    $Box(newState2#0_1_2_27))): DatatypeType))))), 
                                                      (lambda $l#0_1_2_39#heap#0: Heap, $l#0_1_2_39#s#0: Box :: 
                                                        $IsBox($l#0_1_2_39#s#0, TInt)), 
                                                      (lambda $l#0_1_2_39#heap#0: Heap, $l#0_1_2_39#s#0: Box :: 
                                                        SetRef_to_SetBox((lambda $l#0_1_2_39#o#0: ref :: false))))), 
                                                  $l#0_1_2_38#ly#0)))))); 
                                    $Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                        $l#0_1_2_38#heap#0, 
                                        g3#0_1_2_11, 
                                        $Box(newState#0_1_2_11))): DatatypeType)))))), 
                        (lambda $l#0_1_2_38#heap#0: Heap, $l#0_1_2_38#s#0: Box :: 
                          $IsBox($l#0_1_2_38#s#0, TInt)), 
                        (lambda $l#0_1_2_38#heap#0: Heap, $l#0_1_2_38#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_2_38#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_1_0;
                assume $IsGoodHeap($lambdaHeap#0_1_1_0);
                assume $Heap == $lambdaHeap#0_1_1_0 || $HeapSucc($Heap, $lambdaHeap#0_1_1_0);
                havoc s#0_1_1_0;
                if (true)
                {
                    $_Frame#l0_1_1_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_1_0, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_1_0, 
                          h#0_0, 
                          $Box(s#0_1_1_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#128#0_1_1_0, $Box(_mcc#129#0_1_1_0)))
                    {
                        assume $IsBox(_mcc#128#0_1_1_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_1_0;
                        assume {:id "id404"} let#0_1_1_0#0#0 == _mcc#129#0_1_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_1_0#0#0, TInt);
                        assume {:id "id405"} newState#Z#0_1_1_0 == let#0_1_1_0#0#0;
                        havoc a#Z#0_1_1_0;
                        assume {:id "id406"} let#0_1_1_1#0#0 == _mcc#128#0_1_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_1_1#0#0, State._default.Associativity$A);
                        assume {:id "id407"} a#Z#0_1_1_0 == let#0_1_1_1#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_1_0, 
                              f#0, 
                              a#Z#0_1_1_0)): DatatypeType
                           == #State.M.State(_mcc#130#0_1_1_0))
                        {
                            assume $Is(_mcc#130#0_1_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_1_0;
                            assume {:id "id408"} let#0_1_1_2#0#0 == _mcc#130#0_1_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_1_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id409"} h2#Z#0_1_1_0 == let#0_1_1_2#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_1_1;
                                assume $IsGoodHeap($lambdaHeap#0_1_1_1);
                                assume $lambdaHeap#0_1_1_0 == $lambdaHeap#0_1_1_1
                                   || $HeapSucc($lambdaHeap#0_1_1_0, $lambdaHeap#0_1_1_1);
                                havoc s#0_1_1_1;
                                if (true)
                                {
                                    $_Frame#l0_1_1_1 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_1_1, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_1_1, 
                                          h2#Z#0_1_1_0, 
                                          $Box(s#0_1_1_1))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#132#0_1_1_0, $Box(_mcc#133#0_1_1_0)))
                                    {
                                        assume $IsBox(_mcc#132#0_1_1_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_1_0;
                                        assume {:id "id410"} let#0_1_1_3#0#0 == _mcc#133#0_1_1_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_1_3#0#0, TInt);
                                        assume {:id "id411"} newState2#Z#0_1_1_0 == let#0_1_1_3#0#0;
                                        havoc a2#Z#0_1_1_0;
                                        assume {:id "id412"} let#0_1_1_4#0#0 == _mcc#132#0_1_1_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_1_4#0#0, State._default.Associativity$B);
                                        assume {:id "id413"} a2#Z#0_1_1_0 == let#0_1_1_4#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_1_1, 
                                              g#0, 
                                              a2#Z#0_1_1_0)): DatatypeType
                                           == #State.M.State(_mcc#134#0_1_1_0))
                                        {
                                            assume $Is(_mcc#134#0_1_1_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_1_0;
                                            assume {:id "id414"} let#0_1_1_5#0#0 == _mcc#134#0_1_1_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_1_5#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id415"} g2#Z#0_1_1_0 == let#0_1_1_5#0#0;
                                            assume {:id "id416"} lambdaResult#0_1_1_1
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_1_0, 
                                                  g2#Z#0_1_1_0, 
                                                  $Box(newState2#Z#0_1_1_0))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_1_1, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            if (Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_1_1#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_1_1#heap#0: Heap, $l#0_1_1_1#s#0: Box :: 
                                            $Box((var newState2#0_1_1_1 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_1#heap#0, 
                                                          h2#Z#0_1_1_0, 
                                                          $Box($Unbox($l#0_1_1_1#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_1_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_1#heap#0, 
                                                          h2#Z#0_1_1_0, 
                                                          $Box($Unbox($l#0_1_1_1#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_1_1 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_1_1#heap#0, 
                                                            g#0, 
                                                            a2#0_1_1_1)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_1_1#heap#0, 
                                                        g2#0_1_1_1, 
                                                        $Box(newState2#0_1_1_1))): DatatypeType))))), 
                                          (lambda $l#0_1_1_1#heap#0: Heap, $l#0_1_1_1#s#0: Box :: 
                                            $IsBox($l#0_1_1_1#s#0, TInt)), 
                                          (lambda $l#0_1_1_1#heap#0: Heap, $l#0_1_1_1#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_1_1#o#0: ref :: false))))), 
                                      $LS($LZ)))))
                               == #State.M.State(_mcc#131#0_1_1_0))
                            {
                                assume $Is(_mcc#131#0_1_1_0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                havoc g3#Z#0_1_1_0;
                                assume {:id "id417"} let#0_1_1_6#0#0 == _mcc#131#0_1_1_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_1_1_6#0#0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                assume {:id "id418"} g3#Z#0_1_1_0 == let#0_1_1_6#0#0;
                                assume {:id "id419"} lambdaResult#0_1_1_0
                                   == $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $Heap, 
                                      g3#Z#0_1_1_0, 
                                      $Box(newState#Z#0_1_1_0))): DatatypeType;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_1_1_0, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_1_4#s#0: int, $l#0_1_1_4#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_1_4#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_1_4#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_1_4#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_1_4#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_1_4#s#0))): DatatypeType)
                   && (var a#0_1_1_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_1_4#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_1_4#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_1_4#heap#0, 
                            f#0, 
                            a#0_1_1_1)): DatatypeType)
                       && (var h2#0_1_1_1 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_1_4#heap#0, 
                                f#0, 
                                a#0_1_1_1)): DatatypeType); 
                        (forall $l#0_1_1_5#s#0: int, $l#0_1_1_5#heap#0: Heap :: 
                            $IsGoodHeap($l#0_1_1_5#heap#0)
                               ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                      $l#0_1_1_5#heap#0, 
                                      h2#0_1_1_1, 
                                      $Box($l#0_1_1_5#s#0))): DatatypeType)
                                 && 
                                _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                      $l#0_1_1_5#heap#0, 
                                      h2#0_1_1_1, 
                                      $Box($l#0_1_1_5#s#0))): DatatypeType)
                                 && (var a2#0_1_1_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_1_1_5#heap#0, 
                                          h2#0_1_1_1, 
                                          $Box($l#0_1_1_5#s#0))): DatatypeType); 
                                  State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                        Tclass.State.M(State._default.Associativity$C), 
                                        $l#0_1_1_5#heap#0, 
                                        g#0, 
                                        a2#0_1_1_3)): DatatypeType)))
                           && State.M.State_q(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_1_6#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_1_1_6#heap#0: Heap, $l#0_1_1_6#s#0: Box :: 
                                          $Box((var newState2#0_1_1_4 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_1_6#heap#0, 
                                                        h2#0_1_1_1, 
                                                        $Box($Unbox($l#0_1_1_6#s#0): int))): DatatypeType)): int; 
                                              (var a2#0_1_1_4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_1_6#heap#0, 
                                                        h2#0_1_1_1, 
                                                        $Box($Unbox($l#0_1_1_6#s#0): int))): DatatypeType); 
                                                (var g2#0_1_1_4 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                          Tclass.State.M(State._default.Associativity$C), 
                                                          $l#0_1_1_6#heap#0, 
                                                          g#0, 
                                                          a2#0_1_1_4)): DatatypeType); 
                                                  $Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                      $l#0_1_1_6#heap#0, 
                                                      g2#0_1_1_4, 
                                                      $Box(newState2#0_1_1_4))): DatatypeType))))), 
                                        (lambda $l#0_1_1_6#heap#0: Heap, $l#0_1_1_6#s#0: Box :: 
                                          $IsBox($l#0_1_1_6#s#0, TInt)), 
                                        (lambda $l#0_1_1_6#heap#0: Heap, $l#0_1_1_6#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_1_1_6#o#0: ref :: false))))), 
                                    $LS($LZ)))))))));
            // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(235,17)
            // TrCallStmt: Before ProcessCallStmt
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_1_2;
                assume $IsGoodHeap($lambdaHeap#0_1_1_2);
                assume $Heap == $lambdaHeap#0_1_1_2 || $HeapSucc($Heap, $lambdaHeap#0_1_1_2);
                havoc s#0_1_1_2;
                if (true)
                {
                    $_Frame#l0_1_1_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_1_2, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_1_2, 
                          h#0_0, 
                          $Box(s#0_1_1_2))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#201#0_1_1_0, $Box(_mcc#202#0_1_1_0)))
                    {
                        assume $IsBox(_mcc#201#0_1_1_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_1_1;
                        assume {:id "id420"} let#0_1_1_7#0#0 == _mcc#202#0_1_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_1_7#0#0, TInt);
                        assume {:id "id421"} newState#Z#0_1_1_1 == let#0_1_1_7#0#0;
                        havoc a#Z#0_1_1_1;
                        assume {:id "id422"} let#0_1_1_8#0#0 == _mcc#201#0_1_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_1_8#0#0, State._default.Associativity$A);
                        assume {:id "id423"} a#Z#0_1_1_1 == let#0_1_1_8#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_1_2, 
                              f#0, 
                              a#Z#0_1_1_1)): DatatypeType
                           == #State.M.State(_mcc#203#0_1_1_0))
                        {
                            assume $Is(_mcc#203#0_1_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_1_1;
                            assume {:id "id424"} let#0_1_1_9#0#0 == _mcc#203#0_1_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_1_9#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id425"} h2#Z#0_1_1_1 == let#0_1_1_9#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_1_3;
                                assume $IsGoodHeap($lambdaHeap#0_1_1_3);
                                assume $lambdaHeap#0_1_1_2 == $lambdaHeap#0_1_1_3
                                   || $HeapSucc($lambdaHeap#0_1_1_2, $lambdaHeap#0_1_1_3);
                                havoc s#0_1_1_3;
                                if (true)
                                {
                                    $_Frame#l0_1_1_3 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_1_3, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_1_3, 
                                          h2#Z#0_1_1_1, 
                                          $Box(s#0_1_1_3))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#205#0_1_1_0, $Box(_mcc#206#0_1_1_0)))
                                    {
                                        assume $IsBox(_mcc#205#0_1_1_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_1_1;
                                        assume {:id "id426"} let#0_1_1_10#0#0 == _mcc#206#0_1_1_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_1_10#0#0, TInt);
                                        assume {:id "id427"} newState2#Z#0_1_1_1 == let#0_1_1_10#0#0;
                                        havoc a2#Z#0_1_1_1;
                                        assume {:id "id428"} let#0_1_1_11#0#0 == _mcc#205#0_1_1_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_1_11#0#0, State._default.Associativity$B);
                                        assume {:id "id429"} a2#Z#0_1_1_1 == let#0_1_1_11#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_1_3, 
                                              g#0, 
                                              a2#Z#0_1_1_1)): DatatypeType
                                           == #State.M.State(_mcc#207#0_1_1_0))
                                        {
                                            assume $Is(_mcc#207#0_1_1_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_1_1;
                                            assume {:id "id430"} let#0_1_1_12#0#0 == _mcc#207#0_1_1_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_1_12#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id431"} g2#Z#0_1_1_1 == let#0_1_1_12#0#0;
                                            assume {:id "id432"} lambdaResult#0_1_1_3
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_1_2, 
                                                  g2#Z#0_1_1_1, 
                                                  $Box(newState2#Z#0_1_1_1))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_1_3, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            if (Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_1_9#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_1_9#heap#0: Heap, $l#0_1_1_9#s#0: Box :: 
                                            $Box((var newState2#0_1_1_7 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_9#heap#0, 
                                                          h2#Z#0_1_1_1, 
                                                          $Box($Unbox($l#0_1_1_9#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_1_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_9#heap#0, 
                                                          h2#Z#0_1_1_1, 
                                                          $Box($Unbox($l#0_1_1_9#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_1_7 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_1_9#heap#0, 
                                                            g#0, 
                                                            a2#0_1_1_7)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_1_9#heap#0, 
                                                        g2#0_1_1_7, 
                                                        $Box(newState2#0_1_1_7))): DatatypeType))))), 
                                          (lambda $l#0_1_1_9#heap#0: Heap, $l#0_1_1_9#s#0: Box :: 
                                            $IsBox($l#0_1_1_9#s#0, TInt)), 
                                          (lambda $l#0_1_1_9#heap#0: Heap, $l#0_1_1_9#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_1_9#o#0: ref :: false))))), 
                                      $LS($LZ)))))
                               == #State.M.State(_mcc#204#0_1_1_0))
                            {
                                assume $Is(_mcc#204#0_1_1_0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                havoc g3#Z#0_1_1_1;
                                assume {:id "id433"} let#0_1_1_13#0#0 == _mcc#204#0_1_1_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_1_1_13#0#0, 
                                  Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                assume {:id "id434"} g3#Z#0_1_1_1 == let#0_1_1_13#0#0;
                                assume {:id "id435"} lambdaResult#0_1_1_2
                                   == $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $Heap, 
                                      g3#Z#0_1_1_1, 
                                      $Box(newState#Z#0_1_1_1))): DatatypeType;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_1_1_2, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_1_10#s#0: int, $l#0_1_1_10#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_1_10#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_1_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_1_10#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_1_10#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_1_10#s#0))): DatatypeType)
                   && (var a#0_1_1_2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_1_10#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_1_10#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_1_10#heap#0, 
                            f#0, 
                            a#0_1_1_2)): DatatypeType)
                       && (var h2#0_1_1_2 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_1_10#heap#0, 
                                f#0, 
                                a#0_1_1_2)): DatatypeType); 
                        (forall $l#0_1_1_11#s#0: int, $l#0_1_1_11#heap#0: Heap :: 
                            $IsGoodHeap($l#0_1_1_11#heap#0)
                               ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                      $l#0_1_1_11#heap#0, 
                                      h2#0_1_1_2, 
                                      $Box($l#0_1_1_11#s#0))): DatatypeType)
                                 && 
                                _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                      $l#0_1_1_11#heap#0, 
                                      h2#0_1_1_2, 
                                      $Box($l#0_1_1_11#s#0))): DatatypeType)
                                 && (var a2#0_1_1_8 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_1_1_11#heap#0, 
                                          h2#0_1_1_2, 
                                          $Box($l#0_1_1_11#s#0))): DatatypeType); 
                                  State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                        Tclass.State.M(State._default.Associativity$C), 
                                        $l#0_1_1_11#heap#0, 
                                        g#0, 
                                        a2#0_1_1_8)): DatatypeType)))
                           && State.M.State_q(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_1_12#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_1_1_12#heap#0: Heap, $l#0_1_1_12#s#0: Box :: 
                                          $Box((var newState2#0_1_1_9 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_1_12#heap#0, 
                                                        h2#0_1_1_2, 
                                                        $Box($Unbox($l#0_1_1_12#s#0): int))): DatatypeType)): int; 
                                              (var a2#0_1_1_9 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                        $l#0_1_1_12#heap#0, 
                                                        h2#0_1_1_2, 
                                                        $Box($Unbox($l#0_1_1_12#s#0): int))): DatatypeType); 
                                                (var g2#0_1_1_9 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                          Tclass.State.M(State._default.Associativity$C), 
                                                          $l#0_1_1_12#heap#0, 
                                                          g#0, 
                                                          a2#0_1_1_9)): DatatypeType); 
                                                  $Unbox(Apply1(TInt, 
                                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                      $l#0_1_1_12#heap#0, 
                                                      g2#0_1_1_9, 
                                                      $Box(newState2#0_1_1_9))): DatatypeType))))), 
                                        (lambda $l#0_1_1_12#heap#0: Heap, $l#0_1_1_12#s#0: Box :: 
                                          $IsBox($l#0_1_1_12#s#0, TInt)), 
                                        (lambda $l#0_1_1_12#heap#0: Heap, $l#0_1_1_12#s#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_1_1_12#o#0: ref :: false))))), 
                                    $LS($LZ)))))))));
            // ProcessCallStmt: CheckSubrange
            f##0_1_1_0 := Lit(AtLayer((lambda $l#0_1_1_14#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_1_14#heap#0: Heap, $l#0_1_1_14#s#0: Box :: 
                      $Box((var newState#0_1_1_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_1_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_1_14#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_1_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_1_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_1_14#s#0): int))): DatatypeType); 
                            (var h2#0_1_1_3 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_1_1_14#heap#0, 
                                      f#0, 
                                      a#0_1_1_3)): DatatypeType); 
                              (var g3#0_1_1_3 := Lit(State.M.runState(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_1_15#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_1_1_15#heap#0: Heap, $l#0_1_1_15#s#0: Box :: 
                                                    $Box((var newState2#0_1_1_11 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                  $l#0_1_1_15#heap#0, 
                                                                  h2#0_1_1_3, 
                                                                  $Box($Unbox($l#0_1_1_15#s#0): int))): DatatypeType)): int; 
                                                        (var a2#0_1_1_11 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                  $l#0_1_1_15#heap#0, 
                                                                  h2#0_1_1_3, 
                                                                  $Box($Unbox($l#0_1_1_15#s#0): int))): DatatypeType); 
                                                          (var g2#0_1_1_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                    Tclass.State.M(State._default.Associativity$C), 
                                                                    $l#0_1_1_15#heap#0, 
                                                                    g#0, 
                                                                    a2#0_1_1_11)): DatatypeType); 
                                                            $Unbox(Apply1(TInt, 
                                                                Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                                $l#0_1_1_15#heap#0, 
                                                                g2#0_1_1_11, 
                                                                $Box(newState2#0_1_1_11))): DatatypeType))))), 
                                                  (lambda $l#0_1_1_15#heap#0: Heap, $l#0_1_1_15#s#0: Box :: 
                                                    $IsBox($l#0_1_1_15#s#0, TInt)), 
                                                  (lambda $l#0_1_1_15#heap#0: Heap, $l#0_1_1_15#s#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_1_1_15#o#0: ref :: false))))), 
                                              $l#0_1_1_14#ly#0)))))); 
                                $Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                    $l#0_1_1_14#heap#0, 
                                    g3#0_1_1_3, 
                                    $Box(newState#0_1_1_3))): DatatypeType)))))), 
                    (lambda $l#0_1_1_14#heap#0: Heap, $l#0_1_1_14#s#0: Box :: 
                      $IsBox($l#0_1_1_14#s#0, TInt)), 
                    (lambda $l#0_1_1_14#heap#0: Heap, $l#0_1_1_14#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_1_14#o#0: ref :: false))))), 
                $LS($LZ)));
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_1_4;
                assume $IsGoodHeap($lambdaHeap#0_1_1_4);
                assume $Heap == $lambdaHeap#0_1_1_4 || $HeapSucc($Heap, $lambdaHeap#0_1_1_4);
                havoc s#0_1_1_4;
                if (true)
                {
                    $_Frame#l0_1_1_4 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_1_4, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_1_4, 
                          h#0_0, 
                          $Box(s#0_1_1_4))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#208#0_1_1_0, $Box(_mcc#209#0_1_1_0)))
                    {
                        assume $IsBox(_mcc#208#0_1_1_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_1_2;
                        assume {:id "id436"} let#0_1_1_14#0#0 == _mcc#209#0_1_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_1_14#0#0, TInt);
                        assume {:id "id437"} newState#Z#0_1_1_2 == let#0_1_1_14#0#0;
                        havoc a#Z#0_1_1_2;
                        assume {:id "id438"} let#0_1_1_15#0#0 == _mcc#208#0_1_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_1_15#0#0, State._default.Associativity$A);
                        assume {:id "id439"} a#Z#0_1_1_2 == let#0_1_1_15#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_1_4, 
                              f#0, 
                              a#Z#0_1_1_2)): DatatypeType
                           == #State.M.State(_mcc#210#0_1_1_0))
                        {
                            assume $Is(_mcc#210#0_1_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_1_2;
                            assume {:id "id440"} let#0_1_1_16#0#0 == _mcc#210#0_1_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_1_16#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id441"} h2#Z#0_1_1_2 == let#0_1_1_16#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_1_5;
                                assume $IsGoodHeap($lambdaHeap#0_1_1_5);
                                assume $lambdaHeap#0_1_1_4 == $lambdaHeap#0_1_1_5
                                   || $HeapSucc($lambdaHeap#0_1_1_4, $lambdaHeap#0_1_1_5);
                                havoc s#0_1_1_5;
                                if (true)
                                {
                                    $_Frame#l0_1_1_5 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_1_5, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_1_5, 
                                          h2#Z#0_1_1_2, 
                                          $Box(s#0_1_1_5))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#211#0_1_1_0, $Box(_mcc#212#0_1_1_0)))
                                    {
                                        assume $IsBox(_mcc#211#0_1_1_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_1_2;
                                        assume {:id "id442"} let#0_1_1_17#0#0 == _mcc#212#0_1_1_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_1_17#0#0, TInt);
                                        assume {:id "id443"} newState2#Z#0_1_1_2 == let#0_1_1_17#0#0;
                                        havoc a2#Z#0_1_1_2;
                                        assume {:id "id444"} let#0_1_1_18#0#0 == _mcc#211#0_1_1_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_1_18#0#0, State._default.Associativity$B);
                                        assume {:id "id445"} a2#Z#0_1_1_2 == let#0_1_1_18#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_1_5, 
                                              g#0, 
                                              a2#Z#0_1_1_2)): DatatypeType
                                           == #State.M.State(_mcc#213#0_1_1_0))
                                        {
                                            assume $Is(_mcc#213#0_1_1_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_1_2;
                                            assume {:id "id446"} let#0_1_1_19#0#0 == _mcc#213#0_1_1_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_1_19#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id447"} g2#Z#0_1_1_2 == let#0_1_1_19#0#0;
                                            assume {:id "id448"} lambdaResult#0_1_1_5
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_1_4, 
                                                  g2#Z#0_1_1_2, 
                                                  $Box(newState2#Z#0_1_1_2))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_1_5, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            assume {:id "id449"} lambdaResult#0_1_1_4
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  Lit(AtLayer((lambda $l#0_1_1_18#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_1_18#heap#0: Heap, $l#0_1_1_18#s#0: Box :: 
                                            $Box((var newState2#0_1_1_14 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_18#heap#0, 
                                                          h2#Z#0_1_1_2, 
                                                          $Box($Unbox($l#0_1_1_18#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_1_14 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_18#heap#0, 
                                                          h2#Z#0_1_1_2, 
                                                          $Box($Unbox($l#0_1_1_18#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_1_14 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_1_18#heap#0, 
                                                            g#0, 
                                                            a2#0_1_1_14)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_1_18#heap#0, 
                                                        g2#0_1_1_14, 
                                                        $Box(newState2#0_1_1_14))): DatatypeType))))), 
                                          (lambda $l#0_1_1_18#heap#0: Heap, $l#0_1_1_18#s#0: Box :: 
                                            $IsBox($l#0_1_1_18#s#0, TInt)), 
                                          (lambda $l#0_1_1_18#heap#0: Heap, $l#0_1_1_18#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_1_18#o#0: ref :: false))))), 
                                      $LS($LZ))), 
                                  $Box(newState#Z#0_1_1_2))): DatatypeType;
                            assume (forall $l#0_1_1_19#s#0: int, $l#0_1_1_19#heap#0: Heap :: 
                              $IsGoodHeap($l#0_1_1_19#heap#0)
                                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_1_19#heap#0, 
                                        h2#Z#0_1_1_2, 
                                        $Box($l#0_1_1_19#s#0))): DatatypeType)
                                   && 
                                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_1_19#heap#0, 
                                        h2#Z#0_1_1_2, 
                                        $Box($l#0_1_1_19#s#0))): DatatypeType)
                                   && (var a2#0_1_1_15 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_1_1_19#heap#0, 
                                            h2#Z#0_1_1_2, 
                                            $Box($l#0_1_1_19#s#0))): DatatypeType); 
                                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_1_1_19#heap#0, 
                                          g#0, 
                                          a2#0_1_1_15)): DatatypeType)));
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_1_4, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_1_20#s#0: int, $l#0_1_1_20#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_1_20#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_1_20#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_1_20#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_1_20#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_1_20#s#0))): DatatypeType)
                   && (var a#0_1_1_4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_1_20#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_1_20#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_1_20#heap#0, 
                            f#0, 
                            a#0_1_1_4)): DatatypeType)
                       && (var h2#0_1_1_4 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_1_20#heap#0, 
                                f#0, 
                                a#0_1_1_4)): DatatypeType); 
                        (forall $l#0_1_1_21#s#0: int, $l#0_1_1_21#heap#0: Heap :: 
                          $IsGoodHeap($l#0_1_1_21#heap#0)
                             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_1_21#heap#0, 
                                    h2#0_1_1_4, 
                                    $Box($l#0_1_1_21#s#0))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_1_21#heap#0, 
                                    h2#0_1_1_4, 
                                    $Box($l#0_1_1_21#s#0))): DatatypeType)
                               && (var a2#0_1_1_16 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_1_21#heap#0, 
                                        h2#0_1_1_4, 
                                        $Box($l#0_1_1_21#s#0))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_1_21#heap#0, 
                                      g#0, 
                                      a2#0_1_1_16)): DatatypeType))))));
            // ProcessCallStmt: CheckSubrange
            g##0_1_1_0 := Lit(AtLayer((lambda $l#0_1_1_22#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_1_22#heap#0: Heap, $l#0_1_1_22#s#0: Box :: 
                      $Box((var newState#0_1_1_5 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_1_22#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_1_22#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_1_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_1_22#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_1_22#s#0): int))): DatatypeType); 
                            (var h2#0_1_1_5 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_1_1_22#heap#0, 
                                      f#0, 
                                      a#0_1_1_5)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_1_1_22#heap#0, 
                                  Lit(AtLayer((lambda $l#0_1_1_23#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_1_23#heap#0: Heap, $l#0_1_1_23#s#0: Box :: 
                                            $Box((var newState2#0_1_1_17 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_23#heap#0, 
                                                          h2#0_1_1_5, 
                                                          $Box($Unbox($l#0_1_1_23#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_1_17 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_23#heap#0, 
                                                          h2#0_1_1_5, 
                                                          $Box($Unbox($l#0_1_1_23#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_1_17 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_1_23#heap#0, 
                                                            g#0, 
                                                            a2#0_1_1_17)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_1_23#heap#0, 
                                                        g2#0_1_1_17, 
                                                        $Box(newState2#0_1_1_17))): DatatypeType))))), 
                                          (lambda $l#0_1_1_23#heap#0: Heap, $l#0_1_1_23#s#0: Box :: 
                                            $IsBox($l#0_1_1_23#s#0, TInt)), 
                                          (lambda $l#0_1_1_23#heap#0: Heap, $l#0_1_1_23#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_1_23#o#0: ref :: false))))), 
                                      $l#0_1_1_22#ly#0)), 
                                  $Box(newState#0_1_1_5))): DatatypeType))))), 
                    (lambda $l#0_1_1_22#heap#0: Heap, $l#0_1_1_22#s#0: Box :: 
                      $IsBox($l#0_1_1_22#s#0, TInt)), 
                    (lambda $l#0_1_1_22#heap#0: Heap, $l#0_1_1_22#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_1_22#o#0: ref :: false))))), 
                $LS($LZ)));
            call {:id "id450"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt), f##0_1_1_0, g##0_1_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_1_6;
                assume $IsGoodHeap($lambdaHeap#0_1_1_6);
                assume $Heap == $lambdaHeap#0_1_1_6 || $HeapSucc($Heap, $lambdaHeap#0_1_1_6);
                havoc s#0_1_1_6;
                if (true)
                {
                    $_Frame#l0_1_1_6 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_1_6, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_1_6, 
                          h#0_0, 
                          $Box(s#0_1_1_6))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#135#0_1_1_0, $Box(_mcc#136#0_1_1_0)))
                    {
                        assume $IsBox(_mcc#135#0_1_1_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_1_3;
                        assume {:id "id451"} let#0_1_1_20#0#0 == _mcc#136#0_1_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_1_20#0#0, TInt);
                        assume {:id "id452"} newState#Z#0_1_1_3 == let#0_1_1_20#0#0;
                        havoc a#Z#0_1_1_3;
                        assume {:id "id453"} let#0_1_1_21#0#0 == _mcc#135#0_1_1_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_1_21#0#0, State._default.Associativity$A);
                        assume {:id "id454"} a#Z#0_1_1_3 == let#0_1_1_21#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_1_6, 
                              f#0, 
                              a#Z#0_1_1_3)): DatatypeType
                           == #State.M.State(_mcc#137#0_1_1_0))
                        {
                            assume $Is(_mcc#137#0_1_1_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_1_3;
                            assume {:id "id455"} let#0_1_1_22#0#0 == _mcc#137#0_1_1_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_1_22#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id456"} h2#Z#0_1_1_3 == let#0_1_1_22#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_1_7;
                                assume $IsGoodHeap($lambdaHeap#0_1_1_7);
                                assume $lambdaHeap#0_1_1_6 == $lambdaHeap#0_1_1_7
                                   || $HeapSucc($lambdaHeap#0_1_1_6, $lambdaHeap#0_1_1_7);
                                havoc s#0_1_1_7;
                                if (true)
                                {
                                    $_Frame#l0_1_1_7 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_1_7, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_1_7, 
                                          h2#Z#0_1_1_3, 
                                          $Box(s#0_1_1_7))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#138#0_1_1_0, $Box(_mcc#139#0_1_1_0)))
                                    {
                                        assume $IsBox(_mcc#138#0_1_1_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_1_3;
                                        assume {:id "id457"} let#0_1_1_23#0#0 == _mcc#139#0_1_1_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_1_23#0#0, TInt);
                                        assume {:id "id458"} newState2#Z#0_1_1_3 == let#0_1_1_23#0#0;
                                        havoc a2#Z#0_1_1_3;
                                        assume {:id "id459"} let#0_1_1_24#0#0 == _mcc#138#0_1_1_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_1_24#0#0, State._default.Associativity$B);
                                        assume {:id "id460"} a2#Z#0_1_1_3 == let#0_1_1_24#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_1_7, 
                                              g#0, 
                                              a2#Z#0_1_1_3)): DatatypeType
                                           == #State.M.State(_mcc#140#0_1_1_0))
                                        {
                                            assume $Is(_mcc#140#0_1_1_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_1_3;
                                            assume {:id "id461"} let#0_1_1_25#0#0 == _mcc#140#0_1_1_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_1_25#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id462"} g2#Z#0_1_1_3 == let#0_1_1_25#0#0;
                                            assume {:id "id463"} lambdaResult#0_1_1_7
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_1_6, 
                                                  g2#Z#0_1_1_3, 
                                                  $Box(newState2#Z#0_1_1_3))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_1_7, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            assume {:id "id464"} lambdaResult#0_1_1_6
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  Lit(AtLayer((lambda $l#0_1_1_26#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_1_26#heap#0: Heap, $l#0_1_1_26#s#0: Box :: 
                                            $Box((var newState2#0_1_1_20 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_26#heap#0, 
                                                          h2#Z#0_1_1_3, 
                                                          $Box($Unbox($l#0_1_1_26#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_1_20 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_1_26#heap#0, 
                                                          h2#Z#0_1_1_3, 
                                                          $Box($Unbox($l#0_1_1_26#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_1_20 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_1_26#heap#0, 
                                                            g#0, 
                                                            a2#0_1_1_20)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_1_26#heap#0, 
                                                        g2#0_1_1_20, 
                                                        $Box(newState2#0_1_1_20))): DatatypeType))))), 
                                          (lambda $l#0_1_1_26#heap#0: Heap, $l#0_1_1_26#s#0: Box :: 
                                            $IsBox($l#0_1_1_26#s#0, TInt)), 
                                          (lambda $l#0_1_1_26#heap#0: Heap, $l#0_1_1_26#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_1_26#o#0: ref :: false))))), 
                                      $LS($LZ))), 
                                  $Box(newState#Z#0_1_1_3))): DatatypeType;
                            assume (forall $l#0_1_1_27#s#0: int, $l#0_1_1_27#heap#0: Heap :: 
                              $IsGoodHeap($l#0_1_1_27#heap#0)
                                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_1_27#heap#0, 
                                        h2#Z#0_1_1_3, 
                                        $Box($l#0_1_1_27#s#0))): DatatypeType)
                                   && 
                                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_1_27#heap#0, 
                                        h2#Z#0_1_1_3, 
                                        $Box($l#0_1_1_27#s#0))): DatatypeType)
                                   && (var a2#0_1_1_21 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_1_1_27#heap#0, 
                                            h2#Z#0_1_1_3, 
                                            $Box($l#0_1_1_27#s#0))): DatatypeType); 
                                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_1_1_27#heap#0, 
                                          g#0, 
                                          a2#0_1_1_21)): DatatypeType)));
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_1_6, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_1_30#s#0: int, $l#0_1_1_30#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_1_30#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_1_30#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_1_30#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_1_30#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_1_30#s#0))): DatatypeType)
                   && (var a#0_1_1_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_1_30#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_1_30#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_1_30#heap#0, 
                            f#0, 
                            a#0_1_1_7)): DatatypeType)
                       && (var h2#0_1_1_7 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_1_30#heap#0, 
                                f#0, 
                                a#0_1_1_7)): DatatypeType); 
                        (forall $l#0_1_1_31#s#0: int, $l#0_1_1_31#heap#0: Heap :: 
                          $IsGoodHeap($l#0_1_1_31#heap#0)
                             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_1_31#heap#0, 
                                    h2#0_1_1_7, 
                                    $Box($l#0_1_1_31#s#0))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_1_31#heap#0, 
                                    h2#0_1_1_7, 
                                    $Box($l#0_1_1_31#s#0))): DatatypeType)
                               && (var a2#0_1_1_23 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_1_31#heap#0, 
                                        h2#0_1_1_7, 
                                        $Box($l#0_1_1_31#s#0))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_1_31#heap#0, 
                                      g#0, 
                                      a2#0_1_1_23)): DatatypeType))))));
            // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            assert {:id "id465"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_1_1_36#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_1_36#heap#0: Heap, $l#0_1_1_36#s#0: Box :: 
                          $Box((var newState#0_1_1_10 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_1_36#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_1_36#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_1_10 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_1_36#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_1_36#s#0): int))): DatatypeType); 
                                (var h2#0_1_1_10 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                          Tclass.State.M(State._default.Associativity$B), 
                                          $l#0_1_1_36#heap#0, 
                                          f#0, 
                                          a#0_1_1_10)): DatatypeType); 
                                  (var g3#0_1_1_5 := Lit(State.M.runState(Lit(#State.M.State(Lit(AtLayer((lambda $l#0_1_1_37#ly#0: LayerType :: 
                                                    Handle1((lambda $l#0_1_1_37#heap#0: Heap, $l#0_1_1_37#s#0: Box :: 
                                                        $Box((var newState2#0_1_1_26 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                      $l#0_1_1_37#heap#0, 
                                                                      h2#0_1_1_10, 
                                                                      $Box($Unbox($l#0_1_1_37#s#0): int))): DatatypeType)): int; 
                                                            (var a2#0_1_1_26 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                                      Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                                      $l#0_1_1_37#heap#0, 
                                                                      h2#0_1_1_10, 
                                                                      $Box($Unbox($l#0_1_1_37#s#0): int))): DatatypeType); 
                                                              (var g2#0_1_1_26 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                        Tclass.State.M(State._default.Associativity$C), 
                                                                        $l#0_1_1_37#heap#0, 
                                                                        g#0, 
                                                                        a2#0_1_1_26)): DatatypeType); 
                                                                $Unbox(Apply1(TInt, 
                                                                    Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                                    $l#0_1_1_37#heap#0, 
                                                                    g2#0_1_1_26, 
                                                                    $Box(newState2#0_1_1_26))): DatatypeType))))), 
                                                      (lambda $l#0_1_1_37#heap#0: Heap, $l#0_1_1_37#s#0: Box :: 
                                                        $IsBox($l#0_1_1_37#s#0, TInt)), 
                                                      (lambda $l#0_1_1_37#heap#0: Heap, $l#0_1_1_37#s#0: Box :: 
                                                        SetRef_to_SetBox((lambda $l#0_1_1_37#o#0: ref :: false))))), 
                                                  $l#0_1_1_36#ly#0)))))); 
                                    $Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                        $l#0_1_1_36#heap#0, 
                                        g3#0_1_1_5, 
                                        $Box(newState#0_1_1_10))): DatatypeType)))))), 
                        (lambda $l#0_1_1_36#heap#0: Heap, $l#0_1_1_36#s#0: Box :: 
                          $IsBox($l#0_1_1_36#s#0, TInt)), 
                        (lambda $l#0_1_1_36#heap#0: Heap, $l#0_1_1_36#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_1_36#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_1_1_38#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_1_38#heap#0: Heap, $l#0_1_1_38#s#0: Box :: 
                          $Box((var newState#0_1_1_11 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_1_38#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_1_38#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_1_11 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_1_38#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_1_38#s#0): int))): DatatypeType); 
                                (var h2#0_1_1_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                          Tclass.State.M(State._default.Associativity$B), 
                                          $l#0_1_1_38#heap#0, 
                                          f#0, 
                                          a#0_1_1_11)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_1_1_38#heap#0, 
                                      Lit(AtLayer((lambda $l#0_1_1_39#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_1_1_39#heap#0: Heap, $l#0_1_1_39#s#0: Box :: 
                                                $Box((var newState2#0_1_1_27 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                              $l#0_1_1_39#heap#0, 
                                                              h2#0_1_1_11, 
                                                              $Box($Unbox($l#0_1_1_39#s#0): int))): DatatypeType)): int; 
                                                    (var a2#0_1_1_27 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                              $l#0_1_1_39#heap#0, 
                                                              h2#0_1_1_11, 
                                                              $Box($Unbox($l#0_1_1_39#s#0): int))): DatatypeType); 
                                                      (var g2#0_1_1_27 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                Tclass.State.M(State._default.Associativity$C), 
                                                                $l#0_1_1_39#heap#0, 
                                                                g#0, 
                                                                a2#0_1_1_27)): DatatypeType); 
                                                        $Unbox(Apply1(TInt, 
                                                            Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                            $l#0_1_1_39#heap#0, 
                                                            g2#0_1_1_27, 
                                                            $Box(newState2#0_1_1_27))): DatatypeType))))), 
                                              (lambda $l#0_1_1_39#heap#0: Heap, $l#0_1_1_39#s#0: Box :: 
                                                $IsBox($l#0_1_1_39#s#0, TInt)), 
                                              (lambda $l#0_1_1_39#heap#0: Heap, $l#0_1_1_39#s#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_1_1_39#o#0: ref :: false))))), 
                                          $l#0_1_1_38#ly#0)), 
                                      $Box(newState#0_1_1_11))): DatatypeType))))), 
                        (lambda $l#0_1_1_38#heap#0: Heap, $l#0_1_1_38#s#0: Box :: 
                          $IsBox($l#0_1_1_38#s#0, TInt)), 
                        (lambda $l#0_1_1_38#heap#0: Heap, $l#0_1_1_38#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_1_38#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_0_0;
                assume $IsGoodHeap($lambdaHeap#0_1_0_0);
                assume $Heap == $lambdaHeap#0_1_0_0 || $HeapSucc($Heap, $lambdaHeap#0_1_0_0);
                havoc s#0_1_0_0;
                if (true)
                {
                    $_Frame#l0_1_0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_0_0, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_0_0, 
                          h#0_0, 
                          $Box(s#0_1_0_0))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#141#0_1_0_0, $Box(_mcc#142#0_1_0_0)))
                    {
                        assume $IsBox(_mcc#141#0_1_0_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_0_0;
                        assume {:id "id348"} let#0_1_0_0#0#0 == _mcc#142#0_1_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_0_0#0#0, TInt);
                        assume {:id "id349"} newState#Z#0_1_0_0 == let#0_1_0_0#0#0;
                        havoc a#Z#0_1_0_0;
                        assume {:id "id350"} let#0_1_0_1#0#0 == _mcc#141#0_1_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_0_1#0#0, State._default.Associativity$A);
                        assume {:id "id351"} a#Z#0_1_0_0 == let#0_1_0_1#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_0_0, 
                              f#0, 
                              a#Z#0_1_0_0)): DatatypeType
                           == #State.M.State(_mcc#143#0_1_0_0))
                        {
                            assume $Is(_mcc#143#0_1_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_0_0;
                            assume {:id "id352"} let#0_1_0_2#0#0 == _mcc#143#0_1_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_0_2#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id353"} h2#Z#0_1_0_0 == let#0_1_0_2#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_0_1;
                                assume $IsGoodHeap($lambdaHeap#0_1_0_1);
                                assume $lambdaHeap#0_1_0_0 == $lambdaHeap#0_1_0_1
                                   || $HeapSucc($lambdaHeap#0_1_0_0, $lambdaHeap#0_1_0_1);
                                havoc s#0_1_0_1;
                                if (true)
                                {
                                    $_Frame#l0_1_0_1 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_0_1, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_0_1, 
                                          h2#Z#0_1_0_0, 
                                          $Box(s#0_1_0_1))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#144#0_1_0_0, $Box(_mcc#145#0_1_0_0)))
                                    {
                                        assume $IsBox(_mcc#144#0_1_0_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_0_0;
                                        assume {:id "id354"} let#0_1_0_3#0#0 == _mcc#145#0_1_0_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_0_3#0#0, TInt);
                                        assume {:id "id355"} newState2#Z#0_1_0_0 == let#0_1_0_3#0#0;
                                        havoc a2#Z#0_1_0_0;
                                        assume {:id "id356"} let#0_1_0_4#0#0 == _mcc#144#0_1_0_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_0_4#0#0, State._default.Associativity$B);
                                        assume {:id "id357"} a2#Z#0_1_0_0 == let#0_1_0_4#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_0_1, 
                                              g#0, 
                                              a2#Z#0_1_0_0)): DatatypeType
                                           == #State.M.State(_mcc#146#0_1_0_0))
                                        {
                                            assume $Is(_mcc#146#0_1_0_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_0_0;
                                            assume {:id "id358"} let#0_1_0_5#0#0 == _mcc#146#0_1_0_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_0_5#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id359"} g2#Z#0_1_0_0 == let#0_1_0_5#0#0;
                                            assume {:id "id360"} lambdaResult#0_1_0_1
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_0_0, 
                                                  g2#Z#0_1_0_0, 
                                                  $Box(newState2#Z#0_1_0_0))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_0_1, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            assume {:id "id361"} lambdaResult#0_1_0_0
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  Lit(AtLayer((lambda $l#0_1_0_2#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_0_2#heap#0: Heap, $l#0_1_0_2#s#0: Box :: 
                                            $Box((var newState2#0_1_0_2 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_0_2#heap#0, 
                                                          h2#Z#0_1_0_0, 
                                                          $Box($Unbox($l#0_1_0_2#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_0_2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_0_2#heap#0, 
                                                          h2#Z#0_1_0_0, 
                                                          $Box($Unbox($l#0_1_0_2#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_0_2 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_0_2#heap#0, 
                                                            g#0, 
                                                            a2#0_1_0_2)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_0_2#heap#0, 
                                                        g2#0_1_0_2, 
                                                        $Box(newState2#0_1_0_2))): DatatypeType))))), 
                                          (lambda $l#0_1_0_2#heap#0: Heap, $l#0_1_0_2#s#0: Box :: 
                                            $IsBox($l#0_1_0_2#s#0, TInt)), 
                                          (lambda $l#0_1_0_2#heap#0: Heap, $l#0_1_0_2#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_0_2#o#0: ref :: false))))), 
                                      $LS($LZ))), 
                                  $Box(newState#Z#0_1_0_0))): DatatypeType;
                            assume (forall $l#0_1_0_3#s#0: int, $l#0_1_0_3#heap#0: Heap :: 
                              $IsGoodHeap($l#0_1_0_3#heap#0)
                                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_0_3#heap#0, 
                                        h2#Z#0_1_0_0, 
                                        $Box($l#0_1_0_3#s#0))): DatatypeType)
                                   && 
                                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_0_3#heap#0, 
                                        h2#Z#0_1_0_0, 
                                        $Box($l#0_1_0_3#s#0))): DatatypeType)
                                   && (var a2#0_1_0_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_1_0_3#heap#0, 
                                            h2#Z#0_1_0_0, 
                                            $Box($l#0_1_0_3#s#0))): DatatypeType); 
                                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_1_0_3#heap#0, 
                                          g#0, 
                                          a2#0_1_0_3)): DatatypeType)));
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_0_0, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_0_6#s#0: int, $l#0_1_0_6#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_0_6#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_0_6#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_0_6#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_0_6#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_0_6#s#0))): DatatypeType)
                   && (var a#0_1_0_1 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_0_6#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_0_6#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_0_6#heap#0, 
                            f#0, 
                            a#0_1_0_1)): DatatypeType)
                       && (var h2#0_1_0_1 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_0_6#heap#0, 
                                f#0, 
                                a#0_1_0_1)): DatatypeType); 
                        (forall $l#0_1_0_7#s#0: int, $l#0_1_0_7#heap#0: Heap :: 
                          $IsGoodHeap($l#0_1_0_7#heap#0)
                             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_0_7#heap#0, 
                                    h2#0_1_0_1, 
                                    $Box($l#0_1_0_7#s#0))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_0_7#heap#0, 
                                    h2#0_1_0_1, 
                                    $Box($l#0_1_0_7#s#0))): DatatypeType)
                               && (var a2#0_1_0_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_0_7#heap#0, 
                                        h2#0_1_0_1, 
                                        $Box($l#0_1_0_7#s#0))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_0_7#heap#0, 
                                      g#0, 
                                      a2#0_1_0_5)): DatatypeType))))));
            // ----- Hint6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(253,18)
            // TrCallStmt: Before ProcessCallStmt
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_0_2;
                assume $IsGoodHeap($lambdaHeap#0_1_0_2);
                assume $Heap == $lambdaHeap#0_1_0_2 || $HeapSucc($Heap, $lambdaHeap#0_1_0_2);
                havoc s#0_1_0_2;
                if (true)
                {
                    $_Frame#l0_1_0_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_0_2, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_0_2, 
                          h#0_0, 
                          $Box(s#0_1_0_2))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#214#0_1_0_0, $Box(_mcc#215#0_1_0_0)))
                    {
                        assume $IsBox(_mcc#214#0_1_0_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_0_1;
                        assume {:id "id362"} let#0_1_0_6#0#0 == _mcc#215#0_1_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_0_6#0#0, TInt);
                        assume {:id "id363"} newState#Z#0_1_0_1 == let#0_1_0_6#0#0;
                        havoc a#Z#0_1_0_1;
                        assume {:id "id364"} let#0_1_0_7#0#0 == _mcc#214#0_1_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_0_7#0#0, State._default.Associativity$A);
                        assume {:id "id365"} a#Z#0_1_0_1 == let#0_1_0_7#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_0_2, 
                              f#0, 
                              a#Z#0_1_0_1)): DatatypeType
                           == #State.M.State(_mcc#216#0_1_0_0))
                        {
                            assume $Is(_mcc#216#0_1_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_0_1;
                            assume {:id "id366"} let#0_1_0_8#0#0 == _mcc#216#0_1_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_0_8#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id367"} h2#Z#0_1_0_1 == let#0_1_0_8#0#0;
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_1_0_3;
                                assume $IsGoodHeap($lambdaHeap#0_1_0_3);
                                assume $lambdaHeap#0_1_0_2 == $lambdaHeap#0_1_0_3
                                   || $HeapSucc($lambdaHeap#0_1_0_2, $lambdaHeap#0_1_0_3);
                                havoc s#0_1_0_3;
                                if (true)
                                {
                                    $_Frame#l0_1_0_3 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_1_0_3, $o, alloc)): bool ==> false);
                                    if ($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $lambdaHeap#0_1_0_3, 
                                          h2#Z#0_1_0_1, 
                                          $Box(s#0_1_0_3))): DatatypeType
                                       == #_System._tuple#2._#Make2(_mcc#217#0_1_0_0, $Box(_mcc#218#0_1_0_0)))
                                    {
                                        assume $IsBox(_mcc#217#0_1_0_0, State._default.Associativity$B);
                                        havoc newState2#Z#0_1_0_1;
                                        assume {:id "id368"} let#0_1_0_9#0#0 == _mcc#218#0_1_0_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#0_1_0_9#0#0, TInt);
                                        assume {:id "id369"} newState2#Z#0_1_0_1 == let#0_1_0_9#0#0;
                                        havoc a2#Z#0_1_0_1;
                                        assume {:id "id370"} let#0_1_0_10#0#0 == _mcc#217#0_1_0_0;
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $IsBox(let#0_1_0_10#0#0, State._default.Associativity$B);
                                        assume {:id "id371"} a2#Z#0_1_0_1 == let#0_1_0_10#0#0;
                                        if ($Unbox(Apply1(State._default.Associativity$B, 
                                              Tclass.State.M(State._default.Associativity$C), 
                                              $lambdaHeap#0_1_0_3, 
                                              g#0, 
                                              a2#Z#0_1_0_1)): DatatypeType
                                           == #State.M.State(_mcc#219#0_1_0_0))
                                        {
                                            assume $Is(_mcc#219#0_1_0_0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            havoc g2#Z#0_1_0_1;
                                            assume {:id "id372"} let#0_1_0_11#0#0 == _mcc#219#0_1_0_0;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#0_1_0_11#0#0, 
                                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                            assume {:id "id373"} g2#Z#0_1_0_1 == let#0_1_0_11#0#0;
                                            assume {:id "id374"} lambdaResult#0_1_0_3
                                               == $Unbox(Apply1(TInt, 
                                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                  $lambdaHeap#0_1_0_2, 
                                                  g2#Z#0_1_0_1, 
                                                  $Box(newState2#Z#0_1_0_1))): DatatypeType;
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(lambdaResult#0_1_0_3, 
                                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                        }
                                        else
                                        {
                                            assume false;
                                        }
                                    }
                                    else
                                    {
                                        assume false;
                                    }
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            assume {:id "id375"} lambdaResult#0_1_0_2
                               == $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $Heap, 
                                  Lit(AtLayer((lambda $l#0_1_0_10#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_0_10#heap#0: Heap, $l#0_1_0_10#s#0: Box :: 
                                            $Box((var newState2#0_1_0_8 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_0_10#heap#0, 
                                                          h2#Z#0_1_0_1, 
                                                          $Box($Unbox($l#0_1_0_10#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_0_8 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_0_10#heap#0, 
                                                          h2#Z#0_1_0_1, 
                                                          $Box($Unbox($l#0_1_0_10#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_0_8 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_0_10#heap#0, 
                                                            g#0, 
                                                            a2#0_1_0_8)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_0_10#heap#0, 
                                                        g2#0_1_0_8, 
                                                        $Box(newState2#0_1_0_8))): DatatypeType))))), 
                                          (lambda $l#0_1_0_10#heap#0: Heap, $l#0_1_0_10#s#0: Box :: 
                                            $IsBox($l#0_1_0_10#s#0, TInt)), 
                                          (lambda $l#0_1_0_10#heap#0: Heap, $l#0_1_0_10#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_0_10#o#0: ref :: false))))), 
                                      $LS($LZ))), 
                                  $Box(newState#Z#0_1_0_1))): DatatypeType;
                            assume (forall $l#0_1_0_11#s#0: int, $l#0_1_0_11#heap#0: Heap :: 
                              $IsGoodHeap($l#0_1_0_11#heap#0)
                                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_0_11#heap#0, 
                                        h2#Z#0_1_0_1, 
                                        $Box($l#0_1_0_11#s#0))): DatatypeType)
                                   && 
                                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_0_11#heap#0, 
                                        h2#Z#0_1_0_1, 
                                        $Box($l#0_1_0_11#s#0))): DatatypeType)
                                   && (var a2#0_1_0_9 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                            $l#0_1_0_11#heap#0, 
                                            h2#Z#0_1_0_1, 
                                            $Box($l#0_1_0_11#s#0))): DatatypeType); 
                                    State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                          Tclass.State.M(State._default.Associativity$C), 
                                          $l#0_1_0_11#heap#0, 
                                          g#0, 
                                          a2#0_1_0_9)): DatatypeType)));
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1_0_2, 
                              Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_0_12#s#0: int, $l#0_1_0_12#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_0_12#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_0_12#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_0_12#s#0))): DatatypeType)
                   && 
                  _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_0_12#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_0_12#s#0))): DatatypeType)
                   && (var a#0_1_0_2 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_0_12#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_0_12#s#0))): DatatypeType); 
                    State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                            Tclass.State.M(State._default.Associativity$B), 
                            $l#0_1_0_12#heap#0, 
                            f#0, 
                            a#0_1_0_2)): DatatypeType)
                       && (var h2#0_1_0_2 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_0_12#heap#0, 
                                f#0, 
                                a#0_1_0_2)): DatatypeType); 
                        (forall $l#0_1_0_13#s#0: int, $l#0_1_0_13#heap#0: Heap :: 
                          $IsGoodHeap($l#0_1_0_13#heap#0)
                             ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_0_13#heap#0, 
                                    h2#0_1_0_2, 
                                    $Box($l#0_1_0_13#s#0))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_0_13#heap#0, 
                                    h2#0_1_0_2, 
                                    $Box($l#0_1_0_13#s#0))): DatatypeType)
                               && (var a2#0_1_0_10 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_0_13#heap#0, 
                                        h2#0_1_0_2, 
                                        $Box($l#0_1_0_13#s#0))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_0_13#heap#0, 
                                      g#0, 
                                      a2#0_1_0_10)): DatatypeType))))));
            // ProcessCallStmt: CheckSubrange
            f##0_1_0_0 := Lit(AtLayer((lambda $l#0_1_0_14#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_0_14#heap#0: Heap, $l#0_1_0_14#s#0: Box :: 
                      $Box((var newState#0_1_0_3 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_0_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_0_14#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_0_3 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_0_14#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_0_14#s#0): int))): DatatypeType); 
                            (var h2#0_1_0_3 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_1_0_14#heap#0, 
                                      f#0, 
                                      a#0_1_0_3)): DatatypeType); 
                              $Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                  $l#0_1_0_14#heap#0, 
                                  Lit(AtLayer((lambda $l#0_1_0_15#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_1_0_15#heap#0: Heap, $l#0_1_0_15#s#0: Box :: 
                                            $Box((var newState2#0_1_0_11 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_0_15#heap#0, 
                                                          h2#0_1_0_3, 
                                                          $Box($Unbox($l#0_1_0_15#s#0): int))): DatatypeType)): int; 
                                                (var a2#0_1_0_11 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                          $l#0_1_0_15#heap#0, 
                                                          h2#0_1_0_3, 
                                                          $Box($Unbox($l#0_1_0_15#s#0): int))): DatatypeType); 
                                                  (var g2#0_1_0_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                            Tclass.State.M(State._default.Associativity$C), 
                                                            $l#0_1_0_15#heap#0, 
                                                            g#0, 
                                                            a2#0_1_0_11)): DatatypeType); 
                                                    $Unbox(Apply1(TInt, 
                                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                        $l#0_1_0_15#heap#0, 
                                                        g2#0_1_0_11, 
                                                        $Box(newState2#0_1_0_11))): DatatypeType))))), 
                                          (lambda $l#0_1_0_15#heap#0: Heap, $l#0_1_0_15#s#0: Box :: 
                                            $IsBox($l#0_1_0_15#s#0, TInt)), 
                                          (lambda $l#0_1_0_15#heap#0: Heap, $l#0_1_0_15#s#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_1_0_15#o#0: ref :: false))))), 
                                      $l#0_1_0_14#ly#0)), 
                                  $Box(newState#0_1_0_3))): DatatypeType))))), 
                    (lambda $l#0_1_0_14#heap#0: Heap, $l#0_1_0_14#s#0: Box :: 
                      $IsBox($l#0_1_0_14#s#0, TInt)), 
                    (lambda $l#0_1_0_14#heap#0: Heap, $l#0_1_0_14#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_0_14#o#0: ref :: false))))), 
                $LS($LZ)));
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_0_4;
                assume $IsGoodHeap($lambdaHeap#0_1_0_4);
                assume $Heap == $lambdaHeap#0_1_0_4 || $HeapSucc($Heap, $lambdaHeap#0_1_0_4);
                havoc s#0_1_0_4;
                if (true)
                {
                    $_Frame#l0_1_0_4 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_0_4, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_0_4, 
                          h#0_0, 
                          $Box(s#0_1_0_4))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#220#0_1_0_0, $Box(_mcc#221#0_1_0_0)))
                    {
                        assume $IsBox(_mcc#220#0_1_0_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_0_2;
                        assume {:id "id376"} let#0_1_0_12#0#0 == _mcc#221#0_1_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_0_12#0#0, TInt);
                        assume {:id "id377"} newState#Z#0_1_0_2 == let#0_1_0_12#0#0;
                        havoc a#Z#0_1_0_2;
                        assume {:id "id378"} let#0_1_0_13#0#0 == _mcc#220#0_1_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_0_13#0#0, State._default.Associativity$A);
                        assume {:id "id379"} a#Z#0_1_0_2 == let#0_1_0_13#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_0_4, 
                              f#0, 
                              a#Z#0_1_0_2)): DatatypeType
                           == #State.M.State(_mcc#222#0_1_0_0))
                        {
                            assume $Is(_mcc#222#0_1_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_0_2;
                            assume {:id "id380"} let#0_1_0_14#0#0 == _mcc#222#0_1_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_0_14#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id381"} h2#Z#0_1_0_2 == let#0_1_0_14#0#0;
                            if ($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $lambdaHeap#0_1_0_4, 
                                  h2#Z#0_1_0_2, 
                                  $Box(newState#Z#0_1_0_2))): DatatypeType
                               == #_System._tuple#2._#Make2(_mcc#223#0_1_0_0, $Box(_mcc#224#0_1_0_0)))
                            {
                                assume $IsBox(_mcc#223#0_1_0_0, State._default.Associativity$B);
                                havoc newState2#Z#0_1_0_2;
                                assume {:id "id382"} let#0_1_0_15#0#0 == _mcc#224#0_1_0_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_1_0_15#0#0, TInt);
                                assume {:id "id383"} newState2#Z#0_1_0_2 == let#0_1_0_15#0#0;
                                havoc a2#Z#0_1_0_2;
                                assume {:id "id384"} let#0_1_0_16#0#0 == _mcc#223#0_1_0_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $IsBox(let#0_1_0_16#0#0, State._default.Associativity$B);
                                assume {:id "id385"} a2#Z#0_1_0_2 == let#0_1_0_16#0#0;
                                if ($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $lambdaHeap#0_1_0_4, 
                                      g#0, 
                                      a2#Z#0_1_0_2)): DatatypeType
                                   == #State.M.State(_mcc#225#0_1_0_0))
                                {
                                    assume $Is(_mcc#225#0_1_0_0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                    havoc g2#Z#0_1_0_2;
                                    assume {:id "id386"} let#0_1_0_17#0#0 == _mcc#225#0_1_0_0;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#0_1_0_17#0#0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                    assume {:id "id387"} g2#Z#0_1_0_2 == let#0_1_0_17#0#0;
                                    assume {:id "id388"} lambdaResult#0_1_0_4
                                       == $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                          $Heap, 
                                          g2#Z#0_1_0_2, 
                                          $Box(newState2#Z#0_1_0_2))): DatatypeType;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(lambdaResult#0_1_0_4, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                }
                                else
                                {
                                    assume false;
                                }
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_0_16#s#0: int, $l#0_1_0_16#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_0_16#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_0_16#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_0_16#s#0))): DatatypeType)
                   && (var newState#0_1_0_4 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_1_0_16#heap#0, 
                              h#0_0, 
                              $Box($l#0_1_0_16#s#0))): DatatypeType)): int; 
                    _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_0_16#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_0_16#s#0))): DatatypeType)
                       && (var a#0_1_0_4 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_1_0_16#heap#0, 
                                h#0_0, 
                                $Box($l#0_1_0_16#s#0))): DatatypeType); 
                        State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_0_16#heap#0, 
                                f#0, 
                                a#0_1_0_4)): DatatypeType)
                           && (var h2#0_1_0_4 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $l#0_1_0_16#heap#0, 
                                    f#0, 
                                    a#0_1_0_4)): DatatypeType); 
                            _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_0_16#heap#0, 
                                    h2#0_1_0_4, 
                                    $Box(newState#0_1_0_4))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_0_16#heap#0, 
                                    h2#0_1_0_4, 
                                    $Box(newState#0_1_0_4))): DatatypeType)
                               && (var a2#0_1_0_12 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_0_16#heap#0, 
                                        h2#0_1_0_4, 
                                        $Box(newState#0_1_0_4))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_0_16#heap#0, 
                                      g#0, 
                                      a2#0_1_0_12)): DatatypeType))))));
            // ProcessCallStmt: CheckSubrange
            g##0_1_0_0 := Lit(AtLayer((lambda $l#0_1_0_17#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_0_17#heap#0: Heap, $l#0_1_0_17#s#0: Box :: 
                      $Box((var newState#0_1_0_5 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_0_17#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_0_17#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_0_5 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_0_17#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_0_17#s#0): int))): DatatypeType); 
                            (var h2#0_1_0_5 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_1_0_17#heap#0, 
                                      f#0, 
                                      a#0_1_0_5)): DatatypeType); 
                              (var newState2#0_1_0_13 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_1_0_17#heap#0, 
                                          h2#0_1_0_5, 
                                          $Box(newState#0_1_0_5))): DatatypeType)): int; 
                                (var a2#0_1_0_13 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_1_0_17#heap#0, 
                                          h2#0_1_0_5, 
                                          $Box(newState#0_1_0_5))): DatatypeType); 
                                  (var g2#0_1_0_13 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                            Tclass.State.M(State._default.Associativity$C), 
                                            $l#0_1_0_17#heap#0, 
                                            g#0, 
                                            a2#0_1_0_13)): DatatypeType); 
                                    $Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                        $l#0_1_0_17#heap#0, 
                                        g2#0_1_0_13, 
                                        $Box(newState2#0_1_0_13))): DatatypeType)))))))), 
                    (lambda $l#0_1_0_17#heap#0: Heap, $l#0_1_0_17#s#0: Box :: 
                      $IsBox($l#0_1_0_17#s#0, TInt)), 
                    (lambda $l#0_1_0_17#heap#0: Heap, $l#0_1_0_17#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_0_17#o#0: ref :: false))))), 
                $LS($LZ)));
            call {:id "id389"} Call$$State.__default.FunEq(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt), f##0_1_0_0, g##0_1_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_1_0_5;
                assume $IsGoodHeap($lambdaHeap#0_1_0_5);
                assume $Heap == $lambdaHeap#0_1_0_5 || $HeapSucc($Heap, $lambdaHeap#0_1_0_5);
                havoc s#0_1_0_5;
                if (true)
                {
                    $_Frame#l0_1_0_5 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_1_0_5, $o, alloc)): bool ==> false);
                    if ($Unbox(Apply1(TInt, 
                          Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                          $lambdaHeap#0_1_0_5, 
                          h#0_0, 
                          $Box(s#0_1_0_5))): DatatypeType
                       == #_System._tuple#2._#Make2(_mcc#147#0_1_0_0, $Box(_mcc#148#0_1_0_0)))
                    {
                        assume $IsBox(_mcc#147#0_1_0_0, State._default.Associativity$A);
                        havoc newState#Z#0_1_0_3;
                        assume {:id "id390"} let#0_1_0_18#0#0 == _mcc#148#0_1_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#0_1_0_18#0#0, TInt);
                        assume {:id "id391"} newState#Z#0_1_0_3 == let#0_1_0_18#0#0;
                        havoc a#Z#0_1_0_3;
                        assume {:id "id392"} let#0_1_0_19#0#0 == _mcc#147#0_1_0_0;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#0_1_0_19#0#0, State._default.Associativity$A);
                        assume {:id "id393"} a#Z#0_1_0_3 == let#0_1_0_19#0#0;
                        if ($Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $lambdaHeap#0_1_0_5, 
                              f#0, 
                              a#Z#0_1_0_3)): DatatypeType
                           == #State.M.State(_mcc#149#0_1_0_0))
                        {
                            assume $Is(_mcc#149#0_1_0_0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            havoc h2#Z#0_1_0_3;
                            assume {:id "id394"} let#0_1_0_20#0#0 == _mcc#149#0_1_0_0;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0_1_0_20#0#0, 
                              Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$B, TInt)));
                            assume {:id "id395"} h2#Z#0_1_0_3 == let#0_1_0_20#0#0;
                            if ($Unbox(Apply1(TInt, 
                                  Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                  $lambdaHeap#0_1_0_5, 
                                  h2#Z#0_1_0_3, 
                                  $Box(newState#Z#0_1_0_3))): DatatypeType
                               == #_System._tuple#2._#Make2(_mcc#150#0_1_0_0, $Box(_mcc#151#0_1_0_0)))
                            {
                                assume $IsBox(_mcc#150#0_1_0_0, State._default.Associativity$B);
                                havoc newState2#Z#0_1_0_3;
                                assume {:id "id396"} let#0_1_0_21#0#0 == _mcc#151#0_1_0_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#0_1_0_21#0#0, TInt);
                                assume {:id "id397"} newState2#Z#0_1_0_3 == let#0_1_0_21#0#0;
                                havoc a2#Z#0_1_0_3;
                                assume {:id "id398"} let#0_1_0_22#0#0 == _mcc#150#0_1_0_0;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $IsBox(let#0_1_0_22#0#0, State._default.Associativity$B);
                                assume {:id "id399"} a2#Z#0_1_0_3 == let#0_1_0_22#0#0;
                                if ($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $lambdaHeap#0_1_0_5, 
                                      g#0, 
                                      a2#Z#0_1_0_3)): DatatypeType
                                   == #State.M.State(_mcc#152#0_1_0_0))
                                {
                                    assume $Is(_mcc#152#0_1_0_0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                    havoc g2#Z#0_1_0_3;
                                    assume {:id "id400"} let#0_1_0_23#0#0 == _mcc#152#0_1_0_0;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#0_1_0_23#0#0, 
                                      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State._default.Associativity$C, TInt)));
                                    assume {:id "id401"} g2#Z#0_1_0_3 == let#0_1_0_23#0#0;
                                    assume {:id "id402"} lambdaResult#0_1_0_5
                                       == $Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                          $Heap, 
                                          g2#Z#0_1_0_3, 
                                          $Box(newState2#Z#0_1_0_3))): DatatypeType;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(lambdaResult#0_1_0_5, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt));
                                }
                                else
                                {
                                    assume false;
                                }
                            }
                            else
                            {
                                assume false;
                            }
                        }
                        else
                        {
                            assume false;
                        }
                    }
                    else
                    {
                        assume false;
                    }
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_1_0_19#s#0: int, $l#0_1_0_19#heap#0: Heap :: 
              $IsGoodHeap($l#0_1_0_19#heap#0)
                 ==> _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                        $l#0_1_0_19#heap#0, 
                        h#0_0, 
                        $Box($l#0_1_0_19#s#0))): DatatypeType)
                   && (var newState#0_1_0_7 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                              Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                              $l#0_1_0_19#heap#0, 
                              h#0_0, 
                              $Box($l#0_1_0_19#s#0))): DatatypeType)): int; 
                    _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                            Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                            $l#0_1_0_19#heap#0, 
                            h#0_0, 
                            $Box($l#0_1_0_19#s#0))): DatatypeType)
                       && (var a#0_1_0_7 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                $l#0_1_0_19#heap#0, 
                                h#0_0, 
                                $Box($l#0_1_0_19#s#0))): DatatypeType); 
                        State.M.State_q($Unbox(Apply1(State._default.Associativity$A, 
                                Tclass.State.M(State._default.Associativity$B), 
                                $l#0_1_0_19#heap#0, 
                                f#0, 
                                a#0_1_0_7)): DatatypeType)
                           && (var h2#0_1_0_7 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                    Tclass.State.M(State._default.Associativity$B), 
                                    $l#0_1_0_19#heap#0, 
                                    f#0, 
                                    a#0_1_0_7)): DatatypeType); 
                            _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_0_19#heap#0, 
                                    h2#0_1_0_7, 
                                    $Box(newState#0_1_0_7))): DatatypeType)
                               && 
                              _System.Tuple2.___hMake2_q($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                    $l#0_1_0_19#heap#0, 
                                    h2#0_1_0_7, 
                                    $Box(newState#0_1_0_7))): DatatypeType)
                               && (var a2#0_1_0_15 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                        $l#0_1_0_19#heap#0, 
                                        h2#0_1_0_7, 
                                        $Box(newState#0_1_0_7))): DatatypeType); 
                                State.M.State_q($Unbox(Apply1(State._default.Associativity$B, 
                                      Tclass.State.M(State._default.Associativity$C), 
                                      $l#0_1_0_19#heap#0, 
                                      g#0, 
                                      a2#0_1_0_15)): DatatypeType))))));
            // ----- assert line6 == line7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/lambdas/StateMonad.dfy(177,7)
            assert {:id "id403"} {:subsumption 0} State.M#Equal(#State.M.State(Lit(AtLayer((lambda $l#0_1_0_23#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_0_23#heap#0: Heap, $l#0_1_0_23#s#0: Box :: 
                          $Box((var newState#0_1_0_10 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_0_23#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_0_23#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_0_10 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_0_23#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_0_23#s#0): int))): DatatypeType); 
                                (var h2#0_1_0_10 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                          Tclass.State.M(State._default.Associativity$B), 
                                          $l#0_1_0_23#heap#0, 
                                          f#0, 
                                          a#0_1_0_10)): DatatypeType); 
                                  $Unbox(Apply1(TInt, 
                                      Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                      $l#0_1_0_23#heap#0, 
                                      Lit(AtLayer((lambda $l#0_1_0_24#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_1_0_24#heap#0: Heap, $l#0_1_0_24#s#0: Box :: 
                                                $Box((var newState2#0_1_0_18 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                              $l#0_1_0_24#heap#0, 
                                                              h2#0_1_0_10, 
                                                              $Box($Unbox($l#0_1_0_24#s#0): int))): DatatypeType)): int; 
                                                    (var a2#0_1_0_18 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                                              $l#0_1_0_24#heap#0, 
                                                              h2#0_1_0_10, 
                                                              $Box($Unbox($l#0_1_0_24#s#0): int))): DatatypeType); 
                                                      (var g2#0_1_0_18 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                                Tclass.State.M(State._default.Associativity$C), 
                                                                $l#0_1_0_24#heap#0, 
                                                                g#0, 
                                                                a2#0_1_0_18)): DatatypeType); 
                                                        $Unbox(Apply1(TInt, 
                                                            Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                                            $l#0_1_0_24#heap#0, 
                                                            g2#0_1_0_18, 
                                                            $Box(newState2#0_1_0_18))): DatatypeType))))), 
                                              (lambda $l#0_1_0_24#heap#0: Heap, $l#0_1_0_24#s#0: Box :: 
                                                $IsBox($l#0_1_0_24#s#0, TInt)), 
                                              (lambda $l#0_1_0_24#heap#0: Heap, $l#0_1_0_24#s#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_1_0_24#o#0: ref :: false))))), 
                                          $l#0_1_0_23#ly#0)), 
                                      $Box(newState#0_1_0_10))): DatatypeType))))), 
                        (lambda $l#0_1_0_23#heap#0: Heap, $l#0_1_0_23#s#0: Box :: 
                          $IsBox($l#0_1_0_23#s#0, TInt)), 
                        (lambda $l#0_1_0_23#heap#0: Heap, $l#0_1_0_23#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_0_23#o#0: ref :: false))))), 
                    $LS($LZ)))), 
              #State.M.State(Lit(AtLayer((lambda $l#0_1_0_25#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_0_25#heap#0: Heap, $l#0_1_0_25#s#0: Box :: 
                          $Box((var newState#0_1_0_11 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_0_25#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_0_25#s#0): int))): DatatypeType)): int; 
                              (var a#0_1_0_11 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                        $l#0_1_0_25#heap#0, 
                                        h#0_0, 
                                        $Box($Unbox($l#0_1_0_25#s#0): int))): DatatypeType); 
                                (var h2#0_1_0_11 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                          Tclass.State.M(State._default.Associativity$B), 
                                          $l#0_1_0_25#heap#0, 
                                          f#0, 
                                          a#0_1_0_11)): DatatypeType); 
                                  (var newState2#0_1_0_19 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_1_0_25#heap#0, 
                                              h2#0_1_0_11, 
                                              $Box(newState#0_1_0_11))): DatatypeType)): int; 
                                    (var a2#0_1_0_19 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                              Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                              $l#0_1_0_25#heap#0, 
                                              h2#0_1_0_11, 
                                              $Box(newState#0_1_0_11))): DatatypeType); 
                                      (var g2#0_1_0_19 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                                Tclass.State.M(State._default.Associativity$C), 
                                                $l#0_1_0_25#heap#0, 
                                                g#0, 
                                                a2#0_1_0_19)): DatatypeType); 
                                        $Unbox(Apply1(TInt, 
                                            Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                            $l#0_1_0_25#heap#0, 
                                            g2#0_1_0_19, 
                                            $Box(newState2#0_1_0_19))): DatatypeType)))))))), 
                        (lambda $l#0_1_0_25#heap#0: Heap, $l#0_1_0_25#s#0: Box :: 
                          $IsBox($l#0_1_0_25#s#0, TInt)), 
                        (lambda $l#0_1_0_25#heap#0: Heap, $l#0_1_0_25#s#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_0_25#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }

        assume {:id "id626"} State.M#Equal(State.__default.Bind(State._default.Associativity$A, 
            State._default.Associativity$C, 
            m#0, 
            Lit(AtLayer((lambda $l#0_1_6#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_6#heap#0: Heap, $l#0_1_6#x#0: Box :: 
                      $Box(State.__default.Bind(State._default.Associativity$B, 
                          State._default.Associativity$C, 
                          $Unbox(Apply1(State._default.Associativity$A, 
                              Tclass.State.M(State._default.Associativity$B), 
                              $l#0_1_6#heap#0, 
                              f#0, 
                              $l#0_1_6#x#0)): DatatypeType, 
                          g#0))), 
                    (lambda $l#0_1_6#heap#0: Heap, $l#0_1_6#x#0: Box :: 
                      $IsBox($l#0_1_6#x#0, State._default.Associativity$A)), 
                    (lambda $l#0_1_6#heap#0: Heap, $l#0_1_6#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_6#o#0: ref :: false))))), 
                $LS($LZ)))), 
          #State.M.State(Lit(AtLayer((lambda $l#0_1_7#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_7#heap#0: Heap, $l#0_1_7#s#0: Box :: 
                      $Box((var newState#0_1_0 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_7#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_7#s#0): int))): DatatypeType)): int; 
                          (var a#0_1_0 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                    Tclass._System.Tuple2(State._default.Associativity$A, TInt), 
                                    $l#0_1_7#heap#0, 
                                    h#0_0, 
                                    $Box($Unbox($l#0_1_7#s#0): int))): DatatypeType); 
                            (var h2#0_1_0 := State.M.runState($Unbox(Apply1(State._default.Associativity$A, 
                                      Tclass.State.M(State._default.Associativity$B), 
                                      $l#0_1_7#heap#0, 
                                      f#0, 
                                      a#0_1_0)): DatatypeType); 
                              (var newState2#0_1_0 := $Unbox(_System.Tuple2._1($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_1_7#heap#0, 
                                          h2#0_1_0, 
                                          $Box(newState#0_1_0))): DatatypeType)): int; 
                                (var a2#0_1_0 := _System.Tuple2._0($Unbox(Apply1(TInt, 
                                          Tclass._System.Tuple2(State._default.Associativity$B, TInt), 
                                          $l#0_1_7#heap#0, 
                                          h2#0_1_0, 
                                          $Box(newState#0_1_0))): DatatypeType); 
                                  (var g2#0_1_0 := State.M.runState($Unbox(Apply1(State._default.Associativity$B, 
                                            Tclass.State.M(State._default.Associativity$C), 
                                            $l#0_1_7#heap#0, 
                                            g#0, 
                                            a2#0_1_0)): DatatypeType); 
                                    $Unbox(Apply1(TInt, 
                                        Tclass._System.Tuple2(State._default.Associativity$C, TInt), 
                                        $l#0_1_7#heap#0, 
                                        g2#0_1_0, 
                                        $Box(newState2#0_1_0))): DatatypeType)))))))), 
                    (lambda $l#0_1_7#heap#0: Heap, $l#0_1_7#s#0: Box :: $IsBox($l#0_1_7#s#0, TInt)), 
                    (lambda $l#0_1_7#heap#0: Heap, $l#0_1_7#s#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_7#o#0: ref :: false))))), 
                $LS($LZ)))));
    }
    else
    {
        assume false;
    }
}



// Constructor function declaration
function #State.M.State(HandleType) : DatatypeType;

const unique ##State.M.State: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: HandleType :: 
  { #State.M.State(a#0#0#0) } 
  DatatypeCtorId(#State.M.State(a#0#0#0)) == ##State.M.State);
}

function State.M.State_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { State.M.State_q(d) } 
  State.M.State_q(d) <==> DatatypeCtorId(d) == ##State.M.State);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { State.M.State_q(d) } 
  State.M.State_q(d)
     ==> (exists a#1#0#0: HandleType :: d == #State.M.State(a#1#0#0)));

// Constructor $Is
axiom (forall State.M$A: Ty, a#2#0#0: HandleType :: 
  { $Is(#State.M.State(a#2#0#0), Tclass.State.M(State.M$A)) } 
  $Is(#State.M.State(a#2#0#0), Tclass.State.M(State.M$A))
     <==> $Is(a#2#0#0, 
      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State.M$A, TInt))));

// Constructor $IsAlloc
axiom (forall State.M$A: Ty, a#2#0#0: HandleType, $h: Heap :: 
  { $IsAlloc(#State.M.State(a#2#0#0), Tclass.State.M(State.M$A), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#State.M.State(a#2#0#0), Tclass.State.M(State.M$A), $h)
       <==> $IsAlloc(a#2#0#0, 
        Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State.M$A, TInt)), 
        $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, State.M$A: Ty, $h: Heap :: 
  { $IsAlloc(State.M.runState(d), 
      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State.M$A, TInt)), 
      $h) } 
  $IsGoodHeap($h)
       && 
      State.M.State_q(d)
       && $IsAlloc(d, Tclass.State.M(State.M$A), $h)
     ==> $IsAlloc(State.M.runState(d), 
      Tclass._System.___hTotalFunc1(TInt, Tclass._System.Tuple2(State.M$A, TInt)), 
      $h));

// Constructor literal
axiom (forall a#3#0#0: HandleType :: 
  { #State.M.State(Lit(a#3#0#0)) } 
  #State.M.State(Lit(a#3#0#0)) == Lit(#State.M.State(a#3#0#0)));

function State.M.runState(DatatypeType) : HandleType;

// Constructor injectivity
axiom (forall a#4#0#0: HandleType :: 
  { #State.M.State(a#4#0#0) } 
  State.M.runState(#State.M.State(a#4#0#0)) == a#4#0#0);

// Depth-one case-split function
function $IsA#State.M(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#State.M(d) } 
  $IsA#State.M(d) ==> State.M.State_q(d));

// Questionmark data type disjunctivity
axiom (forall State.M$A: Ty, d: DatatypeType :: 
  { State.M.State_q(d), $Is(d, Tclass.State.M(State.M$A)) } 
  $Is(d, Tclass.State.M(State.M$A)) ==> State.M.State_q(d));

// Datatype extensional equality declaration
function State.M#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #State.M.State
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { State.M#Equal(a, b) } 
  State.M#Equal(a, b) <==> State.M.runState(a) == State.M.runState(b));

// Datatype extensionality axiom: State.M
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { State.M#Equal(a, b) } 
  State.M#Equal(a, b) <==> a == b);

const unique class.State.M: ClassName;

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$_#Func2: TyTagFamily;

const unique tytagFamily$_#PartialFunc2: TyTagFamily;

const unique tytagFamily$_#TotalFunc2: TyTagFamily;

const unique tytagFamily$M: TyTagFamily;
