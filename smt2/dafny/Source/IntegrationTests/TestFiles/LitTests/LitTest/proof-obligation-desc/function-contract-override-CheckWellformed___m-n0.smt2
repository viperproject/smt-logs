(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U Int) Int)
(declare-fun $generated@@23 (T@U Int) Bool)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (Int) Bool)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 (T@T T@T) T@T)
(declare-fun $generated@@41 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@42 (T@T) T@T)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@U T@U T@U) Bool)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@108 (T@U) T@U)
(declare-fun $generated@@109 (T@U) Bool)
(declare-fun $generated@@110 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@5 $generated@@26) 3))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@29 T@U) ($generated@@30 Int) ) (!  (=> (or ($generated@@23 $generated@@29 $generated@@30) (and (< 2 $generated@@21) (and (and (or (not (= $generated@@29 $generated@@24)) (not true)) ($generated@@25 $generated@@26 $generated@@29 $generated@@27)) (< $generated@@30 10)))) (and (< ($generated@@22 $generated@@29 $generated@@30) 5) ($generated@@28 ($generated@@22 $generated@@29 $generated@@30))))
 :pattern ( ($generated@@22 $generated@@29 $generated@@30))
))))
(assert (= ($generated@@31 $generated) $generated@@0))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@32 $generated@@26 $generated@@34 $generated@@27 $generated@@35) ($generated@@32 $generated@@26 $generated@@34 $generated@@33 $generated@@35))
 :pattern ( ($generated@@32 $generated@@26 $generated@@34 $generated@@27 $generated@@35))
 :pattern ( ($generated@@32 $generated@@26 $generated@@34 $generated@@33 $generated@@35))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@37 $generated@@44 $generated@@45 ($generated@@41 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@48) $generated@@46)
 :weight 0
)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (!  (or (= $generated@@53 $generated@@54) (= ($generated@@37 $generated@@49 $generated@@50 ($generated@@41 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@51) $generated@@54) ($generated@@37 $generated@@49 $generated@@50 $generated@@52 $generated@@54)))
 :weight 0
))) (= ($generated@@5 $generated@@38) 4)) (= ($generated@@5 $generated@@39) 5)) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (= ($generated@@5 ($generated@@40 $generated@@55 $generated@@56)) 6))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@42 ($generated@@40 $generated@@57 $generated@@58)) $generated@@57)
 :pattern ( ($generated@@40 $generated@@57 $generated@@58))
))) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@43 ($generated@@40 $generated@@59 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@40 $generated@@59 $generated@@60))
))))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@32 $generated@@26 $generated@@61 $generated@@33 $generated@@62)  (or (= $generated@@61 $generated@@24) ($generated@@10 ($generated@@36 $generated@@6 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@26 ($generated@@40 $generated@@38 $generated@@39) $generated@@62 $generated@@61) $generated@@1)))))
 :pattern ( ($generated@@32 $generated@@26 $generated@@61 $generated@@33 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 ($generated@@36 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@36 $generated@@65 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@66 ($generated@@63 $generated@@70 $generated@@67) $generated@@68 $generated@@69) ($generated@@32 $generated@@70 $generated@@67 $generated@@68 $generated@@69))
 :pattern ( ($generated@@66 ($generated@@63 $generated@@70 $generated@@67) $generated@@68 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@71 $generated@@27)  (and ($generated@@25 $generated@@26 $generated@@71 $generated@@33) (or (not (= $generated@@71 $generated@@24)) (not true))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@71 $generated@@27))
 :pattern ( ($generated@@25 $generated@@26 $generated@@71 $generated@@33))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@36 $generated@@73 ($generated@@63 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@63 $generated@@73 $generated@@72))
)))
(assert  (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@74 $generated@@77 $generated@@78 $generated@@79 ($generated@@76 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@82 $generated@@83) $generated@@80)
 :weight 0
)) (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@74 $generated@@84 $generated@@85 $generated@@86 ($generated@@76 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@74 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@74 $generated@@93 $generated@@94 $generated@@95 ($generated@@76 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@74 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)))))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 Bool) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@10 ($generated@@74 $generated@@26 $generated@@38 $generated@@6 ($generated@@75 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))  (=> (and (or (not (= $generated@@106 $generated@@102)) (not true)) ($generated@@10 ($generated@@36 $generated@@6 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@26 ($generated@@40 $generated@@38 $generated@@39) $generated@@103 $generated@@106) $generated@@104)))) $generated@@105))
 :pattern ( ($generated@@74 $generated@@26 $generated@@38 $generated@@6 ($generated@@75 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))
)))
(assert (= ($generated@@31 $generated@@33) $generated@@2))
(assert (= ($generated@@108 $generated@@33) $generated@@4))
(assert (= ($generated@@31 $generated@@27) $generated@@3))
(assert (= ($generated@@108 $generated@@27) $generated@@4))
(assert (forall (($generated@@111 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@111 $generated@@33)  (or (= $generated@@111 $generated@@24) ($generated@@109 ($generated@@110 $generated@@111))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@111 $generated@@33))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (! ($generated@@32 $generated@@7 $generated@@113 $generated $generated@@112)
 :pattern ( ($generated@@32 $generated@@7 $generated@@113 $generated $generated@@112))
)))
(assert (forall (($generated@@114 T@U) ) (! ($generated@@25 $generated@@7 $generated@@114 $generated)
 :pattern ( ($generated@@25 $generated@@7 $generated@@114 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 (T@U) Bool)
(declare-fun $generated@@120 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@121 true))
(let (($generated@@122  (=> (and ($generated@@66 ($generated@@63 $generated@@26 $generated@@115) $generated@@33 $generated@@116) ($generated@@32 $generated@@7 ($generated@@11 $generated@@117) $generated $generated@@116)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (< $generated@@117 10)) (=> (< $generated@@117 10) (and (=> (= (ControlFlow 0 2) (- 0 6)) (or (<= 0 $generated@@117) (= $generated@@117 $generated@@117))) (=> (or (<= 0 $generated@@117) (= $generated@@117 $generated@@117)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (and (= $generated@@115 $generated@@115) (= $generated@@117 $generated@@117)) (< $generated@@117 $generated@@117))) (=> (or (and (= $generated@@115 $generated@@115) (= $generated@@117 $generated@@117)) (< $generated@@117 $generated@@117)) (=> (and (and (or (and (= $generated@@115 $generated@@115) (= $generated@@117 $generated@@117)) ($generated@@23 $generated@@115 $generated@@117)) (< ($generated@@22 $generated@@115 $generated@@117) 5)) (and ($generated@@66 ($generated@@63 $generated@@26 $generated@@115) $generated@@33 $generated@@116) ($generated@@32 $generated@@7 ($generated@@11 $generated@@117) $generated $generated@@116))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (< $generated@@117 10)) (=> (< $generated@@117 10) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@117) (= $generated@@117 $generated@@117))) (=> (or (<= 0 $generated@@117) (= $generated@@117 $generated@@117)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@115 $generated@@115) (= $generated@@117 $generated@@117)) (< $generated@@117 $generated@@117)))))))))))))))))
(let (($generated@@123  (=> (and (= $generated@@118 ($generated@@75 $generated@@24 $generated@@116 $generated@@1 false)) (< $generated@@117 10)) (and (=> (= (ControlFlow 0 9) 2) $generated@@122) (=> (= (ControlFlow 0 9) 8) $generated@@121)))))
(let (($generated@@124  (=> (and ($generated@@119 $generated@@116) ($generated@@120 $generated@@116)) (=> (and (and (or (not (= $generated@@115 $generated@@24)) (not true)) (and ($generated@@25 $generated@@26 $generated@@115 $generated@@27) ($generated@@32 $generated@@26 $generated@@115 $generated@@27 $generated@@116))) (and (= 2 $generated@@21) (= (ControlFlow 0 10) 9))) $generated@@123))))
$generated@@124)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
