(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@51 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@110 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@111 (T@U) Bool)
(declare-fun $generated@@114 (T@U) T@U)
(declare-fun $generated@@115 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@1))
(assert (= ($generated@@20 $generated@@22) $generated@@2))
(assert (= ($generated@@4 $generated@@24) 3))
(assert ($generated@@23 $generated@@24 $generated@@21 $generated@@25))
(assert ($generated@@23 $generated@@24 $generated@@22 $generated@@25))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@28) (= $generated@@27 $generated@@28))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@33 T@U) ) (! (= ($generated@@32 $generated@@33) (= ($generated@@20 $generated@@33) $generated@@1))
 :pattern ( ($generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ) (! (= ($generated@@34 $generated@@35) (= ($generated@@20 $generated@@35) $generated@@2))
 :pattern ( ($generated@@34 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ) (!  (=> ($generated@@32 $generated@@40) (= $generated@@40 $generated@@21))
 :pattern ( ($generated@@32 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ) (!  (=> ($generated@@34 $generated@@41) (= $generated@@41 $generated@@22))
 :pattern ( ($generated@@34 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (!  (=> ($generated@@42 $generated@@43) (or ($generated@@32 $generated@@43) ($generated@@34 $generated@@43)))
 :pattern ( ($generated@@42 $generated@@43))
)))
(assert (forall (($generated@@44 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@44 $generated@@25) (or ($generated@@32 $generated@@44) ($generated@@34 $generated@@44)))
 :pattern ( ($generated@@34 $generated@@44) ($generated@@23 $generated@@24 $generated@@44 $generated@@25))
 :pattern ( ($generated@@32 $generated@@44) ($generated@@23 $generated@@24 $generated@@44 $generated@@25))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> (and ($generated@@32 $generated@@45) ($generated@@32 $generated@@46)) ($generated@@26 $generated@@45 $generated@@46))
 :pattern ( ($generated@@26 $generated@@45 $generated@@46) ($generated@@32 $generated@@45))
 :pattern ( ($generated@@26 $generated@@45 $generated@@46) ($generated@@32 $generated@@46))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and ($generated@@34 $generated@@47) ($generated@@34 $generated@@48)) ($generated@@26 $generated@@47 $generated@@48))
 :pattern ( ($generated@@26 $generated@@47 $generated@@48) ($generated@@34 $generated@@47))
 :pattern ( ($generated@@26 $generated@@47 $generated@@48) ($generated@@34 $generated@@48))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@36 $generated@@50 ($generated@@37 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@37 $generated@@50 $generated@@49))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@51 $generated@@62 $generated@@63 $generated@@64 ($generated@@58 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@67 $generated@@68) $generated@@65)
 :weight 0
)) (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@51 $generated@@69 $generated@@70 $generated@@71 ($generated@@58 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@76 $generated@@77) ($generated@@51 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@76 $generated@@77)))
 :weight 0
)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@51 $generated@@78 $generated@@79 $generated@@80 ($generated@@58 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@51 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)))) (= ($generated@@4 $generated@@52) 4)) (= ($generated@@4 $generated@@53) 5)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@55 $generated@@87 $generated@@88 ($generated@@59 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@91) $generated@@89)
 :weight 0
))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@96 $generated@@97) (= ($generated@@55 $generated@@92 $generated@@93 ($generated@@59 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@97) ($generated@@55 $generated@@92 $generated@@93 $generated@@95 $generated@@97)))
 :weight 0
))) (= ($generated@@4 $generated@@56) 6)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (= ($generated@@4 ($generated@@57 $generated@@98 $generated@@99)) 7))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@60 ($generated@@57 $generated@@100 $generated@@101)) $generated@@100)
 :pattern ( ($generated@@57 $generated@@100 $generated@@101))
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@61 ($generated@@57 $generated@@102 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@57 $generated@@102 $generated@@103))
))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 Bool) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@9 ($generated@@51 $generated@@52 $generated@@53 $generated@@5 ($generated@@54 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))  (=> (and (or (not (= $generated@@108 $generated@@104)) (not true)) ($generated@@9 ($generated@@36 $generated@@5 ($generated@@55 $generated@@53 $generated@@56 ($generated@@55 $generated@@52 ($generated@@57 $generated@@53 $generated@@56) $generated@@105 $generated@@108) $generated@@106)))) $generated@@107))
 :pattern ( ($generated@@51 $generated@@52 $generated@@53 $generated@@5 ($generated@@54 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (!  (=> (and ($generated@@111 $generated@@113) ($generated@@23 $generated@@24 $generated@@112 $generated@@25)) ($generated@@110 $generated@@24 $generated@@112 $generated@@25 $generated@@113))
 :pattern ( ($generated@@110 $generated@@24 $generated@@112 $generated@@25 $generated@@113))
)))
(assert (= ($generated@@114 $generated@@25) $generated@@0))
(assert (= ($generated@@115 $generated@@25) $generated@@3))
(assert (= $generated@@21 ($generated@@29 $generated@@24 $generated@@21)))
(assert (= $generated@@22 ($generated@@29 $generated@@24 $generated@@22)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@37 $generated@@117 ($generated@@29 $generated@@117 $generated@@116)) ($generated@@29 $generated@@56 ($generated@@37 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@37 $generated@@117 ($generated@@29 $generated@@117 $generated@@116)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@125  (=> ($generated@@42 $generated@@118) (=> (and (not ($generated@@26 $generated@@118 $generated@@21)) (= (ControlFlow 0 3) (- 0 2))) false))))
(let (($generated@@126 true))
(let (($generated@@127  (=> (= $generated@@119 ($generated@@54 $generated@@120 $generated@@121 $generated false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@126) (=> (= (ControlFlow 0 4) 3) $generated@@125)))))
(let (($generated@@128  (=> (and ($generated@@111 $generated@@121) ($generated@@122 $generated@@121)) (=> (and (and (and ($generated@@23 $generated@@24 $generated@@118 $generated@@25) ($generated@@110 $generated@@24 $generated@@118 $generated@@25 $generated@@121)) ($generated@@42 $generated@@118)) (and (and ($generated@@23 $generated@@24 $generated@@123 $generated@@25) ($generated@@110 $generated@@24 $generated@@123 $generated@@25 $generated@@121)) (and (= 1 $generated@@124) (= (ControlFlow 0 5) 4)))) $generated@@127))))
$generated@@128)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
