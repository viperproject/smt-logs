(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U T@U) Bool)
(declare-fun $generated@@19 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@20 () T@T)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@T T@T) T@T)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@26 (T@T) T@T)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@48 (Int) Int)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@U T@U) Bool)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@59 (T@U) Bool)
(declare-fun $generated@@60 (T@U T@U) Bool)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@104 (T@U) T@U)
(declare-fun $generated@@105 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@28 T@T) ($generated@@29 T@T) ($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 T@U) ) (! (= ($generated@@19 $generated@@28 $generated@@29 ($generated@@25 $generated@@28 $generated@@29 $generated@@31 $generated@@32 $generated@@30) $generated@@32) $generated@@30)
 :weight 0
)) (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (or (= $generated@@37 $generated@@38) (= ($generated@@19 $generated@@33 $generated@@34 ($generated@@25 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@38) ($generated@@19 $generated@@33 $generated@@34 $generated@@36 $generated@@38)))
 :weight 0
))) (= ($generated@@2 $generated@@20) 3)) (= ($generated@@2 $generated@@21) 4)) (= ($generated@@2 $generated@@22) 5)) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (= ($generated@@2 ($generated@@23 $generated@@39 $generated@@40)) 6))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@26 ($generated@@23 $generated@@41 $generated@@42)) $generated@@41)
 :pattern ( ($generated@@23 $generated@@41 $generated@@42))
))) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (! (= ($generated@@27 ($generated@@23 $generated@@43 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@23 $generated@@43 $generated@@44))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> ($generated@@18 $generated@@45 $generated@@46) (forall (($generated@@47 T@U) ) (!  (=> ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@45 $generated@@47) $generated))) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@46 $generated@@47) $generated))))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@46 $generated@@47) $generated))
)))
 :pattern ( ($generated@@18 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@48 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@24 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@24 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@56 $generated@@4 $generated@@58 $generated@@57) (<= ($generated@@48 0) ($generated@@9 $generated@@58)))
 :pattern ( ($generated@@56 $generated@@4 $generated@@58 $generated@@57))
)))
(assert ($generated@@59 $generated))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> ($generated@@60 $generated@@61 $generated@@62) (and ($generated@@18 $generated@@61 $generated@@62) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (not ($generated@@59 $generated@@64)) (= ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@61 $generated@@63) $generated@@64) ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@62 $generated@@63) $generated@@64)))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@62 $generated@@63) $generated@@64))
))))
 :pattern ( ($generated@@60 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> (or (not (= $generated@@65 $generated@@67)) (not true)) (=> (and ($generated@@18 $generated@@65 $generated@@66) ($generated@@18 $generated@@66 $generated@@67)) ($generated@@18 $generated@@65 $generated@@67)))
 :pattern ( ($generated@@18 $generated@@65 $generated@@66) ($generated@@18 $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@24 $generated@@69 ($generated@@53 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@69 $generated@@68))
)))
(assert  (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@70 $generated@@73 $generated@@74 $generated@@75 ($generated@@72 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@78 $generated@@79) $generated@@76)
 :weight 0
)) (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@70 $generated@@80 $generated@@81 $generated@@82 ($generated@@72 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@70 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@70 $generated@@89 $generated@@90 $generated@@91 ($generated@@72 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@70 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 Bool) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@7 ($generated@@70 $generated@@22 $generated@@20 $generated@@3 ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))  (=> (and (or (not (= $generated@@102 $generated@@98)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@99 $generated@@102) $generated@@100)))) $generated@@101))
 :pattern ( ($generated@@70 $generated@@22 $generated@@20 $generated@@3 ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))
)))
(assert (= ($generated@@104 $generated@@57) $generated@@0))
(assert (= ($generated@@105 $generated@@57) $generated@@1))
(assert (forall (($generated@@106 Int) ) (! (= ($generated@@53 $generated@@4 ($generated@@8 ($generated@@48 $generated@@106))) ($generated@@50 $generated@@21 ($generated@@53 $generated@@4 ($generated@@8 $generated@@106))))
 :pattern ( ($generated@@53 $generated@@4 ($generated@@8 ($generated@@48 $generated@@106))))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@T) ) (! (= ($generated@@53 $generated@@108 ($generated@@50 $generated@@108 $generated@@107)) ($generated@@50 $generated@@21 ($generated@@53 $generated@@108 $generated@@107)))
 :pattern ( ($generated@@53 $generated@@108 ($generated@@50 $generated@@108 $generated@@107)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@109 () Bool)
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 () Int)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 (T@U) Bool)
(declare-fun $generated@@118 (T@U) Bool)
(declare-fun $generated@@119 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@120 true))
(let (($generated@@121 true))
(let (($generated@@122  (=> $generated@@109 (and (=> (= (ControlFlow 0 5) 3) $generated@@121) (=> (= (ControlFlow 0 5) 4) $generated@@120)))))
(let (($generated@@123 true))
(let (($generated@@124  (and (=> (= (ControlFlow 0 6) 2) $generated@@123) (=> (= (ControlFlow 0 6) 5) $generated@@122))))
(let (($generated@@125 true))
(let (($generated@@126  (=> (and (and (and (and (and (not false) (and (<= (- 0 1) $generated@@110) (< $generated@@110 1))) (= $generated@@111 (- 0 1))) (= $generated@@112 0)) (and (<= (- 0 1) $generated@@113) (< $generated@@113 1))) (and (and (and (<= $generated@@111 $generated@@110) (<= $generated@@110 $generated@@112)) (forall (($generated@@127 T@U) ) (!  (=> (and (or (not (= $generated@@127 $generated@@115)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@114 $generated@@127) $generated)))) (= ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@114 $generated@@127) ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@114 $generated@@127)))
 :pattern ( ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@114 $generated@@127))
))) (and ($generated@@60 $generated@@114 $generated@@114) (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> (and (or (not (= $generated@@128 $generated@@115)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@114 $generated@@128) $generated)))) (or (= ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@114 $generated@@128) $generated@@129) ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@114 $generated@@128) $generated@@129)) ($generated@@7 ($generated@@70 $generated@@22 $generated@@20 $generated@@3 $generated@@116 $generated@@128 $generated@@129))))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@114 $generated@@128) $generated@@129))
))))) (and (=> (= (ControlFlow 0 7) 1) $generated@@125) (=> (= (ControlFlow 0 7) 6) $generated@@124)))))
(let (($generated@@130  (=> (= $generated@@116 ($generated@@71 $generated@@115 $generated@@114 $generated false)) (=> (and (= $generated@@111 ($generated@@48 (- 0 1))) (= $generated@@112 ($generated@@48 0))) (and (=> (= (ControlFlow 0 8) (- 0 10)) (<= $generated@@111 $generated@@112)) (=> (<= $generated@@111 $generated@@112) (=> (and (<= $generated@@111 $generated@@113) (<= $generated@@113 $generated@@112)) (and (=> (= (ControlFlow 0 8) (- 0 9)) ($generated@@56 $generated@@4 ($generated@@8 $generated@@113) $generated@@57)) (=> ($generated@@56 $generated@@4 ($generated@@8 $generated@@113) $generated@@57) (=> (= (ControlFlow 0 8) 7) $generated@@126))))))))))
(let (($generated@@131  (=> (and (and ($generated@@117 $generated@@114) ($generated@@118 $generated@@114)) (and (= 0 $generated@@119) (= (ControlFlow 0 11) 8))) $generated@@130)))
$generated@@131))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 9))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
