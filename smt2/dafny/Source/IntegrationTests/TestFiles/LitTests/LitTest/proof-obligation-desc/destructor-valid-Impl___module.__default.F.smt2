(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (Bool Int) T@U)
(declare-fun $generated@@55 (Int) T@U)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@65 (T@U) Int)
(declare-fun $generated@@72 (T@U) Bool)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@78 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@T T@T) T@T)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T) T@T)
(declare-fun $generated@@84 (T@T) T@T)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@139 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated) $generated@@0))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (! ($generated@@26 $generated@@11 $generated@@28 $generated@@27 $generated@@29)
 :pattern ( ($generated@@26 $generated@@11 $generated@@28 $generated@@27 $generated@@29))
)))
(assert (= ($generated@@30 $generated@@31) $generated@@5))
(assert (= ($generated@@9 $generated@@33) 3))
(assert ($generated@@32 $generated@@33 $generated@@31 $generated@@34))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@35 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 $generated@@38) $generated@@38)
 :pattern ( ($generated@@37 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@40 $generated@@41) (= ($generated@@30 $generated@@41) $generated@@4))
 :pattern ( ($generated@@40 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@42 $generated@@43) (= ($generated@@30 $generated@@43) $generated@@5))
 :pattern ( ($generated@@42 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ) (! (= ($generated@@44 $generated@@45) (= ($generated@@30 $generated@@45) $generated@@6))
 :pattern ( ($generated@@44 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 ($generated@@46 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@46 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@44 $generated@@51) (exists (($generated@@52 Bool) ($generated@@53 Int) ) (= $generated@@51 ($generated@@50 $generated@@52 $generated@@53))))
 :pattern ( ($generated@@44 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@42 $generated@@54) (= $generated@@54 $generated@@31))
 :pattern ( ($generated@@42 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (!  (=> ($generated@@40 $generated@@56) (exists (($generated@@57 Int) ) (= $generated@@56 ($generated@@55 $generated@@57))))
 :pattern ( ($generated@@40 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@32 $generated@@11 $generated@@58 $generated@@27) (<= ($generated@@35 0) ($generated@@16 $generated@@58)))
 :pattern ( ($generated@@32 $generated@@11 $generated@@58 $generated@@27))
)))
(assert (forall (($generated@@59 Int) ) (! (= ($generated@@32 $generated@@33 ($generated@@55 $generated@@59) $generated@@34) ($generated@@32 $generated@@11 ($generated@@15 $generated@@59) $generated@@27))
 :pattern ( ($generated@@32 $generated@@33 ($generated@@55 $generated@@59) $generated@@34))
)))
(assert (forall (($generated@@61 Bool) ($generated@@62 Int) ) (! (= ($generated@@60 ($generated@@50 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@50 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 Bool) ($generated@@64 Int) ) (! (= ($generated@@30 ($generated@@50 $generated@@63 $generated@@64)) $generated@@6)
 :pattern ( ($generated@@50 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@66 Bool) ($generated@@67 Int) ) (! (= ($generated@@65 ($generated@@50 $generated@@66 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@50 $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@68 Int) ) (! (= ($generated@@30 ($generated@@55 $generated@@68)) $generated@@4)
 :pattern ( ($generated@@55 $generated@@68))
)))
(assert (forall (($generated@@69 Int) ) (! (= ($generated@@65 ($generated@@55 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@55 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@46 $generated@@71 ($generated@@47 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@47 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@72 $generated@@73) (or (or ($generated@@40 $generated@@73) ($generated@@42 $generated@@73)) ($generated@@44 $generated@@73)))
 :pattern ( ($generated@@72 $generated@@73))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@74 $generated@@85 $generated@@86 $generated@@87 ($generated@@81 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@90 $generated@@91) $generated@@88)
 :weight 0
)) (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@74 $generated@@92 $generated@@93 $generated@@94 ($generated@@81 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@74 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@74 $generated@@101 $generated@@102 $generated@@103 ($generated@@81 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@74 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)))) (= ($generated@@9 $generated@@75) 4)) (= ($generated@@9 $generated@@76) 5)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@78 $generated@@110 $generated@@111 ($generated@@82 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@112) $generated@@114) $generated@@112)
 :weight 0
))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@119 $generated@@120) (= ($generated@@78 $generated@@115 $generated@@116 ($generated@@82 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@117) $generated@@120) ($generated@@78 $generated@@115 $generated@@116 $generated@@118 $generated@@120)))
 :weight 0
))) (= ($generated@@9 $generated@@79) 6)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (= ($generated@@9 ($generated@@80 $generated@@121 $generated@@122)) 7))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@83 ($generated@@80 $generated@@123 $generated@@124)) $generated@@123)
 :pattern ( ($generated@@80 $generated@@123 $generated@@124))
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@84 ($generated@@80 $generated@@125 $generated@@126)) $generated@@126)
 :pattern ( ($generated@@80 $generated@@125 $generated@@126))
))))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 Bool) ($generated@@131 T@U) ($generated@@132 T@U) ) (! (= ($generated@@14 ($generated@@74 $generated@@75 $generated@@76 $generated@@10 ($generated@@77 $generated@@127 $generated@@128 $generated@@129 $generated@@130) $generated@@131 $generated@@132))  (=> (and (or (not (= $generated@@131 $generated@@127)) (not true)) ($generated@@14 ($generated@@46 $generated@@10 ($generated@@78 $generated@@76 $generated@@79 ($generated@@78 $generated@@75 ($generated@@80 $generated@@76 $generated@@79) $generated@@128 $generated@@131) $generated@@129)))) $generated@@130))
 :pattern ( ($generated@@74 $generated@@75 $generated@@76 $generated@@10 ($generated@@77 $generated@@127 $generated@@128 $generated@@129 $generated@@130) $generated@@131 $generated@@132))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> (and ($generated@@133 $generated@@135) (and ($generated@@44 $generated@@134) ($generated@@26 $generated@@33 $generated@@134 $generated@@34 $generated@@135))) ($generated@@26 $generated@@10 ($generated@@13 ($generated@@60 $generated@@134)) $generated $generated@@135))
 :pattern ( ($generated@@26 $generated@@10 ($generated@@13 ($generated@@60 $generated@@134)) $generated $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ) (!  (=> ($generated@@32 $generated@@33 $generated@@136 $generated@@34) (or (or ($generated@@40 $generated@@136) ($generated@@42 $generated@@136)) ($generated@@44 $generated@@136)))
 :pattern ( ($generated@@44 $generated@@136) ($generated@@32 $generated@@33 $generated@@136 $generated@@34))
 :pattern ( ($generated@@42 $generated@@136) ($generated@@32 $generated@@33 $generated@@136 $generated@@34))
 :pattern ( ($generated@@40 $generated@@136) ($generated@@32 $generated@@33 $generated@@136 $generated@@34))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> (and ($generated@@133 $generated@@138) ($generated@@32 $generated@@33 $generated@@137 $generated@@34)) ($generated@@26 $generated@@33 $generated@@137 $generated@@34 $generated@@138))
 :pattern ( ($generated@@26 $generated@@33 $generated@@137 $generated@@34 $generated@@138))
)))
(assert (= ($generated@@25 $generated@@27) $generated@@2))
(assert (= ($generated@@139 $generated@@27) $generated@@7))
(assert (= ($generated@@25 $generated@@34) $generated@@3))
(assert (= ($generated@@139 $generated@@34) $generated@@8))
(assert (= $generated@@31 ($generated@@37 $generated@@33 $generated@@31)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> (and ($generated@@133 $generated@@141) (and ($generated@@40 $generated@@140) ($generated@@26 $generated@@33 $generated@@140 $generated@@34 $generated@@141))) ($generated@@26 $generated@@11 ($generated@@15 ($generated@@65 $generated@@140)) $generated@@27 $generated@@141))
 :pattern ( ($generated@@26 $generated@@11 ($generated@@15 ($generated@@65 $generated@@140)) $generated@@27 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> (and ($generated@@133 $generated@@143) (and ($generated@@44 $generated@@142) ($generated@@26 $generated@@33 $generated@@142 $generated@@34 $generated@@143))) ($generated@@26 $generated@@11 ($generated@@15 ($generated@@65 $generated@@142)) $generated@@27 $generated@@143))
 :pattern ( ($generated@@26 $generated@@11 ($generated@@15 ($generated@@65 $generated@@142)) $generated@@27 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 Int) ) (! (= ($generated@@50 ($generated@@14 ($generated@@37 $generated@@10 $generated@@144)) ($generated@@35 $generated@@145)) ($generated@@37 $generated@@33 ($generated@@50 ($generated@@14 $generated@@144) $generated@@145)))
 :pattern ( ($generated@@50 ($generated@@14 ($generated@@37 $generated@@10 $generated@@144)) ($generated@@35 $generated@@145)))
)))
(assert (forall (($generated@@146 Int) ) (! (= ($generated@@47 $generated@@11 ($generated@@15 ($generated@@35 $generated@@146))) ($generated@@37 $generated@@79 ($generated@@47 $generated@@11 ($generated@@15 $generated@@146))))
 :pattern ( ($generated@@47 $generated@@11 ($generated@@15 ($generated@@35 $generated@@146))))
)))
(assert (forall (($generated@@147 Int) ) (! (= ($generated@@55 ($generated@@35 $generated@@147)) ($generated@@37 $generated@@33 ($generated@@55 $generated@@147)))
 :pattern ( ($generated@@55 ($generated@@35 $generated@@147)))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@T) ) (! (= ($generated@@47 $generated@@149 ($generated@@37 $generated@@149 $generated@@148)) ($generated@@37 $generated@@79 ($generated@@47 $generated@@149 $generated@@148)))
 :pattern ( ($generated@@47 $generated@@149 ($generated@@37 $generated@@149 $generated@@148)))
)))
(assert (forall (($generated@@150 Bool) ($generated@@151 Int) ) (! (= ($generated@@32 $generated@@33 ($generated@@50 $generated@@150 $generated@@151) $generated@@34)  (and ($generated@@32 $generated@@10 ($generated@@13 $generated@@150) $generated) ($generated@@32 $generated@@11 ($generated@@15 $generated@@151) $generated@@27)))
 :pattern ( ($generated@@32 $generated@@33 ($generated@@50 $generated@@150 $generated@@151) $generated@@34))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (! ($generated@@26 $generated@@10 $generated@@153 $generated $generated@@152)
 :pattern ( ($generated@@26 $generated@@10 $generated@@153 $generated $generated@@152))
)))
(assert (forall (($generated@@154 T@U) ) (! ($generated@@32 $generated@@10 $generated@@154 $generated)
 :pattern ( ($generated@@32 $generated@@10 $generated@@154 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 (T@U) Bool)
(declare-fun $generated@@160 () Int)
(declare-fun $generated@@161 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@162  (=> (and (= $generated@@155 ($generated@@77 $generated@@156 $generated@@157 $generated@@1 false)) (= (ControlFlow 0 2) (- 0 1))) (or ($generated@@40 $generated@@158) ($generated@@44 $generated@@158)))))
(let (($generated@@163  (=> (and ($generated@@133 $generated@@157) ($generated@@159 $generated@@157)) (=> (and (and (and ($generated@@32 $generated@@33 $generated@@158 $generated@@34) ($generated@@26 $generated@@33 $generated@@158 $generated@@34 $generated@@157)) ($generated@@72 $generated@@158)) (and (and (<= ($generated@@35 0) $generated@@160) true) (and (= 1 $generated@@161) (= (ControlFlow 0 3) 2)))) $generated@@162))))
$generated@@163)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
