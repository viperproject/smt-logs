(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U T@U) Bool)
(declare-fun $generated@@18 (T@U Int) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@37 (Int) T@U)
(declare-fun $generated@@38 (T@U) Int)
(declare-fun $generated@@40 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@T T@T) T@T)
(declare-fun $generated@@47 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@48 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@99 (T@U) T@U)
(declare-fun $generated@@100 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (= ($generated $generated@@0) 0))
(assert (forall (($generated@@19 T@U) ($generated@@20 T@U) ) (! (= ($generated@@17 $generated@@19 $generated@@20)  (and (= ($generated $generated@@19) ($generated $generated@@20)) (forall (($generated@@21 Int) ) (!  (=> (and (<= 0 $generated@@21) (< $generated@@21 ($generated $generated@@19))) (= ($generated@@18 $generated@@19 $generated@@21) ($generated@@18 $generated@@20 $generated@@21)))
 :pattern ( ($generated@@18 $generated@@19 $generated@@21))
 :pattern ( ($generated@@18 $generated@@20 $generated@@21))
))))
 :pattern ( ($generated@@17 $generated@@19 $generated@@20))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 ($generated@@22 $generated@@25 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@22 $generated@@25 $generated@@24))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated ($generated@@26 $generated@@27 $generated@@28)) (+ 1 ($generated $generated@@27)))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 Int) ($generated@@31 T@U) ) (!  (and (=> (= $generated@@30 ($generated $generated@@29)) (= ($generated@@18 ($generated@@26 $generated@@29 $generated@@31) $generated@@30) $generated@@31)) (=> (or (not (= $generated@@30 ($generated $generated@@29))) (not true)) (= ($generated@@18 ($generated@@26 $generated@@29 $generated@@31) $generated@@30) ($generated@@18 $generated@@29 $generated@@30))))
 :pattern ( ($generated@@18 ($generated@@26 $generated@@29 $generated@@31) $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> ($generated@@17 $generated@@32 $generated@@33) (= $generated@@32 $generated@@33))
 :pattern ( ($generated@@17 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@34 T@U) ) (! (<= 0 ($generated $generated@@34))
 :pattern ( ($generated $generated@@34))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@22 $generated@@36 ($generated@@23 $generated@@36 $generated@@35)) $generated@@35)
 :pattern ( ($generated@@23 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@39 Int) ) (!  (=> (or (and (<= 0 $generated@@39) (< $generated@@39 55296)) (and (<= 57344 $generated@@39) (< $generated@@39 1114112))) (= ($generated@@38 ($generated@@37 $generated@@39)) $generated@@39))
 :pattern ( ($generated@@37 $generated@@39))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@40 $generated@@51 $generated@@52 $generated@@53 ($generated@@47 $generated@@51 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@57 $generated@@54) $generated@@56 $generated@@57) $generated@@54)
 :weight 0
)) (and (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (or (= $generated@@63 $generated@@65) (= ($generated@@40 $generated@@58 $generated@@59 $generated@@60 ($generated@@47 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@65 $generated@@66) ($generated@@40 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@65 $generated@@66)))
 :weight 0
)) (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@73 $generated@@75) (= ($generated@@40 $generated@@67 $generated@@68 $generated@@69 ($generated@@47 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@74 $generated@@75) ($generated@@40 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@74 $generated@@75)))
 :weight 0
)))) (= ($generated@@1 $generated@@41) 3)) (= ($generated@@1 $generated@@42) 4)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@44 $generated@@76 $generated@@77 ($generated@@48 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@78) $generated@@80) $generated@@78)
 :weight 0
))) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@85 $generated@@86) (= ($generated@@44 $generated@@81 $generated@@82 ($generated@@48 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@44 $generated@@81 $generated@@82 $generated@@84 $generated@@86)))
 :weight 0
))) (= ($generated@@1 $generated@@45) 5)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (= ($generated@@1 ($generated@@46 $generated@@87 $generated@@88)) 6))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@49 ($generated@@46 $generated@@89 $generated@@90)) $generated@@89)
 :pattern ( ($generated@@46 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (! (= ($generated@@50 ($generated@@46 $generated@@91 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@46 $generated@@91 $generated@@92))
))))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 Bool) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@6 ($generated@@40 $generated@@41 $generated@@42 $generated@@2 ($generated@@43 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))  (=> (and (or (not (= $generated@@97 $generated@@93)) (not true)) ($generated@@6 ($generated@@22 $generated@@2 ($generated@@44 $generated@@42 $generated@@45 ($generated@@44 $generated@@41 ($generated@@46 $generated@@42 $generated@@45) $generated@@94 $generated@@97) $generated@@95)))) $generated@@96))
 :pattern ( ($generated@@40 $generated@@41 $generated@@42 $generated@@2 ($generated@@43 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ) (!  (and (= ($generated@@99 ($generated@@26 $generated@@101 $generated@@102)) $generated@@101) (= ($generated@@100 ($generated@@26 $generated@@101 $generated@@102)) $generated@@102))
 :pattern ( ($generated@@26 $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ) (!  (and (= ($generated@@37 ($generated@@38 $generated@@103)) $generated@@103) (or (and (<= 0 ($generated@@38 $generated@@103)) (< ($generated@@38 $generated@@103) 55296)) (and (<= 57344 ($generated@@38 $generated@@103)) (< ($generated@@38 $generated@@103) 1114112))))
 :pattern ( ($generated@@38 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ) (!  (=> (= ($generated $generated@@104) 0) (= $generated@@104 $generated@@0))
 :pattern ( ($generated $generated@@104))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 () T@U)
(declare-fun $generated@@107 () T@U)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 () T@T)
(declare-fun $generated@@110 (T@U) Bool)
(declare-fun $generated@@111 (T@U) Bool)
(declare-fun $generated@@112 () Int)
(assert (= ($generated@@1 $generated@@109) 7))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@113  (=> (and (= $generated@@105 ($generated@@43 $generated@@106 $generated@@107 $generated@@108 false)) (= (ControlFlow 0 2) (- 0 1))) (not ($generated@@17 ($generated@@26 $generated@@0 ($generated@@23 $generated@@109 ($generated@@37 97))) ($generated@@26 $generated@@0 ($generated@@23 $generated@@109 ($generated@@37 98))))))))
(let (($generated@@114  (=> (and (and ($generated@@110 $generated@@107) ($generated@@111 $generated@@107)) (and (= 0 $generated@@112) (= (ControlFlow 0 3) 2))) $generated@@113)))
$generated@@114)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
