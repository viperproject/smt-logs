(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._module.Cell () T@U)
(declare-fun Tagclass._module.Cell? () T@U)
(declare-fun class._module.Cell? () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun tytagFamily$Cell () T@U)
(declare-fun field$data () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |lambda#66| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType1Store (T@T T@T T@T T@T T@U T@U T@U T@U T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun Tclass._module.Cell? () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass._module.Cell () T@U)
(declare-fun _module.Cell.data () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun |lambda#55| (T@U T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun |lambda#70| (T@U T@U) T@U)
(declare-fun |lambda#57| (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |lambda#65| (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#71| (T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType2Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#78| (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |lambda#73| (T@U) T@U)
(declare-fun |lambda#72| (T@U T@U) T@U)
(declare-fun |lambda#3| (Bool) T@U)
(declare-fun |lambda#5| (T@U) T@U)
(declare-fun |lambda#56| (Bool) T@U)
(declare-fun |lambda#58| (T@U) T@U)
(declare-fun |lambda#60| (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun |lambda#68| (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#75| (T@U T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSet alloc allocName Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._module.Cell Tagclass._module.Cell? class._module.Cell? tytagFamily$object |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| tytagFamily$Cell field$data)
)
(assert  (and (and (and (and (and (and (and (and (= (Ctor HandleTypeType) 3) (= (Ctor refType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f T@U) (t0@@0 T@U) (h T@U) ) (!  (=> ($IsGoodHeap h) (= ($IsAlloc HandleTypeType f (Tclass._System.___hFunc0 t0@@0) h)  (=> (Requires0 t0@@0 h f) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads0 t0@@0 h f) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h r) alloc))))
 :pattern ( (|Set#IsMember| (Reads0 t0@@0 h f) ($Box refType r)))
)))))
 :pattern ( ($IsAlloc HandleTypeType f (Tclass._System.___hFunc0 t0@@0) h))
)))
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (t3 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) (x2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 t3 (MapType1Store t0@@1 t1@@0 t2 t3 m@@1 x0@@1 x1 x2 val@@1) x0@@1 x1 x2) val@@1)
 :weight 0
)) (and (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (u3 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@0 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 u3 (MapType1Store u0@@0 u1@@0 u2 u3 m@@2 x0@@2 x1@@0 x2@@0 val@@2) y0@@0 y1 y2) (MapType1Select u0@@0 u1@@0 u2 u3 m@@2 y0@@0 y1 y2)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (u3@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 u3@@0 (MapType1Store u0@@1 u1@@1 u2@@0 u3@@0 m@@3 x0@@3 x1@@1 x2@@1 val@@3) y0@@1 y1@@0 y2@@0) (MapType1Select u0@@1 u1@@1 u2@@0 u3@@0 m@@3 y0@@1 y1@@0 y2@@0)))
 :weight 0
))) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@1 T@T) (u3@@1 T@T) (val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@2 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType1Select u0@@2 u1@@2 u2@@1 u3@@1 (MapType1Store u0@@2 u1@@2 u2@@1 u3@@1 m@@4 x0@@4 x1@@2 x2@@2 val@@4) y0@@2 y1@@1 y2@@1) (MapType1Select u0@@2 u1@@2 u2@@1 u3@@1 m@@4 y0@@2 y1@@1 y2@@1)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$l#4#heap#0| T@U) (|$l#4#c#0| T@U) (|$l#4#b#0| T@U) ) (! (= (U_2_bool (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType boolType (|lambda#66| |l#0| |l#1|) |$l#4#heap#0| |$l#4#c#0| |$l#4#b#0|))  (and ($IsBox |$l#4#c#0| |l#0|) ($IsBox |$l#4#b#0| |l#1|)))
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType boolType (|lambda#66| |l#0| |l#1|) |$l#4#heap#0| |$l#4#c#0| |$l#4#b#0|))
)))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R| T@U) (|f#0| T@U) ) (! (= ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|))  (and ($Is HandleTypeType |f#0| (Tclass._System.___hPartialFunc2 |#$T0| |#$T1| |#$R|)) (forall ((|x0#0| T@U) (|x1#0| T@U) )  (=> (and ($IsBox |x0#0| |#$T0|) ($IsBox |x1#0| |#$T1|)) (Requires2 |#$T0| |#$T1| |#$R| $OneHeap |f#0| |x0#0| |x1#0|)))))
 :pattern ( ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|)))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|)) |#$T0@@0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|)) |#$T1@@1|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|)) |#$T1@@4|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|)) |#$R@@5|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|)) |#$T0@@6|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@7| T@U) ) (! (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|)) |#$T1@@7|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@8| T@U) ) (! (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|)) |#$R@@8|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|))
)))
(assert (forall ((|#$R@@9| T@U) (|f#0@@0| T@U) ($h T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@9|) $h) ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hFunc0 |#$R@@9|) $h))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@9|) $h))
)))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|) $h@@0) ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|) $h@@0))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|) $h@@0))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Cell?)  (or (= $o null) (= (dtype $o) Tclass._module.Cell?)))
 :pattern ( ($Is refType $o Tclass._module.Cell?))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@11| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@11|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@11|)) |tytagFamily$_#Func2|))
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@11|))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@12| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@12|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@12|)) |tytagFamily$_#PartialFunc2|))
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@12|))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@13| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@13|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@13|)) |tytagFamily$_#TotalFunc2|))
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@13|))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@14| T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@14|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx)) bx) ($Is HandleTypeType ($Unbox HandleTypeType bx) (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@14|))))
 :pattern ( ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@14|)))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@15| T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@15|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@0)) bx@@0) ($Is HandleTypeType ($Unbox HandleTypeType bx@@0) (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@15|))))
 :pattern ( ($IsBox bx@@0 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@15|)))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@16| T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@16|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@1)) bx@@1) ($Is HandleTypeType ($Unbox HandleTypeType bx@@1) (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@16|))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@16|)))
)))
(assert (forall ((|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@1) ($IsAlloc refType |c#0| Tclass._System.object? $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@1))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Cell $h@@2) ($IsAlloc refType |c#0@@0| Tclass._module.Cell? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Cell $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Cell? $h@@2))
)))
(assert (= (FDim _module.Cell.data) 0))
(assert (= (FieldOfDecl class._module.Cell? field$data) _module.Cell.data))
(assert  (not ($IsGhostField _module.Cell.data)))
(assert (forall ((t0@@2 T@U) (heap T@U) (h@@0 T@U) (r@@0 T@U) (rd T@U) ) (! (= (Apply0 t0@@2 heap (Handle0 h@@0 r@@0 rd)) (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType h@@0 heap))
 :pattern ( (Apply0 t0@@2 heap (Handle0 h@@0 r@@0 rd)))
)))
(assert (forall (($o@@0 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._System.object? $h@@3)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._System.object? $h@@3))
)))
(assert (forall (($o@@1 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.Cell? $h@@4)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.Cell? $h@@4))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|$l#0#heap#0| T@U) ) (! (= (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType (|lambda#55| |l#0@@0| |l#1@@0|) |$l#0#heap#0|) ($Box intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |$l#0#heap#0| |l#0@@0|) |l#1@@0|))))
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType (|lambda#55| |l#0@@0| |l#1@@0|) |$l#0#heap#0|))
)))
(assert (forall ((h@@1 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@1 k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h@@1 k))
)))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|$l#6#heap#0| T@U) (|$l#6#c#0| T@U) (|$l#6#b#0| T@U) ) (! (= (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#70| |l#0@@1| |l#1@@1|) |$l#6#heap#0| |$l#6#c#0| |$l#6#b#0|) ($Box intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |$l#6#heap#0| (ite (U_2_bool ($Unbox boolType |$l#6#b#0|)) ($Unbox refType |$l#6#c#0|) |l#0@@1|)) |l#1@@1|))))
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#70| |l#0@@1| |l#1@@1|) |$l#6#heap#0| |$l#6#c#0| |$l#6#b#0|))
)))
(assert (forall ((|l#0@@2| T@U) (|$l#0#o#0| T@U) ) (! (= (U_2_bool (MapType0Select refType boolType (|lambda#57| |l#0@@2|) |$l#0#o#0|)) (= |$l#0#o#0| |l#0@@2|))
 :pattern ( (MapType0Select refType boolType (|lambda#57| |l#0@@2|) |$l#0#o#0|))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((|l#0@@3| T@U) (|$l#4#heap#0@@0| T@U) (|$l#4#c#0@@0| T@U) (|$l#4#b#0@@0| T@U) ) (! (= (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#65| |l#0@@3|) |$l#4#heap#0@@0| |$l#4#c#0@@0| |$l#4#b#0@@0|) ($Box refType (ite (U_2_bool ($Unbox boolType |$l#4#b#0@@0|)) ($Unbox refType |$l#4#c#0@@0|) |l#0@@3|)))
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#65| |l#0@@3|) |$l#4#heap#0@@0| |$l#4#c#0@@0| |$l#4#b#0@@0|))
)))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@17| T@U) (|f#0@@2| T@U) ) (! (= ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@17|))  (and ($Is HandleTypeType |f#0@@2| (Tclass._System.___hFunc2 |#$T0@@15| |#$T1@@15| |#$R@@17|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) )  (=> (and ($IsBox |x0#0@@0| |#$T0@@15|) ($IsBox |x1#0@@0| |#$T1@@15|)) (|Set#Equal| (Reads2 |#$T0@@15| |#$T1@@15| |#$R@@17| $OneHeap |f#0@@2| |x0#0@@0| |x1#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@17|)))
)))
(assert (forall ((|l#0@@4| T@U) (|l#1@@2| T@U) (|l#2| T@U) (|$l#6#heap#0@@0| T@U) (|$l#6#c#0@@0| T@U) (|$l#6#b#0@@0| T@U) ) (! (= (U_2_bool (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType boolType (|lambda#71| |l#0@@4| |l#1@@2| |l#2|) |$l#6#heap#0@@0| |$l#6#c#0@@0| |$l#6#b#0@@0|))  (and (and ($IsBox |$l#6#c#0@@0| |l#0@@4|) ($IsBox |$l#6#b#0@@0| |l#1@@2|)) (=> (U_2_bool ($Unbox boolType |$l#6#b#0@@0|)) (or (not (= ($Unbox refType |$l#6#c#0@@0|) |l#2|)) (not true)))))
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType boolType (|lambda#71| |l#0@@4| |l#1@@2| |l#2|) |$l#6#heap#0@@0| |$l#6#c#0@@0| |$l#6#b#0@@0|))
)))
(assert (= (Ctor SetType) 8))
(assert (forall ((t0@@3 T@U) (t1@@1 T@U) (t2@@0 T@U) (heap@@0 T@U) (h@@2 T@U) (r@@1 T@U) (rd@@0 T@U) (bx0 T@U) (bx1 T@U) (bx@@2 T@U) ) (! (= (|Set#IsMember| (Reads2 t0@@3 t1@@1 t2@@0 heap@@0 (Handle2 h@@2 r@@1 rd@@0) bx0 bx1) bx@@2) (|Set#IsMember| (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType SetType rd@@0 heap@@0 bx0 bx1) bx@@2))
 :pattern ( (|Set#IsMember| (Reads2 t0@@3 t1@@1 t2@@0 heap@@0 (Handle2 h@@2 r@@1 rd@@0) bx0 bx1) bx@@2))
)))
(assert (forall ((t0@@4 T@U) (heap@@1 T@U) (h@@3 T@U) (r@@2 T@U) (rd@@1 T@U) (bx@@3 T@U) ) (! (= (|Set#IsMember| (Reads0 t0@@4 heap@@1 (Handle0 h@@3 r@@2 rd@@1)) bx@@3) (|Set#IsMember| (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) SetType rd@@1 heap@@1) bx@@3))
 :pattern ( (|Set#IsMember| (Reads0 t0@@4 heap@@1 (Handle0 h@@3 r@@2 rd@@1)) bx@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((t0@@5 T@U) (heap@@2 T@U) (f@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@2) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc0 t0@@5))) (|Set#Equal| (Reads0 t0@@5 $OneHeap f@@0) |Set#Empty|)) (= (Requires0 t0@@5 $OneHeap f@@0) (Requires0 t0@@5 heap@@2 f@@0)))
 :pattern ( (Requires0 t0@@5 $OneHeap f@@0) ($IsGoodHeap heap@@2))
 :pattern ( (Requires0 t0@@5 heap@@2 f@@0))
)))
(assert (forall ((v T@U) (t0@@6 T@U) ) (! (= ($Is SetType v (TSet t0@@6)) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v bx@@4) ($IsBox bx@@4 t0@@6))
 :pattern ( (|Set#IsMember| v bx@@4))
)))
 :pattern ( ($Is SetType v (TSet t0@@6)))
)))
(assert (= (Ctor LayerTypeType) 9))
(assert (forall ((f@@1 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@1 ly) (MapType0Select LayerTypeType A f@@1 ly))
 :pattern ( (AtLayer A f@@1 ly))
)))
(assert ($IsGhostField alloc))
(assert ($IsGoodHeap $OneHeap))
(assert (forall (($h@@5 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass._module.Cell?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@2) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@2) _module.Cell.data)) TInt $h@@5))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@2) _module.Cell.data)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@4 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@4) ($IsAlloc T@@1 v@@0 t h@@4))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@4))
)))
(assert (forall ((t0@@7 T@U) (t1@@2 T@U) (t2@@1 T@U) (heap@@3 T@U) (h@@5 T@U) (r@@3 T@U) (rd@@2 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (! (= (Apply2 t0@@7 t1@@2 t2@@1 heap@@3 (Handle2 h@@5 r@@3 rd@@2) bx0@@0 bx1@@0) (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType BoxType h@@5 heap@@3 bx0@@0 bx1@@0))
 :pattern ( (Apply2 t0@@7 t1@@2 t2@@1 heap@@3 (Handle2 h@@5 r@@3 rd@@2) bx0@@0 bx1@@0))
)))
(assert (forall ((h@@6 T@U) (k@@0 T@U) (bx@@5 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@6 k@@0) (=> ($IsAllocBox bx@@5 t@@0 h@@6) ($IsAllocBox bx@@5 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@6 k@@0) ($IsAllocBox bx@@5 t@@0 h@@6))
)))
(assert (forall ((h@@7 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@7 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@7) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@7 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@7))
)))
(assert (forall ((|#$R@@18| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc0 |#$R@@18|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@18|)) |tytagFamily$_#Func0|))
 :pattern ( (Tclass._System.___hFunc0 |#$R@@18|))
)))
(assert (forall ((|#$R@@19| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@19|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@19|)) |tytagFamily$_#PartialFunc0|))
 :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|))
)))
(assert (forall ((|#$R@@20| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@20|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@20|)) |tytagFamily$_#TotalFunc0|))
 :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@20|))
)))
(assert  (and (forall ((t0@@8 T@T) (t1@@3 T@T) (t2@@2 T@T) (val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@3 T@U) ) (! (= (MapType2Select t0@@8 t1@@3 t2@@2 (MapType2Store t0@@8 t1@@3 t2@@2 m@@5 x0@@5 x1@@3 val@@5) x0@@5 x1@@3) val@@5)
 :weight 0
)) (and (forall ((u0@@3 T@T) (u1@@3 T@T) (u2@@2 T@T) (val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@4 T@U) (y0@@3 T@U) (y1@@2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select u0@@3 u1@@3 u2@@2 (MapType2Store u0@@3 u1@@3 u2@@2 m@@6 x0@@6 x1@@4 val@@6) y0@@3 y1@@2) (MapType2Select u0@@3 u1@@3 u2@@2 m@@6 y0@@3 y1@@2)))
 :weight 0
)) (forall ((u0@@4 T@T) (u1@@4 T@T) (u2@@3 T@T) (val@@7 T@U) (m@@7 T@U) (x0@@7 T@U) (x1@@5 T@U) (y0@@4 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType2Select u0@@4 u1@@4 u2@@3 (MapType2Store u0@@4 u1@@4 u2@@3 m@@7 x0@@7 x1@@5 val@@7) y0@@4 y1@@3) (MapType2Select u0@@4 u1@@4 u2@@3 m@@7 y0@@4 y1@@3)))
 :weight 0
)))))
(assert (forall ((|l#0@@5| T@U) (|l#1@@3| T@U) (|l#2@@0| T@U) (|l#3| T@U) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType2Select refType FieldType boolType (|lambda#78| |l#0@@5| |l#1@@3| |l#2@@0| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0@@5|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@3| $o@@3) |l#2@@0|)))) (= $o@@3 |l#3|)))
 :pattern ( (MapType2Select refType FieldType boolType (|lambda#78| |l#0@@5| |l#1@@3| |l#2@@0| |l#3|) $o@@3 $f))
)))
(assert (forall ((s T@U) (bx@@6 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@6) (U_2_bool (MapType0Select refType boolType s ($Unbox refType bx@@6))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@6))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object?))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._System.object)))
 :pattern ( ($IsBox bx@@8 Tclass._System.object))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.Cell) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass._module.Cell)))
 :pattern ( ($IsBox bx@@9 Tclass._module.Cell))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass._module.Cell?) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) Tclass._module.Cell?)))
 :pattern ( ($IsBox bx@@10 Tclass._module.Cell?))
)))
(assert (forall ((|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| Tclass._System.object)  (and ($Is refType |c#0@@1| Tclass._System.object?) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@1| Tclass._System.object?))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.Cell)  (and ($Is refType |c#0@@2| Tclass._module.Cell?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Cell))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Cell?))
)))
(assert (forall ((f@@2 T@U) (t0@@9 T@U) (t1@@4 T@U) (t2@@3 T@U) (h@@8 T@U) ) (!  (=> ($IsGoodHeap h@@8) (= ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@9 t1@@4 t2@@3) h@@8) (forall ((bx0@@1 T@U) (bx1@@1 T@U) ) (!  (=> (and (and (and ($IsBox bx0@@1 t0@@9) ($IsAllocBox bx0@@1 t0@@9 h@@8)) (and ($IsBox bx1@@1 t1@@4) ($IsAllocBox bx1@@1 t1@@4 h@@8))) (Requires2 t0@@9 t1@@4 t2@@3 h@@8 f@@2 bx0@@1 bx1@@1)) (forall ((r@@4 T@U) ) (!  (=> (and (or (not (= r@@4 null)) (not true)) (|Set#IsMember| (Reads2 t0@@9 t1@@4 t2@@3 h@@8 f@@2 bx0@@1 bx1@@1) ($Box refType r@@4))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@8 r@@4) alloc))))
 :pattern ( (|Set#IsMember| (Reads2 t0@@9 t1@@4 t2@@3 h@@8 f@@2 bx0@@1 bx1@@1) ($Box refType r@@4)))
)))
 :pattern ( (Apply2 t0@@9 t1@@4 t2@@3 h@@8 f@@2 bx0@@1 bx1@@1))
 :pattern ( (Reads2 t0@@9 t1@@4 t2@@3 h@@8 f@@2 bx0@@1 bx1@@1))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@9 t1@@4 t2@@3) h@@8))
)))
(assert (forall ((|l#0@@6| T@U) (|$l#6#heap#0@@1| T@U) (|$l#6#c#0@@1| T@U) (|$l#6#b#0@@1| T@U) ) (! (= (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType SetType (|lambda#73| |l#0@@6|) |$l#6#heap#0@@1| |$l#6#c#0@@1| |$l#6#b#0@@1|) (SetRef_to_SetBox (|lambda#72| ($Unbox refType |$l#6#c#0@@1|) |l#0@@6|)))
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType SetType (|lambda#73| |l#0@@6|) |$l#6#heap#0@@1| |$l#6#c#0@@1| |$l#6#b#0@@1|))
)))
(assert (forall ((|l#0@@7| Bool) (|$l#0#o#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select refType boolType (|lambda#3| |l#0@@7|) |$l#0#o#0@@0|)) |l#0@@7|)
 :pattern ( (MapType0Select refType boolType (|lambda#3| |l#0@@7|) |$l#0#o#0@@0|))
)))
(assert (forall ((|l#0@@8| T@U) (|$l#0#ly#0| T@U) ) (! (= (MapType0Select LayerTypeType HandleTypeType (|lambda#5| |l#0@@8|) |$l#0#ly#0|) |l#0@@8|)
 :pattern ( (MapType0Select LayerTypeType HandleTypeType (|lambda#5| |l#0@@8|) |$l#0#ly#0|))
)))
(assert (forall ((|l#0@@9| Bool) (|$l#0#heap#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) boolType (|lambda#56| |l#0@@9|) |$l#0#heap#0@@0|)) |l#0@@9|)
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) boolType (|lambda#56| |l#0@@9|) |$l#0#heap#0@@0|))
)))
(assert (forall ((|l#0@@10| T@U) (|$l#0#heap#0@@1| T@U) ) (! (= (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) SetType (|lambda#58| |l#0@@10|) |$l#0#heap#0@@1|) |l#0@@10|)
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) SetType (|lambda#58| |l#0@@10|) |$l#0#heap#0@@1|))
)))
(assert (forall ((|l#0@@11| T@U) (|$l#2#heap#0| T@U) ) (! (= (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType (|lambda#60| |l#0@@11|) |$l#2#heap#0|) |l#0@@11|)
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType (|lambda#60| |l#0@@11|) |$l#2#heap#0|))
)))
(assert (forall ((f@@3 T@U) (t0@@10 T@U) (t1@@5 T@U) (t2@@4 T@U) ) (! (= ($Is HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@10 t1@@5 t2@@4)) (forall ((h@@9 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@9) (and ($IsBox bx0@@2 t0@@10) ($IsBox bx1@@2 t1@@5))) (Requires2 t0@@10 t1@@5 t2@@4 h@@9 f@@3 bx0@@2 bx1@@2)) ($IsBox (Apply2 t0@@10 t1@@5 t2@@4 h@@9 f@@3 bx0@@2 bx1@@2) t2@@4))
 :pattern ( (Apply2 t0@@10 t1@@5 t2@@4 h@@9 f@@3 bx0@@2 bx1@@2))
)))
 :pattern ( ($Is HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@10 t1@@5 t2@@4)))
)))
(assert (forall ((t0@@11 T@U) (heap@@4 T@U) (f@@4 T@U) ) (!  (=> (and ($IsGoodHeap heap@@4) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc0 t0@@11))) (= (|Set#Equal| (Reads0 t0@@11 $OneHeap f@@4) |Set#Empty|) (|Set#Equal| (Reads0 t0@@11 heap@@4 f@@4) |Set#Empty|)))
 :pattern ( (Reads0 t0@@11 $OneHeap f@@4) ($IsGoodHeap heap@@4))
 :pattern ( (Reads0 t0@@11 heap@@4 f@@4))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((t0@@12 T@U) (t1@@6 T@U) (t2@@5 T@U) (heap@@5 T@U) (f@@5 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and ($IsGoodHeap heap@@5) (and (and ($IsBox bx0@@3 t0@@12) ($IsBox bx1@@3 t1@@6)) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 t0@@12 t1@@6 t2@@5)))) (= (|Set#Equal| (Reads2 t0@@12 t1@@6 t2@@5 $OneHeap f@@5 bx0@@3 bx1@@3) |Set#Empty|) (|Set#Equal| (Reads2 t0@@12 t1@@6 t2@@5 heap@@5 f@@5 bx0@@3 bx1@@3) |Set#Empty|)))
 :pattern ( (Reads2 t0@@12 t1@@6 t2@@5 $OneHeap f@@5 bx0@@3 bx1@@3) ($IsGoodHeap heap@@5))
 :pattern ( (Reads2 t0@@12 t1@@6 t2@@5 heap@@5 f@@5 bx0@@3 bx1@@3))
)))
(assert (forall ((|l#0@@12| T@U) (|l#1@@4| T@U) (|$l#6#o#0| T@U) ) (! (= (U_2_bool (MapType0Select refType boolType (|lambda#72| |l#0@@12| |l#1@@4|) |$l#6#o#0|))  (or (= |$l#6#o#0| |l#0@@12|) (= |$l#6#o#0| |l#1@@4|)))
 :pattern ( (MapType0Select refType boolType (|lambda#72| |l#0@@12| |l#1@@4|) |$l#6#o#0|))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@6 T@U) (t0@@13 T@U) (t1@@7 T@U) (t2@@6 T@U) (h@@10 T@U) ) (!  (=> (and ($IsGoodHeap h@@10) ($IsAlloc HandleTypeType f@@6 (Tclass._System.___hFunc2 t0@@13 t1@@7 t2@@6) h@@10)) (forall ((bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and ($IsAllocBox bx0@@4 t0@@13 h@@10) ($IsAllocBox bx1@@4 t1@@7 h@@10)) (Requires2 t0@@13 t1@@7 t2@@6 h@@10 f@@6 bx0@@4 bx1@@4)) ($IsAllocBox (Apply2 t0@@13 t1@@7 t2@@6 h@@10 f@@6 bx0@@4 bx1@@4) t2@@6 h@@10))
 :pattern ( (Apply2 t0@@13 t1@@7 t2@@6 h@@10 f@@6 bx0@@4 bx1@@4))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@6 (Tclass._System.___hFunc2 t0@@13 t1@@7 t2@@6) h@@10))
)))
(assert (forall ((t0@@14 T@U) (h0 T@U) (h1 T@U) (f@@7 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc0 t0@@14))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads0 t0@@14 h0 f@@7) ($Box refType o@@1))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0 o@@1) fld) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires0 t0@@14 h0 f@@7) (Requires0 t0@@14 h1 f@@7)))
 :pattern ( ($HeapSucc h0 h1) (Requires0 t0@@14 h1 f@@7))
)))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@8 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads0 t0@@15 h1@@0 f@@8) ($Box refType o@@2))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires0 t0@@15 h0@@0 f@@8) (Requires0 t0@@15 h1@@0 f@@8)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires0 t0@@15 h1@@0 f@@8))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 TInt) (and (= ($Box intType ($Unbox intType bx@@11)) bx@@11) ($Is intType ($Unbox intType bx@@11) TInt)))
 :pattern ( ($IsBox bx@@11 TInt))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 TBool) (and (= ($Box boolType ($Unbox boolType bx@@12)) bx@@12) ($Is boolType ($Unbox boolType bx@@12) TBool)))
 :pattern ( ($IsBox bx@@12 TBool))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@16 T@U) (h@@11 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@16) h@@11) (forall ((bx@@13 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@13) ($IsAllocBox bx@@13 t0@@16 h@@11))
 :pattern ( (|Set#IsMember| v@@3 bx@@13))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@16) h@@11))
)))
(assert (forall (($o@@4 T@U) ) (! ($Is refType $o@@4 Tclass._System.object?)
 :pattern ( ($Is refType $o@@4 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((|#$R@@21| T@U) ) (! (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@21|)) |#$R@@21|)
 :pattern ( (Tclass._System.___hFunc0 |#$R@@21|))
)))
(assert (forall ((|#$R@@22| T@U) ) (! (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@22|)) |#$R@@22|)
 :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@22|))
)))
(assert (forall ((|#$R@@23| T@U) ) (! (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@23|)) |#$R@@23|)
 :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (t2@@7 T@U) (heap@@6 T@U) (f@@9 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@6) (and (and ($IsBox bx0@@5 t0@@17) ($IsBox bx1@@5 t1@@8)) ($Is HandleTypeType f@@9 (Tclass._System.___hFunc2 t0@@17 t1@@8 t2@@7)))) (|Set#Equal| (Reads2 t0@@17 t1@@8 t2@@7 $OneHeap f@@9 bx0@@5 bx1@@5) |Set#Empty|)) (= (Requires2 t0@@17 t1@@8 t2@@7 $OneHeap f@@9 bx0@@5 bx1@@5) (Requires2 t0@@17 t1@@8 t2@@7 heap@@6 f@@9 bx0@@5 bx1@@5)))
 :pattern ( (Requires2 t0@@17 t1@@8 t2@@7 $OneHeap f@@9 bx0@@5 bx1@@5) ($IsGoodHeap heap@@6))
 :pattern ( (Requires2 t0@@17 t1@@8 t2@@7 heap@@6 f@@9 bx0@@5 bx1@@5))
)))
(assert (forall ((|l#0@@13| T@U) (|$l#4#heap#0@@1| T@U) (|$l#4#c#0@@1| T@U) (|$l#4#b#0@@1| T@U) ) (! (= (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType SetType (|lambda#68| |l#0@@13|) |$l#4#heap#0@@1| |$l#4#c#0@@1| |$l#4#b#0@@1|) |l#0@@13|)
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType SetType (|lambda#68| |l#0@@13|) |$l#4#heap#0@@1| |$l#4#c#0@@1| |$l#4#b#0@@1|))
)))
(assert (forall ((t0@@18 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@10 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is HandleTypeType f@@10 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@3 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads0 t0@@18 h0@@1 f@@10) ($Box refType o@@3))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@1 o@@3) fld@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@1 o@@3) fld@@1))))) (= (Reads0 t0@@18 h0@@1 f@@10) (Reads0 t0@@18 h1@@1 f@@10)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@18 h1@@1 f@@10))
)))
(assert (forall ((t0@@19 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@11 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is HandleTypeType f@@11 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@4 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads0 t0@@19 h1@@2 f@@11) ($Box refType o@@4))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@2 o@@4) fld@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@2 o@@4) fld@@2))))) (= (Reads0 t0@@19 h0@@2 f@@11) (Reads0 t0@@19 h1@@2 f@@11)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads0 t0@@19 h1@@2 f@@11))
)))
(assert (forall ((t0@@20 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@12 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@5 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads0 t0@@20 h0@@3 f@@12) ($Box refType o@@5))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@3 o@@5) fld@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@3 o@@5) fld@@3))))) (= (Apply0 t0@@20 h0@@3 f@@12) (Apply0 t0@@20 h1@@3 f@@12)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply0 t0@@20 h1@@3 f@@12))
)))
(assert (forall ((t0@@21 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@13 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is HandleTypeType f@@13 (Tclass._System.___hFunc0 t0@@21))) (forall ((o@@6 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads0 t0@@21 h1@@4 f@@13) ($Box refType o@@6))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@4 o@@6) fld@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@4 o@@6) fld@@4))))) (= (Apply0 t0@@21 h0@@4 f@@13) (Apply0 t0@@21 h1@@4 f@@13)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@21 h1@@4 f@@13))
)))
(assert (forall (($h@@6 T@U) ($o@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) Tclass._module.Cell?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@5) _module.Cell.data)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@5) _module.Cell.data)))
)))
(assert (forall ((f@@14 T@U) (t0@@22 T@U) (t1@@9 T@U) (t2@@8 T@U) (u0@@5 T@U) (u1@@5 T@U) (u2@@4 T@U) ) (!  (=> (and (and (and ($Is HandleTypeType f@@14 (Tclass._System.___hFunc2 t0@@22 t1@@9 t2@@8)) (forall ((bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 u0@@5) ($IsBox bx@@14 t0@@22))
 :pattern ( ($IsBox bx@@14 u0@@5))
 :pattern ( ($IsBox bx@@14 t0@@22))
))) (forall ((bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 u1@@5) ($IsBox bx@@15 t1@@9))
 :pattern ( ($IsBox bx@@15 u1@@5))
 :pattern ( ($IsBox bx@@15 t1@@9))
))) (forall ((bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 t2@@8) ($IsBox bx@@16 u2@@4))
 :pattern ( ($IsBox bx@@16 t2@@8))
 :pattern ( ($IsBox bx@@16 u2@@4))
))) ($Is HandleTypeType f@@14 (Tclass._System.___hFunc2 u0@@5 u1@@5 u2@@4)))
 :pattern ( ($Is HandleTypeType f@@14 (Tclass._System.___hFunc2 t0@@22 t1@@9 t2@@8)) ($Is HandleTypeType f@@14 (Tclass._System.___hFunc2 u0@@5 u1@@5 u2@@4)))
)))
(assert (forall ((f@@15 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@15 ($LS ly@@0)) (AtLayer A@@0 f@@15 ly@@0))
 :pattern ( (AtLayer A@@0 f@@15 ($LS ly@@0)))
)))
(assert (forall ((|l#0@@14| T@U) (|l#1@@5| T@U) (|l#2@@1| T@U) (|l#3@@0| Bool) ($o@@6 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType2Select refType FieldType boolType (|lambda#0| |l#0@@14| |l#1@@5| |l#2@@1| |l#3@@0|) $o@@6 $f@@0))  (=> (and (or (not (= $o@@6 |l#0@@14|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@5| $o@@6) |l#2@@1|)))) |l#3@@0|))
 :pattern ( (MapType2Select refType FieldType boolType (|lambda#0| |l#0@@14| |l#1@@5| |l#2@@1| |l#3@@0|) $o@@6 $f@@0))
)))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@24| T@U) (|f#0@@3| T@U) ($h@@7 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@24|) $h@@7) ($IsAlloc HandleTypeType |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@16| |#$R@@24|) $h@@7))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@24|) $h@@7))
)))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@25| T@U) (|f#0@@4| T@U) ($h@@8 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@4| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@25|) $h@@8) ($IsAlloc HandleTypeType |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@25|) $h@@8))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@4| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@25|) $h@@8))
)))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (! (= ($Is HandleTypeType |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is HandleTypeType |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))
 :pattern ( ($Is HandleTypeType |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|)))
)))
(assert (forall ((f@@16 T@U) (t0@@23 T@U) ) (! (= ($Is HandleTypeType f@@16 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@12 T@U) ) (!  (=> (and ($IsGoodHeap h@@12) (Requires0 t0@@23 h@@12 f@@16)) ($IsBox (Apply0 t0@@23 h@@12 f@@16) t0@@23))
 :pattern ( (Apply0 t0@@23 h@@12 f@@16))
)))
 :pattern ( ($Is HandleTypeType f@@16 (Tclass._System.___hFunc0 t0@@23)))
)))
(assert (forall ((t0@@24 T@U) (t1@@10 T@U) (t2@@9 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@17 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and (and ($IsBox bx0@@6 t0@@24) ($IsBox bx1@@6 t1@@10)) ($Is HandleTypeType f@@17 (Tclass._System.___hFunc2 t0@@24 t1@@10 t2@@9)))) (forall ((o@@7 T@U) (fld@@5 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads2 t0@@24 t1@@10 t2@@9 h0@@5 f@@17 bx0@@6 bx1@@6) ($Box refType o@@7))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@5 o@@7) fld@@5) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@5 o@@7) fld@@5))))) (= (Requires2 t0@@24 t1@@10 t2@@9 h0@@5 f@@17 bx0@@6 bx1@@6) (Requires2 t0@@24 t1@@10 t2@@9 h1@@5 f@@17 bx0@@6 bx1@@6)))
 :pattern ( ($HeapSucc h0@@5 h1@@5) (Requires2 t0@@24 t1@@10 t2@@9 h1@@5 f@@17 bx0@@6 bx1@@6))
)))
(assert (forall ((t0@@25 T@U) (t1@@11 T@U) (t2@@10 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@18 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@7 t0@@25) ($IsBox bx1@@7 t1@@11)) ($Is HandleTypeType f@@18 (Tclass._System.___hFunc2 t0@@25 t1@@11 t2@@10)))) (forall ((o@@8 T@U) (fld@@6 T@U) )  (=> (and (or (not (= o@@8 null)) (not true)) (|Set#IsMember| (Reads2 t0@@25 t1@@11 t2@@10 h1@@6 f@@18 bx0@@7 bx1@@7) ($Box refType o@@8))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@6 o@@8) fld@@6) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@6 o@@8) fld@@6))))) (= (Requires2 t0@@25 t1@@11 t2@@10 h0@@6 f@@18 bx0@@7 bx1@@7) (Requires2 t0@@25 t1@@11 t2@@10 h1@@6 f@@18 bx0@@7 bx1@@7)))
 :pattern ( ($HeapSucc h0@@6 h1@@6) (Requires2 t0@@25 t1@@11 t2@@10 h1@@6 f@@18 bx0@@7 bx1@@7))
)))
(assert (forall ((bx@@17 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@17 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@17)) bx@@17) ($Is SetType ($Unbox SetType bx@@17) (TSet t@@5))))
 :pattern ( ($IsBox bx@@17 (TSet t@@5)))
)))
(assert (forall ((|#$R@@27| T@U) (bx@@18 T@U) ) (!  (=> ($IsBox bx@@18 (Tclass._System.___hFunc0 |#$R@@27|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@18)) bx@@18) ($Is HandleTypeType ($Unbox HandleTypeType bx@@18) (Tclass._System.___hFunc0 |#$R@@27|))))
 :pattern ( ($IsBox bx@@18 (Tclass._System.___hFunc0 |#$R@@27|)))
)))
(assert (forall ((|#$R@@28| T@U) (bx@@19 T@U) ) (!  (=> ($IsBox bx@@19 (Tclass._System.___hPartialFunc0 |#$R@@28|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@19)) bx@@19) ($Is HandleTypeType ($Unbox HandleTypeType bx@@19) (Tclass._System.___hPartialFunc0 |#$R@@28|))))
 :pattern ( ($IsBox bx@@19 (Tclass._System.___hPartialFunc0 |#$R@@28|)))
)))
(assert (forall ((|#$R@@29| T@U) (bx@@20 T@U) ) (!  (=> ($IsBox bx@@20 (Tclass._System.___hTotalFunc0 |#$R@@29|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@20)) bx@@20) ($Is HandleTypeType ($Unbox HandleTypeType bx@@20) (Tclass._System.___hTotalFunc0 |#$R@@29|))))
 :pattern ( ($IsBox bx@@20 (Tclass._System.___hTotalFunc0 |#$R@@29|)))
)))
(assert (forall ((h@@13 T@U) (r@@5 T@U) (f@@19 T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@13 r@@5 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@13 r@@5) f@@19 x@@6))) ($HeapSucc h@@13 (MapType0Store refType (MapType0Type FieldType BoxType) h@@13 r@@5 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@13 r@@5) f@@19 x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@13 r@@5 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@13 r@@5) f@@19 x@@6)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.Cell) Tagclass._module.Cell))
(assert (= (TagFamily Tclass._module.Cell) tytagFamily$Cell))
(assert (= (Tag Tclass._module.Cell?) Tagclass._module.Cell?))
(assert (= (TagFamily Tclass._module.Cell?) tytagFamily$Cell))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((f@@20 T@U) (t0@@26 T@U) (h@@14 T@U) ) (!  (=> (and ($IsGoodHeap h@@14) ($IsAlloc HandleTypeType f@@20 (Tclass._System.___hFunc0 t0@@26) h@@14)) (=> (Requires0 t0@@26 h@@14 f@@20) ($IsAllocBox (Apply0 t0@@26 h@@14 f@@20) t0@@26 h@@14)))
 :pattern ( ($IsAlloc HandleTypeType f@@20 (Tclass._System.___hFunc0 t0@@26) h@@14))
)))
(assert (forall ((|l#0@@15| T@U) (|l#1@@6| T@U) (|l#2@@2| T@U) (|l#3@@1| T@U) (|l#4| T@U) ($o@@7 T@U) ($f@@1 T@U) ) (! (= (U_2_bool (MapType2Select refType FieldType boolType (|lambda#75| |l#0@@15| |l#1@@6| |l#2@@2| |l#3@@1| |l#4|) $o@@7 $f@@1))  (=> (and (or (not (= $o@@7 |l#0@@15|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@6| $o@@7) |l#2@@2|)))) (or (= $o@@7 |l#3@@1|) (= $o@@7 |l#4|))))
 :pattern ( (MapType2Select refType FieldType boolType (|lambda#75| |l#0@@15| |l#1@@6| |l#2@@2| |l#3@@1| |l#4|) $o@@7 $f@@1))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@9 T@U) ) (! (= (|Set#IsMember| a@@1 o@@9) (|Set#IsMember| b@@1 o@@9))
 :pattern ( (|Set#IsMember| a@@1 o@@9))
 :pattern ( (|Set#IsMember| b@@1 o@@9))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((f@@21 T@U) (t0@@27 T@U) (u0@@6 T@U) ) (!  (=> (and ($Is HandleTypeType f@@21 (Tclass._System.___hFunc0 t0@@27)) (forall ((bx@@21 T@U) ) (!  (=> ($IsBox bx@@21 t0@@27) ($IsBox bx@@21 u0@@6))
 :pattern ( ($IsBox bx@@21 t0@@27))
 :pattern ( ($IsBox bx@@21 u0@@6))
))) ($Is HandleTypeType f@@21 (Tclass._System.___hFunc0 u0@@6)))
 :pattern ( ($Is HandleTypeType f@@21 (Tclass._System.___hFunc0 t0@@27)) ($Is HandleTypeType f@@21 (Tclass._System.___hFunc0 u0@@6)))
)))
(assert (forall ((t0@@28 T@U) (t1@@12 T@U) (t2@@11 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@22 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@8 t0@@28) ($IsBox bx1@@8 t1@@12)) ($Is HandleTypeType f@@22 (Tclass._System.___hFunc2 t0@@28 t1@@12 t2@@11)))) (forall ((o@@10 T@U) (fld@@7 T@U) )  (=> (and (or (not (= o@@10 null)) (not true)) (|Set#IsMember| (Reads2 t0@@28 t1@@12 t2@@11 h0@@7 f@@22 bx0@@8 bx1@@8) ($Box refType o@@10))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@7 o@@10) fld@@7) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@7 o@@10) fld@@7))))) (= (Reads2 t0@@28 t1@@12 t2@@11 h0@@7 f@@22 bx0@@8 bx1@@8) (Reads2 t0@@28 t1@@12 t2@@11 h1@@7 f@@22 bx0@@8 bx1@@8)))
 :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@28 t1@@12 t2@@11 h1@@7 f@@22 bx0@@8 bx1@@8))
)))
(assert (forall ((t0@@29 T@U) (t1@@13 T@U) (t2@@12 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@23 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@9 t0@@29) ($IsBox bx1@@9 t1@@13)) ($Is HandleTypeType f@@23 (Tclass._System.___hFunc2 t0@@29 t1@@13 t2@@12)))) (forall ((o@@11 T@U) (fld@@8 T@U) )  (=> (and (or (not (= o@@11 null)) (not true)) (|Set#IsMember| (Reads2 t0@@29 t1@@13 t2@@12 h1@@8 f@@23 bx0@@9 bx1@@9) ($Box refType o@@11))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@8 o@@11) fld@@8) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@8 o@@11) fld@@8))))) (= (Reads2 t0@@29 t1@@13 t2@@12 h0@@8 f@@23 bx0@@9 bx1@@9) (Reads2 t0@@29 t1@@13 t2@@12 h1@@8 f@@23 bx0@@9 bx1@@9)))
 :pattern ( ($HeapSucc h0@@8 h1@@8) (Reads2 t0@@29 t1@@13 t2@@12 h1@@8 f@@23 bx0@@9 bx1@@9))
)))
(assert (forall ((t0@@30 T@U) (t1@@14 T@U) (t2@@13 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@24 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@10 t0@@30) ($IsBox bx1@@10 t1@@14)) ($Is HandleTypeType f@@24 (Tclass._System.___hFunc2 t0@@30 t1@@14 t2@@13)))) (forall ((o@@12 T@U) (fld@@9 T@U) )  (=> (and (or (not (= o@@12 null)) (not true)) (|Set#IsMember| (Reads2 t0@@30 t1@@14 t2@@13 h0@@9 f@@24 bx0@@10 bx1@@10) ($Box refType o@@12))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@9 o@@12) fld@@9) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@9 o@@12) fld@@9))))) (= (Apply2 t0@@30 t1@@14 t2@@13 h0@@9 f@@24 bx0@@10 bx1@@10) (Apply2 t0@@30 t1@@14 t2@@13 h1@@9 f@@24 bx0@@10 bx1@@10)))
 :pattern ( ($HeapSucc h0@@9 h1@@9) (Apply2 t0@@30 t1@@14 t2@@13 h1@@9 f@@24 bx0@@10 bx1@@10))
)))
(assert (forall ((t0@@31 T@U) (t1@@15 T@U) (t2@@14 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@25 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@11 t0@@31) ($IsBox bx1@@11 t1@@15)) ($Is HandleTypeType f@@25 (Tclass._System.___hFunc2 t0@@31 t1@@15 t2@@14)))) (forall ((o@@13 T@U) (fld@@10 T@U) )  (=> (and (or (not (= o@@13 null)) (not true)) (|Set#IsMember| (Reads2 t0@@31 t1@@15 t2@@14 h1@@10 f@@25 bx0@@11 bx1@@11) ($Box refType o@@13))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@10 o@@13) fld@@10) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@10 o@@13) fld@@10))))) (= (Apply2 t0@@31 t1@@15 t2@@14 h0@@10 f@@25 bx0@@11 bx1@@11) (Apply2 t0@@31 t1@@15 t2@@14 h1@@10 f@@25 bx0@@11 bx1@@11)))
 :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@31 t1@@15 t2@@14 h1@@10 f@@25 bx0@@11 bx1@@11))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((t0@@32 T@U) (t1@@16 T@U) (t2@@15 T@U) (heap@@7 T@U) (h@@15 T@U) (r@@6 T@U) (rd@@3 T@U) (bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (U_2_bool (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType boolType r@@6 heap@@7 bx0@@12 bx1@@12)) (Requires2 t0@@32 t1@@16 t2@@15 heap@@7 (Handle2 h@@15 r@@6 rd@@3) bx0@@12 bx1@@12))
 :pattern ( (Requires2 t0@@32 t1@@16 t2@@15 heap@@7 (Handle2 h@@15 r@@6 rd@@3) bx0@@12 bx1@@12))
)))
(assert (forall ((t0@@33 T@U) (heap@@8 T@U) (h@@16 T@U) (r@@7 T@U) (rd@@4 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) boolType r@@7 heap@@8)) (Requires0 t0@@33 heap@@8 (Handle0 h@@16 r@@7 rd@@4)))
 :pattern ( (Requires0 t0@@33 heap@@8 (Handle0 h@@16 r@@7 rd@@4)))
)))
(assert (forall ((h@@17 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@17)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@17))
)))
(assert (forall ((h@@18 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@18)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@18))
)))
(assert (forall ((|#$R@@30| T@U) (|f#0@@6| T@U) ) (! (= ($Is HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@30|))  (and ($Is HandleTypeType |f#0@@6| (Tclass._System.___hFunc0 |#$R@@30|)) (|Set#Equal| (Reads0 |#$R@@30| $OneHeap |f#0@@6|) |Set#Empty|)))
 :pattern ( ($Is HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@30|)))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is intType v@@6 TInt)
 :pattern ( ($Is intType v@@6 TInt))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |$_Frame#l0@0| () T@U)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $nw@1 () T@U)
(declare-fun |lambdaResult#1| () Int)
(declare-fun |$_Frame#l1@0| () T@U)
(declare-fun |$lambdaHeap#1@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |b#0@0| () Bool)
(declare-fun |lambdaResult#2| () T@U)
(declare-fun |oldcell#0| () T@U)
(declare-fun |c#0@0| () T@U)
(declare-fun |$lambdaHeap#2@0| () T@U)
(declare-fun |$_Frame#l2@0| () T@U)
(declare-fun |b#1@0| () Bool)
(declare-fun |c#1@0| () T@U)
(declare-fun |$_Frame#l3@0| () T@U)
(declare-fun |lambdaResult#3| () Int)
(declare-fun |$lambdaHeap#3@0| () T@U)
(declare-fun |k#0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |b#2@0| () Bool)
(declare-fun |j#0@0| () T@U)
(declare-fun $LZ () T@U)
(declare-fun |g#0@0| () T@U)
(declare-fun |e#1_0@0| () Int)
(declare-fun |f#0@0| () T@U)
(declare-fun |d#0_0@0| () Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |defass#y#0| () Bool)
(declare-fun |y#0| () T@U)
(declare-fun |f#0@@7| () T@U)
(declare-fun |defass#z#0| () Bool)
(declare-fun |z#0| () T@U)
(declare-fun |g#0| () T@U)
(declare-fun |j#0| () T@U)
(declare-fun |k#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 90) (let ((anon38_Else_correct true))
(let ((anon38_Then_correct  (=> (= |$_Frame#l0@0| (|lambda#78| null |$lambdaHeap#0@0| alloc $nw@0)) (and (=> (= (ControlFlow 0 80) (- 0 83)) true) (and (=> (= (ControlFlow 0 80) (- 0 82)) true) (and (=> (= (ControlFlow 0 80) (- 0 81)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (=> (= (ControlFlow 0 80) (- 0 79)) (U_2_bool (MapType2Select refType FieldType boolType |$_Frame#l0@0| $nw@0 _module.Cell.data))))))))))
(let ((anon37_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap@1 |$lambdaHeap#0@0|) ($HeapSucc $Heap@1 |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 85) 80) anon38_Then_correct) (=> (= (ControlFlow 0 85) 84) anon38_Else_correct)))))
(let ((anon9_correct true))
(let ((anon41_Else_correct  (=> (and (and (or (not (= $nw@0 $nw@1)) (not true)) (= |lambdaResult#1| (LitInt 45))) (and ($Is intType (int_2_U |lambdaResult#1|) TInt) (= (ControlFlow 0 71) 69))) anon9_correct)))
(let ((anon41_Then_correct  (=> (and (and (= $nw@0 $nw@1) (= |lambdaResult#1| (LitInt 30))) (and ($Is intType (int_2_U |lambdaResult#1|) TInt) (= (ControlFlow 0 70) 69))) anon9_correct)))
(let ((anon40_Then_correct  (=> (= |$_Frame#l1@0| (|lambda#0| null |$lambdaHeap#1@0| alloc false)) (and (=> (= (ControlFlow 0 72) (- 0 74)) true) (and (=> (= (ControlFlow 0 72) (- 0 73)) true) (and (=> (= (ControlFlow 0 72) 70) anon41_Then_correct) (=> (= (ControlFlow 0 72) 71) anon41_Else_correct)))))))
(let ((anon40_Else_correct true))
(let ((anon39_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#1@0|) (or (= $Heap@2 |$lambdaHeap#1@0|) ($HeapSucc $Heap@2 |$lambdaHeap#1@0|))) (and (=> (= (ControlFlow 0 75) 72) anon40_Then_correct) (=> (= (ControlFlow 0 75) 68) anon40_Else_correct)))))
(let ((anon18_correct true))
(let ((anon45_Else_correct  (=> (and (and (not |b#0@0|) (= |lambdaResult#2| |oldcell#0|)) (and ($Is refType |lambdaResult#2| Tclass._module.Cell?) (= (ControlFlow 0 56) 53))) anon18_correct)))
(let ((anon45_Then_correct  (=> (and (and |b#0@0| (= |lambdaResult#2| |c#0@0|)) (and ($Is refType |lambdaResult#2| Tclass._module.Cell?) (= (ControlFlow 0 55) 53))) anon18_correct)))
(let ((anon44_Then_correct  (=> (and (and ($Is refType |c#0@0| Tclass._module.Cell) ($IsAlloc refType |c#0@0| Tclass._module.Cell |$lambdaHeap#2@0|)) (= |$_Frame#l2@0| (|lambda#0| null |$lambdaHeap#2@0| alloc false))) (and (=> (= (ControlFlow 0 57) 55) anon45_Then_correct) (=> (= (ControlFlow 0 57) 56) anon45_Else_correct)))))
(let ((anon44_Else_correct  (=> (and (not (and ($Is refType |c#0@0| Tclass._module.Cell) ($IsAlloc refType |c#0@0| Tclass._module.Cell |$lambdaHeap#2@0|))) (= (ControlFlow 0 54) 53)) anon18_correct)))
(let ((anon43_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#2@0|) (or (= $Heap@2 |$lambdaHeap#2@0|) ($HeapSucc $Heap@2 |$lambdaHeap#2@0|))) (and (=> (= (ControlFlow 0 58) 57) anon44_Then_correct) (=> (= (ControlFlow 0 58) 54) anon44_Else_correct)))))
(let ((anon28_correct true))
(let ((anon27_correct  (and (=> (= (ControlFlow 0 42) (- 0 44)) (or (not (= (ite |b#1@0| |c#1@0| |oldcell#0|) null)) (not true))) (=> (or (not (= (ite |b#1@0| |c#1@0| |oldcell#0|) null)) (not true)) (and (=> (= (ControlFlow 0 42) (- 0 43)) (U_2_bool (MapType2Select refType FieldType boolType |$_Frame#l3@0| (ite |b#1@0| |c#1@0| |oldcell#0|) _module.Cell.data))) (=> (U_2_bool (MapType2Select refType FieldType boolType |$_Frame#l3@0| (ite |b#1@0| |c#1@0| |oldcell#0|) _module.Cell.data)) (=> (= |lambdaResult#3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (ite |b#1@0| |c#1@0| |oldcell#0|)) _module.Cell.data)))) (=> (and ($Is intType (int_2_U |lambdaResult#3|) TInt) (= (ControlFlow 0 42) 39)) anon28_correct))))))))
(let ((anon50_Else_correct  (=> (and (not |b#1@0|) (= (ControlFlow 0 46) 42)) anon27_correct)))
(let ((anon50_Then_correct  (=> (and |b#1@0| (= (ControlFlow 0 45) 42)) anon27_correct)))
(let ((anon49_Then_correct  (=> (=> |b#1@0| (or (not (= |c#1@0| null)) (not true))) (and (=> (= (ControlFlow 0 47) 45) anon50_Then_correct) (=> (= (ControlFlow 0 47) 46) anon50_Else_correct)))))
(let ((anon49_Else_correct  (=> (and (not (=> |b#1@0| (or (not (= |c#1@0| null)) (not true)))) (= (ControlFlow 0 41) 39)) anon28_correct)))
(let ((anon48_Else_correct  (=> (not |b#1@0|) (and (=> (= (ControlFlow 0 49) 47) anon49_Then_correct) (=> (= (ControlFlow 0 49) 41) anon49_Else_correct)))))
(let ((anon48_Then_correct  (=> |b#1@0| (and (=> (= (ControlFlow 0 48) 47) anon49_Then_correct) (=> (= (ControlFlow 0 48) 41) anon49_Else_correct)))))
(let ((anon47_Then_correct  (=> (and (and ($Is refType |c#1@0| Tclass._module.Cell?) ($IsAlloc refType |c#1@0| Tclass._module.Cell? |$lambdaHeap#3@0|)) (= |$_Frame#l3@0| (|lambda#75| null |$lambdaHeap#3@0| alloc |c#1@0| |oldcell#0|))) (and (=> (= (ControlFlow 0 50) 48) anon48_Then_correct) (=> (= (ControlFlow 0 50) 49) anon48_Else_correct)))))
(let ((anon47_Else_correct  (=> (and (not (and ($Is refType |c#1@0| Tclass._module.Cell?) ($IsAlloc refType |c#1@0| Tclass._module.Cell? |$lambdaHeap#3@0|))) (= (ControlFlow 0 40) 39)) anon28_correct)))
(let ((anon46_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#3@0|) (or (= $Heap@2 |$lambdaHeap#3@0|) ($HeapSucc $Heap@2 |$lambdaHeap#3@0|))) (and (=> (= (ControlFlow 0 51) 50) anon47_Then_correct) (=> (= (ControlFlow 0 51) 40) anon47_Else_correct)))))
(let ((anon56_Else_correct  (=> (and (and (and (and (and (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (not (U_2_bool (Lit boolType (bool_2_U true))))) (= (ControlFlow 0 37) (- 0 36))) false)))
(let ((anon56_Then_correct  (and (=> (= (ControlFlow 0 31) (- 0 35)) true) (and (=> (= (ControlFlow 0 31) (- 0 34)) ($IsAlloc HandleTypeType |k#0@0| (Tclass._System.___hFunc2 Tclass._module.Cell? TBool TInt) $Heap)) (=> ($IsAlloc HandleTypeType |k#0@0| (Tclass._System.___hFunc2 Tclass._module.Cell? TBool TInt) $Heap) (and (=> (= (ControlFlow 0 31) (- 0 33)) ($IsAlloc refType $nw@0 Tclass._module.Cell $Heap)) (=> ($IsAlloc refType $nw@0 Tclass._module.Cell $Heap) (and (=> (= (ControlFlow 0 31) (- 0 32)) (Requires2 Tclass._module.Cell? TBool TInt $Heap |k#0@0| ($Box refType $nw@0) ($Box boolType (bool_2_U |b#2@0|)))) (=> (Requires2 Tclass._module.Cell? TBool TInt $Heap |k#0@0| ($Box refType $nw@0) ($Box boolType (bool_2_U |b#2@0|))) (=> (= (ControlFlow 0 31) (- 0 30)) (< (U_2_int ($Unbox intType (Apply2 Tclass._module.Cell? TBool TInt $Heap |k#0@0| ($Box refType $nw@0) ($Box boolType (bool_2_U |b#2@0|))))) 50)))))))))))
(let ((anon55_Then_correct  (and (=> (= (ControlFlow 0 26) (- 0 29)) ($IsAlloc HandleTypeType |k#0@0| (Tclass._System.___hFunc2 Tclass._module.Cell? TBool TInt) $Heap)) (=> ($IsAlloc HandleTypeType |k#0@0| (Tclass._System.___hFunc2 Tclass._module.Cell? TBool TInt) $Heap) (and (=> (= (ControlFlow 0 26) (- 0 28)) ($IsAlloc refType |oldcell#0| Tclass._module.Cell $Heap)) (=> ($IsAlloc refType |oldcell#0| Tclass._module.Cell $Heap) (and (=> (= (ControlFlow 0 26) (- 0 27)) (Requires2 Tclass._module.Cell? TBool TInt $Heap |k#0@0| ($Box refType |oldcell#0|) ($Box boolType (bool_2_U |b#2@0|)))) (=> (Requires2 Tclass._module.Cell? TBool TInt $Heap |k#0@0| ($Box refType |oldcell#0|) ($Box boolType (bool_2_U |b#2@0|))) (=> (= (ControlFlow 0 26) (- 0 25)) (= (U_2_int ($Unbox intType (Apply2 Tclass._module.Cell? TBool TInt $Heap |k#0@0| ($Box refType |oldcell#0|) ($Box boolType (bool_2_U |b#2@0|))))) (LitInt 48)))))))))))
(let ((anon54_Then_correct  (and (=> (= (ControlFlow 0 20) (- 0 24)) ($IsAlloc HandleTypeType |j#0@0| (Tclass._System.___hTotalFunc2 Tclass._module.Cell TBool Tclass._module.Cell?) $Heap)) (=> ($IsAlloc HandleTypeType |j#0@0| (Tclass._System.___hTotalFunc2 Tclass._module.Cell TBool Tclass._module.Cell?) $Heap) (and (=> (= (ControlFlow 0 20) (- 0 23)) ($IsAlloc refType |oldcell#0| Tclass._module.Cell $Heap)) (=> ($IsAlloc refType |oldcell#0| Tclass._module.Cell $Heap) (and (=> (= (ControlFlow 0 20) (- 0 22)) (or (not (= ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType |oldcell#0|) ($Box boolType (bool_2_U |b#2@0|)))) null)) (not true))) (and (=> (= (ControlFlow 0 20) (- 0 21)) ($IsAlloc refType ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType |oldcell#0|) ($Box boolType (bool_2_U |b#2@0|)))) Tclass._module.Cell? $Heap)) (=> ($IsAlloc refType ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType |oldcell#0|) ($Box boolType (bool_2_U |b#2@0|)))) Tclass._module.Cell? $Heap) (=> (= (ControlFlow 0 20) (- 0 19)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType |oldcell#0|) ($Box boolType (bool_2_U |b#2@0|))))) _module.Cell.data))) (LitInt 48))))))))))))
(let ((anon53_Then_correct  (and (=> (= (ControlFlow 0 13) (- 0 18)) true) (and (=> (= (ControlFlow 0 13) (- 0 17)) ($IsAlloc HandleTypeType |j#0@0| (Tclass._System.___hTotalFunc2 Tclass._module.Cell TBool Tclass._module.Cell?) $Heap)) (=> ($IsAlloc HandleTypeType |j#0@0| (Tclass._System.___hTotalFunc2 Tclass._module.Cell TBool Tclass._module.Cell?) $Heap) (and (=> (= (ControlFlow 0 13) (- 0 16)) ($IsAlloc refType $nw@0 Tclass._module.Cell $Heap)) (=> ($IsAlloc refType $nw@0 Tclass._module.Cell $Heap) (and (=> (= (ControlFlow 0 13) (- 0 15)) (or (not (= ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType $nw@0) ($Box boolType (Lit boolType (bool_2_U true))))) null)) (not true))) (and (=> (= (ControlFlow 0 13) (- 0 14)) ($IsAlloc refType ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType $nw@0) ($Box boolType (Lit boolType (bool_2_U true))))) Tclass._module.Cell? $Heap)) (=> ($IsAlloc refType ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType $nw@0) ($Box boolType (Lit boolType (bool_2_U true))))) Tclass._module.Cell? $Heap) (=> (= (ControlFlow 0 13) (- 0 12)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType $nw@0) ($Box boolType (Lit boolType (bool_2_U true)))))) _module.Cell.data))) (LitInt 45)))))))))))))
(let ((anon52_Then_correct  (and (=> (= (ControlFlow 0 6) (- 0 11)) true) (and (=> (= (ControlFlow 0 6) (- 0 10)) ($IsAlloc HandleTypeType |j#0@0| (Tclass._System.___hTotalFunc2 Tclass._module.Cell TBool Tclass._module.Cell?) $Heap)) (=> ($IsAlloc HandleTypeType |j#0@0| (Tclass._System.___hTotalFunc2 Tclass._module.Cell TBool Tclass._module.Cell?) $Heap) (and (=> (= (ControlFlow 0 6) (- 0 9)) ($IsAlloc refType $nw@0 Tclass._module.Cell $Heap)) (=> ($IsAlloc refType $nw@0 Tclass._module.Cell $Heap) (and (=> (= (ControlFlow 0 6) (- 0 8)) (or (not (= ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType $nw@0) ($Box boolType (Lit boolType (bool_2_U false))))) null)) (not true))) (and (=> (= (ControlFlow 0 6) (- 0 7)) ($IsAlloc refType ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType $nw@0) ($Box boolType (Lit boolType (bool_2_U false))))) Tclass._module.Cell? $Heap)) (=> ($IsAlloc refType ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType $nw@0) ($Box boolType (Lit boolType (bool_2_U false))))) Tclass._module.Cell? $Heap) (=> (= (ControlFlow 0 6) (- 0 5)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap |j#0@0| ($Box refType $nw@0) ($Box boolType (Lit boolType (bool_2_U false)))))) _module.Cell.data))) (LitInt 48)))))))))))))
(let ((anon51_Then_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap@2 |j#0@0| ($Box refType $nw@0) ($Box boolType (bool_2_U |b#2@0|)))) null)) (not true))) (=> (= (ControlFlow 0 2) (- 0 1)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 ($Unbox refType (Apply2 Tclass._module.Cell TBool Tclass._module.Cell? $Heap@2 |j#0@0| ($Box refType $nw@0) ($Box boolType (bool_2_U |b#2@0|))))) _module.Cell.data))) 50))))))
(let ((anon46_Else_correct  (=> (= |k#0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#5| (Handle2 (|lambda#70| |oldcell#0| _module.Cell.data) (|lambda#71| Tclass._module.Cell? TBool null) (|lambda#73| |oldcell#0|))) ($LS $LZ)))) (and (and (and (and (and (and (=> (= (ControlFlow 0 38) 2) anon51_Then_correct) (=> (= (ControlFlow 0 38) 6) anon52_Then_correct)) (=> (= (ControlFlow 0 38) 13) anon53_Then_correct)) (=> (= (ControlFlow 0 38) 20) anon54_Then_correct)) (=> (= (ControlFlow 0 38) 26) anon55_Then_correct)) (=> (= (ControlFlow 0 38) 31) anon56_Then_correct)) (=> (= (ControlFlow 0 38) 37) anon56_Else_correct)))))
(let ((anon43_Else_correct  (=> (= |j#0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#5| (Handle2 (|lambda#65| |oldcell#0|) (|lambda#66| Tclass._module.Cell TBool) (|lambda#68| (SetRef_to_SetBox (|lambda#3| false))))) ($LS $LZ)))) (and (=> (= (ControlFlow 0 52) 51) anon46_Then_correct) (=> (= (ControlFlow 0 52) 38) anon46_Else_correct)))))
(let ((anon13_correct  (and (=> (= (ControlFlow 0 59) 58) anon43_Then_correct) (=> (= (ControlFlow 0 59) 52) anon43_Else_correct))))
(let ((anon42_Else_correct  (and (=> (= (ControlFlow 0 63) (- 0 65)) ($IsAlloc HandleTypeType |g#0@0| (Tclass._System.___hTotalFunc0 TInt) $Heap)) (=> ($IsAlloc HandleTypeType |g#0@0| (Tclass._System.___hTotalFunc0 TInt) $Heap) (=> (= |e#1_0@0| (U_2_int ($Unbox intType (Apply0 TInt $Heap |g#0@0|)))) (and (=> (= (ControlFlow 0 63) (- 0 64)) (= |e#1_0@0| (U_2_int ($Unbox intType (Apply0 TInt $Heap@2 |g#0@0|))))) (=> (= |e#1_0@0| (U_2_int ($Unbox intType (Apply0 TInt $Heap@2 |g#0@0|)))) (=> (= (ControlFlow 0 63) 59) anon13_correct))))))))
(let ((anon42_Then_correct  (and (=> (= (ControlFlow 0 60) (- 0 62)) ($IsAlloc HandleTypeType |f#0@0| (Tclass._System.___hFunc0 TInt) $Heap)) (=> ($IsAlloc HandleTypeType |f#0@0| (Tclass._System.___hFunc0 TInt) $Heap) (and (=> (= (ControlFlow 0 60) (- 0 61)) (Requires0 TInt $Heap |f#0@0|)) (=> (Requires0 TInt $Heap |f#0@0|) (=> (and (= |d#0_0@0| (U_2_int ($Unbox intType (Apply0 TInt $Heap |f#0@0|)))) (= (ControlFlow 0 60) 59)) anon13_correct)))))))
(let ((anon39_Else_correct  (=> (= |g#0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#5| (Handle0 (|lambda#60| ($Box intType (int_2_U (ite (= $nw@0 $nw@1) 30 45)))) (|lambda#56| true) (|lambda#58| (SetRef_to_SetBox (|lambda#3| false))))) ($LS $LZ)))) (and (=> (= (ControlFlow 0 66) (- 0 67)) (= (U_2_int ($Unbox intType (Apply0 TInt $Heap@2 |g#0@0|))) (LitInt 45))) (=> (= (U_2_int ($Unbox intType (Apply0 TInt $Heap@2 |g#0@0|))) (LitInt 45)) (and (=> (= (ControlFlow 0 66) 60) anon42_Then_correct) (=> (= (ControlFlow 0 66) 63) anon42_Else_correct)))))))
(let ((anon37_Else_correct  (=> (= |f#0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#5| (Handle0 (|lambda#55| $nw@0 _module.Cell.data) (|lambda#56| true) (|lambda#58| (SetRef_to_SetBox (|lambda#57| $nw@0))))) ($LS $LZ)))) (and (=> (= (ControlFlow 0 76) (- 0 78)) (Requires0 TInt $Heap@1 |f#0@0|)) (=> (Requires0 TInt $Heap@1 |f#0@0|) (and (=> (= (ControlFlow 0 76) (- 0 77)) (= (U_2_int ($Unbox intType (Apply0 TInt $Heap@1 |f#0@0|))) (LitInt 45))) (=> (= (U_2_int ($Unbox intType (Apply0 TInt $Heap@1 |f#0@0|))) (LitInt 45)) (=> (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 Tclass._module.Cell?)) (=> (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@1) alloc)))) (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@1) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2))) (and (=> (= (ControlFlow 0 76) 75) anon39_Then_correct) (=> (= (ControlFlow 0 76) 66) anon39_Else_correct)))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 Tclass._module.Cell?)) (=> (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc)))) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (=> (= (ControlFlow 0 86) (- 0 89)) true) (and (=> (= (ControlFlow 0 86) (- 0 88)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 86) (- 0 87)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 _module.Cell.data))) (=> (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 _module.Cell.data)) (=> (= |$rhs#0@0| (LitInt 45)) (=> (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@0) _module.Cell.data ($Box intType (int_2_U |$rhs#0@0|))))) ($IsGoodHeap $Heap@1)) (and (=> (= (ControlFlow 0 86) 85) anon37_Then_correct) (=> (= (ControlFlow 0 86) 76) anon37_Else_correct))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is refType |oldcell#0| Tclass._module.Cell) ($IsAlloc refType |oldcell#0| Tclass._module.Cell $Heap)) (and (=> |defass#y#0| (and ($Is refType |y#0| Tclass._module.Cell) ($IsAlloc refType |y#0| Tclass._module.Cell $Heap))) true)) (=> (and (and (and (and (and ($Is HandleTypeType |f#0@@7| (Tclass._System.___hFunc0 TInt)) ($IsAlloc HandleTypeType |f#0@@7| (Tclass._System.___hFunc0 TInt) $Heap)) true) (and (=> |defass#z#0| (and ($Is refType |z#0| Tclass._module.Cell) ($IsAlloc refType |z#0| Tclass._module.Cell $Heap))) true)) (and (and (and ($Is HandleTypeType |g#0| (Tclass._System.___hTotalFunc0 TInt)) ($IsAlloc HandleTypeType |g#0| (Tclass._System.___hTotalFunc0 TInt) $Heap)) true) (and (and ($Is HandleTypeType |j#0| (Tclass._System.___hTotalFunc2 Tclass._module.Cell TBool Tclass._module.Cell?)) ($IsAlloc HandleTypeType |j#0| (Tclass._System.___hTotalFunc2 Tclass._module.Cell TBool Tclass._module.Cell?) $Heap)) true))) (and (and (and (and ($Is HandleTypeType |k#0| (Tclass._System.___hFunc2 Tclass._module.Cell? TBool TInt)) ($IsAlloc HandleTypeType |k#0| (Tclass._System.___hFunc2 Tclass._module.Cell? TBool TInt) $Heap)) true) (= 1 $FunctionContextHeight)) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |oldcell#0|) _module.Cell.data))) (LitInt 48)) (= (ControlFlow 0 90) 86)))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 60) (- 62))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 31) (- 33))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 9))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 13) (- 16))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
