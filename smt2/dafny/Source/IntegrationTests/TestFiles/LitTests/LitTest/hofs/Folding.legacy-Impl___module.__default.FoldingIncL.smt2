(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun |lambda#7| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@T T@T T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun |lambda#105| (Int) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.length (T@U T@U T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |_module.__default.length#canCall| (T@U T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List._h3 (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun |lambda#135| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun |lambda#131| (T@U T@U Int) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun _module.__default.foldl (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |_module.__default.foldl#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun _module.List._h2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |$IsA#_module.List| (T@U) Bool)
(declare-fun |lambda#8| (Bool) T@U)
(declare-fun |lambda#10| (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun |lambda#9| (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType2Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType2Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSet alloc Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._module.List |##_module.List.Nil| |##_module.List.Cons| tytagFamily$object |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| tytagFamily$List)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (t3 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) (x2 T@U) ) (! (= (MapType0Select t0 t1 t2 t3 (MapType0Store t0 t1 t2 t3 m x0 x1 x2 val) x0 x1 x2) val)
 :weight 0
)) (and (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (u3 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 u3 (MapType0Store u0 u1 u2 u3 m@@0 x0@@0 x1@@0 x2@@0 val@@0) y0 y1 y2) (MapType0Select u0 u1 u2 u3 m@@0 y0 y1 y2)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (u3@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 u3@@0 (MapType0Store u0@@0 u1@@0 u2@@0 u3@@0 m@@1 x0@@1 x1@@1 x2@@1 val@@1) y0@@0 y1@@0 y2@@0) (MapType0Select u0@@0 u1@@0 u2@@0 u3@@0 m@@1 y0@@0 y1@@0 y2@@0)))
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@1 T@T) (u3@@1 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType0Select u0@@1 u1@@1 u2@@1 u3@@1 (MapType0Store u0@@1 u1@@1 u2@@1 u3@@1 m@@2 x0@@2 x1@@2 x2@@2 val@@2) y0@@1 y1@@1 y2@@1) (MapType0Select u0@@1 u1@@1 u2@@1 u3@@1 m@@2 y0@@1 y1@@1 y2@@1)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@3 x0@@3 val@@3) x0@@3) val@@3)
 :weight 0
))) (forall ((u0@@2 T@T) (u1@@2 T@T) (val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select u0@@2 u1@@2 (MapType1Store u0@@2 u1@@2 m@@4 x0@@4 val@@4) y0@@2) (MapType1Select u0@@2 u1@@2 m@@4 y0@@2)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 3))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$l#0#heap#0| T@U) (|$l#0#a#0| T@U) (|$l#0#b#0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#7| |l#0| |l#1|) |$l#0#heap#0| |$l#0#a#0| |$l#0#b#0|))  (and ($IsBox |$l#0#a#0| |l#0|) ($IsBox |$l#0#b#0| |l#1|)))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#7| |l#0| |l#1|) |$l#0#heap#0| |$l#0#a#0| |$l#0#b#0|))
)))
(assert (= (Ctor HandleTypeType) 7))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R| T@U) (|f#0| T@U) ) (! (= ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|))  (and ($Is HandleTypeType |f#0| (Tclass._System.___hPartialFunc2 |#$T0| |#$T1| |#$R|)) (forall ((|x0#0| T@U) (|x1#0| T@U) )  (=> (and ($IsBox |x0#0| |#$T0|) ($IsBox |x1#0| |#$T1|)) (Requires2 |#$T0| |#$T1| |#$R| $OneHeap |f#0| |x0#0| |x1#0|)))))
 :pattern ( ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|)))
)))
(assert (forall ((|l#0@@0| Int) (|$l#5#heap#0| T@U) (|$l#5#b#0| T@U) (|$l#5#_v7#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#105| |l#0@@0|) |$l#5#heap#0| |$l#5#b#0| |$l#5#_v7#0|) ($Box intType (int_2_U (+ (U_2_int ($Unbox intType |$l#5#b#0|)) |l#0@@0|))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#105| |l#0@@0|) |$l#5#heap#0| |$l#5#b#0| |$l#5#_v7#0|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|)) |#$T0@@0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|)) |#$T1@@1|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|)) |#$T1@@4|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|)) |#$R@@5|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|)) |#$T0@@6|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@7| T@U) ) (! (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|)) |#$T1@@7|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@8| T@U) ) (! (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|)) |#$R@@8|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|))
)))
(assert (= (Ctor DatatypeTypeType) 8))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.length$_T0 T@U) ($ly T@U) (|xs#0| T@U) ) (!  (=> (or (|_module.__default.length#canCall| _module._default.length$_T0 (Lit DatatypeTypeType |xs#0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0| (Tclass._module.List _module._default.length$_T0)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)))))) (let ((|tail#3| (Lit DatatypeTypeType (_module.List._h3 (Lit DatatypeTypeType |xs#0|)))))
(|_module.__default.length#canCall| _module._default.length$_T0 |tail#3|))) (= (_module.__default.length _module._default.length$_T0 ($LS $ly) (Lit DatatypeTypeType |xs#0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0|)) 0 (let ((|tail#2| (Lit DatatypeTypeType (_module.List._h3 (Lit DatatypeTypeType |xs#0|)))))
(LitInt (+ 1 (_module.__default.length _module._default.length$_T0 ($LS $ly) |tail#2|))))))))
 :weight 3
 :pattern ( (_module.__default.length _module._default.length$_T0 ($LS $ly) (Lit DatatypeTypeType |xs#0|)))
))))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((_module._default.length$_T0@@0 T@U) ($ly@@0 T@U) (|xs#0@@0| T@U) ) (! (= (_module.__default.length _module._default.length$_T0@@0 ($LS $ly@@0) |xs#0@@0|) (_module.__default.length _module._default.length$_T0@@0 $ly@@0 |xs#0@@0|))
 :pattern ( (_module.__default.length _module._default.length$_T0@@0 ($LS $ly@@0) |xs#0@@0|))
)))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@9| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|)) |tytagFamily$_#Func2|))
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@10| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|)) |tytagFamily$_#PartialFunc2|))
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@11| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|)) |tytagFamily$_#TotalFunc2|))
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@12| T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx)) bx) ($Is HandleTypeType ($Unbox HandleTypeType bx) (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|))))
 :pattern ( ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|)))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@13| T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@0)) bx@@0) ($Is HandleTypeType ($Unbox HandleTypeType bx@@0) (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|))))
 :pattern ( ($IsBox bx@@0 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|)))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@14| T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@1)) bx@@1) ($Is HandleTypeType ($Unbox HandleTypeType bx@@1) (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|)))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h) ($IsAlloc refType |c#0| Tclass._System.object? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h))
)))
(assert (forall ((_module.List$T T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h@@0))
)))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert (forall (($o T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o Tclass._System.object? $h@@1)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@1 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o Tclass._System.object? $h@@1))
)))
(assert (= (Ctor LayerTypeType) 9))
(assert (forall ((|l#0@@1| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|$l#11#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#135| |l#0@@1| |l#1@@0| |l#2| |l#3| |l#4|) |$l#11#ly#0|) (Handle2 (|lambda#131| |l#0@@1| |$l#11#ly#0| (_module.__default.length |l#1@@0| |$l#11#ly#0| |l#2|)) |l#3| |l#4|))
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#135| |l#0@@1| |l#1@@0| |l#2| |l#3| |l#4|) |$l#11#ly#0|))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.foldl$A T@U) (_module._default.foldl$B T@U) ($ly@@1 T@U) (|f#0@@0| T@U) (|b#0| T@U) (|xs#0@@1| T@U) ) (!  (=> (or (|_module.__default.foldl#canCall| _module._default.foldl$A _module._default.foldl$B |f#0@@0| |b#0| |xs#0@@1|) (and (< 1 $FunctionContextHeight) (and (and ($Is HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc2 _module._default.foldl$B _module._default.foldl$A _module._default.foldl$B)) ($IsBox |b#0| _module._default.foldl$B)) ($Is DatatypeTypeType |xs#0@@1| (Tclass._module.List _module._default.foldl$A))))) ($IsBox (_module.__default.foldl _module._default.foldl$A _module._default.foldl$B $ly@@1 |f#0@@0| |b#0| |xs#0@@1|) _module._default.foldl$B))
 :pattern ( (_module.__default.foldl _module._default.foldl$A _module._default.foldl$B $ly@@1 |f#0@@0| |b#0| |xs#0@@1|))
))))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@15| T@U) (|f#0@@1| T@U) ) (! (= ($Is HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|))  (and ($Is HandleTypeType |f#0@@1| (Tclass._System.___hFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) )  (=> (and ($IsBox |x0#0@@0| |#$T0@@15|) ($IsBox |x1#0@@0| |#$T1@@15|)) (|Set#Equal| (Reads2 |#$T0@@15| |#$T1@@15| |#$R@@15| $OneHeap |f#0@@1| |x0#0@@0| |x1#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|)))
)))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.foldl$A@@0 T@U) (_module._default.foldl$B@@0 T@U) ($ly@@2 T@U) ($Heap T@U) (|f#0@@2| T@U) (|b#0@@0| T@U) (|xs#0@@2| T@U) ) (!  (=> (or (|_module.__default.foldl#canCall| _module._default.foldl$A@@0 _module._default.foldl$B@@0 (Lit HandleTypeType |f#0@@2|) (Lit BoxType |b#0@@0|) (Lit DatatypeTypeType |xs#0@@2|)) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap) ($Is HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc2 _module._default.foldl$B@@0 _module._default.foldl$A@@0 _module._default.foldl$B@@0))) ($IsBox |b#0@@0| _module._default.foldl$B@@0)) ($Is DatatypeTypeType |xs#0@@2| (Tclass._module.List _module._default.foldl$A@@0))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@2|)))))) (let ((|tail#5| (Lit DatatypeTypeType (_module.List._h3 (Lit DatatypeTypeType |xs#0@@2|)))))
(let ((|head#5| (Lit BoxType (_module.List._h2 (Lit DatatypeTypeType |xs#0@@2|)))))
(|_module.__default.foldl#canCall| _module._default.foldl$A@@0 _module._default.foldl$B@@0 (Lit HandleTypeType |f#0@@2|) (Apply2 _module._default.foldl$B@@0 _module._default.foldl$A@@0 _module._default.foldl$B@@0 $Heap (Lit HandleTypeType |f#0@@2|) (Lit BoxType |b#0@@0|) |head#5|) |tail#5|)))) (= (_module.__default.foldl _module._default.foldl$A@@0 _module._default.foldl$B@@0 ($LS $ly@@2) (Lit HandleTypeType |f#0@@2|) (Lit BoxType |b#0@@0|) (Lit DatatypeTypeType |xs#0@@2|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@2|)) |b#0@@0| (let ((|tail#4| (Lit DatatypeTypeType (_module.List._h3 (Lit DatatypeTypeType |xs#0@@2|)))))
(let ((|head#4| (Lit BoxType (_module.List._h2 (Lit DatatypeTypeType |xs#0@@2|)))))
(_module.__default.foldl _module._default.foldl$A@@0 _module._default.foldl$B@@0 ($LS $ly@@2) (Lit HandleTypeType |f#0@@2|) (Apply2 _module._default.foldl$B@@0 _module._default.foldl$A@@0 _module._default.foldl$B@@0 $Heap (Lit HandleTypeType |f#0@@2|) (Lit BoxType |b#0@@0|) |head#4|) |tail#4|)))))))
 :weight 3
 :pattern ( (_module.__default.foldl _module._default.foldl$A@@0 _module._default.foldl$B@@0 ($LS $ly@@2) (Lit HandleTypeType |f#0@@2|) (Lit BoxType |b#0@@0|) (Lit DatatypeTypeType |xs#0@@2|)) ($IsGoodHeap $Heap))
))))
(assert (= (Ctor SetType) 10))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (t2@@0 T@U) (heap T@U) (h@@0 T@U) (r T@U) (rd T@U) (bx0 T@U) (bx1 T@U) (bx@@2 T@U) ) (! (= (|Set#IsMember| (Reads2 t0@@1 t1@@1 t2@@0 heap (Handle2 h@@0 r rd) bx0 bx1) bx@@2) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType SetType rd heap bx0 bx1) bx@@2))
 :pattern ( (|Set#IsMember| (Reads2 t0@@1 t1@@1 t2@@0 heap (Handle2 h@@0 r rd) bx0 bx1) bx@@2))
)))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.List.Cons_q d@@1) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@1 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.List.Nil_q d@@2) (= d@@2 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@2))
)))
(assert (forall ((v T@U) (t0@@2 T@U) ) (! (= ($Is SetType v (TSet t0@@2)) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v bx@@3) ($IsBox bx@@3 t0@@2))
 :pattern ( (|Set#IsMember| v bx@@3))
)))
 :pattern ( ($Is SetType v (TSet t0@@2)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (_module._default.foldl$A@@1 T@U) (_module._default.foldl$B@@1 T@U) ($ly@@3 T@U) (|f#0@@3| T@U) (|b#0@@1| T@U) (|xs#0@@3| T@U) ) (!  (=> (and (or (|_module.__default.foldl#canCall| _module._default.foldl$A@@1 _module._default.foldl$B@@1 |f#0@@3| |b#0@@1| |xs#0@@3|) (and (< 1 $FunctionContextHeight) (and (and (and ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc2 _module._default.foldl$B@@1 _module._default.foldl$A@@1 _module._default.foldl$B@@1)) ($IsAlloc HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc2 _module._default.foldl$B@@1 _module._default.foldl$A@@1 _module._default.foldl$B@@1) $Heap@@0)) (and ($IsBox |b#0@@1| _module._default.foldl$B@@1) ($IsAllocBox |b#0@@1| _module._default.foldl$B@@1 $Heap@@0))) (and ($Is DatatypeTypeType |xs#0@@3| (Tclass._module.List _module._default.foldl$A@@1)) ($IsAlloc DatatypeTypeType |xs#0@@3| (Tclass._module.List _module._default.foldl$A@@1) $Heap@@0))))) ($IsGoodHeap $Heap@@0)) ($IsAllocBox (_module.__default.foldl _module._default.foldl$A@@1 _module._default.foldl$B@@1 $ly@@3 |f#0@@3| |b#0@@1| |xs#0@@3|) _module._default.foldl$B@@1 $Heap@@0))
 :pattern ( ($IsAllocBox (_module.__default.foldl _module._default.foldl$A@@1 _module._default.foldl$B@@1 $ly@@3 |f#0@@3| |b#0@@1| |xs#0@@3|) _module._default.foldl$B@@1 $Heap@@0))
))))
(assert (forall ((f T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f ly) (MapType1Select LayerTypeType A f ly))
 :pattern ( (AtLayer A f ly))
)))
(assert ($IsGoodHeap $OneHeap))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.length$_T0@@1 T@U) ($ly@@4 T@U) (|xs#0@@4| T@U) ) (!  (=> (or (|_module.__default.length#canCall| _module._default.length$_T0@@1 |xs#0@@4|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@4| (Tclass._module.List _module._default.length$_T0@@1)))) (and (=> (not (_module.List.Nil_q |xs#0@@4|)) (let ((|tail#1| (_module.List._h3 |xs#0@@4|)))
(|_module.__default.length#canCall| _module._default.length$_T0@@1 |tail#1|))) (= (_module.__default.length _module._default.length$_T0@@1 ($LS $ly@@4) |xs#0@@4|) (ite (_module.List.Nil_q |xs#0@@4|) 0 (let ((|tail#0| (_module.List._h3 |xs#0@@4|)))
(+ 1 (_module.__default.length _module._default.length$_T0@@1 $ly@@4 |tail#0|)))))))
 :pattern ( (_module.__default.length _module._default.length$_T0@@1 ($LS $ly@@4) |xs#0@@4|))
))))
(assert (forall ((v@@0 T@U) (t T@U) (h@@1 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@1) ($IsAlloc T@@1 v@@0 t h@@1))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@1))
)))
(assert (forall ((t0@@3 T@U) (t1@@2 T@U) (t2@@1 T@U) (heap@@0 T@U) (h@@2 T@U) (r@@0 T@U) (rd@@0 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (! (= (Apply2 t0@@3 t1@@2 t2@@1 heap@@0 (Handle2 h@@2 r@@0 rd@@0) bx0@@0 bx1@@0) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType h@@2 heap@@0 bx0@@0 bx1@@0))
 :pattern ( (Apply2 t0@@3 t1@@2 t2@@1 heap@@0 (Handle2 h@@2 r@@0 rd@@0) bx0@@0 bx1@@0))
)))
(assert (forall ((h@@3 T@U) (k@@0 T@U) (bx@@4 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@3 k@@0) (=> ($IsAllocBox bx@@4 t@@0 h@@3) ($IsAllocBox bx@@4 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@3 k@@0) ($IsAllocBox bx@@4 t@@0 h@@3))
)))
(assert (forall ((h@@4 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@4 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@4) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@4 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@4))
)))
(assert (forall ((_module._default.foldl$A@@2 T@U) (_module._default.foldl$B@@2 T@U) ($ly@@5 T@U) (|f#0@@4| T@U) (|b#0@@2| T@U) (|xs#0@@5| T@U) ) (! (= (_module.__default.foldl _module._default.foldl$A@@2 _module._default.foldl$B@@2 ($LS $ly@@5) |f#0@@4| |b#0@@2| |xs#0@@5|) (_module.__default.foldl _module._default.foldl$A@@2 _module._default.foldl$B@@2 $ly@@5 |f#0@@4| |b#0@@2| |xs#0@@5|))
 :pattern ( (_module.__default.foldl _module._default.foldl$A@@2 _module._default.foldl$B@@2 ($LS $ly@@5) |f#0@@4| |b#0@@2| |xs#0@@5|))
)))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert (forall ((s T@U) (bx@@5 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@5) (U_2_bool (MapType1Select refType boolType s ($Unbox refType bx@@5))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@5))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@6 Tclass._System.object?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._System.object)  (and ($Is refType |c#0@@0| Tclass._System.object?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object?))
)))
(assert (forall ((f@@0 T@U) (t0@@4 T@U) (t1@@3 T@U) (t2@@2 T@U) (h@@5 T@U) ) (!  (=> ($IsGoodHeap h@@5) (= ($IsAlloc HandleTypeType f@@0 (Tclass._System.___hFunc2 t0@@4 t1@@3 t2@@2) h@@5) (forall ((bx0@@1 T@U) (bx1@@1 T@U) ) (!  (=> (and (and (and ($IsBox bx0@@1 t0@@4) ($IsAllocBox bx0@@1 t0@@4 h@@5)) (and ($IsBox bx1@@1 t1@@3) ($IsAllocBox bx1@@1 t1@@3 h@@5))) (Requires2 t0@@4 t1@@3 t2@@2 h@@5 f@@0 bx0@@1 bx1@@1)) (forall ((r@@1 T@U) ) (!  (=> (and (or (not (= r@@1 null)) (not true)) (|Set#IsMember| (Reads2 t0@@4 t1@@3 t2@@2 h@@5 f@@0 bx0@@1 bx1@@1) ($Box refType r@@1))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@5 r@@1) alloc))))
 :pattern ( (|Set#IsMember| (Reads2 t0@@4 t1@@3 t2@@2 h@@5 f@@0 bx0@@1 bx1@@1) ($Box refType r@@1)))
)))
 :pattern ( (Apply2 t0@@4 t1@@3 t2@@2 h@@5 f@@0 bx0@@1 bx1@@1))
 :pattern ( (Reads2 t0@@4 t1@@3 t2@@2 h@@5 f@@0 bx0@@1 bx1@@1))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@0 (Tclass._System.___hFunc2 t0@@4 t1@@3 t2@@2) h@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.foldl$A@@3 T@U) (_module._default.foldl$B@@3 T@U) ($ly@@6 T@U) ($Heap@@1 T@U) (|f#0@@5| T@U) (|b#0@@3| T@U) (|xs#0@@6| T@U) ) (!  (=> (or (|_module.__default.foldl#canCall| _module._default.foldl$A@@3 _module._default.foldl$B@@3 |f#0@@5| |b#0@@3| |xs#0@@6|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@1) ($Is HandleTypeType |f#0@@5| (Tclass._System.___hTotalFunc2 _module._default.foldl$B@@3 _module._default.foldl$A@@3 _module._default.foldl$B@@3))) ($IsBox |b#0@@3| _module._default.foldl$B@@3)) ($Is DatatypeTypeType |xs#0@@6| (Tclass._module.List _module._default.foldl$A@@3))))) (and (=> (not (_module.List.Nil_q |xs#0@@6|)) (let ((|tail#1@@0| (_module.List._h3 |xs#0@@6|)))
(let ((|head#1| (_module.List._h2 |xs#0@@6|)))
(|_module.__default.foldl#canCall| _module._default.foldl$A@@3 _module._default.foldl$B@@3 |f#0@@5| (Apply2 _module._default.foldl$B@@3 _module._default.foldl$A@@3 _module._default.foldl$B@@3 $Heap@@1 |f#0@@5| |b#0@@3| |head#1|) |tail#1@@0|)))) (= (_module.__default.foldl _module._default.foldl$A@@3 _module._default.foldl$B@@3 ($LS $ly@@6) |f#0@@5| |b#0@@3| |xs#0@@6|) (ite (_module.List.Nil_q |xs#0@@6|) |b#0@@3| (let ((|tail#0@@0| (_module.List._h3 |xs#0@@6|)))
(let ((|head#0| (_module.List._h2 |xs#0@@6|)))
(_module.__default.foldl _module._default.foldl$A@@3 _module._default.foldl$B@@3 $ly@@6 |f#0@@5| (Apply2 _module._default.foldl$B@@3 _module._default.foldl$A@@3 _module._default.foldl$B@@3 $Heap@@1 |f#0@@5| |b#0@@3| |head#0|) |tail#0@@0|)))))))
 :pattern ( (_module.__default.foldl _module._default.foldl$A@@3 _module._default.foldl$B@@3 ($LS $ly@@6) |f#0@@5| |b#0@@3| |xs#0@@6|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#_module.List| d@@3) (or (_module.List.Nil_q d@@3) (_module.List.Cons_q d@@3)))
 :pattern ( (|$IsA#_module.List| d@@3))
)))
(assert (forall ((|l#0@@2| Bool) (|$l#0#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#8| |l#0@@2|) |$l#0#o#0|)) |l#0@@2|)
 :pattern ( (MapType1Select refType boolType (|lambda#8| |l#0@@2|) |$l#0#o#0|))
)))
(assert (forall ((|l#0@@3| T@U) (|$l#0#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#10| |l#0@@3|) |$l#0#ly#0|) |l#0@@3|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#10| |l#0@@3|) |$l#0#ly#0|))
)))
(assert (forall ((f@@1 T@U) (t0@@5 T@U) (t1@@4 T@U) (t2@@3 T@U) ) (! (= ($Is HandleTypeType f@@1 (Tclass._System.___hFunc2 t0@@5 t1@@4 t2@@3)) (forall ((h@@6 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@6) (and ($IsBox bx0@@2 t0@@5) ($IsBox bx1@@2 t1@@4))) (Requires2 t0@@5 t1@@4 t2@@3 h@@6 f@@1 bx0@@2 bx1@@2)) ($IsBox (Apply2 t0@@5 t1@@4 t2@@3 h@@6 f@@1 bx0@@2 bx1@@2) t2@@3))
 :pattern ( (Apply2 t0@@5 t1@@4 t2@@3 h@@6 f@@1 bx0@@2 bx1@@2))
)))
 :pattern ( ($Is HandleTypeType f@@1 (Tclass._System.___hFunc2 t0@@5 t1@@4 t2@@3)))
)))
(assert (forall ((_module.List$T@@3 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@4) (_module.List.Cons_q d@@4)))
 :pattern ( (_module.List.Cons_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@3)))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((t0@@6 T@U) (t1@@5 T@U) (t2@@4 T@U) (heap@@1 T@U) (f@@2 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and ($IsGoodHeap heap@@1) (and (and ($IsBox bx0@@3 t0@@6) ($IsBox bx1@@3 t1@@5)) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@6 t1@@5 t2@@4)))) (= (|Set#Equal| (Reads2 t0@@6 t1@@5 t2@@4 $OneHeap f@@2 bx0@@3 bx1@@3) |Set#Empty|) (|Set#Equal| (Reads2 t0@@6 t1@@5 t2@@4 heap@@1 f@@2 bx0@@3 bx1@@3) |Set#Empty|)))
 :pattern ( (Reads2 t0@@6 t1@@5 t2@@4 $OneHeap f@@2 bx0@@3 bx1@@3) ($IsGoodHeap heap@@1))
 :pattern ( (Reads2 t0@@6 t1@@5 t2@@4 heap@@1 f@@2 bx0@@3 bx1@@3))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@3 T@U) (t0@@7 T@U) (t1@@6 T@U) (t2@@5 T@U) (h@@7 T@U) ) (!  (=> (and ($IsGoodHeap h@@7) ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@7 t1@@6 t2@@5) h@@7)) (forall ((bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and ($IsAllocBox bx0@@4 t0@@7 h@@7) ($IsAllocBox bx1@@4 t1@@6 h@@7)) (Requires2 t0@@7 t1@@6 t2@@5 h@@7 f@@3 bx0@@4 bx1@@4)) ($IsAllocBox (Apply2 t0@@7 t1@@6 t2@@5 h@@7 f@@3 bx0@@4 bx1@@4) t2@@5 h@@7))
 :pattern ( (Apply2 t0@@7 t1@@6 t2@@5 h@@7 f@@3 bx0@@4 bx1@@4))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@7 t1@@6 t2@@5) h@@7))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 TInt) (and (= ($Box intType ($Unbox intType bx@@8)) bx@@8) ($Is intType ($Unbox intType bx@@8) TInt)))
 :pattern ( ($IsBox bx@@8 TInt))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 TBool) (and (= ($Box boolType ($Unbox boolType bx@@9)) bx@@9) ($Is boolType ($Unbox boolType bx@@9) TBool)))
 :pattern ( ($IsBox bx@@9 TBool))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((|l#0@@4| T@U) (|l#1@@1| T@U) (|l#2@@0| Int) (|$l#11#heap#0| T@U) (|$l#11#b#0| T@U) (|$l#11#ys#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#131| |l#0@@4| |l#1@@1| |l#2@@0|) |$l#11#heap#0| |$l#11#b#0| |$l#11#ys#0|) ($Box boolType (bool_2_U (= (+ (U_2_int ($Unbox intType |$l#11#b#0|)) (_module.__default.length |l#0@@4| |l#1@@1| ($Unbox DatatypeTypeType |$l#11#ys#0|))) |l#2@@0|))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#131| |l#0@@4| |l#1@@1| |l#2@@0|) |$l#11#heap#0| |$l#11#b#0| |$l#11#ys#0|))
)))
(assert (forall ((v@@3 T@U) (t0@@8 T@U) (h@@8 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@8) h@@8) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@10) ($IsAllocBox bx@@10 t0@@8 h@@8))
 :pattern ( (|Set#IsMember| v@@3 bx@@10))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@8) h@@8))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List._h2 (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List._h3 (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall (($o@@0 T@U) ) (! ($Is refType $o@@0 Tclass._System.object?)
 :pattern ( ($Is refType $o@@0 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((t0@@9 T@U) (t1@@7 T@U) (t2@@6 T@U) (heap@@2 T@U) (f@@4 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@2) (and (and ($IsBox bx0@@5 t0@@9) ($IsBox bx1@@5 t1@@7)) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 t0@@9 t1@@7 t2@@6)))) (|Set#Equal| (Reads2 t0@@9 t1@@7 t2@@6 $OneHeap f@@4 bx0@@5 bx1@@5) |Set#Empty|)) (= (Requires2 t0@@9 t1@@7 t2@@6 $OneHeap f@@4 bx0@@5 bx1@@5) (Requires2 t0@@9 t1@@7 t2@@6 heap@@2 f@@4 bx0@@5 bx1@@5)))
 :pattern ( (Requires2 t0@@9 t1@@7 t2@@6 $OneHeap f@@4 bx0@@5 bx1@@5) ($IsGoodHeap heap@@2))
 :pattern ( (Requires2 t0@@9 t1@@7 t2@@6 heap@@2 f@@4 bx0@@5 bx1@@5))
)))
(assert (forall ((|l#0@@5| T@U) (|$l#0#heap#0@@0| T@U) (|$l#0#a#0@@0| T@U) (|$l#0#b#0@@0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType SetType (|lambda#9| |l#0@@5|) |$l#0#heap#0@@0| |$l#0#a#0@@0| |$l#0#b#0@@0|) |l#0@@5|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType SetType (|lambda#9| |l#0@@5|) |$l#0#heap#0@@0| |$l#0#a#0@@0| |$l#0#b#0@@0|))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((f@@5 T@U) (t0@@10 T@U) (t1@@8 T@U) (t2@@7 T@U) (u0@@3 T@U) (u1@@3 T@U) (u2@@2 T@U) ) (!  (=> (and (and (and ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 t0@@10 t1@@8 t2@@7)) (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 u0@@3) ($IsBox bx@@11 t0@@10))
 :pattern ( ($IsBox bx@@11 u0@@3))
 :pattern ( ($IsBox bx@@11 t0@@10))
))) (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 u1@@3) ($IsBox bx@@12 t1@@8))
 :pattern ( ($IsBox bx@@12 u1@@3))
 :pattern ( ($IsBox bx@@12 t1@@8))
))) (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 t2@@7) ($IsBox bx@@13 u2@@2))
 :pattern ( ($IsBox bx@@13 t2@@7))
 :pattern ( ($IsBox bx@@13 u2@@2))
))) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 u0@@3 u1@@3 u2@@2)))
 :pattern ( ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 t0@@10 t1@@8 t2@@7)) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 u0@@3 u1@@3 u2@@2)))
)))
(assert (forall ((f@@6 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@6 ($LS ly@@0)) (AtLayer A@@0 f@@6 ly@@0))
 :pattern ( (AtLayer A@@0 f@@6 ($LS ly@@0)))
)))
(assert (forall ((d@@5 T@U) (_module.List$T@@5 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.List.Cons_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.List _module.List$T@@5) $h@@2))) ($IsAllocBox (_module.List._h2 d@@5) _module.List$T@@5 $h@@2))
 :pattern ( ($IsAllocBox (_module.List._h2 d@@5) _module.List$T@@5 $h@@2))
)))
(assert  (and (forall ((t0@@11 T@T) (t1@@9 T@T) (t2@@8 T@T) (val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@3 T@U) ) (! (= (MapType2Select t0@@11 t1@@9 t2@@8 (MapType2Store t0@@11 t1@@9 t2@@8 m@@5 x0@@5 x1@@3 val@@5) x0@@5 x1@@3) val@@5)
 :weight 0
)) (and (forall ((u0@@4 T@T) (u1@@4 T@T) (u2@@3 T@T) (val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@4 T@U) (y0@@3 T@U) (y1@@2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select u0@@4 u1@@4 u2@@3 (MapType2Store u0@@4 u1@@4 u2@@3 m@@6 x0@@6 x1@@4 val@@6) y0@@3 y1@@2) (MapType2Select u0@@4 u1@@4 u2@@3 m@@6 y0@@3 y1@@2)))
 :weight 0
)) (forall ((u0@@5 T@T) (u1@@5 T@T) (u2@@4 T@T) (val@@7 T@U) (m@@7 T@U) (x0@@7 T@U) (x1@@5 T@U) (y0@@4 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType2Select u0@@5 u1@@5 u2@@4 (MapType2Store u0@@5 u1@@5 u2@@4 m@@7 x0@@7 x1@@5 val@@7) y0@@4 y1@@3) (MapType2Select u0@@5 u1@@5 u2@@4 m@@7 y0@@4 y1@@3)))
 :weight 0
)))))
(assert (forall ((|l#0@@6| T@U) (|l#1@@2| T@U) (|l#2@@1| T@U) (|l#3@@0| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType2Select refType FieldType boolType (|lambda#0| |l#0@@6| |l#1@@2| |l#2@@1| |l#3@@0|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0@@6|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@2| $o@@1) |l#2@@1|)))) |l#3@@0|))
 :pattern ( (MapType2Select refType FieldType boolType (|lambda#0| |l#0@@6| |l#1@@2| |l#2@@1| |l#3@@0|) $o@@1 $f))
)))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@16| T@U) (|f#0@@6| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@16|) $h@@3) ($IsAlloc HandleTypeType |f#0@@6| (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@16| |#$R@@16|) $h@@3))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@16|) $h@@3))
)))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@17| T@U) (|f#0@@7| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@7| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@17|) $h@@4) ($IsAlloc HandleTypeType |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@17|) $h@@4))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@7| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@17|) $h@@4))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((t0@@12 T@U) (t1@@10 T@U) (t2@@9 T@U) (h0 T@U) (h1 T@U) (f@@7 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and (and ($IsBox bx0@@6 t0@@12) ($IsBox bx1@@6 t1@@10)) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc2 t0@@12 t1@@10 t2@@9)))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads2 t0@@12 t1@@10 t2@@9 h0 f@@7 bx0@@6 bx1@@6) ($Box refType o@@1))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0 o@@1) fld) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires2 t0@@12 t1@@10 t2@@9 h0 f@@7 bx0@@6 bx1@@6) (Requires2 t0@@12 t1@@10 t2@@9 h1 f@@7 bx0@@6 bx1@@6)))
 :pattern ( ($HeapSucc h0 h1) (Requires2 t0@@12 t1@@10 t2@@9 h1 f@@7 bx0@@6 bx1@@6))
)))
(assert (forall ((t0@@13 T@U) (t1@@11 T@U) (t2@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@8 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and (and ($IsBox bx0@@7 t0@@13) ($IsBox bx1@@7 t1@@11)) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc2 t0@@13 t1@@11 t2@@10)))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads2 t0@@13 t1@@11 t2@@10 h1@@0 f@@8 bx0@@7 bx1@@7) ($Box refType o@@2))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires2 t0@@13 t1@@11 t2@@10 h0@@0 f@@8 bx0@@7 bx1@@7) (Requires2 t0@@13 t1@@11 t2@@10 h1@@0 f@@8 bx0@@7 bx1@@7)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires2 t0@@13 t1@@11 t2@@10 h1@@0 f@@8 bx0@@7 bx1@@7))
)))
(assert (forall ((bx@@14 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@14 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@14)) bx@@14) ($Is SetType ($Unbox SetType bx@@14) (TSet t@@5))))
 :pattern ( ($IsBox bx@@14 (TSet t@@5)))
)))
(assert (forall ((_module.List$T@@6 T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@15)) bx@@15) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@15) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@15 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((d@@7 T@U) (_module.List$T@@7 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.List.Cons_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.List _module.List$T@@7) $h@@5))) ($IsAlloc DatatypeTypeType (_module.List._h3 d@@7) (Tclass._module.List _module.List$T@@7) $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List._h3 d@@7) (Tclass._module.List _module.List$T@@7) $h@@5))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.foldl$A@@4 T@U) (_module._default.foldl$B@@4 T@U) ($ly@@7 T@U) ($Heap@@2 T@U) (|f#0@@8| T@U) (|b#0@@4| T@U) (|xs#0@@7| T@U) ) (!  (=> (or (|_module.__default.foldl#canCall| _module._default.foldl$A@@4 _module._default.foldl$B@@4 |f#0@@8| |b#0@@4| (Lit DatatypeTypeType |xs#0@@7|)) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@2) ($Is HandleTypeType |f#0@@8| (Tclass._System.___hTotalFunc2 _module._default.foldl$B@@4 _module._default.foldl$A@@4 _module._default.foldl$B@@4))) ($IsBox |b#0@@4| _module._default.foldl$B@@4)) ($Is DatatypeTypeType |xs#0@@7| (Tclass._module.List _module._default.foldl$A@@4))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@7|)))))) (let ((|tail#3@@0| (Lit DatatypeTypeType (_module.List._h3 (Lit DatatypeTypeType |xs#0@@7|)))))
(let ((|head#3| (Lit BoxType (_module.List._h2 (Lit DatatypeTypeType |xs#0@@7|)))))
(|_module.__default.foldl#canCall| _module._default.foldl$A@@4 _module._default.foldl$B@@4 |f#0@@8| (Apply2 _module._default.foldl$B@@4 _module._default.foldl$A@@4 _module._default.foldl$B@@4 $Heap@@2 |f#0@@8| |b#0@@4| |head#3|) |tail#3@@0|)))) (= (_module.__default.foldl _module._default.foldl$A@@4 _module._default.foldl$B@@4 ($LS $ly@@7) |f#0@@8| |b#0@@4| (Lit DatatypeTypeType |xs#0@@7|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@7|)) |b#0@@4| (let ((|tail#2@@0| (Lit DatatypeTypeType (_module.List._h3 (Lit DatatypeTypeType |xs#0@@7|)))))
(let ((|head#2| (Lit BoxType (_module.List._h2 (Lit DatatypeTypeType |xs#0@@7|)))))
(_module.__default.foldl _module._default.foldl$A@@4 _module._default.foldl$B@@4 ($LS $ly@@7) |f#0@@8| (Apply2 _module._default.foldl$B@@4 _module._default.foldl$A@@4 _module._default.foldl$B@@4 $Heap@@2 |f#0@@8| |b#0@@4| |head#2|) |tail#2@@0|)))))))
 :weight 3
 :pattern ( (_module.__default.foldl _module._default.foldl$A@@4 _module._default.foldl$B@@4 ($LS $ly@@7) |f#0@@8| |b#0@@4| (Lit DatatypeTypeType |xs#0@@7|)) ($IsGoodHeap $Heap@@2))
))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@3 T@U) ) (! (= (|Set#IsMember| a@@1 o@@3) (|Set#IsMember| b@@1 o@@3))
 :pattern ( (|Set#IsMember| a@@1 o@@3))
 :pattern ( (|Set#IsMember| b@@1 o@@3))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((t0@@14 T@U) (t1@@12 T@U) (t2@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@9 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and (and ($IsBox bx0@@8 t0@@14) ($IsBox bx1@@8 t1@@12)) ($Is HandleTypeType f@@9 (Tclass._System.___hFunc2 t0@@14 t1@@12 t2@@11)))) (forall ((o@@4 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads2 t0@@14 t1@@12 t2@@11 h0@@1 f@@9 bx0@@8 bx1@@8) ($Box refType o@@4))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@1 o@@4) fld@@1) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@1 o@@4) fld@@1))))) (= (Reads2 t0@@14 t1@@12 t2@@11 h0@@1 f@@9 bx0@@8 bx1@@8) (Reads2 t0@@14 t1@@12 t2@@11 h1@@1 f@@9 bx0@@8 bx1@@8)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads2 t0@@14 t1@@12 t2@@11 h1@@1 f@@9 bx0@@8 bx1@@8))
)))
(assert (forall ((t0@@15 T@U) (t1@@13 T@U) (t2@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@10 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and (and ($IsBox bx0@@9 t0@@15) ($IsBox bx1@@9 t1@@13)) ($Is HandleTypeType f@@10 (Tclass._System.___hFunc2 t0@@15 t1@@13 t2@@12)))) (forall ((o@@5 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads2 t0@@15 t1@@13 t2@@12 h1@@2 f@@10 bx0@@9 bx1@@9) ($Box refType o@@5))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@2 o@@5) fld@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@2 o@@5) fld@@2))))) (= (Reads2 t0@@15 t1@@13 t2@@12 h0@@2 f@@10 bx0@@9 bx1@@9) (Reads2 t0@@15 t1@@13 t2@@12 h1@@2 f@@10 bx0@@9 bx1@@9)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads2 t0@@15 t1@@13 t2@@12 h1@@2 f@@10 bx0@@9 bx1@@9))
)))
(assert (forall ((t0@@16 T@U) (t1@@14 T@U) (t2@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@11 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and (and ($IsBox bx0@@10 t0@@16) ($IsBox bx1@@10 t1@@14)) ($Is HandleTypeType f@@11 (Tclass._System.___hFunc2 t0@@16 t1@@14 t2@@13)))) (forall ((o@@6 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads2 t0@@16 t1@@14 t2@@13 h0@@3 f@@11 bx0@@10 bx1@@10) ($Box refType o@@6))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@3 o@@6) fld@@3) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@3 o@@6) fld@@3))))) (= (Apply2 t0@@16 t1@@14 t2@@13 h0@@3 f@@11 bx0@@10 bx1@@10) (Apply2 t0@@16 t1@@14 t2@@13 h1@@3 f@@11 bx0@@10 bx1@@10)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply2 t0@@16 t1@@14 t2@@13 h1@@3 f@@11 bx0@@10 bx1@@10))
)))
(assert (forall ((t0@@17 T@U) (t1@@15 T@U) (t2@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@12 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and (and ($IsBox bx0@@11 t0@@17) ($IsBox bx1@@11 t1@@15)) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc2 t0@@17 t1@@15 t2@@14)))) (forall ((o@@7 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads2 t0@@17 t1@@15 t2@@14 h1@@4 f@@12 bx0@@11 bx1@@11) ($Box refType o@@7))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@4 o@@7) fld@@4) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@4 o@@7) fld@@4))))) (= (Apply2 t0@@17 t1@@15 t2@@14 h0@@4 f@@12 bx0@@11 bx1@@11) (Apply2 t0@@17 t1@@15 t2@@14 h1@@4 f@@12 bx0@@11 bx1@@11)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply2 t0@@17 t1@@15 t2@@14 h1@@4 f@@12 bx0@@11 bx1@@11))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.length$_T0@@2 T@U) ($ly@@8 T@U) (|xs#0@@8| T@U) ) (!  (=> (or (|_module.__default.length#canCall| _module._default.length$_T0@@2 |xs#0@@8|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@8| (Tclass._module.List _module._default.length$_T0@@2)))) (<= (LitInt 0) (_module.__default.length _module._default.length$_T0@@2 $ly@@8 |xs#0@@8|)))
 :pattern ( (_module.__default.length _module._default.length$_T0@@2 $ly@@8 |xs#0@@8|))
))))
(assert (forall ((t0@@18 T@U) (t1@@16 T@U) (t2@@15 T@U) (heap@@3 T@U) (h@@9 T@U) (r@@2 T@U) (rd@@1 T@U) (bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType r@@2 heap@@3 bx0@@12 bx1@@12)) (Requires2 t0@@18 t1@@16 t2@@15 heap@@3 (Handle2 h@@9 r@@2 rd@@1) bx0@@12 bx1@@12))
 :pattern ( (Requires2 t0@@18 t1@@16 t2@@15 heap@@3 (Handle2 h@@9 r@@2 rd@@1) bx0@@12 bx1@@12))
)))
(assert (forall ((h@@10 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@10)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@10))
)))
(assert (forall ((h@@11 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@11)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@11))
)))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@6 T@U) ) (!  (=> ($IsGoodHeap $h@@6) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@6)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$T@@8 $h@@6) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$T@@8) $h@@6))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@6))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is intType v@@6 TInt)
 :pattern ( ($Is intType v@@6 TInt))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |ys#0@0| () T@U)
(declare-fun |$lambdaHeap#1@0| () T@U)
(declare-fun |$_Frame#l1@0| () T@U)
(declare-fun |xs#0@@9| () T@U)
(declare-fun |lambdaResult#1| () Bool)
(declare-fun |b#1@0| () Int)
(declare-fun $LZ () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |$lambdaHeap#2@0| () T@U)
(declare-fun |inc#0@0| () T@U)
(declare-fun |##b#1@0| () Int)
(declare-fun |r#0@0| () Int)
(declare-fun |b##0@0| () Int)
(declare-fun |call4formal@b#0@0| () T@U)
(declare-fun |inv#0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@3 () T@U)
(declare-fun |inv#0| () T@U)
(declare-fun |inc#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let ((anon3_correct true))
(let ((anon10_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |ys#0@0| (Tclass._module.List TInt)) ($IsAlloc DatatypeTypeType |ys#0@0| (Tclass._module.List TInt) |$lambdaHeap#1@0|))) (= (ControlFlow 0 12) 10)) anon3_correct)))
(let ((anon10_Then_correct  (=> (and (and ($Is DatatypeTypeType |ys#0@0| (Tclass._module.List TInt)) ($IsAlloc DatatypeTypeType |ys#0@0| (Tclass._module.List TInt) |$lambdaHeap#1@0|)) (and (= |$_Frame#l1@0| (|lambda#0| null |$lambdaHeap#1@0| alloc false)) ($IsAlloc DatatypeTypeType |ys#0@0| (Tclass._module.List TInt) |$lambdaHeap#1@0|))) (=> (and (and (and (|_module.__default.length#canCall| TInt |ys#0@0|) ($IsAlloc DatatypeTypeType |xs#0@@9| (Tclass._module.List TInt) |$lambdaHeap#1@0|)) (and (|_module.__default.length#canCall| TInt |xs#0@@9|) (= |lambdaResult#1| (= (+ |b#1@0| (_module.__default.length TInt ($LS $LZ) |ys#0@0|)) (_module.__default.length TInt ($LS $LZ) |xs#0@@9|))))) (and (and (|_module.__default.length#canCall| TInt |ys#0@0|) (|_module.__default.length#canCall| TInt |xs#0@@9|)) (and ($Is boolType (bool_2_U |lambdaResult#1|) TBool) (= (ControlFlow 0 11) 10)))) anon3_correct))))
(let ((anon9_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#1@0|) (or (= $Heap@0 |$lambdaHeap#1@0|) ($HeapSucc $Heap@0 |$lambdaHeap#1@0|))) (and (=> (= (ControlFlow 0 13) 11) anon10_Then_correct) (=> (= (ControlFlow 0 13) 12) anon10_Else_correct)))))
(let ((anon12_Else_correct true))
(let ((anon12_Then_correct true))
(let ((anon11_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#2@0|) (or (= $Heap@0 |$lambdaHeap#2@0|) ($HeapSucc $Heap@0 |$lambdaHeap#2@0|))) (and (=> (= (ControlFlow 0 8) 6) anon12_Then_correct) (=> (= (ControlFlow 0 8) 7) anon12_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (= (U_2_int ($Unbox intType (_module.__default.foldl TInt TInt ($LS ($LS $LZ)) (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#10| (Handle2 (|lambda#105| 1) (|lambda#7| TInt TInt) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ))) ($Box intType (int_2_U (LitInt 0))) |xs#0@@9|))) (_module.__default.length TInt ($LS ($LS $LZ)) |xs#0@@9|)))))
(let ((anon11_Else_correct  (=> (and (= |inc#0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#10| (Handle2 (|lambda#105| 1) (|lambda#7| TInt TInt) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ)))) ($IsAlloc HandleTypeType |inc#0@0| (Tclass._System.___hTotalFunc2 TInt TInt TInt) $Heap@0)) (=> (and (and (and (= |##b#1@0| (LitInt 0)) ($IsAlloc intType (int_2_U |##b#1@0|) TInt $Heap@0)) (and ($IsAlloc DatatypeTypeType |xs#0@@9| (Tclass._module.List TInt) $Heap@0) (|_module.__default.foldl#canCall| TInt TInt |inc#0@0| ($Box intType (int_2_U (LitInt 0))) |xs#0@@9|))) (and (and (|_module.__default.foldl#canCall| TInt TInt |inc#0@0| ($Box intType (int_2_U (LitInt 0))) |xs#0@@9|) (= |r#0@0| (U_2_int ($Unbox intType (_module.__default.foldl TInt TInt ($LS $LZ) |inc#0@0| ($Box intType (int_2_U (LitInt 0))) |xs#0@@9|))))) (and (= |b##0@0| (LitInt 0)) (= |call4formal@b#0@0| ($Box intType (int_2_U |b##0@0|)))))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (forall ((|x#1| T@U) (|xs#2| T@U) (|b#2| T@U) ) (!  (=> (and (and (and ($IsBox |x#1| TInt) ($IsAllocBox |x#1| TInt $Heap@0)) (and ($Is DatatypeTypeType |xs#2| (Tclass._module.List TInt)) ($IsAlloc DatatypeTypeType |xs#2| (Tclass._module.List TInt) $Heap@0))) (and ($IsBox |b#2| TInt) ($IsAllocBox |b#2| TInt $Heap@0))) (=> (U_2_bool ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| |b#2| ($Box DatatypeTypeType (|#_module.List.Cons| |x#1| |xs#2|))))) (U_2_bool ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| (Apply2 TInt TInt TInt $Heap@0 |inc#0@0| |b#2| |x#1|) ($Box DatatypeTypeType |xs#2|))))))
 :pattern ( ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| (Apply2 TInt TInt TInt $Heap@0 |inc#0@0| |b#2| |x#1|) ($Box DatatypeTypeType |xs#2|))))
 :pattern ( ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| |b#2| ($Box DatatypeTypeType (|#_module.List.Cons| |x#1| |xs#2|)))))
))) (=> (forall ((|x#1@@0| T@U) (|xs#2@@0| T@U) (|b#2@@0| T@U) ) (!  (=> (and (and (and ($IsBox |x#1@@0| TInt) ($IsAllocBox |x#1@@0| TInt $Heap@0)) (and ($Is DatatypeTypeType |xs#2@@0| (Tclass._module.List TInt)) ($IsAlloc DatatypeTypeType |xs#2@@0| (Tclass._module.List TInt) $Heap@0))) (and ($IsBox |b#2@@0| TInt) ($IsAllocBox |b#2@@0| TInt $Heap@0))) (=> (U_2_bool ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| |b#2@@0| ($Box DatatypeTypeType (|#_module.List.Cons| |x#1@@0| |xs#2@@0|))))) (U_2_bool ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| (Apply2 TInt TInt TInt $Heap@0 |inc#0@0| |b#2@@0| |x#1@@0|) ($Box DatatypeTypeType |xs#2@@0|))))))
 :pattern ( ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| (Apply2 TInt TInt TInt $Heap@0 |inc#0@0| |b#2@@0| |x#1@@0|) ($Box DatatypeTypeType |xs#2@@0|))))
 :pattern ( ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| |b#2@@0| ($Box DatatypeTypeType (|#_module.List.Cons| |x#1@@0| |xs#2@@0|)))))
)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (U_2_bool ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| |call4formal@b#0@0| ($Box DatatypeTypeType |xs#0@@9|))))) (=> (U_2_bool ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@0 |inv#0@0| |call4formal@b#0@0| ($Box DatatypeTypeType |xs#0@@9|)))) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (|_module.__default.foldl#canCall| TInt TInt |inc#0@0| |call4formal@b#0@0| |xs#0@@9|) (U_2_bool ($Unbox boolType (Apply2 TInt (Tclass._module.List TInt) TBool $Heap@1 |inv#0@0| (_module.__default.foldl TInt TInt ($LS ($LS $LZ)) |inc#0@0| |call4formal@b#0@0| |xs#0@@9|) ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.List.Nil|)))))) (and (= $Heap@0 $Heap@1) (= (ControlFlow 0 3) 2))) GeneratedUnifiedExit_correct))))))))))
(let ((anon9_Else_correct  (=> (and (forall ((|$l#12#ys#0| T@U) )  (=> ($Is DatatypeTypeType |$l#12#ys#0| (Tclass._module.List TInt)) (and (|_module.__default.length#canCall| TInt |$l#12#ys#0|) (|_module.__default.length#canCall| TInt |xs#0@@9|)))) (= |inv#0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#135| TInt TInt |xs#0@@9| (|lambda#7| TInt (Tclass._module.List TInt)) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false)))) ($LS $LZ))))) (and (=> (= (ControlFlow 0 9) 8) anon11_Then_correct) (=> (= (ControlFlow 0 9) 3) anon11_Else_correct)))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@3 alloc false)) (|$IsA#_module.List| |xs#0@@9|)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@3 $Heap@0) (forall ((|$ih#xs0#0| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |$ih#xs0#0| (Tclass._module.List TInt)) (U_2_bool (Lit boolType (bool_2_U true)))) (< (DtRank |$ih#xs0#0|) (DtRank |xs#0@@9|))) (= (U_2_int ($Unbox intType (_module.__default.foldl TInt TInt ($LS $LZ) (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#10| (Handle2 (|lambda#105| 1) (|lambda#7| TInt TInt) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ))) ($Box intType (int_2_U (LitInt 0))) |$ih#xs0#0|))) (_module.__default.length TInt ($LS $LZ) |$ih#xs0#0|)))
 :pattern ( (_module.__default.length TInt ($LS $LZ) |$ih#xs0#0|))
)))) (and (=> (= (ControlFlow 0 14) 13) anon9_Then_correct) (=> (= (ControlFlow 0 14) 9) anon9_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@3) ($IsHeapAnchor $Heap@@3)) (=> (and (and (and (and ($Is DatatypeTypeType |xs#0@@9| (Tclass._module.List TInt)) ($IsAlloc DatatypeTypeType |xs#0@@9| (Tclass._module.List TInt) $Heap@@3)) (|$IsA#_module.List| |xs#0@@9|)) (and (and ($Is HandleTypeType |inv#0| (Tclass._System.___hTotalFunc2 TInt (Tclass._module.List TInt) TBool)) ($IsAlloc HandleTypeType |inv#0| (Tclass._System.___hTotalFunc2 TInt (Tclass._module.List TInt) TBool) $Heap@@3)) true)) (and (and (and ($Is HandleTypeType |inc#0| (Tclass._System.___hTotalFunc2 TInt TInt TInt)) ($IsAlloc HandleTypeType |inc#0| (Tclass._System.___hTotalFunc2 TInt TInt TInt) $Heap@@3)) true) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 15) 14)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
