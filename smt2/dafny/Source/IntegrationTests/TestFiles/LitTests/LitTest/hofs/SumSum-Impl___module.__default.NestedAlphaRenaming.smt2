(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun SetType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |lambda#3| (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun |lambda#43| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun null () T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun |lambda#57| (Int T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#53| (T@U Int T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun _module.__default.Sum (T@U Int T@U) Int)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun |lambda#6| (T@U) T@U)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.Sum#canCall| (Int T@U) Bool)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#4| (Bool) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 tytagFamily$object |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2|)
)
(assert (= (Tag TInt) TagInt))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 3))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (= (Ctor SetType) 7)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (h T@U) (r T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType rd heap bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx))
)))
(assert (forall ((|l#0| T@U) (|$l#9#heap#0| T@U) (|$l#9#x#0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#3| |l#0|) |$l#9#heap#0| |$l#9#x#0|)) ($IsBox |$l#9#x#0| |l#0|))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#3| |l#0|) |$l#9#heap#0| |$l#9#x#0|))
)))
(assert (= (Ctor HandleTypeType) 8))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R| T@U) (|f#0| T@U) ) (! (= ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|))  (and ($Is HandleTypeType |f#0| (Tclass._System.___hPartialFunc2 |#$T0| |#$T1| |#$R|)) (forall ((|x0#0| T@U) (|x1#0| T@U) )  (=> (and ($IsBox |x0#0| |#$T0|) ($IsBox |x1#0| |#$T1|)) (Requires2 |#$T0| |#$T1| |#$R| $OneHeap |f#0| |x0#0| |x1#0|)))))
 :pattern ( ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|)))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|)) |#$T0@@0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|)) |#$T1@@1|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|)) |#$T1@@4|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|)) |#$R@@5|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|)) |#$T0@@6|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@7| T@U) ) (! (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|)) |#$T1@@7|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@8| T@U) ) (! (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|)) |#$R@@8|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@9| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|)) |tytagFamily$_#Func2|))
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@10| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|)) |tytagFamily$_#PartialFunc2|))
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@11| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|)) |tytagFamily$_#TotalFunc2|))
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@12| T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@0)) bx@@0) ($Is HandleTypeType ($Unbox HandleTypeType bx@@0) (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|))))
 :pattern ( ($IsBox bx@@0 (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|)))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@13| T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@1)) bx@@1) ($Is HandleTypeType ($Unbox HandleTypeType bx@@1) (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|)))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@14| T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@2)) bx@@2) ($Is HandleTypeType ($Unbox HandleTypeType bx@@2) (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|)))
)))
(assert (forall ((f T@U) (t0@@2 T@U) (t1@@2 T@U) (u0@@2 T@U) (u1@@2 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 u0@@2) ($IsBox bx@@3 t0@@2))
 :pattern ( ($IsBox bx@@3 u0@@2))
 :pattern ( ($IsBox bx@@3 t0@@2))
))) (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 t1@@2) ($IsBox bx@@4 u1@@2))
 :pattern ( ($IsBox bx@@4 t1@@2))
 :pattern ( ($IsBox bx@@4 u1@@2))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h) ($IsAlloc refType |c#0| Tclass._System.object? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|$l#32#heap#0| T@U) (|$l#32#y#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#43| |l#0@@0| |l#1| |l#2| |l#3| |l#4|) |$l#32#heap#0| |$l#32#y#0|) ($Box intType ($Unbox intType (Apply2 |l#0@@0| |l#1| |l#2| |$l#32#heap#0| |l#3| |l#4| ($Box intType ($Unbox intType |$l#32#y#0|))))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#43| |l#0@@0| |l#1| |l#2| |l#3| |l#4|) |$l#32#heap#0| |$l#32#y#0|))
)))
(assert (forall (($o T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o Tclass._System.object? $h@@0)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@0 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o Tclass._System.object? $h@@0))
)))
(assert (= (Ctor LayerTypeType) 9))
(assert (forall ((|l#0@@1| Int) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| T@U) (|l#4@@0| T@U) (|l#5| T@U) (|l#6| T@U) (|l#7| T@U) (|l#8| T@U) (|$l#33#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#57| |l#0@@1| |l#1@@0| |l#2@@0| |l#3@@0| |l#4@@0| |l#5| |l#6| |l#7| |l#8|) |$l#33#ly#0|) (Handle1 (|lambda#53| |$l#33#ly#0| |l#0@@1| |l#1@@0| |l#2@@0| |l#3@@0| |l#4@@0| |l#5| |l#6| |$l#33#ly#0|) |l#7| |l#8|))
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#57| |l#0@@1| |l#1@@0| |l#2@@0| |l#3@@0| |l#4@@0| |l#5| |l#6| |l#7| |l#8|) |$l#33#ly#0|))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((t0@@3 T@U) (t1@@3 T@U) (heap@@0 T@U) (f@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@0 t0@@3) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@3)))) (= (|Set#Equal| (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) ($IsGoodHeap heap@@0))
 :pattern ( (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0))
)))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@15| T@U) (|f#0@@0| T@U) ) (! (= ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|))  (and ($Is HandleTypeType |f#0@@0| (Tclass._System.___hFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) )  (=> (and ($IsBox |x0#0@@0| |#$T0@@15|) ($IsBox |x1#0@@0| |#$T1@@15|)) (|Set#Equal| (Reads2 |#$T0@@15| |#$T1@@15| |#$R@@15| $OneHeap |f#0@@0| |x0#0@@0| |x1#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|)))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((|l#0@@2| T@U) (|l#1@@1| Int) (|l#2@@1| T@U) (|l#3@@1| T@U) (|l#4@@1| T@U) (|l#5@@0| T@U) (|l#6@@0| T@U) (|l#7@@0| T@U) (|l#8@@0| T@U) (|$l#33#heap#0| T@U) (|$l#33#x#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#53| |l#0@@2| |l#1@@1| |l#2@@1| |l#3@@1| |l#4@@1| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0|) |$l#33#heap#0| |$l#33#x#0|) ($Box intType (int_2_U (_module.__default.Sum |l#0@@2| |l#1@@1| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#6| (Handle1 (|lambda#43| |l#2@@1| |l#3@@1| |l#4@@1| |l#5@@0| ($Box intType ($Unbox intType |$l#33#x#0|))) |l#6@@0| |l#7@@0|)) |l#8@@0|))))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#53| |l#0@@2| |l#1@@1| |l#2@@1| |l#3@@1| |l#4@@1| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0|) |$l#33#heap#0| |$l#33#x#0|))
)))
(assert (forall ((v T@U) (t0@@4 T@U) ) (! (= ($Is SetType v (TSet t0@@4)) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v bx@@5) ($IsBox bx@@5 t0@@4))
 :pattern ( (|Set#IsMember| v bx@@5))
)))
 :pattern ( ($Is SetType v (TSet t0@@4)))
)))
(assert (forall ((f@@1 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@1 ly) (MapType1Select LayerTypeType A f@@1 ly))
 :pattern ( (AtLayer A f@@1 ly))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((s T@U) (bx@@6 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@6) (U_2_bool (MapType1Select refType boolType s ($Unbox refType bx@@6))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@6))
)))
(assert (forall ((|#$T0@@16| T@U) (|#$R@@16| T@U) (|f#0@@1| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@16| |#$R@@16|) $h@@1) ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hFunc1 |#$T0@@16| |#$R@@16|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@16| |#$R@@16|) $h@@1))
)))
(assert (forall ((|#$T0@@17| T@U) (|#$R@@17| T@U) (|f#0@@2| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@17| |#$R@@17|) $h@@2) ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@17| |#$R@@17|) $h@@2))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@17| |#$R@@17|) $h@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly T@U) ($Heap T@U) (|n#0| Int) (|f#0@@3| T@U) ) (!  (=> (or (|_module.__default.Sum#canCall| (LitInt |n#0|) |f#0@@3|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) (<= (LitInt 0) |n#0|)) ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc1 TInt TInt))))) (and (=> (or (not (= (LitInt |n#0|) (LitInt 0))) (not true)) (|_module.__default.Sum#canCall| (LitInt (- |n#0| 1)) |f#0@@3|)) (= (_module.__default.Sum ($LS $ly) (LitInt |n#0|) |f#0@@3|) (ite (= (LitInt |n#0|) (LitInt 0)) 0 (+ (U_2_int ($Unbox intType (Apply1 TInt TInt $Heap |f#0@@3| ($Box intType (int_2_U (LitInt (- |n#0| 1))))))) (_module.__default.Sum ($LS $ly) (LitInt (- |n#0| 1)) |f#0@@3|))))))
 :weight 3
 :pattern ( (_module.__default.Sum ($LS $ly) (LitInt |n#0|) |f#0@@3|) ($IsGoodHeap $Heap))
))))
(assert (forall ((t0@@5 T@U) (t1@@4 T@U) (heap@@1 T@U) (h@@1 T@U) (r@@0 T@U) (rd@@0 T@U) (bx0@@1 T@U) ) (! (= (Apply1 t0@@5 t1@@4 heap@@1 (Handle1 h@@1 r@@0 rd@@0) bx0@@1) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType h@@1 heap@@1 bx0@@1))
 :pattern ( (Apply1 t0@@5 t1@@4 heap@@1 (Handle1 h@@1 r@@0 rd@@0) bx0@@1))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object?))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._System.object)))
 :pattern ( ($IsBox bx@@8 Tclass._System.object))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._System.object)  (and ($Is refType |c#0@@0| Tclass._System.object?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object?))
)))
(assert (forall (($ly@@0 T@U) (|n#0@@0| Int) (|f#0@@4| T@U) ) (! (= (_module.__default.Sum ($LS $ly@@0) |n#0@@0| |f#0@@4|) (_module.__default.Sum $ly@@0 |n#0@@0| |f#0@@4|))
 :pattern ( (_module.__default.Sum ($LS $ly@@0) |n#0@@0| |f#0@@4|))
)))
(assert (forall ((f@@2 T@U) (t0@@6 T@U) (t1@@5 T@U) (t2@@0 T@U) (h@@2 T@U) ) (!  (=> ($IsGoodHeap h@@2) (= ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@6 t1@@5 t2@@0) h@@2) (forall ((bx0@@2 T@U) (bx1 T@U) ) (!  (=> (and (and (and ($IsBox bx0@@2 t0@@6) ($IsAllocBox bx0@@2 t0@@6 h@@2)) (and ($IsBox bx1 t1@@5) ($IsAllocBox bx1 t1@@5 h@@2))) (Requires2 t0@@6 t1@@5 t2@@0 h@@2 f@@2 bx0@@2 bx1)) (forall ((r@@1 T@U) ) (!  (=> (and (or (not (= r@@1 null)) (not true)) (|Set#IsMember| (Reads2 t0@@6 t1@@5 t2@@0 h@@2 f@@2 bx0@@2 bx1) ($Box refType r@@1))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@2 r@@1) alloc))))
 :pattern ( (|Set#IsMember| (Reads2 t0@@6 t1@@5 t2@@0 h@@2 f@@2 bx0@@2 bx1) ($Box refType r@@1)))
)))
 :pattern ( (Apply2 t0@@6 t1@@5 t2@@0 h@@2 f@@2 bx0@@2 bx1))
 :pattern ( (Reads2 t0@@6 t1@@5 t2@@0 h@@2 f@@2 bx0@@2 bx1))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@6 t1@@5 t2@@0) h@@2))
)))
(assert (forall ((f@@3 T@U) (t0@@7 T@U) (t1@@6 T@U) (h@@3 T@U) ) (!  (=> (and ($IsGoodHeap h@@3) ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@7 t1@@6) h@@3)) (forall ((bx0@@3 T@U) ) (!  (=> (and ($IsAllocBox bx0@@3 t0@@7 h@@3) (Requires1 t0@@7 t1@@6 h@@3 f@@3 bx0@@3)) ($IsAllocBox (Apply1 t0@@7 t1@@6 h@@3 f@@3 bx0@@3) t1@@6 h@@3))
 :pattern ( (Apply1 t0@@7 t1@@6 h@@3 f@@3 bx0@@3))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@7 t1@@6) h@@3))
)))
(assert (forall ((|l#0@@3| Bool) (|$l#9#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#4| |l#0@@3|) |$l#9#o#0|)) |l#0@@3|)
 :pattern ( (MapType1Select refType boolType (|lambda#4| |l#0@@3|) |$l#9#o#0|))
)))
(assert (forall ((|l#0@@4| T@U) (|$l#9#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#6| |l#0@@4|) |$l#9#ly#0|) |l#0@@4|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#6| |l#0@@4|) |$l#9#ly#0|))
)))
(assert (forall ((f@@4 T@U) (t0@@8 T@U) (t1@@7 T@U) (t2@@1 T@U) ) (! (= ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 t0@@8 t1@@7 t2@@1)) (forall ((h@@4 T@U) (bx0@@4 T@U) (bx1@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@4) (and ($IsBox bx0@@4 t0@@8) ($IsBox bx1@@0 t1@@7))) (Requires2 t0@@8 t1@@7 t2@@1 h@@4 f@@4 bx0@@4 bx1@@0)) ($IsBox (Apply2 t0@@8 t1@@7 t2@@1 h@@4 f@@4 bx0@@4 bx1@@0) t2@@1))
 :pattern ( (Apply2 t0@@8 t1@@7 t2@@1 h@@4 f@@4 bx0@@4 bx1@@0))
)))
 :pattern ( ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 t0@@8 t1@@7 t2@@1)))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((t0@@9 T@U) (t1@@8 T@U) (t2@@2 T@U) (heap@@2 T@U) (f@@5 T@U) (bx0@@5 T@U) (bx1@@1 T@U) ) (!  (=> (and ($IsGoodHeap heap@@2) (and (and ($IsBox bx0@@5 t0@@9) ($IsBox bx1@@1 t1@@8)) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 t0@@9 t1@@8 t2@@2)))) (= (|Set#Equal| (Reads2 t0@@9 t1@@8 t2@@2 $OneHeap f@@5 bx0@@5 bx1@@1) |Set#Empty|) (|Set#Equal| (Reads2 t0@@9 t1@@8 t2@@2 heap@@2 f@@5 bx0@@5 bx1@@1) |Set#Empty|)))
 :pattern ( (Reads2 t0@@9 t1@@8 t2@@2 $OneHeap f@@5 bx0@@5 bx1@@1) ($IsGoodHeap heap@@2))
 :pattern ( (Reads2 t0@@9 t1@@8 t2@@2 heap@@2 f@@5 bx0@@5 bx1@@1))
)))
(assert (forall ((f@@6 T@U) (t0@@10 T@U) (t1@@9 T@U) ) (! (= ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@10 t1@@9)) (forall ((h@@5 T@U) (bx0@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@5) ($IsBox bx0@@6 t0@@10)) (Requires1 t0@@10 t1@@9 h@@5 f@@6 bx0@@6)) ($IsBox (Apply1 t0@@10 t1@@9 h@@5 f@@6 bx0@@6) t1@@9))
 :pattern ( (Apply1 t0@@10 t1@@9 h@@5 f@@6 bx0@@6))
)))
 :pattern ( ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@10 t1@@9)))
)))
(assert (forall ((f@@7 T@U) (t0@@11 T@U) (t1@@10 T@U) (t2@@3 T@U) (h@@6 T@U) ) (!  (=> (and ($IsGoodHeap h@@6) ($IsAlloc HandleTypeType f@@7 (Tclass._System.___hFunc2 t0@@11 t1@@10 t2@@3) h@@6)) (forall ((bx0@@7 T@U) (bx1@@2 T@U) ) (!  (=> (and (and ($IsAllocBox bx0@@7 t0@@11 h@@6) ($IsAllocBox bx1@@2 t1@@10 h@@6)) (Requires2 t0@@11 t1@@10 t2@@3 h@@6 f@@7 bx0@@7 bx1@@2)) ($IsAllocBox (Apply2 t0@@11 t1@@10 t2@@3 h@@6 f@@7 bx0@@7 bx1@@2) t2@@3 h@@6))
 :pattern ( (Apply2 t0@@11 t1@@10 t2@@3 h@@6 f@@7 bx0@@7 bx1@@2))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@7 (Tclass._System.___hFunc2 t0@@11 t1@@10 t2@@3) h@@6))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 TInt) (and (= ($Box intType ($Unbox intType bx@@9)) bx@@9) ($Is intType ($Unbox intType bx@@9) TInt)))
 :pattern ( ($IsBox bx@@9 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((t0@@12 T@U) (t1@@11 T@U) (heap@@3 T@U) (h@@7 T@U) (r@@2 T@U) (rd@@1 T@U) (bx0@@8 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType r@@2 heap@@3 bx0@@8)) (Requires1 t0@@12 t1@@11 heap@@3 (Handle1 h@@7 r@@2 rd@@1) bx0@@8))
 :pattern ( (Requires1 t0@@12 t1@@11 heap@@3 (Handle1 h@@7 r@@2 rd@@1) bx0@@8))
)))
(assert (forall ((v@@2 T@U) (t0@@13 T@U) (h@@8 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@13) h@@8) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@10) ($IsAllocBox bx@@10 t0@@13 h@@8))
 :pattern ( (|Set#IsMember| v@@2 bx@@10))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@13) h@@8))
)))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@18| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@18|)) |#$T0@@18|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@18|))
)))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@19| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@19|)) |#$R@@19|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@19|))
)))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@20| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@20| |#$R@@20|)) |#$T0@@20|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@20| |#$R@@20|))
)))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@21| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@21| |#$R@@21|)) |#$R@@21|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@21| |#$R@@21|))
)))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@22| T@U) ) (! (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@22| |#$R@@22|)) |#$T0@@22|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@22| |#$R@@22|))
)))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@23| T@U) ) (! (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@23| |#$R@@23|)) |#$R@@23|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@23| |#$R@@23|))
)))
(assert (forall (($o@@0 T@U) ) (! ($Is refType $o@@0 Tclass._System.object?)
 :pattern ( ($Is refType $o@@0 Tclass._System.object?))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((t0@@14 T@U) (t1@@12 T@U) (t2@@4 T@U) (heap@@4 T@U) (f@@8 T@U) (bx0@@9 T@U) (bx1@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@4) (and (and ($IsBox bx0@@9 t0@@14) ($IsBox bx1@@3 t1@@12)) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc2 t0@@14 t1@@12 t2@@4)))) (|Set#Equal| (Reads2 t0@@14 t1@@12 t2@@4 $OneHeap f@@8 bx0@@9 bx1@@3) |Set#Empty|)) (= (Requires2 t0@@14 t1@@12 t2@@4 $OneHeap f@@8 bx0@@9 bx1@@3) (Requires2 t0@@14 t1@@12 t2@@4 heap@@4 f@@8 bx0@@9 bx1@@3)))
 :pattern ( (Requires2 t0@@14 t1@@12 t2@@4 $OneHeap f@@8 bx0@@9 bx1@@3) ($IsGoodHeap heap@@4))
 :pattern ( (Requires2 t0@@14 t1@@12 t2@@4 heap@@4 f@@8 bx0@@9 bx1@@3))
)))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@24| T@U) (|f#0@@5| T@U) ) (! (= ($Is HandleTypeType |f#0@@5| (Tclass._System.___hTotalFunc1 |#$T0@@24| |#$R@@24|))  (and ($Is HandleTypeType |f#0@@5| (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@24|)) (forall ((|x0#0@@1| T@U) )  (=> ($IsBox |x0#0@@1| |#$T0@@24|) (Requires1 |#$T0@@24| |#$R@@24| $OneHeap |f#0@@5| |x0#0@@1|)))))
 :pattern ( ($Is HandleTypeType |f#0@@5| (Tclass._System.___hTotalFunc1 |#$T0@@24| |#$R@@24|)))
)))
(assert (forall ((f@@9 T@U) (t0@@15 T@U) (t1@@13 T@U) (t2@@5 T@U) (u0@@3 T@U) (u1@@3 T@U) (u2@@1 T@U) ) (!  (=> (and (and (and ($Is HandleTypeType f@@9 (Tclass._System.___hFunc2 t0@@15 t1@@13 t2@@5)) (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 u0@@3) ($IsBox bx@@11 t0@@15))
 :pattern ( ($IsBox bx@@11 u0@@3))
 :pattern ( ($IsBox bx@@11 t0@@15))
))) (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 u1@@3) ($IsBox bx@@12 t1@@13))
 :pattern ( ($IsBox bx@@12 u1@@3))
 :pattern ( ($IsBox bx@@12 t1@@13))
))) (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 t2@@5) ($IsBox bx@@13 u2@@1))
 :pattern ( ($IsBox bx@@13 t2@@5))
 :pattern ( ($IsBox bx@@13 u2@@1))
))) ($Is HandleTypeType f@@9 (Tclass._System.___hFunc2 u0@@3 u1@@3 u2@@1)))
 :pattern ( ($Is HandleTypeType f@@9 (Tclass._System.___hFunc2 t0@@15 t1@@13 t2@@5)) ($Is HandleTypeType f@@9 (Tclass._System.___hFunc2 u0@@3 u1@@3 u2@@1)))
)))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@25| T@U) (|f#0@@6| T@U) ) (! (= ($Is HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@25|))  (and ($Is HandleTypeType |f#0@@6| (Tclass._System.___hFunc1 |#$T0@@25| |#$R@@25|)) (forall ((|x0#0@@2| T@U) )  (=> ($IsBox |x0#0@@2| |#$T0@@25|) (|Set#Equal| (Reads1 |#$T0@@25| |#$R@@25| $OneHeap |f#0@@6| |x0#0@@2|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@25|)))
)))
(assert (forall ((f@@10 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@10 ($LS ly@@0)) (AtLayer A@@0 f@@10 ly@@0))
 :pattern ( (AtLayer A@@0 f@@10 ($LS ly@@0)))
)))
(assert (forall ((f@@11 T@U) (t0@@16 T@U) (t1@@14 T@U) (h@@9 T@U) ) (!  (=> ($IsGoodHeap h@@9) (= ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@16 t1@@14) h@@9) (forall ((bx0@@10 T@U) ) (!  (=> (and (and ($IsBox bx0@@10 t0@@16) ($IsAllocBox bx0@@10 t0@@16 h@@9)) (Requires1 t0@@16 t1@@14 h@@9 f@@11 bx0@@10)) (forall ((r@@3 T@U) ) (!  (=> (and (or (not (= r@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@16 t1@@14 h@@9 f@@11 bx0@@10) ($Box refType r@@3))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@9 r@@3) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@16 t1@@14 h@@9 f@@11 bx0@@10) ($Box refType r@@3)))
)))
 :pattern ( (Apply1 t0@@16 t1@@14 h@@9 f@@11 bx0@@10))
 :pattern ( (Reads1 t0@@16 t1@@14 h@@9 f@@11 bx0@@10))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@16 t1@@14) h@@9))
)))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@26| T@U) (bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@26|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@14)) bx@@14) ($Is HandleTypeType ($Unbox HandleTypeType bx@@14) (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@26|))))
 :pattern ( ($IsBox bx@@14 (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@26|)))
)))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@27| T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@27|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@15)) bx@@15) ($Is HandleTypeType ($Unbox HandleTypeType bx@@15) (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@27|))))
 :pattern ( ($IsBox bx@@15 (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@27|)))
)))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@28| T@U) (bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@28|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@16)) bx@@16) ($Is HandleTypeType ($Unbox HandleTypeType bx@@16) (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@28|))))
 :pattern ( ($IsBox bx@@16 (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@28|)))
)))
(assert (forall ((|l#0@@5| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@5| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0@@5|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@2| $o@@1) |l#2@@2|)))) |l#3@@2|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@5| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@1 $f))
)))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@7| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@29| |#$T1@@16| |#$R@@29|) $h@@3) ($IsAlloc HandleTypeType |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@29| |#$T1@@16| |#$R@@29|) $h@@3))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@29| |#$T1@@16| |#$R@@29|) $h@@3))
)))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@8| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@8| (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@17| |#$R@@30|) $h@@4) ($IsAlloc HandleTypeType |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@30| |#$T1@@17| |#$R@@30|) $h@@4))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@8| (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@17| |#$R@@30|) $h@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@1 T@U) ($Heap@@0 T@U) (|n#0@@1| Int) (|f#0@@9| T@U) ) (!  (=> (or (|_module.__default.Sum#canCall| (LitInt |n#0@@1|) (Lit HandleTypeType |f#0@@9|)) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@0) (<= (LitInt 0) |n#0@@1|)) ($Is HandleTypeType |f#0@@9| (Tclass._System.___hTotalFunc1 TInt TInt))))) (and (=> (or (not (= (LitInt |n#0@@1|) (LitInt 0))) (not true)) (|_module.__default.Sum#canCall| (LitInt (- |n#0@@1| 1)) (Lit HandleTypeType |f#0@@9|))) (= (_module.__default.Sum ($LS $ly@@1) (LitInt |n#0@@1|) (Lit HandleTypeType |f#0@@9|)) (ite (= (LitInt |n#0@@1|) (LitInt 0)) 0 (+ (U_2_int ($Unbox intType (Apply1 TInt TInt $Heap@@0 (Lit HandleTypeType |f#0@@9|) ($Box intType (int_2_U (LitInt (- |n#0@@1| 1))))))) (_module.__default.Sum ($LS $ly@@1) (LitInt (- |n#0@@1| 1)) (Lit HandleTypeType |f#0@@9|)))))))
 :weight 3
 :pattern ( (_module.__default.Sum ($LS $ly@@1) (LitInt |n#0@@1|) (Lit HandleTypeType |f#0@@9|)) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@31| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@31| |#$R@@31|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@31| |#$R@@31|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@31| |#$R@@31|))
)))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@32| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@32|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@32|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@32|))
)))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@33| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@33|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@33|)) |tytagFamily$_#TotalFunc1|))
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@33|))
)))
(assert (forall ((t0@@17 T@U) (t1@@15 T@U) (heap@@5 T@U) (f@@12 T@U) (bx0@@11 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@11 t0@@17) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@17 t1@@15)))) (|Set#Equal| (Reads1 t0@@17 t1@@15 $OneHeap f@@12 bx0@@11) |Set#Empty|)) (= (Requires1 t0@@17 t1@@15 $OneHeap f@@12 bx0@@11) (Requires1 t0@@17 t1@@15 heap@@5 f@@12 bx0@@11)))
 :pattern ( (Requires1 t0@@17 t1@@15 $OneHeap f@@12 bx0@@11) ($IsGoodHeap heap@@5))
 :pattern ( (Requires1 t0@@17 t1@@15 heap@@5 f@@12 bx0@@11))
)))
(assert (forall ((bx@@17 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@17 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@17)) bx@@17) ($Is SetType ($Unbox SetType bx@@17) (TSet t@@3))))
 :pattern ( ($IsBox bx@@17 (TSet t@@3)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Equal| a@@0 b@@0) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@0 o@@0) (|Set#IsMember| b@@0 o@@0))
 :pattern ( (|Set#IsMember| a@@0 o@@0))
 :pattern ( (|Set#IsMember| b@@0 o@@0))
)))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@2 T@U) ($Heap@@1 T@U) (|n#0@@2| Int) (|f#0@@10| T@U) ) (!  (=> (or (|_module.__default.Sum#canCall| |n#0@@2| |f#0@@10|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) (<= (LitInt 0) |n#0@@2|)) ($Is HandleTypeType |f#0@@10| (Tclass._System.___hTotalFunc1 TInt TInt))))) (and (=> (or (not (= |n#0@@2| (LitInt 0))) (not true)) (|_module.__default.Sum#canCall| (- |n#0@@2| 1) |f#0@@10|)) (= (_module.__default.Sum ($LS $ly@@2) |n#0@@2| |f#0@@10|) (ite (= |n#0@@2| (LitInt 0)) 0 (+ (U_2_int ($Unbox intType (Apply1 TInt TInt $Heap@@1 |f#0@@10| ($Box intType (int_2_U (- |n#0@@2| 1)))))) (_module.__default.Sum $ly@@2 (- |n#0@@2| 1) |f#0@@10|))))))
 :pattern ( (_module.__default.Sum ($LS $ly@@2) |n#0@@2| |f#0@@10|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((h@@10 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@10)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@10))
)))
(assert (forall ((|l#0@@6| T@U) (|$l#9#heap#0@@0| T@U) (|$l#9#x#0@@0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#5| |l#0@@6|) |$l#9#heap#0@@0| |$l#9#x#0@@0|) |l#0@@6|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#5| |l#0@@6|) |$l#9#heap#0@@0| |$l#9#x#0@@0|))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@2 () T@U)
(declare-fun $LZ () T@U)
(declare-fun |n#0@@3| () Int)
(declare-fun |g#0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@2 alloc false)) (= (ControlFlow 0 2) (- 0 1))) (= (_module.__default.Sum ($LS ($LS $LZ)) |n#0@@3| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#57| |n#0@@3| TInt TInt TInt |g#0| (|lambda#3| TInt) (|lambda#5| (SetRef_to_SetBox (|lambda#4| false))) (|lambda#3| TInt) (|lambda#5| (SetRef_to_SetBox (|lambda#4| false)))) ($LS $LZ)))) (_module.__default.Sum ($LS ($LS $LZ)) |n#0@@3| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#57| |n#0@@3| TInt TInt TInt |g#0| (|lambda#3| TInt) (|lambda#5| (SetRef_to_SetBox (|lambda#4| false))) (|lambda#3| TInt) (|lambda#5| (SetRef_to_SetBox (|lambda#4| false)))) ($LS $LZ))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (<= (LitInt 0) |n#0@@3|)) (and (and ($Is HandleTypeType |g#0| (Tclass._System.___hTotalFunc2 TInt TInt TInt)) ($IsAlloc HandleTypeType |g#0| (Tclass._System.___hTotalFunc2 TInt TInt TInt) $Heap@@2)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 3) 2)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
