(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun MapType0Select (T@T T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun |lambda#7| () T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@T T@T T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |lambda#17| (Int) T@U)
(declare-fun Div (Int Int) Int)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |lambda#8| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |lambda#12| (Int) T@U)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun |lambda#22| (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun |lambda#24| (T@U) T@U)
(declare-fun |lambda#27| (T@U T@U Int) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |lambda#23| (T@U T@U Int Int) T@U)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $OneHeap () T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType2Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#9| (Bool) T@U)
(declare-fun |lambda#11| (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |lambda#18| (T@U T@U Int) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun |lambda#10| (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc Tagclass._System.object? Tagclass._System.object Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc2 tytagFamily$object tytagFamily$array |tytagFamily$_#Func2|)
)
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (t3 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) (x2 T@U) ) (! (= (MapType0Select t0 t1 t2 t3 (MapType0Store t0 t1 t2 t3 m x0 x1 x2 val) x0 x1 x2) val)
 :weight 0
)) (and (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (u3 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 u3 (MapType0Store u0 u1 u2 u3 m@@0 x0@@0 x1@@0 x2@@0 val@@0) y0 y1 y2) (MapType0Select u0 u1 u2 u3 m@@0 y0 y1 y2)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (u3@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 u3@@0 (MapType0Store u0@@0 u1@@0 u2@@0 u3@@0 m@@1 x0@@1 x1@@1 x2@@1 val@@1) y0@@0 y1@@0 y2@@0) (MapType0Select u0@@0 u1@@0 u2@@0 u3@@0 m@@1 y0@@0 y1@@0 y2@@0)))
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@1 T@T) (u3@@1 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType0Select u0@@1 u1@@1 u2@@1 u3@@1 (MapType0Store u0@@1 u1@@1 u2@@1 u3@@1 m@@2 x0@@2 x1@@2 x2@@2 val@@2) y0@@1 y1@@1 y2@@1) (MapType0Select u0@@1 u1@@1 u2@@1 u3@@1 m@@2 y0@@1 y1@@1 y2@@1)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@3 x0@@3 val@@3) x0@@3) val@@3)
 :weight 0
))) (forall ((u0@@2 T@T) (u1@@2 T@T) (val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select u0@@2 u1@@2 (MapType1Store u0@@2 u1@@2 m@@4 x0@@4 val@@4) y0@@2) (MapType1Select u0@@2 u1@@2 m@@4 y0@@2)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 3))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)))
(assert (forall ((|$l#1#heap#0| T@U) (|$l#1#i#0| T@U) (|$l#1#_v0#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType |lambda#7| |$l#1#heap#0| |$l#1#i#0| |$l#1#_v0#0|) ($Box intType ($Unbox intType |$l#1#i#0|)))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType |lambda#7| |$l#1#heap#0| |$l#1#i#0| |$l#1#_v0#0|))
)))
(assert (forall ((|l#0| Int) (|$l#5#heap#0| T@U) (|$l#5#_v2#0| T@U) (|$l#5#x#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#17| |l#0|) |$l#5#heap#0| |$l#5#_v2#0| |$l#5#x#0|) ($Box intType (int_2_U (Div |l#0| (U_2_int ($Unbox intType |$l#5#x#0|))))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#17| |l#0|) |$l#5#heap#0| |$l#5#_v2#0| |$l#5#x#0|))
)))
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1| T@U) (|$l#1#heap#0@@0| T@U) (|$l#1#i#0@@0| T@U) (|$l#1#_v0#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#8| |l#0@@0| |l#1|) |$l#1#heap#0@@0| |$l#1#i#0@@0| |$l#1#_v0#0@@0|))  (and ($IsBox |$l#1#i#0@@0| |l#0@@0|) ($IsBox |$l#1#_v0#0@@0| |l#1|)))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#8| |l#0@@0| |l#1|) |$l#1#heap#0@@0| |$l#1#i#0@@0| |$l#1#_v0#0@@0|))
)))
(assert (forall ((|l#0@@1| Int) (|$l#3#heap#0| T@U) (|$l#3#_v1#0| T@U) (|$l#3#x#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#12| |l#0@@1|) |$l#3#heap#0| |$l#3#_v1#0| |$l#3#x#0|) ($Box intType (int_2_U (+ (U_2_int ($Unbox intType |$l#3#x#0|)) |l#0@@1|))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#12| |l#0@@1|) |$l#3#heap#0| |$l#3#_v1#0| |$l#3#x#0|))
)))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|)) |#$T1@@0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|)) |#$R@@1|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|))
)))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) |tytagFamily$_#Func2|))
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|))
)))
(assert (= (Ctor HandleTypeType) 7))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@3| T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx)) bx) ($Is HandleTypeType ($Unbox HandleTypeType bx) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|))))
 :pattern ( ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@0) ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@0))
)))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@1))
)))
(assert (forall (($o@@1 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._System.object? $h@@2)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@2 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._System.object? $h@@2))
)))
(assert (forall ((|l#0@@2| T@U) (|$l#7#heap#0| T@U) (|$l#7#i#0| T@U) (|$l#7#_v3#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#22| |l#0@@2|) |$l#7#heap#0| |$l#7#i#0| |$l#7#_v3#0|) ($Box intType ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$l#7#heap#0| |l#0@@2|) (IndexField (U_2_int ($Unbox intType |$l#7#i#0|)))))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#22| |l#0@@2|) |$l#7#heap#0| |$l#7#i#0| |$l#7#_v3#0|))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((|l#0@@3| T@U) (|$l#7#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#24| |l#0@@3|) |$l#7#o#0|)) (= |$l#7#o#0| |l#0@@3|))
 :pattern ( (MapType1Select refType boolType (|lambda#24| |l#0@@3|) |$l#7#o#0|))
)))
(assert (forall ((|l#0@@4| T@U) (|l#1@@0| T@U) (|l#2| Int) (|$l#9#heap#0| T@U) (|$l#9#i#0| T@U) (|$l#9#_v4#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#27| |l#0@@4| |l#1@@0| |l#2|) |$l#9#heap#0| |$l#9#i#0| |$l#9#_v4#0|) ($Box intType (int_2_U (+ (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$l#9#heap#0| |l#0@@4|) (IndexField (U_2_int ($Unbox intType |$l#9#i#0|)))))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$l#9#heap#0| |l#1@@0|) (IndexField (+ (U_2_int ($Unbox intType |$l#9#i#0|)) |l#2|)))))))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#27| |l#0@@4| |l#1@@0| |l#2|) |$l#9#heap#0| |$l#9#i#0| |$l#9#_v4#0|))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((|l#0@@5| T@U) (|l#1@@1| T@U) (|l#2@@0| Int) (|l#3| Int) (|$l#7#heap#0@@0| T@U) (|$l#7#i#0@@0| T@U) (|$l#7#_v3#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#23| |l#0@@5| |l#1@@1| |l#2@@0| |l#3|) |$l#7#heap#0@@0| |$l#7#i#0@@0| |$l#7#_v3#0@@0|))  (and (and ($IsBox |$l#7#i#0@@0| |l#0@@5|) ($IsBox |$l#7#_v3#0@@0| |l#1@@1|)) (and (<= |l#2@@0| (U_2_int ($Unbox intType |$l#7#i#0@@0|))) (< (U_2_int ($Unbox intType |$l#7#i#0@@0|)) |l#3|))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#23| |l#0@@5| |l#1@@1| |l#2@@0| |l#3|) |$l#7#heap#0@@0| |$l#7#i#0@@0| |$l#7#_v3#0@@0|))
)))
(assert (= (Ctor SetType) 8))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (t2@@0 T@U) (heap T@U) (h@@0 T@U) (r T@U) (rd T@U) (bx0 T@U) (bx1 T@U) (bx@@0 T@U) ) (! (= (|Set#IsMember| (Reads2 t0@@1 t1@@1 t2@@0 heap (Handle2 h@@0 r rd) bx0 bx1) bx@@0) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType SetType rd heap bx0 bx1) bx@@0))
 :pattern ( (|Set#IsMember| (Reads2 t0@@1 t1@@1 t2@@0 heap (Handle2 h@@0 r rd) bx0 bx1) bx@@0))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@2)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@3 $o@@2) alloc)))) ($IsAllocBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@3 $o@@2) (IndexField $i0)) _System.array$arg@@2 $h@@3))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@3 $o@@2) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t0@@2 T@U) ) (! (= ($Is SetType v (TSet t0@@2)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v bx@@1) ($IsBox bx@@1 t0@@2))
 :pattern ( (|Set#IsMember| v bx@@1))
)))
 :pattern ( ($Is SetType v (TSet t0@@2)))
)))
(assert (= (Ctor LayerTypeType) 9))
(assert (forall ((f T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f ly) (MapType1Select LayerTypeType A f ly))
 :pattern ( (AtLayer A f ly))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@1 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@1) ($IsAlloc T@@1 v@@0 t h@@1))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@1))
)))
(assert (forall ((t0@@3 T@U) (t1@@2 T@U) (t2@@1 T@U) (heap@@0 T@U) (h@@2 T@U) (r@@0 T@U) (rd@@0 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (! (= (Apply2 t0@@3 t1@@2 t2@@1 heap@@0 (Handle2 h@@2 r@@0 rd@@0) bx0@@0 bx1@@0) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType h@@2 heap@@0 bx0@@0 bx1@@0))
 :pattern ( (Apply2 t0@@3 t1@@2 t2@@1 heap@@0 (Handle2 h@@2 r@@0 rd@@0) bx0@@0 bx1@@0))
)))
(assert (forall ((h@@3 T@U) (k@@0 T@U) (bx@@2 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@3 k@@0) (=> ($IsAllocBox bx@@2 t@@0 h@@3) ($IsAllocBox bx@@2 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@3 k@@0) ($IsAllocBox bx@@2 t@@0 h@@3))
)))
(assert (forall ((h@@4 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@4 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@4) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@4 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@4))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert  (and (forall ((t0@@4 T@T) (t1@@3 T@T) (t2@@2 T@T) (val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@3 T@U) ) (! (= (MapType2Select t0@@4 t1@@3 t2@@2 (MapType2Store t0@@4 t1@@3 t2@@2 m@@5 x0@@5 x1@@3 val@@5) x0@@5 x1@@3) val@@5)
 :weight 0
)) (and (forall ((u0@@3 T@T) (u1@@3 T@T) (u2@@2 T@T) (val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@4 T@U) (y0@@3 T@U) (y1@@2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select u0@@3 u1@@3 u2@@2 (MapType2Store u0@@3 u1@@3 u2@@2 m@@6 x0@@6 x1@@4 val@@6) y0@@3 y1@@2) (MapType2Select u0@@3 u1@@3 u2@@2 m@@6 y0@@3 y1@@2)))
 :weight 0
)) (forall ((u0@@4 T@T) (u1@@4 T@T) (u2@@3 T@T) (val@@7 T@U) (m@@7 T@U) (x0@@7 T@U) (x1@@5 T@U) (y0@@4 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType2Select u0@@4 u1@@4 u2@@3 (MapType2Store u0@@4 u1@@4 u2@@3 m@@7 x0@@7 x1@@5 val@@7) y0@@4 y1@@3) (MapType2Select u0@@4 u1@@4 u2@@3 m@@7 y0@@4 y1@@3)))
 :weight 0
)))))
(assert (forall ((|l#0@@6| T@U) (|l#1@@2| T@U) (|l#2@@1| T@U) (|l#3@@0| T@U) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType2Select refType FieldType boolType (|lambda#0| |l#0@@6| |l#1@@2| |l#2@@1| |l#3@@0|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0@@6|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@2| $o@@3) |l#2@@1|)))) (= $o@@3 |l#3@@0|)))
 :pattern ( (MapType2Select refType FieldType boolType (|lambda#0| |l#0@@6| |l#1@@2| |l#2@@1| |l#3@@0|) $o@@3 $f))
)))
(assert (forall ((s T@U) (bx@@3 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@3) (U_2_bool (MapType1Select refType boolType s ($Unbox refType bx@@3))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@3))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@4 Tclass._System.object?))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._System.object)))
 :pattern ( ($IsBox bx@@5 Tclass._System.object))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@4 T@U) ) (! (= ($Is refType $o@@4 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@4 null) (= (dtype $o@@4) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@4 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((f@@0 T@U) (t0@@5 T@U) (t1@@4 T@U) (t2@@3 T@U) (h@@5 T@U) ) (!  (=> ($IsGoodHeap h@@5) (= ($IsAlloc HandleTypeType f@@0 (Tclass._System.___hFunc2 t0@@5 t1@@4 t2@@3) h@@5) (forall ((bx0@@1 T@U) (bx1@@1 T@U) ) (!  (=> (and (and (and ($IsBox bx0@@1 t0@@5) ($IsAllocBox bx0@@1 t0@@5 h@@5)) (and ($IsBox bx1@@1 t1@@4) ($IsAllocBox bx1@@1 t1@@4 h@@5))) (Requires2 t0@@5 t1@@4 t2@@3 h@@5 f@@0 bx0@@1 bx1@@1)) (forall ((r@@1 T@U) ) (!  (=> (and (or (not (= r@@1 null)) (not true)) (|Set#IsMember| (Reads2 t0@@5 t1@@4 t2@@3 h@@5 f@@0 bx0@@1 bx1@@1) ($Box refType r@@1))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@5 r@@1) alloc))))
 :pattern ( (|Set#IsMember| (Reads2 t0@@5 t1@@4 t2@@3 h@@5 f@@0 bx0@@1 bx1@@1) ($Box refType r@@1)))
)))
 :pattern ( (Apply2 t0@@5 t1@@4 t2@@3 h@@5 f@@0 bx0@@1 bx1@@1))
 :pattern ( (Reads2 t0@@5 t1@@4 t2@@3 h@@5 f@@0 bx0@@1 bx1@@1))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@0 (Tclass._System.___hFunc2 t0@@5 t1@@4 t2@@3) h@@5))
)))
(assert (forall ((|l#0@@7| Bool) (|$l#1#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#9| |l#0@@7|) |$l#1#o#0|)) |l#0@@7|)
 :pattern ( (MapType1Select refType boolType (|lambda#9| |l#0@@7|) |$l#1#o#0|))
)))
(assert (forall ((|l#0@@8| T@U) (|$l#1#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#11| |l#0@@8|) |$l#1#ly#0|) |l#0@@8|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#11| |l#0@@8|) |$l#1#ly#0|))
)))
(assert (forall ((f@@1 T@U) (t0@@6 T@U) (t1@@5 T@U) (t2@@4 T@U) ) (! (= ($Is HandleTypeType f@@1 (Tclass._System.___hFunc2 t0@@6 t1@@5 t2@@4)) (forall ((h@@6 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@6) (and ($IsBox bx0@@2 t0@@6) ($IsBox bx1@@2 t1@@5))) (Requires2 t0@@6 t1@@5 t2@@4 h@@6 f@@1 bx0@@2 bx1@@2)) ($IsBox (Apply2 t0@@6 t1@@5 t2@@4 h@@6 f@@1 bx0@@2 bx1@@2) t2@@4))
 :pattern ( (Apply2 t0@@6 t1@@5 t2@@4 h@@6 f@@1 bx0@@2 bx1@@2))
)))
 :pattern ( ($Is HandleTypeType f@@1 (Tclass._System.___hFunc2 t0@@6 t1@@5 t2@@4)))
)))
(assert (forall ((x@@5 Int) (y Int) ) (! (= (Div x@@5 y) (div x@@5 y))
 :pattern ( (Div x@@5 y))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((t0@@7 T@U) (t1@@6 T@U) (t2@@5 T@U) (heap@@1 T@U) (f@@2 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and ($IsGoodHeap heap@@1) (and (and ($IsBox bx0@@3 t0@@7) ($IsBox bx1@@3 t1@@6)) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@7 t1@@6 t2@@5)))) (= (|Set#Equal| (Reads2 t0@@7 t1@@6 t2@@5 $OneHeap f@@2 bx0@@3 bx1@@3) |Set#Empty|) (|Set#Equal| (Reads2 t0@@7 t1@@6 t2@@5 heap@@1 f@@2 bx0@@3 bx1@@3) |Set#Empty|)))
 :pattern ( (Reads2 t0@@7 t1@@6 t2@@5 $OneHeap f@@2 bx0@@3 bx1@@3) ($IsGoodHeap heap@@1))
 :pattern ( (Reads2 t0@@7 t1@@6 t2@@5 heap@@1 f@@2 bx0@@3 bx1@@3))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@3 T@U) (t0@@8 T@U) (t1@@7 T@U) (t2@@6 T@U) (h@@7 T@U) ) (!  (=> (and ($IsGoodHeap h@@7) ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@8 t1@@7 t2@@6) h@@7)) (forall ((bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and ($IsAllocBox bx0@@4 t0@@8 h@@7) ($IsAllocBox bx1@@4 t1@@7 h@@7)) (Requires2 t0@@8 t1@@7 t2@@6 h@@7 f@@3 bx0@@4 bx1@@4)) ($IsAllocBox (Apply2 t0@@8 t1@@7 t2@@6 h@@7 f@@3 bx0@@4 bx1@@4) t2@@6 h@@7))
 :pattern ( (Apply2 t0@@8 t1@@7 t2@@6 h@@7 f@@3 bx0@@4 bx1@@4))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@8 t1@@7 t2@@6) h@@7))
)))
(assert (forall ((|l#0@@9| T@U) (|l#1@@3| T@U) (|l#2@@2| Int) (|$l#5#heap#0@@0| T@U) (|$l#5#_v2#0@@0| T@U) (|$l#5#x#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#18| |l#0@@9| |l#1@@3| |l#2@@2|) |$l#5#heap#0@@0| |$l#5#_v2#0@@0| |$l#5#x#0@@0|))  (and (and ($IsBox |$l#5#_v2#0@@0| |l#0@@9|) ($IsBox |$l#5#x#0@@0| |l#1@@3|)) (or (not (= (U_2_int ($Unbox intType |$l#5#x#0@@0|)) |l#2@@2|)) (not true))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#18| |l#0@@9| |l#1@@3| |l#2@@2|) |$l#5#heap#0@@0| |$l#5#_v2#0@@0| |$l#5#x#0@@0|))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 TInt) (and (= ($Box intType ($Unbox intType bx@@6)) bx@@6) ($Is intType ($Unbox intType bx@@6) TInt)))
 :pattern ( ($IsBox bx@@6 TInt))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((o@@1 T@U) ) (! (<= 0 (_System.array.Length o@@1))
 :pattern ( (_System.array.Length o@@1))
)))
(assert (forall ((v@@3 T@U) (t0@@9 T@U) (h@@8 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@9) h@@8) (forall ((bx@@7 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@7) ($IsAllocBox bx@@7 t0@@9 h@@8))
 :pattern ( (|Set#IsMember| v@@3 bx@@7))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@9) h@@8))
)))
(assert (forall (($o@@5 T@U) ) (! ($Is refType $o@@5 Tclass._System.object?)
 :pattern ( ($Is refType $o@@5 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((i Int) ) (! (= (FDim (IndexField i)) 1)
 :pattern ( (IndexField i))
)))
(assert (forall ((i@@0 Int) ) (! (= (IndexField_Inverse (IndexField i@@0)) i@@0)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert (forall ((t0@@10 T@U) (t1@@8 T@U) (t2@@7 T@U) (heap@@2 T@U) (f@@4 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@2) (and (and ($IsBox bx0@@5 t0@@10) ($IsBox bx1@@5 t1@@8)) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 t0@@10 t1@@8 t2@@7)))) (|Set#Equal| (Reads2 t0@@10 t1@@8 t2@@7 $OneHeap f@@4 bx0@@5 bx1@@5) |Set#Empty|)) (= (Requires2 t0@@10 t1@@8 t2@@7 $OneHeap f@@4 bx0@@5 bx1@@5) (Requires2 t0@@10 t1@@8 t2@@7 heap@@2 f@@4 bx0@@5 bx1@@5)))
 :pattern ( (Requires2 t0@@10 t1@@8 t2@@7 $OneHeap f@@4 bx0@@5 bx1@@5) ($IsGoodHeap heap@@2))
 :pattern ( (Requires2 t0@@10 t1@@8 t2@@7 heap@@2 f@@4 bx0@@5 bx1@@5))
)))
(assert (forall ((|l#0@@10| T@U) (|$l#1#heap#0@@1| T@U) (|$l#1#i#0@@1| T@U) (|$l#1#_v0#0@@1| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType SetType (|lambda#10| |l#0@@10|) |$l#1#heap#0@@1| |$l#1#i#0@@1| |$l#1#_v0#0@@1|) |l#0@@10|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType SetType (|lambda#10| |l#0@@10|) |$l#1#heap#0@@1| |$l#1#i#0@@1| |$l#1#_v0#0@@1|))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@4 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@4 $o@@6) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@6)) TInt $h@@4))
 :pattern ( (_System.array.Length $o@@6) ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@4 $o@@6) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@5 T@U) ($o@@7 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@7)))) ($IsBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@5 $o@@7) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@5 $o@@7) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert (forall ((f@@5 T@U) (t0@@11 T@U) (t1@@9 T@U) (t2@@8 T@U) (u0@@5 T@U) (u1@@5 T@U) (u2@@4 T@U) ) (!  (=> (and (and (and ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 t0@@11 t1@@9 t2@@8)) (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 u0@@5) ($IsBox bx@@8 t0@@11))
 :pattern ( ($IsBox bx@@8 u0@@5))
 :pattern ( ($IsBox bx@@8 t0@@11))
))) (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 u1@@5) ($IsBox bx@@9 t1@@9))
 :pattern ( ($IsBox bx@@9 u1@@5))
 :pattern ( ($IsBox bx@@9 t1@@9))
))) (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 t2@@8) ($IsBox bx@@10 u2@@4))
 :pattern ( ($IsBox bx@@10 t2@@8))
 :pattern ( ($IsBox bx@@10 u2@@4))
))) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 u0@@5 u1@@5 u2@@4)))
 :pattern ( ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 t0@@11 t1@@9 t2@@8)) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 u0@@5 u1@@5 u2@@4)))
)))
(assert (forall ((f@@6 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@6 ($LS ly@@0)) (AtLayer A@@0 f@@6 ly@@0))
 :pattern ( (AtLayer A@@0 f@@6 ($LS ly@@0)))
)))
(assert (forall ((|l#0@@11| T@U) (|l#1@@4| T@U) (|l#2@@3| T@U) (|l#3@@1| Bool) ($o@@8 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType2Select refType FieldType boolType (|lambda#6| |l#0@@11| |l#1@@4| |l#2@@3| |l#3@@1|) $o@@8 $f@@0))  (=> (and (or (not (= $o@@8 |l#0@@11|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@4| $o@@8) |l#2@@3|)))) |l#3@@1|))
 :pattern ( (MapType2Select refType FieldType boolType (|lambda#6| |l#0@@11| |l#1@@4| |l#2@@3| |l#3@@1|) $o@@8 $f@@0))
)))
(assert (forall ((t0@@12 T@U) (t1@@10 T@U) (t2@@9 T@U) (h0 T@U) (h1 T@U) (f@@7 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and (and ($IsBox bx0@@6 t0@@12) ($IsBox bx1@@6 t1@@10)) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc2 t0@@12 t1@@10 t2@@9)))) (forall ((o@@2 T@U) (fld T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads2 t0@@12 t1@@10 t2@@9 h0 f@@7 bx0@@6 bx1@@6) ($Box refType o@@2))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0 o@@2) fld) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1 o@@2) fld))))) (= (Requires2 t0@@12 t1@@10 t2@@9 h0 f@@7 bx0@@6 bx1@@6) (Requires2 t0@@12 t1@@10 t2@@9 h1 f@@7 bx0@@6 bx1@@6)))
 :pattern ( ($HeapSucc h0 h1) (Requires2 t0@@12 t1@@10 t2@@9 h1 f@@7 bx0@@6 bx1@@6))
)))
(assert (forall ((t0@@13 T@U) (t1@@11 T@U) (t2@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@8 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and (and ($IsBox bx0@@7 t0@@13) ($IsBox bx1@@7 t1@@11)) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc2 t0@@13 t1@@11 t2@@10)))) (forall ((o@@3 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads2 t0@@13 t1@@11 t2@@10 h1@@0 f@@8 bx0@@7 bx1@@7) ($Box refType o@@3))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@0 o@@3) fld@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@0 o@@3) fld@@0))))) (= (Requires2 t0@@13 t1@@11 t2@@10 h0@@0 f@@8 bx0@@7 bx1@@7) (Requires2 t0@@13 t1@@11 t2@@10 h1@@0 f@@8 bx0@@7 bx1@@7)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires2 t0@@13 t1@@11 t2@@10 h1@@0 f@@8 bx0@@7 bx1@@7))
)))
(assert (forall ((bx@@11 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@11 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@11)) bx@@11) ($Is SetType ($Unbox SetType bx@@11) (TSet t@@5))))
 :pattern ( ($IsBox bx@@11 (TSet t@@5)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@12)) bx@@12) ($Is refType ($Unbox refType bx@@12) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@12 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@13)) bx@@13) ($Is refType ($Unbox refType bx@@13) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@13 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (forall ((h@@9 T@U) (r@@2 T@U) (f@@9 T@U) (x@@7 T@U) ) (!  (=> ($IsGoodHeap (MapType1Store refType (MapType1Type FieldType BoxType) h@@9 r@@2 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@9 r@@2) f@@9 x@@7))) ($HeapSucc h@@9 (MapType1Store refType (MapType1Type FieldType BoxType) h@@9 r@@2 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@9 r@@2) f@@9 x@@7))))
 :pattern ( (MapType1Store refType (MapType1Type FieldType BoxType) h@@9 r@@2 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@9 r@@2) f@@9 x@@7)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@4 T@U) ) (! (= (|Set#IsMember| a@@1 o@@4) (|Set#IsMember| b@@1 o@@4))
 :pattern ( (|Set#IsMember| a@@1 o@@4))
 :pattern ( (|Set#IsMember| b@@1 o@@4))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((t0@@14 T@U) (t1@@12 T@U) (t2@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@10 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and (and ($IsBox bx0@@8 t0@@14) ($IsBox bx1@@8 t1@@12)) ($Is HandleTypeType f@@10 (Tclass._System.___hFunc2 t0@@14 t1@@12 t2@@11)))) (forall ((o@@5 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads2 t0@@14 t1@@12 t2@@11 h0@@1 f@@10 bx0@@8 bx1@@8) ($Box refType o@@5))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@1 o@@5) fld@@1) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@1 o@@5) fld@@1))))) (= (Reads2 t0@@14 t1@@12 t2@@11 h0@@1 f@@10 bx0@@8 bx1@@8) (Reads2 t0@@14 t1@@12 t2@@11 h1@@1 f@@10 bx0@@8 bx1@@8)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads2 t0@@14 t1@@12 t2@@11 h1@@1 f@@10 bx0@@8 bx1@@8))
)))
(assert (forall ((t0@@15 T@U) (t1@@13 T@U) (t2@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@11 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and (and ($IsBox bx0@@9 t0@@15) ($IsBox bx1@@9 t1@@13)) ($Is HandleTypeType f@@11 (Tclass._System.___hFunc2 t0@@15 t1@@13 t2@@12)))) (forall ((o@@6 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads2 t0@@15 t1@@13 t2@@12 h1@@2 f@@11 bx0@@9 bx1@@9) ($Box refType o@@6))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@2 o@@6) fld@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@2 o@@6) fld@@2))))) (= (Reads2 t0@@15 t1@@13 t2@@12 h0@@2 f@@11 bx0@@9 bx1@@9) (Reads2 t0@@15 t1@@13 t2@@12 h1@@2 f@@11 bx0@@9 bx1@@9)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads2 t0@@15 t1@@13 t2@@12 h1@@2 f@@11 bx0@@9 bx1@@9))
)))
(assert (forall ((t0@@16 T@U) (t1@@14 T@U) (t2@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@12 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and (and ($IsBox bx0@@10 t0@@16) ($IsBox bx1@@10 t1@@14)) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc2 t0@@16 t1@@14 t2@@13)))) (forall ((o@@7 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads2 t0@@16 t1@@14 t2@@13 h0@@3 f@@12 bx0@@10 bx1@@10) ($Box refType o@@7))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@3 o@@7) fld@@3) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@3 o@@7) fld@@3))))) (= (Apply2 t0@@16 t1@@14 t2@@13 h0@@3 f@@12 bx0@@10 bx1@@10) (Apply2 t0@@16 t1@@14 t2@@13 h1@@3 f@@12 bx0@@10 bx1@@10)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply2 t0@@16 t1@@14 t2@@13 h1@@3 f@@12 bx0@@10 bx1@@10))
)))
(assert (forall ((t0@@17 T@U) (t1@@15 T@U) (t2@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@13 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and (and ($IsBox bx0@@11 t0@@17) ($IsBox bx1@@11 t1@@15)) ($Is HandleTypeType f@@13 (Tclass._System.___hFunc2 t0@@17 t1@@15 t2@@14)))) (forall ((o@@8 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@8 null)) (not true)) (|Set#IsMember| (Reads2 t0@@17 t1@@15 t2@@14 h1@@4 f@@13 bx0@@11 bx1@@11) ($Box refType o@@8))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@4 o@@8) fld@@4) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@4 o@@8) fld@@4))))) (= (Apply2 t0@@17 t1@@15 t2@@14 h0@@4 f@@13 bx0@@11 bx1@@11) (Apply2 t0@@17 t1@@15 t2@@14 h1@@4 f@@13 bx0@@11 bx1@@11)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply2 t0@@17 t1@@15 t2@@14 h1@@4 f@@13 bx0@@11 bx1@@11))
)))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((x@@9 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@9)) (Lit BoxType ($Box T@@5 x@@9)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@9)))
)))
(assert (forall ((t0@@18 T@U) (t1@@16 T@U) (t2@@15 T@U) (heap@@3 T@U) (h@@10 T@U) (r@@3 T@U) (rd@@1 T@U) (bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType r@@3 heap@@3 bx0@@12 bx1@@12)) (Requires2 t0@@18 t1@@16 t2@@15 heap@@3 (Handle2 h@@10 r@@3 rd@@1) bx0@@12 bx1@@12))
 :pattern ( (Requires2 t0@@18 t1@@16 t2@@15 heap@@3 (Handle2 h@@10 r@@3 rd@@1) bx0@@12 bx1@@12))
)))
(assert (forall ((h@@11 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@11)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@11))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |$lambdaHeap#1@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |x#1@0| () Int)
(declare-fun |lambdaResult#2| () Int)
(declare-fun |$_Frame#l2@0| () T@U)
(declare-fun |$lambdaHeap#2@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |i#1@0| () Int)
(declare-fun $nw@0 () T@U)
(declare-fun |$_Frame#l3@0| () T@U)
(declare-fun |lambdaResult#3| () Int)
(declare-fun $Heap@7 () T@U)
(declare-fun |$lambdaHeap#3@0| () T@U)
(declare-fun |i#2@0| () Int)
(declare-fun $nw@1 () T@U)
(declare-fun |$_Frame#l4@0| () T@U)
(declare-fun |lambdaResult#4| () Int)
(declare-fun $Heap@10 () T@U)
(declare-fun |$lambdaHeap#4@0| () T@U)
(declare-fun |f##4@0| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $nw@2 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |N##4@0| () Int)
(declare-fun $Heap@11 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@12 () T@U)
(declare-fun |f##3@0| () T@U)
(declare-fun |N##3@0| () Int)
(declare-fun $Heap@8 () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun |f##2@0| () T@U)
(declare-fun |N##2@0| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |f##1@0| () T@U)
(declare-fun |N##1@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |f##0@0| () T@U)
(declare-fun |N##0@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap () T@U)
(declare-fun |v#0| () T@U)
(declare-fun |u#0| () T@U)
(declare-fun |z#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 30000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 71) (let ((anon29_Else_correct true))
(let ((anon29_Then_correct true))
(let ((anon28_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap@0 |$lambdaHeap#0@0|) ($HeapSucc $Heap@0 |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 68) 66) anon29_Then_correct) (=> (= (ControlFlow 0 68) 67) anon29_Else_correct)))))
(let ((anon31_Else_correct true))
(let ((anon31_Then_correct true))
(let ((anon30_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#1@0|) (or (= $Heap@2 |$lambdaHeap#1@0|) ($HeapSucc $Heap@2 |$lambdaHeap#1@0|))) (and (=> (= (ControlFlow 0 60) 58) anon31_Then_correct) (=> (= (ControlFlow 0 60) 59) anon31_Else_correct)))))
(let ((anon12_correct true))
(let ((anon34_Else_correct  (=> (and (= |x#1@0| 0) (= (ControlFlow 0 50) 47)) anon12_correct)))
(let ((anon34_Then_correct  (=> (or (not (= |x#1@0| 0)) (not true)) (and (=> (= (ControlFlow 0 48) (- 0 49)) (or (not (= |x#1@0| 0)) (not true))) (=> (or (not (= |x#1@0| 0)) (not true)) (=> (= |lambdaResult#2| (Div 100 |x#1@0|)) (=> (and ($Is intType (int_2_U |lambdaResult#2|) TInt) (= (ControlFlow 0 48) 47)) anon12_correct)))))))
(let ((anon33_Then_correct  (=> (= |$_Frame#l2@0| (|lambda#6| null |$lambdaHeap#2@0| alloc false)) (and (=> (= (ControlFlow 0 51) 48) anon34_Then_correct) (=> (= (ControlFlow 0 51) 50) anon34_Else_correct)))))
(let ((anon33_Else_correct true))
(let ((anon32_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#2@0|) (or (= $Heap@4 |$lambdaHeap#2@0|) ($HeapSucc $Heap@4 |$lambdaHeap#2@0|))) (and (=> (= (ControlFlow 0 52) 51) anon33_Then_correct) (=> (= (ControlFlow 0 52) 46) anon33_Else_correct)))))
(let ((anon19_correct true))
(let ((anon38_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#1@0|) (< |i#1@0| 10))) (= (ControlFlow 0 35) 30)) anon19_correct)))
(let ((anon38_Then_correct  (=> (and (<= (LitInt 0) |i#1@0|) (< |i#1@0| 10)) (and (=> (= (ControlFlow 0 31) (- 0 34)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 31) (- 0 33)) (and (<= 0 |i#1@0|) (< |i#1@0| (_System.array.Length $nw@0)))) (=> (and (<= 0 |i#1@0|) (< |i#1@0| (_System.array.Length $nw@0))) (and (=> (= (ControlFlow 0 31) (- 0 32)) (U_2_bool (MapType2Select refType FieldType boolType |$_Frame#l3@0| $nw@0 (IndexField |i#1@0|)))) (=> (U_2_bool (MapType2Select refType FieldType boolType |$_Frame#l3@0| $nw@0 (IndexField |i#1@0|))) (=> (= |lambdaResult#3| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@0) (IndexField |i#1@0|))))) (=> (and ($Is intType (int_2_U |lambdaResult#3|) TInt) (= (ControlFlow 0 31) 30)) anon19_correct)))))))))))
(let ((anon37_Else_correct  (=> (< |i#1@0| (LitInt 0)) (and (=> (= (ControlFlow 0 37) 31) anon38_Then_correct) (=> (= (ControlFlow 0 37) 35) anon38_Else_correct)))))
(let ((anon37_Then_correct  (=> (<= (LitInt 0) |i#1@0|) (and (=> (= (ControlFlow 0 36) 31) anon38_Then_correct) (=> (= (ControlFlow 0 36) 35) anon38_Else_correct)))))
(let ((anon36_Then_correct  (=> (= |$_Frame#l3@0| (|lambda#0| null |$lambdaHeap#3@0| alloc $nw@0)) (and (=> (= (ControlFlow 0 38) 36) anon37_Then_correct) (=> (= (ControlFlow 0 38) 37) anon37_Else_correct)))))
(let ((anon36_Else_correct true))
(let ((anon35_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#3@0|) (or (= $Heap@7 |$lambdaHeap#3@0|) ($HeapSucc $Heap@7 |$lambdaHeap#3@0|))) (and (=> (= (ControlFlow 0 39) 38) anon36_Then_correct) (=> (= (ControlFlow 0 39) 29) anon36_Else_correct)))))
(let ((anon26_correct true))
(let ((anon42_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| 9))) (= (ControlFlow 0 18) 10)) anon26_correct)))
(let ((anon42_Then_correct  (=> (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| 9)) (and (=> (= (ControlFlow 0 11) (- 0 17)) (or (not (= $nw@1 null)) (not true))) (=> (or (not (= $nw@1 null)) (not true)) (and (=> (= (ControlFlow 0 11) (- 0 16)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array.Length $nw@1)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array.Length $nw@1))) (and (=> (= (ControlFlow 0 11) (- 0 15)) (U_2_bool (MapType2Select refType FieldType boolType |$_Frame#l4@0| $nw@1 (IndexField |i#2@0|)))) (=> (U_2_bool (MapType2Select refType FieldType boolType |$_Frame#l4@0| $nw@1 (IndexField |i#2@0|))) (and (=> (= (ControlFlow 0 11) (- 0 14)) (or (not (= $nw@1 null)) (not true))) (=> (or (not (= $nw@1 null)) (not true)) (and (=> (= (ControlFlow 0 11) (- 0 13)) (and (<= 0 (+ |i#2@0| 1)) (< (+ |i#2@0| 1) (_System.array.Length $nw@1)))) (=> (and (<= 0 (+ |i#2@0| 1)) (< (+ |i#2@0| 1) (_System.array.Length $nw@1))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (U_2_bool (MapType2Select refType FieldType boolType |$_Frame#l4@0| $nw@1 (IndexField (+ |i#2@0| 1))))) (=> (U_2_bool (MapType2Select refType FieldType boolType |$_Frame#l4@0| $nw@1 (IndexField (+ |i#2@0| 1)))) (=> (= |lambdaResult#4| (+ (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@1) (IndexField |i#2@0|)))) (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@1) (IndexField (+ |i#2@0| 1))))))) (=> (and ($Is intType (int_2_U |lambdaResult#4|) TInt) (= (ControlFlow 0 11) 10)) anon26_correct)))))))))))))))))
(let ((anon41_Else_correct  (=> (< |i#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 20) 11) anon42_Then_correct) (=> (= (ControlFlow 0 20) 18) anon42_Else_correct)))))
(let ((anon41_Then_correct  (=> (<= (LitInt 0) |i#2@0|) (and (=> (= (ControlFlow 0 19) 11) anon42_Then_correct) (=> (= (ControlFlow 0 19) 18) anon42_Else_correct)))))
(let ((anon40_Then_correct  (=> (= |$_Frame#l4@0| (|lambda#0| null |$lambdaHeap#4@0| alloc $nw@1)) (and (=> (= (ControlFlow 0 21) 19) anon41_Then_correct) (=> (= (ControlFlow 0 21) 20) anon41_Else_correct)))))
(let ((anon40_Else_correct true))
(let ((anon39_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#4@0|) (or (= $Heap@10 |$lambdaHeap#4@0|) ($HeapSucc $Heap@10 |$lambdaHeap#4@0|))) (and (=> (= (ControlFlow 0 22) 21) anon40_Then_correct) (=> (= (ControlFlow 0 22) 9) anon40_Else_correct)))))
(let ((anon39_Else_correct  (=> (= |f##4@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#11| (Handle2 (|lambda#27| $nw@1 $nw@1 1) (|lambda#23| TInt TInt (LitInt 0) 9) (|lambda#10| (SetRef_to_SetBox (|lambda#24| $nw@1))))) ($LS $LZ)))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (forall (($o@@9 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $o@@9) alloc)))) (= $o@@9 $nw@2)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@9 $f@@1))))) (=> (forall (($o@@10 T@U) ($f@@2 T@U) )  (=> (and (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $o@@10) alloc)))) (= $o@@10 $nw@2)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@10 $f@@2)))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (= |N##4@0| (_System.array.Length $nw@2))) (=> (= |N##4@0| (_System.array.Length $nw@2)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (forall ((|j#1| Int) ) (!  (=> (and (<= (LitInt 0) |j#1|) (< |j#1| |N##4@0|)) (Requires2 TInt TInt TInt $Heap@10 |f##4@0| ($Box intType (int_2_U |j#1|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#1|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#1|)))
))) (=> (forall ((|j#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| |N##4@0|)) (Requires2 TInt TInt TInt $Heap@10 |f##4@0| ($Box intType (int_2_U |j#1@@0|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#1@@0|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#1@@0|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (forall ((|j#3| Int) ) (!  (=> (and (<= (LitInt 0) |j#3|) (< |j#3| |N##4@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@10 |f##4@0| ($Box intType (int_2_U |j#3|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#3|))) ($Box refType $nw@2))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#3|)))
))) (=> (forall ((|j#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@0|) (< |j#3@@0| |N##4@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@10 |f##4@0| ($Box intType (int_2_U |j#3@@0|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#3@@0|))) ($Box refType $nw@2))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#3@@0|)))
)) (=> (and (and (and (and ($IsGoodHeap $Heap@11) ($IsHeapAnchor $Heap@11)) (forall ((|j#5| Int) ) (!  (=> (and (<= (LitInt 0) |j#5|) (< |j#5| |N##4@0|)) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@11 $nw@2) (IndexField |j#5|)) (Apply2 TInt TInt TInt $Heap@11 |f##4@0| ($Box intType (int_2_U |j#5|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#5|)))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $nw@2) (IndexField |j#5|)))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@11 $nw@2) (IndexField |j#5|)))
))) (and (forall (($o@@11 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $o@@11) alloc)))) (or (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@11 $o@@11) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@10 $o@@11)) (= $o@@11 $nw@2)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@11 $o@@11))
)) ($HeapSucc $Heap@10 $Heap@11))) (and (and ($IsGoodHeap $Heap@12) ($IsHeapAnchor $Heap@12)) (and (forall (($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@11 $o@@12) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@12 $o@@12) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@11 $o@@12)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@12 $o@@12))
)) ($HeapSucc $Heap@11 $Heap@12)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= $nw@2 null)) (not true))) (=> (or (not (= $nw@2 null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 (LitInt 8)) (< (LitInt 8) (_System.array.Length $nw@2)))) (=> (= (ControlFlow 0 2) (- 0 1)) (= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@12 $nw@2) (IndexField (LitInt 8))))) (LitInt 21))))))))))))))))))
(let ((anon35_Else_correct  (=> (= |f##3@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#11| (Handle2 (|lambda#22| $nw@0) (|lambda#23| TInt TInt (LitInt 0) 10) (|lambda#10| (SetRef_to_SetBox (|lambda#24| $nw@0))))) ($LS $LZ)))) (and (=> (= (ControlFlow 0 23) (- 0 28)) (forall (($o@@13 T@U) ($f@@3 T@U) )  (=> (and (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $o@@13) alloc)))) (= $o@@13 $nw@1)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@13 $f@@3))))) (=> (forall (($o@@14 T@U) ($f@@4 T@U) )  (=> (and (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $o@@14) alloc)))) (= $o@@14 $nw@1)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@14 $f@@4)))) (and (=> (= (ControlFlow 0 23) (- 0 27)) (= |N##3@0| (_System.array.Length $nw@1))) (=> (= |N##3@0| (_System.array.Length $nw@1)) (and (=> (= (ControlFlow 0 23) (- 0 26)) (forall ((|j#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@1|) (< |j#1@@1| |N##3@0|)) (Requires2 TInt TInt TInt $Heap@7 |f##3@0| ($Box intType (int_2_U |j#1@@1|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#1@@1|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#1@@1|)))
))) (=> (forall ((|j#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@2|) (< |j#1@@2| |N##3@0|)) (Requires2 TInt TInt TInt $Heap@7 |f##3@0| ($Box intType (int_2_U |j#1@@2|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#1@@2|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#1@@2|)))
)) (and (=> (= (ControlFlow 0 23) (- 0 25)) (forall ((|j#3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@1|) (< |j#3@@1| |N##3@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@7 |f##3@0| ($Box intType (int_2_U |j#3@@1|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#3@@1|))) ($Box refType $nw@1))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#3@@1|)))
))) (=> (forall ((|j#3@@2| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@2|) (< |j#3@@2| |N##3@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@7 |f##3@0| ($Box intType (int_2_U |j#3@@2|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#3@@2|))) ($Box refType $nw@1))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#3@@2|)))
)) (=> (and (and (and (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8)) (forall ((|j#5@@0| Int) ) (!  (=> (and (<= (LitInt 0) |j#5@@0|) (< |j#5@@0| |N##3@0|)) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@1) (IndexField |j#5@@0|)) (Apply2 TInt TInt TInt $Heap@8 |f##3@0| ($Box intType (int_2_U |j#5@@0|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#5@@0|)))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@1) (IndexField |j#5@@0|)))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@1) (IndexField |j#5@@0|)))
))) (and (forall (($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $o@@15) alloc)))) (or (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $o@@15) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $o@@15)) (= $o@@15 $nw@1)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $o@@15))
)) ($HeapSucc $Heap@7 $Heap@8))) (and (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (and (forall (($o@@16 T@U) ) (!  (=> (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $o@@16) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 $o@@16) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $o@@16)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 $o@@16))
)) ($HeapSucc $Heap@8 $Heap@9)))) (and (=> (= (ControlFlow 0 23) (- 0 24)) (<= 0 (LitInt 9))) (=> (<= 0 (LitInt 9)) (=> (and (and (and (or (not (= $nw@2 null)) (not true)) ($Is refType $nw@2 (Tclass._System.array? TInt))) (and (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 $nw@2) alloc)))) (= (_System.array.Length $nw@2) (LitInt 9)))) (and (and (= $Heap@10 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@9 $nw@2 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 $nw@2) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@10)) (and ($IsHeapAnchor $Heap@10) (= |N##4@0| (LitInt 9))))) (and (=> (= (ControlFlow 0 23) 22) anon39_Then_correct) (=> (= (ControlFlow 0 23) 2) anon39_Else_correct)))))))))))))))))
(let ((anon32_Else_correct  (=> (= |f##2@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#11| (Handle2 (|lambda#17| 100) (|lambda#18| TInt TInt 0) (|lambda#10| (SetRef_to_SetBox (|lambda#9| false))))) ($LS $LZ)))) (and (=> (= (ControlFlow 0 40) (- 0 45)) (forall (($o@@17 T@U) ($f@@5 T@U) )  (=> (and (and (or (not (= $o@@17 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $o@@17) alloc)))) (= $o@@17 $nw@0)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@17 $f@@5))))) (=> (forall (($o@@18 T@U) ($f@@6 T@U) )  (=> (and (and (or (not (= $o@@18 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $o@@18) alloc)))) (= $o@@18 $nw@0)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@18 $f@@6)))) (and (=> (= (ControlFlow 0 40) (- 0 44)) (= |N##2@0| (_System.array.Length $nw@0))) (=> (= |N##2@0| (_System.array.Length $nw@0)) (and (=> (= (ControlFlow 0 40) (- 0 43)) (forall ((|j#1@@3| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@3|) (< |j#1@@3| |N##2@0|)) (Requires2 TInt TInt TInt $Heap@4 |f##2@0| ($Box intType (int_2_U |j#1@@3|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#1@@3|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#1@@3|)))
))) (=> (forall ((|j#1@@4| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@4|) (< |j#1@@4| |N##2@0|)) (Requires2 TInt TInt TInt $Heap@4 |f##2@0| ($Box intType (int_2_U |j#1@@4|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#1@@4|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#1@@4|)))
)) (and (=> (= (ControlFlow 0 40) (- 0 42)) (forall ((|j#3@@3| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@3|) (< |j#3@@3| |N##2@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@4 |f##2@0| ($Box intType (int_2_U |j#3@@3|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#3@@3|))) ($Box refType $nw@0))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#3@@3|)))
))) (=> (forall ((|j#3@@4| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@4|) (< |j#3@@4| |N##2@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@4 |f##2@0| ($Box intType (int_2_U |j#3@@4|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#3@@4|))) ($Box refType $nw@0))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#3@@4|)))
)) (=> (and (and (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (forall ((|j#5@@1| Int) ) (!  (=> (and (<= (LitInt 0) |j#5@@1|) (< |j#5@@1| |N##2@0|)) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#5@@1|)) (Apply2 TInt TInt TInt $Heap@5 |f##2@0| ($Box intType (int_2_U |j#5@@1|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#5@@1|)))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@0) (IndexField |j#5@@1|)))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#5@@1|)))
))) (and (forall (($o@@19 T@U) ) (!  (=> (and (or (not (= $o@@19 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $o@@19) alloc)))) (or (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $o@@19) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $o@@19)) (= $o@@19 $nw@0)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $o@@19))
)) ($HeapSucc $Heap@4 $Heap@5))) (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (forall (($o@@20 T@U) ) (!  (=> (and (or (not (= $o@@20 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $o@@20) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 $o@@20) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $o@@20)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 $o@@20))
)) ($HeapSucc $Heap@5 $Heap@6)))) (and (=> (= (ControlFlow 0 40) (- 0 41)) (<= 0 (LitInt 10))) (=> (<= 0 (LitInt 10)) (=> (and (and (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 (Tclass._System.array? TInt))) (and (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 $nw@1) alloc)))) (= (_System.array.Length $nw@1) (LitInt 10)))) (and (and (= $Heap@7 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@6 $nw@1 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 $nw@1) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@7)) (and ($IsHeapAnchor $Heap@7) (= |N##3@0| (LitInt 10))))) (and (=> (= (ControlFlow 0 40) 39) anon35_Then_correct) (=> (= (ControlFlow 0 40) 23) anon35_Else_correct)))))))))))))))))
(let ((anon30_Else_correct  (=> (= |f##1@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#11| (Handle2 (|lambda#12| 1) (|lambda#8| TInt TInt) (|lambda#10| (SetRef_to_SetBox (|lambda#9| false))))) ($LS $LZ)))) (and (=> (= (ControlFlow 0 53) (- 0 57)) (forall (($o@@21 T@U) ($f@@7 T@U) )  (=> (and (and (or (not (= $o@@21 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $o@@21) alloc)))) (= $o@@21 $nw@0)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@21 $f@@7))))) (=> (forall (($o@@22 T@U) ($f@@8 T@U) )  (=> (and (and (or (not (= $o@@22 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $o@@22) alloc)))) (= $o@@22 $nw@0)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@22 $f@@8)))) (and (=> (= (ControlFlow 0 53) (- 0 56)) (= |N##1@0| (_System.array.Length $nw@0))) (=> (= |N##1@0| (_System.array.Length $nw@0)) (and (=> (= (ControlFlow 0 53) (- 0 55)) (forall ((|j#1@@5| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@5|) (< |j#1@@5| |N##1@0|)) (Requires2 TInt TInt TInt $Heap@2 |f##1@0| ($Box intType (int_2_U |j#1@@5|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#1@@5|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#1@@5|)))
))) (=> (forall ((|j#1@@6| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@6|) (< |j#1@@6| |N##1@0|)) (Requires2 TInt TInt TInt $Heap@2 |f##1@0| ($Box intType (int_2_U |j#1@@6|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#1@@6|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#1@@6|)))
)) (and (=> (= (ControlFlow 0 53) (- 0 54)) (forall ((|j#3@@5| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@5|) (< |j#3@@5| |N##1@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@2 |f##1@0| ($Box intType (int_2_U |j#3@@5|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#3@@5|))) ($Box refType $nw@0))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#3@@5|)))
))) (=> (forall ((|j#3@@6| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@6|) (< |j#3@@6| |N##1@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@2 |f##1@0| ($Box intType (int_2_U |j#3@@6|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#3@@6|))) ($Box refType $nw@0))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#3@@6|)))
)) (=> (and (and (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (forall ((|j#5@@2| Int) ) (!  (=> (and (<= (LitInt 0) |j#5@@2|) (< |j#5@@2| |N##1@0|)) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#5@@2|)) (Apply2 TInt TInt TInt $Heap@3 |f##1@0| ($Box intType (int_2_U |j#5@@2|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#5@@2|)))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#5@@2|)))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#5@@2|)))
))) (and (forall (($o@@23 T@U) ) (!  (=> (and (or (not (= $o@@23 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $o@@23) alloc)))) (or (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $o@@23) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $o@@23)) (= $o@@23 $nw@0)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $o@@23))
)) ($HeapSucc $Heap@2 $Heap@3))) (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (forall (($o@@24 T@U) ) (!  (=> (and (or (not (= $o@@24 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $o@@24) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $o@@24) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $o@@24)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $o@@24))
))) (and ($HeapSucc $Heap@3 $Heap@4) (= |N##2@0| (LitInt 10))))) (and (=> (= (ControlFlow 0 53) 52) anon32_Then_correct) (=> (= (ControlFlow 0 53) 40) anon32_Else_correct))))))))))))))
(let ((anon28_Else_correct  (=> (= |f##0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#11| (Handle2 |lambda#7| (|lambda#8| TInt TInt) (|lambda#10| (SetRef_to_SetBox (|lambda#9| false))))) ($LS $LZ)))) (and (=> (= (ControlFlow 0 61) (- 0 65)) (forall (($o@@25 T@U) ($f@@9 T@U) )  (=> (and (and (or (not (= $o@@25 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@25) alloc)))) (= $o@@25 $nw@0)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@25 $f@@9))))) (=> (forall (($o@@26 T@U) ($f@@10 T@U) )  (=> (and (and (or (not (= $o@@26 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@26) alloc)))) (= $o@@26 $nw@0)) (U_2_bool (MapType2Select refType FieldType boolType $_ModifiesFrame@0 $o@@26 $f@@10)))) (and (=> (= (ControlFlow 0 61) (- 0 64)) (= |N##0@0| (_System.array.Length $nw@0))) (=> (= |N##0@0| (_System.array.Length $nw@0)) (and (=> (= (ControlFlow 0 61) (- 0 63)) (forall ((|j#1@@7| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@7|) (< |j#1@@7| |N##0@0|)) (Requires2 TInt TInt TInt $Heap@0 |f##0@0| ($Box intType (int_2_U |j#1@@7|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#1@@7|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#1@@7|)))
))) (=> (forall ((|j#1@@8| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@8|) (< |j#1@@8| |N##0@0|)) (Requires2 TInt TInt TInt $Heap@0 |f##0@0| ($Box intType (int_2_U |j#1@@8|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#1@@8|))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#1@@8|)))
)) (and (=> (= (ControlFlow 0 61) (- 0 62)) (forall ((|j#3@@7| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@7|) (< |j#3@@7| |N##0@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@0 |f##0@0| ($Box intType (int_2_U |j#3@@7|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#3@@7|))) ($Box refType $nw@0))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#3@@7|)))
))) (=> (forall ((|j#3@@8| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@8|) (< |j#3@@8| |N##0@0|)) (not (|Set#IsMember| (Reads2 TInt TInt TInt $Heap@0 |f##0@0| ($Box intType (int_2_U |j#3@@8|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#3@@8|))) ($Box refType $nw@0))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#3@@8|)))
)) (=> (and (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (forall ((|j#5@@3| Int) ) (!  (=> (and (<= (LitInt 0) |j#5@@3|) (< |j#5@@3| |N##0@0|)) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#5@@3|)) (Apply2 TInt TInt TInt $Heap@1 |f##0@0| ($Box intType (int_2_U |j#5@@3|)) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#5@@3|)))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#5@@3|)))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#5@@3|)))
))) (and (forall (($o@@27 T@U) ) (!  (=> (and (or (not (= $o@@27 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@27) alloc)))) (or (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@27) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@27)) (= $o@@27 $nw@0)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@27))
)) ($HeapSucc $Heap@0 $Heap@1))) (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (forall (($o@@28 T@U) ) (!  (=> (and (or (not (= $o@@28 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@28) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $o@@28) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@28)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $o@@28))
))) (and ($HeapSucc $Heap@1 $Heap@2) (= |N##1@0| (LitInt 10))))) (and (=> (= (ControlFlow 0 61) 60) anon30_Then_correct) (=> (= (ControlFlow 0 61) 53) anon30_Else_correct))))))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#6| null $Heap alloc false)) (and (=> (= (ControlFlow 0 69) (- 0 70)) (<= 0 (LitInt 10))) (=> (<= 0 (LitInt 10)) (=> (and (and (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 (Tclass._System.array? TInt))) (and (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap $nw@0) alloc)))) (= (_System.array.Length $nw@0) (LitInt 10)))) (and (and (= $Heap@0 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap $nw@0 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@0)) (and ($IsHeapAnchor $Heap@0) (= |N##0@0| (LitInt 10))))) (and (=> (= (ControlFlow 0 69) 68) anon28_Then_correct) (=> (= (ControlFlow 0 69) 61) anon28_Else_correct))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (and ($Is refType |v#0| (Tclass._System.array TInt)) ($IsAlloc refType |v#0| (Tclass._System.array TInt) $Heap)) true) (and (and ($Is refType |u#0| (Tclass._System.array TInt)) ($IsAlloc refType |u#0| (Tclass._System.array TInt) $Heap)) true)) (and (and (and ($Is refType |z#0| (Tclass._System.array TInt)) ($IsAlloc refType |z#0| (Tclass._System.array TInt) $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 71) 69)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
