(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |lambda#48| (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |lambda#47| (T@U Int T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun |lambda#6| (T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun |lambda#2| (T@U T@U) T@U)
(declare-fun |lambda#3| (Bool) T@U)
(declare-fun |lambda#5| (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |lambda#4| (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun IndexField (Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |lambda#7| (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun |lambda#51| (T@U Int T@U T@U) T@U)
(declare-fun |lambda#18| (Bool) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#50| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc Tagclass._System.object? Tagclass._System.object Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0|)
)
(assert  (and (and (and (and (and (and (and (and (= (Ctor HandleTypeType) 3) (= (Ctor refType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f T@U) (t0@@0 T@U) (h T@U) ) (!  (=> ($IsGoodHeap h) (= ($IsAlloc HandleTypeType f (Tclass._System.___hFunc0 t0@@0) h)  (=> (Requires0 t0@@0 h f) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads0 t0@@0 h f) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h r) alloc))))
 :pattern ( (|Set#IsMember| (Reads0 t0@@0 h f) ($Box refType r)))
)))))
 :pattern ( ($IsAlloc HandleTypeType f (Tclass._System.___hFunc0 t0@@0) h))
)))
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert  (and (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor SetType) 8)))
(assert (forall ((t0@@2 T@U) (t1@@1 T@U) (heap T@U) (h@@0 T@U) (r@@0 T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@2 t1@@1 heap (Handle1 h@@0 r@@0 rd) bx0) bx) (|Set#IsMember| (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType SetType rd heap bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@2 t1@@1 heap (Handle1 h@@0 r@@0 rd) bx0) bx))
)))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (forall ((|l#0| T@U) (|$l#0#heap#0| T@U) (|$l#0#arr#0| T@U) ) (! (= (U_2_bool (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType boolType (|lambda#48| |l#0|) |$l#0#heap#0| |$l#0#arr#0|)) ($IsBox |$l#0#arr#0| |l#0|))
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType boolType (|lambda#48| |l#0|) |$l#0#heap#0| |$l#0#arr#0|))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1| Int) (|l#2| T@U) (|$l#0#heap#0@@0| T@U) (|$l#0#arr#0@@0| T@U) ) (! (= (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType (|lambda#47| |l#0@@0| |l#1| |l#2|) |$l#0#heap#0@@0| |$l#0#arr#0@@0|) ($Box HandleTypeType (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#6| (Handle0 (|lambda#2| ($Unbox refType |$l#0#arr#0@@0|) |l#0@@0|) (|lambda#3| (> (_System.array.Length ($Unbox refType |$l#0#arr#0@@0|)) |l#1|)) (|lambda#5| (SetRef_to_SetBox (|lambda#4| ($Unbox refType |$l#0#arr#0@@0|)))))) |l#2|))))
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType (|lambda#47| |l#0@@0| |l#1| |l#2|) |$l#0#heap#0@@0| |$l#0#arr#0@@0|))
)))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((f@@0 T@U) (t0@@3 T@U) (t1@@2 T@U) (u0@@2 T@U) (u1@@2 T@U) ) (!  (=> (and (and ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@2)) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 u0@@2) ($IsBox bx@@0 t0@@3))
 :pattern ( ($IsBox bx@@0 u0@@2))
 :pattern ( ($IsBox bx@@0 t0@@3))
))) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 t1@@2) ($IsBox bx@@1 u1@@2))
 :pattern ( ($IsBox bx@@1 t1@@2))
 :pattern ( ($IsBox bx@@1 u1@@2))
))) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 u0@@2 u1@@2)))
 :pattern ( ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@2)) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 u0@@2 u1@@2)))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@0) ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@0))
)))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@1))
)))
(assert (forall ((t0@@4 T@U) (heap@@0 T@U) (h@@1 T@U) (r@@1 T@U) (rd@@0 T@U) ) (! (= (Apply0 t0@@4 heap@@0 (Handle0 h@@1 r@@1 rd@@0)) (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType h@@1 heap@@0))
 :pattern ( (Apply0 t0@@4 heap@@0 (Handle0 h@@1 r@@1 rd@@0)))
)))
(assert (forall (($o@@1 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._System.object? $h@@2)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._System.object? $h@@2))
)))
(assert (forall ((|l#0@@1| T@U) (|l#1@@0| T@U) (|$l#0#heap#0@@1| T@U) ) (! (= (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType (|lambda#2| |l#0@@1| |l#1@@0|) |$l#0#heap#0@@1|) ($Box intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |$l#0#heap#0@@1| |l#0@@1|) |l#1@@0|))))
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType (|lambda#2| |l#0@@1| |l#1@@0|) |$l#0#heap#0@@1|))
)))
(assert (forall ((h@@2 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@2 k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@2 o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h@@2 k))
)))
(assert (forall ((|l#0@@2| T@U) (|$l#0#o#0| T@U) ) (! (= (U_2_bool (MapType0Select refType boolType (|lambda#4| |l#0@@2|) |$l#0#o#0|)) (= |$l#0#o#0| |l#0@@2|))
 :pattern ( (MapType0Select refType boolType (|lambda#4| |l#0@@2|) |$l#0#o#0|))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((t0@@5 T@U) (t1@@3 T@U) (heap@@1 T@U) (f@@1 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@1) (and ($IsBox bx0@@0 t0@@5) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@5 t1@@3)))) (= (|Set#Equal| (Reads1 t0@@5 t1@@3 $OneHeap f@@1 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@5 t1@@3 heap@@1 f@@1 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@5 t1@@3 $OneHeap f@@1 bx0@@0) ($IsGoodHeap heap@@1))
 :pattern ( (Reads1 t0@@5 t1@@3 heap@@1 f@@1 bx0@@0))
)))
(assert (forall ((t0@@6 T@U) (heap@@2 T@U) (h@@3 T@U) (r@@2 T@U) (rd@@1 T@U) (bx@@2 T@U) ) (! (= (|Set#IsMember| (Reads0 t0@@6 heap@@2 (Handle0 h@@3 r@@2 rd@@1)) bx@@2) (|Set#IsMember| (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) SetType rd@@1 heap@@2) bx@@2))
 :pattern ( (|Set#IsMember| (Reads0 t0@@6 heap@@2 (Handle0 h@@3 r@@2 rd@@1)) bx@@2))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@2)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) (IndexField $i0)) _System.array$arg@@2 $h@@3))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((t0@@7 T@U) (heap@@3 T@U) (f@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@3) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc0 t0@@7))) (|Set#Equal| (Reads0 t0@@7 $OneHeap f@@2) |Set#Empty|)) (= (Requires0 t0@@7 $OneHeap f@@2) (Requires0 t0@@7 heap@@3 f@@2)))
 :pattern ( (Requires0 t0@@7 $OneHeap f@@2) ($IsGoodHeap heap@@3))
 :pattern ( (Requires0 t0@@7 heap@@3 f@@2))
)))
(assert (forall ((t0@@8 T@U) (t1@@4 T@U) (h0 T@U) (h1 T@U) (f@@3 T@U) (bx0@@1 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@1 t0@@8) ($Is HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@8 t1@@4)))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads1 t0@@8 t1@@4 h0 f@@3 bx0@@1) ($Box refType o@@1))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0 o@@1) fld) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires1 t0@@8 t1@@4 h0 f@@3 bx0@@1) (Requires1 t0@@8 t1@@4 h1 f@@3 bx0@@1)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@8 t1@@4 h1 f@@3 bx0@@1))
)))
(assert (forall ((t0@@9 T@U) (t1@@5 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@4 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@9) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@9 t1@@5)))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@9 t1@@5 h1@@0 f@@4 bx0@@2) ($Box refType o@@2))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires1 t0@@9 t1@@5 h0@@0 f@@4 bx0@@2) (Requires1 t0@@9 t1@@5 h1@@0 f@@4 bx0@@2)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@9 t1@@5 h1@@0 f@@4 bx0@@2))
)))
(assert (forall ((v T@U) (t0@@10 T@U) ) (! (= ($Is SetType v (TSet t0@@10)) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v bx@@3) ($IsBox bx@@3 t0@@10))
 :pattern ( (|Set#IsMember| v bx@@3))
)))
 :pattern ( ($Is SetType v (TSet t0@@10)))
)))
(assert (= (Ctor LayerTypeType) 9))
(assert (forall ((f@@5 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@5 ly) (MapType0Select LayerTypeType A f@@5 ly))
 :pattern ( (AtLayer A f@@5 ly))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@4 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@4) ($IsAlloc T@@1 v@@0 t h@@4))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@4))
)))
(assert (forall ((h@@5 T@U) (k@@0 T@U) (bx@@4 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@5 k@@0) (=> ($IsAllocBox bx@@4 t@@0 h@@5) ($IsAllocBox bx@@4 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@5 k@@0) ($IsAllocBox bx@@4 t@@0 h@@5))
)))
(assert (forall ((h@@6 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@6 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@6) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@6 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@6))
)))
(assert (forall ((t0@@11 T@U) (t1@@6 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@11) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@11 t1@@6)))) (forall ((o@@3 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@11 t1@@6 h0@@1 f@@6 bx0@@3) ($Box refType o@@3))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@1 o@@3) fld@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@1 o@@3) fld@@1))))) (= (Reads1 t0@@11 t1@@6 h0@@1 f@@6 bx0@@3) (Reads1 t0@@11 t1@@6 h1@@1 f@@6 bx0@@3)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@11 t1@@6 h1@@1 f@@6 bx0@@3))
)))
(assert (forall ((t0@@12 T@U) (t1@@7 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@12) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@12 t1@@7)))) (forall ((o@@4 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@12 t1@@7 h1@@2 f@@7 bx0@@4) ($Box refType o@@4))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@2 o@@4) fld@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@2 o@@4) fld@@2))))) (= (Reads1 t0@@12 t1@@7 h0@@2 f@@7 bx0@@4) (Reads1 t0@@12 t1@@7 h1@@2 f@@7 bx0@@4)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@12 t1@@7 h1@@2 f@@7 bx0@@4))
)))
(assert (forall ((t0@@13 T@U) (t1@@8 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@13) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@13 t1@@8)))) (forall ((o@@5 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@13 t1@@8 h0@@3 f@@8 bx0@@5) ($Box refType o@@5))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@3 o@@5) fld@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@3 o@@5) fld@@3))))) (= (Apply1 t0@@13 t1@@8 h0@@3 f@@8 bx0@@5) (Apply1 t0@@13 t1@@8 h1@@3 f@@8 bx0@@5)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@13 t1@@8 h1@@3 f@@8 bx0@@5))
)))
(assert (forall ((t0@@14 T@U) (t1@@9 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@14) ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@14 t1@@9)))) (forall ((o@@6 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@14 t1@@9 h1@@4 f@@9 bx0@@6) ($Box refType o@@6))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@4 o@@6) fld@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@4 o@@6) fld@@4))))) (= (Apply1 t0@@14 t1@@9 h0@@4 f@@9 bx0@@6) (Apply1 t0@@14 t1@@9 h1@@4 f@@9 bx0@@6)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@14 t1@@9 h1@@4 f@@9 bx0@@6))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert (forall ((|#$R| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R|)) |tytagFamily$_#Func0|))
 :pattern ( (Tclass._System.___hFunc0 |#$R|))
)))
(assert (forall ((|l#0@@3| T@U) (|l#1@@1| T@U) (|l#2@@0| T@U) (|l#3| T@U) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#7| |l#0@@3| |l#1@@1| |l#2@@0| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0@@3|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@1| $o@@3) |l#2@@0|)))) (= $o@@3 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#7| |l#0@@3| |l#1@@1| |l#2@@0| |l#3|) $o@@3 $f))
)))
(assert (forall ((s T@U) (bx@@5 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@5) (U_2_bool (MapType0Select refType boolType s ($Unbox refType bx@@5))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@5))
)))
(assert (forall ((|#$T0| T@U) (|#$R@@0| T@U) (|f#0| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R@@0|) $h@@4) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc1 |#$T0| |#$R@@0|) $h@@4))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R@@0|) $h@@4))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@1| T@U) (|f#0@@0| T@U) ($h@@5 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@1|) $h@@5) ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@0| |#$R@@1|) $h@@5))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@1|) $h@@5))
)))
(assert (forall ((t0@@15 T@U) (t1@@10 T@U) (heap@@4 T@U) (h@@7 T@U) (r@@3 T@U) (rd@@2 T@U) (bx0@@7 T@U) ) (! (= (Apply1 t0@@15 t1@@10 heap@@4 (Handle1 h@@7 r@@3 rd@@2) bx0@@7) (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType h@@7 heap@@4 bx0@@7))
 :pattern ( (Apply1 t0@@15 t1@@10 heap@@4 (Handle1 h@@7 r@@3 rd@@2) bx0@@7))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@6 Tclass._System.object?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@4 T@U) ) (! (= ($Is refType $o@@4 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@4 null) (= (dtype $o@@4) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@4 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((|l#0@@4| T@U) (|l#1@@2| Int) (|l#2@@1| T@U) (|l#3@@0| T@U) (|$l#0#ly#0| T@U) ) (! (= (MapType0Select LayerTypeType HandleTypeType (|lambda#51| |l#0@@4| |l#1@@2| |l#2@@1| |l#3@@0|) |$l#0#ly#0|) (Handle1 (|lambda#47| |l#0@@4| |l#1@@2| |$l#0#ly#0|) |l#2@@1| |l#3@@0|))
 :pattern ( (MapType0Select LayerTypeType HandleTypeType (|lambda#51| |l#0@@4| |l#1@@2| |l#2@@1| |l#3@@0|) |$l#0#ly#0|))
)))
(assert (forall ((f@@10 T@U) (t0@@16 T@U) (t1@@11 T@U) (h@@8 T@U) ) (!  (=> (and ($IsGoodHeap h@@8) ($IsAlloc HandleTypeType f@@10 (Tclass._System.___hFunc1 t0@@16 t1@@11) h@@8)) (forall ((bx0@@8 T@U) ) (!  (=> (and ($IsAllocBox bx0@@8 t0@@16 h@@8) (Requires1 t0@@16 t1@@11 h@@8 f@@10 bx0@@8)) ($IsAllocBox (Apply1 t0@@16 t1@@11 h@@8 f@@10 bx0@@8) t1@@11 h@@8))
 :pattern ( (Apply1 t0@@16 t1@@11 h@@8 f@@10 bx0@@8))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@10 (Tclass._System.___hFunc1 t0@@16 t1@@11) h@@8))
)))
(assert (forall ((|l#0@@5| Bool) (|$l#0#heap#0@@2| T@U) ) (! (= (U_2_bool (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) boolType (|lambda#3| |l#0@@5|) |$l#0#heap#0@@2|)) |l#0@@5|)
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) boolType (|lambda#3| |l#0@@5|) |$l#0#heap#0@@2|))
)))
(assert (forall ((|l#0@@6| T@U) (|$l#0#heap#0@@3| T@U) ) (! (= (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) SetType (|lambda#5| |l#0@@6|) |$l#0#heap#0@@3|) |l#0@@6|)
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) SetType (|lambda#5| |l#0@@6|) |$l#0#heap#0@@3|))
)))
(assert (forall ((|l#0@@7| T@U) (|$l#0#ly#0@@0| T@U) ) (! (= (MapType0Select LayerTypeType HandleTypeType (|lambda#6| |l#0@@7|) |$l#0#ly#0@@0|) |l#0@@7|)
 :pattern ( (MapType0Select LayerTypeType HandleTypeType (|lambda#6| |l#0@@7|) |$l#0#ly#0@@0|))
)))
(assert (forall ((|l#0@@8| Bool) (|$l#0#o#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select refType boolType (|lambda#18| |l#0@@8|) |$l#0#o#0@@0|)) |l#0@@8|)
 :pattern ( (MapType0Select refType boolType (|lambda#18| |l#0@@8|) |$l#0#o#0@@0|))
)))
(assert (forall ((t0@@17 T@U) (heap@@5 T@U) (f@@11 T@U) ) (!  (=> (and ($IsGoodHeap heap@@5) ($Is HandleTypeType f@@11 (Tclass._System.___hFunc0 t0@@17))) (= (|Set#Equal| (Reads0 t0@@17 $OneHeap f@@11) |Set#Empty|) (|Set#Equal| (Reads0 t0@@17 heap@@5 f@@11) |Set#Empty|)))
 :pattern ( (Reads0 t0@@17 $OneHeap f@@11) ($IsGoodHeap heap@@5))
 :pattern ( (Reads0 t0@@17 heap@@5 f@@11))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@12 T@U) (t0@@18 T@U) (t1@@12 T@U) ) (! (= ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@18 t1@@12)) (forall ((h@@9 T@U) (bx0@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@9) ($IsBox bx0@@9 t0@@18)) (Requires1 t0@@18 t1@@12 h@@9 f@@12 bx0@@9)) ($IsBox (Apply1 t0@@18 t1@@12 h@@9 f@@12 bx0@@9) t1@@12))
 :pattern ( (Apply1 t0@@18 t1@@12 h@@9 f@@12 bx0@@9))
)))
 :pattern ( ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@18 t1@@12)))
)))
(assert (forall ((t0@@19 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@13 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is HandleTypeType f@@13 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@7 T@U) (fld@@5 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads0 t0@@19 h0@@5 f@@13) ($Box refType o@@7))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@5 o@@7) fld@@5) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@5 o@@7) fld@@5))))) (= (Requires0 t0@@19 h0@@5 f@@13) (Requires0 t0@@19 h1@@5 f@@13)))
 :pattern ( ($HeapSucc h0@@5 h1@@5) (Requires0 t0@@19 h1@@5 f@@13))
)))
(assert (forall ((t0@@20 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@14 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is HandleTypeType f@@14 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@8 T@U) (fld@@6 T@U) )  (=> (and (or (not (= o@@8 null)) (not true)) (|Set#IsMember| (Reads0 t0@@20 h1@@6 f@@14) ($Box refType o@@8))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@6 o@@8) fld@@6) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@6 o@@8) fld@@6))))) (= (Requires0 t0@@20 h0@@6 f@@14) (Requires0 t0@@20 h1@@6 f@@14)))
 :pattern ( ($HeapSucc h0@@6 h1@@6) (Requires0 t0@@20 h1@@6 f@@14))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 TInt) (and (= ($Box intType ($Unbox intType bx@@8)) bx@@8) ($Is intType ($Unbox intType bx@@8) TInt)))
 :pattern ( ($IsBox bx@@8 TInt))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((t0@@21 T@U) (t1@@13 T@U) (heap@@6 T@U) (h@@10 T@U) (r@@4 T@U) (rd@@3 T@U) (bx0@@10 T@U) ) (!  (=> (U_2_bool (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType boolType r@@4 heap@@6 bx0@@10)) (Requires1 t0@@21 t1@@13 heap@@6 (Handle1 h@@10 r@@4 rd@@3) bx0@@10))
 :pattern ( (Requires1 t0@@21 t1@@13 heap@@6 (Handle1 h@@10 r@@4 rd@@3) bx0@@10))
)))
(assert (forall ((o@@9 T@U) ) (! (<= 0 (_System.array.Length o@@9))
 :pattern ( (_System.array.Length o@@9))
)))
(assert (forall ((v@@3 T@U) (t0@@22 T@U) (h@@11 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@22) h@@11) (forall ((bx@@9 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@9) ($IsAllocBox bx@@9 t0@@22 h@@11))
 :pattern ( (|Set#IsMember| v@@3 bx@@9))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@22) h@@11))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@2|)) |#$T0@@1|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@2|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@3|)) |#$R@@3|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@3|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@4|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@4|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@5|)) |#$R@@5|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@5|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@6|)) |#$T0@@5|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@6|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@7| T@U) ) (! (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@7|)) |#$R@@7|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@7|))
)))
(assert (forall (($o@@5 T@U) ) (! ($Is refType $o@@5 Tclass._System.object?)
 :pattern ( ($Is refType $o@@5 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((i Int) ) (! (= (FDim (IndexField i)) 1)
 :pattern ( (IndexField i))
)))
(assert (forall ((i@@0 Int) ) (! (= (IndexField_Inverse (IndexField i@@0)) i@@0)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((|#$R@@8| T@U) ) (! (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@8|)) |#$R@@8|)
 :pattern ( (Tclass._System.___hFunc0 |#$R@@8|))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@6 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@6)) TInt $h@@6))
 :pattern ( (_System.array.Length $o@@6) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@7 T@U) ($o@@7 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@7)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@7) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@7) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert (forall ((t0@@23 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@15 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is HandleTypeType f@@15 (Tclass._System.___hFunc0 t0@@23))) (forall ((o@@10 T@U) (fld@@7 T@U) )  (=> (and (or (not (= o@@10 null)) (not true)) (|Set#IsMember| (Reads0 t0@@23 h0@@7 f@@15) ($Box refType o@@10))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@7 o@@10) fld@@7) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@7 o@@10) fld@@7))))) (= (Reads0 t0@@23 h0@@7 f@@15) (Reads0 t0@@23 h1@@7 f@@15)))
 :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@23 h1@@7 f@@15))
)))
(assert (forall ((t0@@24 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@16 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is HandleTypeType f@@16 (Tclass._System.___hFunc0 t0@@24))) (forall ((o@@11 T@U) (fld@@8 T@U) )  (=> (and (or (not (= o@@11 null)) (not true)) (|Set#IsMember| (Reads0 t0@@24 h1@@8 f@@16) ($Box refType o@@11))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@8 o@@11) fld@@8) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@8 o@@11) fld@@8))))) (= (Reads0 t0@@24 h0@@8 f@@16) (Reads0 t0@@24 h1@@8 f@@16)))
 :pattern ( ($HeapSucc h0@@8 h1@@8) (Reads0 t0@@24 h1@@8 f@@16))
)))
(assert (forall ((t0@@25 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@17 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is HandleTypeType f@@17 (Tclass._System.___hFunc0 t0@@25))) (forall ((o@@12 T@U) (fld@@9 T@U) )  (=> (and (or (not (= o@@12 null)) (not true)) (|Set#IsMember| (Reads0 t0@@25 h0@@9 f@@17) ($Box refType o@@12))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@9 o@@12) fld@@9) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@9 o@@12) fld@@9))))) (= (Apply0 t0@@25 h0@@9 f@@17) (Apply0 t0@@25 h1@@9 f@@17)))
 :pattern ( ($HeapSucc h0@@9 h1@@9) (Apply0 t0@@25 h1@@9 f@@17))
)))
(assert (forall ((t0@@26 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@18 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is HandleTypeType f@@18 (Tclass._System.___hFunc0 t0@@26))) (forall ((o@@13 T@U) (fld@@10 T@U) )  (=> (and (or (not (= o@@13 null)) (not true)) (|Set#IsMember| (Reads0 t0@@26 h1@@10 f@@18) ($Box refType o@@13))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@10 o@@13) fld@@10) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@10 o@@13) fld@@10))))) (= (Apply0 t0@@26 h0@@10 f@@18) (Apply0 t0@@26 h1@@10 f@@18)))
 :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@26 h1@@10 f@@18))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@9| T@U) (|f#0@@1| T@U) ) (! (= ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@9|))  (and ($Is HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@9|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@7|) (Requires1 |#$T0@@7| |#$R@@9| $OneHeap |f#0@@1| |x0#0|)))))
 :pattern ( ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@9|)))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@10| T@U) (|f#0@@2| T@U) ) (! (= ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@10|))  (and ($Is HandleTypeType |f#0@@2| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@10|)) (forall ((|x0#0@@0| T@U) )  (=> ($IsBox |x0#0@@0| |#$T0@@8|) (|Set#Equal| (Reads1 |#$T0@@8| |#$R@@10| $OneHeap |f#0@@2| |x0#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@10|)))
)))
(assert (forall ((f@@19 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@19 ($LS ly@@0)) (AtLayer A@@0 f@@19 ly@@0))
 :pattern ( (AtLayer A@@0 f@@19 ($LS ly@@0)))
)))
(assert (forall ((f@@20 T@U) (t0@@27 T@U) (t1@@14 T@U) (h@@12 T@U) ) (!  (=> ($IsGoodHeap h@@12) (= ($IsAlloc HandleTypeType f@@20 (Tclass._System.___hFunc1 t0@@27 t1@@14) h@@12) (forall ((bx0@@11 T@U) ) (!  (=> (and (and ($IsBox bx0@@11 t0@@27) ($IsAllocBox bx0@@11 t0@@27 h@@12)) (Requires1 t0@@27 t1@@14 h@@12 f@@20 bx0@@11)) (forall ((r@@5 T@U) ) (!  (=> (and (or (not (= r@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@27 t1@@14 h@@12 f@@20 bx0@@11) ($Box refType r@@5))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@12 r@@5) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@27 t1@@14 h@@12 f@@20 bx0@@11) ($Box refType r@@5)))
)))
 :pattern ( (Apply1 t0@@27 t1@@14 h@@12 f@@20 bx0@@11))
 :pattern ( (Reads1 t0@@27 t1@@14 h@@12 f@@20 bx0@@11))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@20 (Tclass._System.___hFunc1 t0@@27 t1@@14) h@@12))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@11| T@U) (bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@11|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@10)) bx@@10) ($Is HandleTypeType ($Unbox HandleTypeType bx@@10) (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@11|))))
 :pattern ( ($IsBox bx@@10 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@11|)))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@12| T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@12|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@11)) bx@@11) ($Is HandleTypeType ($Unbox HandleTypeType bx@@11) (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@12|))))
 :pattern ( ($IsBox bx@@11 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@12|)))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@13| T@U) (bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@13|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@12)) bx@@12) ($Is HandleTypeType ($Unbox HandleTypeType bx@@12) (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@13|))))
 :pattern ( ($IsBox bx@@12 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@13|)))
)))
(assert (forall ((|l#0@@9| T@U) (|l#1@@3| T@U) (|l#2@@2| T@U) (|l#3@@1| Bool) ($o@@8 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@9| |l#1@@3| |l#2@@2| |l#3@@1|) $o@@8 $f@@0))  (=> (and (or (not (= $o@@8 |l#0@@9|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@3| $o@@8) |l#2@@2|)))) |l#3@@1|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@9| |l#1@@3| |l#2@@2| |l#3@@1|) $o@@8 $f@@0))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@14| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@14|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@14|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@14|))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@15| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@15|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@15|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@15|))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@16| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@16|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@16|)) |tytagFamily$_#TotalFunc1|))
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@16|))
)))
(assert (forall ((t0@@28 T@U) (t1@@15 T@U) (heap@@7 T@U) (f@@21 T@U) (bx0@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@7) (and ($IsBox bx0@@12 t0@@28) ($Is HandleTypeType f@@21 (Tclass._System.___hFunc1 t0@@28 t1@@15)))) (|Set#Equal| (Reads1 t0@@28 t1@@15 $OneHeap f@@21 bx0@@12) |Set#Empty|)) (= (Requires1 t0@@28 t1@@15 $OneHeap f@@21 bx0@@12) (Requires1 t0@@28 t1@@15 heap@@7 f@@21 bx0@@12)))
 :pattern ( (Requires1 t0@@28 t1@@15 $OneHeap f@@21 bx0@@12) ($IsGoodHeap heap@@7))
 :pattern ( (Requires1 t0@@28 t1@@15 heap@@7 f@@21 bx0@@12))
)))
(assert (forall ((f@@22 T@U) (t0@@29 T@U) ) (! (= ($Is HandleTypeType f@@22 (Tclass._System.___hFunc0 t0@@29)) (forall ((h@@13 T@U) ) (!  (=> (and ($IsGoodHeap h@@13) (Requires0 t0@@29 h@@13 f@@22)) ($IsBox (Apply0 t0@@29 h@@13 f@@22) t0@@29))
 :pattern ( (Apply0 t0@@29 h@@13 f@@22))
)))
 :pattern ( ($Is HandleTypeType f@@22 (Tclass._System.___hFunc0 t0@@29)))
)))
(assert (forall ((bx@@13 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@13 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@13)) bx@@13) ($Is SetType ($Unbox SetType bx@@13) (TSet t@@5))))
 :pattern ( ($IsBox bx@@13 (TSet t@@5)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@14)) bx@@14) ($Is refType ($Unbox refType bx@@14) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@14 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@15)) bx@@15) ($Is refType ($Unbox refType bx@@15) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@15 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (forall ((|#$R@@17| T@U) (bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 (Tclass._System.___hFunc0 |#$R@@17|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@16)) bx@@16) ($Is HandleTypeType ($Unbox HandleTypeType bx@@16) (Tclass._System.___hFunc0 |#$R@@17|))))
 :pattern ( ($IsBox bx@@16 (Tclass._System.___hFunc0 |#$R@@17|)))
)))
(assert (forall ((h@@14 T@U) (r@@6 T@U) (f@@23 T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@14 r@@6 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@14 r@@6) f@@23 x@@6))) ($HeapSucc h@@14 (MapType0Store refType (MapType0Type FieldType BoxType) h@@14 r@@6 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@14 r@@6) f@@23 x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@14 r@@6 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@14 r@@6) f@@23 x@@6)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((f@@24 T@U) (t0@@30 T@U) (h@@15 T@U) ) (!  (=> (and ($IsGoodHeap h@@15) ($IsAlloc HandleTypeType f@@24 (Tclass._System.___hFunc0 t0@@30) h@@15)) (=> (Requires0 t0@@30 h@@15 f@@24) ($IsAllocBox (Apply0 t0@@30 h@@15 f@@24) t0@@30 h@@15)))
 :pattern ( ($IsAlloc HandleTypeType f@@24 (Tclass._System.___hFunc0 t0@@30) h@@15))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@14 T@U) ) (! (= (|Set#IsMember| a@@1 o@@14) (|Set#IsMember| b@@1 o@@14))
 :pattern ( (|Set#IsMember| a@@1 o@@14))
 :pattern ( (|Set#IsMember| b@@1 o@@14))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((f@@25 T@U) (t0@@31 T@U) (u0@@3 T@U) ) (!  (=> (and ($Is HandleTypeType f@@25 (Tclass._System.___hFunc0 t0@@31)) (forall ((bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 t0@@31) ($IsBox bx@@17 u0@@3))
 :pattern ( ($IsBox bx@@17 t0@@31))
 :pattern ( ($IsBox bx@@17 u0@@3))
))) ($Is HandleTypeType f@@25 (Tclass._System.___hFunc0 u0@@3)))
 :pattern ( ($Is HandleTypeType f@@25 (Tclass._System.___hFunc0 t0@@31)) ($Is HandleTypeType f@@25 (Tclass._System.___hFunc0 u0@@3)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((t0@@32 T@U) (heap@@8 T@U) (h@@16 T@U) (r@@7 T@U) (rd@@4 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) boolType r@@7 heap@@8)) (Requires0 t0@@32 heap@@8 (Handle0 h@@16 r@@7 rd@@4)))
 :pattern ( (Requires0 t0@@32 heap@@8 (Handle0 h@@16 r@@7 rd@@4)))
)))
(assert (forall ((h@@17 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@17)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@17))
)))
(assert (forall ((|l#0@@10| T@U) (|$l#0#heap#0@@4| T@U) (|$l#0#arr#0@@1| T@U) ) (! (= (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType SetType (|lambda#50| |l#0@@10|) |$l#0#heap#0@@4| |$l#0#arr#0@@1|) |l#0@@10|)
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType SetType (|lambda#50| |l#0@@10|) |$l#0#heap#0@@4| |$l#0#arr#0@@1|))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |arr#0@0| () T@U)
(declare-fun |$_Frame#l1@0| () T@U)
(declare-fun |lambdaResult#1| () Int)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun |$lambdaHeap#1@0| () T@U)
(declare-fun |lambdaResult#0| () T@U)
(declare-fun $LZ () T@U)
(declare-fun |$_Frame#l0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |mkGet#0@0| () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $nw@1 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |get#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$rhs#0@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |$rhs#1@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |$rhs#2@0| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun |k#0| () T@U)
(declare-fun |mkGet#0| () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |b#0| () T@U)
(declare-fun |get#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 37) (let ((anon6_correct true))
(let ((anon14_Else_correct  (=> (and (>= 0 (_System.array.Length |arr#0@0|)) (= (ControlFlow 0 30) 25)) anon6_correct)))
(let ((anon14_Then_correct  (=> (> (_System.array.Length |arr#0@0|) 0) (and (=> (= (ControlFlow 0 26) (- 0 29)) (or (not (= |arr#0@0| null)) (not true))) (=> (or (not (= |arr#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 26) (- 0 28)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |arr#0@0|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |arr#0@0|))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (U_2_bool (MapType1Select refType FieldType boolType |$_Frame#l1@0| |arr#0@0| (IndexField (LitInt 0))))) (=> (U_2_bool (MapType1Select refType FieldType boolType |$_Frame#l1@0| |arr#0@0| (IndexField (LitInt 0)))) (=> (= |lambdaResult#1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |$lambdaHeap#0@0| |arr#0@0|) (IndexField (LitInt 0)))))) (=> (and ($Is intType (int_2_U |lambdaResult#1|) TInt) (= (ControlFlow 0 26) 25)) anon6_correct)))))))))))
(let ((anon13_Then_correct  (=> (= |$_Frame#l1@0| (|lambda#7| null |$lambdaHeap#1@0| alloc |arr#0@0|)) (and (=> (= (ControlFlow 0 31) (- 0 32)) (or (not (= |arr#0@0| null)) (not true))) (=> (or (not (= |arr#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 31) 26) anon14_Then_correct) (=> (= (ControlFlow 0 31) 30) anon14_Else_correct)))))))
(let ((anon13_Else_correct true))
(let ((anon12_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#1@0|) (or (= |$lambdaHeap#0@0| |$lambdaHeap#1@0|) ($HeapSucc |$lambdaHeap#0@0| |$lambdaHeap#1@0|))) (and (=> (= (ControlFlow 0 33) 31) anon13_Then_correct) (=> (= (ControlFlow 0 33) 24) anon13_Else_correct)))))
(let ((anon8_correct true))
(let ((anon12_Else_correct  (=> (= |lambdaResult#0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#6| (Handle0 (|lambda#2| |arr#0@0| (IndexField (LitInt 0))) (|lambda#3| (> (_System.array.Length |arr#0@0|) 0)) (|lambda#5| (SetRef_to_SetBox (|lambda#4| |arr#0@0|))))) ($LS $LZ)))) (=> (and ($Is HandleTypeType |lambdaResult#0| (Tclass._System.___hFunc0 TInt)) (= (ControlFlow 0 23) 21)) anon8_correct))))
(let ((anon11_Then_correct  (=> (and (and ($Is refType |arr#0@0| (Tclass._System.array TInt)) ($IsAlloc refType |arr#0@0| (Tclass._System.array TInt) |$lambdaHeap#0@0|)) (= |$_Frame#l0@0| (|lambda#0| null |$lambdaHeap#0@0| alloc false))) (and (=> (= (ControlFlow 0 34) 33) anon12_Then_correct) (=> (= (ControlFlow 0 34) 23) anon12_Else_correct)))))
(let ((anon11_Else_correct  (=> (and (not (and ($Is refType |arr#0@0| (Tclass._System.array TInt)) ($IsAlloc refType |arr#0@0| (Tclass._System.array TInt) |$lambdaHeap#0@0|))) (= (ControlFlow 0 22) 21)) anon8_correct)))
(let ((anon10_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap |$lambdaHeap#0@0|) ($HeapSucc $Heap |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 35) 34) anon11_Then_correct) (=> (= (ControlFlow 0 35) 22) anon11_Else_correct)))))
(let ((anon10_Else_correct  (=> (= |mkGet#0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#51| (IndexField (LitInt 0)) 0 (|lambda#48| (Tclass._System.array TInt)) (|lambda#50| (SetRef_to_SetBox (|lambda#18| false)))) ($LS $LZ)))) (and (=> (= (ControlFlow 0 2) (- 0 20)) (<= 0 (LitInt 1))) (=> (<= 0 (LitInt 1)) (=> (and (and (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 (Tclass._System.array? TInt))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc))))) (and (and (= (_System.array.Length $nw@0) (LitInt 1)) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)))) (and (=> (= (ControlFlow 0 2) (- 0 19)) (<= 0 (LitInt 1))) (=> (<= 0 (LitInt 1)) (=> (and (and (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 (Tclass._System.array? TInt))) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc)))) (= (_System.array.Length $nw@1) (LitInt 1)))) (and (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc ($Box boolType (bool_2_U true))))) ($IsGoodHeap $Heap@1)) (and ($IsHeapAnchor $Heap@1) (= |get#0@0| ($Unbox HandleTypeType (Apply1 (Tclass._System.array TInt) (Tclass._System.___hFunc0 TInt) $Heap@1 |mkGet#0@0| ($Box refType $nw@0))))))) (and (=> (= (ControlFlow 0 2) (- 0 18)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 17)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@0)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@0))) (and (=> (= (ControlFlow 0 2) (- 0 16)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 (IndexField (LitInt 0))))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 (IndexField (LitInt 0)))) (=> (= |$rhs#0@0| (LitInt 0)) (=> (and (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 0)) ($Box intType (int_2_U |$rhs#0@0|))))) ($IsGoodHeap $Heap@2)) (and (=> (= (ControlFlow 0 2) (- 0 15)) (or (not (= $nw@1 null)) (not true))) (=> (or (not (= $nw@1 null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 14)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@1)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@1))) (and (=> (= (ControlFlow 0 2) (- 0 13)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@1 (IndexField (LitInt 0))))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@1 (IndexField (LitInt 0)))) (=> (= |$rhs#1@0| (LitInt 10)) (=> (and (= $Heap@3 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField (LitInt 0)) ($Box intType (int_2_U |$rhs#1@0|))))) ($IsGoodHeap $Heap@3)) (and (=> (= (ControlFlow 0 2) (- 0 12)) (Requires0 TInt $Heap@3 |get#0@0|)) (=> (Requires0 TInt $Heap@3 |get#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 11)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (= (U_2_int ($Unbox intType (Apply0 TInt $Heap@3 |get#0@0|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField (LitInt 0))))))) (=> (= (U_2_int ($Unbox intType (Apply0 TInt $Heap@3 |get#0@0|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (or (not (= $nw@1 null)) (not true))) (=> (or (not (= $nw@1 null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@1)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@1))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@1 (IndexField (LitInt 0))))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@1 (IndexField (LitInt 0)))) (=> (= |$rhs#2@0| (LitInt 20)) (=> (and (= $Heap@4 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@3 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@1) (IndexField (LitInt 0)) ($Box intType (int_2_U |$rhs#2@0|))))) ($IsGoodHeap $Heap@4)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (Requires0 TInt $Heap@4 |get#0@0|)) (=> (Requires0 TInt $Heap@4 |get#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@0)))) (=> (= (ControlFlow 0 2) (- 0 1)) (= (U_2_int ($Unbox intType (Apply0 TInt $Heap@4 |get#0@0|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $nw@0) (IndexField (LitInt 0))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 36) 35) anon10_Then_correct) (=> (= (ControlFlow 0 36) 2) anon10_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is HandleTypeType |k#0| (Tclass._System.___hFunc1 TInt TInt)) ($IsAlloc HandleTypeType |k#0| (Tclass._System.___hFunc1 TInt TInt) $Heap))) (and (and ($Is HandleTypeType |mkGet#0| (Tclass._System.___hTotalFunc1 (Tclass._System.array TInt) (Tclass._System.___hFunc0 TInt))) ($IsAlloc HandleTypeType |mkGet#0| (Tclass._System.___hTotalFunc1 (Tclass._System.array TInt) (Tclass._System.___hFunc0 TInt)) $Heap)) true)) (=> (and (and (and (and ($Is refType |a#0| (Tclass._System.array TInt)) ($IsAlloc refType |a#0| (Tclass._System.array TInt) $Heap)) true) (and (and ($Is refType |b#0| (Tclass._System.array TInt)) ($IsAlloc refType |b#0| (Tclass._System.array TInt) $Heap)) true)) (and (and (and ($Is HandleTypeType |get#0| (Tclass._System.___hFunc0 TInt)) ($IsAlloc HandleTypeType |get#0| (Tclass._System.___hFunc0 TInt) $Heap)) true) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 37) 36)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
