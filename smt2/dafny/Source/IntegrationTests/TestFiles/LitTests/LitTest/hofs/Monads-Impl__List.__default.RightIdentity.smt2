(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass.List.M () T@U)
(declare-fun |##List.M.Cons| () T@U)
(declare-fun |##List.M.Nil| () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun tytagFamily$M () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun List.__default.Bind (T@U T@U T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun HandleTypeType () T@T)
(declare-fun |List.__default.Bind#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass.List.M (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun |List.__default.Map#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |List.__default.Join#canCall| (T@U T@U) Bool)
(declare-fun List.__default.Map (T@U T@U T@U T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun List.__default.Join (T@U T@U T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun List.M.Cons_q (T@U) Bool)
(declare-fun List.M.tl (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun List.M.hd (T@U) T@U)
(declare-fun |#List.M.Cons| (T@U T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |#List.M.Nil| () T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |List.M#Equal| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun List.__default.Return (T@U T@U) T@U)
(declare-fun |List.__default.Return#canCall| (T@U T@U) Bool)
(declare-fun List.M.Nil_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |List.__default.Return#Handle| (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun |List.__default.Concat#canCall| (T@U T@U T@U) Bool)
(declare-fun List.__default.Concat (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun |$IsA#List.M| (T@U) Bool)
(declare-fun |List.__default.Return#requires| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass.List.M_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass.List.M |##List.M.Cons| |##List.M.Nil| |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| tytagFamily$M)
)
(assert  (and (= (Ctor DatatypeTypeType) 3) (= (Ctor HandleTypeType) 4)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((List._default.Bind$A T@U) (List._default.Bind$B T@U) (|m#0| T@U) (|f#0| T@U) ) (!  (=> (or (|List.__default.Bind#canCall| List._default.Bind$A List._default.Bind$B (Lit DatatypeTypeType |m#0|) (Lit HandleTypeType |f#0|)) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |m#0| (Tclass.List.M List._default.Bind$A)) ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc1 List._default.Bind$A (Tclass.List.M List._default.Bind$B)))))) (and (and (|List.__default.Map#canCall| List._default.Bind$A (Tclass.List.M List._default.Bind$B) (Lit DatatypeTypeType |m#0|) (Lit HandleTypeType |f#0|)) (|List.__default.Join#canCall| List._default.Bind$B (Lit DatatypeTypeType (List.__default.Map List._default.Bind$A (Tclass.List.M List._default.Bind$B) ($LS $LZ) (Lit DatatypeTypeType |m#0|) (Lit HandleTypeType |f#0|))))) (= (List.__default.Bind List._default.Bind$A List._default.Bind$B (Lit DatatypeTypeType |m#0|) (Lit HandleTypeType |f#0|)) (Lit DatatypeTypeType (List.__default.Join List._default.Bind$B ($LS $LZ) (Lit DatatypeTypeType (List.__default.Map List._default.Bind$A (Tclass.List.M List._default.Bind$B) ($LS $LZ) (Lit DatatypeTypeType |m#0|) (Lit HandleTypeType |f#0|))))))))
 :weight 3
 :pattern ( (List.__default.Bind List._default.Bind$A List._default.Bind$B (Lit DatatypeTypeType |m#0|) (Lit HandleTypeType |f#0|)))
))))
(assert (= (Ctor BoxType) 5))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Map$A T@U) (List._default.Map$B T@U) ($ly T@U) ($Heap T@U) (|xs#0| T@U) (|f#0@@0| T@U) ) (!  (=> (or (|List.__default.Map#canCall| List._default.Map$A List._default.Map$B (Lit DatatypeTypeType |xs#0|) |f#0@@0|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is DatatypeTypeType |xs#0| (Tclass.List.M List._default.Map$A))) ($Is HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 List._default.Map$A List._default.Map$B))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (List.M.Cons_q (Lit DatatypeTypeType |xs#0|))))) (let ((|xs#4| (Lit DatatypeTypeType (List.M.tl (Lit DatatypeTypeType |xs#0|)))))
(|List.__default.Map#canCall| List._default.Map$A List._default.Map$B |xs#4| |f#0@@0|))) (= (List.__default.Map List._default.Map$A List._default.Map$B ($LS $ly) (Lit DatatypeTypeType |xs#0|) |f#0@@0|) (ite (List.M.Cons_q (Lit DatatypeTypeType |xs#0|)) (let ((|xs#3| (Lit DatatypeTypeType (List.M.tl (Lit DatatypeTypeType |xs#0|)))))
(let ((|x#2| (Lit BoxType (List.M.hd (Lit DatatypeTypeType |xs#0|)))))
(|#List.M.Cons| (Apply1 List._default.Map$A List._default.Map$B $Heap |f#0@@0| |x#2|) (List.__default.Map List._default.Map$A List._default.Map$B ($LS $ly) |xs#3| |f#0@@0|)))) |#List.M.Nil|))))
 :weight 3
 :pattern ( (List.__default.Map List._default.Map$A List._default.Map$B ($LS $ly) (Lit DatatypeTypeType |xs#0|) |f#0@@0|) ($IsGoodHeap $Heap))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Map$A@@0 T@U) (List._default.Map$B@@0 T@U) ($ly@@0 T@U) (|xs#0@@0| T@U) (|f#0@@1| T@U) ) (!  (=> (or (|List.__default.Map#canCall| List._default.Map$A@@0 List._default.Map$B@@0 |xs#0@@0| |f#0@@1|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@0| (Tclass.List.M List._default.Map$A@@0)) ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 List._default.Map$A@@0 List._default.Map$B@@0))))) ($Is DatatypeTypeType (List.__default.Map List._default.Map$A@@0 List._default.Map$B@@0 $ly@@0 |xs#0@@0| |f#0@@1|) (Tclass.List.M List._default.Map$B@@0)))
 :pattern ( (List.__default.Map List._default.Map$A@@0 List._default.Map$B@@0 $ly@@0 |xs#0@@0| |f#0@@1|))
))))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((List._default.Join$A T@U) ($ly@@1 T@U) (|xss#0| T@U) ) (! (= (List.__default.Join List._default.Join$A ($LS $ly@@1) |xss#0|) (List.__default.Join List._default.Join$A $ly@@1 |xss#0|))
 :pattern ( (List.__default.Join List._default.Join$A ($LS $ly@@1) |xss#0|))
)))
(assert (= (DatatypeCtorId |#List.M.Nil|) |##List.M.Nil|))
(assert (forall ((f T@U) (t0 T@U) (t1 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) (forall ((bx T@U) ) (!  (=> ($IsBox bx u0) ($IsBox bx t0))
 :pattern ( ($IsBox bx u0))
 :pattern ( ($IsBox bx t0))
))) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 t1) ($IsBox bx@@0 u1))
 :pattern ( ($IsBox bx@@0 t1))
 :pattern ( ($IsBox bx@@0 u1))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
)))
(assert (forall ((List.M$A T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#List.M.Nil| (Tclass.List.M List.M$A) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#List.M.Nil| (Tclass.List.M List.M$A) $h))
)))
(assert (forall ((List.M$A@@0 T@U) ) (! ($Is DatatypeTypeType |#List.M.Nil| (Tclass.List.M List.M$A@@0))
 :pattern ( ($Is DatatypeTypeType |#List.M.Nil| (Tclass.List.M List.M$A@@0)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|List.M#Equal| a b) (= a b))
 :pattern ( (|List.M#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (List.M.Cons_q a@@0) (List.M.Cons_q b@@0)) (= (|List.M#Equal| a@@0 b@@0)  (and (= (List.M.hd a@@0) (List.M.hd b@@0)) (|List.M#Equal| (List.M.tl a@@0) (List.M.tl b@@0)))))
 :pattern ( (|List.M#Equal| a@@0 b@@0) (List.M.Cons_q a@@0))
 :pattern ( (|List.M#Equal| a@@0 b@@0) (List.M.Cons_q b@@0))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((t0@@0 T@U) (t1@@0 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@0) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@0 t1@@0)))) (= (|Set#Equal| (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@0 t1@@0 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@0 t1@@0 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@0 t1@@0 heap f@@0 bx0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (List._default.Map$A@@1 T@U) (List._default.Map$B@@1 T@U) ($ly@@2 T@U) (|xs#0@@1| T@U) (|f#0@@2| T@U) ) (!  (=> (and (or (|List.__default.Map#canCall| List._default.Map$A@@1 List._default.Map$B@@1 |xs#0@@1| |f#0@@2|) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0@@1| (Tclass.List.M List._default.Map$A@@1)) ($IsAlloc DatatypeTypeType |xs#0@@1| (Tclass.List.M List._default.Map$A@@1) $Heap@@0)) (and ($Is HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc1 List._default.Map$A@@1 List._default.Map$B@@1)) ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc1 List._default.Map$A@@1 List._default.Map$B@@1) $Heap@@0))))) ($IsGoodHeap $Heap@@0)) ($IsAlloc DatatypeTypeType (List.__default.Map List._default.Map$A@@1 List._default.Map$B@@1 $ly@@2 |xs#0@@1| |f#0@@2|) (Tclass.List.M List._default.Map$B@@1) $Heap@@0))
 :pattern ( ($IsAlloc DatatypeTypeType (List.__default.Map List._default.Map$A@@1 List._default.Map$B@@1 $ly@@2 |xs#0@@1| |f#0@@2|) (Tclass.List.M List._default.Map$B@@1) $Heap@@0))
))))
(assert (forall ((List.M$A@@1 T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#List.M.Cons| |a#2#0#0| |a#2#1#0|) (Tclass.List.M List.M$A@@1))  (and ($IsBox |a#2#0#0| List.M$A@@1) ($Is DatatypeTypeType |a#2#1#0| (Tclass.List.M List.M$A@@1))))
 :pattern ( ($Is DatatypeTypeType (|#List.M.Cons| |a#2#0#0| |a#2#1#0|) (Tclass.List.M List.M$A@@1)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Return$A T@U) (|x#0| T@U) ) (!  (=> (or (|List.__default.Return#canCall| List._default.Return$A |x#0|) (and (< 1 $FunctionContextHeight) ($IsBox |x#0| List._default.Return$A))) ($Is DatatypeTypeType (List.__default.Return List._default.Return$A |x#0|) (Tclass.List.M List._default.Return$A)))
 :pattern ( (List.__default.Return List._default.Return$A |x#0|))
))))
(assert (forall ((d T@U) ) (! (= (List.M.Cons_q d) (= (DatatypeCtorId d) |##List.M.Cons|))
 :pattern ( (List.M.Cons_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (List.M.Nil_q d@@0) (= (DatatypeCtorId d@@0) |##List.M.Nil|))
 :pattern ( (List.M.Nil_q d@@0))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (List.M.Cons_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#List.M.Cons| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (List.M.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (List.M.Nil_q d@@2) (= d@@2 |#List.M.Nil|))
 :pattern ( (List.M.Nil_q d@@2))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((List._default.Bind$A@@0 T@U) (List._default.Bind$B@@0 T@U) (|m#0@@0| T@U) (|f#0@@3| T@U) ) (!  (=> (or (|List.__default.Bind#canCall| List._default.Bind$A@@0 List._default.Bind$B@@0 |m#0@@0| |f#0@@3|) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |m#0@@0| (Tclass.List.M List._default.Bind$A@@0)) ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc1 List._default.Bind$A@@0 (Tclass.List.M List._default.Bind$B@@0)))))) (and (and (|List.__default.Map#canCall| List._default.Bind$A@@0 (Tclass.List.M List._default.Bind$B@@0) |m#0@@0| |f#0@@3|) (|List.__default.Join#canCall| List._default.Bind$B@@0 (List.__default.Map List._default.Bind$A@@0 (Tclass.List.M List._default.Bind$B@@0) ($LS $LZ) |m#0@@0| |f#0@@3|))) (= (List.__default.Bind List._default.Bind$A@@0 List._default.Bind$B@@0 |m#0@@0| |f#0@@3|) (List.__default.Join List._default.Bind$B@@0 ($LS $LZ) (List.__default.Map List._default.Bind$A@@0 (Tclass.List.M List._default.Bind$B@@0) ($LS $LZ) |m#0@@0| |f#0@@3|)))))
 :pattern ( (List.__default.Bind List._default.Bind$A@@0 List._default.Bind$B@@0 |m#0@@0| |f#0@@3|))
))))
(assert (forall (($bx T@U) (List._default.Return$A@@0 T@U) ($heap T@U) (|$fh$0x#0| T@U) ) (! (= (|Set#IsMember| (Reads1 List._default.Return$A@@0 (Tclass.List.M List._default.Return$A@@0) $heap (|List.__default.Return#Handle| List._default.Return$A@@0) |$fh$0x#0|) $bx) false)
 :pattern ( (|Set#IsMember| (Reads1 List._default.Return$A@@0 (Tclass.List.M List._default.Return$A@@0) $heap (|List.__default.Return#Handle| List._default.Return$A@@0) |$fh$0x#0|) $bx))
)))
(assert (forall ((List.M$A@@2 T@U) ) (!  (and (= (Tag (Tclass.List.M List.M$A@@2)) Tagclass.List.M) (= (TagFamily (Tclass.List.M List.M$A@@2)) tytagFamily$M))
 :pattern ( (Tclass.List.M List.M$A@@2))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((List._default.Bind$A@@1 T@U) (List._default.Bind$B@@1 T@U) (|m#0@@1| T@U) (|f#0@@4| T@U) ) (!  (=> (or (|List.__default.Bind#canCall| List._default.Bind$A@@1 List._default.Bind$B@@1 (Lit DatatypeTypeType |m#0@@1|) |f#0@@4|) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |m#0@@1| (Tclass.List.M List._default.Bind$A@@1)) ($Is HandleTypeType |f#0@@4| (Tclass._System.___hTotalFunc1 List._default.Bind$A@@1 (Tclass.List.M List._default.Bind$B@@1)))))) (and (and (|List.__default.Map#canCall| List._default.Bind$A@@1 (Tclass.List.M List._default.Bind$B@@1) (Lit DatatypeTypeType |m#0@@1|) |f#0@@4|) (|List.__default.Join#canCall| List._default.Bind$B@@1 (List.__default.Map List._default.Bind$A@@1 (Tclass.List.M List._default.Bind$B@@1) ($LS $LZ) (Lit DatatypeTypeType |m#0@@1|) |f#0@@4|))) (= (List.__default.Bind List._default.Bind$A@@1 List._default.Bind$B@@1 (Lit DatatypeTypeType |m#0@@1|) |f#0@@4|) (List.__default.Join List._default.Bind$B@@1 ($LS $LZ) (List.__default.Map List._default.Bind$A@@1 (Tclass.List.M List._default.Bind$B@@1) ($LS $LZ) (Lit DatatypeTypeType |m#0@@1|) |f#0@@4|)))))
 :weight 3
 :pattern ( (List.__default.Bind List._default.Bind$A@@1 List._default.Bind$B@@1 (Lit DatatypeTypeType |m#0@@1|) |f#0@@4|))
))))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) (|f#0@@5| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@5| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@0) ($IsAlloc HandleTypeType |f#0@@5| (Tclass._System.___hFunc1 |#$T0| |#$R|) $h@@0))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@5| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@0))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) (|f#0@@6| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@6| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@1) ($IsAlloc HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc1 |#$T0@@0| |#$R@@0|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@6| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@1))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((List._default.Join$A@@0 T@U) ($ly@@3 T@U) (|xss#0@@0| T@U) ) (!  (=> (or (|List.__default.Join#canCall| List._default.Join$A@@0 |xss#0@@0|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |xss#0@@0| (Tclass.List.M (Tclass.List.M List._default.Join$A@@0))))) (and (=> (List.M.Cons_q |xss#0@@0|) (let ((|xss#2| (List.M.tl |xss#0@@0|)))
(let ((|xs#1| ($Unbox DatatypeTypeType (List.M.hd |xss#0@@0|))))
 (and (|List.__default.Join#canCall| List._default.Join$A@@0 |xss#2|) (|List.__default.Concat#canCall| List._default.Join$A@@0 |xs#1| (List.__default.Join List._default.Join$A@@0 $ly@@3 |xss#2|)))))) (= (List.__default.Join List._default.Join$A@@0 ($LS $ly@@3) |xss#0@@0|) (ite (List.M.Cons_q |xss#0@@0|) (let ((|xss#1| (List.M.tl |xss#0@@0|)))
(let ((|xs#0@@2| ($Unbox DatatypeTypeType (List.M.hd |xss#0@@0|))))
(List.__default.Concat List._default.Join$A@@0 ($LS $LZ) |xs#0@@2| (List.__default.Join List._default.Join$A@@0 $ly@@3 |xss#1|)))) |#List.M.Nil|))))
 :pattern ( (List.__default.Join List._default.Join$A@@0 ($LS $ly@@3) |xss#0@@0|))
))))
(assert (forall ((f@@1 T@U) (t0@@1 T@U) (t1@@1 T@U) (h@@0 T@U) ) (!  (=> (and ($IsGoodHeap h@@0) ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@1 t1@@1) h@@0)) (forall ((bx0@@0 T@U) ) (!  (=> (and ($IsAllocBox bx0@@0 t0@@1 h@@0) (Requires1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0)) ($IsAllocBox (Apply1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0) t1@@1 h@@0))
 :pattern ( (Apply1 t0@@1 t1@@1 h@@0 f@@1 bx0@@0))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@1 t1@@1) h@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Map$A@@2 T@U) (List._default.Map$B@@2 T@U) ($ly@@4 T@U) ($Heap@@1 T@U) (|xs#0@@3| T@U) (|f#0@@7| T@U) ) (!  (=> (or (|List.__default.Map#canCall| List._default.Map$A@@2 List._default.Map$B@@2 |xs#0@@3| |f#0@@7|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) ($Is DatatypeTypeType |xs#0@@3| (Tclass.List.M List._default.Map$A@@2))) ($Is HandleTypeType |f#0@@7| (Tclass._System.___hTotalFunc1 List._default.Map$A@@2 List._default.Map$B@@2))))) (and (=> (List.M.Cons_q |xs#0@@3|) (let ((|xs#2| (List.M.tl |xs#0@@3|)))
(|List.__default.Map#canCall| List._default.Map$A@@2 List._default.Map$B@@2 |xs#2| |f#0@@7|))) (= (List.__default.Map List._default.Map$A@@2 List._default.Map$B@@2 ($LS $ly@@4) |xs#0@@3| |f#0@@7|) (ite (List.M.Cons_q |xs#0@@3|) (let ((|xs#1@@0| (List.M.tl |xs#0@@3|)))
(let ((|x#0@@0| (List.M.hd |xs#0@@3|)))
(|#List.M.Cons| (Apply1 List._default.Map$A@@2 List._default.Map$B@@2 $Heap@@1 |f#0@@7| |x#0@@0|) (List.__default.Map List._default.Map$A@@2 List._default.Map$B@@2 $ly@@4 |xs#1@@0| |f#0@@7|)))) |#List.M.Nil|))))
 :pattern ( (List.__default.Map List._default.Map$A@@2 List._default.Map$B@@2 ($LS $ly@@4) |xs#0@@3| |f#0@@7|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#List.M| d@@3) (or (List.M.Cons_q d@@3) (List.M.Nil_q d@@3)))
 :pattern ( (|$IsA#List.M| d@@3))
)))
(assert (forall ((List._default.Return$A@@1 T@U) ($heap@@0 T@U) (|$fh$0x#0@@0| T@U) ) (! (= (Requires1 List._default.Return$A@@1 (Tclass.List.M List._default.Return$A@@1) $heap@@0 (|List.__default.Return#Handle| List._default.Return$A@@1) |$fh$0x#0@@0|) (|List.__default.Return#requires| List._default.Return$A@@1 |$fh$0x#0@@0|))
 :pattern ( (Requires1 List._default.Return$A@@1 (Tclass.List.M List._default.Return$A@@1) $heap@@0 (|List.__default.Return#Handle| List._default.Return$A@@1) |$fh$0x#0@@0|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@2 T@U) (List._default.Join$A@@1 T@U) ($ly@@5 T@U) (|xss#0@@1| T@U) ) (!  (=> (and (or (|List.__default.Join#canCall| List._default.Join$A@@1 |xss#0@@1|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |xss#0@@1| (Tclass.List.M (Tclass.List.M List._default.Join$A@@1))) ($IsAlloc DatatypeTypeType |xss#0@@1| (Tclass.List.M (Tclass.List.M List._default.Join$A@@1)) $Heap@@2)))) ($IsGoodHeap $Heap@@2)) ($IsAlloc DatatypeTypeType (List.__default.Join List._default.Join$A@@1 $ly@@5 |xss#0@@1|) (Tclass.List.M List._default.Join$A@@1) $Heap@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (List.__default.Join List._default.Join$A@@1 $ly@@5 |xss#0@@1|) (Tclass.List.M List._default.Join$A@@1) $Heap@@2))
))))
(assert (forall ((List._default.Return$A@@2 T@U) (|x#0@@1| T@U) ) (!  (=> ($IsBox |x#0@@1| List._default.Return$A@@2) (= (|List.__default.Return#requires| List._default.Return$A@@2 |x#0@@1|) true))
 :pattern ( (|List.__default.Return#requires| List._default.Return$A@@2 |x#0@@1|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Concat$A T@U) ($ly@@6 T@U) (|xs#0@@4| T@U) (|ys#0| T@U) ) (!  (=> (or (|List.__default.Concat#canCall| List._default.Concat$A (Lit DatatypeTypeType |xs#0@@4|) (Lit DatatypeTypeType |ys#0|)) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@4| (Tclass.List.M List._default.Concat$A)) ($Is DatatypeTypeType |ys#0| (Tclass.List.M List._default.Concat$A))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (List.M.Cons_q (Lit DatatypeTypeType |xs#0@@4|))))) (let ((|xs#4@@0| (Lit DatatypeTypeType (List.M.tl (Lit DatatypeTypeType |xs#0@@4|)))))
(|List.__default.Concat#canCall| List._default.Concat$A |xs#4@@0| (Lit DatatypeTypeType |ys#0|)))) (= (List.__default.Concat List._default.Concat$A ($LS $ly@@6) (Lit DatatypeTypeType |xs#0@@4|) (Lit DatatypeTypeType |ys#0|)) (ite (List.M.Cons_q (Lit DatatypeTypeType |xs#0@@4|)) (let ((|xs#3@@0| (Lit DatatypeTypeType (List.M.tl (Lit DatatypeTypeType |xs#0@@4|)))))
(let ((|x#2@@0| (Lit BoxType (List.M.hd (Lit DatatypeTypeType |xs#0@@4|)))))
(Lit DatatypeTypeType (|#List.M.Cons| |x#2@@0| (Lit DatatypeTypeType (List.__default.Concat List._default.Concat$A ($LS $ly@@6) |xs#3@@0| (Lit DatatypeTypeType |ys#0|))))))) |ys#0|))))
 :weight 3
 :pattern ( (List.__default.Concat List._default.Concat$A ($LS $ly@@6) (Lit DatatypeTypeType |xs#0@@4|) (Lit DatatypeTypeType |ys#0|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Concat$A@@0 T@U) ($ly@@7 T@U) (|xs#0@@5| T@U) (|ys#0@@0| T@U) ) (!  (=> (or (|List.__default.Concat#canCall| List._default.Concat$A@@0 |xs#0@@5| |ys#0@@0|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@5| (Tclass.List.M List._default.Concat$A@@0)) ($Is DatatypeTypeType |ys#0@@0| (Tclass.List.M List._default.Concat$A@@0))))) (and (=> (List.M.Cons_q |xs#0@@5|) (let ((|xs#2@@0| (List.M.tl |xs#0@@5|)))
(|List.__default.Concat#canCall| List._default.Concat$A@@0 |xs#2@@0| |ys#0@@0|))) (= (List.__default.Concat List._default.Concat$A@@0 ($LS $ly@@7) |xs#0@@5| |ys#0@@0|) (ite (List.M.Cons_q |xs#0@@5|) (let ((|xs#1@@1| (List.M.tl |xs#0@@5|)))
(let ((|x#0@@2| (List.M.hd |xs#0@@5|)))
(|#List.M.Cons| |x#0@@2| (List.__default.Concat List._default.Concat$A@@0 $ly@@7 |xs#1@@1| |ys#0@@0|)))) |ys#0@@0|))))
 :pattern ( (List.__default.Concat List._default.Concat$A@@0 ($LS $ly@@7) |xs#0@@5| |ys#0@@0|))
))))
(assert (forall ((List.M$A@@3 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass.List.M List.M$A@@3)) (or (List.M.Cons_q d@@4) (List.M.Nil_q d@@4)))
 :pattern ( (List.M.Nil_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass.List.M List.M$A@@3)))
 :pattern ( (List.M.Cons_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass.List.M List.M$A@@3)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (|Set#Equal| a@@1 b@@1) (= a@@1 b@@1))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((List._default.Return$A@@3 T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) ) (! (= (List.__default.Return List._default.Return$A@@3 |$fh$0x#0@@1|) ($Unbox DatatypeTypeType (Apply1 List._default.Return$A@@3 (Tclass.List.M List._default.Return$A@@3) $heap@@1 (|List.__default.Return#Handle| List._default.Return$A@@3) |$fh$0x#0@@1|)))
 :pattern ( (List.__default.Return List._default.Return$A@@3 |$fh$0x#0@@1|) ($IsGoodHeap $heap@@1))
)))
(assert (forall ((f@@2 T@U) (t0@@2 T@U) (t1@@2 T@U) ) (! (= ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((h@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@1) ($IsBox bx0@@1 t0@@2)) (Requires1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1)) ($IsBox (Apply1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1) t1@@2))
 :pattern ( (Apply1 t0@@2 t1@@2 h@@1 f@@2 bx0@@1))
)))
 :pattern ( ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@2 t1@@2)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Map$A@@3 T@U) (List._default.Map$B@@3 T@U) ($ly@@8 T@U) ($Heap@@3 T@U) (|xs#0@@6| T@U) (|f#0@@8| T@U) ) (!  (=> (or (|List.__default.Map#canCall| List._default.Map$A@@3 List._default.Map$B@@3 (Lit DatatypeTypeType |xs#0@@6|) (Lit HandleTypeType |f#0@@8|)) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@3) ($Is DatatypeTypeType |xs#0@@6| (Tclass.List.M List._default.Map$A@@3))) ($Is HandleTypeType |f#0@@8| (Tclass._System.___hTotalFunc1 List._default.Map$A@@3 List._default.Map$B@@3))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (List.M.Cons_q (Lit DatatypeTypeType |xs#0@@6|))))) (let ((|xs#6| (Lit DatatypeTypeType (List.M.tl (Lit DatatypeTypeType |xs#0@@6|)))))
(|List.__default.Map#canCall| List._default.Map$A@@3 List._default.Map$B@@3 |xs#6| (Lit HandleTypeType |f#0@@8|)))) (= (List.__default.Map List._default.Map$A@@3 List._default.Map$B@@3 ($LS $ly@@8) (Lit DatatypeTypeType |xs#0@@6|) (Lit HandleTypeType |f#0@@8|)) (ite (List.M.Cons_q (Lit DatatypeTypeType |xs#0@@6|)) (let ((|xs#5| (Lit DatatypeTypeType (List.M.tl (Lit DatatypeTypeType |xs#0@@6|)))))
(let ((|x#4| (Lit BoxType (List.M.hd (Lit DatatypeTypeType |xs#0@@6|)))))
(|#List.M.Cons| (Apply1 List._default.Map$A@@3 List._default.Map$B@@3 $Heap@@3 (Lit HandleTypeType |f#0@@8|) |x#4|) (Lit DatatypeTypeType (List.__default.Map List._default.Map$A@@3 List._default.Map$B@@3 ($LS $ly@@8) |xs#5| (Lit HandleTypeType |f#0@@8|)))))) |#List.M.Nil|))))
 :weight 3
 :pattern ( (List.__default.Map List._default.Map$A@@3 List._default.Map$B@@3 ($LS $ly@@8) (Lit DatatypeTypeType |xs#0@@6|) (Lit HandleTypeType |f#0@@8|)) ($IsGoodHeap $Heap@@3))
))))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Return$A@@4 T@U) (|x#0@@3| T@U) ) (!  (=> (or (|List.__default.Return#canCall| List._default.Return$A@@4 |x#0@@3|) (and (< 1 $FunctionContextHeight) ($IsBox |x#0@@3| List._default.Return$A@@4))) (= (List.__default.Return List._default.Return$A@@4 |x#0@@3|) (|#List.M.Cons| |x#0@@3| (Lit DatatypeTypeType |#List.M.Nil|))))
 :pattern ( (List.__default.Return List._default.Return$A@@4 |x#0@@3|))
))))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (List.M.Nil_q a@@2) (List.M.Nil_q b@@2)) (|List.M#Equal| a@@2 b@@2))
 :pattern ( (|List.M#Equal| a@@2 b@@2) (List.M.Nil_q a@@2))
 :pattern ( (|List.M#Equal| a@@2 b@@2) (List.M.Nil_q b@@2))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$T0@@1|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$R@@4|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|)) |#$T0@@5|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#List.M.Cons| |a#0#0#0| |a#0#1#0|)) |##List.M.Cons|)
 :pattern ( (|#List.M.Cons| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (List.M.hd (|#List.M.Cons| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#List.M.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (List.M.tl (|#List.M.Cons| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#List.M.Cons| |a#6#0#0| |a#6#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Concat$A@@1 T@U) ($ly@@9 T@U) (|xs#0@@7| T@U) (|ys#0@@1| T@U) ) (!  (=> (or (|List.__default.Concat#canCall| List._default.Concat$A@@1 |xs#0@@7| |ys#0@@1|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@7| (Tclass.List.M List._default.Concat$A@@1)) ($Is DatatypeTypeType |ys#0@@1| (Tclass.List.M List._default.Concat$A@@1))))) ($Is DatatypeTypeType (List.__default.Concat List._default.Concat$A@@1 $ly@@9 |xs#0@@7| |ys#0@@1|) (Tclass.List.M List._default.Concat$A@@1)))
 :pattern ( (List.__default.Concat List._default.Concat$A@@1 $ly@@9 |xs#0@@7| |ys#0@@1|))
))))
(assert (forall ((List.M$A@@4 T@U) ) (! (= (Tclass.List.M_0 (Tclass.List.M List.M$A@@4)) List.M$A@@4)
 :pattern ( (Tclass.List.M List.M$A@@4))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#List.M.Cons| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#List.M.Cons| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (DtRank |a#7#1#0|) (DtRank (|#List.M.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#List.M.Cons| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((List._default.Return$A@@5 T@U) ($heap@@2 T@U) (|$fh$0x#0@@2| T@U) ) (! (= (Apply1 List._default.Return$A@@5 (Tclass.List.M List._default.Return$A@@5) $heap@@2 (|List.__default.Return#Handle| List._default.Return$A@@5) |$fh$0x#0@@2|) ($Box DatatypeTypeType (List.__default.Return List._default.Return$A@@5 |$fh$0x#0@@2|)))
 :pattern ( (Apply1 List._default.Return$A@@5 (Tclass.List.M List._default.Return$A@@5) $heap@@2 (|List.__default.Return#Handle| List._default.Return$A@@5) |$fh$0x#0@@2|))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0@@9| T@U) ) (! (= ($Is HandleTypeType |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is HandleTypeType |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@7|) (Requires1 |#$T0@@7| |#$R@@7| $OneHeap |f#0@@9| |x0#0|)))))
 :pattern ( ($Is HandleTypeType |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|)))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@10| T@U) ) (! (= ($Is HandleTypeType |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|))  (and ($Is HandleTypeType |f#0@@10| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|)) (forall ((|x0#0@@0| T@U) )  (=> ($IsBox |x0#0@@0| |#$T0@@8|) (|Set#Equal| (Reads1 |#$T0@@8| |#$R@@8| $OneHeap |f#0@@10| |x0#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)))
)))
(assert  (and (and (and (and (and (and (= (Ctor refType) 6) (forall ((t0@@3 T@T) (t1@@3 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@3 t1@@3 (MapType0Store t0@@3 t1@@3 m x0 val) x0) val)
 :weight 0
))) (forall ((u0@@0 T@T) (u1@@0 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0@@0 u1@@0 (MapType0Store u0@@0 u1@@0 m@@0 x0@@0 val@@0) y0) (MapType0Select u0@@0 u1@@0 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f@@3 T@U) (t0@@4 T@U) (t1@@4 T@U) (h@@2 T@U) ) (!  (=> ($IsGoodHeap h@@2) (= ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@4 t1@@4) h@@2) (forall ((bx0@@2 T@U) ) (!  (=> (and (and ($IsBox bx0@@2 t0@@4) ($IsAllocBox bx0@@2 t0@@4 h@@2)) (Requires1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@2 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2) ($Box refType r)))
)))
 :pattern ( (Apply1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2))
 :pattern ( (Reads1 t0@@4 t1@@4 h@@2 f@@3 bx0@@2))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@4 t1@@4) h@@2))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@1)) bx@@1) ($Is HandleTypeType ($Unbox HandleTypeType bx@@1) (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@2)) bx@@2) ($Is HandleTypeType ($Unbox HandleTypeType bx@@2) (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@3)) bx@@3) ($Is HandleTypeType ($Unbox HandleTypeType bx@@3) (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|))))
 :pattern ( ($IsBox bx@@3 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)))
)))
(assert (forall ((d@@5 T@U) (List.M$A@@5 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (List.M.Cons_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass.List.M List.M$A@@5) $h@@2))) ($IsAllocBox (List.M.hd d@@5) List.M$A@@5 $h@@2))
 :pattern ( ($IsAllocBox (List.M.hd d@@5) List.M$A@@5 $h@@2))
)))
(assert  (and (forall ((t0@@5 T@T) (t1@@5 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@5 t1@@5 t2 (MapType1Store t0@@5 t1@@5 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2 (MapType1Store u0@@1 u1@@1 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@4 T@U) (List._default.Concat$A@@2 T@U) ($ly@@10 T@U) (|xs#0@@8| T@U) (|ys#0@@2| T@U) ) (!  (=> (and (or (|List.__default.Concat#canCall| List._default.Concat$A@@2 |xs#0@@8| |ys#0@@2|) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0@@8| (Tclass.List.M List._default.Concat$A@@2)) ($IsAlloc DatatypeTypeType |xs#0@@8| (Tclass.List.M List._default.Concat$A@@2) $Heap@@4)) (and ($Is DatatypeTypeType |ys#0@@2| (Tclass.List.M List._default.Concat$A@@2)) ($IsAlloc DatatypeTypeType |ys#0@@2| (Tclass.List.M List._default.Concat$A@@2) $Heap@@4))))) ($IsGoodHeap $Heap@@4)) ($IsAlloc DatatypeTypeType (List.__default.Concat List._default.Concat$A@@2 $ly@@10 |xs#0@@8| |ys#0@@2|) (Tclass.List.M List._default.Concat$A@@2) $Heap@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (List.__default.Concat List._default.Concat$A@@2 $ly@@10 |xs#0@@8| |ys#0@@2|) (Tclass.List.M List._default.Concat$A@@2) $Heap@@4))
))))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) |tytagFamily$_#TotalFunc1|))
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((List._default.Join$A@@2 T@U) ($ly@@11 T@U) (|xss#0@@2| T@U) ) (!  (=> (or (|List.__default.Join#canCall| List._default.Join$A@@2 (Lit DatatypeTypeType |xss#0@@2|)) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |xss#0@@2| (Tclass.List.M (Tclass.List.M List._default.Join$A@@2))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (List.M.Cons_q (Lit DatatypeTypeType |xss#0@@2|))))) (let ((|xss#4| (Lit DatatypeTypeType (List.M.tl (Lit DatatypeTypeType |xss#0@@2|)))))
(let ((|xs#3@@1| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (List.M.hd (Lit DatatypeTypeType |xss#0@@2|))))))
 (and (|List.__default.Join#canCall| List._default.Join$A@@2 |xss#4|) (|List.__default.Concat#canCall| List._default.Join$A@@2 |xs#3@@1| (List.__default.Join List._default.Join$A@@2 ($LS $ly@@11) |xss#4|)))))) (= (List.__default.Join List._default.Join$A@@2 ($LS $ly@@11) (Lit DatatypeTypeType |xss#0@@2|)) (ite (List.M.Cons_q (Lit DatatypeTypeType |xss#0@@2|)) (let ((|xss#3| (Lit DatatypeTypeType (List.M.tl (Lit DatatypeTypeType |xss#0@@2|)))))
(let ((|xs#2@@1| (Lit DatatypeTypeType ($Unbox DatatypeTypeType (List.M.hd (Lit DatatypeTypeType |xss#0@@2|))))))
(Lit DatatypeTypeType (List.__default.Concat List._default.Join$A@@2 ($LS $LZ) |xs#2@@1| (Lit DatatypeTypeType (List.__default.Join List._default.Join$A@@2 ($LS $ly@@11) |xss#3|)))))) |#List.M.Nil|))))
 :weight 3
 :pattern ( (List.__default.Join List._default.Join$A@@2 ($LS $ly@@11) (Lit DatatypeTypeType |xss#0@@2|)))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((List._default.Join$A@@3 T@U) ($ly@@12 T@U) (|xss#0@@3| T@U) ) (!  (=> (or (|List.__default.Join#canCall| List._default.Join$A@@3 |xss#0@@3|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |xss#0@@3| (Tclass.List.M (Tclass.List.M List._default.Join$A@@3))))) ($Is DatatypeTypeType (List.__default.Join List._default.Join$A@@3 $ly@@12 |xss#0@@3|) (Tclass.List.M List._default.Join$A@@3)))
 :pattern ( (List.__default.Join List._default.Join$A@@3 $ly@@12 |xss#0@@3|))
))))
(assert (forall ((t0@@6 T@U) (t1@@6 T@U) (heap@@0 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@3 t0@@6) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@6 t1@@6)))) (|Set#Equal| (Reads1 t0@@6 t1@@6 $OneHeap f@@4 bx0@@3) |Set#Empty|)) (= (Requires1 t0@@6 t1@@6 $OneHeap f@@4 bx0@@3) (Requires1 t0@@6 t1@@6 heap@@0 f@@4 bx0@@3)))
 :pattern ( (Requires1 t0@@6 t1@@6 $OneHeap f@@4 bx0@@3) ($IsGoodHeap heap@@0))
 :pattern ( (Requires1 t0@@6 t1@@6 heap@@0 f@@4 bx0@@3))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((List._default.Concat$A@@3 T@U) ($ly@@13 T@U) (|xs#0@@9| T@U) (|ys#0@@3| T@U) ) (! (= (List.__default.Concat List._default.Concat$A@@3 ($LS $ly@@13) |xs#0@@9| |ys#0@@3|) (List.__default.Concat List._default.Concat$A@@3 $ly@@13 |xs#0@@9| |ys#0@@3|))
 :pattern ( (List.__default.Concat List._default.Concat$A@@3 ($LS $ly@@13) |xs#0@@9| |ys#0@@3|))
)))
(assert (forall ((List.M$A@@6 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass.List.M List.M$A@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) (Tclass.List.M List.M$A@@6))))
 :pattern ( ($IsBox bx@@4 (Tclass.List.M List.M$A@@6)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@5 T@U) (List._default.Bind$A@@2 T@U) (List._default.Bind$B@@2 T@U) (|m#0@@2| T@U) (|f#0@@11| T@U) ) (!  (=> (and (or (|List.__default.Bind#canCall| List._default.Bind$A@@2 List._default.Bind$B@@2 |m#0@@2| |f#0@@11|) (and (< 3 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |m#0@@2| (Tclass.List.M List._default.Bind$A@@2)) ($IsAlloc DatatypeTypeType |m#0@@2| (Tclass.List.M List._default.Bind$A@@2) $Heap@@5)) (and ($Is HandleTypeType |f#0@@11| (Tclass._System.___hTotalFunc1 List._default.Bind$A@@2 (Tclass.List.M List._default.Bind$B@@2))) ($IsAlloc HandleTypeType |f#0@@11| (Tclass._System.___hTotalFunc1 List._default.Bind$A@@2 (Tclass.List.M List._default.Bind$B@@2)) $Heap@@5))))) ($IsGoodHeap $Heap@@5)) ($IsAlloc DatatypeTypeType (List.__default.Bind List._default.Bind$A@@2 List._default.Bind$B@@2 |m#0@@2| |f#0@@11|) (Tclass.List.M List._default.Bind$B@@2) $Heap@@5))
 :pattern ( ($IsAlloc DatatypeTypeType (List.__default.Bind List._default.Bind$A@@2 List._default.Bind$B@@2 |m#0@@2| |f#0@@11|) (Tclass.List.M List._default.Bind$B@@2) $Heap@@5))
))))
(assert (forall ((d@@7 T@U) (List.M$A@@7 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (List.M.Cons_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass.List.M List.M$A@@7) $h@@3))) ($IsAlloc DatatypeTypeType (List.M.tl d@@7) (Tclass.List.M List.M$A@@7) $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType (List.M.tl d@@7) (Tclass.List.M List.M$A@@7) $h@@3))
)))
(assert (= |#List.M.Nil| (Lit DatatypeTypeType |#List.M.Nil|)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (! (= (|Set#Equal| a@@3 b@@3) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@3 o@@0) (|Set#IsMember| b@@3 o@@0))
 :pattern ( (|Set#IsMember| a@@3 o@@0))
 :pattern ( (|Set#IsMember| b@@3 o@@0))
)))
 :pattern ( (|Set#Equal| a@@3 b@@3))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#List.M.Cons| (Lit BoxType |a#3#0#0|) (Lit DatatypeTypeType |a#3#1#0|)) (Lit DatatypeTypeType (|#List.M.Cons| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#List.M.Cons| (Lit BoxType |a#3#0#0|) (Lit DatatypeTypeType |a#3#1#0|)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@6 T@U) (List._default.Return$A@@6 T@U) (|x#0@@4| T@U) ) (!  (=> (and (or (|List.__default.Return#canCall| List._default.Return$A@@6 |x#0@@4|) (and (< 1 $FunctionContextHeight) (and ($IsBox |x#0@@4| List._default.Return$A@@6) ($IsAllocBox |x#0@@4| List._default.Return$A@@6 $Heap@@6)))) ($IsGoodHeap $Heap@@6)) ($IsAlloc DatatypeTypeType (List.__default.Return List._default.Return$A@@6 |x#0@@4|) (Tclass.List.M List._default.Return$A@@6) $Heap@@6))
 :pattern ( ($IsAlloc DatatypeTypeType (List.__default.Return List._default.Return$A@@6 |x#0@@4|) (Tclass.List.M List._default.Return$A@@6) $Heap@@6))
))))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((List._default.Return$A@@7 T@U) (|x#0@@5| T@U) ) (!  (=> (or (|List.__default.Return#canCall| List._default.Return$A@@7 (Lit BoxType |x#0@@5|)) (and (< 1 $FunctionContextHeight) ($IsBox |x#0@@5| List._default.Return$A@@7))) (= (List.__default.Return List._default.Return$A@@7 (Lit BoxType |x#0@@5|)) (Lit DatatypeTypeType (|#List.M.Cons| (Lit BoxType |x#0@@5|) (Lit DatatypeTypeType |#List.M.Nil|)))))
 :weight 3
 :pattern ( (List.__default.Return List._default.Return$A@@7 (Lit BoxType |x#0@@5|)))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((List._default.Bind$A@@3 T@U) (List._default.Bind$B@@3 T@U) (|m#0@@3| T@U) (|f#0@@12| T@U) ) (!  (=> (or (|List.__default.Bind#canCall| List._default.Bind$A@@3 List._default.Bind$B@@3 |m#0@@3| |f#0@@12|) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |m#0@@3| (Tclass.List.M List._default.Bind$A@@3)) ($Is HandleTypeType |f#0@@12| (Tclass._System.___hTotalFunc1 List._default.Bind$A@@3 (Tclass.List.M List._default.Bind$B@@3)))))) ($Is DatatypeTypeType (List.__default.Bind List._default.Bind$A@@3 List._default.Bind$B@@3 |m#0@@3| |f#0@@12|) (Tclass.List.M List._default.Bind$B@@3)))
 :pattern ( (List.__default.Bind List._default.Bind$A@@3 List._default.Bind$B@@3 |m#0@@3| |f#0@@12|))
))))
(assert (forall ((List._default.Map$A@@4 T@U) (List._default.Map$B@@4 T@U) ($ly@@14 T@U) (|xs#0@@10| T@U) (|f#0@@13| T@U) ) (! (= (List.__default.Map List._default.Map$A@@4 List._default.Map$B@@4 ($LS $ly@@14) |xs#0@@10| |f#0@@13|) (List.__default.Map List._default.Map$A@@4 List._default.Map$B@@4 $ly@@14 |xs#0@@10| |f#0@@13|))
 :pattern ( (List.__default.Map List._default.Map$A@@4 List._default.Map$B@@4 ($LS $ly@@14) |xs#0@@10| |f#0@@13|))
)))
(assert (forall ((List.M$A@@8 T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@4 T@U) ) (!  (=> ($IsGoodHeap $h@@4) (= ($IsAlloc DatatypeTypeType (|#List.M.Cons| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass.List.M List.M$A@@8) $h@@4)  (and ($IsAllocBox |a#2#0#0@@0| List.M$A@@8 $h@@4) ($IsAlloc DatatypeTypeType |a#2#1#0@@0| (Tclass.List.M List.M$A@@8) $h@@4))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#List.M.Cons| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass.List.M List.M$A@@8) $h@@4))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x#1_0@0| () T@U)
(declare-fun |xs#1_0@0| () T@U)
(declare-fun |m#0@@4| () T@U)
(declare-fun |##xs#1_0_1_0@0| () T@U)
(declare-fun List._default.RightIdentity$A () T@U)
(declare-fun $Heap@@7 () T@U)
(declare-fun |##xs#1_0_2_0@0| () T@U)
(declare-fun |##xs#1_0_2_1@0| () T@U)
(declare-fun |##xs#1_0_3_0@0| () T@U)
(declare-fun |##f#1_0_3_0@0| () T@U)
(declare-fun |##xss#1_0_3_0@0| () T@U)
(declare-fun |##ys#1_0_3_0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |##xs#1_0_3_2@0| () T@U)
(declare-fun |##f#1_0_4_0@0| () T@U)
(declare-fun |##xss#1_0_4_0@0| () T@U)
(declare-fun |##xs#1_0_4_1@0| () T@U)
(declare-fun |##f#1_0_4_1@0| () T@U)
(declare-fun |##xss#1_0_4_1@0| () T@U)
(declare-fun |##ys#1_0_4_0@0| () T@U)
(declare-fun |##xs#1_0_5_0@0| () T@U)
(declare-fun |##f#1_0_5_0@0| () T@U)
(declare-fun |##xss#1_0_5_0@0| () T@U)
(declare-fun |##f#1_0_5_1@0| () T@U)
(declare-fun |##xss#1_0_5_1@0| () T@U)
(declare-fun |##m#1_0_6_0@0| () T@U)
(declare-fun |##f#1_0_6_0@0| () T@U)
(declare-fun |##xs#1_0_6_0@0| () T@U)
(declare-fun |##f#1_0_6_1@0| () T@U)
(declare-fun |##xss#1_0_6_0@0| () T@U)
(declare-fun |##f#1_0_7_0@0| () T@U)
(declare-fun |##m#1_0_7_1@0| () T@U)
(declare-fun |##f#1_0_7_1@0| () T@U)
(declare-fun |_mcc#0#1_0@0| () T@U)
(declare-fun |_mcc#1#1_0@0| () T@U)
(declare-fun |let#1_0#0#0| () T@U)
(declare-fun |let#1_1#0#0| () T@U)
(declare-fun |##xss#0_0_1_0@0| () T@U)
(declare-fun |##xs#0_0_2_0@0| () T@U)
(declare-fun |##f#0_0_2_0@0| () T@U)
(declare-fun |##xss#0_0_2_0@0| () T@U)
(declare-fun |##xss#0_0_2_1@0| () T@U)
(declare-fun |##m#0_0_3_0@0| () T@U)
(declare-fun |##f#0_0_3_0@0| () T@U)
(declare-fun |##xs#0_0_3_0@0| () T@U)
(declare-fun |##f#0_0_3_1@0| () T@U)
(declare-fun |##xss#0_0_3_0@0| () T@U)
(declare-fun |##m#0_0_0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 44) (let ((anon29_Then_correct  (=> (= (ControlFlow 0 40) (- 0 39)) (|List.M#Equal| (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) |m#0@@4|))))
(let ((anon28_Then_correct  (=> (and (= |##xs#1_0_1_0@0| (|#List.M.Cons| |x#1_0@0| (Lit DatatypeTypeType |#List.M.Nil|))) ($IsAlloc DatatypeTypeType |##xs#1_0_1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)) (=> (and (and ($IsAlloc DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (|List.__default.Concat#canCall| List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) |xs#1_0@0|)) (and (|List.__default.Concat#canCall| List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) |xs#1_0@0|) (= (ControlFlow 0 38) (- 0 37)))) (|List.M#Equal| (List.__default.Concat List._default.RightIdentity$A ($LS ($LS $LZ)) (|#List.M.Cons| |x#1_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) |xs#1_0@0|) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|))))))
(let ((anon27_Then_correct  (=> (and ($IsAllocBox |x#1_0@0| List._default.RightIdentity$A $Heap@@7) (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|)) (=> (and (and (= |##xs#1_0_2_0@0| (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) ($IsAlloc DatatypeTypeType |##xs#1_0_2_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)) (and ($IsAlloc DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (|List.__default.Concat#canCall| List._default.RightIdentity$A (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) |xs#1_0@0|))) (=> (and (and (and (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|) (|List.__default.Concat#canCall| List._default.RightIdentity$A (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) |xs#1_0@0|)) (and (= |##xs#1_0_2_1@0| (|#List.M.Cons| |x#1_0@0| (Lit DatatypeTypeType |#List.M.Nil|))) ($IsAlloc DatatypeTypeType |##xs#1_0_2_1@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7))) (and (and ($IsAlloc DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (|List.__default.Concat#canCall| List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) |xs#1_0@0|)) (and (|List.__default.Concat#canCall| List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) |xs#1_0@0|) (= (ControlFlow 0 36) (- 0 35))))) (|List.M#Equal| (List.__default.Concat List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) |xs#1_0@0|) (List.__default.Concat List._default.RightIdentity$A ($LS ($LS $LZ)) (|#List.M.Cons| |x#1_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) |xs#1_0@0|)))))))
(let ((anon26_Then_correct  (=> ($IsAllocBox |x#1_0@0| List._default.RightIdentity$A $Heap@@7) (=> (and (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|) (= |##xs#1_0_3_0@0| (List.__default.Return List._default.RightIdentity$A |x#1_0@0|))) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |##xs#1_0_3_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) ($IsAlloc DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)) (and (or (not (= 1 $FunctionContextHeight)) (not true)) (= |##f#1_0_3_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (and (and ($IsAlloc HandleTypeType |##f#1_0_3_0@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) (and (= |##xss#1_0_3_0@0| (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) ($IsAlloc DatatypeTypeType |##xss#1_0_3_0@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7)))) (and (and (and (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) (= |##ys#1_0_3_0@0| (List.__default.Join List._default.RightIdentity$A ($LS $LZ) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (and ($IsAlloc DatatypeTypeType |##ys#1_0_3_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (|List.__default.Concat#canCall| List._default.RightIdentity$A (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) (List.__default.Join List._default.RightIdentity$A ($LS $LZ) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)))))) (and (and (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|) (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (|List.__default.Concat#canCall| List._default.RightIdentity$A (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) (List.__default.Join List._default.RightIdentity$A ($LS $LZ) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))))) (and (=> (= (ControlFlow 0 33) (- 0 34)) (< (DtRank |xs#1_0@0|) (DtRank |m#0@@4|))) (=> (< (DtRank |xs#1_0@0|) (DtRank |m#0@@4|)) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (and (|$IsA#List.M| (List.__default.Bind List._default.RightIdentity$A List._default.RightIdentity$A |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) (|$IsA#List.M| |xs#1_0@0|)) (|List.__default.Bind#canCall| List._default.RightIdentity$A List._default.RightIdentity$A |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) (and (and (|List.M#Equal| (List.__default.Bind List._default.RightIdentity$A List._default.RightIdentity$A |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) |xs#1_0@0|) (= $Heap@@7 $Heap@0)) (and ($IsAllocBox |x#1_0@0| List._default.RightIdentity$A $Heap@0) (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|)))) (and (and (and (= |##xs#1_0_3_2@0| (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) ($IsAlloc DatatypeTypeType |##xs#1_0_3_2@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@0)) (and ($IsAlloc DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@0) (|List.__default.Concat#canCall| List._default.RightIdentity$A (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) |xs#1_0@0|))) (and (and (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|) (|List.__default.Concat#canCall| List._default.RightIdentity$A (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) |xs#1_0@0|)) (= (ControlFlow 0 33) (- 0 32))))) (|List.M#Equal| (List.__default.Concat List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS ($LS $LZ)) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (List.__default.Concat List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) |xs#1_0@0|)))))))))))
(let ((anon25_Then_correct  (=> (and ($IsAllocBox |x#1_0@0| List._default.RightIdentity$A $Heap@@7) (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|)) (=> (and (and (and ($IsAlloc DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (or (not (= 1 $FunctionContextHeight)) (not true))) (and (= |##f#1_0_4_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) ($IsAlloc HandleTypeType |##f#1_0_4_0@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7))) (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) (= |##xss#1_0_4_0@0| (|#List.M.Cons| ($Box DatatypeTypeType (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (and ($IsAlloc DatatypeTypeType |##xss#1_0_4_0@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Join#canCall| List._default.RightIdentity$A (|#List.M.Cons| ($Box DatatypeTypeType (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))))) (=> (and (and (and (and (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|) (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) (|List.__default.Join#canCall| List._default.RightIdentity$A (|#List.M.Cons| ($Box DatatypeTypeType (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))) ($IsAllocBox |x#1_0@0| List._default.RightIdentity$A $Heap@@7)) (and (and (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|) (= |##xs#1_0_4_1@0| (List.__default.Return List._default.RightIdentity$A |x#1_0@0|))) (and ($IsAlloc DatatypeTypeType |##xs#1_0_4_1@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) ($IsAlloc DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)))) (and (=> (= (ControlFlow 0 30) (- 0 31)) (or (not (= 1 $FunctionContextHeight)) (not true))) (=> (or (not (= 1 $FunctionContextHeight)) (not true)) (=> (= |##f#1_0_4_1@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) (=> (and (and (and (and ($IsAlloc HandleTypeType |##f#1_0_4_1@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) (and (= |##xss#1_0_4_1@0| (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) ($IsAlloc DatatypeTypeType |##xss#1_0_4_1@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7))) (and (and (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) (= |##ys#1_0_4_0@0| (List.__default.Join List._default.RightIdentity$A ($LS $LZ) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (and ($IsAlloc DatatypeTypeType |##ys#1_0_4_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (|List.__default.Concat#canCall| List._default.RightIdentity$A (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) (List.__default.Join List._default.RightIdentity$A ($LS $LZ) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))))) (and (and (and (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|) (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (|List.__default.Concat#canCall| List._default.RightIdentity$A (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) (List.__default.Join List._default.RightIdentity$A ($LS $LZ) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (= (ControlFlow 0 30) (- 0 29)))) (|List.M#Equal| (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (|#List.M.Cons| ($Box DatatypeTypeType (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS ($LS $LZ)) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (List.__default.Concat List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Return List._default.RightIdentity$A |x#1_0@0|) (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS ($LS $LZ)) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))))))))))))
(let ((anon24_Then_correct  (=> (= |##xs#1_0_5_0@0| (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|)) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |##xs#1_0_5_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (or (not (= 1 $FunctionContextHeight)) (not true))) (and (= |##f#1_0_5_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) ($IsAlloc HandleTypeType |##f#1_0_5_0@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7))) (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (= |##xss#1_0_5_0@0| (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (and ($IsAlloc DatatypeTypeType |##xss#1_0_5_0@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))))) (and (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))) ($IsAllocBox |x#1_0@0| List._default.RightIdentity$A $Heap@@7)) (and (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|) ($IsAlloc DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)))) (and (=> (= (ControlFlow 0 27) (- 0 28)) (or (not (= 1 $FunctionContextHeight)) (not true))) (=> (or (not (= 1 $FunctionContextHeight)) (not true)) (=> (and (= |##f#1_0_5_1@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) ($IsAlloc HandleTypeType |##f#1_0_5_1@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7)) (=> (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) (= |##xss#1_0_5_1@0| (|#List.M.Cons| ($Box DatatypeTypeType (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (and ($IsAlloc DatatypeTypeType |##xss#1_0_5_1@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Join#canCall| List._default.RightIdentity$A (|#List.M.Cons| ($Box DatatypeTypeType (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)))))) (=> (and (and (and (|List.__default.Return#canCall| List._default.RightIdentity$A |x#1_0@0|) (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))) (|List.__default.Join#canCall| List._default.RightIdentity$A (|#List.M.Cons| ($Box DatatypeTypeType (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (= (ControlFlow 0 27) (- 0 26))) (|List.M#Equal| (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS ($LS $LZ)) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A))) (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (|#List.M.Cons| ($Box DatatypeTypeType (List.__default.Return List._default.RightIdentity$A |x#1_0@0|)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS ($LS $LZ)) |xs#1_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A))))))))))))))
(let ((anon23_Then_correct  (=> (= |##m#1_0_6_0@0| (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|)) (=> (and (and (and ($IsAlloc DatatypeTypeType |##m#1_0_6_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (or (not (= 1 $FunctionContextHeight)) (not true))) (and (= |##f#1_0_6_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) ($IsAlloc HandleTypeType |##f#1_0_6_0@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7))) (and (and (|List.__default.Bind#canCall| List._default.RightIdentity$A List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (|List.__default.Bind#canCall| List._default.RightIdentity$A List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A))) (and (= |##xs#1_0_6_0@0| (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|)) ($IsAlloc DatatypeTypeType |##xs#1_0_6_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (or (not (= 1 $FunctionContextHeight)) (not true))) (=> (or (not (= 1 $FunctionContextHeight)) (not true)) (=> (and (= |##f#1_0_6_1@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) ($IsAlloc HandleTypeType |##f#1_0_6_1@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7)) (=> (and (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (= |##xss#1_0_6_0@0| (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (and ($IsAlloc DatatypeTypeType |##xss#1_0_6_0@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (= (ControlFlow 0 24) (- 0 23)))) (|List.M#Equal| (List.__default.Bind List._default.RightIdentity$A List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS ($LS $LZ)) (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A))))))))))))
(let ((anon22_Then_correct  (=> (and (and (and ($IsAlloc DatatypeTypeType |m#0@@4| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (or (not (= 1 $FunctionContextHeight)) (not true))) (and (= |##f#1_0_7_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) ($IsAlloc HandleTypeType |##f#1_0_7_0@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7))) (and (and (|List.__default.Bind#canCall| List._default.RightIdentity$A List._default.RightIdentity$A |m#0@@4| (|List.__default.Return#Handle| List._default.RightIdentity$A)) (|List.__default.Bind#canCall| List._default.RightIdentity$A List._default.RightIdentity$A |m#0@@4| (|List.__default.Return#Handle| List._default.RightIdentity$A))) (and (= |##m#1_0_7_1@0| (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|)) ($IsAlloc DatatypeTypeType |##m#1_0_7_1@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (or (not (= 1 $FunctionContextHeight)) (not true))) (=> (or (not (= 1 $FunctionContextHeight)) (not true)) (=> (= |##f#1_0_7_1@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) (=> (and (and ($IsAlloc HandleTypeType |##f#1_0_7_1@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Bind#canCall| List._default.RightIdentity$A List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A))) (and (|List.__default.Bind#canCall| List._default.RightIdentity$A List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (= (ControlFlow 0 21) (- 0 20)))) (|List.M#Equal| (List.__default.Bind List._default.RightIdentity$A List._default.RightIdentity$A |m#0@@4| (|List.__default.Return#Handle| List._default.RightIdentity$A)) (List.__default.Bind List._default.RightIdentity$A List._default.RightIdentity$A (|#List.M.Cons| |x#1_0@0| |xs#1_0@0|) (|List.__default.Return#Handle| List._default.RightIdentity$A))))))))))
(let ((anon21_Then_correct  (=> (and ($IsAlloc DatatypeTypeType |m#0@@4| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (= (ControlFlow 0 19) (- 0 18))) (or (not (= 1 $FunctionContextHeight)) (not true)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 14) (- 0 13)) (|List.M#Equal| (List.__default.Bind List._default.RightIdentity$A List._default.RightIdentity$A |m#0@@4| (|List.__default.Return#Handle| List._default.RightIdentity$A)) |m#0@@4|))))
(let ((anon29_Else_correct  (=> (and (|List.M#Equal| (List.__default.Bind List._default.RightIdentity$A List._default.RightIdentity$A |m#0@@4| (|List.__default.Return#Handle| List._default.RightIdentity$A)) |m#0@@4|) (= (ControlFlow 0 41) 14)) GeneratedUnifiedExit_correct)))
(let ((anon20_Then_correct  (=> (= |m#0@@4| (|#List.M.Cons| |_mcc#0#1_0@0| |_mcc#1#1_0@0|)) (=> (and ($IsBox |_mcc#0#1_0@0| List._default.RightIdentity$A) ($Is DatatypeTypeType |_mcc#1#1_0@0| (Tclass.List.M List._default.RightIdentity$A))) (=> (and (and (and (and ($Is DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A)) ($IsAlloc DatatypeTypeType |xs#1_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)) (= |let#1_0#0#0| |_mcc#1#1_0@0|)) (and ($Is DatatypeTypeType |let#1_0#0#0| (Tclass.List.M List._default.RightIdentity$A)) (= |xs#1_0@0| |let#1_0#0#0|))) (and (and (and ($IsBox |x#1_0@0| List._default.RightIdentity$A) ($IsAllocBox |x#1_0@0| List._default.RightIdentity$A $Heap@@7)) (= |let#1_1#0#0| |_mcc#0#1_0@0|)) (and ($IsBox |let#1_1#0#0| List._default.RightIdentity$A) (= |x#1_0@0| |let#1_1#0#0|)))) (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 42) 19) anon21_Then_correct) (=> (= (ControlFlow 0 42) 21) anon22_Then_correct)) (=> (= (ControlFlow 0 42) 24) anon23_Then_correct)) (=> (= (ControlFlow 0 42) 27) anon24_Then_correct)) (=> (= (ControlFlow 0 42) 30) anon25_Then_correct)) (=> (= (ControlFlow 0 42) 33) anon26_Then_correct)) (=> (= (ControlFlow 0 42) 36) anon27_Then_correct)) (=> (= (ControlFlow 0 42) 38) anon28_Then_correct)) (=> (= (ControlFlow 0 42) 40) anon29_Then_correct)) (=> (= (ControlFlow 0 42) 41) anon29_Else_correct)))))))
(let ((anon35_Else_correct  (=> (and (|List.M#Equal| (List.__default.Bind List._default.RightIdentity$A List._default.RightIdentity$A (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) |m#0@@4|) (= (ControlFlow 0 15) 14)) GeneratedUnifiedExit_correct)))
(let ((anon35_Then_correct  (=> (= (ControlFlow 0 12) (- 0 11)) (|List.M#Equal| |#List.M.Nil| |m#0@@4|))))
(let ((anon34_Then_correct  (=> (= |##xss#0_0_1_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) (=> (and (and ($IsAlloc DatatypeTypeType |##xss#0_0_1_0@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Join#canCall| List._default.RightIdentity$A (Lit DatatypeTypeType |#List.M.Nil|))) (and (|List.__default.Join#canCall| List._default.RightIdentity$A (Lit DatatypeTypeType |#List.M.Nil|)) (= (ControlFlow 0 10) (- 0 9)))) (|List.M#Equal| (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (Lit DatatypeTypeType |#List.M.Nil|)) |#List.M.Nil|)))))
(let ((anon33_Then_correct  (=> (= |##xs#0_0_2_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) (=> (and (and (and (and ($IsAlloc DatatypeTypeType |##xs#0_0_2_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (or (not (= 1 $FunctionContextHeight)) (not true))) (and (= |##f#0_0_2_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) ($IsAlloc HandleTypeType |##f#0_0_2_0@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7))) (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (= |##xss#0_0_2_0@0| (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (and ($IsAlloc DatatypeTypeType |##xss#0_0_2_0@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))))) (and (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (= |##xss#0_0_2_1@0| (Lit DatatypeTypeType |#List.M.Nil|))) (and (and ($IsAlloc DatatypeTypeType |##xss#0_0_2_1@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Join#canCall| List._default.RightIdentity$A (Lit DatatypeTypeType |#List.M.Nil|))) (and (|List.__default.Join#canCall| List._default.RightIdentity$A (Lit DatatypeTypeType |#List.M.Nil|)) (= (ControlFlow 0 8) (- 0 7)))))) (|List.M#Equal| (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS ($LS $LZ)) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A))) (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (Lit DatatypeTypeType |#List.M.Nil|)))))))
(let ((anon32_Then_correct  (=> (= |##m#0_0_3_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) (=> (and (and (and ($IsAlloc DatatypeTypeType |##m#0_0_3_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (or (not (= 1 $FunctionContextHeight)) (not true))) (and (= |##f#0_0_3_0@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) ($IsAlloc HandleTypeType |##f#0_0_3_0@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7))) (and (and (|List.__default.Bind#canCall| List._default.RightIdentity$A List._default.RightIdentity$A (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (|List.__default.Bind#canCall| List._default.RightIdentity$A List._default.RightIdentity$A (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A))) (and (= |##xs#0_0_3_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) ($IsAlloc DatatypeTypeType |##xs#0_0_3_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= 1 $FunctionContextHeight)) (not true))) (=> (or (not (= 1 $FunctionContextHeight)) (not true)) (=> (and (= |##f#0_0_3_1@0| (|List.__default.Return#Handle| List._default.RightIdentity$A)) ($IsAlloc HandleTypeType |##f#0_0_3_1@0| (Tclass._System.___hTotalFunc1 List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7)) (=> (and (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (= |##xss#0_0_3_0@0| (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (and ($IsAlloc DatatypeTypeType |##xss#0_0_3_0@0| (Tclass.List.M (Tclass.List.M List._default.RightIdentity$A)) $Heap@@7) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A))))) (and (and (|List.__default.Map#canCall| List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (|List.__default.Join#canCall| List._default.RightIdentity$A (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS $LZ) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)))) (= (ControlFlow 0 5) (- 0 4)))) (|List.M#Equal| (List.__default.Bind List._default.RightIdentity$A List._default.RightIdentity$A (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A)) (List.__default.Join List._default.RightIdentity$A ($LS ($LS $LZ)) (List.__default.Map List._default.RightIdentity$A (Tclass.List.M List._default.RightIdentity$A) ($LS ($LS $LZ)) (Lit DatatypeTypeType |#List.M.Nil|) (|List.__default.Return#Handle| List._default.RightIdentity$A))))))))))))
(let ((anon31_Then_correct  (=> (= |##m#0_0_0@0| (Lit DatatypeTypeType |#List.M.Nil|)) (=> (and ($IsAlloc DatatypeTypeType |##m#0_0_0@0| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7) (= (ControlFlow 0 3) (- 0 2))) (or (not (= 1 $FunctionContextHeight)) (not true))))))
(let ((anon30_Then_correct  (=> (= |m#0@@4| |#List.M.Nil|) (and (and (and (and (and (=> (= (ControlFlow 0 16) 3) anon31_Then_correct) (=> (= (ControlFlow 0 16) 5) anon32_Then_correct)) (=> (= (ControlFlow 0 16) 8) anon33_Then_correct)) (=> (= (ControlFlow 0 16) 10) anon34_Then_correct)) (=> (= (ControlFlow 0 16) 12) anon35_Then_correct)) (=> (= (ControlFlow 0 16) 15) anon35_Else_correct)))))
(let ((anon30_Else_correct true))
(let ((anon20_Else_correct  (=> (or (not (= |m#0@@4| (|#List.M.Cons| |_mcc#0#1_0@0| |_mcc#1#1_0@0|))) (not true)) (and (=> (= (ControlFlow 0 17) 16) anon30_Then_correct) (=> (= (ControlFlow 0 17) 1) anon30_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@7 alloc false)) (and (=> (= (ControlFlow 0 43) 42) anon20_Then_correct) (=> (= (ControlFlow 0 43) 17) anon20_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@7) ($IsHeapAnchor $Heap@@7)) (=> (and (and (and ($Is DatatypeTypeType |m#0@@4| (Tclass.List.M List._default.RightIdentity$A)) ($IsAlloc DatatypeTypeType |m#0@@4| (Tclass.List.M List._default.RightIdentity$A) $Heap@@7)) (|$IsA#List.M| |m#0@@4|)) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 44) 43))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
