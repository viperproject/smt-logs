// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum-@PROC@.smt2 /normalizeNames:0 /emitDebugInformation:1 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2
     && TagFamily(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == tytagFamily$_#Func2);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx) } 
  Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx)
     == Set#IsMember(rd[heap, bx0, bx1], bx));

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r)) } 
            r != null && Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hPartialFunc2
     && TagFamily(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#PartialFunc2);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hTotalFunc2
     && TagFamily(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#TotalFunc2);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

const unique class._module.__default: ClassName;

// function declaration for _module._default.Sum
function _module.__default.Sum($ly: LayerType, n#0: int, f#0: HandleType) : int
uses {
// definition axiom for _module.__default.Sum (revealed)
axiom {:id "id0"} 0 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: int, f#0: HandleType :: 
    { _module.__default.Sum($LS($ly), n#0, f#0), $IsGoodHeap($Heap) } 
    _module.__default.Sum#canCall(n#0, f#0)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && LitInt(0) <= n#0
           && $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt)))
       ==> (n#0 != LitInt(0) ==> _module.__default.Sum#canCall(n#0 - 1, f#0))
         && _module.__default.Sum($LS($ly), n#0, f#0)
           == (if n#0 == LitInt(0)
             then 0
             else $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(n#0 - 1))): int
               + _module.__default.Sum($ly, n#0 - 1, f#0)));
// definition axiom for _module.__default.Sum for decreasing-related literals (revealed)
axiom {:id "id1"} 0 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: int, f#0: HandleType :: 
    {:weight 3} { _module.__default.Sum($LS($ly), LitInt(n#0), f#0), $IsGoodHeap($Heap) } 
    _module.__default.Sum#canCall(LitInt(n#0), f#0)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && LitInt(0) <= n#0
           && $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt)))
       ==> (LitInt(n#0) != LitInt(0)
           ==> _module.__default.Sum#canCall(LitInt(n#0 - 1), f#0))
         && _module.__default.Sum($LS($ly), LitInt(n#0), f#0)
           == (if LitInt(n#0) == LitInt(0)
             then 0
             else $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(LitInt(n#0 - 1)))): int
               + _module.__default.Sum($LS($ly), LitInt(n#0 - 1), f#0)));
// definition axiom for _module.__default.Sum for all literals (revealed)
axiom {:id "id2"} 0 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: int, f#0: HandleType :: 
    {:weight 3} { _module.__default.Sum($LS($ly), LitInt(n#0), Lit(f#0)), $IsGoodHeap($Heap) } 
    _module.__default.Sum#canCall(LitInt(n#0), Lit(f#0))
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && LitInt(0) <= n#0
           && $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt)))
       ==> (LitInt(n#0) != LitInt(0)
           ==> _module.__default.Sum#canCall(LitInt(n#0 - 1), Lit(f#0)))
         && _module.__default.Sum($LS($ly), LitInt(n#0), Lit(f#0))
           == (if LitInt(n#0) == LitInt(0)
             then 0
             else $Unbox(Apply1(TInt, TInt, $Heap, Lit(f#0), $Box(LitInt(n#0 - 1)))): int
               + _module.__default.Sum($LS($ly), LitInt(n#0 - 1), Lit(f#0))));
}

function _module.__default.Sum#canCall(n#0: int, f#0: HandleType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, n#0: int, f#0: HandleType :: 
  { _module.__default.Sum($LS($ly), n#0, f#0) } 
  _module.__default.Sum($LS($ly), n#0, f#0)
     == _module.__default.Sum($ly, n#0, f#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, n#0: int, f#0: HandleType :: 
  { _module.__default.Sum(AsFuelBottom($ly), n#0, f#0) } 
  _module.__default.Sum($ly, n#0, f#0) == _module.__default.Sum($LZ, n#0, f#0));

function _module.__default.Sum#requires(LayerType, int, HandleType) : bool;

// #requires axiom for _module.__default.Sum
axiom (forall $ly: LayerType, $Heap: Heap, n#0: int, f#0: HandleType :: 
  { _module.__default.Sum#requires($ly, n#0, f#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && LitInt(0) <= n#0
       && $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
     ==> _module.__default.Sum#requires($ly, n#0, f#0) == true);

procedure {:verboseName "Sum (well-formedness)"} CheckWellformed$$_module.__default.Sum(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt)));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Sum (well-formedness)"} CheckWellformed$$_module.__default.Sum(n#0: int, f#0: HandleType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##n#0: int;
  var ##f#0: HandleType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (n#0 == LitInt(0))
        {
            assume {:id "id3"} _module.__default.Sum($LS($LZ), n#0, f#0) == LitInt(0);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.Sum($LS($LZ), n#0, f#0), TInt);
            return;
        }
        else
        {
            assert {:id "id4"} $Is(n#0 - 1, Tclass._System.nat());
            ##n#0 := n#0 - 1;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#0, Tclass._System.nat(), $Heap);
            ##f#0 := f#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
            assert {:id "id5"} 0 <= n#0 || ##n#0 == n#0;
            assert {:id "id6"} ##n#0 < n#0;
            assume _module.__default.Sum#canCall(n#0 - 1, f#0);
            assume {:id "id7"} _module.__default.Sum($LS($LZ), n#0, f#0)
               == $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(n#0 - 1))): int
                 + _module.__default.Sum($LS($LZ), n#0 - 1, f#0);
            assume _module.__default.Sum#canCall(n#0 - 1, f#0);
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.Sum($LS($LZ), n#0, f#0), TInt);
            return;
        }

        assume false;
    }
}



procedure {:verboseName "Exchange (well-formedness)"} CheckWellFormed$$_module.__default.Exchange(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap), 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Exchange (call)"} Call$$_module.__default.Exchange(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap), 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap));
  // user-defined preconditions
  requires {:id "id13"} (forall i#1: int :: 
    { $Unbox(Apply1(TInt, TInt, $Heap, g#0, $Box(i#1))): int } 
      { $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(i#1))): int } 
    LitInt(0) <= i#1 && i#1 < n#0
       ==> $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(i#1))): int
         == $Unbox(Apply1(TInt, TInt, $Heap, g#0, $Box(i#1))): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n#0, f#0)
     && _module.__default.Sum#canCall(n#0, g#0);
  ensures {:id "id14"} _module.__default.Sum($LS($LS($LZ)), n#0, f#0)
     == _module.__default.Sum($LS($LS($LZ)), n#0, g#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Exchange (correctness)"} Impl$$_module.__default.Exchange(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap), 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id15"} (forall i#1: int :: 
    { $Unbox(Apply1(TInt, TInt, $Heap, g#0, $Box(i#1))): int } 
      { $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(i#1))): int } 
    LitInt(0) <= i#1 && i#1 < n#0
       ==> $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(i#1))): int
         == $Unbox(Apply1(TInt, TInt, $Heap, g#0, $Box(i#1))): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n#0, f#0)
     && _module.__default.Sum#canCall(n#0, g#0);
  ensures {:id "id16"} _module.__default.Sum($LS($LS($LZ)), n#0, f#0)
     == _module.__default.Sum($LS($LS($LZ)), n#0, g#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Exchange (correctness)"} Impl$$_module.__default.Exchange(n#0: int, f#0: HandleType, g#0: HandleType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: Exchange, Impl$$_module.__default.Exchange
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#n0#0: int :: 
      { _module.__default.Sum($LS($LZ), $ih#n0#0, g#0) } 
        { _module.__default.Sum($LS($LZ), $ih#n0#0, f#0) } 
      LitInt(0) <= $ih#n0#0
           && (forall i#2: int :: 
            { $Unbox(Apply1(TInt, TInt, $initHeapForallStmt#0, g#0, $Box(i#2))): int } 
              { $Unbox(Apply1(TInt, TInt, $initHeapForallStmt#0, f#0, $Box(i#2))): int } 
            LitInt(0) <= i#2 && i#2 < $ih#n0#0
               ==> $Unbox(Apply1(TInt, TInt, $initHeapForallStmt#0, f#0, $Box(i#2))): int
                 == $Unbox(Apply1(TInt, TInt, $initHeapForallStmt#0, g#0, $Box(i#2))): int)
           && 
          0 <= $ih#n0#0
           && $ih#n0#0 < n#0
         ==> _module.__default.Sum($LS($LZ), $ih#n0#0, f#0)
           == _module.__default.Sum($LS($LZ), $ih#n0#0, g#0));
    $_reverifyPost := false;
}



procedure {:verboseName "ExchangeEta (well-formedness)"} CheckWellFormed$$_module.__default.ExchangeEta(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap), 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "ExchangeEta (call)"} Call$$_module.__default.ExchangeEta(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap), 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap));
  // user-defined preconditions
  requires {:id "id24"} (forall i#1: int :: 
    { $Unbox(Apply1(TInt, TInt, $Heap, g#0, $Box(i#1))): int } 
      { $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(i#1))): int } 
    LitInt(0) <= i#1 && i#1 < n#0
       ==> $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(i#1))): int
         == $Unbox(Apply1(TInt, TInt, $Heap, g#0, $Box(i#1))): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#9#ly#0: LayerType :: 
            Handle1((lambda $l#9#heap#0: Heap, $l#9#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#9#heap#0, f#0, $Box($Unbox($l#9#x#0): int))): int)), 
              (lambda $l#9#heap#0: Heap, $l#9#x#0: Box :: $IsBox($l#9#x#0, TInt)), 
              (lambda $l#9#heap#0: Heap, $l#9#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#9#o#0: ref :: false))))), 
          $LS($LZ))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#11#ly#0: LayerType :: 
            Handle1((lambda $l#11#heap#0: Heap, $l#11#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#11#heap#0, g#0, $Box($Unbox($l#11#x#0): int))): int)), 
              (lambda $l#11#heap#0: Heap, $l#11#x#0: Box :: $IsBox($l#11#x#0, TInt)), 
              (lambda $l#11#heap#0: Heap, $l#11#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#11#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id25"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#12#ly#0: LayerType :: 
            Handle1((lambda $l#12#heap#0: Heap, $l#12#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#12#heap#0, f#0, $Box($Unbox($l#12#x#0): int))): int)), 
              (lambda $l#12#heap#0: Heap, $l#12#x#0: Box :: $IsBox($l#12#x#0, TInt)), 
              (lambda $l#12#heap#0: Heap, $l#12#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#12#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#13#ly#0: LayerType :: 
            Handle1((lambda $l#13#heap#0: Heap, $l#13#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#13#heap#0, g#0, $Box($Unbox($l#13#x#0): int))): int)), 
              (lambda $l#13#heap#0: Heap, $l#13#x#0: Box :: $IsBox($l#13#x#0, TInt)), 
              (lambda $l#13#heap#0: Heap, $l#13#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#13#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "ExchangeEta (correctness)"} Impl$$_module.__default.ExchangeEta(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap), 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id26"} (forall i#1: int :: 
    { $Unbox(Apply1(TInt, TInt, $Heap, g#0, $Box(i#1))): int } 
      { $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(i#1))): int } 
    LitInt(0) <= i#1 && i#1 < n#0
       ==> $Unbox(Apply1(TInt, TInt, $Heap, f#0, $Box(i#1))): int
         == $Unbox(Apply1(TInt, TInt, $Heap, g#0, $Box(i#1))): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#15#ly#0: LayerType :: 
            Handle1((lambda $l#15#heap#0: Heap, $l#15#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#15#heap#0, f#0, $Box($Unbox($l#15#x#0): int))): int)), 
              (lambda $l#15#heap#0: Heap, $l#15#x#0: Box :: $IsBox($l#15#x#0, TInt)), 
              (lambda $l#15#heap#0: Heap, $l#15#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#15#o#0: ref :: false))))), 
          $LS($LZ))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#17#ly#0: LayerType :: 
            Handle1((lambda $l#17#heap#0: Heap, $l#17#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#17#heap#0, g#0, $Box($Unbox($l#17#x#0): int))): int)), 
              (lambda $l#17#heap#0: Heap, $l#17#x#0: Box :: $IsBox($l#17#x#0, TInt)), 
              (lambda $l#17#heap#0: Heap, $l#17#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#17#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id27"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#18#ly#0: LayerType :: 
            Handle1((lambda $l#18#heap#0: Heap, $l#18#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#18#heap#0, f#0, $Box($Unbox($l#18#x#0): int))): int)), 
              (lambda $l#18#heap#0: Heap, $l#18#x#0: Box :: $IsBox($l#18#x#0, TInt)), 
              (lambda $l#18#heap#0: Heap, $l#18#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#18#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#19#ly#0: LayerType :: 
            Handle1((lambda $l#19#heap#0: Heap, $l#19#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#19#heap#0, g#0, $Box($Unbox($l#19#x#0): int))): int)), 
              (lambda $l#19#heap#0: Heap, $l#19#x#0: Box :: $IsBox($l#19#x#0, TInt)), 
              (lambda $l#19#heap#0: Heap, $l#19#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#19#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "ExchangeEta (correctness)"} Impl$$_module.__default.ExchangeEta(n#0: int, f#0: HandleType, g#0: HandleType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var n##0_0: int;
  var f##0_0: HandleType;
  var g##0_0: HandleType;

    // AddMethodImpl: ExchangeEta, Impl$$_module.__default.ExchangeEta
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(23,3)
    assume true;
    if (n#0 != 0)
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(23,26)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert {:id "id28"} $Is(n#0 - 1, Tclass._System.nat());
        n##0_0 := n#0 - 1;
        assume true;
        // ProcessCallStmt: CheckSubrange
        f##0_0 := f#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        g##0_0 := g#0;
        assert {:id "id29"} 0 <= n#0 || n##0_0 == n#0;
        assert {:id "id30"} n##0_0 < n#0;
        call {:id "id31"} Call$$_module.__default.ExchangeEta(n##0_0, f##0_0, g##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
    }
}



procedure {:verboseName "NestedAlphaRenaming (well-formedness)"} CheckWellFormed$$_module.__default.NestedAlphaRenaming(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "NestedAlphaRenaming (call)"} Call$$_module.__default.NestedAlphaRenaming(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#30#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#32#ly#0: LayerType :: 
              Handle1((lambda $l#32#heap#0: Heap, $l#32#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#32#heap#0, 
                        g#0, 
                        $Box($l#30#x#0), 
                        $Box($Unbox($l#32#y#0): int))): int)), 
                (lambda $l#32#heap#0: Heap, $l#32#y#0: Box :: $IsBox($l#32#y#0, TInt)), 
                (lambda $l#32#heap#0: Heap, $l#32#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#32#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#33#ly#0: LayerType :: 
            Handle1((lambda $l#33#heap#0: Heap, $l#33#x#0: Box :: 
                $Box(_module.__default.Sum($l#33#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#34#ly#0: LayerType :: 
                          Handle1((lambda $l#34#heap#0: Heap, $l#34#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#34#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#33#x#0): int), 
                                    $Box($Unbox($l#34#y#0): int))): int)), 
                            (lambda $l#34#heap#0: Heap, $l#34#y#0: Box :: $IsBox($l#34#y#0, TInt)), 
                            (lambda $l#34#heap#0: Heap, $l#34#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#34#o#0: ref :: false))))), 
                        $l#33#ly#0))))), 
              (lambda $l#33#heap#0: Heap, $l#33#x#0: Box :: $IsBox($l#33#x#0, TInt)), 
              (lambda $l#33#heap#0: Heap, $l#33#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#33#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    (forall $l#35#a#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#37#ly#0: LayerType :: 
              Handle1((lambda $l#37#heap#0: Heap, $l#37#b#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#37#heap#0, 
                        g#0, 
                        $Box($l#35#a#0), 
                        $Box($Unbox($l#37#b#0): int))): int)), 
                (lambda $l#37#heap#0: Heap, $l#37#b#0: Box :: $IsBox($l#37#b#0, TInt)), 
                (lambda $l#37#heap#0: Heap, $l#37#b#0: Box :: 
                  SetRef_to_SetBox((lambda $l#37#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#38#ly#0: LayerType :: 
            Handle1((lambda $l#38#heap#0: Heap, $l#38#a#0: Box :: 
                $Box(_module.__default.Sum($l#38#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#39#ly#0: LayerType :: 
                          Handle1((lambda $l#39#heap#0: Heap, $l#39#b#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#39#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#38#a#0): int), 
                                    $Box($Unbox($l#39#b#0): int))): int)), 
                            (lambda $l#39#heap#0: Heap, $l#39#b#0: Box :: $IsBox($l#39#b#0, TInt)), 
                            (lambda $l#39#heap#0: Heap, $l#39#b#0: Box :: 
                              SetRef_to_SetBox((lambda $l#39#o#0: ref :: false))))), 
                        $l#38#ly#0))))), 
              (lambda $l#38#heap#0: Heap, $l#38#a#0: Box :: $IsBox($l#38#a#0, TInt)), 
              (lambda $l#38#heap#0: Heap, $l#38#a#0: Box :: 
                SetRef_to_SetBox((lambda $l#38#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id37"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#40#ly#0: LayerType :: 
            Handle1((lambda $l#40#heap#0: Heap, $l#40#x#0: Box :: 
                $Box(_module.__default.Sum($l#40#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#41#ly#0: LayerType :: 
                          Handle1((lambda $l#41#heap#0: Heap, $l#41#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#41#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#40#x#0): int), 
                                    $Box($Unbox($l#41#y#0): int))): int)), 
                            (lambda $l#41#heap#0: Heap, $l#41#y#0: Box :: $IsBox($l#41#y#0, TInt)), 
                            (lambda $l#41#heap#0: Heap, $l#41#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#41#o#0: ref :: false))))), 
                        $l#40#ly#0))))), 
              (lambda $l#40#heap#0: Heap, $l#40#x#0: Box :: $IsBox($l#40#x#0, TInt)), 
              (lambda $l#40#heap#0: Heap, $l#40#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#40#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#42#ly#0: LayerType :: 
            Handle1((lambda $l#42#heap#0: Heap, $l#42#a#0: Box :: 
                $Box(_module.__default.Sum($l#42#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#43#ly#0: LayerType :: 
                          Handle1((lambda $l#43#heap#0: Heap, $l#43#b#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#43#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#42#a#0): int), 
                                    $Box($Unbox($l#43#b#0): int))): int)), 
                            (lambda $l#43#heap#0: Heap, $l#43#b#0: Box :: $IsBox($l#43#b#0, TInt)), 
                            (lambda $l#43#heap#0: Heap, $l#43#b#0: Box :: 
                              SetRef_to_SetBox((lambda $l#43#o#0: ref :: false))))), 
                        $l#42#ly#0))))), 
              (lambda $l#42#heap#0: Heap, $l#42#a#0: Box :: $IsBox($l#42#a#0, TInt)), 
              (lambda $l#42#heap#0: Heap, $l#42#a#0: Box :: 
                SetRef_to_SetBox((lambda $l#42#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "NestedAlphaRenaming (correctness)"} Impl$$_module.__default.NestedAlphaRenaming(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#44#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#46#ly#0: LayerType :: 
              Handle1((lambda $l#46#heap#0: Heap, $l#46#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#46#heap#0, 
                        g#0, 
                        $Box($l#44#x#0), 
                        $Box($Unbox($l#46#y#0): int))): int)), 
                (lambda $l#46#heap#0: Heap, $l#46#y#0: Box :: $IsBox($l#46#y#0, TInt)), 
                (lambda $l#46#heap#0: Heap, $l#46#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#46#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#47#ly#0: LayerType :: 
            Handle1((lambda $l#47#heap#0: Heap, $l#47#x#0: Box :: 
                $Box(_module.__default.Sum($l#47#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#48#ly#0: LayerType :: 
                          Handle1((lambda $l#48#heap#0: Heap, $l#48#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#48#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#47#x#0): int), 
                                    $Box($Unbox($l#48#y#0): int))): int)), 
                            (lambda $l#48#heap#0: Heap, $l#48#y#0: Box :: $IsBox($l#48#y#0, TInt)), 
                            (lambda $l#48#heap#0: Heap, $l#48#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#48#o#0: ref :: false))))), 
                        $l#47#ly#0))))), 
              (lambda $l#47#heap#0: Heap, $l#47#x#0: Box :: $IsBox($l#47#x#0, TInt)), 
              (lambda $l#47#heap#0: Heap, $l#47#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#47#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    (forall $l#49#a#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#51#ly#0: LayerType :: 
              Handle1((lambda $l#51#heap#0: Heap, $l#51#b#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#51#heap#0, 
                        g#0, 
                        $Box($l#49#a#0), 
                        $Box($Unbox($l#51#b#0): int))): int)), 
                (lambda $l#51#heap#0: Heap, $l#51#b#0: Box :: $IsBox($l#51#b#0, TInt)), 
                (lambda $l#51#heap#0: Heap, $l#51#b#0: Box :: 
                  SetRef_to_SetBox((lambda $l#51#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#52#ly#0: LayerType :: 
            Handle1((lambda $l#52#heap#0: Heap, $l#52#a#0: Box :: 
                $Box(_module.__default.Sum($l#52#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#53#ly#0: LayerType :: 
                          Handle1((lambda $l#53#heap#0: Heap, $l#53#b#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#53#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#52#a#0): int), 
                                    $Box($Unbox($l#53#b#0): int))): int)), 
                            (lambda $l#53#heap#0: Heap, $l#53#b#0: Box :: $IsBox($l#53#b#0, TInt)), 
                            (lambda $l#53#heap#0: Heap, $l#53#b#0: Box :: 
                              SetRef_to_SetBox((lambda $l#53#o#0: ref :: false))))), 
                        $l#52#ly#0))))), 
              (lambda $l#52#heap#0: Heap, $l#52#a#0: Box :: $IsBox($l#52#a#0, TInt)), 
              (lambda $l#52#heap#0: Heap, $l#52#a#0: Box :: 
                SetRef_to_SetBox((lambda $l#52#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id38"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#54#ly#0: LayerType :: 
            Handle1((lambda $l#54#heap#0: Heap, $l#54#x#0: Box :: 
                $Box(_module.__default.Sum($l#54#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#55#ly#0: LayerType :: 
                          Handle1((lambda $l#55#heap#0: Heap, $l#55#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#55#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#54#x#0): int), 
                                    $Box($Unbox($l#55#y#0): int))): int)), 
                            (lambda $l#55#heap#0: Heap, $l#55#y#0: Box :: $IsBox($l#55#y#0, TInt)), 
                            (lambda $l#55#heap#0: Heap, $l#55#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#55#o#0: ref :: false))))), 
                        $l#54#ly#0))))), 
              (lambda $l#54#heap#0: Heap, $l#54#x#0: Box :: $IsBox($l#54#x#0, TInt)), 
              (lambda $l#54#heap#0: Heap, $l#54#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#54#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#56#ly#0: LayerType :: 
            Handle1((lambda $l#56#heap#0: Heap, $l#56#a#0: Box :: 
                $Box(_module.__default.Sum($l#56#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#57#ly#0: LayerType :: 
                          Handle1((lambda $l#57#heap#0: Heap, $l#57#b#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#57#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#56#a#0): int), 
                                    $Box($Unbox($l#57#b#0): int))): int)), 
                            (lambda $l#57#heap#0: Heap, $l#57#b#0: Box :: $IsBox($l#57#b#0, TInt)), 
                            (lambda $l#57#heap#0: Heap, $l#57#b#0: Box :: 
                              SetRef_to_SetBox((lambda $l#57#o#0: ref :: false))))), 
                        $l#56#ly#0))))), 
              (lambda $l#56#heap#0: Heap, $l#56#a#0: Box :: $IsBox($l#56#a#0, TInt)), 
              (lambda $l#56#heap#0: Heap, $l#56#a#0: Box :: 
                SetRef_to_SetBox((lambda $l#56#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "NestedAlphaRenaming (correctness)"} Impl$$_module.__default.NestedAlphaRenaming(n#0: int, g#0: HandleType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: NestedAlphaRenaming, Impl$$_module.__default.NestedAlphaRenaming
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "DistributePlus1 (well-formedness)"} CheckWellFormed$$_module.__default.DistributePlus1(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "DistributePlus1 (call)"} Call$$_module.__default.DistributePlus1(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#5#ly#0: LayerType :: 
            Handle1((lambda $l#5#heap#0: Heap, $l#5#x#0: Box :: 
                $Box(1
                     + $Unbox(Apply1(TInt, TInt, $l#5#heap#0, f#0, $Box($Unbox($l#5#x#0): int))): int)), 
              (lambda $l#5#heap#0: Heap, $l#5#x#0: Box :: $IsBox($l#5#x#0, TInt)), 
              (lambda $l#5#heap#0: Heap, $l#5#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#5#o#0: ref :: false))))), 
          $LS($LZ))))
     && _module.__default.Sum#canCall(n#0, f#0);
  ensures {:id "id41"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#6#ly#0: LayerType :: 
            Handle1((lambda $l#6#heap#0: Heap, $l#6#x#0: Box :: 
                $Box(1
                     + $Unbox(Apply1(TInt, TInt, $l#6#heap#0, f#0, $Box($Unbox($l#6#x#0): int))): int)), 
              (lambda $l#6#heap#0: Heap, $l#6#x#0: Box :: $IsBox($l#6#x#0, TInt)), 
              (lambda $l#6#heap#0: Heap, $l#6#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#6#o#0: ref :: false))))), 
          $LS($LZ))))
     == n#0 + _module.__default.Sum($LS($LS($LZ)), n#0, f#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "DistributePlus1 (correctness)"} Impl$$_module.__default.DistributePlus1(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#8#ly#0: LayerType :: 
            Handle1((lambda $l#8#heap#0: Heap, $l#8#x#0: Box :: 
                $Box(1
                     + $Unbox(Apply1(TInt, TInt, $l#8#heap#0, f#0, $Box($Unbox($l#8#x#0): int))): int)), 
              (lambda $l#8#heap#0: Heap, $l#8#x#0: Box :: $IsBox($l#8#x#0, TInt)), 
              (lambda $l#8#heap#0: Heap, $l#8#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#8#o#0: ref :: false))))), 
          $LS($LZ))))
     && _module.__default.Sum#canCall(n#0, f#0);
  ensures {:id "id42"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#9#ly#0: LayerType :: 
            Handle1((lambda $l#9#heap#0: Heap, $l#9#x#0: Box :: 
                $Box(1
                     + $Unbox(Apply1(TInt, TInt, $l#9#heap#0, f#0, $Box($Unbox($l#9#x#0): int))): int)), 
              (lambda $l#9#heap#0: Heap, $l#9#x#0: Box :: $IsBox($l#9#x#0, TInt)), 
              (lambda $l#9#heap#0: Heap, $l#9#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#9#o#0: ref :: false))))), 
          $LS($LZ))))
     == n#0 + _module.__default.Sum($LS($LS($LZ)), n#0, f#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "DistributePlus1 (correctness)"} Impl$$_module.__default.DistributePlus1(n#0: int, f#0: HandleType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: DistributePlus1, Impl$$_module.__default.DistributePlus1
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#n0#0: int :: 
      { _module.__default.Sum($LS($LZ), $ih#n0#0, f#0) } 
      LitInt(0) <= $ih#n0#0 && Lit(true) && 0 <= $ih#n0#0 && $ih#n0#0 < n#0
         ==> _module.__default.Sum($LS($LZ), 
            $ih#n0#0, 
            Lit(AtLayer((lambda $l#10#ly#0: LayerType :: 
                  Handle1((lambda $l#10#heap#0: Heap, $l#10#x#0: Box :: 
                      $Box(1
                           + $Unbox(Apply1(TInt, TInt, $l#10#heap#0, f#0, $Box($Unbox($l#10#x#0): int))): int)), 
                    (lambda $l#10#heap#0: Heap, $l#10#x#0: Box :: $IsBox($l#10#x#0, TInt)), 
                    (lambda $l#10#heap#0: Heap, $l#10#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#10#o#0: ref :: false))))), 
                $LS($LZ))))
           == $ih#n0#0 + _module.__default.Sum($LS($LZ), $ih#n0#0, f#0));
    $_reverifyPost := false;
}



procedure {:verboseName "Distribute (well-formedness)"} CheckWellFormed$$_module.__default.Distribute(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap), 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Distribute (call)"} Call$$_module.__default.Distribute(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap), 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#5#ly#0: LayerType :: 
            Handle1((lambda $l#5#heap#0: Heap, $l#5#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#5#heap#0, f#0, $Box($Unbox($l#5#x#0): int))): int
                     + $Unbox(Apply1(TInt, TInt, $l#5#heap#0, g#0, $Box($Unbox($l#5#x#0): int))): int)), 
              (lambda $l#5#heap#0: Heap, $l#5#x#0: Box :: $IsBox($l#5#x#0, TInt)), 
              (lambda $l#5#heap#0: Heap, $l#5#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#5#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    _module.__default.Sum#canCall(n#0, f#0)
     && _module.__default.Sum#canCall(n#0, g#0);
  ensures {:id "id45"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#6#ly#0: LayerType :: 
            Handle1((lambda $l#6#heap#0: Heap, $l#6#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#6#heap#0, f#0, $Box($Unbox($l#6#x#0): int))): int
                     + $Unbox(Apply1(TInt, TInt, $l#6#heap#0, g#0, $Box($Unbox($l#6#x#0): int))): int)), 
              (lambda $l#6#heap#0: Heap, $l#6#x#0: Box :: $IsBox($l#6#x#0, TInt)), 
              (lambda $l#6#heap#0: Heap, $l#6#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#6#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), n#0, f#0)
       + _module.__default.Sum($LS($LS($LZ)), n#0, g#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Distribute (correctness)"} Impl$$_module.__default.Distribute(n#0: int where LitInt(0) <= n#0, 
    f#0: HandleType
       where $Is(f#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(f#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap), 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc1(TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#8#ly#0: LayerType :: 
            Handle1((lambda $l#8#heap#0: Heap, $l#8#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#8#heap#0, f#0, $Box($Unbox($l#8#x#0): int))): int
                     + $Unbox(Apply1(TInt, TInt, $l#8#heap#0, g#0, $Box($Unbox($l#8#x#0): int))): int)), 
              (lambda $l#8#heap#0: Heap, $l#8#x#0: Box :: $IsBox($l#8#x#0, TInt)), 
              (lambda $l#8#heap#0: Heap, $l#8#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#8#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    _module.__default.Sum#canCall(n#0, f#0)
     && _module.__default.Sum#canCall(n#0, g#0);
  ensures {:id "id46"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#9#ly#0: LayerType :: 
            Handle1((lambda $l#9#heap#0: Heap, $l#9#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, TInt, $l#9#heap#0, f#0, $Box($Unbox($l#9#x#0): int))): int
                     + $Unbox(Apply1(TInt, TInt, $l#9#heap#0, g#0, $Box($Unbox($l#9#x#0): int))): int)), 
              (lambda $l#9#heap#0: Heap, $l#9#x#0: Box :: $IsBox($l#9#x#0, TInt)), 
              (lambda $l#9#heap#0: Heap, $l#9#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#9#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), n#0, f#0)
       + _module.__default.Sum($LS($LS($LZ)), n#0, g#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Distribute (correctness)"} Impl$$_module.__default.Distribute(n#0: int, f#0: HandleType, g#0: HandleType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: Distribute, Impl$$_module.__default.Distribute
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#n0#0: int :: 
      { _module.__default.Sum($LS($LZ), $ih#n0#0, g#0) } 
        { _module.__default.Sum($LS($LZ), $ih#n0#0, f#0) } 
      LitInt(0) <= $ih#n0#0 && Lit(true) && 0 <= $ih#n0#0 && $ih#n0#0 < n#0
         ==> _module.__default.Sum($LS($LZ), 
            $ih#n0#0, 
            Lit(AtLayer((lambda $l#10#ly#0: LayerType :: 
                  Handle1((lambda $l#10#heap#0: Heap, $l#10#x#0: Box :: 
                      $Box($Unbox(Apply1(TInt, TInt, $l#10#heap#0, f#0, $Box($Unbox($l#10#x#0): int))): int
                           + $Unbox(Apply1(TInt, TInt, $l#10#heap#0, g#0, $Box($Unbox($l#10#x#0): int))): int)), 
                    (lambda $l#10#heap#0: Heap, $l#10#x#0: Box :: $IsBox($l#10#x#0, TInt)), 
                    (lambda $l#10#heap#0: Heap, $l#10#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#10#o#0: ref :: false))))), 
                $LS($LZ))))
           == _module.__default.Sum($LS($LZ), $ih#n0#0, f#0)
             + _module.__default.Sum($LS($LZ), $ih#n0#0, g#0));
    $_reverifyPost := false;
}



procedure {:verboseName "PrettyBasicBetaReduction (well-formedness)"} CheckWellFormed$$_module.__default.PrettyBasicBetaReduction(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap), 
    i#0: int);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "PrettyBasicBetaReduction (call)"} Call$$_module.__default.PrettyBasicBetaReduction(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap), 
    i#0: int);
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#15#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#17#ly#0: LayerType :: 
              Handle1((lambda $l#17#heap#0: Heap, $l#17#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#17#heap#0, 
                        g#0, 
                        $Box($l#15#x#0), 
                        $Box($Unbox($l#17#y#0): int))): int)), 
                (lambda $l#17#heap#0: Heap, $l#17#y#0: Box :: $IsBox($l#17#y#0, TInt)), 
                (lambda $l#17#heap#0: Heap, $l#17#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#17#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#19#ly#0: LayerType :: 
            Handle1((lambda $l#19#heap#0: Heap, $l#19#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#19#heap#0, g#0, $Box(i#0), $Box($Unbox($l#19#y#0): int))): int)), 
              (lambda $l#19#heap#0: Heap, $l#19#y#0: Box :: $IsBox($l#19#y#0, TInt)), 
              (lambda $l#19#heap#0: Heap, $l#19#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#19#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id51"} $Unbox(Apply1(TInt, 
        TInt, 
        $Heap, 
        Lit(AtLayer((lambda $l#20#ly#0: LayerType :: 
              Handle1((lambda $l#20#heap#0: Heap, $l#20#x#0: Box :: 
                  $Box(_module.__default.Sum($l#20#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#21#ly#0: LayerType :: 
                            Handle1((lambda $l#21#heap#0: Heap, $l#21#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#21#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#20#x#0): int), 
                                      $Box($Unbox($l#21#y#0): int))): int)), 
                              (lambda $l#21#heap#0: Heap, $l#21#y#0: Box :: $IsBox($l#21#y#0, TInt)), 
                              (lambda $l#21#heap#0: Heap, $l#21#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#21#o#0: ref :: false))))), 
                          $l#20#ly#0))))), 
                (lambda $l#20#heap#0: Heap, $l#20#x#0: Box :: $IsBox($l#20#x#0, TInt)), 
                (lambda $l#20#heap#0: Heap, $l#20#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#20#o#0: ref :: false))))), 
            $LS($LZ))), 
        $Box(i#0))): int
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#22#ly#0: LayerType :: 
            Handle1((lambda $l#22#heap#0: Heap, $l#22#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#22#heap#0, g#0, $Box(i#0), $Box($Unbox($l#22#y#0): int))): int)), 
              (lambda $l#22#heap#0: Heap, $l#22#y#0: Box :: $IsBox($l#22#y#0, TInt)), 
              (lambda $l#22#heap#0: Heap, $l#22#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#22#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "PrettyBasicBetaReduction (correctness)"} Impl$$_module.__default.PrettyBasicBetaReduction(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap), 
    i#0: int)
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#23#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#25#ly#0: LayerType :: 
              Handle1((lambda $l#25#heap#0: Heap, $l#25#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#25#heap#0, 
                        g#0, 
                        $Box($l#23#x#0), 
                        $Box($Unbox($l#25#y#0): int))): int)), 
                (lambda $l#25#heap#0: Heap, $l#25#y#0: Box :: $IsBox($l#25#y#0, TInt)), 
                (lambda $l#25#heap#0: Heap, $l#25#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#25#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#27#ly#0: LayerType :: 
            Handle1((lambda $l#27#heap#0: Heap, $l#27#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#27#heap#0, g#0, $Box(i#0), $Box($Unbox($l#27#y#0): int))): int)), 
              (lambda $l#27#heap#0: Heap, $l#27#y#0: Box :: $IsBox($l#27#y#0, TInt)), 
              (lambda $l#27#heap#0: Heap, $l#27#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#27#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id52"} $Unbox(Apply1(TInt, 
        TInt, 
        $Heap, 
        Lit(AtLayer((lambda $l#28#ly#0: LayerType :: 
              Handle1((lambda $l#28#heap#0: Heap, $l#28#x#0: Box :: 
                  $Box(_module.__default.Sum($l#28#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#29#ly#0: LayerType :: 
                            Handle1((lambda $l#29#heap#0: Heap, $l#29#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#29#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#28#x#0): int), 
                                      $Box($Unbox($l#29#y#0): int))): int)), 
                              (lambda $l#29#heap#0: Heap, $l#29#y#0: Box :: $IsBox($l#29#y#0, TInt)), 
                              (lambda $l#29#heap#0: Heap, $l#29#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#29#o#0: ref :: false))))), 
                          $l#28#ly#0))))), 
                (lambda $l#28#heap#0: Heap, $l#28#x#0: Box :: $IsBox($l#28#x#0, TInt)), 
                (lambda $l#28#heap#0: Heap, $l#28#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#28#o#0: ref :: false))))), 
            $LS($LZ))), 
        $Box(i#0))): int
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#30#ly#0: LayerType :: 
            Handle1((lambda $l#30#heap#0: Heap, $l#30#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#30#heap#0, g#0, $Box(i#0), $Box($Unbox($l#30#y#0): int))): int)), 
              (lambda $l#30#heap#0: Heap, $l#30#y#0: Box :: $IsBox($l#30#y#0, TInt)), 
              (lambda $l#30#heap#0: Heap, $l#30#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#30#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "PrettyBasicBetaReduction (correctness)"} Impl$$_module.__default.PrettyBasicBetaReduction(n#0: int, g#0: HandleType, i#0: int) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##n#0_0_0_0: int;
  var ##f#0_0_0_0: HandleType;
  var $lambdaHeap#0_0_0_0: Heap;
  var y#0_0_0_0: int;
  var $_Frame#l0_0_0_0: [ref,Field]bool;
  var lambdaResult#0_0_0_0: int;
  var $lambdaHeap#0_0_1_0: Heap;
  var x#0_0_1_0: int;
  var $_Frame#l0_0_1_0: [ref,Field]bool;
  var lambdaResult#0_0_1_0: int;
  var ##n#0_0_1_0: int;
  var ##f#0_0_1_0: HandleType;
  var $lambdaHeap#0_0_1_1: Heap;
  var y#0_0_1_0: int;
  var $_Frame#l0_0_1_1: [ref,Field]bool;
  var lambdaResult#0_0_1_1: int;
  var $lambdaHeap#0_0_0: Heap;
  var x#0_0_0: int;
  var $_Frame#l0_0_0: [ref,Field]bool;
  var lambdaResult#0_0_0: int;
  var ##n#0_0_0: int;
  var ##f#0_0_0: HandleType;
  var $lambdaHeap#0_0_1: Heap;
  var y#0_0_0: int;
  var $_Frame#l0_0_1: [ref,Field]bool;
  var lambdaResult#0_0_1: int;
  var $lambdaHeap#1_0_0_0: Heap;
  var y#1_0_0_0: int;
  var $_Frame#l1_0_0_0: [ref,Field]bool;
  var lambdaResult#1_0_0_0: int;
  var ##n#1_0_0_0: int;
  var ##f#1_0_0_0: HandleType;
  var $lambdaHeap#1_0_0_1: Heap;
  var y#1_0_0_1: int;
  var $_Frame#l1_0_0_1: [ref,Field]bool;
  var lambdaResult#1_0_0_1: int;
  var ##n#1_0_0_1: int;
  var ##f#1_0_0_1: HandleType;
  var $lambdaHeap#1_0_0_2: Heap;
  var y#1_0_0_2: int;
  var $_Frame#l1_0_0_2: [ref,Field]bool;
  var lambdaResult#1_0_0_2: int;
  var ##n#1_0_1_0: int;
  var ##f#1_0_1_0: HandleType;
  var $lambdaHeap#1_0_1_0: Heap;
  var y#1_0_1_0: int;
  var $_Frame#l1_0_1_0: [ref,Field]bool;
  var lambdaResult#1_0_1_0: int;
  var $lambdaHeap#1_0_1_1: Heap;
  var y#1_0_1_1: int;
  var $_Frame#l1_0_1_1: [ref,Field]bool;
  var lambdaResult#1_0_1_1: int;
  var ##n#1_0_1_1: int;
  var ##f#1_0_1_1: HandleType;
  var $lambdaHeap#1_0_1_2: Heap;
  var y#1_0_1_2: int;
  var $_Frame#l1_0_1_2: [ref,Field]bool;
  var lambdaResult#1_0_1_2: int;
  var $lambdaHeap#1_0_2_0: Heap;
  var x#1_0_2_0: int;
  var $_Frame#l1_0_2_0: [ref,Field]bool;
  var lambdaResult#1_0_2_0: int;
  var ##n#1_0_2_0: int;
  var ##f#1_0_2_0: HandleType;
  var $lambdaHeap#1_0_2_1: Heap;
  var y#1_0_2_0: int;
  var $_Frame#l1_0_2_1: [ref,Field]bool;
  var lambdaResult#1_0_2_1: int;
  var n##1_0_2_0: int;
  var g##1_0_2_0: HandleType;
  var i##1_0_2_0: int;
  var ##n#1_0_2_1: int;
  var ##f#1_0_2_1: HandleType;
  var $lambdaHeap#1_0_2_2: Heap;
  var y#1_0_2_1: int;
  var $_Frame#l1_0_2_2: [ref,Field]bool;
  var lambdaResult#1_0_2_2: int;
  var $lambdaHeap#1_0_3_0: Heap;
  var x#1_0_3_0: int;
  var $_Frame#l1_0_3_0: [ref,Field]bool;
  var lambdaResult#1_0_3_0: int;
  var ##n#1_0_3_0: int;
  var ##f#1_0_3_0: HandleType;
  var $lambdaHeap#1_0_3_1: Heap;
  var y#1_0_3_0: int;
  var $_Frame#l1_0_3_1: [ref,Field]bool;
  var lambdaResult#1_0_3_1: int;
  var $lambdaHeap#1_0_3_2: Heap;
  var x#1_0_3_1: int;
  var $_Frame#l1_0_3_2: [ref,Field]bool;
  var lambdaResult#1_0_3_2: int;
  var ##n#1_0_3_1: int;
  var ##f#1_0_3_1: HandleType;
  var $lambdaHeap#1_0_3_3: Heap;
  var y#1_0_3_1: int;
  var $_Frame#l1_0_3_3: [ref,Field]bool;
  var lambdaResult#1_0_3_3: int;
  var $lambdaHeap#1_0_0: Heap;
  var x#1_0_0: int;
  var $_Frame#l1_0_0: [ref,Field]bool;
  var lambdaResult#1_0_0: int;
  var ##n#1_0_0: int;
  var ##f#1_0_0: HandleType;
  var $lambdaHeap#1_0_1: Heap;
  var y#1_0_0: int;
  var $_Frame#l1_0_1: [ref,Field]bool;
  var lambdaResult#1_0_1: int;

    // AddMethodImpl: PrettyBasicBetaReduction, Impl$$_module.__default.PrettyBasicBetaReduction
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(45,3)
    assume true;
    if (n#0 == LitInt(0))
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0;
                assume $IsGoodHeap($lambdaHeap#0_0_0);
                assume $Heap == $lambdaHeap#0_0_0 || $HeapSucc($Heap, $lambdaHeap#0_0_0);
                havoc x#0_0_0;
                if (true)
                {
                    $_Frame#l0_0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0, $o, alloc)): bool ==> false);
                    ##n#0_0_0 := n#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#0_0_0, Tclass._System.nat(), $lambdaHeap#0_0_0);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_0_1;
                        assume $IsGoodHeap($lambdaHeap#0_0_1);
                        assume $lambdaHeap#0_0_0 == $lambdaHeap#0_0_1
                           || $HeapSucc($lambdaHeap#0_0_0, $lambdaHeap#0_0_1);
                        havoc y#0_0_0;
                        if (true)
                        {
                            $_Frame#l0_0_1 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_0_1, $o, alloc)): bool ==> false);
                            assume {:id "id58"} lambdaResult#0_0_1
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0_0, g#0, $Box(x#0_0_0), $Box(y#0_0_0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_1, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#0_0_0 := Lit(AtLayer((lambda $l#0_0_1#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_0_1#heap#0, 
                                    g#0, 
                                    $Box(x#0_0_0), 
                                    $Box($Unbox($l#0_0_1#y#0): int))): int)), 
                            (lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#y#0: Box :: $IsBox($l#0_0_1#y#0, TInt)), 
                            (lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_1#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#0_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_0_0);
                    assume _module.__default.Sum#canCall(n#0, 
                      Lit(AtLayer((lambda $l#0_0_2#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_2#heap#0, 
                                      g#0, 
                                      $Box(x#0_0_0), 
                                      $Box($Unbox($l#0_0_2#y#0): int))): int)), 
                              (lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#y#0: Box :: $IsBox($l#0_0_2#y#0, TInt)), 
                              (lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_2#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id59"} lambdaResult#0_0_0
                       == _module.__default.Sum($LS($LZ), 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_0_4#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_4#heap#0: Heap, $l#0_0_4#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_0_4#heap#0, 
                                        g#0, 
                                        $Box(x#0_0_0), 
                                        $Box($Unbox($l#0_0_4#y#0): int))): int)), 
                                (lambda $l#0_0_4#heap#0: Heap, $l#0_0_4#y#0: Box :: $IsBox($l#0_0_4#y#0, TInt)), 
                                (lambda $l#0_0_4#heap#0: Heap, $l#0_0_4#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_4#o#0: ref :: false))))), 
                            $LS($LZ))));
                    assume _module.__default.Sum#canCall(n#0, 
                      Lit(AtLayer((lambda $l#0_0_6#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_6#heap#0: Heap, $l#0_0_6#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_6#heap#0, 
                                      g#0, 
                                      $Box(x#0_0_0), 
                                      $Box($Unbox($l#0_0_6#y#0): int))): int)), 
                              (lambda $l#0_0_6#heap#0: Heap, $l#0_0_6#y#0: Box :: $IsBox($l#0_0_6#y#0, TInt)), 
                              (lambda $l#0_0_6#heap#0: Heap, $l#0_0_6#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_6#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_9#x#0: int :: 
              _module.__default.Sum#canCall(n#0, 
                Lit(AtLayer((lambda $l#0_0_11#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_11#heap#0: Heap, $l#0_0_11#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_0_11#heap#0, 
                                g#0, 
                                $Box($l#0_0_9#x#0), 
                                $Box($Unbox($l#0_0_11#y#0): int))): int)), 
                        (lambda $l#0_0_11#heap#0: Heap, $l#0_0_11#y#0: Box :: 
                          $IsBox($l#0_0_11#y#0, TInt)), 
                        (lambda $l#0_0_11#heap#0: Heap, $l#0_0_11#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_11#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_1_0;
                assume $IsGoodHeap($lambdaHeap#0_0_1_0);
                assume $Heap == $lambdaHeap#0_0_1_0 || $HeapSucc($Heap, $lambdaHeap#0_0_1_0);
                havoc x#0_0_1_0;
                if (true)
                {
                    $_Frame#l0_0_1_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_1_0, $o, alloc)): bool ==> false);
                    ##n#0_0_1_0 := n#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#0_0_1_0, Tclass._System.nat(), $lambdaHeap#0_0_1_0);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_0_1_1;
                        assume $IsGoodHeap($lambdaHeap#0_0_1_1);
                        assume $lambdaHeap#0_0_1_0 == $lambdaHeap#0_0_1_1
                           || $HeapSucc($lambdaHeap#0_0_1_0, $lambdaHeap#0_0_1_1);
                        havoc y#0_0_1_0;
                        if (true)
                        {
                            $_Frame#l0_0_1_1 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_0_1_1, $o, alloc)): bool ==> false);
                            assume {:id "id55"} lambdaResult#0_0_1_1
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0_1_0, g#0, $Box(x#0_0_1_0), $Box(y#0_0_1_0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_1_1, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#0_0_1_0 := Lit(AtLayer((lambda $l#0_0_1_1#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_1_1#heap#0: Heap, $l#0_0_1_1#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_0_1_1#heap#0, 
                                    g#0, 
                                    $Box(x#0_0_1_0), 
                                    $Box($Unbox($l#0_0_1_1#y#0): int))): int)), 
                            (lambda $l#0_0_1_1#heap#0: Heap, $l#0_0_1_1#y#0: Box :: 
                              $IsBox($l#0_0_1_1#y#0, TInt)), 
                            (lambda $l#0_0_1_1#heap#0: Heap, $l#0_0_1_1#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_1_1#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#0_0_1_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_0_1_0);
                    assume _module.__default.Sum#canCall(n#0, 
                      Lit(AtLayer((lambda $l#0_0_1_2#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_1_2#heap#0: Heap, $l#0_0_1_2#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_1_2#heap#0, 
                                      g#0, 
                                      $Box(x#0_0_1_0), 
                                      $Box($Unbox($l#0_0_1_2#y#0): int))): int)), 
                              (lambda $l#0_0_1_2#heap#0: Heap, $l#0_0_1_2#y#0: Box :: 
                                $IsBox($l#0_0_1_2#y#0, TInt)), 
                              (lambda $l#0_0_1_2#heap#0: Heap, $l#0_0_1_2#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_1_2#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id56"} lambdaResult#0_0_1_0
                       == _module.__default.Sum($LS($LZ), 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_0_1_4#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_1_4#heap#0: Heap, $l#0_0_1_4#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_0_1_4#heap#0, 
                                        g#0, 
                                        $Box(x#0_0_1_0), 
                                        $Box($Unbox($l#0_0_1_4#y#0): int))): int)), 
                                (lambda $l#0_0_1_4#heap#0: Heap, $l#0_0_1_4#y#0: Box :: 
                                  $IsBox($l#0_0_1_4#y#0, TInt)), 
                                (lambda $l#0_0_1_4#heap#0: Heap, $l#0_0_1_4#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_1_4#o#0: ref :: false))))), 
                            $LS($LZ))));
                    assume _module.__default.Sum#canCall(n#0, 
                      Lit(AtLayer((lambda $l#0_0_1_6#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_1_6#heap#0: Heap, $l#0_0_1_6#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_1_6#heap#0, 
                                      g#0, 
                                      $Box(x#0_0_1_0), 
                                      $Box($Unbox($l#0_0_1_6#y#0): int))): int)), 
                              (lambda $l#0_0_1_6#heap#0: Heap, $l#0_0_1_6#y#0: Box :: 
                                $IsBox($l#0_0_1_6#y#0, TInt)), 
                              (lambda $l#0_0_1_6#heap#0: Heap, $l#0_0_1_6#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_1_6#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_1_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_1_9#x#0: int :: 
              _module.__default.Sum#canCall(n#0, 
                Lit(AtLayer((lambda $l#0_0_1_11#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_1_11#heap#0: Heap, $l#0_0_1_11#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_0_1_11#heap#0, 
                                g#0, 
                                $Box($l#0_0_1_9#x#0), 
                                $Box($Unbox($l#0_0_1_11#y#0): int))): int)), 
                        (lambda $l#0_0_1_11#heap#0: Heap, $l#0_0_1_11#y#0: Box :: 
                          $IsBox($l#0_0_1_11#y#0, TInt)), 
                        (lambda $l#0_0_1_11#heap#0: Heap, $l#0_0_1_11#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_1_11#o#0: ref :: false))))), 
                    $LS($LZ)))));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
            assume true;
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
            assert {:id "id57"} {:subsumption 0} $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_0_1_14#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0_1_14#heap#0: Heap, $l#0_0_1_14#x#0: Box :: 
                            $Box(_module.__default.Sum($l#0_0_1_14#ly#0, 
                                n#0, 
                                Lit(AtLayer((lambda $l#0_0_1_15#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_0_1_15#heap#0: Heap, $l#0_0_1_15#y#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#0_0_1_15#heap#0, 
                                                g#0, 
                                                $Box($Unbox($l#0_0_1_14#x#0): int), 
                                                $Box($Unbox($l#0_0_1_15#y#0): int))): int)), 
                                        (lambda $l#0_0_1_15#heap#0: Heap, $l#0_0_1_15#y#0: Box :: 
                                          $IsBox($l#0_0_1_15#y#0, TInt)), 
                                        (lambda $l#0_0_1_15#heap#0: Heap, $l#0_0_1_15#y#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_0_1_15#o#0: ref :: false))))), 
                                    $l#0_0_1_14#ly#0))))), 
                          (lambda $l#0_0_1_14#heap#0: Heap, $l#0_0_1_14#x#0: Box :: 
                            $IsBox($l#0_0_1_14#x#0, TInt)), 
                          (lambda $l#0_0_1_14#heap#0: Heap, $l#0_0_1_14#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0_1_14#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0))): int
               == LitInt(0);
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
            assume true;
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
            ##n#0_0_0_0 := n#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#0_0_0_0, Tclass._System.nat(), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0_0;
                assume $IsGoodHeap($lambdaHeap#0_0_0_0);
                assume $Heap == $lambdaHeap#0_0_0_0 || $HeapSucc($Heap, $lambdaHeap#0_0_0_0);
                havoc y#0_0_0_0;
                if (true)
                {
                    $_Frame#l0_0_0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0_0, $o, alloc)): bool ==> false);
                    assume {:id "id53"} lambdaResult#0_0_0_0
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(y#0_0_0_0))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_0_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#0_0_0_0 := Lit(AtLayer((lambda $l#0_0_0_1#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_0_1#heap#0: Heap, $l#0_0_0_1#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_0_0_1#heap#0, 
                            g#0, 
                            $Box(i#0), 
                            $Box($Unbox($l#0_0_0_1#y#0): int))): int)), 
                    (lambda $l#0_0_0_1#heap#0: Heap, $l#0_0_0_1#y#0: Box :: 
                      $IsBox($l#0_0_0_1#y#0, TInt)), 
                    (lambda $l#0_0_0_1#heap#0: Heap, $l#0_0_0_1#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_0_1#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#0_0_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
            assume _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_0_0_2#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_0_2#heap#0: Heap, $l#0_0_0_2#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_0_0_2#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#0_0_0_2#y#0): int))): int)), 
                      (lambda $l#0_0_0_2#heap#0: Heap, $l#0_0_0_2#y#0: Box :: 
                        $IsBox($l#0_0_0_2#y#0, TInt)), 
                      (lambda $l#0_0_0_2#heap#0: Heap, $l#0_0_0_2#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_0_2#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_0_0_4#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_0_4#heap#0: Heap, $l#0_0_0_4#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_0_0_4#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#0_0_0_4#y#0): int))): int)), 
                      (lambda $l#0_0_0_4#heap#0: Heap, $l#0_0_0_4#y#0: Box :: 
                        $IsBox($l#0_0_0_4#y#0, TInt)), 
                      (lambda $l#0_0_0_4#heap#0: Heap, $l#0_0_0_4#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_0_4#o#0: ref :: false))))), 
                  $LS($LZ))));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(46,5)
            assert {:id "id54"} {:subsumption 0} LitInt(0)
               == _module.__default.Sum($LS($LS($LZ)), 
                n#0, 
                Lit(AtLayer((lambda $l#0_0_0_5#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_0_5#heap#0: Heap, $l#0_0_0_5#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_0_0_5#heap#0, 
                                g#0, 
                                $Box(i#0), 
                                $Box($Unbox($l#0_0_0_5#y#0): int))): int)), 
                        (lambda $l#0_0_0_5#heap#0: Heap, $l#0_0_0_5#y#0: Box :: 
                          $IsBox($l#0_0_0_5#y#0, TInt)), 
                        (lambda $l#0_0_0_5#heap#0: Heap, $l#0_0_0_5#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_0_5#o#0: ref :: false))))), 
                    $LS($LZ))));
            assume false;
        }

        assume {:id "id60"} $Unbox(Apply1(TInt, 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0_0_12#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_12#heap#0: Heap, $l#0_0_12#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_0_12#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_0_13#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_13#heap#0: Heap, $l#0_0_13#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_0_13#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_0_12#x#0): int), 
                                            $Box($Unbox($l#0_0_13#y#0): int))): int)), 
                                    (lambda $l#0_0_13#heap#0: Heap, $l#0_0_13#y#0: Box :: 
                                      $IsBox($l#0_0_13#y#0, TInt)), 
                                    (lambda $l#0_0_13#heap#0: Heap, $l#0_0_13#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_13#o#0: ref :: false))))), 
                                $l#0_0_12#ly#0))))), 
                      (lambda $l#0_0_12#heap#0: Heap, $l#0_0_12#x#0: Box :: 
                        $IsBox($l#0_0_12#x#0, TInt)), 
                      (lambda $l#0_0_12#heap#0: Heap, $l#0_0_12#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_12#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(i#0))): int
           == _module.__default.Sum($LS($LZ), 
            n#0, 
            Lit(AtLayer((lambda $l#0_0_14#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_14#heap#0: Heap, $l#0_0_14#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_0_14#heap#0, 
                            g#0, 
                            $Box(i#0), 
                            $Box($Unbox($l#0_0_14#y#0): int))): int)), 
                    (lambda $l#0_0_14#heap#0: Heap, $l#0_0_14#y#0: Box :: 
                      $IsBox($l#0_0_14#y#0, TInt)), 
                    (lambda $l#0_0_14#heap#0: Heap, $l#0_0_14#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_14#o#0: ref :: false))))), 
                $LS($LZ))));
    }
    else
    {
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_0;
                assume $IsGoodHeap($lambdaHeap#1_0_0);
                assume $Heap == $lambdaHeap#1_0_0 || $HeapSucc($Heap, $lambdaHeap#1_0_0);
                havoc x#1_0_0;
                if (true)
                {
                    $_Frame#l1_0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_0, $o, alloc)): bool ==> false);
                    ##n#1_0_0 := n#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#1_0_0, Tclass._System.nat(), $lambdaHeap#1_0_0);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#1_0_1;
                        assume $IsGoodHeap($lambdaHeap#1_0_1);
                        assume $lambdaHeap#1_0_0 == $lambdaHeap#1_0_1
                           || $HeapSucc($lambdaHeap#1_0_0, $lambdaHeap#1_0_1);
                        havoc y#1_0_0;
                        if (true)
                        {
                            $_Frame#l1_0_1 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#1_0_1, $o, alloc)): bool ==> false);
                            assume {:id "id89"} lambdaResult#1_0_1
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#1_0_0, g#0, $Box(x#1_0_0), $Box(y#1_0_0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#1_0_1, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#1_0_0 := Lit(AtLayer((lambda $l#1_0_1#ly#0: LayerType :: 
                          Handle1((lambda $l#1_0_1#heap#0: Heap, $l#1_0_1#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#1_0_1#heap#0, 
                                    g#0, 
                                    $Box(x#1_0_0), 
                                    $Box($Unbox($l#1_0_1#y#0): int))): int)), 
                            (lambda $l#1_0_1#heap#0: Heap, $l#1_0_1#y#0: Box :: $IsBox($l#1_0_1#y#0, TInt)), 
                            (lambda $l#1_0_1#heap#0: Heap, $l#1_0_1#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#1_0_1#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#1_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#1_0_0);
                    assume _module.__default.Sum#canCall(n#0, 
                      Lit(AtLayer((lambda $l#1_0_2#ly#0: LayerType :: 
                            Handle1((lambda $l#1_0_2#heap#0: Heap, $l#1_0_2#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#1_0_2#heap#0, 
                                      g#0, 
                                      $Box(x#1_0_0), 
                                      $Box($Unbox($l#1_0_2#y#0): int))): int)), 
                              (lambda $l#1_0_2#heap#0: Heap, $l#1_0_2#y#0: Box :: $IsBox($l#1_0_2#y#0, TInt)), 
                              (lambda $l#1_0_2#heap#0: Heap, $l#1_0_2#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#1_0_2#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id90"} lambdaResult#1_0_0
                       == _module.__default.Sum($LS($LZ), 
                        n#0, 
                        Lit(AtLayer((lambda $l#1_0_4#ly#0: LayerType :: 
                              Handle1((lambda $l#1_0_4#heap#0: Heap, $l#1_0_4#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#1_0_4#heap#0, 
                                        g#0, 
                                        $Box(x#1_0_0), 
                                        $Box($Unbox($l#1_0_4#y#0): int))): int)), 
                                (lambda $l#1_0_4#heap#0: Heap, $l#1_0_4#y#0: Box :: $IsBox($l#1_0_4#y#0, TInt)), 
                                (lambda $l#1_0_4#heap#0: Heap, $l#1_0_4#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#1_0_4#o#0: ref :: false))))), 
                            $LS($LZ))));
                    assume _module.__default.Sum#canCall(n#0, 
                      Lit(AtLayer((lambda $l#1_0_6#ly#0: LayerType :: 
                            Handle1((lambda $l#1_0_6#heap#0: Heap, $l#1_0_6#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#1_0_6#heap#0, 
                                      g#0, 
                                      $Box(x#1_0_0), 
                                      $Box($Unbox($l#1_0_6#y#0): int))): int)), 
                              (lambda $l#1_0_6#heap#0: Heap, $l#1_0_6#y#0: Box :: $IsBox($l#1_0_6#y#0, TInt)), 
                              (lambda $l#1_0_6#heap#0: Heap, $l#1_0_6#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#1_0_6#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#1_0_9#x#0: int :: 
              _module.__default.Sum#canCall(n#0, 
                Lit(AtLayer((lambda $l#1_0_11#ly#0: LayerType :: 
                      Handle1((lambda $l#1_0_11#heap#0: Heap, $l#1_0_11#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#1_0_11#heap#0, 
                                g#0, 
                                $Box($l#1_0_9#x#0), 
                                $Box($Unbox($l#1_0_11#y#0): int))): int)), 
                        (lambda $l#1_0_11#heap#0: Heap, $l#1_0_11#y#0: Box :: 
                          $IsBox($l#1_0_11#y#0, TInt)), 
                        (lambda $l#1_0_11#heap#0: Heap, $l#1_0_11#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#1_0_11#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_3_0;
                assume $IsGoodHeap($lambdaHeap#1_0_3_0);
                assume $Heap == $lambdaHeap#1_0_3_0 || $HeapSucc($Heap, $lambdaHeap#1_0_3_0);
                havoc x#1_0_3_0;
                if (true)
                {
                    $_Frame#l1_0_3_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_3_0, $o, alloc)): bool ==> false);
                    ##n#1_0_3_0 := n#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#1_0_3_0, Tclass._System.nat(), $lambdaHeap#1_0_3_0);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#1_0_3_1;
                        assume $IsGoodHeap($lambdaHeap#1_0_3_1);
                        assume $lambdaHeap#1_0_3_0 == $lambdaHeap#1_0_3_1
                           || $HeapSucc($lambdaHeap#1_0_3_0, $lambdaHeap#1_0_3_1);
                        havoc y#1_0_3_0;
                        if (true)
                        {
                            $_Frame#l1_0_3_1 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#1_0_3_1, $o, alloc)): bool ==> false);
                            assume {:id "id83"} lambdaResult#1_0_3_1
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#1_0_3_0, g#0, $Box(x#1_0_3_0), $Box(y#1_0_3_0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#1_0_3_1, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#1_0_3_0 := Lit(AtLayer((lambda $l#1_0_3_1#ly#0: LayerType :: 
                          Handle1((lambda $l#1_0_3_1#heap#0: Heap, $l#1_0_3_1#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#1_0_3_1#heap#0, 
                                    g#0, 
                                    $Box(x#1_0_3_0), 
                                    $Box($Unbox($l#1_0_3_1#y#0): int))): int)), 
                            (lambda $l#1_0_3_1#heap#0: Heap, $l#1_0_3_1#y#0: Box :: 
                              $IsBox($l#1_0_3_1#y#0, TInt)), 
                            (lambda $l#1_0_3_1#heap#0: Heap, $l#1_0_3_1#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#1_0_3_1#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#1_0_3_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#1_0_3_0);
                    assume _module.__default.Sum#canCall(n#0, 
                      Lit(AtLayer((lambda $l#1_0_3_2#ly#0: LayerType :: 
                            Handle1((lambda $l#1_0_3_2#heap#0: Heap, $l#1_0_3_2#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#1_0_3_2#heap#0, 
                                      g#0, 
                                      $Box(x#1_0_3_0), 
                                      $Box($Unbox($l#1_0_3_2#y#0): int))): int)), 
                              (lambda $l#1_0_3_2#heap#0: Heap, $l#1_0_3_2#y#0: Box :: 
                                $IsBox($l#1_0_3_2#y#0, TInt)), 
                              (lambda $l#1_0_3_2#heap#0: Heap, $l#1_0_3_2#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#1_0_3_2#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id84"} lambdaResult#1_0_3_0
                       == _module.__default.Sum($LS($LZ), 
                        n#0, 
                        Lit(AtLayer((lambda $l#1_0_3_4#ly#0: LayerType :: 
                              Handle1((lambda $l#1_0_3_4#heap#0: Heap, $l#1_0_3_4#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#1_0_3_4#heap#0, 
                                        g#0, 
                                        $Box(x#1_0_3_0), 
                                        $Box($Unbox($l#1_0_3_4#y#0): int))): int)), 
                                (lambda $l#1_0_3_4#heap#0: Heap, $l#1_0_3_4#y#0: Box :: 
                                  $IsBox($l#1_0_3_4#y#0, TInt)), 
                                (lambda $l#1_0_3_4#heap#0: Heap, $l#1_0_3_4#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#1_0_3_4#o#0: ref :: false))))), 
                            $LS($LZ))));
                    assume _module.__default.Sum#canCall(n#0, 
                      Lit(AtLayer((lambda $l#1_0_3_6#ly#0: LayerType :: 
                            Handle1((lambda $l#1_0_3_6#heap#0: Heap, $l#1_0_3_6#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#1_0_3_6#heap#0, 
                                      g#0, 
                                      $Box(x#1_0_3_0), 
                                      $Box($Unbox($l#1_0_3_6#y#0): int))): int)), 
                              (lambda $l#1_0_3_6#heap#0: Heap, $l#1_0_3_6#y#0: Box :: 
                                $IsBox($l#1_0_3_6#y#0, TInt)), 
                              (lambda $l#1_0_3_6#heap#0: Heap, $l#1_0_3_6#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#1_0_3_6#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_3_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#1_0_3_9#x#0: int :: 
              _module.__default.Sum#canCall(n#0, 
                Lit(AtLayer((lambda $l#1_0_3_11#ly#0: LayerType :: 
                      Handle1((lambda $l#1_0_3_11#heap#0: Heap, $l#1_0_3_11#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#1_0_3_11#heap#0, 
                                g#0, 
                                $Box($l#1_0_3_9#x#0), 
                                $Box($Unbox($l#1_0_3_11#y#0): int))): int)), 
                        (lambda $l#1_0_3_11#heap#0: Heap, $l#1_0_3_11#y#0: Box :: 
                          $IsBox($l#1_0_3_11#y#0, TInt)), 
                        (lambda $l#1_0_3_11#heap#0: Heap, $l#1_0_3_11#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#1_0_3_11#o#0: ref :: false))))), 
                    $LS($LZ)))));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_3_2;
                assume $IsGoodHeap($lambdaHeap#1_0_3_2);
                assume $Heap == $lambdaHeap#1_0_3_2 || $HeapSucc($Heap, $lambdaHeap#1_0_3_2);
                havoc x#1_0_3_1;
                if (true)
                {
                    $_Frame#l1_0_3_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_3_2, $o, alloc)): bool ==> false);
                    assert {:id "id85"} $Is(n#0 - 1, Tclass._System.nat());
                    ##n#1_0_3_1 := n#0 - 1;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#1_0_3_1, Tclass._System.nat(), $lambdaHeap#1_0_3_2);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#1_0_3_3;
                        assume $IsGoodHeap($lambdaHeap#1_0_3_3);
                        assume $lambdaHeap#1_0_3_2 == $lambdaHeap#1_0_3_3
                           || $HeapSucc($lambdaHeap#1_0_3_2, $lambdaHeap#1_0_3_3);
                        havoc y#1_0_3_1;
                        if (true)
                        {
                            $_Frame#l1_0_3_3 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#1_0_3_3, $o, alloc)): bool ==> false);
                            assume {:id "id86"} lambdaResult#1_0_3_3
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#1_0_3_2, g#0, $Box(x#1_0_3_1), $Box(y#1_0_3_1))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#1_0_3_3, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#1_0_3_1 := Lit(AtLayer((lambda $l#1_0_3_13#ly#0: LayerType :: 
                          Handle1((lambda $l#1_0_3_13#heap#0: Heap, $l#1_0_3_13#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#1_0_3_13#heap#0, 
                                    g#0, 
                                    $Box(x#1_0_3_1), 
                                    $Box($Unbox($l#1_0_3_13#y#0): int))): int)), 
                            (lambda $l#1_0_3_13#heap#0: Heap, $l#1_0_3_13#y#0: Box :: 
                              $IsBox($l#1_0_3_13#y#0, TInt)), 
                            (lambda $l#1_0_3_13#heap#0: Heap, $l#1_0_3_13#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#1_0_3_13#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#1_0_3_1, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#1_0_3_2);
                    assume _module.__default.Sum#canCall(n#0 - 1, 
                      Lit(AtLayer((lambda $l#1_0_3_14#ly#0: LayerType :: 
                            Handle1((lambda $l#1_0_3_14#heap#0: Heap, $l#1_0_3_14#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#1_0_3_14#heap#0, 
                                      g#0, 
                                      $Box(x#1_0_3_1), 
                                      $Box($Unbox($l#1_0_3_14#y#0): int))): int)), 
                              (lambda $l#1_0_3_14#heap#0: Heap, $l#1_0_3_14#y#0: Box :: 
                                $IsBox($l#1_0_3_14#y#0, TInt)), 
                              (lambda $l#1_0_3_14#heap#0: Heap, $l#1_0_3_14#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#1_0_3_14#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id87"} lambdaResult#1_0_3_2
                       == _module.__default.Sum($LS($LZ), 
                        n#0 - 1, 
                        Lit(AtLayer((lambda $l#1_0_3_16#ly#0: LayerType :: 
                              Handle1((lambda $l#1_0_3_16#heap#0: Heap, $l#1_0_3_16#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#1_0_3_16#heap#0, 
                                        g#0, 
                                        $Box(x#1_0_3_1), 
                                        $Box($Unbox($l#1_0_3_16#y#0): int))): int)), 
                                (lambda $l#1_0_3_16#heap#0: Heap, $l#1_0_3_16#y#0: Box :: 
                                  $IsBox($l#1_0_3_16#y#0, TInt)), 
                                (lambda $l#1_0_3_16#heap#0: Heap, $l#1_0_3_16#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#1_0_3_16#o#0: ref :: false))))), 
                            $LS($LZ))));
                    assume _module.__default.Sum#canCall(n#0 - 1, 
                      Lit(AtLayer((lambda $l#1_0_3_18#ly#0: LayerType :: 
                            Handle1((lambda $l#1_0_3_18#heap#0: Heap, $l#1_0_3_18#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#1_0_3_18#heap#0, 
                                      g#0, 
                                      $Box(x#1_0_3_1), 
                                      $Box($Unbox($l#1_0_3_18#y#0): int))): int)), 
                              (lambda $l#1_0_3_18#heap#0: Heap, $l#1_0_3_18#y#0: Box :: 
                                $IsBox($l#1_0_3_18#y#0, TInt)), 
                              (lambda $l#1_0_3_18#heap#0: Heap, $l#1_0_3_18#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#1_0_3_18#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_3_2, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#1_0_3_21#x#0: int :: 
              _module.__default.Sum#canCall(n#0 - 1, 
                Lit(AtLayer((lambda $l#1_0_3_23#ly#0: LayerType :: 
                      Handle1((lambda $l#1_0_3_23#heap#0: Heap, $l#1_0_3_23#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#1_0_3_23#heap#0, 
                                g#0, 
                                $Box($l#1_0_3_21#x#0), 
                                $Box($Unbox($l#1_0_3_23#y#0): int))): int)), 
                        (lambda $l#1_0_3_23#heap#0: Heap, $l#1_0_3_23#y#0: Box :: 
                          $IsBox($l#1_0_3_23#y#0, TInt)), 
                        (lambda $l#1_0_3_23#heap#0: Heap, $l#1_0_3_23#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#1_0_3_23#o#0: ref :: false))))), 
                    $LS($LZ)))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            assert {:id "id88"} {:subsumption 0} $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#1_0_3_28#ly#0: LayerType :: 
                        Handle1((lambda $l#1_0_3_28#heap#0: Heap, $l#1_0_3_28#x#0: Box :: 
                            $Box(_module.__default.Sum($l#1_0_3_28#ly#0, 
                                n#0, 
                                Lit(AtLayer((lambda $l#1_0_3_29#ly#0: LayerType :: 
                                      Handle1((lambda $l#1_0_3_29#heap#0: Heap, $l#1_0_3_29#y#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#1_0_3_29#heap#0, 
                                                g#0, 
                                                $Box($Unbox($l#1_0_3_28#x#0): int), 
                                                $Box($Unbox($l#1_0_3_29#y#0): int))): int)), 
                                        (lambda $l#1_0_3_29#heap#0: Heap, $l#1_0_3_29#y#0: Box :: 
                                          $IsBox($l#1_0_3_29#y#0, TInt)), 
                                        (lambda $l#1_0_3_29#heap#0: Heap, $l#1_0_3_29#y#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#1_0_3_29#o#0: ref :: false))))), 
                                    $l#1_0_3_28#ly#0))))), 
                          (lambda $l#1_0_3_28#heap#0: Heap, $l#1_0_3_28#x#0: Box :: 
                            $IsBox($l#1_0_3_28#x#0, TInt)), 
                          (lambda $l#1_0_3_28#heap#0: Heap, $l#1_0_3_28#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#1_0_3_28#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0))): int
               == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(n#0 - 1))): int
                 + $Unbox(Apply1(TInt, 
                    TInt, 
                    $Heap, 
                    Lit(AtLayer((lambda $l#1_0_3_30#ly#0: LayerType :: 
                          Handle1((lambda $l#1_0_3_30#heap#0: Heap, $l#1_0_3_30#x#0: Box :: 
                              $Box(_module.__default.Sum($l#1_0_3_30#ly#0, 
                                  n#0 - 1, 
                                  Lit(AtLayer((lambda $l#1_0_3_31#ly#0: LayerType :: 
                                        Handle1((lambda $l#1_0_3_31#heap#0: Heap, $l#1_0_3_31#y#0: Box :: 
                                            $Box($Unbox(Apply2(TInt, 
                                                  TInt, 
                                                  TInt, 
                                                  $l#1_0_3_31#heap#0, 
                                                  g#0, 
                                                  $Box($Unbox($l#1_0_3_30#x#0): int), 
                                                  $Box($Unbox($l#1_0_3_31#y#0): int))): int)), 
                                          (lambda $l#1_0_3_31#heap#0: Heap, $l#1_0_3_31#y#0: Box :: 
                                            $IsBox($l#1_0_3_31#y#0, TInt)), 
                                          (lambda $l#1_0_3_31#heap#0: Heap, $l#1_0_3_31#y#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#1_0_3_31#o#0: ref :: false))))), 
                                      $l#1_0_3_30#ly#0))))), 
                            (lambda $l#1_0_3_30#heap#0: Heap, $l#1_0_3_30#x#0: Box :: 
                              $IsBox($l#1_0_3_30#x#0, TInt)), 
                            (lambda $l#1_0_3_30#heap#0: Heap, $l#1_0_3_30#x#0: Box :: 
                              SetRef_to_SetBox((lambda $l#1_0_3_30#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box(i#0))): int;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_2_0;
                assume $IsGoodHeap($lambdaHeap#1_0_2_0);
                assume $Heap == $lambdaHeap#1_0_2_0 || $HeapSucc($Heap, $lambdaHeap#1_0_2_0);
                havoc x#1_0_2_0;
                if (true)
                {
                    $_Frame#l1_0_2_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_2_0, $o, alloc)): bool ==> false);
                    assume {:id "id72"} $Is(n#0 - 1, Tclass._System.nat());
                    ##n#1_0_2_0 := n#0 - 1;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#1_0_2_0, Tclass._System.nat(), $lambdaHeap#1_0_2_0);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#1_0_2_1;
                        assume $IsGoodHeap($lambdaHeap#1_0_2_1);
                        assume $lambdaHeap#1_0_2_0 == $lambdaHeap#1_0_2_1
                           || $HeapSucc($lambdaHeap#1_0_2_0, $lambdaHeap#1_0_2_1);
                        havoc y#1_0_2_0;
                        if (true)
                        {
                            $_Frame#l1_0_2_1 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#1_0_2_1, $o, alloc)): bool ==> false);
                            assume {:id "id73"} lambdaResult#1_0_2_1
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#1_0_2_0, g#0, $Box(x#1_0_2_0), $Box(y#1_0_2_0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#1_0_2_1, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#1_0_2_0 := Lit(AtLayer((lambda $l#1_0_2_1#ly#0: LayerType :: 
                          Handle1((lambda $l#1_0_2_1#heap#0: Heap, $l#1_0_2_1#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#1_0_2_1#heap#0, 
                                    g#0, 
                                    $Box(x#1_0_2_0), 
                                    $Box($Unbox($l#1_0_2_1#y#0): int))): int)), 
                            (lambda $l#1_0_2_1#heap#0: Heap, $l#1_0_2_1#y#0: Box :: 
                              $IsBox($l#1_0_2_1#y#0, TInt)), 
                            (lambda $l#1_0_2_1#heap#0: Heap, $l#1_0_2_1#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#1_0_2_1#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#1_0_2_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#1_0_2_0);
                    assume _module.__default.Sum#canCall(n#0 - 1, 
                      Lit(AtLayer((lambda $l#1_0_2_2#ly#0: LayerType :: 
                            Handle1((lambda $l#1_0_2_2#heap#0: Heap, $l#1_0_2_2#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#1_0_2_2#heap#0, 
                                      g#0, 
                                      $Box(x#1_0_2_0), 
                                      $Box($Unbox($l#1_0_2_2#y#0): int))): int)), 
                              (lambda $l#1_0_2_2#heap#0: Heap, $l#1_0_2_2#y#0: Box :: 
                                $IsBox($l#1_0_2_2#y#0, TInt)), 
                              (lambda $l#1_0_2_2#heap#0: Heap, $l#1_0_2_2#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#1_0_2_2#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id74"} lambdaResult#1_0_2_0
                       == _module.__default.Sum($LS($LZ), 
                        n#0 - 1, 
                        Lit(AtLayer((lambda $l#1_0_2_4#ly#0: LayerType :: 
                              Handle1((lambda $l#1_0_2_4#heap#0: Heap, $l#1_0_2_4#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#1_0_2_4#heap#0, 
                                        g#0, 
                                        $Box(x#1_0_2_0), 
                                        $Box($Unbox($l#1_0_2_4#y#0): int))): int)), 
                                (lambda $l#1_0_2_4#heap#0: Heap, $l#1_0_2_4#y#0: Box :: 
                                  $IsBox($l#1_0_2_4#y#0, TInt)), 
                                (lambda $l#1_0_2_4#heap#0: Heap, $l#1_0_2_4#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#1_0_2_4#o#0: ref :: false))))), 
                            $LS($LZ))));
                    assume _module.__default.Sum#canCall(n#0 - 1, 
                      Lit(AtLayer((lambda $l#1_0_2_6#ly#0: LayerType :: 
                            Handle1((lambda $l#1_0_2_6#heap#0: Heap, $l#1_0_2_6#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#1_0_2_6#heap#0, 
                                      g#0, 
                                      $Box(x#1_0_2_0), 
                                      $Box($Unbox($l#1_0_2_6#y#0): int))): int)), 
                              (lambda $l#1_0_2_6#heap#0: Heap, $l#1_0_2_6#y#0: Box :: 
                                $IsBox($l#1_0_2_6#y#0, TInt)), 
                              (lambda $l#1_0_2_6#heap#0: Heap, $l#1_0_2_6#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#1_0_2_6#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_2_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#1_0_2_9#x#0: int :: 
              _module.__default.Sum#canCall(n#0 - 1, 
                Lit(AtLayer((lambda $l#1_0_2_11#ly#0: LayerType :: 
                      Handle1((lambda $l#1_0_2_11#heap#0: Heap, $l#1_0_2_11#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#1_0_2_11#heap#0, 
                                g#0, 
                                $Box($l#1_0_2_9#x#0), 
                                $Box($Unbox($l#1_0_2_11#y#0): int))): int)), 
                        (lambda $l#1_0_2_11#heap#0: Heap, $l#1_0_2_11#y#0: Box :: 
                          $IsBox($l#1_0_2_11#y#0, TInt)), 
                        (lambda $l#1_0_2_11#heap#0: Heap, $l#1_0_2_11#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#1_0_2_11#o#0: ref :: false))))), 
                    $LS($LZ)))));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(55,33)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert {:id "id75"} $Is(n#0 - 1, Tclass._System.nat());
            n##1_0_2_0 := n#0 - 1;
            assume true;
            // ProcessCallStmt: CheckSubrange
            g##1_0_2_0 := g#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            i##1_0_2_0 := i#0;
            assert {:id "id76"} 0 <= n#0 || n##1_0_2_0 == n#0;
            assert {:id "id77"} 0 <= i#0 || n##1_0_2_0 < n#0 || i##1_0_2_0 == i#0;
            assert {:id "id78"} n##1_0_2_0 < n#0 || (n##1_0_2_0 == n#0 && i##1_0_2_0 < i#0);
            call {:id "id79"} Call$$_module.__default.PrettyBasicBetaReduction(n##1_0_2_0, g##1_0_2_0, i##1_0_2_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            assert {:id "id80"} $Is(n#0 - 1, Tclass._System.nat());
            ##n#1_0_2_1 := n#0 - 1;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1_0_2_1, Tclass._System.nat(), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_2_2;
                assume $IsGoodHeap($lambdaHeap#1_0_2_2);
                assume $Heap == $lambdaHeap#1_0_2_2 || $HeapSucc($Heap, $lambdaHeap#1_0_2_2);
                havoc y#1_0_2_1;
                if (true)
                {
                    $_Frame#l1_0_2_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_2_2, $o, alloc)): bool ==> false);
                    assume {:id "id81"} lambdaResult#1_0_2_2
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(y#1_0_2_1))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_2_2, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#1_0_2_1 := Lit(AtLayer((lambda $l#1_0_2_13#ly#0: LayerType :: 
                  Handle1((lambda $l#1_0_2_13#heap#0: Heap, $l#1_0_2_13#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#1_0_2_13#heap#0, 
                            g#0, 
                            $Box(i#0), 
                            $Box($Unbox($l#1_0_2_13#y#0): int))): int)), 
                    (lambda $l#1_0_2_13#heap#0: Heap, $l#1_0_2_13#y#0: Box :: 
                      $IsBox($l#1_0_2_13#y#0, TInt)), 
                    (lambda $l#1_0_2_13#heap#0: Heap, $l#1_0_2_13#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#1_0_2_13#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#1_0_2_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
            assume _module.__default.Sum#canCall(n#0 - 1, 
              Lit(AtLayer((lambda $l#1_0_2_14#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_2_14#heap#0: Heap, $l#1_0_2_14#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_2_14#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_2_14#y#0): int))): int)), 
                      (lambda $l#1_0_2_14#heap#0: Heap, $l#1_0_2_14#y#0: Box :: 
                        $IsBox($l#1_0_2_14#y#0, TInt)), 
                      (lambda $l#1_0_2_14#heap#0: Heap, $l#1_0_2_14#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_2_14#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume _module.__default.Sum#canCall(n#0 - 1, 
              Lit(AtLayer((lambda $l#1_0_2_16#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_2_16#heap#0: Heap, $l#1_0_2_16#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_2_16#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_2_16#y#0): int))): int)), 
                      (lambda $l#1_0_2_16#heap#0: Heap, $l#1_0_2_16#y#0: Box :: 
                        $IsBox($l#1_0_2_16#y#0, TInt)), 
                      (lambda $l#1_0_2_16#heap#0: Heap, $l#1_0_2_16#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_2_16#o#0: ref :: false))))), 
                  $LS($LZ))));
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            assert {:id "id82"} {:subsumption 0} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(n#0 - 1))): int
                 + $Unbox(Apply1(TInt, 
                    TInt, 
                    $Heap, 
                    Lit(AtLayer((lambda $l#1_0_2_17#ly#0: LayerType :: 
                          Handle1((lambda $l#1_0_2_17#heap#0: Heap, $l#1_0_2_17#x#0: Box :: 
                              $Box(_module.__default.Sum($l#1_0_2_17#ly#0, 
                                  n#0 - 1, 
                                  Lit(AtLayer((lambda $l#1_0_2_18#ly#0: LayerType :: 
                                        Handle1((lambda $l#1_0_2_18#heap#0: Heap, $l#1_0_2_18#y#0: Box :: 
                                            $Box($Unbox(Apply2(TInt, 
                                                  TInt, 
                                                  TInt, 
                                                  $l#1_0_2_18#heap#0, 
                                                  g#0, 
                                                  $Box($Unbox($l#1_0_2_17#x#0): int), 
                                                  $Box($Unbox($l#1_0_2_18#y#0): int))): int)), 
                                          (lambda $l#1_0_2_18#heap#0: Heap, $l#1_0_2_18#y#0: Box :: 
                                            $IsBox($l#1_0_2_18#y#0, TInt)), 
                                          (lambda $l#1_0_2_18#heap#0: Heap, $l#1_0_2_18#y#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#1_0_2_18#o#0: ref :: false))))), 
                                      $l#1_0_2_17#ly#0))))), 
                            (lambda $l#1_0_2_17#heap#0: Heap, $l#1_0_2_17#x#0: Box :: 
                              $IsBox($l#1_0_2_17#x#0, TInt)), 
                            (lambda $l#1_0_2_17#heap#0: Heap, $l#1_0_2_17#x#0: Box :: 
                              SetRef_to_SetBox((lambda $l#1_0_2_17#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box(i#0))): int
               == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(n#0 - 1))): int
                 + _module.__default.Sum($LS($LS($LZ)), 
                  n#0 - 1, 
                  Lit(AtLayer((lambda $l#1_0_2_19#ly#0: LayerType :: 
                        Handle1((lambda $l#1_0_2_19#heap#0: Heap, $l#1_0_2_19#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#1_0_2_19#heap#0, 
                                  g#0, 
                                  $Box(i#0), 
                                  $Box($Unbox($l#1_0_2_19#y#0): int))): int)), 
                          (lambda $l#1_0_2_19#heap#0: Heap, $l#1_0_2_19#y#0: Box :: 
                            $IsBox($l#1_0_2_19#y#0, TInt)), 
                          (lambda $l#1_0_2_19#heap#0: Heap, $l#1_0_2_19#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#1_0_2_19#o#0: ref :: false))))), 
                      $LS($LZ))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            assume {:id "id66"} $Is(n#0 - 1, Tclass._System.nat());
            ##n#1_0_1_0 := n#0 - 1;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1_0_1_0, Tclass._System.nat(), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_1_0;
                assume $IsGoodHeap($lambdaHeap#1_0_1_0);
                assume $Heap == $lambdaHeap#1_0_1_0 || $HeapSucc($Heap, $lambdaHeap#1_0_1_0);
                havoc y#1_0_1_0;
                if (true)
                {
                    $_Frame#l1_0_1_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_1_0, $o, alloc)): bool ==> false);
                    assume {:id "id67"} lambdaResult#1_0_1_0
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(y#1_0_1_0))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_1_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#1_0_1_0 := Lit(AtLayer((lambda $l#1_0_1_1#ly#0: LayerType :: 
                  Handle1((lambda $l#1_0_1_1#heap#0: Heap, $l#1_0_1_1#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#1_0_1_1#heap#0, 
                            g#0, 
                            $Box(i#0), 
                            $Box($Unbox($l#1_0_1_1#y#0): int))): int)), 
                    (lambda $l#1_0_1_1#heap#0: Heap, $l#1_0_1_1#y#0: Box :: 
                      $IsBox($l#1_0_1_1#y#0, TInt)), 
                    (lambda $l#1_0_1_1#heap#0: Heap, $l#1_0_1_1#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#1_0_1_1#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#1_0_1_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
            assume _module.__default.Sum#canCall(n#0 - 1, 
              Lit(AtLayer((lambda $l#1_0_1_2#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_1_2#heap#0: Heap, $l#1_0_1_2#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_1_2#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_1_2#y#0): int))): int)), 
                      (lambda $l#1_0_1_2#heap#0: Heap, $l#1_0_1_2#y#0: Box :: 
                        $IsBox($l#1_0_1_2#y#0, TInt)), 
                      (lambda $l#1_0_1_2#heap#0: Heap, $l#1_0_1_2#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_1_2#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume _module.__default.Sum#canCall(n#0 - 1, 
              Lit(AtLayer((lambda $l#1_0_1_4#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_1_4#heap#0: Heap, $l#1_0_1_4#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_1_4#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_1_4#y#0): int))): int)), 
                      (lambda $l#1_0_1_4#heap#0: Heap, $l#1_0_1_4#y#0: Box :: 
                        $IsBox($l#1_0_1_4#y#0, TInt)), 
                      (lambda $l#1_0_1_4#heap#0: Heap, $l#1_0_1_4#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_1_4#o#0: ref :: false))))), 
                  $LS($LZ))));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_1_1;
                assume $IsGoodHeap($lambdaHeap#1_0_1_1);
                assume $Heap == $lambdaHeap#1_0_1_1 || $HeapSucc($Heap, $lambdaHeap#1_0_1_1);
                havoc y#1_0_1_1;
                if (true)
                {
                    $_Frame#l1_0_1_1 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_1_1, $o, alloc)): bool ==> false);
                    assume {:id "id68"} lambdaResult#1_0_1_1
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(y#1_0_1_1))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_1_1, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assert {:id "id69"} $Is(n#0 - 1, Tclass._System.nat());
            ##n#1_0_1_1 := n#0 - 1;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1_0_1_1, Tclass._System.nat(), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_1_2;
                assume $IsGoodHeap($lambdaHeap#1_0_1_2);
                assume $Heap == $lambdaHeap#1_0_1_2 || $HeapSucc($Heap, $lambdaHeap#1_0_1_2);
                havoc y#1_0_1_2;
                if (true)
                {
                    $_Frame#l1_0_1_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_1_2, $o, alloc)): bool ==> false);
                    assume {:id "id70"} lambdaResult#1_0_1_2
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(y#1_0_1_2))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_1_2, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#1_0_1_1 := Lit(AtLayer((lambda $l#1_0_1_7#ly#0: LayerType :: 
                  Handle1((lambda $l#1_0_1_7#heap#0: Heap, $l#1_0_1_7#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#1_0_1_7#heap#0, 
                            g#0, 
                            $Box(i#0), 
                            $Box($Unbox($l#1_0_1_7#y#0): int))): int)), 
                    (lambda $l#1_0_1_7#heap#0: Heap, $l#1_0_1_7#y#0: Box :: 
                      $IsBox($l#1_0_1_7#y#0, TInt)), 
                    (lambda $l#1_0_1_7#heap#0: Heap, $l#1_0_1_7#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#1_0_1_7#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#1_0_1_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
            assume _module.__default.Sum#canCall(n#0 - 1, 
              Lit(AtLayer((lambda $l#1_0_1_8#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_1_8#heap#0: Heap, $l#1_0_1_8#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_1_8#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_1_8#y#0): int))): int)), 
                      (lambda $l#1_0_1_8#heap#0: Heap, $l#1_0_1_8#y#0: Box :: 
                        $IsBox($l#1_0_1_8#y#0, TInt)), 
                      (lambda $l#1_0_1_8#heap#0: Heap, $l#1_0_1_8#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_1_8#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume _module.__default.Sum#canCall(n#0 - 1, 
              Lit(AtLayer((lambda $l#1_0_1_11#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_1_11#heap#0: Heap, $l#1_0_1_11#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_1_11#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_1_11#y#0): int))): int)), 
                      (lambda $l#1_0_1_11#heap#0: Heap, $l#1_0_1_11#y#0: Box :: 
                        $IsBox($l#1_0_1_11#y#0, TInt)), 
                      (lambda $l#1_0_1_11#heap#0: Heap, $l#1_0_1_11#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_1_11#o#0: ref :: false))))), 
                  $LS($LZ))));
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            assert {:id "id71"} {:subsumption 0} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(n#0 - 1))): int
                 + _module.__default.Sum($LS($LS($LZ)), 
                  n#0 - 1, 
                  Lit(AtLayer((lambda $l#1_0_1_12#ly#0: LayerType :: 
                        Handle1((lambda $l#1_0_1_12#heap#0: Heap, $l#1_0_1_12#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#1_0_1_12#heap#0, 
                                  g#0, 
                                  $Box(i#0), 
                                  $Box($Unbox($l#1_0_1_12#y#0): int))): int)), 
                          (lambda $l#1_0_1_12#heap#0: Heap, $l#1_0_1_12#y#0: Box :: 
                            $IsBox($l#1_0_1_12#y#0, TInt)), 
                          (lambda $l#1_0_1_12#heap#0: Heap, $l#1_0_1_12#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#1_0_1_12#o#0: ref :: false))))), 
                      $LS($LZ))))
               == $Unbox(Apply1(TInt, 
                    TInt, 
                    $Heap, 
                    Lit(AtLayer((lambda $l#1_0_1_13#ly#0: LayerType :: 
                          Handle1((lambda $l#1_0_1_13#heap#0: Heap, $l#1_0_1_13#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#1_0_1_13#heap#0, 
                                    g#0, 
                                    $Box(i#0), 
                                    $Box($Unbox($l#1_0_1_13#y#0): int))): int)), 
                            (lambda $l#1_0_1_13#heap#0: Heap, $l#1_0_1_13#y#0: Box :: 
                              $IsBox($l#1_0_1_13#y#0, TInt)), 
                            (lambda $l#1_0_1_13#heap#0: Heap, $l#1_0_1_13#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#1_0_1_13#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box(n#0 - 1))): int
                 + _module.__default.Sum($LS($LS($LZ)), 
                  n#0 - 1, 
                  Lit(AtLayer((lambda $l#1_0_1_14#ly#0: LayerType :: 
                        Handle1((lambda $l#1_0_1_14#heap#0: Heap, $l#1_0_1_14#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#1_0_1_14#heap#0, 
                                  g#0, 
                                  $Box(i#0), 
                                  $Box($Unbox($l#1_0_1_14#y#0): int))): int)), 
                          (lambda $l#1_0_1_14#heap#0: Heap, $l#1_0_1_14#y#0: Box :: 
                            $IsBox($l#1_0_1_14#y#0, TInt)), 
                          (lambda $l#1_0_1_14#heap#0: Heap, $l#1_0_1_14#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#1_0_1_14#o#0: ref :: false))))), 
                      $LS($LZ))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_0_0;
                assume $IsGoodHeap($lambdaHeap#1_0_0_0);
                assume $Heap == $lambdaHeap#1_0_0_0 || $HeapSucc($Heap, $lambdaHeap#1_0_0_0);
                havoc y#1_0_0_0;
                if (true)
                {
                    $_Frame#l1_0_0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_0_0, $o, alloc)): bool ==> false);
                    assume {:id "id61"} lambdaResult#1_0_0_0
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(y#1_0_0_0))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_0_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume {:id "id62"} $Is(n#0 - 1, Tclass._System.nat());
            ##n#1_0_0_0 := n#0 - 1;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1_0_0_0, Tclass._System.nat(), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_0_1;
                assume $IsGoodHeap($lambdaHeap#1_0_0_1);
                assume $Heap == $lambdaHeap#1_0_0_1 || $HeapSucc($Heap, $lambdaHeap#1_0_0_1);
                havoc y#1_0_0_1;
                if (true)
                {
                    $_Frame#l1_0_0_1 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_0_1, $o, alloc)): bool ==> false);
                    assume {:id "id63"} lambdaResult#1_0_0_1
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(y#1_0_0_1))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_0_1, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#1_0_0_0 := Lit(AtLayer((lambda $l#1_0_0_2#ly#0: LayerType :: 
                  Handle1((lambda $l#1_0_0_2#heap#0: Heap, $l#1_0_0_2#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#1_0_0_2#heap#0, 
                            g#0, 
                            $Box(i#0), 
                            $Box($Unbox($l#1_0_0_2#y#0): int))): int)), 
                    (lambda $l#1_0_0_2#heap#0: Heap, $l#1_0_0_2#y#0: Box :: 
                      $IsBox($l#1_0_0_2#y#0, TInt)), 
                    (lambda $l#1_0_0_2#heap#0: Heap, $l#1_0_0_2#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#1_0_0_2#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#1_0_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
            assume _module.__default.Sum#canCall(n#0 - 1, 
              Lit(AtLayer((lambda $l#1_0_0_3#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_0_3#heap#0: Heap, $l#1_0_0_3#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_0_3#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_0_3#y#0): int))): int)), 
                      (lambda $l#1_0_0_3#heap#0: Heap, $l#1_0_0_3#y#0: Box :: 
                        $IsBox($l#1_0_0_3#y#0, TInt)), 
                      (lambda $l#1_0_0_3#heap#0: Heap, $l#1_0_0_3#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_0_3#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume _module.__default.Sum#canCall(n#0 - 1, 
              Lit(AtLayer((lambda $l#1_0_0_6#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_0_6#heap#0: Heap, $l#1_0_0_6#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_0_6#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_0_6#y#0): int))): int)), 
                      (lambda $l#1_0_0_6#heap#0: Heap, $l#1_0_0_6#y#0: Box :: 
                        $IsBox($l#1_0_0_6#y#0, TInt)), 
                      (lambda $l#1_0_0_6#heap#0: Heap, $l#1_0_0_6#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_0_6#o#0: ref :: false))))), 
                  $LS($LZ))));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            ##n#1_0_0_1 := n#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1_0_0_1, Tclass._System.nat(), $Heap);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#1_0_0_2;
                assume $IsGoodHeap($lambdaHeap#1_0_0_2);
                assume $Heap == $lambdaHeap#1_0_0_2 || $HeapSucc($Heap, $lambdaHeap#1_0_0_2);
                havoc y#1_0_0_2;
                if (true)
                {
                    $_Frame#l1_0_0_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#1_0_0_2, $o, alloc)): bool ==> false);
                    assume {:id "id64"} lambdaResult#1_0_0_2
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(y#1_0_0_2))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#1_0_0_2, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#1_0_0_1 := Lit(AtLayer((lambda $l#1_0_0_8#ly#0: LayerType :: 
                  Handle1((lambda $l#1_0_0_8#heap#0: Heap, $l#1_0_0_8#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#1_0_0_8#heap#0, 
                            g#0, 
                            $Box(i#0), 
                            $Box($Unbox($l#1_0_0_8#y#0): int))): int)), 
                    (lambda $l#1_0_0_8#heap#0: Heap, $l#1_0_0_8#y#0: Box :: 
                      $IsBox($l#1_0_0_8#y#0, TInt)), 
                    (lambda $l#1_0_0_8#heap#0: Heap, $l#1_0_0_8#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#1_0_0_8#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#1_0_0_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
            assume _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#1_0_0_9#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_0_9#heap#0: Heap, $l#1_0_0_9#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_0_9#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_0_9#y#0): int))): int)), 
                      (lambda $l#1_0_0_9#heap#0: Heap, $l#1_0_0_9#y#0: Box :: 
                        $IsBox($l#1_0_0_9#y#0, TInt)), 
                      (lambda $l#1_0_0_9#heap#0: Heap, $l#1_0_0_9#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_0_9#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#1_0_0_11#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_0_11#heap#0: Heap, $l#1_0_0_11#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#1_0_0_11#heap#0, 
                              g#0, 
                              $Box(i#0), 
                              $Box($Unbox($l#1_0_0_11#y#0): int))): int)), 
                      (lambda $l#1_0_0_11#heap#0: Heap, $l#1_0_0_11#y#0: Box :: 
                        $IsBox($l#1_0_0_11#y#0, TInt)), 
                      (lambda $l#1_0_0_11#heap#0: Heap, $l#1_0_0_11#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_0_11#o#0: ref :: false))))), 
                  $LS($LZ))));
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(52,5)
            assert {:id "id65"} {:subsumption 0} $Unbox(Apply1(TInt, 
                    TInt, 
                    $Heap, 
                    Lit(AtLayer((lambda $l#1_0_0_12#ly#0: LayerType :: 
                          Handle1((lambda $l#1_0_0_12#heap#0: Heap, $l#1_0_0_12#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#1_0_0_12#heap#0, 
                                    g#0, 
                                    $Box(i#0), 
                                    $Box($Unbox($l#1_0_0_12#y#0): int))): int)), 
                            (lambda $l#1_0_0_12#heap#0: Heap, $l#1_0_0_12#y#0: Box :: 
                              $IsBox($l#1_0_0_12#y#0, TInt)), 
                            (lambda $l#1_0_0_12#heap#0: Heap, $l#1_0_0_12#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#1_0_0_12#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box(n#0 - 1))): int
                 + _module.__default.Sum($LS($LS($LZ)), 
                  n#0 - 1, 
                  Lit(AtLayer((lambda $l#1_0_0_13#ly#0: LayerType :: 
                        Handle1((lambda $l#1_0_0_13#heap#0: Heap, $l#1_0_0_13#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#1_0_0_13#heap#0, 
                                  g#0, 
                                  $Box(i#0), 
                                  $Box($Unbox($l#1_0_0_13#y#0): int))): int)), 
                          (lambda $l#1_0_0_13#heap#0: Heap, $l#1_0_0_13#y#0: Box :: 
                            $IsBox($l#1_0_0_13#y#0, TInt)), 
                          (lambda $l#1_0_0_13#heap#0: Heap, $l#1_0_0_13#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#1_0_0_13#o#0: ref :: false))))), 
                      $LS($LZ))))
               == _module.__default.Sum($LS($LS($LZ)), 
                n#0, 
                Lit(AtLayer((lambda $l#1_0_0_14#ly#0: LayerType :: 
                      Handle1((lambda $l#1_0_0_14#heap#0: Heap, $l#1_0_0_14#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#1_0_0_14#heap#0, 
                                g#0, 
                                $Box(i#0), 
                                $Box($Unbox($l#1_0_0_14#y#0): int))): int)), 
                        (lambda $l#1_0_0_14#heap#0: Heap, $l#1_0_0_14#y#0: Box :: 
                          $IsBox($l#1_0_0_14#y#0, TInt)), 
                        (lambda $l#1_0_0_14#heap#0: Heap, $l#1_0_0_14#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#1_0_0_14#o#0: ref :: false))))), 
                    $LS($LZ))));
            assume false;
        }

        assume {:id "id91"} $Unbox(Apply1(TInt, 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#1_0_12#ly#0: LayerType :: 
                    Handle1((lambda $l#1_0_12#heap#0: Heap, $l#1_0_12#x#0: Box :: 
                        $Box(_module.__default.Sum($l#1_0_12#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#1_0_13#ly#0: LayerType :: 
                                  Handle1((lambda $l#1_0_13#heap#0: Heap, $l#1_0_13#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#1_0_13#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#1_0_12#x#0): int), 
                                            $Box($Unbox($l#1_0_13#y#0): int))): int)), 
                                    (lambda $l#1_0_13#heap#0: Heap, $l#1_0_13#y#0: Box :: 
                                      $IsBox($l#1_0_13#y#0, TInt)), 
                                    (lambda $l#1_0_13#heap#0: Heap, $l#1_0_13#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#1_0_13#o#0: ref :: false))))), 
                                $l#1_0_12#ly#0))))), 
                      (lambda $l#1_0_12#heap#0: Heap, $l#1_0_12#x#0: Box :: 
                        $IsBox($l#1_0_12#x#0, TInt)), 
                      (lambda $l#1_0_12#heap#0: Heap, $l#1_0_12#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#1_0_12#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(i#0))): int
           == _module.__default.Sum($LS($LZ), 
            n#0, 
            Lit(AtLayer((lambda $l#1_0_14#ly#0: LayerType :: 
                  Handle1((lambda $l#1_0_14#heap#0: Heap, $l#1_0_14#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#1_0_14#heap#0, 
                            g#0, 
                            $Box(i#0), 
                            $Box($Unbox($l#1_0_14#y#0): int))): int)), 
                    (lambda $l#1_0_14#heap#0: Heap, $l#1_0_14#y#0: Box :: 
                      $IsBox($l#1_0_14#y#0, TInt)), 
                    (lambda $l#1_0_14#heap#0: Heap, $l#1_0_14#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#1_0_14#o#0: ref :: false))))), 
                $LS($LZ))));
    }
}



procedure {:verboseName "BetaReduction0 (well-formedness)"} CheckWellFormed$$_module.__default.BetaReduction0(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap), 
    i#0: int);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "BetaReduction0 (call)"} Call$$_module.__default.BetaReduction0(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap), 
    i#0: int);
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#15#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#17#ly#0: LayerType :: 
              Handle1((lambda $l#17#heap#0: Heap, $l#17#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#17#heap#0, 
                        g#0, 
                        $Box($l#15#x#0), 
                        $Box($Unbox($l#17#y#0): int))): int)), 
                (lambda $l#17#heap#0: Heap, $l#17#y#0: Box :: $IsBox($l#17#y#0, TInt)), 
                (lambda $l#17#heap#0: Heap, $l#17#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#17#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#19#ly#0: LayerType :: 
            Handle1((lambda $l#19#heap#0: Heap, $l#19#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#19#heap#0, g#0, $Box(i#0), $Box($Unbox($l#19#y#0): int))): int)), 
              (lambda $l#19#heap#0: Heap, $l#19#y#0: Box :: $IsBox($l#19#y#0, TInt)), 
              (lambda $l#19#heap#0: Heap, $l#19#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#19#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id96"} $Unbox(Apply1(TInt, 
        TInt, 
        $Heap, 
        Lit(AtLayer((lambda $l#20#ly#0: LayerType :: 
              Handle1((lambda $l#20#heap#0: Heap, $l#20#x#0: Box :: 
                  $Box(_module.__default.Sum($l#20#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#21#ly#0: LayerType :: 
                            Handle1((lambda $l#21#heap#0: Heap, $l#21#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#21#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#20#x#0): int), 
                                      $Box($Unbox($l#21#y#0): int))): int)), 
                              (lambda $l#21#heap#0: Heap, $l#21#y#0: Box :: $IsBox($l#21#y#0, TInt)), 
                              (lambda $l#21#heap#0: Heap, $l#21#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#21#o#0: ref :: false))))), 
                          $l#20#ly#0))))), 
                (lambda $l#20#heap#0: Heap, $l#20#x#0: Box :: $IsBox($l#20#x#0, TInt)), 
                (lambda $l#20#heap#0: Heap, $l#20#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#20#o#0: ref :: false))))), 
            $LS($LZ))), 
        $Box(i#0))): int
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#22#ly#0: LayerType :: 
            Handle1((lambda $l#22#heap#0: Heap, $l#22#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#22#heap#0, g#0, $Box(i#0), $Box($Unbox($l#22#y#0): int))): int)), 
              (lambda $l#22#heap#0: Heap, $l#22#y#0: Box :: $IsBox($l#22#y#0, TInt)), 
              (lambda $l#22#heap#0: Heap, $l#22#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#22#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "BetaReduction0 (correctness)"} Impl$$_module.__default.BetaReduction0(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap), 
    i#0: int)
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#23#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#25#ly#0: LayerType :: 
              Handle1((lambda $l#25#heap#0: Heap, $l#25#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#25#heap#0, 
                        g#0, 
                        $Box($l#23#x#0), 
                        $Box($Unbox($l#25#y#0): int))): int)), 
                (lambda $l#25#heap#0: Heap, $l#25#y#0: Box :: $IsBox($l#25#y#0, TInt)), 
                (lambda $l#25#heap#0: Heap, $l#25#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#25#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#27#ly#0: LayerType :: 
            Handle1((lambda $l#27#heap#0: Heap, $l#27#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#27#heap#0, g#0, $Box(i#0), $Box($Unbox($l#27#y#0): int))): int)), 
              (lambda $l#27#heap#0: Heap, $l#27#y#0: Box :: $IsBox($l#27#y#0, TInt)), 
              (lambda $l#27#heap#0: Heap, $l#27#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#27#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id97"} $Unbox(Apply1(TInt, 
        TInt, 
        $Heap, 
        Lit(AtLayer((lambda $l#28#ly#0: LayerType :: 
              Handle1((lambda $l#28#heap#0: Heap, $l#28#x#0: Box :: 
                  $Box(_module.__default.Sum($l#28#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#29#ly#0: LayerType :: 
                            Handle1((lambda $l#29#heap#0: Heap, $l#29#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#29#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#28#x#0): int), 
                                      $Box($Unbox($l#29#y#0): int))): int)), 
                              (lambda $l#29#heap#0: Heap, $l#29#y#0: Box :: $IsBox($l#29#y#0, TInt)), 
                              (lambda $l#29#heap#0: Heap, $l#29#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#29#o#0: ref :: false))))), 
                          $l#28#ly#0))))), 
                (lambda $l#28#heap#0: Heap, $l#28#x#0: Box :: $IsBox($l#28#x#0, TInt)), 
                (lambda $l#28#heap#0: Heap, $l#28#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#28#o#0: ref :: false))))), 
            $LS($LZ))), 
        $Box(i#0))): int
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#30#ly#0: LayerType :: 
            Handle1((lambda $l#30#heap#0: Heap, $l#30#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#30#heap#0, g#0, $Box(i#0), $Box($Unbox($l#30#y#0): int))): int)), 
              (lambda $l#30#heap#0: Heap, $l#30#y#0: Box :: $IsBox($l#30#y#0, TInt)), 
              (lambda $l#30#heap#0: Heap, $l#30#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#30#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "BetaReduction0 (correctness)"} Impl$$_module.__default.BetaReduction0(n#0: int, g#0: HandleType, i#0: int) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: BetaReduction0, Impl$$_module.__default.BetaReduction0
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "BetaReduction1 (well-formedness)"} CheckWellFormed$$_module.__default.BetaReduction1(n'#0: int where LitInt(0) <= n'#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap), 
    i#0: int);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "BetaReduction1 (call)"} Call$$_module.__default.BetaReduction1(n'#0: int where LitInt(0) <= n'#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap), 
    i#0: int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#16#ly#0: LayerType :: 
            Handle1((lambda $l#16#heap#0: Heap, $l#16#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#16#heap#0, g#0, $Box(i#0), $Box($Unbox($l#16#y#0): int))): int)), 
              (lambda $l#16#heap#0: Heap, $l#16#y#0: Box :: $IsBox($l#16#y#0, TInt)), 
              (lambda $l#16#heap#0: Heap, $l#16#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#16#o#0: ref :: false))))), 
          $LS($LZ))))
     && (forall $l#17#x#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#19#ly#0: LayerType :: 
              Handle1((lambda $l#19#heap#0: Heap, $l#19#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#19#heap#0, 
                        g#0, 
                        $Box($l#17#x#0), 
                        $Box($Unbox($l#19#y#0): int))): int)), 
                (lambda $l#19#heap#0: Heap, $l#19#y#0: Box :: $IsBox($l#19#y#0, TInt)), 
                (lambda $l#19#heap#0: Heap, $l#19#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#19#o#0: ref :: false))))), 
            $LS($LZ)))));
  ensures {:id "id102"} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(n'#0))): int
       + _module.__default.Sum($LS($LS($LZ)), 
        n'#0, 
        Lit(AtLayer((lambda $l#20#ly#0: LayerType :: 
              Handle1((lambda $l#20#heap#0: Heap, $l#20#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#20#heap#0, g#0, $Box(i#0), $Box($Unbox($l#20#y#0): int))): int)), 
                (lambda $l#20#heap#0: Heap, $l#20#y#0: Box :: $IsBox($l#20#y#0, TInt)), 
                (lambda $l#20#heap#0: Heap, $l#20#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#20#o#0: ref :: false))))), 
            $LS($LZ))))
     == $Unbox(Apply1(TInt, 
        TInt, 
        $Heap, 
        Lit(AtLayer((lambda $l#21#ly#0: LayerType :: 
              Handle1((lambda $l#21#heap#0: Heap, $l#21#x#0: Box :: 
                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#21#heap#0, g#0, $Box($Unbox($l#21#x#0): int), $Box(n'#0))): int
                       + _module.__default.Sum($l#21#ly#0, 
                        n'#0, 
                        Lit(AtLayer((lambda $l#22#ly#0: LayerType :: 
                              Handle1((lambda $l#22#heap#0: Heap, $l#22#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#22#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#21#x#0): int), 
                                        $Box($Unbox($l#22#y#0): int))): int)), 
                                (lambda $l#22#heap#0: Heap, $l#22#y#0: Box :: $IsBox($l#22#y#0, TInt)), 
                                (lambda $l#22#heap#0: Heap, $l#22#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#22#o#0: ref :: false))))), 
                            $l#21#ly#0))))), 
                (lambda $l#21#heap#0: Heap, $l#21#x#0: Box :: $IsBox($l#21#x#0, TInt)), 
                (lambda $l#21#heap#0: Heap, $l#21#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#21#o#0: ref :: false))))), 
            $LS($LZ))), 
        $Box(i#0))): int;
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "BetaReduction1 (correctness)"} Impl$$_module.__default.BetaReduction1(n'#0: int where LitInt(0) <= n'#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap), 
    i#0: int)
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#24#ly#0: LayerType :: 
            Handle1((lambda $l#24#heap#0: Heap, $l#24#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#24#heap#0, g#0, $Box(i#0), $Box($Unbox($l#24#y#0): int))): int)), 
              (lambda $l#24#heap#0: Heap, $l#24#y#0: Box :: $IsBox($l#24#y#0, TInt)), 
              (lambda $l#24#heap#0: Heap, $l#24#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#24#o#0: ref :: false))))), 
          $LS($LZ))))
     && (forall $l#25#x#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#27#ly#0: LayerType :: 
              Handle1((lambda $l#27#heap#0: Heap, $l#27#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#27#heap#0, 
                        g#0, 
                        $Box($l#25#x#0), 
                        $Box($Unbox($l#27#y#0): int))): int)), 
                (lambda $l#27#heap#0: Heap, $l#27#y#0: Box :: $IsBox($l#27#y#0, TInt)), 
                (lambda $l#27#heap#0: Heap, $l#27#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#27#o#0: ref :: false))))), 
            $LS($LZ)))));
  ensures {:id "id103"} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box(n'#0))): int
       + _module.__default.Sum($LS($LS($LZ)), 
        n'#0, 
        Lit(AtLayer((lambda $l#28#ly#0: LayerType :: 
              Handle1((lambda $l#28#heap#0: Heap, $l#28#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#28#heap#0, g#0, $Box(i#0), $Box($Unbox($l#28#y#0): int))): int)), 
                (lambda $l#28#heap#0: Heap, $l#28#y#0: Box :: $IsBox($l#28#y#0, TInt)), 
                (lambda $l#28#heap#0: Heap, $l#28#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#28#o#0: ref :: false))))), 
            $LS($LZ))))
     == $Unbox(Apply1(TInt, 
        TInt, 
        $Heap, 
        Lit(AtLayer((lambda $l#29#ly#0: LayerType :: 
              Handle1((lambda $l#29#heap#0: Heap, $l#29#x#0: Box :: 
                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#29#heap#0, g#0, $Box($Unbox($l#29#x#0): int), $Box(n'#0))): int
                       + _module.__default.Sum($l#29#ly#0, 
                        n'#0, 
                        Lit(AtLayer((lambda $l#30#ly#0: LayerType :: 
                              Handle1((lambda $l#30#heap#0: Heap, $l#30#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#30#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#29#x#0): int), 
                                        $Box($Unbox($l#30#y#0): int))): int)), 
                                (lambda $l#30#heap#0: Heap, $l#30#y#0: Box :: $IsBox($l#30#y#0, TInt)), 
                                (lambda $l#30#heap#0: Heap, $l#30#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#30#o#0: ref :: false))))), 
                            $l#29#ly#0))))), 
                (lambda $l#29#heap#0: Heap, $l#29#x#0: Box :: $IsBox($l#29#x#0, TInt)), 
                (lambda $l#29#heap#0: Heap, $l#29#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#29#o#0: ref :: false))))), 
            $LS($LZ))), 
        $Box(i#0))): int;
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "BetaReduction1 (correctness)"} Impl$$_module.__default.BetaReduction1(n'#0: int, g#0: HandleType, i#0: int) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: BetaReduction1, Impl$$_module.__default.BetaReduction1
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#n'0#0: int :: 
      { $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box($ih#n'0#0))): int } 
      LitInt(0) <= $ih#n'0#0
           && Lit(true)
           && ((0 <= $ih#n'0#0 && $ih#n'0#0 < n'#0)
             || ($ih#n'0#0 == n'#0 && 0 <= i#0 && i#0 < i#0))
         ==> $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0), $Box($ih#n'0#0))): int
             + _module.__default.Sum($LS($LZ), 
              $ih#n'0#0, 
              Lit(AtLayer((lambda $l#31#ly#0: LayerType :: 
                    Handle1((lambda $l#31#heap#0: Heap, $l#31#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, TInt, TInt, $l#31#heap#0, g#0, $Box(i#0), $Box($Unbox($l#31#y#0): int))): int)), 
                      (lambda $l#31#heap#0: Heap, $l#31#y#0: Box :: $IsBox($l#31#y#0, TInt)), 
                      (lambda $l#31#heap#0: Heap, $l#31#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#31#o#0: ref :: false))))), 
                  $LS($LZ))))
           == $Unbox(Apply1(TInt, 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#32#ly#0: LayerType :: 
                    Handle1((lambda $l#32#heap#0: Heap, $l#32#x#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#32#heap#0, 
                                g#0, 
                                $Box($Unbox($l#32#x#0): int), 
                                $Box($ih#n'0#0))): int
                             + _module.__default.Sum($l#32#ly#0, 
                              $ih#n'0#0, 
                              Lit(AtLayer((lambda $l#33#ly#0: LayerType :: 
                                    Handle1((lambda $l#33#heap#0: Heap, $l#33#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#33#heap#0, 
                                              g#0, 
                                              $Box($Unbox($l#32#x#0): int), 
                                              $Box($Unbox($l#33#y#0): int))): int)), 
                                      (lambda $l#33#heap#0: Heap, $l#33#y#0: Box :: $IsBox($l#33#y#0, TInt)), 
                                      (lambda $l#33#heap#0: Heap, $l#33#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#33#o#0: ref :: false))))), 
                                  $l#32#ly#0))))), 
                      (lambda $l#32#heap#0: Heap, $l#32#x#0: Box :: $IsBox($l#32#x#0, TInt)), 
                      (lambda $l#32#heap#0: Heap, $l#32#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#32#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(i#0))): int);
    $_reverifyPost := false;
}



procedure {:verboseName "BetaReductionInside (well-formedness)"} CheckWellFormed$$_module.__default.BetaReductionInside(n'#0: int where LitInt(0) <= n'#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "BetaReductionInside (call)"} Call$$_module.__default.BetaReductionInside(n'#0: int where LitInt(0) <= n'#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#51#x#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#53#ly#0: LayerType :: 
              Handle1((lambda $l#53#heap#0: Heap, $l#53#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#53#heap#0, 
                        g#0, 
                        $Box($l#51#x#0), 
                        $Box($Unbox($l#53#y#0): int))): int)), 
                (lambda $l#53#heap#0: Heap, $l#53#y#0: Box :: $IsBox($l#53#y#0, TInt)), 
                (lambda $l#53#heap#0: Heap, $l#53#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#53#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#54#ly#0: LayerType :: 
            Handle1((lambda $l#54#heap#0: Heap, $l#54#x#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#54#heap#0, g#0, $Box($Unbox($l#54#x#0): int), $Box(n'#0))): int
                     + _module.__default.Sum($l#54#ly#0, 
                      n'#0, 
                      Lit(AtLayer((lambda $l#55#ly#0: LayerType :: 
                            Handle1((lambda $l#55#heap#0: Heap, $l#55#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#55#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#54#x#0): int), 
                                      $Box($Unbox($l#55#y#0): int))): int)), 
                              (lambda $l#55#heap#0: Heap, $l#55#y#0: Box :: $IsBox($l#55#y#0, TInt)), 
                              (lambda $l#55#heap#0: Heap, $l#55#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#55#o#0: ref :: false))))), 
                          $l#54#ly#0))))), 
              (lambda $l#54#heap#0: Heap, $l#54#x#0: Box :: $IsBox($l#54#x#0, TInt)), 
              (lambda $l#54#heap#0: Heap, $l#54#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#54#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    (forall $l#58#w#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#60#ly#0: LayerType :: 
              Handle1((lambda $l#60#heap#0: Heap, $l#60#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#60#heap#0, 
                        g#0, 
                        $Box($l#58#w#0), 
                        $Box($Unbox($l#60#y#0): int))): int)), 
                (lambda $l#60#heap#0: Heap, $l#60#y#0: Box :: $IsBox($l#60#y#0, TInt)), 
                (lambda $l#60#heap#0: Heap, $l#60#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#60#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#61#ly#0: LayerType :: 
            Handle1((lambda $l#61#heap#0: Heap, $l#61#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, 
                        TInt, 
                        $l#61#heap#0, 
                        Lit(AtLayer((lambda $l#62#ly#0: LayerType :: 
                              Handle1((lambda $l#62#heap#0: Heap, $l#62#w#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#62#heap#0, g#0, $Box($Unbox($l#62#w#0): int), $Box(n'#0))): int)), 
                                (lambda $l#62#heap#0: Heap, $l#62#w#0: Box :: $IsBox($l#62#w#0, TInt)), 
                                (lambda $l#62#heap#0: Heap, $l#62#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#62#o#0: ref :: false))))), 
                            $l#61#ly#0)), 
                        $Box($Unbox($l#61#x#0): int))): int
                     + $Unbox(Apply1(TInt, 
                        TInt, 
                        $l#61#heap#0, 
                        Lit(AtLayer((lambda $l#63#ly#0: LayerType :: 
                              Handle1((lambda $l#63#heap#0: Heap, $l#63#w#0: Box :: 
                                  $Box(_module.__default.Sum($l#63#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#64#ly#0: LayerType :: 
                                            Handle1((lambda $l#64#heap#0: Heap, $l#64#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#64#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#63#w#0): int), 
                                                      $Box($Unbox($l#64#y#0): int))): int)), 
                                              (lambda $l#64#heap#0: Heap, $l#64#y#0: Box :: $IsBox($l#64#y#0, TInt)), 
                                              (lambda $l#64#heap#0: Heap, $l#64#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#64#o#0: ref :: false))))), 
                                          $l#63#ly#0))))), 
                                (lambda $l#63#heap#0: Heap, $l#63#w#0: Box :: $IsBox($l#63#w#0, TInt)), 
                                (lambda $l#63#heap#0: Heap, $l#63#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#63#o#0: ref :: false))))), 
                            $l#61#ly#0)), 
                        $Box($Unbox($l#61#x#0): int))): int)), 
              (lambda $l#61#heap#0: Heap, $l#61#x#0: Box :: $IsBox($l#61#x#0, TInt)), 
              (lambda $l#61#heap#0: Heap, $l#61#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#61#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id111"} _module.__default.Sum($LS($LS($LZ)), 
      n'#0, 
      Lit(AtLayer((lambda $l#65#ly#0: LayerType :: 
            Handle1((lambda $l#65#heap#0: Heap, $l#65#x#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#65#heap#0, g#0, $Box($Unbox($l#65#x#0): int), $Box(n'#0))): int
                     + _module.__default.Sum($l#65#ly#0, 
                      n'#0, 
                      Lit(AtLayer((lambda $l#66#ly#0: LayerType :: 
                            Handle1((lambda $l#66#heap#0: Heap, $l#66#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#66#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#65#x#0): int), 
                                      $Box($Unbox($l#66#y#0): int))): int)), 
                              (lambda $l#66#heap#0: Heap, $l#66#y#0: Box :: $IsBox($l#66#y#0, TInt)), 
                              (lambda $l#66#heap#0: Heap, $l#66#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#66#o#0: ref :: false))))), 
                          $l#65#ly#0))))), 
              (lambda $l#65#heap#0: Heap, $l#65#x#0: Box :: $IsBox($l#65#x#0, TInt)), 
              (lambda $l#65#heap#0: Heap, $l#65#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#65#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
      n'#0, 
      Lit(AtLayer((lambda $l#67#ly#0: LayerType :: 
            Handle1((lambda $l#67#heap#0: Heap, $l#67#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, 
                        TInt, 
                        $l#67#heap#0, 
                        Lit(AtLayer((lambda $l#68#ly#0: LayerType :: 
                              Handle1((lambda $l#68#heap#0: Heap, $l#68#w#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#68#heap#0, g#0, $Box($Unbox($l#68#w#0): int), $Box(n'#0))): int)), 
                                (lambda $l#68#heap#0: Heap, $l#68#w#0: Box :: $IsBox($l#68#w#0, TInt)), 
                                (lambda $l#68#heap#0: Heap, $l#68#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#68#o#0: ref :: false))))), 
                            $l#67#ly#0)), 
                        $Box($Unbox($l#67#x#0): int))): int
                     + $Unbox(Apply1(TInt, 
                        TInt, 
                        $l#67#heap#0, 
                        Lit(AtLayer((lambda $l#69#ly#0: LayerType :: 
                              Handle1((lambda $l#69#heap#0: Heap, $l#69#w#0: Box :: 
                                  $Box(_module.__default.Sum($l#69#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#70#ly#0: LayerType :: 
                                            Handle1((lambda $l#70#heap#0: Heap, $l#70#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#70#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#69#w#0): int), 
                                                      $Box($Unbox($l#70#y#0): int))): int)), 
                                              (lambda $l#70#heap#0: Heap, $l#70#y#0: Box :: $IsBox($l#70#y#0, TInt)), 
                                              (lambda $l#70#heap#0: Heap, $l#70#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#70#o#0: ref :: false))))), 
                                          $l#69#ly#0))))), 
                                (lambda $l#69#heap#0: Heap, $l#69#w#0: Box :: $IsBox($l#69#w#0, TInt)), 
                                (lambda $l#69#heap#0: Heap, $l#69#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#69#o#0: ref :: false))))), 
                            $l#67#ly#0)), 
                        $Box($Unbox($l#67#x#0): int))): int)), 
              (lambda $l#67#heap#0: Heap, $l#67#x#0: Box :: $IsBox($l#67#x#0, TInt)), 
              (lambda $l#67#heap#0: Heap, $l#67#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#67#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "BetaReductionInside (correctness)"} Impl$$_module.__default.BetaReductionInside(n'#0: int where LitInt(0) <= n'#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#71#x#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#73#ly#0: LayerType :: 
              Handle1((lambda $l#73#heap#0: Heap, $l#73#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#73#heap#0, 
                        g#0, 
                        $Box($l#71#x#0), 
                        $Box($Unbox($l#73#y#0): int))): int)), 
                (lambda $l#73#heap#0: Heap, $l#73#y#0: Box :: $IsBox($l#73#y#0, TInt)), 
                (lambda $l#73#heap#0: Heap, $l#73#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#73#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#74#ly#0: LayerType :: 
            Handle1((lambda $l#74#heap#0: Heap, $l#74#x#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#74#heap#0, g#0, $Box($Unbox($l#74#x#0): int), $Box(n'#0))): int
                     + _module.__default.Sum($l#74#ly#0, 
                      n'#0, 
                      Lit(AtLayer((lambda $l#75#ly#0: LayerType :: 
                            Handle1((lambda $l#75#heap#0: Heap, $l#75#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#75#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#74#x#0): int), 
                                      $Box($Unbox($l#75#y#0): int))): int)), 
                              (lambda $l#75#heap#0: Heap, $l#75#y#0: Box :: $IsBox($l#75#y#0, TInt)), 
                              (lambda $l#75#heap#0: Heap, $l#75#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#75#o#0: ref :: false))))), 
                          $l#74#ly#0))))), 
              (lambda $l#74#heap#0: Heap, $l#74#x#0: Box :: $IsBox($l#74#x#0, TInt)), 
              (lambda $l#74#heap#0: Heap, $l#74#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#74#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    (forall $l#78#w#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#80#ly#0: LayerType :: 
              Handle1((lambda $l#80#heap#0: Heap, $l#80#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#80#heap#0, 
                        g#0, 
                        $Box($l#78#w#0), 
                        $Box($Unbox($l#80#y#0): int))): int)), 
                (lambda $l#80#heap#0: Heap, $l#80#y#0: Box :: $IsBox($l#80#y#0, TInt)), 
                (lambda $l#80#heap#0: Heap, $l#80#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#80#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#81#ly#0: LayerType :: 
            Handle1((lambda $l#81#heap#0: Heap, $l#81#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, 
                        TInt, 
                        $l#81#heap#0, 
                        Lit(AtLayer((lambda $l#82#ly#0: LayerType :: 
                              Handle1((lambda $l#82#heap#0: Heap, $l#82#w#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#82#heap#0, g#0, $Box($Unbox($l#82#w#0): int), $Box(n'#0))): int)), 
                                (lambda $l#82#heap#0: Heap, $l#82#w#0: Box :: $IsBox($l#82#w#0, TInt)), 
                                (lambda $l#82#heap#0: Heap, $l#82#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#82#o#0: ref :: false))))), 
                            $l#81#ly#0)), 
                        $Box($Unbox($l#81#x#0): int))): int
                     + $Unbox(Apply1(TInt, 
                        TInt, 
                        $l#81#heap#0, 
                        Lit(AtLayer((lambda $l#83#ly#0: LayerType :: 
                              Handle1((lambda $l#83#heap#0: Heap, $l#83#w#0: Box :: 
                                  $Box(_module.__default.Sum($l#83#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#84#ly#0: LayerType :: 
                                            Handle1((lambda $l#84#heap#0: Heap, $l#84#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#84#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#83#w#0): int), 
                                                      $Box($Unbox($l#84#y#0): int))): int)), 
                                              (lambda $l#84#heap#0: Heap, $l#84#y#0: Box :: $IsBox($l#84#y#0, TInt)), 
                                              (lambda $l#84#heap#0: Heap, $l#84#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#84#o#0: ref :: false))))), 
                                          $l#83#ly#0))))), 
                                (lambda $l#83#heap#0: Heap, $l#83#w#0: Box :: $IsBox($l#83#w#0, TInt)), 
                                (lambda $l#83#heap#0: Heap, $l#83#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#83#o#0: ref :: false))))), 
                            $l#81#ly#0)), 
                        $Box($Unbox($l#81#x#0): int))): int)), 
              (lambda $l#81#heap#0: Heap, $l#81#x#0: Box :: $IsBox($l#81#x#0, TInt)), 
              (lambda $l#81#heap#0: Heap, $l#81#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#81#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id112"} _module.__default.Sum($LS($LS($LZ)), 
      n'#0, 
      Lit(AtLayer((lambda $l#85#ly#0: LayerType :: 
            Handle1((lambda $l#85#heap#0: Heap, $l#85#x#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#85#heap#0, g#0, $Box($Unbox($l#85#x#0): int), $Box(n'#0))): int
                     + _module.__default.Sum($l#85#ly#0, 
                      n'#0, 
                      Lit(AtLayer((lambda $l#86#ly#0: LayerType :: 
                            Handle1((lambda $l#86#heap#0: Heap, $l#86#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#86#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#85#x#0): int), 
                                      $Box($Unbox($l#86#y#0): int))): int)), 
                              (lambda $l#86#heap#0: Heap, $l#86#y#0: Box :: $IsBox($l#86#y#0, TInt)), 
                              (lambda $l#86#heap#0: Heap, $l#86#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#86#o#0: ref :: false))))), 
                          $l#85#ly#0))))), 
              (lambda $l#85#heap#0: Heap, $l#85#x#0: Box :: $IsBox($l#85#x#0, TInt)), 
              (lambda $l#85#heap#0: Heap, $l#85#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#85#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
      n'#0, 
      Lit(AtLayer((lambda $l#87#ly#0: LayerType :: 
            Handle1((lambda $l#87#heap#0: Heap, $l#87#x#0: Box :: 
                $Box($Unbox(Apply1(TInt, 
                        TInt, 
                        $l#87#heap#0, 
                        Lit(AtLayer((lambda $l#88#ly#0: LayerType :: 
                              Handle1((lambda $l#88#heap#0: Heap, $l#88#w#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#88#heap#0, g#0, $Box($Unbox($l#88#w#0): int), $Box(n'#0))): int)), 
                                (lambda $l#88#heap#0: Heap, $l#88#w#0: Box :: $IsBox($l#88#w#0, TInt)), 
                                (lambda $l#88#heap#0: Heap, $l#88#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#88#o#0: ref :: false))))), 
                            $l#87#ly#0)), 
                        $Box($Unbox($l#87#x#0): int))): int
                     + $Unbox(Apply1(TInt, 
                        TInt, 
                        $l#87#heap#0, 
                        Lit(AtLayer((lambda $l#89#ly#0: LayerType :: 
                              Handle1((lambda $l#89#heap#0: Heap, $l#89#w#0: Box :: 
                                  $Box(_module.__default.Sum($l#89#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#90#ly#0: LayerType :: 
                                            Handle1((lambda $l#90#heap#0: Heap, $l#90#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#90#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#89#w#0): int), 
                                                      $Box($Unbox($l#90#y#0): int))): int)), 
                                              (lambda $l#90#heap#0: Heap, $l#90#y#0: Box :: $IsBox($l#90#y#0, TInt)), 
                                              (lambda $l#90#heap#0: Heap, $l#90#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#90#o#0: ref :: false))))), 
                                          $l#89#ly#0))))), 
                                (lambda $l#89#heap#0: Heap, $l#89#w#0: Box :: $IsBox($l#89#w#0, TInt)), 
                                (lambda $l#89#heap#0: Heap, $l#89#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#89#o#0: ref :: false))))), 
                            $l#87#ly#0)), 
                        $Box($Unbox($l#87#x#0): int))): int)), 
              (lambda $l#87#heap#0: Heap, $l#87#x#0: Box :: $IsBox($l#87#x#0, TInt)), 
              (lambda $l#87#heap#0: Heap, $l#87#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#87#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "BetaReductionInside (correctness)"} Impl$$_module.__default.BetaReductionInside(n'#0: int, g#0: HandleType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var i#0_0: int;
  var $lambdaHeap#0_0: Heap;
  var x#0_0: int;
  var $_Frame#l0_0: [ref,Field]bool;
  var lambdaResult#0_0: int;
  var ##n#0_0: int;
  var ##f#0_0: HandleType;
  var $lambdaHeap#0_1: Heap;
  var y#0_0: int;
  var $_Frame#l0_1: [ref,Field]bool;
  var lambdaResult#0_1: int;
  var $lambdaHeap#0_2: Heap;
  var x#0_1: int;
  var $_Frame#l0_2: [ref,Field]bool;
  var lambdaResult#0_2: int;
  var $lambdaHeap#0_3: Heap;
  var w#0_0: int;
  var $_Frame#l0_3: [ref,Field]bool;
  var lambdaResult#0_3: int;
  var $lambdaHeap#0_4: Heap;
  var w#0_1: int;
  var $_Frame#l0_4: [ref,Field]bool;
  var lambdaResult#0_4: int;
  var ##n#0_1: int;
  var ##f#0_1: HandleType;
  var $lambdaHeap#0_5: Heap;
  var y#0_1: int;
  var $_Frame#l0_5: [ref,Field]bool;
  var lambdaResult#0_5: int;
  var $lambdaHeap#0_0_0_0: Heap;
  var x#0_0_0_0: int;
  var $_Frame#l0_0_0_0: [ref,Field]bool;
  var lambdaResult#0_0_0_0: int;
  var ##n#0_0_0_0: int;
  var ##f#0_0_0_0: HandleType;
  var $lambdaHeap#0_0_0_1: Heap;
  var y#0_0_0_0: int;
  var $_Frame#l0_0_0_1: [ref,Field]bool;
  var lambdaResult#0_0_0_1: int;
  var $lambdaHeap#0_0_0_2: Heap;
  var x#0_0_0_1: int;
  var $_Frame#l0_0_0_2: [ref,Field]bool;
  var lambdaResult#0_0_0_2: int;
  var $lambdaHeap#0_0_0_3: Heap;
  var w#0_0_0_0: int;
  var $_Frame#l0_0_0_3: [ref,Field]bool;
  var lambdaResult#0_0_0_3: int;
  var $lambdaHeap#0_0_0_4: Heap;
  var w#0_0_0_1: int;
  var $_Frame#l0_0_0_4: [ref,Field]bool;
  var lambdaResult#0_0_0_4: int;
  var ##n#0_0_0_1: int;
  var ##f#0_0_0_1: HandleType;
  var $lambdaHeap#0_0_0_5: Heap;
  var y#0_0_0_1: int;
  var $_Frame#l0_0_0_5: [ref,Field]bool;
  var lambdaResult#0_0_0_5: int;
  var $lambdaHeap#0_0_0: Heap;
  var x#0_0_0: int;
  var $_Frame#l0_0_0: [ref,Field]bool;
  var lambdaResult#0_0_0: int;
  var ##n#0_0_0: int;
  var ##f#0_0_0: HandleType;
  var $lambdaHeap#0_0_1: Heap;
  var y#0_0_0: int;
  var $_Frame#l0_0_1: [ref,Field]bool;
  var lambdaResult#0_0_1: int;
  var n##0: int;
  var f##0: HandleType;
  var $lambdaHeap#6: Heap;
  var x#2: int;
  var $_Frame#l6: [ref,Field]bool;
  var lambdaResult#6: int;
  var ##n#4: int;
  var ##f#4: HandleType;
  var $lambdaHeap#7: Heap;
  var y#2: int;
  var $_Frame#l7: [ref,Field]bool;
  var lambdaResult#7: int;
  var g##0: HandleType;
  var $lambdaHeap#8: Heap;
  var x#3: int;
  var $_Frame#l8: [ref,Field]bool;
  var lambdaResult#8: int;
  var $lambdaHeap#9: Heap;
  var w#2: int;
  var $_Frame#l9: [ref,Field]bool;
  var lambdaResult#9: int;
  var $lambdaHeap#10: Heap;
  var w#3: int;
  var $_Frame#l10: [ref,Field]bool;
  var lambdaResult#10: int;
  var ##n#5: int;
  var ##f#5: HandleType;
  var $lambdaHeap#11: Heap;
  var y#3: int;
  var $_Frame#l11: [ref,Field]bool;
  var lambdaResult#11: int;

    // AddMethodImpl: BetaReductionInside, Impl$$_module.__default.BetaReductionInside
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(77,3)
    if (*)
    {
        // Assume Fuel Constant
        havoc i#0_0;
        assume true;
        if (LitInt(0) <= i#0_0)
        {
        }

        assume true;
        assume {:id "id113"} LitInt(0) <= i#0_0 && i#0_0 < n'#0;
        if (*)
        {
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0;
                assume $IsGoodHeap($lambdaHeap#0_0);
                assume $Heap == $lambdaHeap#0_0 || $HeapSucc($Heap, $lambdaHeap#0_0);
                havoc x#0_0;
                if (true)
                {
                    $_Frame#l0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0, $o, alloc)): bool ==> false);
                    ##n#0_0 := n'#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#0_0, Tclass._System.nat(), $lambdaHeap#0_0);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_1;
                        assume $IsGoodHeap($lambdaHeap#0_1);
                        assume $lambdaHeap#0_0 == $lambdaHeap#0_1
                           || $HeapSucc($lambdaHeap#0_0, $lambdaHeap#0_1);
                        havoc y#0_0;
                        if (true)
                        {
                            $_Frame#l0_1 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_1, $o, alloc)): bool ==> false);
                            assume {:id "id114"} lambdaResult#0_1
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0, g#0, $Box(x#0_0), $Box(y#0_0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_1, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#0_0 := Lit(AtLayer((lambda $l#0_1#ly#0: LayerType :: 
                          Handle1((lambda $l#0_1#heap#0: Heap, $l#0_1#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, TInt, TInt, $l#0_1#heap#0, g#0, $Box(x#0_0), $Box($Unbox($l#0_1#y#0): int))): int)), 
                            (lambda $l#0_1#heap#0: Heap, $l#0_1#y#0: Box :: $IsBox($l#0_1#y#0, TInt)), 
                            (lambda $l#0_1#heap#0: Heap, $l#0_1#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_1#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_0);
                    assume _module.__default.Sum#canCall(n'#0, 
                      Lit(AtLayer((lambda $l#0_2#ly#0: LayerType :: 
                            Handle1((lambda $l#0_2#heap#0: Heap, $l#0_2#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#0_2#heap#0, g#0, $Box(x#0_0), $Box($Unbox($l#0_2#y#0): int))): int)), 
                              (lambda $l#0_2#heap#0: Heap, $l#0_2#y#0: Box :: $IsBox($l#0_2#y#0, TInt)), 
                              (lambda $l#0_2#heap#0: Heap, $l#0_2#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_2#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id115"} lambdaResult#0_0
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#0_0), $Box(n'#0))): int
                         + _module.__default.Sum($LS($LZ), 
                          n'#0, 
                          Lit(AtLayer((lambda $l#0_4#ly#0: LayerType :: 
                                Handle1((lambda $l#0_4#heap#0: Heap, $l#0_4#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, TInt, TInt, $l#0_4#heap#0, g#0, $Box(x#0_0), $Box($Unbox($l#0_4#y#0): int))): int)), 
                                  (lambda $l#0_4#heap#0: Heap, $l#0_4#y#0: Box :: $IsBox($l#0_4#y#0, TInt)), 
                                  (lambda $l#0_4#heap#0: Heap, $l#0_4#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_4#o#0: ref :: false))))), 
                              $LS($LZ))));
                    assume _module.__default.Sum#canCall(n'#0, 
                      Lit(AtLayer((lambda $l#0_6#ly#0: LayerType :: 
                            Handle1((lambda $l#0_6#heap#0: Heap, $l#0_6#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#0_6#heap#0, g#0, $Box(x#0_0), $Box($Unbox($l#0_6#y#0): int))): int)), 
                              (lambda $l#0_6#heap#0: Heap, $l#0_6#y#0: Box :: $IsBox($l#0_6#y#0, TInt)), 
                              (lambda $l#0_6#heap#0: Heap, $l#0_6#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_6#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_2;
                assume $IsGoodHeap($lambdaHeap#0_2);
                assume $Heap == $lambdaHeap#0_2 || $HeapSucc($Heap, $lambdaHeap#0_2);
                havoc x#0_1;
                if (true)
                {
                    $_Frame#l0_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_2, $o, alloc)): bool ==> false);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_3;
                        assume $IsGoodHeap($lambdaHeap#0_3);
                        assume $lambdaHeap#0_2 == $lambdaHeap#0_3
                           || $HeapSucc($lambdaHeap#0_2, $lambdaHeap#0_3);
                        havoc w#0_0;
                        if (true)
                        {
                            $_Frame#l0_3 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_3, $o, alloc)): bool ==> false);
                            assume {:id "id116"} lambdaResult#0_3
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_2, g#0, $Box(w#0_0), $Box(n'#0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_3, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_4;
                        assume $IsGoodHeap($lambdaHeap#0_4);
                        assume $lambdaHeap#0_2 == $lambdaHeap#0_4
                           || $HeapSucc($lambdaHeap#0_2, $lambdaHeap#0_4);
                        havoc w#0_1;
                        if (true)
                        {
                            $_Frame#l0_4 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_4, $o, alloc)): bool ==> false);
                            ##n#0_1 := n'#0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##n#0_1, Tclass._System.nat(), $lambdaHeap#0_4);
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_5;
                                assume $IsGoodHeap($lambdaHeap#0_5);
                                assume $lambdaHeap#0_4 == $lambdaHeap#0_5
                                   || $HeapSucc($lambdaHeap#0_4, $lambdaHeap#0_5);
                                havoc y#0_1;
                                if (true)
                                {
                                    $_Frame#l0_5 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_5, $o, alloc)): bool ==> false);
                                    assume {:id "id117"} lambdaResult#0_5
                                       == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_4, g#0, $Box(w#0_1), $Box(y#0_1))): int;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(lambdaResult#0_5, TInt);
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            ##f#0_1 := Lit(AtLayer((lambda $l#0_11#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_11#heap#0: Heap, $l#0_11#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_11#heap#0, 
                                            g#0, 
                                            $Box(w#0_1), 
                                            $Box($Unbox($l#0_11#y#0): int))): int)), 
                                    (lambda $l#0_11#heap#0: Heap, $l#0_11#y#0: Box :: $IsBox($l#0_11#y#0, TInt)), 
                                    (lambda $l#0_11#heap#0: Heap, $l#0_11#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_11#o#0: ref :: false))))), 
                                $LS($LZ)));
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##f#0_1, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_4);
                            assume _module.__default.Sum#canCall(n'#0, 
                              Lit(AtLayer((lambda $l#0_12#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_12#heap#0: Heap, $l#0_12#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_12#heap#0, 
                                              g#0, 
                                              $Box(w#0_1), 
                                              $Box($Unbox($l#0_12#y#0): int))): int)), 
                                      (lambda $l#0_12#heap#0: Heap, $l#0_12#y#0: Box :: $IsBox($l#0_12#y#0, TInt)), 
                                      (lambda $l#0_12#heap#0: Heap, $l#0_12#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_12#o#0: ref :: false))))), 
                                  $LS($LZ))));
                            assume {:id "id118"} lambdaResult#0_4
                               == _module.__default.Sum($LS($LZ), 
                                n'#0, 
                                Lit(AtLayer((lambda $l#0_14#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_14#heap#0: Heap, $l#0_14#y#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#0_14#heap#0, 
                                                g#0, 
                                                $Box(w#0_1), 
                                                $Box($Unbox($l#0_14#y#0): int))): int)), 
                                        (lambda $l#0_14#heap#0: Heap, $l#0_14#y#0: Box :: $IsBox($l#0_14#y#0, TInt)), 
                                        (lambda $l#0_14#heap#0: Heap, $l#0_14#y#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_14#o#0: ref :: false))))), 
                                    $LS($LZ))));
                            assume _module.__default.Sum#canCall(n'#0, 
                              Lit(AtLayer((lambda $l#0_16#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_16#heap#0: Heap, $l#0_16#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_16#heap#0, 
                                              g#0, 
                                              $Box(w#0_1), 
                                              $Box($Unbox($l#0_16#y#0): int))): int)), 
                                      (lambda $l#0_16#heap#0: Heap, $l#0_16#y#0: Box :: $IsBox($l#0_16#y#0, TInt)), 
                                      (lambda $l#0_16#heap#0: Heap, $l#0_16#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_16#o#0: ref :: false))))), 
                                  $LS($LZ))));
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_4, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    assume {:id "id119"} lambdaResult#0_2
                       == $Unbox(Apply1(TInt, 
                            TInt, 
                            $Heap, 
                            Lit(AtLayer((lambda $l#0_22#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_22#heap#0: Heap, $l#0_22#w#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_22#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_22#w#0): int), 
                                            $Box(n'#0))): int)), 
                                    (lambda $l#0_22#heap#0: Heap, $l#0_22#w#0: Box :: $IsBox($l#0_22#w#0, TInt)), 
                                    (lambda $l#0_22#heap#0: Heap, $l#0_22#w#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_22#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            $Box(x#0_1))): int
                         + $Unbox(Apply1(TInt, 
                            TInt, 
                            $Heap, 
                            Lit(AtLayer((lambda $l#0_23#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_23#heap#0: Heap, $l#0_23#w#0: Box :: 
                                      $Box(_module.__default.Sum($l#0_23#ly#0, 
                                          n'#0, 
                                          Lit(AtLayer((lambda $l#0_24#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_24#heap#0: Heap, $l#0_24#y#0: Box :: 
                                                    $Box($Unbox(Apply2(TInt, 
                                                          TInt, 
                                                          TInt, 
                                                          $l#0_24#heap#0, 
                                                          g#0, 
                                                          $Box($Unbox($l#0_23#w#0): int), 
                                                          $Box($Unbox($l#0_24#y#0): int))): int)), 
                                                  (lambda $l#0_24#heap#0: Heap, $l#0_24#y#0: Box :: $IsBox($l#0_24#y#0, TInt)), 
                                                  (lambda $l#0_24#heap#0: Heap, $l#0_24#y#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_24#o#0: ref :: false))))), 
                                              $l#0_23#ly#0))))), 
                                    (lambda $l#0_23#heap#0: Heap, $l#0_23#w#0: Box :: $IsBox($l#0_23#w#0, TInt)), 
                                    (lambda $l#0_23#heap#0: Heap, $l#0_23#w#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_23#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            $Box(x#0_1))): int;
                    assume (forall $l#0_26#w#0: int :: 
                      _module.__default.Sum#canCall(n'#0, 
                        Lit(AtLayer((lambda $l#0_28#ly#0: LayerType :: 
                              Handle1((lambda $l#0_28#heap#0: Heap, $l#0_28#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_28#heap#0, 
                                        g#0, 
                                        $Box($l#0_26#w#0), 
                                        $Box($Unbox($l#0_28#y#0): int))): int)), 
                                (lambda $l#0_28#heap#0: Heap, $l#0_28#y#0: Box :: $IsBox($l#0_28#y#0, TInt)), 
                                (lambda $l#0_28#heap#0: Heap, $l#0_28#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_28#o#0: ref :: false))))), 
                            $LS($LZ)))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_2, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_33#x#0: int :: 
                _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_35#ly#0: LayerType :: 
                        Handle1((lambda $l#0_35#heap#0: Heap, $l#0_35#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_35#heap#0, 
                                  g#0, 
                                  $Box($l#0_33#x#0), 
                                  $Box($Unbox($l#0_35#y#0): int))): int)), 
                          (lambda $l#0_35#heap#0: Heap, $l#0_35#y#0: Box :: $IsBox($l#0_35#y#0, TInt)), 
                          (lambda $l#0_35#heap#0: Heap, $l#0_35#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_35#o#0: ref :: false))))), 
                      $LS($LZ)))))
               && (forall $l#0_38#w#0: int :: 
                _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_40#ly#0: LayerType :: 
                        Handle1((lambda $l#0_40#heap#0: Heap, $l#0_40#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_40#heap#0, 
                                  g#0, 
                                  $Box($l#0_38#w#0), 
                                  $Box($Unbox($l#0_40#y#0): int))): int)), 
                          (lambda $l#0_40#heap#0: Heap, $l#0_40#y#0: Box :: $IsBox($l#0_40#y#0, TInt)), 
                          (lambda $l#0_40#heap#0: Heap, $l#0_40#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_40#o#0: ref :: false))))), 
                      $LS($LZ)))));
            assume {:id "id120"} $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_41#ly#0: LayerType :: 
                        Handle1((lambda $l#0_41#heap#0: Heap, $l#0_41#x#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_41#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#0_41#x#0): int), 
                                    $Box(n'#0))): int
                                 + _module.__default.Sum($l#0_41#ly#0, 
                                  n'#0, 
                                  Lit(AtLayer((lambda $l#0_42#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_42#heap#0: Heap, $l#0_42#y#0: Box :: 
                                            $Box($Unbox(Apply2(TInt, 
                                                  TInt, 
                                                  TInt, 
                                                  $l#0_42#heap#0, 
                                                  g#0, 
                                                  $Box($Unbox($l#0_41#x#0): int), 
                                                  $Box($Unbox($l#0_42#y#0): int))): int)), 
                                          (lambda $l#0_42#heap#0: Heap, $l#0_42#y#0: Box :: $IsBox($l#0_42#y#0, TInt)), 
                                          (lambda $l#0_42#heap#0: Heap, $l#0_42#y#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_42#o#0: ref :: false))))), 
                                      $l#0_41#ly#0))))), 
                          (lambda $l#0_41#heap#0: Heap, $l#0_41#x#0: Box :: $IsBox($l#0_41#x#0, TInt)), 
                          (lambda $l#0_41#heap#0: Heap, $l#0_41#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_41#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_0))): int
               == $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_43#ly#0: LayerType :: 
                        Handle1((lambda $l#0_43#heap#0: Heap, $l#0_43#x#0: Box :: 
                            $Box($Unbox(Apply1(TInt, 
                                    TInt, 
                                    $l#0_43#heap#0, 
                                    Lit(AtLayer((lambda $l#0_44#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_44#heap#0: Heap, $l#0_44#w#0: Box :: 
                                              $Box($Unbox(Apply2(TInt, 
                                                    TInt, 
                                                    TInt, 
                                                    $l#0_44#heap#0, 
                                                    g#0, 
                                                    $Box($Unbox($l#0_44#w#0): int), 
                                                    $Box(n'#0))): int)), 
                                            (lambda $l#0_44#heap#0: Heap, $l#0_44#w#0: Box :: $IsBox($l#0_44#w#0, TInt)), 
                                            (lambda $l#0_44#heap#0: Heap, $l#0_44#w#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_44#o#0: ref :: false))))), 
                                        $l#0_43#ly#0)), 
                                    $Box($Unbox($l#0_43#x#0): int))): int
                                 + $Unbox(Apply1(TInt, 
                                    TInt, 
                                    $l#0_43#heap#0, 
                                    Lit(AtLayer((lambda $l#0_45#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_45#heap#0: Heap, $l#0_45#w#0: Box :: 
                                              $Box(_module.__default.Sum($l#0_45#ly#0, 
                                                  n'#0, 
                                                  Lit(AtLayer((lambda $l#0_46#ly#0: LayerType :: 
                                                        Handle1((lambda $l#0_46#heap#0: Heap, $l#0_46#y#0: Box :: 
                                                            $Box($Unbox(Apply2(TInt, 
                                                                  TInt, 
                                                                  TInt, 
                                                                  $l#0_46#heap#0, 
                                                                  g#0, 
                                                                  $Box($Unbox($l#0_45#w#0): int), 
                                                                  $Box($Unbox($l#0_46#y#0): int))): int)), 
                                                          (lambda $l#0_46#heap#0: Heap, $l#0_46#y#0: Box :: $IsBox($l#0_46#y#0, TInt)), 
                                                          (lambda $l#0_46#heap#0: Heap, $l#0_46#y#0: Box :: 
                                                            SetRef_to_SetBox((lambda $l#0_46#o#0: ref :: false))))), 
                                                      $l#0_45#ly#0))))), 
                                            (lambda $l#0_45#heap#0: Heap, $l#0_45#w#0: Box :: $IsBox($l#0_45#w#0, TInt)), 
                                            (lambda $l#0_45#heap#0: Heap, $l#0_45#w#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_45#o#0: ref :: false))))), 
                                        $l#0_43#ly#0)), 
                                    $Box($Unbox($l#0_43#x#0): int))): int)), 
                          (lambda $l#0_43#heap#0: Heap, $l#0_43#x#0: Box :: $IsBox($l#0_43#x#0, TInt)), 
                          (lambda $l#0_43#heap#0: Heap, $l#0_43#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_43#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_0))): int;
            assume false;
        }

        push;
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(79,5)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(79,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0;
                assume $IsGoodHeap($lambdaHeap#0_0_0);
                assume $Heap == $lambdaHeap#0_0_0 || $HeapSucc($Heap, $lambdaHeap#0_0_0);
                havoc x#0_0_0;
                if (true)
                {
                    $_Frame#l0_0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0, $o, alloc)): bool ==> false);
                    ##n#0_0_0 := n'#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#0_0_0, Tclass._System.nat(), $lambdaHeap#0_0_0);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_0_1;
                        assume $IsGoodHeap($lambdaHeap#0_0_1);
                        assume $lambdaHeap#0_0_0 == $lambdaHeap#0_0_1
                           || $HeapSucc($lambdaHeap#0_0_0, $lambdaHeap#0_0_1);
                        havoc y#0_0_0;
                        if (true)
                        {
                            $_Frame#l0_0_1 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_0_1, $o, alloc)): bool ==> false);
                            assume {:id "id128"} lambdaResult#0_0_1
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0_0, g#0, $Box(x#0_0_0), $Box(y#0_0_0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_1, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#0_0_0 := Lit(AtLayer((lambda $l#0_0_1#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_0_1#heap#0, 
                                    g#0, 
                                    $Box(x#0_0_0), 
                                    $Box($Unbox($l#0_0_1#y#0): int))): int)), 
                            (lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#y#0: Box :: $IsBox($l#0_0_1#y#0, TInt)), 
                            (lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_1#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#0_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_0_0);
                    assume _module.__default.Sum#canCall(n'#0, 
                      Lit(AtLayer((lambda $l#0_0_2#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_2#heap#0, 
                                      g#0, 
                                      $Box(x#0_0_0), 
                                      $Box($Unbox($l#0_0_2#y#0): int))): int)), 
                              (lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#y#0: Box :: $IsBox($l#0_0_2#y#0, TInt)), 
                              (lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_2#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id129"} lambdaResult#0_0_0
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#0_0_0), $Box(n'#0))): int
                         + _module.__default.Sum($LS($LZ), 
                          n'#0, 
                          Lit(AtLayer((lambda $l#0_0_4#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_4#heap#0: Heap, $l#0_0_4#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_0_4#heap#0, 
                                          g#0, 
                                          $Box(x#0_0_0), 
                                          $Box($Unbox($l#0_0_4#y#0): int))): int)), 
                                  (lambda $l#0_0_4#heap#0: Heap, $l#0_0_4#y#0: Box :: $IsBox($l#0_0_4#y#0, TInt)), 
                                  (lambda $l#0_0_4#heap#0: Heap, $l#0_0_4#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_4#o#0: ref :: false))))), 
                              $LS($LZ))));
                    assume _module.__default.Sum#canCall(n'#0, 
                      Lit(AtLayer((lambda $l#0_0_6#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_6#heap#0: Heap, $l#0_0_6#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_6#heap#0, 
                                      g#0, 
                                      $Box(x#0_0_0), 
                                      $Box($Unbox($l#0_0_6#y#0): int))): int)), 
                              (lambda $l#0_0_6#heap#0: Heap, $l#0_0_6#y#0: Box :: $IsBox($l#0_0_6#y#0, TInt)), 
                              (lambda $l#0_0_6#heap#0: Heap, $l#0_0_6#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_6#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_9#x#0: int :: 
              _module.__default.Sum#canCall(n'#0, 
                Lit(AtLayer((lambda $l#0_0_11#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_11#heap#0: Heap, $l#0_0_11#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_0_11#heap#0, 
                                g#0, 
                                $Box($l#0_0_9#x#0), 
                                $Box($Unbox($l#0_0_11#y#0): int))): int)), 
                        (lambda $l#0_0_11#heap#0: Heap, $l#0_0_11#y#0: Box :: 
                          $IsBox($l#0_0_11#y#0, TInt)), 
                        (lambda $l#0_0_11#heap#0: Heap, $l#0_0_11#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_11#o#0: ref :: false))))), 
                    $LS($LZ)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(79,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0_0;
                assume $IsGoodHeap($lambdaHeap#0_0_0_0);
                assume $Heap == $lambdaHeap#0_0_0_0 || $HeapSucc($Heap, $lambdaHeap#0_0_0_0);
                havoc x#0_0_0_0;
                if (true)
                {
                    $_Frame#l0_0_0_0 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0_0, $o, alloc)): bool ==> false);
                    ##n#0_0_0_0 := n'#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#0_0_0_0, Tclass._System.nat(), $lambdaHeap#0_0_0_0);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_0_0_1;
                        assume $IsGoodHeap($lambdaHeap#0_0_0_1);
                        assume $lambdaHeap#0_0_0_0 == $lambdaHeap#0_0_0_1
                           || $HeapSucc($lambdaHeap#0_0_0_0, $lambdaHeap#0_0_0_1);
                        havoc y#0_0_0_0;
                        if (true)
                        {
                            $_Frame#l0_0_0_1 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_0_0_1, $o, alloc)): bool ==> false);
                            assume {:id "id121"} lambdaResult#0_0_0_1
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0_0_0, g#0, $Box(x#0_0_0_0), $Box(y#0_0_0_0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_0_1, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#0_0_0_0 := Lit(AtLayer((lambda $l#0_0_0_1#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_0_1#heap#0: Heap, $l#0_0_0_1#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_0_0_1#heap#0, 
                                    g#0, 
                                    $Box(x#0_0_0_0), 
                                    $Box($Unbox($l#0_0_0_1#y#0): int))): int)), 
                            (lambda $l#0_0_0_1#heap#0: Heap, $l#0_0_0_1#y#0: Box :: 
                              $IsBox($l#0_0_0_1#y#0, TInt)), 
                            (lambda $l#0_0_0_1#heap#0: Heap, $l#0_0_0_1#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_0_1#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#0_0_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_0_0_0);
                    assume _module.__default.Sum#canCall(n'#0, 
                      Lit(AtLayer((lambda $l#0_0_0_2#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_0_2#heap#0: Heap, $l#0_0_0_2#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_0_2#heap#0, 
                                      g#0, 
                                      $Box(x#0_0_0_0), 
                                      $Box($Unbox($l#0_0_0_2#y#0): int))): int)), 
                              (lambda $l#0_0_0_2#heap#0: Heap, $l#0_0_0_2#y#0: Box :: 
                                $IsBox($l#0_0_0_2#y#0, TInt)), 
                              (lambda $l#0_0_0_2#heap#0: Heap, $l#0_0_0_2#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_0_2#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id122"} lambdaResult#0_0_0_0
                       == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#0_0_0_0), $Box(n'#0))): int
                         + _module.__default.Sum($LS($LZ), 
                          n'#0, 
                          Lit(AtLayer((lambda $l#0_0_0_4#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_0_4#heap#0: Heap, $l#0_0_0_4#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_0_0_4#heap#0, 
                                          g#0, 
                                          $Box(x#0_0_0_0), 
                                          $Box($Unbox($l#0_0_0_4#y#0): int))): int)), 
                                  (lambda $l#0_0_0_4#heap#0: Heap, $l#0_0_0_4#y#0: Box :: 
                                    $IsBox($l#0_0_0_4#y#0, TInt)), 
                                  (lambda $l#0_0_0_4#heap#0: Heap, $l#0_0_0_4#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_0_4#o#0: ref :: false))))), 
                              $LS($LZ))));
                    assume _module.__default.Sum#canCall(n'#0, 
                      Lit(AtLayer((lambda $l#0_0_0_6#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_0_6#heap#0: Heap, $l#0_0_0_6#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_0_6#heap#0, 
                                      g#0, 
                                      $Box(x#0_0_0_0), 
                                      $Box($Unbox($l#0_0_0_6#y#0): int))): int)), 
                              (lambda $l#0_0_0_6#heap#0: Heap, $l#0_0_0_6#y#0: Box :: 
                                $IsBox($l#0_0_0_6#y#0, TInt)), 
                              (lambda $l#0_0_0_6#heap#0: Heap, $l#0_0_0_6#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_0_6#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_0_0, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_0_9#x#0: int :: 
              _module.__default.Sum#canCall(n'#0, 
                Lit(AtLayer((lambda $l#0_0_0_11#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_0_11#heap#0: Heap, $l#0_0_0_11#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_0_0_11#heap#0, 
                                g#0, 
                                $Box($l#0_0_0_9#x#0), 
                                $Box($Unbox($l#0_0_0_11#y#0): int))): int)), 
                        (lambda $l#0_0_0_11#heap#0: Heap, $l#0_0_0_11#y#0: Box :: 
                          $IsBox($l#0_0_0_11#y#0, TInt)), 
                        (lambda $l#0_0_0_11#heap#0: Heap, $l#0_0_0_11#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_0_11#o#0: ref :: false))))), 
                    $LS($LZ)))));
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(79,5)
            push;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(79,5)
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#0_0_0_2;
                assume $IsGoodHeap($lambdaHeap#0_0_0_2);
                assume $Heap == $lambdaHeap#0_0_0_2 || $HeapSucc($Heap, $lambdaHeap#0_0_0_2);
                havoc x#0_0_0_1;
                if (true)
                {
                    $_Frame#l0_0_0_2 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#0_0_0_2, $o, alloc)): bool ==> false);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_0_0_3;
                        assume $IsGoodHeap($lambdaHeap#0_0_0_3);
                        assume $lambdaHeap#0_0_0_2 == $lambdaHeap#0_0_0_3
                           || $HeapSucc($lambdaHeap#0_0_0_2, $lambdaHeap#0_0_0_3);
                        havoc w#0_0_0_0;
                        if (true)
                        {
                            $_Frame#l0_0_0_3 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_0_0_3, $o, alloc)): bool ==> false);
                            assume {:id "id123"} lambdaResult#0_0_0_3
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0_0_2, g#0, $Box(w#0_0_0_0), $Box(n'#0))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_0_3, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#0_0_0_4;
                        assume $IsGoodHeap($lambdaHeap#0_0_0_4);
                        assume $lambdaHeap#0_0_0_2 == $lambdaHeap#0_0_0_4
                           || $HeapSucc($lambdaHeap#0_0_0_2, $lambdaHeap#0_0_0_4);
                        havoc w#0_0_0_1;
                        if (true)
                        {
                            $_Frame#l0_0_0_4 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#0_0_0_4, $o, alloc)): bool ==> false);
                            ##n#0_0_0_1 := n'#0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##n#0_0_0_1, Tclass._System.nat(), $lambdaHeap#0_0_0_4);
                            // Begin Comprehension WF check
                            if (*)
                            {
                                havoc $lambdaHeap#0_0_0_5;
                                assume $IsGoodHeap($lambdaHeap#0_0_0_5);
                                assume $lambdaHeap#0_0_0_4 == $lambdaHeap#0_0_0_5
                                   || $HeapSucc($lambdaHeap#0_0_0_4, $lambdaHeap#0_0_0_5);
                                havoc y#0_0_0_1;
                                if (true)
                                {
                                    $_Frame#l0_0_0_5 := (lambda $o: ref, $f: Field :: 
                                      $o != null && $Unbox(read($lambdaHeap#0_0_0_5, $o, alloc)): bool ==> false);
                                    assume {:id "id124"} lambdaResult#0_0_0_5
                                       == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0_0_4, g#0, $Box(w#0_0_0_1), $Box(y#0_0_0_1))): int;
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(lambdaResult#0_0_0_5, TInt);
                                }

                                assume false;
                            }

                            // End Comprehension WF check
                            ##f#0_0_0_1 := Lit(AtLayer((lambda $l#0_0_0_14#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_0_14#heap#0: Heap, $l#0_0_0_14#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_0_0_14#heap#0, 
                                            g#0, 
                                            $Box(w#0_0_0_1), 
                                            $Box($Unbox($l#0_0_0_14#y#0): int))): int)), 
                                    (lambda $l#0_0_0_14#heap#0: Heap, $l#0_0_0_14#y#0: Box :: 
                                      $IsBox($l#0_0_0_14#y#0, TInt)), 
                                    (lambda $l#0_0_0_14#heap#0: Heap, $l#0_0_0_14#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_0_14#o#0: ref :: false))))), 
                                $LS($LZ)));
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##f#0_0_0_1, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_0_0_4);
                            assume _module.__default.Sum#canCall(n'#0, 
                              Lit(AtLayer((lambda $l#0_0_0_15#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_0_0_15#heap#0: Heap, $l#0_0_0_15#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_0_0_15#heap#0, 
                                              g#0, 
                                              $Box(w#0_0_0_1), 
                                              $Box($Unbox($l#0_0_0_15#y#0): int))): int)), 
                                      (lambda $l#0_0_0_15#heap#0: Heap, $l#0_0_0_15#y#0: Box :: 
                                        $IsBox($l#0_0_0_15#y#0, TInt)), 
                                      (lambda $l#0_0_0_15#heap#0: Heap, $l#0_0_0_15#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_0_0_15#o#0: ref :: false))))), 
                                  $LS($LZ))));
                            assume {:id "id125"} lambdaResult#0_0_0_4
                               == _module.__default.Sum($LS($LZ), 
                                n'#0, 
                                Lit(AtLayer((lambda $l#0_0_0_17#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_0_0_17#heap#0: Heap, $l#0_0_0_17#y#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#0_0_0_17#heap#0, 
                                                g#0, 
                                                $Box(w#0_0_0_1), 
                                                $Box($Unbox($l#0_0_0_17#y#0): int))): int)), 
                                        (lambda $l#0_0_0_17#heap#0: Heap, $l#0_0_0_17#y#0: Box :: 
                                          $IsBox($l#0_0_0_17#y#0, TInt)), 
                                        (lambda $l#0_0_0_17#heap#0: Heap, $l#0_0_0_17#y#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_0_0_17#o#0: ref :: false))))), 
                                    $LS($LZ))));
                            assume _module.__default.Sum#canCall(n'#0, 
                              Lit(AtLayer((lambda $l#0_0_0_19#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_0_0_19#heap#0: Heap, $l#0_0_0_19#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_0_0_19#heap#0, 
                                              g#0, 
                                              $Box(w#0_0_0_1), 
                                              $Box($Unbox($l#0_0_0_19#y#0): int))): int)), 
                                      (lambda $l#0_0_0_19#heap#0: Heap, $l#0_0_0_19#y#0: Box :: 
                                        $IsBox($l#0_0_0_19#y#0, TInt)), 
                                      (lambda $l#0_0_0_19#heap#0: Heap, $l#0_0_0_19#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_0_0_19#o#0: ref :: false))))), 
                                  $LS($LZ))));
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#0_0_0_4, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    assume {:id "id126"} lambdaResult#0_0_0_2
                       == $Unbox(Apply1(TInt, 
                            TInt, 
                            $Heap, 
                            Lit(AtLayer((lambda $l#0_0_0_25#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_0_25#heap#0: Heap, $l#0_0_0_25#w#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_0_0_25#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_0_0_25#w#0): int), 
                                            $Box(n'#0))): int)), 
                                    (lambda $l#0_0_0_25#heap#0: Heap, $l#0_0_0_25#w#0: Box :: 
                                      $IsBox($l#0_0_0_25#w#0, TInt)), 
                                    (lambda $l#0_0_0_25#heap#0: Heap, $l#0_0_0_25#w#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_0_25#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            $Box(x#0_0_0_1))): int
                         + $Unbox(Apply1(TInt, 
                            TInt, 
                            $Heap, 
                            Lit(AtLayer((lambda $l#0_0_0_26#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_0_26#heap#0: Heap, $l#0_0_0_26#w#0: Box :: 
                                      $Box(_module.__default.Sum($l#0_0_0_26#ly#0, 
                                          n'#0, 
                                          Lit(AtLayer((lambda $l#0_0_0_27#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_0_0_27#heap#0: Heap, $l#0_0_0_27#y#0: Box :: 
                                                    $Box($Unbox(Apply2(TInt, 
                                                          TInt, 
                                                          TInt, 
                                                          $l#0_0_0_27#heap#0, 
                                                          g#0, 
                                                          $Box($Unbox($l#0_0_0_26#w#0): int), 
                                                          $Box($Unbox($l#0_0_0_27#y#0): int))): int)), 
                                                  (lambda $l#0_0_0_27#heap#0: Heap, $l#0_0_0_27#y#0: Box :: 
                                                    $IsBox($l#0_0_0_27#y#0, TInt)), 
                                                  (lambda $l#0_0_0_27#heap#0: Heap, $l#0_0_0_27#y#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_0_0_27#o#0: ref :: false))))), 
                                              $l#0_0_0_26#ly#0))))), 
                                    (lambda $l#0_0_0_26#heap#0: Heap, $l#0_0_0_26#w#0: Box :: 
                                      $IsBox($l#0_0_0_26#w#0, TInt)), 
                                    (lambda $l#0_0_0_26#heap#0: Heap, $l#0_0_0_26#w#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_0_26#o#0: ref :: false))))), 
                                $LS($LZ))), 
                            $Box(x#0_0_0_1))): int;
                    assume (forall $l#0_0_0_29#w#0: int :: 
                      _module.__default.Sum#canCall(n'#0, 
                        Lit(AtLayer((lambda $l#0_0_0_31#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_0_31#heap#0: Heap, $l#0_0_0_31#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_0_0_31#heap#0, 
                                        g#0, 
                                        $Box($l#0_0_0_29#w#0), 
                                        $Box($Unbox($l#0_0_0_31#y#0): int))): int)), 
                                (lambda $l#0_0_0_31#heap#0: Heap, $l#0_0_0_31#y#0: Box :: 
                                  $IsBox($l#0_0_0_31#y#0, TInt)), 
                                (lambda $l#0_0_0_31#heap#0: Heap, $l#0_0_0_31#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_0_31#o#0: ref :: false))))), 
                            $LS($LZ)))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#0_0_0_2, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume (forall $l#0_0_0_38#w#0: int :: 
              _module.__default.Sum#canCall(n'#0, 
                Lit(AtLayer((lambda $l#0_0_0_40#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_0_40#heap#0: Heap, $l#0_0_0_40#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_0_0_40#heap#0, 
                                g#0, 
                                $Box($l#0_0_0_38#w#0), 
                                $Box($Unbox($l#0_0_0_40#y#0): int))): int)), 
                        (lambda $l#0_0_0_40#heap#0: Heap, $l#0_0_0_40#y#0: Box :: 
                          $IsBox($l#0_0_0_40#y#0, TInt)), 
                        (lambda $l#0_0_0_40#heap#0: Heap, $l#0_0_0_40#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_0_40#o#0: ref :: false))))), 
                    $LS($LZ)))));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(79,5)
            assert {:id "id127"} {:subsumption 0} $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_0_0_47#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0_0_47#heap#0: Heap, $l#0_0_0_47#x#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_0_0_47#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#0_0_0_47#x#0): int), 
                                    $Box(n'#0))): int
                                 + _module.__default.Sum($l#0_0_0_47#ly#0, 
                                  n'#0, 
                                  Lit(AtLayer((lambda $l#0_0_0_48#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_0_0_48#heap#0: Heap, $l#0_0_0_48#y#0: Box :: 
                                            $Box($Unbox(Apply2(TInt, 
                                                  TInt, 
                                                  TInt, 
                                                  $l#0_0_0_48#heap#0, 
                                                  g#0, 
                                                  $Box($Unbox($l#0_0_0_47#x#0): int), 
                                                  $Box($Unbox($l#0_0_0_48#y#0): int))): int)), 
                                          (lambda $l#0_0_0_48#heap#0: Heap, $l#0_0_0_48#y#0: Box :: 
                                            $IsBox($l#0_0_0_48#y#0, TInt)), 
                                          (lambda $l#0_0_0_48#heap#0: Heap, $l#0_0_0_48#y#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_0_0_48#o#0: ref :: false))))), 
                                      $l#0_0_0_47#ly#0))))), 
                          (lambda $l#0_0_0_47#heap#0: Heap, $l#0_0_0_47#x#0: Box :: 
                            $IsBox($l#0_0_0_47#x#0, TInt)), 
                          (lambda $l#0_0_0_47#heap#0: Heap, $l#0_0_0_47#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0_0_47#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_0))): int
               == $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_0_0_49#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0_0_49#heap#0: Heap, $l#0_0_0_49#x#0: Box :: 
                            $Box($Unbox(Apply1(TInt, 
                                    TInt, 
                                    $l#0_0_0_49#heap#0, 
                                    Lit(AtLayer((lambda $l#0_0_0_50#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_0_0_50#heap#0: Heap, $l#0_0_0_50#w#0: Box :: 
                                              $Box($Unbox(Apply2(TInt, 
                                                    TInt, 
                                                    TInt, 
                                                    $l#0_0_0_50#heap#0, 
                                                    g#0, 
                                                    $Box($Unbox($l#0_0_0_50#w#0): int), 
                                                    $Box(n'#0))): int)), 
                                            (lambda $l#0_0_0_50#heap#0: Heap, $l#0_0_0_50#w#0: Box :: 
                                              $IsBox($l#0_0_0_50#w#0, TInt)), 
                                            (lambda $l#0_0_0_50#heap#0: Heap, $l#0_0_0_50#w#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_0_0_50#o#0: ref :: false))))), 
                                        $l#0_0_0_49#ly#0)), 
                                    $Box($Unbox($l#0_0_0_49#x#0): int))): int
                                 + $Unbox(Apply1(TInt, 
                                    TInt, 
                                    $l#0_0_0_49#heap#0, 
                                    Lit(AtLayer((lambda $l#0_0_0_51#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_0_0_51#heap#0: Heap, $l#0_0_0_51#w#0: Box :: 
                                              $Box(_module.__default.Sum($l#0_0_0_51#ly#0, 
                                                  n'#0, 
                                                  Lit(AtLayer((lambda $l#0_0_0_52#ly#0: LayerType :: 
                                                        Handle1((lambda $l#0_0_0_52#heap#0: Heap, $l#0_0_0_52#y#0: Box :: 
                                                            $Box($Unbox(Apply2(TInt, 
                                                                  TInt, 
                                                                  TInt, 
                                                                  $l#0_0_0_52#heap#0, 
                                                                  g#0, 
                                                                  $Box($Unbox($l#0_0_0_51#w#0): int), 
                                                                  $Box($Unbox($l#0_0_0_52#y#0): int))): int)), 
                                                          (lambda $l#0_0_0_52#heap#0: Heap, $l#0_0_0_52#y#0: Box :: 
                                                            $IsBox($l#0_0_0_52#y#0, TInt)), 
                                                          (lambda $l#0_0_0_52#heap#0: Heap, $l#0_0_0_52#y#0: Box :: 
                                                            SetRef_to_SetBox((lambda $l#0_0_0_52#o#0: ref :: false))))), 
                                                      $l#0_0_0_51#ly#0))))), 
                                            (lambda $l#0_0_0_51#heap#0: Heap, $l#0_0_0_51#w#0: Box :: 
                                              $IsBox($l#0_0_0_51#w#0, TInt)), 
                                            (lambda $l#0_0_0_51#heap#0: Heap, $l#0_0_0_51#w#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_0_0_51#o#0: ref :: false))))), 
                                        $l#0_0_0_49#ly#0)), 
                                    $Box($Unbox($l#0_0_0_49#x#0): int))): int)), 
                          (lambda $l#0_0_0_49#heap#0: Heap, $l#0_0_0_49#x#0: Box :: 
                            $IsBox($l#0_0_0_49#x#0, TInt)), 
                          (lambda $l#0_0_0_49#heap#0: Heap, $l#0_0_0_49#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0_0_49#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_0))): int;
            assume false;
        }

        assume {:id "id130"} $Unbox(Apply1(TInt, 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0_0_12#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_12#heap#0: Heap, $l#0_0_12#x#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_0_12#heap#0, 
                                g#0, 
                                $Box($Unbox($l#0_0_12#x#0): int), 
                                $Box(n'#0))): int
                             + _module.__default.Sum($l#0_0_12#ly#0, 
                              n'#0, 
                              Lit(AtLayer((lambda $l#0_0_13#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_0_13#heap#0: Heap, $l#0_0_13#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_0_13#heap#0, 
                                              g#0, 
                                              $Box($Unbox($l#0_0_12#x#0): int), 
                                              $Box($Unbox($l#0_0_13#y#0): int))): int)), 
                                      (lambda $l#0_0_13#heap#0: Heap, $l#0_0_13#y#0: Box :: 
                                        $IsBox($l#0_0_13#y#0, TInt)), 
                                      (lambda $l#0_0_13#heap#0: Heap, $l#0_0_13#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_0_13#o#0: ref :: false))))), 
                                  $l#0_0_12#ly#0))))), 
                      (lambda $l#0_0_12#heap#0: Heap, $l#0_0_12#x#0: Box :: 
                        $IsBox($l#0_0_12#x#0, TInt)), 
                      (lambda $l#0_0_12#heap#0: Heap, $l#0_0_12#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_12#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(i#0_0))): int
           == $Unbox(Apply1(TInt, 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0_0_14#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_14#heap#0: Heap, $l#0_0_14#x#0: Box :: 
                        $Box($Unbox(Apply1(TInt, 
                                TInt, 
                                $l#0_0_14#heap#0, 
                                Lit(AtLayer((lambda $l#0_0_15#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_0_15#heap#0: Heap, $l#0_0_15#w#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#0_0_15#heap#0, 
                                                g#0, 
                                                $Box($Unbox($l#0_0_15#w#0): int), 
                                                $Box(n'#0))): int)), 
                                        (lambda $l#0_0_15#heap#0: Heap, $l#0_0_15#w#0: Box :: 
                                          $IsBox($l#0_0_15#w#0, TInt)), 
                                        (lambda $l#0_0_15#heap#0: Heap, $l#0_0_15#w#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_0_15#o#0: ref :: false))))), 
                                    $l#0_0_14#ly#0)), 
                                $Box($Unbox($l#0_0_14#x#0): int))): int
                             + $Unbox(Apply1(TInt, 
                                TInt, 
                                $l#0_0_14#heap#0, 
                                Lit(AtLayer((lambda $l#0_0_16#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_0_16#heap#0: Heap, $l#0_0_16#w#0: Box :: 
                                          $Box(_module.__default.Sum($l#0_0_16#ly#0, 
                                              n'#0, 
                                              Lit(AtLayer((lambda $l#0_0_17#ly#0: LayerType :: 
                                                    Handle1((lambda $l#0_0_17#heap#0: Heap, $l#0_0_17#y#0: Box :: 
                                                        $Box($Unbox(Apply2(TInt, 
                                                              TInt, 
                                                              TInt, 
                                                              $l#0_0_17#heap#0, 
                                                              g#0, 
                                                              $Box($Unbox($l#0_0_16#w#0): int), 
                                                              $Box($Unbox($l#0_0_17#y#0): int))): int)), 
                                                      (lambda $l#0_0_17#heap#0: Heap, $l#0_0_17#y#0: Box :: 
                                                        $IsBox($l#0_0_17#y#0, TInt)), 
                                                      (lambda $l#0_0_17#heap#0: Heap, $l#0_0_17#y#0: Box :: 
                                                        SetRef_to_SetBox((lambda $l#0_0_17#o#0: ref :: false))))), 
                                                  $l#0_0_16#ly#0))))), 
                                        (lambda $l#0_0_16#heap#0: Heap, $l#0_0_16#w#0: Box :: 
                                          $IsBox($l#0_0_16#w#0, TInt)), 
                                        (lambda $l#0_0_16#heap#0: Heap, $l#0_0_16#w#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_0_16#o#0: ref :: false))))), 
                                    $l#0_0_14#ly#0)), 
                                $Box($Unbox($l#0_0_14#x#0): int))): int)), 
                      (lambda $l#0_0_14#heap#0: Heap, $l#0_0_14#x#0: Box :: 
                        $IsBox($l#0_0_14#x#0, TInt)), 
                      (lambda $l#0_0_14#heap#0: Heap, $l#0_0_14#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_14#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(i#0_0))): int;
        pop;
        assert {:id "id131"} $Unbox(Apply1(TInt, 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0_47#ly#0: LayerType :: 
                    Handle1((lambda $l#0_47#heap#0: Heap, $l#0_47#x#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_47#heap#0, 
                                g#0, 
                                $Box($Unbox($l#0_47#x#0): int), 
                                $Box(n'#0))): int
                             + _module.__default.Sum($l#0_47#ly#0, 
                              n'#0, 
                              Lit(AtLayer((lambda $l#0_48#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_48#heap#0: Heap, $l#0_48#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_48#heap#0, 
                                              g#0, 
                                              $Box($Unbox($l#0_47#x#0): int), 
                                              $Box($Unbox($l#0_48#y#0): int))): int)), 
                                      (lambda $l#0_48#heap#0: Heap, $l#0_48#y#0: Box :: $IsBox($l#0_48#y#0, TInt)), 
                                      (lambda $l#0_48#heap#0: Heap, $l#0_48#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_48#o#0: ref :: false))))), 
                                  $l#0_47#ly#0))))), 
                      (lambda $l#0_47#heap#0: Heap, $l#0_47#x#0: Box :: $IsBox($l#0_47#x#0, TInt)), 
                      (lambda $l#0_47#heap#0: Heap, $l#0_47#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_47#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(i#0_0))): int
           == $Unbox(Apply1(TInt, 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0_49#ly#0: LayerType :: 
                    Handle1((lambda $l#0_49#heap#0: Heap, $l#0_49#x#0: Box :: 
                        $Box($Unbox(Apply1(TInt, 
                                TInt, 
                                $l#0_49#heap#0, 
                                Lit(AtLayer((lambda $l#0_50#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_50#heap#0: Heap, $l#0_50#w#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#0_50#heap#0, 
                                                g#0, 
                                                $Box($Unbox($l#0_50#w#0): int), 
                                                $Box(n'#0))): int)), 
                                        (lambda $l#0_50#heap#0: Heap, $l#0_50#w#0: Box :: $IsBox($l#0_50#w#0, TInt)), 
                                        (lambda $l#0_50#heap#0: Heap, $l#0_50#w#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_50#o#0: ref :: false))))), 
                                    $l#0_49#ly#0)), 
                                $Box($Unbox($l#0_49#x#0): int))): int
                             + $Unbox(Apply1(TInt, 
                                TInt, 
                                $l#0_49#heap#0, 
                                Lit(AtLayer((lambda $l#0_51#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_51#heap#0: Heap, $l#0_51#w#0: Box :: 
                                          $Box(_module.__default.Sum($l#0_51#ly#0, 
                                              n'#0, 
                                              Lit(AtLayer((lambda $l#0_52#ly#0: LayerType :: 
                                                    Handle1((lambda $l#0_52#heap#0: Heap, $l#0_52#y#0: Box :: 
                                                        $Box($Unbox(Apply2(TInt, 
                                                              TInt, 
                                                              TInt, 
                                                              $l#0_52#heap#0, 
                                                              g#0, 
                                                              $Box($Unbox($l#0_51#w#0): int), 
                                                              $Box($Unbox($l#0_52#y#0): int))): int)), 
                                                      (lambda $l#0_52#heap#0: Heap, $l#0_52#y#0: Box :: $IsBox($l#0_52#y#0, TInt)), 
                                                      (lambda $l#0_52#heap#0: Heap, $l#0_52#y#0: Box :: 
                                                        SetRef_to_SetBox((lambda $l#0_52#o#0: ref :: false))))), 
                                                  $l#0_51#ly#0))))), 
                                        (lambda $l#0_51#heap#0: Heap, $l#0_51#w#0: Box :: $IsBox($l#0_51#w#0, TInt)), 
                                        (lambda $l#0_51#heap#0: Heap, $l#0_51#w#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_51#o#0: ref :: false))))), 
                                    $l#0_49#ly#0)), 
                                $Box($Unbox($l#0_49#x#0): int))): int)), 
                      (lambda $l#0_49#heap#0: Heap, $l#0_49#x#0: Box :: $IsBox($l#0_49#x#0, TInt)), 
                      (lambda $l#0_49#heap#0: Heap, $l#0_49#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_49#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(i#0_0))): int;
        assume false;
    }
    else
    {
        assume (forall i#0_1: int :: 
          LitInt(0) <= i#0_1 && i#0_1 < n'#0
             ==> $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_53#ly#0: LayerType :: 
                        Handle1((lambda $l#0_53#heap#0: Heap, $l#0_53#x#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_53#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#0_53#x#0): int), 
                                    $Box(n'#0))): int
                                 + _module.__default.Sum($l#0_53#ly#0, 
                                  n'#0, 
                                  Lit(AtLayer((lambda $l#0_54#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_54#heap#0: Heap, $l#0_54#y#0: Box :: 
                                            $Box($Unbox(Apply2(TInt, 
                                                  TInt, 
                                                  TInt, 
                                                  $l#0_54#heap#0, 
                                                  g#0, 
                                                  $Box($Unbox($l#0_53#x#0): int), 
                                                  $Box($Unbox($l#0_54#y#0): int))): int)), 
                                          (lambda $l#0_54#heap#0: Heap, $l#0_54#y#0: Box :: $IsBox($l#0_54#y#0, TInt)), 
                                          (lambda $l#0_54#heap#0: Heap, $l#0_54#y#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_54#o#0: ref :: false))))), 
                                      $l#0_53#ly#0))))), 
                          (lambda $l#0_53#heap#0: Heap, $l#0_53#x#0: Box :: $IsBox($l#0_53#x#0, TInt)), 
                          (lambda $l#0_53#heap#0: Heap, $l#0_53#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_53#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_1))): int
               == $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_55#ly#0: LayerType :: 
                        Handle1((lambda $l#0_55#heap#0: Heap, $l#0_55#x#0: Box :: 
                            $Box($Unbox(Apply1(TInt, 
                                    TInt, 
                                    $l#0_55#heap#0, 
                                    Lit(AtLayer((lambda $l#0_56#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_56#heap#0: Heap, $l#0_56#w#0: Box :: 
                                              $Box($Unbox(Apply2(TInt, 
                                                    TInt, 
                                                    TInt, 
                                                    $l#0_56#heap#0, 
                                                    g#0, 
                                                    $Box($Unbox($l#0_56#w#0): int), 
                                                    $Box(n'#0))): int)), 
                                            (lambda $l#0_56#heap#0: Heap, $l#0_56#w#0: Box :: $IsBox($l#0_56#w#0, TInt)), 
                                            (lambda $l#0_56#heap#0: Heap, $l#0_56#w#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_56#o#0: ref :: false))))), 
                                        $l#0_55#ly#0)), 
                                    $Box($Unbox($l#0_55#x#0): int))): int
                                 + $Unbox(Apply1(TInt, 
                                    TInt, 
                                    $l#0_55#heap#0, 
                                    Lit(AtLayer((lambda $l#0_57#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_57#heap#0: Heap, $l#0_57#w#0: Box :: 
                                              $Box(_module.__default.Sum($l#0_57#ly#0, 
                                                  n'#0, 
                                                  Lit(AtLayer((lambda $l#0_58#ly#0: LayerType :: 
                                                        Handle1((lambda $l#0_58#heap#0: Heap, $l#0_58#y#0: Box :: 
                                                            $Box($Unbox(Apply2(TInt, 
                                                                  TInt, 
                                                                  TInt, 
                                                                  $l#0_58#heap#0, 
                                                                  g#0, 
                                                                  $Box($Unbox($l#0_57#w#0): int), 
                                                                  $Box($Unbox($l#0_58#y#0): int))): int)), 
                                                          (lambda $l#0_58#heap#0: Heap, $l#0_58#y#0: Box :: $IsBox($l#0_58#y#0, TInt)), 
                                                          (lambda $l#0_58#heap#0: Heap, $l#0_58#y#0: Box :: 
                                                            SetRef_to_SetBox((lambda $l#0_58#o#0: ref :: false))))), 
                                                      $l#0_57#ly#0))))), 
                                            (lambda $l#0_57#heap#0: Heap, $l#0_57#w#0: Box :: $IsBox($l#0_57#w#0, TInt)), 
                                            (lambda $l#0_57#heap#0: Heap, $l#0_57#w#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_57#o#0: ref :: false))))), 
                                        $l#0_55#ly#0)), 
                                    $Box($Unbox($l#0_55#x#0): int))): int)), 
                          (lambda $l#0_55#heap#0: Heap, $l#0_55#x#0: Box :: $IsBox($l#0_55#x#0, TInt)), 
                          (lambda $l#0_55#heap#0: Heap, $l#0_55#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_55#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_1))): int);
    }

    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(84,11)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    n##0 := n'#0;
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#6;
        assume $IsGoodHeap($lambdaHeap#6);
        assume $Heap == $lambdaHeap#6 || $HeapSucc($Heap, $lambdaHeap#6);
        havoc x#2;
        if (true)
        {
            $_Frame#l6 := (lambda $o: ref, $f: Field :: 
              $o != null && $Unbox(read($lambdaHeap#6, $o, alloc)): bool ==> false);
            ##n#4 := n'#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#4, Tclass._System.nat(), $lambdaHeap#6);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#7;
                assume $IsGoodHeap($lambdaHeap#7);
                assume $lambdaHeap#6 == $lambdaHeap#7 || $HeapSucc($lambdaHeap#6, $lambdaHeap#7);
                havoc y#2;
                if (true)
                {
                    $_Frame#l7 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#7, $o, alloc)): bool ==> false);
                    assume {:id "id132"} lambdaResult#7
                       == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#6, g#0, $Box(x#2), $Box(y#2))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#7, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#4 := Lit(AtLayer((lambda $l#92#ly#0: LayerType :: 
                  Handle1((lambda $l#92#heap#0: Heap, $l#92#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, TInt, TInt, $l#92#heap#0, g#0, $Box(x#2), $Box($Unbox($l#92#y#0): int))): int)), 
                    (lambda $l#92#heap#0: Heap, $l#92#y#0: Box :: $IsBox($l#92#y#0, TInt)), 
                    (lambda $l#92#heap#0: Heap, $l#92#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#92#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#4, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#6);
            assume _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#93#ly#0: LayerType :: 
                    Handle1((lambda $l#93#heap#0: Heap, $l#93#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, TInt, TInt, $l#93#heap#0, g#0, $Box(x#2), $Box($Unbox($l#93#y#0): int))): int)), 
                      (lambda $l#93#heap#0: Heap, $l#93#y#0: Box :: $IsBox($l#93#y#0, TInt)), 
                      (lambda $l#93#heap#0: Heap, $l#93#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#93#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume {:id "id133"} lambdaResult#6
               == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#2), $Box(n'#0))): int
                 + _module.__default.Sum($LS($LZ), 
                  n'#0, 
                  Lit(AtLayer((lambda $l#95#ly#0: LayerType :: 
                        Handle1((lambda $l#95#heap#0: Heap, $l#95#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, TInt, TInt, $l#95#heap#0, g#0, $Box(x#2), $Box($Unbox($l#95#y#0): int))): int)), 
                          (lambda $l#95#heap#0: Heap, $l#95#y#0: Box :: $IsBox($l#95#y#0, TInt)), 
                          (lambda $l#95#heap#0: Heap, $l#95#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#95#o#0: ref :: false))))), 
                      $LS($LZ))));
            assume _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#97#ly#0: LayerType :: 
                    Handle1((lambda $l#97#heap#0: Heap, $l#97#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, TInt, TInt, $l#97#heap#0, g#0, $Box(x#2), $Box($Unbox($l#97#y#0): int))): int)), 
                      (lambda $l#97#heap#0: Heap, $l#97#y#0: Box :: $IsBox($l#97#y#0, TInt)), 
                      (lambda $l#97#heap#0: Heap, $l#97#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#97#o#0: ref :: false))))), 
                  $LS($LZ))));
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#6, TInt);
        }

        assume false;
    }

    // End Comprehension WF check
    assume (forall $l#98#x#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#100#ly#0: LayerType :: 
              Handle1((lambda $l#100#heap#0: Heap, $l#100#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#100#heap#0, 
                        g#0, 
                        $Box($l#98#x#0), 
                        $Box($Unbox($l#100#y#0): int))): int)), 
                (lambda $l#100#heap#0: Heap, $l#100#y#0: Box :: $IsBox($l#100#y#0, TInt)), 
                (lambda $l#100#heap#0: Heap, $l#100#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#100#o#0: ref :: false))))), 
            $LS($LZ)))));
    // ProcessCallStmt: CheckSubrange
    f##0 := Lit(AtLayer((lambda $l#101#ly#0: LayerType :: 
          Handle1((lambda $l#101#heap#0: Heap, $l#101#x#0: Box :: 
              $Box($Unbox(Apply2(TInt, TInt, TInt, $l#101#heap#0, g#0, $Box($Unbox($l#101#x#0): int), $Box(n'#0))): int
                   + _module.__default.Sum($l#101#ly#0, 
                    n'#0, 
                    Lit(AtLayer((lambda $l#102#ly#0: LayerType :: 
                          Handle1((lambda $l#102#heap#0: Heap, $l#102#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#102#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#101#x#0): int), 
                                    $Box($Unbox($l#102#y#0): int))): int)), 
                            (lambda $l#102#heap#0: Heap, $l#102#y#0: Box :: $IsBox($l#102#y#0, TInt)), 
                            (lambda $l#102#heap#0: Heap, $l#102#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#102#o#0: ref :: false))))), 
                        $l#101#ly#0))))), 
            (lambda $l#101#heap#0: Heap, $l#101#x#0: Box :: $IsBox($l#101#x#0, TInt)), 
            (lambda $l#101#heap#0: Heap, $l#101#x#0: Box :: 
              SetRef_to_SetBox((lambda $l#101#o#0: ref :: false))))), 
        $LS($LZ)));
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#8;
        assume $IsGoodHeap($lambdaHeap#8);
        assume $Heap == $lambdaHeap#8 || $HeapSucc($Heap, $lambdaHeap#8);
        havoc x#3;
        if (true)
        {
            $_Frame#l8 := (lambda $o: ref, $f: Field :: 
              $o != null && $Unbox(read($lambdaHeap#8, $o, alloc)): bool ==> false);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#9;
                assume $IsGoodHeap($lambdaHeap#9);
                assume $lambdaHeap#8 == $lambdaHeap#9 || $HeapSucc($lambdaHeap#8, $lambdaHeap#9);
                havoc w#2;
                if (true)
                {
                    $_Frame#l9 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#9, $o, alloc)): bool ==> false);
                    assume {:id "id134"} lambdaResult#9
                       == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#8, g#0, $Box(w#2), $Box(n'#0))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#9, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#10;
                assume $IsGoodHeap($lambdaHeap#10);
                assume $lambdaHeap#8 == $lambdaHeap#10 || $HeapSucc($lambdaHeap#8, $lambdaHeap#10);
                havoc w#3;
                if (true)
                {
                    $_Frame#l10 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#10, $o, alloc)): bool ==> false);
                    ##n#5 := n'#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#5, Tclass._System.nat(), $lambdaHeap#10);
                    // Begin Comprehension WF check
                    if (*)
                    {
                        havoc $lambdaHeap#11;
                        assume $IsGoodHeap($lambdaHeap#11);
                        assume $lambdaHeap#10 == $lambdaHeap#11 || $HeapSucc($lambdaHeap#10, $lambdaHeap#11);
                        havoc y#3;
                        if (true)
                        {
                            $_Frame#l11 := (lambda $o: ref, $f: Field :: 
                              $o != null && $Unbox(read($lambdaHeap#11, $o, alloc)): bool ==> false);
                            assume {:id "id135"} lambdaResult#11
                               == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#10, g#0, $Box(w#3), $Box(y#3))): int;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(lambdaResult#11, TInt);
                        }

                        assume false;
                    }

                    // End Comprehension WF check
                    ##f#5 := Lit(AtLayer((lambda $l#105#ly#0: LayerType :: 
                          Handle1((lambda $l#105#heap#0: Heap, $l#105#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, TInt, TInt, $l#105#heap#0, g#0, $Box(w#3), $Box($Unbox($l#105#y#0): int))): int)), 
                            (lambda $l#105#heap#0: Heap, $l#105#y#0: Box :: $IsBox($l#105#y#0, TInt)), 
                            (lambda $l#105#heap#0: Heap, $l#105#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#105#o#0: ref :: false))))), 
                        $LS($LZ)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##f#5, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#10);
                    assume _module.__default.Sum#canCall(n'#0, 
                      Lit(AtLayer((lambda $l#106#ly#0: LayerType :: 
                            Handle1((lambda $l#106#heap#0: Heap, $l#106#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#106#heap#0, g#0, $Box(w#3), $Box($Unbox($l#106#y#0): int))): int)), 
                              (lambda $l#106#heap#0: Heap, $l#106#y#0: Box :: $IsBox($l#106#y#0, TInt)), 
                              (lambda $l#106#heap#0: Heap, $l#106#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#106#o#0: ref :: false))))), 
                          $LS($LZ))));
                    assume {:id "id136"} lambdaResult#10
                       == _module.__default.Sum($LS($LZ), 
                        n'#0, 
                        Lit(AtLayer((lambda $l#108#ly#0: LayerType :: 
                              Handle1((lambda $l#108#heap#0: Heap, $l#108#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#108#heap#0, g#0, $Box(w#3), $Box($Unbox($l#108#y#0): int))): int)), 
                                (lambda $l#108#heap#0: Heap, $l#108#y#0: Box :: $IsBox($l#108#y#0, TInt)), 
                                (lambda $l#108#heap#0: Heap, $l#108#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#108#o#0: ref :: false))))), 
                            $LS($LZ))));
                    assume _module.__default.Sum#canCall(n'#0, 
                      Lit(AtLayer((lambda $l#110#ly#0: LayerType :: 
                            Handle1((lambda $l#110#heap#0: Heap, $l#110#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#110#heap#0, g#0, $Box(w#3), $Box($Unbox($l#110#y#0): int))): int)), 
                              (lambda $l#110#heap#0: Heap, $l#110#y#0: Box :: $IsBox($l#110#y#0, TInt)), 
                              (lambda $l#110#heap#0: Heap, $l#110#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#110#o#0: ref :: false))))), 
                          $LS($LZ))));
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#10, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            assume {:id "id137"} lambdaResult#8
               == $Unbox(Apply1(TInt, 
                    TInt, 
                    $Heap, 
                    Lit(AtLayer((lambda $l#116#ly#0: LayerType :: 
                          Handle1((lambda $l#116#heap#0: Heap, $l#116#w#0: Box :: 
                              $Box($Unbox(Apply2(TInt, TInt, TInt, $l#116#heap#0, g#0, $Box($Unbox($l#116#w#0): int), $Box(n'#0))): int)), 
                            (lambda $l#116#heap#0: Heap, $l#116#w#0: Box :: $IsBox($l#116#w#0, TInt)), 
                            (lambda $l#116#heap#0: Heap, $l#116#w#0: Box :: 
                              SetRef_to_SetBox((lambda $l#116#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box(x#3))): int
                 + $Unbox(Apply1(TInt, 
                    TInt, 
                    $Heap, 
                    Lit(AtLayer((lambda $l#117#ly#0: LayerType :: 
                          Handle1((lambda $l#117#heap#0: Heap, $l#117#w#0: Box :: 
                              $Box(_module.__default.Sum($l#117#ly#0, 
                                  n'#0, 
                                  Lit(AtLayer((lambda $l#118#ly#0: LayerType :: 
                                        Handle1((lambda $l#118#heap#0: Heap, $l#118#y#0: Box :: 
                                            $Box($Unbox(Apply2(TInt, 
                                                  TInt, 
                                                  TInt, 
                                                  $l#118#heap#0, 
                                                  g#0, 
                                                  $Box($Unbox($l#117#w#0): int), 
                                                  $Box($Unbox($l#118#y#0): int))): int)), 
                                          (lambda $l#118#heap#0: Heap, $l#118#y#0: Box :: $IsBox($l#118#y#0, TInt)), 
                                          (lambda $l#118#heap#0: Heap, $l#118#y#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#118#o#0: ref :: false))))), 
                                      $l#117#ly#0))))), 
                            (lambda $l#117#heap#0: Heap, $l#117#w#0: Box :: $IsBox($l#117#w#0, TInt)), 
                            (lambda $l#117#heap#0: Heap, $l#117#w#0: Box :: 
                              SetRef_to_SetBox((lambda $l#117#o#0: ref :: false))))), 
                        $LS($LZ))), 
                    $Box(x#3))): int;
            assume (forall $l#120#w#0: int :: 
              _module.__default.Sum#canCall(n'#0, 
                Lit(AtLayer((lambda $l#122#ly#0: LayerType :: 
                      Handle1((lambda $l#122#heap#0: Heap, $l#122#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#122#heap#0, 
                                g#0, 
                                $Box($l#120#w#0), 
                                $Box($Unbox($l#122#y#0): int))): int)), 
                        (lambda $l#122#heap#0: Heap, $l#122#y#0: Box :: $IsBox($l#122#y#0, TInt)), 
                        (lambda $l#122#heap#0: Heap, $l#122#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#122#o#0: ref :: false))))), 
                    $LS($LZ)))));
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#8, TInt);
        }

        assume false;
    }

    // End Comprehension WF check
    assume (forall $l#125#w#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#127#ly#0: LayerType :: 
              Handle1((lambda $l#127#heap#0: Heap, $l#127#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#127#heap#0, 
                        g#0, 
                        $Box($l#125#w#0), 
                        $Box($Unbox($l#127#y#0): int))): int)), 
                (lambda $l#127#heap#0: Heap, $l#127#y#0: Box :: $IsBox($l#127#y#0, TInt)), 
                (lambda $l#127#heap#0: Heap, $l#127#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#127#o#0: ref :: false))))), 
            $LS($LZ)))));
    // ProcessCallStmt: CheckSubrange
    g##0 := Lit(AtLayer((lambda $l#128#ly#0: LayerType :: 
          Handle1((lambda $l#128#heap#0: Heap, $l#128#x#0: Box :: 
              $Box($Unbox(Apply1(TInt, 
                      TInt, 
                      $l#128#heap#0, 
                      Lit(AtLayer((lambda $l#129#ly#0: LayerType :: 
                            Handle1((lambda $l#129#heap#0: Heap, $l#129#w#0: Box :: 
                                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#129#heap#0, g#0, $Box($Unbox($l#129#w#0): int), $Box(n'#0))): int)), 
                              (lambda $l#129#heap#0: Heap, $l#129#w#0: Box :: $IsBox($l#129#w#0, TInt)), 
                              (lambda $l#129#heap#0: Heap, $l#129#w#0: Box :: 
                                SetRef_to_SetBox((lambda $l#129#o#0: ref :: false))))), 
                          $l#128#ly#0)), 
                      $Box($Unbox($l#128#x#0): int))): int
                   + $Unbox(Apply1(TInt, 
                      TInt, 
                      $l#128#heap#0, 
                      Lit(AtLayer((lambda $l#130#ly#0: LayerType :: 
                            Handle1((lambda $l#130#heap#0: Heap, $l#130#w#0: Box :: 
                                $Box(_module.__default.Sum($l#130#ly#0, 
                                    n'#0, 
                                    Lit(AtLayer((lambda $l#131#ly#0: LayerType :: 
                                          Handle1((lambda $l#131#heap#0: Heap, $l#131#y#0: Box :: 
                                              $Box($Unbox(Apply2(TInt, 
                                                    TInt, 
                                                    TInt, 
                                                    $l#131#heap#0, 
                                                    g#0, 
                                                    $Box($Unbox($l#130#w#0): int), 
                                                    $Box($Unbox($l#131#y#0): int))): int)), 
                                            (lambda $l#131#heap#0: Heap, $l#131#y#0: Box :: $IsBox($l#131#y#0, TInt)), 
                                            (lambda $l#131#heap#0: Heap, $l#131#y#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#131#o#0: ref :: false))))), 
                                        $l#130#ly#0))))), 
                              (lambda $l#130#heap#0: Heap, $l#130#w#0: Box :: $IsBox($l#130#w#0, TInt)), 
                              (lambda $l#130#heap#0: Heap, $l#130#w#0: Box :: 
                                SetRef_to_SetBox((lambda $l#130#o#0: ref :: false))))), 
                          $l#128#ly#0)), 
                      $Box($Unbox($l#128#x#0): int))): int)), 
            (lambda $l#128#heap#0: Heap, $l#128#x#0: Box :: $IsBox($l#128#x#0, TInt)), 
            (lambda $l#128#heap#0: Heap, $l#128#x#0: Box :: 
              SetRef_to_SetBox((lambda $l#128#o#0: ref :: false))))), 
        $LS($LZ)));
    call {:id "id138"} Call$$_module.__default.Exchange(n##0, f##0, g##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "L (well-formedness)"} CheckWellFormed$$_module.__default.L(n#0: int where LitInt(0) <= n#0, 
    n'#0: int where LitInt(0) <= n'#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "L (call)"} Call$$_module.__default.L(n#0: int where LitInt(0) <= n#0, 
    n'#0: int where LitInt(0) <= n'#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  // user-defined preconditions
  requires {:id "id148"} Lit(true);
  requires {:id "id149"} n#0 == n'#0 + 1;
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#38#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#40#ly#0: LayerType :: 
              Handle1((lambda $l#40#heap#0: Heap, $l#40#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#40#heap#0, 
                        g#0, 
                        $Box($l#38#x#0), 
                        $Box($Unbox($l#40#y#0): int))): int)), 
                (lambda $l#40#heap#0: Heap, $l#40#y#0: Box :: $IsBox($l#40#y#0, TInt)), 
                (lambda $l#40#heap#0: Heap, $l#40#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#40#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#41#ly#0: LayerType :: 
            Handle1((lambda $l#41#heap#0: Heap, $l#41#x#0: Box :: 
                $Box(_module.__default.Sum($l#41#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#42#ly#0: LayerType :: 
                          Handle1((lambda $l#42#heap#0: Heap, $l#42#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#42#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#41#x#0): int), 
                                    $Box($Unbox($l#42#y#0): int))): int)), 
                            (lambda $l#42#heap#0: Heap, $l#42#y#0: Box :: $IsBox($l#42#y#0, TInt)), 
                            (lambda $l#42#heap#0: Heap, $l#42#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#42#o#0: ref :: false))))), 
                        $l#41#ly#0))))), 
              (lambda $l#41#heap#0: Heap, $l#41#x#0: Box :: $IsBox($l#41#x#0, TInt)), 
              (lambda $l#41#heap#0: Heap, $l#41#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#41#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    (forall $l#43#x#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#45#ly#0: LayerType :: 
              Handle1((lambda $l#45#heap#0: Heap, $l#45#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#45#heap#0, 
                        g#0, 
                        $Box($l#43#x#0), 
                        $Box($Unbox($l#45#y#0): int))): int)), 
                (lambda $l#45#heap#0: Heap, $l#45#y#0: Box :: $IsBox($l#45#y#0, TInt)), 
                (lambda $l#45#heap#0: Heap, $l#45#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#45#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#46#ly#0: LayerType :: 
            Handle1((lambda $l#46#heap#0: Heap, $l#46#x#0: Box :: 
                $Box(_module.__default.Sum($l#46#ly#0, 
                    n'#0, 
                    Lit(AtLayer((lambda $l#47#ly#0: LayerType :: 
                          Handle1((lambda $l#47#heap#0: Heap, $l#47#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#47#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#46#x#0): int), 
                                    $Box($Unbox($l#47#y#0): int))): int)), 
                            (lambda $l#47#heap#0: Heap, $l#47#y#0: Box :: $IsBox($l#47#y#0, TInt)), 
                            (lambda $l#47#heap#0: Heap, $l#47#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#47#o#0: ref :: false))))), 
                        $l#46#ly#0))))), 
              (lambda $l#46#heap#0: Heap, $l#46#x#0: Box :: $IsBox($l#46#x#0, TInt)), 
              (lambda $l#46#heap#0: Heap, $l#46#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#46#o#0: ref :: false))))), 
          $LS($LZ))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#49#ly#0: LayerType :: 
            Handle1((lambda $l#49#heap#0: Heap, $l#49#x#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#49#heap#0, g#0, $Box($Unbox($l#49#x#0): int), $Box(n'#0))): int)), 
              (lambda $l#49#heap#0: Heap, $l#49#x#0: Box :: $IsBox($l#49#x#0, TInt)), 
              (lambda $l#49#heap#0: Heap, $l#49#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#49#o#0: ref :: false))))), 
          $LS($LZ))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#51#ly#0: LayerType :: 
            Handle1((lambda $l#51#heap#0: Heap, $l#51#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#51#heap#0, g#0, $Box(n'#0), $Box($Unbox($l#51#y#0): int))): int)), 
              (lambda $l#51#heap#0: Heap, $l#51#y#0: Box :: $IsBox($l#51#y#0, TInt)), 
              (lambda $l#51#heap#0: Heap, $l#51#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#51#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id150"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#52#ly#0: LayerType :: 
            Handle1((lambda $l#52#heap#0: Heap, $l#52#x#0: Box :: 
                $Box(_module.__default.Sum($l#52#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#53#ly#0: LayerType :: 
                          Handle1((lambda $l#53#heap#0: Heap, $l#53#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#53#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#52#x#0): int), 
                                    $Box($Unbox($l#53#y#0): int))): int)), 
                            (lambda $l#53#heap#0: Heap, $l#53#y#0: Box :: $IsBox($l#53#y#0, TInt)), 
                            (lambda $l#53#heap#0: Heap, $l#53#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#53#o#0: ref :: false))))), 
                        $l#52#ly#0))))), 
              (lambda $l#52#heap#0: Heap, $l#52#x#0: Box :: $IsBox($l#52#x#0, TInt)), 
              (lambda $l#52#heap#0: Heap, $l#52#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#52#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
        n'#0, 
        Lit(AtLayer((lambda $l#54#ly#0: LayerType :: 
              Handle1((lambda $l#54#heap#0: Heap, $l#54#x#0: Box :: 
                  $Box(_module.__default.Sum($l#54#ly#0, 
                      n'#0, 
                      Lit(AtLayer((lambda $l#55#ly#0: LayerType :: 
                            Handle1((lambda $l#55#heap#0: Heap, $l#55#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#55#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#54#x#0): int), 
                                      $Box($Unbox($l#55#y#0): int))): int)), 
                              (lambda $l#55#heap#0: Heap, $l#55#y#0: Box :: $IsBox($l#55#y#0, TInt)), 
                              (lambda $l#55#heap#0: Heap, $l#55#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#55#o#0: ref :: false))))), 
                          $l#54#ly#0))))), 
                (lambda $l#54#heap#0: Heap, $l#54#x#0: Box :: $IsBox($l#54#x#0, TInt)), 
                (lambda $l#54#heap#0: Heap, $l#54#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#54#o#0: ref :: false))))), 
            $LS($LZ))))
       + _module.__default.Sum($LS($LS($LZ)), 
        n'#0, 
        Lit(AtLayer((lambda $l#56#ly#0: LayerType :: 
              Handle1((lambda $l#56#heap#0: Heap, $l#56#x#0: Box :: 
                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#56#heap#0, g#0, $Box($Unbox($l#56#x#0): int), $Box(n'#0))): int)), 
                (lambda $l#56#heap#0: Heap, $l#56#x#0: Box :: $IsBox($l#56#x#0, TInt)), 
                (lambda $l#56#heap#0: Heap, $l#56#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#56#o#0: ref :: false))))), 
            $LS($LZ))))
       + _module.__default.Sum($LS($LS($LZ)), 
        n'#0, 
        Lit(AtLayer((lambda $l#57#ly#0: LayerType :: 
              Handle1((lambda $l#57#heap#0: Heap, $l#57#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#57#heap#0, g#0, $Box(n'#0), $Box($Unbox($l#57#y#0): int))): int)), 
                (lambda $l#57#heap#0: Heap, $l#57#y#0: Box :: $IsBox($l#57#y#0, TInt)), 
                (lambda $l#57#heap#0: Heap, $l#57#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#57#o#0: ref :: false))))), 
            $LS($LZ))))
       + $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int;
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "L (correctness)"} Impl$$_module.__default.L(n#0: int where LitInt(0) <= n#0, 
    n'#0: int where LitInt(0) <= n'#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id151"} Lit(true);
  requires {:id "id152"} n#0 == n'#0 + 1;
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#58#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#60#ly#0: LayerType :: 
              Handle1((lambda $l#60#heap#0: Heap, $l#60#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#60#heap#0, 
                        g#0, 
                        $Box($l#58#x#0), 
                        $Box($Unbox($l#60#y#0): int))): int)), 
                (lambda $l#60#heap#0: Heap, $l#60#y#0: Box :: $IsBox($l#60#y#0, TInt)), 
                (lambda $l#60#heap#0: Heap, $l#60#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#60#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#61#ly#0: LayerType :: 
            Handle1((lambda $l#61#heap#0: Heap, $l#61#x#0: Box :: 
                $Box(_module.__default.Sum($l#61#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#62#ly#0: LayerType :: 
                          Handle1((lambda $l#62#heap#0: Heap, $l#62#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#62#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#61#x#0): int), 
                                    $Box($Unbox($l#62#y#0): int))): int)), 
                            (lambda $l#62#heap#0: Heap, $l#62#y#0: Box :: $IsBox($l#62#y#0, TInt)), 
                            (lambda $l#62#heap#0: Heap, $l#62#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#62#o#0: ref :: false))))), 
                        $l#61#ly#0))))), 
              (lambda $l#61#heap#0: Heap, $l#61#x#0: Box :: $IsBox($l#61#x#0, TInt)), 
              (lambda $l#61#heap#0: Heap, $l#61#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#61#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    (forall $l#63#x#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#65#ly#0: LayerType :: 
              Handle1((lambda $l#65#heap#0: Heap, $l#65#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#65#heap#0, 
                        g#0, 
                        $Box($l#63#x#0), 
                        $Box($Unbox($l#65#y#0): int))): int)), 
                (lambda $l#65#heap#0: Heap, $l#65#y#0: Box :: $IsBox($l#65#y#0, TInt)), 
                (lambda $l#65#heap#0: Heap, $l#65#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#65#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#66#ly#0: LayerType :: 
            Handle1((lambda $l#66#heap#0: Heap, $l#66#x#0: Box :: 
                $Box(_module.__default.Sum($l#66#ly#0, 
                    n'#0, 
                    Lit(AtLayer((lambda $l#67#ly#0: LayerType :: 
                          Handle1((lambda $l#67#heap#0: Heap, $l#67#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#67#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#66#x#0): int), 
                                    $Box($Unbox($l#67#y#0): int))): int)), 
                            (lambda $l#67#heap#0: Heap, $l#67#y#0: Box :: $IsBox($l#67#y#0, TInt)), 
                            (lambda $l#67#heap#0: Heap, $l#67#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#67#o#0: ref :: false))))), 
                        $l#66#ly#0))))), 
              (lambda $l#66#heap#0: Heap, $l#66#x#0: Box :: $IsBox($l#66#x#0, TInt)), 
              (lambda $l#66#heap#0: Heap, $l#66#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#66#o#0: ref :: false))))), 
          $LS($LZ))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#69#ly#0: LayerType :: 
            Handle1((lambda $l#69#heap#0: Heap, $l#69#x#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#69#heap#0, g#0, $Box($Unbox($l#69#x#0): int), $Box(n'#0))): int)), 
              (lambda $l#69#heap#0: Heap, $l#69#x#0: Box :: $IsBox($l#69#x#0, TInt)), 
              (lambda $l#69#heap#0: Heap, $l#69#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#69#o#0: ref :: false))))), 
          $LS($LZ))))
     && _module.__default.Sum#canCall(n'#0, 
      Lit(AtLayer((lambda $l#71#ly#0: LayerType :: 
            Handle1((lambda $l#71#heap#0: Heap, $l#71#y#0: Box :: 
                $Box($Unbox(Apply2(TInt, TInt, TInt, $l#71#heap#0, g#0, $Box(n'#0), $Box($Unbox($l#71#y#0): int))): int)), 
              (lambda $l#71#heap#0: Heap, $l#71#y#0: Box :: $IsBox($l#71#y#0, TInt)), 
              (lambda $l#71#heap#0: Heap, $l#71#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#71#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id153"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#72#ly#0: LayerType :: 
            Handle1((lambda $l#72#heap#0: Heap, $l#72#x#0: Box :: 
                $Box(_module.__default.Sum($l#72#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#73#ly#0: LayerType :: 
                          Handle1((lambda $l#73#heap#0: Heap, $l#73#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#73#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#72#x#0): int), 
                                    $Box($Unbox($l#73#y#0): int))): int)), 
                            (lambda $l#73#heap#0: Heap, $l#73#y#0: Box :: $IsBox($l#73#y#0, TInt)), 
                            (lambda $l#73#heap#0: Heap, $l#73#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#73#o#0: ref :: false))))), 
                        $l#72#ly#0))))), 
              (lambda $l#72#heap#0: Heap, $l#72#x#0: Box :: $IsBox($l#72#x#0, TInt)), 
              (lambda $l#72#heap#0: Heap, $l#72#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#72#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
        n'#0, 
        Lit(AtLayer((lambda $l#74#ly#0: LayerType :: 
              Handle1((lambda $l#74#heap#0: Heap, $l#74#x#0: Box :: 
                  $Box(_module.__default.Sum($l#74#ly#0, 
                      n'#0, 
                      Lit(AtLayer((lambda $l#75#ly#0: LayerType :: 
                            Handle1((lambda $l#75#heap#0: Heap, $l#75#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#75#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#74#x#0): int), 
                                      $Box($Unbox($l#75#y#0): int))): int)), 
                              (lambda $l#75#heap#0: Heap, $l#75#y#0: Box :: $IsBox($l#75#y#0, TInt)), 
                              (lambda $l#75#heap#0: Heap, $l#75#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#75#o#0: ref :: false))))), 
                          $l#74#ly#0))))), 
                (lambda $l#74#heap#0: Heap, $l#74#x#0: Box :: $IsBox($l#74#x#0, TInt)), 
                (lambda $l#74#heap#0: Heap, $l#74#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#74#o#0: ref :: false))))), 
            $LS($LZ))))
       + _module.__default.Sum($LS($LS($LZ)), 
        n'#0, 
        Lit(AtLayer((lambda $l#76#ly#0: LayerType :: 
              Handle1((lambda $l#76#heap#0: Heap, $l#76#x#0: Box :: 
                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#76#heap#0, g#0, $Box($Unbox($l#76#x#0): int), $Box(n'#0))): int)), 
                (lambda $l#76#heap#0: Heap, $l#76#x#0: Box :: $IsBox($l#76#x#0, TInt)), 
                (lambda $l#76#heap#0: Heap, $l#76#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#76#o#0: ref :: false))))), 
            $LS($LZ))))
       + _module.__default.Sum($LS($LS($LZ)), 
        n'#0, 
        Lit(AtLayer((lambda $l#77#ly#0: LayerType :: 
              Handle1((lambda $l#77#heap#0: Heap, $l#77#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, TInt, TInt, $l#77#heap#0, g#0, $Box(n'#0), $Box($Unbox($l#77#y#0): int))): int)), 
                (lambda $l#77#heap#0: Heap, $l#77#y#0: Box :: $IsBox($l#77#y#0, TInt)), 
                (lambda $l#77#heap#0: Heap, $l#77#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#77#o#0: ref :: false))))), 
            $LS($LZ))))
       + $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int;
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "L (correctness)"} Impl$$_module.__default.L(n#0: int, n'#0: int, g#0: HandleType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var A#0: HandleType
     where $Is(A#0, Tclass._System.___hTotalFunc1(TInt, TInt))
       && $IsAlloc(A#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
  var $lambdaHeap#6: Heap;
  var w#0: int;
  var $_Frame#l6: [ref,Field]bool;
  var lambdaResult#6: int;
  var B#0: HandleType
     where $Is(B#0, Tclass._System.___hTotalFunc1(TInt, TInt))
       && $IsAlloc(B#0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
  var $lambdaHeap#7: Heap;
  var w#1: int;
  var $_Frame#l7: [ref,Field]bool;
  var lambdaResult#7: int;
  var ##n#6: int;
  var ##f#6: HandleType;
  var $lambdaHeap#8: Heap;
  var y#3: int;
  var $_Frame#l8: [ref,Field]bool;
  var lambdaResult#8: int;
  var ##n#0_0_0: int;
  var ##f#0_0_0: HandleType;
  var $lambdaHeap#0_0_0: Heap;
  var y#0_0_0: int;
  var $_Frame#l0_0_0: [ref,Field]bool;
  var lambdaResult#0_0_0: int;
  var ##n#0_0_1: int;
  var ##f#0_0_1: HandleType;
  var $lambdaHeap#0_0_1: Heap;
  var w#0_0_0: int;
  var $_Frame#l0_0_1: [ref,Field]bool;
  var lambdaResult#0_0_1: int;
  var ##n#0_0_2: int;
  var ##f#0_0_2: HandleType;
  var $lambdaHeap#0_0_2: Heap;
  var w#0_0_1: int;
  var $_Frame#l0_0_2: [ref,Field]bool;
  var lambdaResult#0_0_2: int;
  var ##n#0_0_3: int;
  var ##f#0_0_3: HandleType;
  var $lambdaHeap#0_0_3: Heap;
  var y#0_0_1: int;
  var $_Frame#l0_0_3: [ref,Field]bool;
  var lambdaResult#0_0_3: int;
  var ##n#0_0_4: int;
  var ##f#0_0_4: HandleType;
  var $lambdaHeap#0_0_4: Heap;
  var x#0_0_0: int;
  var $_Frame#l0_0_4: [ref,Field]bool;
  var lambdaResult#0_0_4: int;
  var ##n#0_0_5: int;
  var ##f#0_0_5: HandleType;
  var $lambdaHeap#0_0_5: Heap;
  var y#0_0_2: int;
  var $_Frame#l0_0_5: [ref,Field]bool;
  var lambdaResult#0_0_5: int;
  var ##n#0_0_6: int;
  var ##f#0_0_6: HandleType;
  var $lambdaHeap#0_0_6: Heap;
  var y#0_0_3: int;
  var $_Frame#l0_0_6: [ref,Field]bool;
  var lambdaResult#0_0_6: int;
  var ##n#0_0_7: int;
  var ##f#0_0_7: HandleType;
  var $lambdaHeap#0_0_7: Heap;
  var x#0_0_1: int;
  var $_Frame#l0_0_7: [ref,Field]bool;
  var lambdaResult#0_0_7: int;
  var ##n#0_1_0: int;
  var ##f#0_1_0: HandleType;
  var $lambdaHeap#0_1_0: Heap;
  var y#0_1_0: int;
  var $_Frame#l0_1_0: [ref,Field]bool;
  var lambdaResult#0_1_0: int;
  var ##n#0_1_1: int;
  var ##f#0_1_1: HandleType;
  var ##n#0_1_2: int;
  var ##f#0_1_2: HandleType;
  var ##n#0_1_3: int;
  var ##f#0_1_3: HandleType;
  var $lambdaHeap#0_1_1: Heap;
  var y#0_1_1: int;
  var $_Frame#l0_1_1: [ref,Field]bool;
  var lambdaResult#0_1_1: int;
  var ##n#0_1_4: int;
  var ##f#0_1_4: HandleType;
  var $lambdaHeap#0_1_2: Heap;
  var w#0_1_0: int;
  var $_Frame#l0_1_2: [ref,Field]bool;
  var lambdaResult#0_1_2: int;
  var ##n#0_1_5: int;
  var ##f#0_1_5: HandleType;
  var $lambdaHeap#0_1_3: Heap;
  var w#0_1_1: int;
  var $_Frame#l0_1_3: [ref,Field]bool;
  var lambdaResult#0_1_3: int;
  var ##n#0_1_6: int;
  var ##f#0_1_6: HandleType;
  var $lambdaHeap#0_1_4: Heap;
  var y#0_1_2: int;
  var $_Frame#l0_1_4: [ref,Field]bool;
  var lambdaResult#0_1_4: int;
  var ##n#0_2_0: int;
  var ##f#0_2_0: HandleType;
  var $lambdaHeap#0_2_0: Heap;
  var y#0_2_0: int;
  var $_Frame#l0_2_0: [ref,Field]bool;
  var lambdaResult#0_2_0: int;
  var ##n#0_2_1: int;
  var ##f#0_2_1: HandleType;
  var $lambdaHeap#0_2_1: Heap;
  var x#0_2_0: int;
  var $_Frame#l0_2_1: [ref,Field]bool;
  var lambdaResult#0_2_1: int;
  var n##0_2_0: int;
  var f##0_2_0: HandleType;
  var g##0_2_0: HandleType;
  var ##n#0_2_2: int;
  var ##f#0_2_2: HandleType;
  var $lambdaHeap#0_2_2: Heap;
  var y#0_2_1: int;
  var $_Frame#l0_2_2: [ref,Field]bool;
  var lambdaResult#0_2_2: int;
  var ##n#0_2_3: int;
  var ##f#0_2_3: HandleType;
  var ##n#0_2_4: int;
  var ##f#0_2_4: HandleType;
  var ##n#0_3_0: int;
  var ##f#0_3_0: HandleType;
  var $lambdaHeap#0_3_0: Heap;
  var y#0_3_0: int;
  var $_Frame#l0_3_0: [ref,Field]bool;
  var lambdaResult#0_3_0: int;
  var ##n#0_3_1: int;
  var ##f#0_3_1: HandleType;
  var $lambdaHeap#0_3_1: Heap;
  var x#0_3_0: int;
  var $_Frame#l0_3_1: [ref,Field]bool;
  var lambdaResult#0_3_1: int;
  var $lambdaHeap#0_3_2: Heap;
  var w#0_3_0: int;
  var $_Frame#l0_3_2: [ref,Field]bool;
  var lambdaResult#0_3_2: int;
  var $lambdaHeap#0_3_3: Heap;
  var w#0_3_1: int;
  var $_Frame#l0_3_3: [ref,Field]bool;
  var lambdaResult#0_3_3: int;
  var ##n#0_3_2: int;
  var ##f#0_3_2: HandleType;
  var $lambdaHeap#0_3_4: Heap;
  var y#0_3_1: int;
  var $_Frame#l0_3_4: [ref,Field]bool;
  var lambdaResult#0_3_4: int;
  var n##0_3_0: int;
  var f##0_3_0: HandleType;
  var $lambdaHeap#0_3_5: Heap;
  var x#0_3_1: int;
  var $_Frame#l0_3_5: [ref,Field]bool;
  var lambdaResult#0_3_5: int;
  var $lambdaHeap#0_3_6: Heap;
  var w#0_3_2: int;
  var $_Frame#l0_3_6: [ref,Field]bool;
  var lambdaResult#0_3_6: int;
  var $lambdaHeap#0_3_7: Heap;
  var w#0_3_3: int;
  var $_Frame#l0_3_7: [ref,Field]bool;
  var lambdaResult#0_3_7: int;
  var ##n#0_3_3: int;
  var ##f#0_3_3: HandleType;
  var $lambdaHeap#0_3_8: Heap;
  var y#0_3_2: int;
  var $_Frame#l0_3_8: [ref,Field]bool;
  var lambdaResult#0_3_8: int;
  var g##0_3_0: HandleType;
  var $lambdaHeap#0_3_9: Heap;
  var x#0_3_2: int;
  var $_Frame#l0_3_9: [ref,Field]bool;
  var lambdaResult#0_3_9: int;
  var ##n#0_3_4: int;
  var ##f#0_3_4: HandleType;
  var $lambdaHeap#0_3_10: Heap;
  var y#0_3_3: int;
  var $_Frame#l0_3_10: [ref,Field]bool;
  var lambdaResult#0_3_10: int;
  var ##n#0_3_5: int;
  var ##f#0_3_5: HandleType;
  var $lambdaHeap#0_3_11: Heap;
  var x#0_3_3: int;
  var $_Frame#l0_3_11: [ref,Field]bool;
  var lambdaResult#0_3_11: int;
  var ##n#0_4_0: int;
  var ##f#0_4_0: HandleType;
  var $lambdaHeap#0_4_0: Heap;
  var y#0_4_0: int;
  var $_Frame#l0_4_0: [ref,Field]bool;
  var lambdaResult#0_4_0: int;
  var ##n#0_4_1: int;
  var ##f#0_4_1: HandleType;
  var $lambdaHeap#0_4_1: Heap;
  var x#0_4_0: int;
  var $_Frame#l0_4_1: [ref,Field]bool;
  var lambdaResult#0_4_1: int;
  var ##n#0_4_2: int;
  var ##f#0_4_2: HandleType;
  var $lambdaHeap#0_4_2: Heap;
  var y#0_4_1: int;
  var $_Frame#l0_4_2: [ref,Field]bool;
  var lambdaResult#0_4_2: int;
  var n'##0_4_0: int;
  var g##0_4_0: HandleType;
  var ##n#0_4_3: int;
  var ##f#0_4_3: HandleType;
  var $lambdaHeap#0_4_3: Heap;
  var y#0_4_2: int;
  var $_Frame#l0_4_3: [ref,Field]bool;
  var lambdaResult#0_4_3: int;
  var ##n#0_4_4: int;
  var ##f#0_4_4: HandleType;
  var $lambdaHeap#0_4_4: Heap;
  var x#0_4_1: int;
  var $_Frame#l0_4_4: [ref,Field]bool;
  var lambdaResult#0_4_4: int;
  var $lambdaHeap#0_4_5: Heap;
  var w#0_4_0: int;
  var $_Frame#l0_4_5: [ref,Field]bool;
  var lambdaResult#0_4_5: int;
  var $lambdaHeap#0_4_6: Heap;
  var w#0_4_1: int;
  var $_Frame#l0_4_6: [ref,Field]bool;
  var lambdaResult#0_4_6: int;
  var ##n#0_4_5: int;
  var ##f#0_4_5: HandleType;
  var $lambdaHeap#0_4_7: Heap;
  var y#0_4_3: int;
  var $_Frame#l0_4_7: [ref,Field]bool;
  var lambdaResult#0_4_7: int;
  var ##n#0_5_0: int;
  var ##f#0_5_0: HandleType;
  var $lambdaHeap#0_5_0: Heap;
  var y#0_5_0: int;
  var $_Frame#l0_5_0: [ref,Field]bool;
  var lambdaResult#0_5_0: int;
  var ##n#0_5_1: int;
  var ##f#0_5_1: HandleType;
  var $lambdaHeap#0_5_1: Heap;
  var x#0_5_0: int;
  var $_Frame#l0_5_1: [ref,Field]bool;
  var lambdaResult#0_5_1: int;
  var ##n#0_5_2: int;
  var ##f#0_5_2: HandleType;
  var $lambdaHeap#0_5_2: Heap;
  var y#0_5_1: int;
  var $_Frame#l0_5_2: [ref,Field]bool;
  var lambdaResult#0_5_2: int;
  var i#0_5_0_0: int;
  var $lambdaHeap#0_5_0_0: Heap;
  var x#0_5_0_0: int;
  var $_Frame#l0_5_0_0: [ref,Field]bool;
  var lambdaResult#0_5_0_0: int;
  var ##n#0_5_0_0: int;
  var ##f#0_5_0_0: HandleType;
  var $lambdaHeap#0_5_0_1: Heap;
  var y#0_5_0_0: int;
  var $_Frame#l0_5_0_1: [ref,Field]bool;
  var lambdaResult#0_5_0_1: int;
  var $lambdaHeap#0_5_0_2: Heap;
  var x#0_5_0_1: int;
  var $_Frame#l0_5_0_2: [ref,Field]bool;
  var lambdaResult#0_5_0_2: int;
  var ##n#0_5_0_1: int;
  var ##f#0_5_0_1: HandleType;
  var $lambdaHeap#0_5_0_3: Heap;
  var y#0_5_0_1: int;
  var $_Frame#l0_5_0_3: [ref,Field]bool;
  var lambdaResult#0_5_0_3: int;
  var ##n#0_5_0_0_0_0: int;
  var ##f#0_5_0_0_0_0: HandleType;
  var $lambdaHeap#0_5_0_0_0_0: Heap;
  var y#0_5_0_0_0_0: int;
  var $_Frame#l0_5_0_0_0_0: [ref,Field]bool;
  var lambdaResult#0_5_0_0_0_0: int;
  var n'##0_5_0_0_0_0: int;
  var g##0_5_0_0_0_0: HandleType;
  var i##0_5_0_0_0_0: int;
  var $lambdaHeap#0_5_0_0_0_1: Heap;
  var x#0_5_0_0_0_0: int;
  var $_Frame#l0_5_0_0_0_1: [ref,Field]bool;
  var lambdaResult#0_5_0_0_0_1: int;
  var ##n#0_5_0_0_0_1: int;
  var ##f#0_5_0_0_0_1: HandleType;
  var $lambdaHeap#0_5_0_0_0_2: Heap;
  var y#0_5_0_0_0_1: int;
  var $_Frame#l0_5_0_0_0_2: [ref,Field]bool;
  var lambdaResult#0_5_0_0_0_2: int;
  var $lambdaHeap#0_5_0_0_1_0: Heap;
  var y#0_5_0_0_1_0: int;
  var $_Frame#l0_5_0_0_1_0: [ref,Field]bool;
  var lambdaResult#0_5_0_0_1_0: int;
  var ##n#0_5_0_0_1_0: int;
  var ##f#0_5_0_0_1_0: HandleType;
  var $lambdaHeap#0_5_0_0_1_1: Heap;
  var y#0_5_0_0_1_1: int;
  var $_Frame#l0_5_0_0_1_1: [ref,Field]bool;
  var lambdaResult#0_5_0_0_1_1: int;
  var ##n#0_5_0_0_1_1: int;
  var ##f#0_5_0_0_1_1: HandleType;
  var $lambdaHeap#0_5_0_0_1_2: Heap;
  var y#0_5_0_0_1_2: int;
  var $_Frame#l0_5_0_0_1_2: [ref,Field]bool;
  var lambdaResult#0_5_0_0_1_2: int;
  var ##n#0_5_0_0_2_0: int;
  var ##f#0_5_0_0_2_0: HandleType;
  var $lambdaHeap#0_5_0_0_2_0: Heap;
  var y#0_5_0_0_2_0: int;
  var $_Frame#l0_5_0_0_2_0: [ref,Field]bool;
  var lambdaResult#0_5_0_0_2_0: int;
  var $lambdaHeap#0_5_0_0_2_1: Heap;
  var y#0_5_0_0_2_1: int;
  var $_Frame#l0_5_0_0_2_1: [ref,Field]bool;
  var lambdaResult#0_5_0_0_2_1: int;
  var ##n#0_5_0_0_2_1: int;
  var ##f#0_5_0_0_2_1: HandleType;
  var $lambdaHeap#0_5_0_0_2_2: Heap;
  var y#0_5_0_0_2_2: int;
  var $_Frame#l0_5_0_0_2_2: [ref,Field]bool;
  var lambdaResult#0_5_0_0_2_2: int;
  var $lambdaHeap#0_5_0_0_3_0: Heap;
  var x#0_5_0_0_3_0: int;
  var $_Frame#l0_5_0_0_3_0: [ref,Field]bool;
  var lambdaResult#0_5_0_0_3_0: int;
  var ##n#0_5_0_0_3_0: int;
  var ##f#0_5_0_0_3_0: HandleType;
  var $lambdaHeap#0_5_0_0_3_1: Heap;
  var y#0_5_0_0_3_0: int;
  var $_Frame#l0_5_0_0_3_1: [ref,Field]bool;
  var lambdaResult#0_5_0_0_3_1: int;
  var n##0_5_0_0_3_0: int;
  var g##0_5_0_0_3_0: HandleType;
  var i##0_5_0_0_3_0: int;
  var ##n#0_5_0_0_3_1: int;
  var ##f#0_5_0_0_3_1: HandleType;
  var $lambdaHeap#0_5_0_0_3_2: Heap;
  var y#0_5_0_0_3_1: int;
  var $_Frame#l0_5_0_0_3_2: [ref,Field]bool;
  var lambdaResult#0_5_0_0_3_2: int;
  var $lambdaHeap#0_5_0_0_0: Heap;
  var x#0_5_0_0_0: int;
  var $_Frame#l0_5_0_0_0: [ref,Field]bool;
  var lambdaResult#0_5_0_0_0: int;
  var ##n#0_5_0_0_0: int;
  var ##f#0_5_0_0_0: HandleType;
  var $lambdaHeap#0_5_0_0_1: Heap;
  var y#0_5_0_0_0: int;
  var $_Frame#l0_5_0_0_1: [ref,Field]bool;
  var lambdaResult#0_5_0_0_1: int;
  var n##0_5_0: int;
  var f##0_5_0: HandleType;
  var $lambdaHeap#0_5_3: Heap;
  var x#0_5_1: int;
  var $_Frame#l0_5_3: [ref,Field]bool;
  var lambdaResult#0_5_3: int;
  var ##n#0_5_3: int;
  var ##f#0_5_3: HandleType;
  var $lambdaHeap#0_5_4: Heap;
  var y#0_5_2: int;
  var $_Frame#l0_5_4: [ref,Field]bool;
  var lambdaResult#0_5_4: int;
  var g##0_5_0: HandleType;
  var $lambdaHeap#0_5_5: Heap;
  var x#0_5_2: int;
  var $_Frame#l0_5_5: [ref,Field]bool;
  var lambdaResult#0_5_5: int;
  var ##n#0_5_4: int;
  var ##f#0_5_4: HandleType;
  var $lambdaHeap#0_5_6: Heap;
  var y#0_5_3: int;
  var $_Frame#l0_5_6: [ref,Field]bool;
  var lambdaResult#0_5_6: int;
  var ##n#0_5_5: int;
  var ##f#0_5_5: HandleType;
  var $lambdaHeap#0_5_7: Heap;
  var y#0_5_4: int;
  var $_Frame#l0_5_7: [ref,Field]bool;
  var lambdaResult#0_5_7: int;
  var ##n#0_5_6: int;
  var ##f#0_5_6: HandleType;
  var $lambdaHeap#0_5_8: Heap;
  var x#0_5_3: int;
  var $_Frame#l0_5_8: [ref,Field]bool;
  var lambdaResult#0_5_8: int;
  var ##n#0_5_7: int;
  var ##f#0_5_7: HandleType;
  var $lambdaHeap#0_5_9: Heap;
  var y#0_5_5: int;
  var $_Frame#l0_5_9: [ref,Field]bool;
  var lambdaResult#0_5_9: int;
  var $lambdaHeap#0_6_0: Heap;
  var y#0_6_0: int;
  var $_Frame#l0_6_0: [ref,Field]bool;
  var lambdaResult#0_6_0: int;
  var ##n#0_6_0: int;
  var ##f#0_6_0: HandleType;
  var $lambdaHeap#0_6_1: Heap;
  var y#0_6_1: int;
  var $_Frame#l0_6_1: [ref,Field]bool;
  var lambdaResult#0_6_1: int;
  var ##n#0_6_1: int;
  var ##f#0_6_1: HandleType;
  var $lambdaHeap#0_6_2: Heap;
  var x#0_6_0: int;
  var $_Frame#l0_6_2: [ref,Field]bool;
  var lambdaResult#0_6_2: int;
  var ##n#0_6_2: int;
  var ##f#0_6_2: HandleType;
  var $lambdaHeap#0_6_3: Heap;
  var y#0_6_2: int;
  var $_Frame#l0_6_3: [ref,Field]bool;
  var lambdaResult#0_6_3: int;
  var $lambdaHeap#0_6_4: Heap;
  var y#0_6_3: int;
  var $_Frame#l0_6_4: [ref,Field]bool;
  var lambdaResult#0_6_4: int;
  var ##n#0_6_3: int;
  var ##f#0_6_3: HandleType;
  var $lambdaHeap#0_6_5: Heap;
  var y#0_6_4: int;
  var $_Frame#l0_6_5: [ref,Field]bool;
  var lambdaResult#0_6_5: int;
  var ##n#0_6_4: int;
  var ##f#0_6_4: HandleType;
  var $lambdaHeap#0_6_6: Heap;
  var x#0_6_1: int;
  var $_Frame#l0_6_6: [ref,Field]bool;
  var lambdaResult#0_6_6: int;
  var ##n#0_6_5: int;
  var ##f#0_6_5: HandleType;
  var $lambdaHeap#0_6_7: Heap;
  var y#0_6_5: int;
  var $_Frame#l0_6_7: [ref,Field]bool;
  var lambdaResult#0_6_7: int;
  var ##n#0_7_0: int;
  var ##f#0_7_0: HandleType;
  var $lambdaHeap#0_7_0: Heap;
  var y#0_7_0: int;
  var $_Frame#l0_7_0: [ref,Field]bool;
  var lambdaResult#0_7_0: int;
  var ##n#0_7_1: int;
  var ##f#0_7_1: HandleType;
  var $lambdaHeap#0_7_1: Heap;
  var x#0_7_0: int;
  var $_Frame#l0_7_1: [ref,Field]bool;
  var lambdaResult#0_7_1: int;
  var ##n#0_7_2: int;
  var ##f#0_7_2: HandleType;
  var $lambdaHeap#0_7_2: Heap;
  var y#0_7_1: int;
  var $_Frame#l0_7_2: [ref,Field]bool;
  var lambdaResult#0_7_2: int;
  var $lambdaHeap#0_7_3: Heap;
  var y#0_7_2: int;
  var $_Frame#l0_7_3: [ref,Field]bool;
  var lambdaResult#0_7_3: int;
  var ##n#0_7_3: int;
  var ##f#0_7_3: HandleType;
  var $lambdaHeap#0_7_4: Heap;
  var y#0_7_3: int;
  var $_Frame#l0_7_4: [ref,Field]bool;
  var lambdaResult#0_7_4: int;
  var ##n#0_7_4: int;
  var ##f#0_7_4: HandleType;
  var $lambdaHeap#0_7_5: Heap;
  var x#0_7_1: int;
  var $_Frame#l0_7_5: [ref,Field]bool;
  var lambdaResult#0_7_5: int;
  var ##n#0_7_5: int;
  var ##f#0_7_5: HandleType;
  var $lambdaHeap#0_7_6: Heap;
  var y#0_7_4: int;
  var $_Frame#l0_7_6: [ref,Field]bool;
  var lambdaResult#0_7_6: int;
  var $lambdaHeap#0_8_0: Heap;
  var x#0_8_0: int;
  var $_Frame#l0_8_0: [ref,Field]bool;
  var lambdaResult#0_8_0: int;
  var ##n#0_8_0: int;
  var ##f#0_8_0: HandleType;
  var $lambdaHeap#0_8_1: Heap;
  var y#0_8_0: int;
  var $_Frame#l0_8_1: [ref,Field]bool;
  var lambdaResult#0_8_1: int;
  var ##n#0_8_1: int;
  var ##f#0_8_1: HandleType;
  var $lambdaHeap#0_8_2: Heap;
  var x#0_8_1: int;
  var $_Frame#l0_8_2: [ref,Field]bool;
  var lambdaResult#0_8_2: int;
  var ##n#0_8_2: int;
  var ##f#0_8_2: HandleType;
  var $lambdaHeap#0_8_3: Heap;
  var y#0_8_1: int;
  var $_Frame#l0_8_3: [ref,Field]bool;
  var lambdaResult#0_8_3: int;
  var n##0_8_0: int;
  var g##0_8_0: HandleType;
  var i##0_8_0: int;
  var ##n#0_8_3: int;
  var ##f#0_8_3: HandleType;
  var $lambdaHeap#0_8_4: Heap;
  var y#0_8_2: int;
  var $_Frame#l0_8_4: [ref,Field]bool;
  var lambdaResult#0_8_4: int;
  var ##n#0_8_4: int;
  var ##f#0_8_4: HandleType;
  var $lambdaHeap#0_8_5: Heap;
  var x#0_8_2: int;
  var $_Frame#l0_8_5: [ref,Field]bool;
  var lambdaResult#0_8_5: int;
  var ##n#0_8_5: int;
  var ##f#0_8_5: HandleType;
  var $lambdaHeap#0_8_6: Heap;
  var y#0_8_3: int;
  var $_Frame#l0_8_6: [ref,Field]bool;
  var lambdaResult#0_8_6: int;
  var ##n#0_9_0: int;
  var ##f#0_9_0: HandleType;
  var $lambdaHeap#0_9_0: Heap;
  var x#0_9_0: int;
  var $_Frame#l0_9_0: [ref,Field]bool;
  var lambdaResult#0_9_0: int;
  var ##n#0_9_1: int;
  var ##f#0_9_1: HandleType;
  var $lambdaHeap#0_9_1: Heap;
  var y#0_9_0: int;
  var $_Frame#l0_9_1: [ref,Field]bool;
  var lambdaResult#0_9_1: int;
  var $lambdaHeap#0_9_2: Heap;
  var x#0_9_1: int;
  var $_Frame#l0_9_2: [ref,Field]bool;
  var lambdaResult#0_9_2: int;
  var ##n#0_9_2: int;
  var ##f#0_9_2: HandleType;
  var $lambdaHeap#0_9_3: Heap;
  var y#0_9_1: int;
  var $_Frame#l0_9_3: [ref,Field]bool;
  var lambdaResult#0_9_3: int;
  var ##n#0_9_3: int;
  var ##f#0_9_3: HandleType;
  var $lambdaHeap#0_9_4: Heap;
  var x#0_9_2: int;
  var $_Frame#l0_9_4: [ref,Field]bool;
  var lambdaResult#0_9_4: int;
  var ##n#0_9_4: int;
  var ##f#0_9_4: HandleType;
  var $lambdaHeap#0_9_5: Heap;
  var y#0_9_2: int;
  var $_Frame#l0_9_5: [ref,Field]bool;
  var lambdaResult#0_9_5: int;
  var ##n#0_0: int;
  var ##f#0_0: HandleType;
  var $lambdaHeap#0_0: Heap;
  var x#0_0: int;
  var $_Frame#l0_0: [ref,Field]bool;
  var lambdaResult#0_0: int;
  var ##n#0_1: int;
  var ##f#0_1: HandleType;
  var $lambdaHeap#0_1: Heap;
  var y#0_0: int;
  var $_Frame#l0_1: [ref,Field]bool;
  var lambdaResult#0_1: int;

    // AddMethodImpl: L, Impl$$_module.__default.L
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(92,9)
    assume true;
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#6;
        assume $IsGoodHeap($lambdaHeap#6);
        assume $Heap == $lambdaHeap#6 || $HeapSucc($Heap, $lambdaHeap#6);
        havoc w#0;
        if (true)
        {
            $_Frame#l6 := (lambda $o: ref, $f: Field :: 
              $o != null && $Unbox(read($lambdaHeap#6, $o, alloc)): bool ==> false);
            assume {:id "id154"} lambdaResult#6
               == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(w#0), $Box(n'#0))): int;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#6, TInt);
        }

        assume false;
    }

    // End Comprehension WF check
    assume true;
    A#0 := Lit(AtLayer((lambda $l#78#ly#0: LayerType :: 
          Handle1((lambda $l#78#heap#0: Heap, $l#78#w#0: Box :: 
              $Box($Unbox(Apply2(TInt, TInt, TInt, $l#78#heap#0, g#0, $Box($Unbox($l#78#w#0): int), $Box(n'#0))): int)), 
            (lambda $l#78#heap#0: Heap, $l#78#w#0: Box :: $IsBox($l#78#w#0, TInt)), 
            (lambda $l#78#heap#0: Heap, $l#78#w#0: Box :: 
              SetRef_to_SetBox((lambda $l#78#o#0: ref :: false))))), 
        $LS($LZ)));
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(93,9)
    assume true;
    // Begin Comprehension WF check
    if (*)
    {
        havoc $lambdaHeap#7;
        assume $IsGoodHeap($lambdaHeap#7);
        assume $Heap == $lambdaHeap#7 || $HeapSucc($Heap, $lambdaHeap#7);
        havoc w#1;
        if (true)
        {
            $_Frame#l7 := (lambda $o: ref, $f: Field :: 
              $o != null && $Unbox(read($lambdaHeap#7, $o, alloc)): bool ==> false);
            ##n#6 := n'#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#6, Tclass._System.nat(), $lambdaHeap#7);
            // Begin Comprehension WF check
            if (*)
            {
                havoc $lambdaHeap#8;
                assume $IsGoodHeap($lambdaHeap#8);
                assume $lambdaHeap#7 == $lambdaHeap#8 || $HeapSucc($lambdaHeap#7, $lambdaHeap#8);
                havoc y#3;
                if (true)
                {
                    $_Frame#l8 := (lambda $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($lambdaHeap#8, $o, alloc)): bool ==> false);
                    assume {:id "id156"} lambdaResult#8
                       == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#7, g#0, $Box(w#1), $Box(y#3))): int;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(lambdaResult#8, TInt);
                }

                assume false;
            }

            // End Comprehension WF check
            ##f#6 := Lit(AtLayer((lambda $l#83#ly#0: LayerType :: 
                  Handle1((lambda $l#83#heap#0: Heap, $l#83#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, TInt, TInt, $l#83#heap#0, g#0, $Box(w#1), $Box($Unbox($l#83#y#0): int))): int)), 
                    (lambda $l#83#heap#0: Heap, $l#83#y#0: Box :: $IsBox($l#83#y#0, TInt)), 
                    (lambda $l#83#heap#0: Heap, $l#83#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#83#o#0: ref :: false))))), 
                $LS($LZ)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##f#6, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#7);
            assume _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#84#ly#0: LayerType :: 
                    Handle1((lambda $l#84#heap#0: Heap, $l#84#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, TInt, TInt, $l#84#heap#0, g#0, $Box(w#1), $Box($Unbox($l#84#y#0): int))): int)), 
                      (lambda $l#84#heap#0: Heap, $l#84#y#0: Box :: $IsBox($l#84#y#0, TInt)), 
                      (lambda $l#84#heap#0: Heap, $l#84#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#84#o#0: ref :: false))))), 
                  $LS($LZ))));
            assume {:id "id157"} lambdaResult#7
               == _module.__default.Sum($LS($LZ), 
                n'#0, 
                Lit(AtLayer((lambda $l#86#ly#0: LayerType :: 
                      Handle1((lambda $l#86#heap#0: Heap, $l#86#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, TInt, TInt, $l#86#heap#0, g#0, $Box(w#1), $Box($Unbox($l#86#y#0): int))): int)), 
                        (lambda $l#86#heap#0: Heap, $l#86#y#0: Box :: $IsBox($l#86#y#0, TInt)), 
                        (lambda $l#86#heap#0: Heap, $l#86#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#86#o#0: ref :: false))))), 
                    $LS($LZ))));
            assume _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#88#ly#0: LayerType :: 
                    Handle1((lambda $l#88#heap#0: Heap, $l#88#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, TInt, TInt, $l#88#heap#0, g#0, $Box(w#1), $Box($Unbox($l#88#y#0): int))): int)), 
                      (lambda $l#88#heap#0: Heap, $l#88#y#0: Box :: $IsBox($l#88#y#0, TInt)), 
                      (lambda $l#88#heap#0: Heap, $l#88#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#88#o#0: ref :: false))))), 
                  $LS($LZ))));
            // CheckWellformedWithResult: any expression
            assume $Is(lambdaResult#7, TInt);
        }

        assume false;
    }

    // End Comprehension WF check
    assume (forall $l#89#w#0: int :: 
      _module.__default.Sum#canCall(n'#0, 
        Lit(AtLayer((lambda $l#91#ly#0: LayerType :: 
              Handle1((lambda $l#91#heap#0: Heap, $l#91#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#91#heap#0, 
                        g#0, 
                        $Box($l#89#w#0), 
                        $Box($Unbox($l#91#y#0): int))): int)), 
                (lambda $l#91#heap#0: Heap, $l#91#y#0: Box :: $IsBox($l#91#y#0, TInt)), 
                (lambda $l#91#heap#0: Heap, $l#91#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#91#o#0: ref :: false))))), 
            $LS($LZ)))));
    B#0 := Lit(AtLayer((lambda $l#80#ly#0: LayerType :: 
          Handle1((lambda $l#80#heap#0: Heap, $l#80#w#0: Box :: 
              $Box(_module.__default.Sum($l#80#ly#0, 
                  n'#0, 
                  Lit(AtLayer((lambda $l#81#ly#0: LayerType :: 
                        Handle1((lambda $l#81#heap#0: Heap, $l#81#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#81#heap#0, 
                                  g#0, 
                                  $Box($Unbox($l#80#w#0): int), 
                                  $Box($Unbox($l#81#y#0): int))): int)), 
                          (lambda $l#81#heap#0: Heap, $l#81#y#0: Box :: $IsBox($l#81#y#0, TInt)), 
                          (lambda $l#81#heap#0: Heap, $l#81#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#81#o#0: ref :: false))))), 
                      $l#80#ly#0))))), 
            (lambda $l#80#heap#0: Heap, $l#80#w#0: Box :: $IsBox($l#80#w#0, TInt)), 
            (lambda $l#80#heap#0: Heap, $l#80#w#0: Box :: 
              SetRef_to_SetBox((lambda $l#80#o#0: ref :: false))))), 
        $LS($LZ)));
    // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
    // Assume Fuel Constant
    if (*)
    {
        // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_0 := n#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_0;
            assume $IsGoodHeap($lambdaHeap#0_0);
            assume $Heap == $lambdaHeap#0_0 || $HeapSucc($Heap, $lambdaHeap#0_0);
            havoc x#0_0;
            if (true)
            {
                $_Frame#l0_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_0, $o, alloc)): bool ==> false);
                ##n#0_1 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_1, Tclass._System.nat(), $lambdaHeap#0_0);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_1;
                    assume $IsGoodHeap($lambdaHeap#0_1);
                    assume $lambdaHeap#0_0 == $lambdaHeap#0_1
                       || $HeapSucc($lambdaHeap#0_0, $lambdaHeap#0_1);
                    havoc y#0_0;
                    if (true)
                    {
                        $_Frame#l0_1 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_1, $o, alloc)): bool ==> false);
                        assume {:id "id280"} lambdaResult#0_1
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0, g#0, $Box(x#0_0), $Box(y#0_0))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_1, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_1 := Lit(AtLayer((lambda $l#0_1#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1#heap#0: Heap, $l#0_1#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, TInt, TInt, $l#0_1#heap#0, g#0, $Box(x#0_0), $Box($Unbox($l#0_1#y#0): int))): int)), 
                        (lambda $l#0_1#heap#0: Heap, $l#0_1#y#0: Box :: $IsBox($l#0_1#y#0, TInt)), 
                        (lambda $l#0_1#heap#0: Heap, $l#0_1#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_1, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_0);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_2#ly#0: LayerType :: 
                        Handle1((lambda $l#0_2#heap#0: Heap, $l#0_2#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, TInt, TInt, $l#0_2#heap#0, g#0, $Box(x#0_0), $Box($Unbox($l#0_2#y#0): int))): int)), 
                          (lambda $l#0_2#heap#0: Heap, $l#0_2#y#0: Box :: $IsBox($l#0_2#y#0, TInt)), 
                          (lambda $l#0_2#heap#0: Heap, $l#0_2#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_2#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id281"} lambdaResult#0_0
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_4#ly#0: LayerType :: 
                          Handle1((lambda $l#0_4#heap#0: Heap, $l#0_4#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, TInt, TInt, $l#0_4#heap#0, g#0, $Box(x#0_0), $Box($Unbox($l#0_4#y#0): int))): int)), 
                            (lambda $l#0_4#heap#0: Heap, $l#0_4#y#0: Box :: $IsBox($l#0_4#y#0, TInt)), 
                            (lambda $l#0_4#heap#0: Heap, $l#0_4#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_4#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_6#ly#0: LayerType :: 
                        Handle1((lambda $l#0_6#heap#0: Heap, $l#0_6#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, TInt, TInt, $l#0_6#heap#0, g#0, $Box(x#0_0), $Box($Unbox($l#0_6#y#0): int))): int)), 
                          (lambda $l#0_6#heap#0: Heap, $l#0_6#y#0: Box :: $IsBox($l#0_6#y#0, TInt)), 
                          (lambda $l#0_6#heap#0: Heap, $l#0_6#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_6#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_0 := Lit(AtLayer((lambda $l#0_9#ly#0: LayerType :: 
              Handle1((lambda $l#0_9#heap#0: Heap, $l#0_9#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_9#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_10#ly#0: LayerType :: 
                            Handle1((lambda $l#0_10#heap#0: Heap, $l#0_10#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_10#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_9#x#0): int), 
                                      $Box($Unbox($l#0_10#y#0): int))): int)), 
                              (lambda $l#0_10#heap#0: Heap, $l#0_10#y#0: Box :: $IsBox($l#0_10#y#0, TInt)), 
                              (lambda $l#0_10#heap#0: Heap, $l#0_10#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_10#o#0: ref :: false))))), 
                          $l#0_9#ly#0))))), 
                (lambda $l#0_9#heap#0: Heap, $l#0_9#x#0: Box :: $IsBox($l#0_9#x#0, TInt)), 
                (lambda $l#0_9#heap#0: Heap, $l#0_9#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_9#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n#0, 
          Lit(AtLayer((lambda $l#0_11#ly#0: LayerType :: 
                Handle1((lambda $l#0_11#heap#0: Heap, $l#0_11#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_11#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_12#ly#0: LayerType :: 
                              Handle1((lambda $l#0_12#heap#0: Heap, $l#0_12#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_12#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_11#x#0): int), 
                                        $Box($Unbox($l#0_12#y#0): int))): int)), 
                                (lambda $l#0_12#heap#0: Heap, $l#0_12#y#0: Box :: $IsBox($l#0_12#y#0, TInt)), 
                                (lambda $l#0_12#heap#0: Heap, $l#0_12#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_12#o#0: ref :: false))))), 
                            $l#0_11#ly#0))))), 
                  (lambda $l#0_11#heap#0: Heap, $l#0_11#x#0: Box :: $IsBox($l#0_11#x#0, TInt)), 
                  (lambda $l#0_11#heap#0: Heap, $l#0_11#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_11#o#0: ref :: false))))), 
              $LS($LZ))));
        assume (forall $l#0_13#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_15#ly#0: LayerType :: 
                    Handle1((lambda $l#0_15#heap#0: Heap, $l#0_15#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_15#heap#0, 
                              g#0, 
                              $Box($l#0_13#x#0), 
                              $Box($Unbox($l#0_15#y#0): int))): int)), 
                      (lambda $l#0_15#heap#0: Heap, $l#0_15#y#0: Box :: $IsBox($l#0_15#y#0, TInt)), 
                      (lambda $l#0_15#heap#0: Heap, $l#0_15#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_15#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n#0, 
            Lit(AtLayer((lambda $l#0_16#ly#0: LayerType :: 
                  Handle1((lambda $l#0_16#heap#0: Heap, $l#0_16#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_16#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_17#ly#0: LayerType :: 
                                Handle1((lambda $l#0_17#heap#0: Heap, $l#0_17#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_17#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_16#x#0): int), 
                                          $Box($Unbox($l#0_17#y#0): int))): int)), 
                                  (lambda $l#0_17#heap#0: Heap, $l#0_17#y#0: Box :: $IsBox($l#0_17#y#0, TInt)), 
                                  (lambda $l#0_17#heap#0: Heap, $l#0_17#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_17#o#0: ref :: false))))), 
                              $l#0_16#ly#0))))), 
                    (lambda $l#0_16#heap#0: Heap, $l#0_16#x#0: Box :: $IsBox($l#0_16#x#0, TInt)), 
                    (lambda $l#0_16#heap#0: Heap, $l#0_16#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_16#o#0: ref :: false))))), 
                $LS($LZ))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_9_0 := n#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_9_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_9_0;
            assume $IsGoodHeap($lambdaHeap#0_9_0);
            assume $Heap == $lambdaHeap#0_9_0 || $HeapSucc($Heap, $lambdaHeap#0_9_0);
            havoc x#0_9_0;
            if (true)
            {
                $_Frame#l0_9_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_9_0, $o, alloc)): bool ==> false);
                ##n#0_9_1 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_9_1, Tclass._System.nat(), $lambdaHeap#0_9_0);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_9_1;
                    assume $IsGoodHeap($lambdaHeap#0_9_1);
                    assume $lambdaHeap#0_9_0 == $lambdaHeap#0_9_1
                       || $HeapSucc($lambdaHeap#0_9_0, $lambdaHeap#0_9_1);
                    havoc y#0_9_0;
                    if (true)
                    {
                        $_Frame#l0_9_1 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_9_1, $o, alloc)): bool ==> false);
                        assume {:id "id272"} lambdaResult#0_9_1
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_9_0, g#0, $Box(x#0_9_0), $Box(y#0_9_0))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_9_1, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_9_1 := Lit(AtLayer((lambda $l#0_9_1#ly#0: LayerType :: 
                      Handle1((lambda $l#0_9_1#heap#0: Heap, $l#0_9_1#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_9_1#heap#0, 
                                g#0, 
                                $Box(x#0_9_0), 
                                $Box($Unbox($l#0_9_1#y#0): int))): int)), 
                        (lambda $l#0_9_1#heap#0: Heap, $l#0_9_1#y#0: Box :: $IsBox($l#0_9_1#y#0, TInt)), 
                        (lambda $l#0_9_1#heap#0: Heap, $l#0_9_1#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_9_1#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_9_1, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_9_0);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_9_2#ly#0: LayerType :: 
                        Handle1((lambda $l#0_9_2#heap#0: Heap, $l#0_9_2#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_9_2#heap#0, 
                                  g#0, 
                                  $Box(x#0_9_0), 
                                  $Box($Unbox($l#0_9_2#y#0): int))): int)), 
                          (lambda $l#0_9_2#heap#0: Heap, $l#0_9_2#y#0: Box :: $IsBox($l#0_9_2#y#0, TInt)), 
                          (lambda $l#0_9_2#heap#0: Heap, $l#0_9_2#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_9_2#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id273"} lambdaResult#0_9_0
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_9_4#ly#0: LayerType :: 
                          Handle1((lambda $l#0_9_4#heap#0: Heap, $l#0_9_4#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_9_4#heap#0, 
                                    g#0, 
                                    $Box(x#0_9_0), 
                                    $Box($Unbox($l#0_9_4#y#0): int))): int)), 
                            (lambda $l#0_9_4#heap#0: Heap, $l#0_9_4#y#0: Box :: $IsBox($l#0_9_4#y#0, TInt)), 
                            (lambda $l#0_9_4#heap#0: Heap, $l#0_9_4#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_9_4#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_9_6#ly#0: LayerType :: 
                        Handle1((lambda $l#0_9_6#heap#0: Heap, $l#0_9_6#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_9_6#heap#0, 
                                  g#0, 
                                  $Box(x#0_9_0), 
                                  $Box($Unbox($l#0_9_6#y#0): int))): int)), 
                          (lambda $l#0_9_6#heap#0: Heap, $l#0_9_6#y#0: Box :: $IsBox($l#0_9_6#y#0, TInt)), 
                          (lambda $l#0_9_6#heap#0: Heap, $l#0_9_6#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_9_6#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_9_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_9_0 := Lit(AtLayer((lambda $l#0_9_9#ly#0: LayerType :: 
              Handle1((lambda $l#0_9_9#heap#0: Heap, $l#0_9_9#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_9_9#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_9_10#ly#0: LayerType :: 
                            Handle1((lambda $l#0_9_10#heap#0: Heap, $l#0_9_10#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_9_10#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_9_9#x#0): int), 
                                      $Box($Unbox($l#0_9_10#y#0): int))): int)), 
                              (lambda $l#0_9_10#heap#0: Heap, $l#0_9_10#y#0: Box :: 
                                $IsBox($l#0_9_10#y#0, TInt)), 
                              (lambda $l#0_9_10#heap#0: Heap, $l#0_9_10#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_9_10#o#0: ref :: false))))), 
                          $l#0_9_9#ly#0))))), 
                (lambda $l#0_9_9#heap#0: Heap, $l#0_9_9#x#0: Box :: $IsBox($l#0_9_9#x#0, TInt)), 
                (lambda $l#0_9_9#heap#0: Heap, $l#0_9_9#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_9_9#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_9_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n#0, 
          Lit(AtLayer((lambda $l#0_9_11#ly#0: LayerType :: 
                Handle1((lambda $l#0_9_11#heap#0: Heap, $l#0_9_11#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_9_11#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_9_12#ly#0: LayerType :: 
                              Handle1((lambda $l#0_9_12#heap#0: Heap, $l#0_9_12#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_9_12#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_9_11#x#0): int), 
                                        $Box($Unbox($l#0_9_12#y#0): int))): int)), 
                                (lambda $l#0_9_12#heap#0: Heap, $l#0_9_12#y#0: Box :: 
                                  $IsBox($l#0_9_12#y#0, TInt)), 
                                (lambda $l#0_9_12#heap#0: Heap, $l#0_9_12#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_9_12#o#0: ref :: false))))), 
                            $l#0_9_11#ly#0))))), 
                  (lambda $l#0_9_11#heap#0: Heap, $l#0_9_11#x#0: Box :: 
                    $IsBox($l#0_9_11#x#0, TInt)), 
                  (lambda $l#0_9_11#heap#0: Heap, $l#0_9_11#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_9_11#o#0: ref :: false))))), 
              $LS($LZ))));
        assume (forall $l#0_9_13#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_9_15#ly#0: LayerType :: 
                    Handle1((lambda $l#0_9_15#heap#0: Heap, $l#0_9_15#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_9_15#heap#0, 
                              g#0, 
                              $Box($l#0_9_13#x#0), 
                              $Box($Unbox($l#0_9_15#y#0): int))): int)), 
                      (lambda $l#0_9_15#heap#0: Heap, $l#0_9_15#y#0: Box :: 
                        $IsBox($l#0_9_15#y#0, TInt)), 
                      (lambda $l#0_9_15#heap#0: Heap, $l#0_9_15#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_9_15#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n#0, 
            Lit(AtLayer((lambda $l#0_9_16#ly#0: LayerType :: 
                  Handle1((lambda $l#0_9_16#heap#0: Heap, $l#0_9_16#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_9_16#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_9_17#ly#0: LayerType :: 
                                Handle1((lambda $l#0_9_17#heap#0: Heap, $l#0_9_17#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_9_17#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_9_16#x#0): int), 
                                          $Box($Unbox($l#0_9_17#y#0): int))): int)), 
                                  (lambda $l#0_9_17#heap#0: Heap, $l#0_9_17#y#0: Box :: 
                                    $IsBox($l#0_9_17#y#0, TInt)), 
                                  (lambda $l#0_9_17#heap#0: Heap, $l#0_9_17#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_9_17#o#0: ref :: false))))), 
                              $l#0_9_16#ly#0))))), 
                    (lambda $l#0_9_16#heap#0: Heap, $l#0_9_16#x#0: Box :: 
                      $IsBox($l#0_9_16#x#0, TInt)), 
                    (lambda $l#0_9_16#heap#0: Heap, $l#0_9_16#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_9_16#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(97,7)
        assume true;
        assume {:id "id274"} Lit(false);
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_9_2;
            assume $IsGoodHeap($lambdaHeap#0_9_2);
            assume $Heap == $lambdaHeap#0_9_2 || $HeapSucc($Heap, $lambdaHeap#0_9_2);
            havoc x#0_9_1;
            if (LitInt(0) <= x#0_9_1)
            {
                $_Frame#l0_9_2 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_9_2, $o, alloc)): bool ==> false);
                ##n#0_9_2 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_9_2, Tclass._System.nat(), $lambdaHeap#0_9_2);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_9_3;
                    assume $IsGoodHeap($lambdaHeap#0_9_3);
                    assume $lambdaHeap#0_9_2 == $lambdaHeap#0_9_3
                       || $HeapSucc($lambdaHeap#0_9_2, $lambdaHeap#0_9_3);
                    havoc y#0_9_1;
                    if (true)
                    {
                        $_Frame#l0_9_3 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_9_3, $o, alloc)): bool ==> false);
                        assume {:id "id275"} lambdaResult#0_9_3
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_9_2, g#0, $Box(x#0_9_1), $Box(y#0_9_1))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_9_3, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_9_2 := Lit(AtLayer((lambda $l#0_9_19#ly#0: LayerType :: 
                      Handle1((lambda $l#0_9_19#heap#0: Heap, $l#0_9_19#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_9_19#heap#0, 
                                g#0, 
                                $Box(x#0_9_1), 
                                $Box($Unbox($l#0_9_19#y#0): int))): int)), 
                        (lambda $l#0_9_19#heap#0: Heap, $l#0_9_19#y#0: Box :: 
                          $IsBox($l#0_9_19#y#0, TInt)), 
                        (lambda $l#0_9_19#heap#0: Heap, $l#0_9_19#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_9_19#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_9_2, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_9_2);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_9_20#ly#0: LayerType :: 
                        Handle1((lambda $l#0_9_20#heap#0: Heap, $l#0_9_20#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_9_20#heap#0, 
                                  g#0, 
                                  $Box(x#0_9_1), 
                                  $Box($Unbox($l#0_9_20#y#0): int))): int)), 
                          (lambda $l#0_9_20#heap#0: Heap, $l#0_9_20#y#0: Box :: 
                            $IsBox($l#0_9_20#y#0, TInt)), 
                          (lambda $l#0_9_20#heap#0: Heap, $l#0_9_20#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_9_20#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id276"} lambdaResult#0_9_2
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_9_22#ly#0: LayerType :: 
                          Handle1((lambda $l#0_9_22#heap#0: Heap, $l#0_9_22#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_9_22#heap#0, 
                                    g#0, 
                                    $Box(x#0_9_1), 
                                    $Box($Unbox($l#0_9_22#y#0): int))): int)), 
                            (lambda $l#0_9_22#heap#0: Heap, $l#0_9_22#y#0: Box :: 
                              $IsBox($l#0_9_22#y#0, TInt)), 
                            (lambda $l#0_9_22#heap#0: Heap, $l#0_9_22#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_9_22#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_9_24#ly#0: LayerType :: 
                        Handle1((lambda $l#0_9_24#heap#0: Heap, $l#0_9_24#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_9_24#heap#0, 
                                  g#0, 
                                  $Box(x#0_9_1), 
                                  $Box($Unbox($l#0_9_24#y#0): int))): int)), 
                          (lambda $l#0_9_24#heap#0: Heap, $l#0_9_24#y#0: Box :: 
                            $IsBox($l#0_9_24#y#0, TInt)), 
                          (lambda $l#0_9_24#heap#0: Heap, $l#0_9_24#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_9_24#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_9_2, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##n#0_9_3 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_9_3, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_9_4;
            assume $IsGoodHeap($lambdaHeap#0_9_4);
            assume $Heap == $lambdaHeap#0_9_4 || $HeapSucc($Heap, $lambdaHeap#0_9_4);
            havoc x#0_9_2;
            if (true)
            {
                $_Frame#l0_9_4 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_9_4, $o, alloc)): bool ==> false);
                ##n#0_9_4 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_9_4, Tclass._System.nat(), $lambdaHeap#0_9_4);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_9_5;
                    assume $IsGoodHeap($lambdaHeap#0_9_5);
                    assume $lambdaHeap#0_9_4 == $lambdaHeap#0_9_5
                       || $HeapSucc($lambdaHeap#0_9_4, $lambdaHeap#0_9_5);
                    havoc y#0_9_2;
                    if (true)
                    {
                        $_Frame#l0_9_5 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_9_5, $o, alloc)): bool ==> false);
                        assume {:id "id277"} lambdaResult#0_9_5
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_9_4, g#0, $Box(x#0_9_2), $Box(y#0_9_2))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_9_5, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_9_4 := Lit(AtLayer((lambda $l#0_9_28#ly#0: LayerType :: 
                      Handle1((lambda $l#0_9_28#heap#0: Heap, $l#0_9_28#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_9_28#heap#0, 
                                g#0, 
                                $Box(x#0_9_2), 
                                $Box($Unbox($l#0_9_28#y#0): int))): int)), 
                        (lambda $l#0_9_28#heap#0: Heap, $l#0_9_28#y#0: Box :: 
                          $IsBox($l#0_9_28#y#0, TInt)), 
                        (lambda $l#0_9_28#heap#0: Heap, $l#0_9_28#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_9_28#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_9_4, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_9_4);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_9_29#ly#0: LayerType :: 
                        Handle1((lambda $l#0_9_29#heap#0: Heap, $l#0_9_29#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_9_29#heap#0, 
                                  g#0, 
                                  $Box(x#0_9_2), 
                                  $Box($Unbox($l#0_9_29#y#0): int))): int)), 
                          (lambda $l#0_9_29#heap#0: Heap, $l#0_9_29#y#0: Box :: 
                            $IsBox($l#0_9_29#y#0, TInt)), 
                          (lambda $l#0_9_29#heap#0: Heap, $l#0_9_29#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_9_29#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id278"} lambdaResult#0_9_4
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_9_31#ly#0: LayerType :: 
                          Handle1((lambda $l#0_9_31#heap#0: Heap, $l#0_9_31#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_9_31#heap#0, 
                                    g#0, 
                                    $Box(x#0_9_2), 
                                    $Box($Unbox($l#0_9_31#y#0): int))): int)), 
                            (lambda $l#0_9_31#heap#0: Heap, $l#0_9_31#y#0: Box :: 
                              $IsBox($l#0_9_31#y#0, TInt)), 
                            (lambda $l#0_9_31#heap#0: Heap, $l#0_9_31#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_9_31#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_9_33#ly#0: LayerType :: 
                        Handle1((lambda $l#0_9_33#heap#0: Heap, $l#0_9_33#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_9_33#heap#0, 
                                  g#0, 
                                  $Box(x#0_9_2), 
                                  $Box($Unbox($l#0_9_33#y#0): int))): int)), 
                          (lambda $l#0_9_33#heap#0: Heap, $l#0_9_33#y#0: Box :: 
                            $IsBox($l#0_9_33#y#0, TInt)), 
                          (lambda $l#0_9_33#heap#0: Heap, $l#0_9_33#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_9_33#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_9_4, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_9_3 := Lit(AtLayer((lambda $l#0_9_36#ly#0: LayerType :: 
              Handle1((lambda $l#0_9_36#heap#0: Heap, $l#0_9_36#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_9_36#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_9_37#ly#0: LayerType :: 
                            Handle1((lambda $l#0_9_37#heap#0: Heap, $l#0_9_37#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_9_37#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_9_36#x#0): int), 
                                      $Box($Unbox($l#0_9_37#y#0): int))): int)), 
                              (lambda $l#0_9_37#heap#0: Heap, $l#0_9_37#y#0: Box :: 
                                $IsBox($l#0_9_37#y#0, TInt)), 
                              (lambda $l#0_9_37#heap#0: Heap, $l#0_9_37#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_9_37#o#0: ref :: false))))), 
                          $l#0_9_36#ly#0))))), 
                (lambda $l#0_9_36#heap#0: Heap, $l#0_9_36#x#0: Box :: 
                  $IsBox($l#0_9_36#x#0, TInt)), 
                (lambda $l#0_9_36#heap#0: Heap, $l#0_9_36#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_9_36#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_9_3, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_9_38#ly#0: LayerType :: 
                Handle1((lambda $l#0_9_38#heap#0: Heap, $l#0_9_38#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_9_38#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_9_39#ly#0: LayerType :: 
                              Handle1((lambda $l#0_9_39#heap#0: Heap, $l#0_9_39#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_9_39#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_9_38#x#0): int), 
                                        $Box($Unbox($l#0_9_39#y#0): int))): int)), 
                                (lambda $l#0_9_39#heap#0: Heap, $l#0_9_39#y#0: Box :: 
                                  $IsBox($l#0_9_39#y#0, TInt)), 
                                (lambda $l#0_9_39#heap#0: Heap, $l#0_9_39#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_9_39#o#0: ref :: false))))), 
                            $l#0_9_38#ly#0))))), 
                  (lambda $l#0_9_38#heap#0: Heap, $l#0_9_38#x#0: Box :: 
                    $IsBox($l#0_9_38#x#0, TInt)), 
                  (lambda $l#0_9_38#heap#0: Heap, $l#0_9_38#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_9_38#o#0: ref :: false))))), 
              $LS($LZ))));
        assume (forall $l#0_9_40#x#0: int :: 
            LitInt(0) <= $l#0_9_40#x#0
               ==> _module.__default.Sum#canCall(n#0, 
                Lit(AtLayer((lambda $l#0_9_42#ly#0: LayerType :: 
                      Handle1((lambda $l#0_9_42#heap#0: Heap, $l#0_9_42#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_9_42#heap#0, 
                                g#0, 
                                $Box($l#0_9_40#x#0), 
                                $Box($Unbox($l#0_9_42#y#0): int))): int)), 
                        (lambda $l#0_9_42#heap#0: Heap, $l#0_9_42#y#0: Box :: 
                          $IsBox($l#0_9_42#y#0, TInt)), 
                        (lambda $l#0_9_42#heap#0: Heap, $l#0_9_42#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_9_42#o#0: ref :: false))))), 
                    $LS($LZ)))))
           && 
          (forall $l#0_9_43#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_9_45#ly#0: LayerType :: 
                    Handle1((lambda $l#0_9_45#heap#0: Heap, $l#0_9_45#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_9_45#heap#0, 
                              g#0, 
                              $Box($l#0_9_43#x#0), 
                              $Box($Unbox($l#0_9_45#y#0): int))): int)), 
                      (lambda $l#0_9_45#heap#0: Heap, $l#0_9_45#y#0: Box :: 
                        $IsBox($l#0_9_45#y#0, TInt)), 
                      (lambda $l#0_9_45#heap#0: Heap, $l#0_9_45#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_9_45#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_9_46#ly#0: LayerType :: 
                  Handle1((lambda $l#0_9_46#heap#0: Heap, $l#0_9_46#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_9_46#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_9_47#ly#0: LayerType :: 
                                Handle1((lambda $l#0_9_47#heap#0: Heap, $l#0_9_47#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_9_47#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_9_46#x#0): int), 
                                          $Box($Unbox($l#0_9_47#y#0): int))): int)), 
                                  (lambda $l#0_9_47#heap#0: Heap, $l#0_9_47#y#0: Box :: 
                                    $IsBox($l#0_9_47#y#0, TInt)), 
                                  (lambda $l#0_9_47#heap#0: Heap, $l#0_9_47#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_9_47#o#0: ref :: false))))), 
                              $l#0_9_46#ly#0))))), 
                    (lambda $l#0_9_46#heap#0: Heap, $l#0_9_46#x#0: Box :: 
                      $IsBox($l#0_9_46#x#0, TInt)), 
                    (lambda $l#0_9_46#heap#0: Heap, $l#0_9_46#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_9_46#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id279"} {:subsumption 0} _module.__default.Sum($LS($LS($LZ)), 
            n#0, 
            Lit(AtLayer((lambda $l#0_9_48#ly#0: LayerType :: 
                  Handle1((lambda $l#0_9_48#heap#0: Heap, $l#0_9_48#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_9_48#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_9_49#ly#0: LayerType :: 
                                Handle1((lambda $l#0_9_49#heap#0: Heap, $l#0_9_49#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_9_49#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_9_48#x#0): int), 
                                          $Box($Unbox($l#0_9_49#y#0): int))): int)), 
                                  (lambda $l#0_9_49#heap#0: Heap, $l#0_9_49#y#0: Box :: 
                                    $IsBox($l#0_9_49#y#0, TInt)), 
                                  (lambda $l#0_9_49#heap#0: Heap, $l#0_9_49#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_9_49#o#0: ref :: false))))), 
                              $l#0_9_48#ly#0))))), 
                    (lambda $l#0_9_48#heap#0: Heap, $l#0_9_48#x#0: Box :: 
                      $IsBox($l#0_9_48#x#0, TInt)), 
                    (lambda $l#0_9_48#heap#0: Heap, $l#0_9_48#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_9_48#o#0: ref :: false))))), 
                $LS($LZ))))
           == $Unbox(Apply1(Tclass._System.nat(), 
                TInt, 
                $Heap, 
                Lit(AtLayer((lambda $l#0_9_50#ly#0: LayerType :: 
                      Handle1((lambda $l#0_9_50#heap#0: Heap, $l#0_9_50#x#0: Box :: 
                          $Box(_module.__default.Sum($l#0_9_50#ly#0, 
                              n#0, 
                              Lit(AtLayer((lambda $l#0_9_51#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_9_51#heap#0: Heap, $l#0_9_51#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_9_51#heap#0, 
                                              g#0, 
                                              $Box($Unbox($l#0_9_50#x#0): int), 
                                              $Box($Unbox($l#0_9_51#y#0): int))): int)), 
                                      (lambda $l#0_9_51#heap#0: Heap, $l#0_9_51#y#0: Box :: 
                                        $IsBox($l#0_9_51#y#0, TInt)), 
                                      (lambda $l#0_9_51#heap#0: Heap, $l#0_9_51#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_9_51#o#0: ref :: false))))), 
                                  $l#0_9_50#ly#0))))), 
                        (lambda $l#0_9_50#heap#0: Heap, $l#0_9_50#x#0: Box :: 
                          $IsBox($l#0_9_50#x#0, Tclass._System.nat())), 
                        (lambda $l#0_9_50#heap#0: Heap, $l#0_9_50#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_9_50#o#0: ref :: false))))), 
                    $LS($LZ))), 
                $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_9_52#ly#0: LayerType :: 
                    Handle1((lambda $l#0_9_52#heap#0: Heap, $l#0_9_52#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_9_52#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_9_53#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_9_53#heap#0: Heap, $l#0_9_53#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_9_53#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_9_52#x#0): int), 
                                            $Box($Unbox($l#0_9_53#y#0): int))): int)), 
                                    (lambda $l#0_9_53#heap#0: Heap, $l#0_9_53#y#0: Box :: 
                                      $IsBox($l#0_9_53#y#0, TInt)), 
                                    (lambda $l#0_9_53#heap#0: Heap, $l#0_9_53#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_9_53#o#0: ref :: false))))), 
                                $l#0_9_52#ly#0))))), 
                      (lambda $l#0_9_52#heap#0: Heap, $l#0_9_52#x#0: Box :: 
                        $IsBox($l#0_9_52#x#0, TInt)), 
                      (lambda $l#0_9_52#heap#0: Heap, $l#0_9_52#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_9_52#o#0: ref :: false))))), 
                  $LS($LZ))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_8_0;
            assume $IsGoodHeap($lambdaHeap#0_8_0);
            assume $Heap == $lambdaHeap#0_8_0 || $HeapSucc($Heap, $lambdaHeap#0_8_0);
            havoc x#0_8_0;
            if (LitInt(0) <= x#0_8_0)
            {
                $_Frame#l0_8_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_8_0, $o, alloc)): bool ==> false);
                ##n#0_8_0 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_8_0, Tclass._System.nat(), $lambdaHeap#0_8_0);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_8_1;
                    assume $IsGoodHeap($lambdaHeap#0_8_1);
                    assume $lambdaHeap#0_8_0 == $lambdaHeap#0_8_1
                       || $HeapSucc($lambdaHeap#0_8_0, $lambdaHeap#0_8_1);
                    havoc y#0_8_0;
                    if (true)
                    {
                        $_Frame#l0_8_1 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_8_1, $o, alloc)): bool ==> false);
                        assume {:id "id263"} lambdaResult#0_8_1
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_8_0, g#0, $Box(x#0_8_0), $Box(y#0_8_0))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_8_1, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_8_0 := Lit(AtLayer((lambda $l#0_8_1#ly#0: LayerType :: 
                      Handle1((lambda $l#0_8_1#heap#0: Heap, $l#0_8_1#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_8_1#heap#0, 
                                g#0, 
                                $Box(x#0_8_0), 
                                $Box($Unbox($l#0_8_1#y#0): int))): int)), 
                        (lambda $l#0_8_1#heap#0: Heap, $l#0_8_1#y#0: Box :: $IsBox($l#0_8_1#y#0, TInt)), 
                        (lambda $l#0_8_1#heap#0: Heap, $l#0_8_1#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_8_1#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_8_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_8_0);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_8_2#ly#0: LayerType :: 
                        Handle1((lambda $l#0_8_2#heap#0: Heap, $l#0_8_2#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_8_2#heap#0, 
                                  g#0, 
                                  $Box(x#0_8_0), 
                                  $Box($Unbox($l#0_8_2#y#0): int))): int)), 
                          (lambda $l#0_8_2#heap#0: Heap, $l#0_8_2#y#0: Box :: $IsBox($l#0_8_2#y#0, TInt)), 
                          (lambda $l#0_8_2#heap#0: Heap, $l#0_8_2#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_8_2#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id264"} lambdaResult#0_8_0
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_8_4#ly#0: LayerType :: 
                          Handle1((lambda $l#0_8_4#heap#0: Heap, $l#0_8_4#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_8_4#heap#0, 
                                    g#0, 
                                    $Box(x#0_8_0), 
                                    $Box($Unbox($l#0_8_4#y#0): int))): int)), 
                            (lambda $l#0_8_4#heap#0: Heap, $l#0_8_4#y#0: Box :: $IsBox($l#0_8_4#y#0, TInt)), 
                            (lambda $l#0_8_4#heap#0: Heap, $l#0_8_4#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_8_4#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_8_6#ly#0: LayerType :: 
                        Handle1((lambda $l#0_8_6#heap#0: Heap, $l#0_8_6#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_8_6#heap#0, 
                                  g#0, 
                                  $Box(x#0_8_0), 
                                  $Box($Unbox($l#0_8_6#y#0): int))): int)), 
                          (lambda $l#0_8_6#heap#0: Heap, $l#0_8_6#y#0: Box :: $IsBox($l#0_8_6#y#0, TInt)), 
                          (lambda $l#0_8_6#heap#0: Heap, $l#0_8_6#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_8_6#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_8_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##n#0_8_1 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_8_1, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_8_2;
            assume $IsGoodHeap($lambdaHeap#0_8_2);
            assume $Heap == $lambdaHeap#0_8_2 || $HeapSucc($Heap, $lambdaHeap#0_8_2);
            havoc x#0_8_1;
            if (true)
            {
                $_Frame#l0_8_2 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_8_2, $o, alloc)): bool ==> false);
                ##n#0_8_2 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_8_2, Tclass._System.nat(), $lambdaHeap#0_8_2);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_8_3;
                    assume $IsGoodHeap($lambdaHeap#0_8_3);
                    assume $lambdaHeap#0_8_2 == $lambdaHeap#0_8_3
                       || $HeapSucc($lambdaHeap#0_8_2, $lambdaHeap#0_8_3);
                    havoc y#0_8_1;
                    if (true)
                    {
                        $_Frame#l0_8_3 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_8_3, $o, alloc)): bool ==> false);
                        assume {:id "id265"} lambdaResult#0_8_3
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_8_2, g#0, $Box(x#0_8_1), $Box(y#0_8_1))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_8_3, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_8_2 := Lit(AtLayer((lambda $l#0_8_10#ly#0: LayerType :: 
                      Handle1((lambda $l#0_8_10#heap#0: Heap, $l#0_8_10#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_8_10#heap#0, 
                                g#0, 
                                $Box(x#0_8_1), 
                                $Box($Unbox($l#0_8_10#y#0): int))): int)), 
                        (lambda $l#0_8_10#heap#0: Heap, $l#0_8_10#y#0: Box :: 
                          $IsBox($l#0_8_10#y#0, TInt)), 
                        (lambda $l#0_8_10#heap#0: Heap, $l#0_8_10#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_8_10#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_8_2, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_8_2);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_8_11#ly#0: LayerType :: 
                        Handle1((lambda $l#0_8_11#heap#0: Heap, $l#0_8_11#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_8_11#heap#0, 
                                  g#0, 
                                  $Box(x#0_8_1), 
                                  $Box($Unbox($l#0_8_11#y#0): int))): int)), 
                          (lambda $l#0_8_11#heap#0: Heap, $l#0_8_11#y#0: Box :: 
                            $IsBox($l#0_8_11#y#0, TInt)), 
                          (lambda $l#0_8_11#heap#0: Heap, $l#0_8_11#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_8_11#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id266"} lambdaResult#0_8_2
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_8_13#ly#0: LayerType :: 
                          Handle1((lambda $l#0_8_13#heap#0: Heap, $l#0_8_13#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_8_13#heap#0, 
                                    g#0, 
                                    $Box(x#0_8_1), 
                                    $Box($Unbox($l#0_8_13#y#0): int))): int)), 
                            (lambda $l#0_8_13#heap#0: Heap, $l#0_8_13#y#0: Box :: 
                              $IsBox($l#0_8_13#y#0, TInt)), 
                            (lambda $l#0_8_13#heap#0: Heap, $l#0_8_13#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_8_13#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_8_15#ly#0: LayerType :: 
                        Handle1((lambda $l#0_8_15#heap#0: Heap, $l#0_8_15#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_8_15#heap#0, 
                                  g#0, 
                                  $Box(x#0_8_1), 
                                  $Box($Unbox($l#0_8_15#y#0): int))): int)), 
                          (lambda $l#0_8_15#heap#0: Heap, $l#0_8_15#y#0: Box :: 
                            $IsBox($l#0_8_15#y#0, TInt)), 
                          (lambda $l#0_8_15#heap#0: Heap, $l#0_8_15#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_8_15#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_8_2, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_8_1 := Lit(AtLayer((lambda $l#0_8_18#ly#0: LayerType :: 
              Handle1((lambda $l#0_8_18#heap#0: Heap, $l#0_8_18#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_8_18#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_8_19#ly#0: LayerType :: 
                            Handle1((lambda $l#0_8_19#heap#0: Heap, $l#0_8_19#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_8_19#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_8_18#x#0): int), 
                                      $Box($Unbox($l#0_8_19#y#0): int))): int)), 
                              (lambda $l#0_8_19#heap#0: Heap, $l#0_8_19#y#0: Box :: 
                                $IsBox($l#0_8_19#y#0, TInt)), 
                              (lambda $l#0_8_19#heap#0: Heap, $l#0_8_19#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_8_19#o#0: ref :: false))))), 
                          $l#0_8_18#ly#0))))), 
                (lambda $l#0_8_18#heap#0: Heap, $l#0_8_18#x#0: Box :: 
                  $IsBox($l#0_8_18#x#0, TInt)), 
                (lambda $l#0_8_18#heap#0: Heap, $l#0_8_18#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_8_18#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_8_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_8_20#ly#0: LayerType :: 
                Handle1((lambda $l#0_8_20#heap#0: Heap, $l#0_8_20#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_8_20#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_8_21#ly#0: LayerType :: 
                              Handle1((lambda $l#0_8_21#heap#0: Heap, $l#0_8_21#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_8_21#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_8_20#x#0): int), 
                                        $Box($Unbox($l#0_8_21#y#0): int))): int)), 
                                (lambda $l#0_8_21#heap#0: Heap, $l#0_8_21#y#0: Box :: 
                                  $IsBox($l#0_8_21#y#0, TInt)), 
                                (lambda $l#0_8_21#heap#0: Heap, $l#0_8_21#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_8_21#o#0: ref :: false))))), 
                            $l#0_8_20#ly#0))))), 
                  (lambda $l#0_8_20#heap#0: Heap, $l#0_8_20#x#0: Box :: 
                    $IsBox($l#0_8_20#x#0, TInt)), 
                  (lambda $l#0_8_20#heap#0: Heap, $l#0_8_20#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_8_20#o#0: ref :: false))))), 
              $LS($LZ))));
        assume (forall $l#0_8_22#x#0: int :: 
            LitInt(0) <= $l#0_8_22#x#0
               ==> _module.__default.Sum#canCall(n#0, 
                Lit(AtLayer((lambda $l#0_8_24#ly#0: LayerType :: 
                      Handle1((lambda $l#0_8_24#heap#0: Heap, $l#0_8_24#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_8_24#heap#0, 
                                g#0, 
                                $Box($l#0_8_22#x#0), 
                                $Box($Unbox($l#0_8_24#y#0): int))): int)), 
                        (lambda $l#0_8_24#heap#0: Heap, $l#0_8_24#y#0: Box :: 
                          $IsBox($l#0_8_24#y#0, TInt)), 
                        (lambda $l#0_8_24#heap#0: Heap, $l#0_8_24#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_8_24#o#0: ref :: false))))), 
                    $LS($LZ)))))
           && 
          (forall $l#0_8_25#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_8_27#ly#0: LayerType :: 
                    Handle1((lambda $l#0_8_27#heap#0: Heap, $l#0_8_27#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_8_27#heap#0, 
                              g#0, 
                              $Box($l#0_8_25#x#0), 
                              $Box($Unbox($l#0_8_27#y#0): int))): int)), 
                      (lambda $l#0_8_27#heap#0: Heap, $l#0_8_27#y#0: Box :: 
                        $IsBox($l#0_8_27#y#0, TInt)), 
                      (lambda $l#0_8_27#heap#0: Heap, $l#0_8_27#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_8_27#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_8_28#ly#0: LayerType :: 
                  Handle1((lambda $l#0_8_28#heap#0: Heap, $l#0_8_28#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_8_28#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_8_29#ly#0: LayerType :: 
                                Handle1((lambda $l#0_8_29#heap#0: Heap, $l#0_8_29#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_8_29#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_8_28#x#0): int), 
                                          $Box($Unbox($l#0_8_29#y#0): int))): int)), 
                                  (lambda $l#0_8_29#heap#0: Heap, $l#0_8_29#y#0: Box :: 
                                    $IsBox($l#0_8_29#y#0, TInt)), 
                                  (lambda $l#0_8_29#heap#0: Heap, $l#0_8_29#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_8_29#o#0: ref :: false))))), 
                              $l#0_8_28#ly#0))))), 
                    (lambda $l#0_8_28#heap#0: Heap, $l#0_8_28#x#0: Box :: 
                      $IsBox($l#0_8_28#x#0, TInt)), 
                    (lambda $l#0_8_28#heap#0: Heap, $l#0_8_28#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_8_28#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(99,21)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        n##0_8_0 := n#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        g##0_8_0 := g#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        i##0_8_0 := n'#0;
        call {:id "id267"} Call$$_module.__default.BetaReduction0(n##0_8_0, g##0_8_0, i##0_8_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_8_3 := n#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_8_3, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_8_4;
            assume $IsGoodHeap($lambdaHeap#0_8_4);
            assume $Heap == $lambdaHeap#0_8_4 || $HeapSucc($Heap, $lambdaHeap#0_8_4);
            havoc y#0_8_2;
            if (true)
            {
                $_Frame#l0_8_4 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_8_4, $o, alloc)): bool ==> false);
                assume {:id "id268"} lambdaResult#0_8_4
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_8_2))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_8_4, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_8_3 := Lit(AtLayer((lambda $l#0_8_31#ly#0: LayerType :: 
              Handle1((lambda $l#0_8_31#heap#0: Heap, $l#0_8_31#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_8_31#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_8_31#y#0): int))): int)), 
                (lambda $l#0_8_31#heap#0: Heap, $l#0_8_31#y#0: Box :: 
                  $IsBox($l#0_8_31#y#0, TInt)), 
                (lambda $l#0_8_31#heap#0: Heap, $l#0_8_31#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_8_31#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_8_3, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n#0, 
          Lit(AtLayer((lambda $l#0_8_32#ly#0: LayerType :: 
                Handle1((lambda $l#0_8_32#heap#0: Heap, $l#0_8_32#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_8_32#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_8_32#y#0): int))): int)), 
                  (lambda $l#0_8_32#heap#0: Heap, $l#0_8_32#y#0: Box :: 
                    $IsBox($l#0_8_32#y#0, TInt)), 
                  (lambda $l#0_8_32#heap#0: Heap, $l#0_8_32#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_8_32#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_8_4 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_8_4, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_8_5;
            assume $IsGoodHeap($lambdaHeap#0_8_5);
            assume $Heap == $lambdaHeap#0_8_5 || $HeapSucc($Heap, $lambdaHeap#0_8_5);
            havoc x#0_8_2;
            if (true)
            {
                $_Frame#l0_8_5 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_8_5, $o, alloc)): bool ==> false);
                ##n#0_8_5 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_8_5, Tclass._System.nat(), $lambdaHeap#0_8_5);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_8_6;
                    assume $IsGoodHeap($lambdaHeap#0_8_6);
                    assume $lambdaHeap#0_8_5 == $lambdaHeap#0_8_6
                       || $HeapSucc($lambdaHeap#0_8_5, $lambdaHeap#0_8_6);
                    havoc y#0_8_3;
                    if (true)
                    {
                        $_Frame#l0_8_6 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_8_6, $o, alloc)): bool ==> false);
                        assume {:id "id269"} lambdaResult#0_8_6
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_8_5, g#0, $Box(x#0_8_2), $Box(y#0_8_3))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_8_6, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_8_5 := Lit(AtLayer((lambda $l#0_8_34#ly#0: LayerType :: 
                      Handle1((lambda $l#0_8_34#heap#0: Heap, $l#0_8_34#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_8_34#heap#0, 
                                g#0, 
                                $Box(x#0_8_2), 
                                $Box($Unbox($l#0_8_34#y#0): int))): int)), 
                        (lambda $l#0_8_34#heap#0: Heap, $l#0_8_34#y#0: Box :: 
                          $IsBox($l#0_8_34#y#0, TInt)), 
                        (lambda $l#0_8_34#heap#0: Heap, $l#0_8_34#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_8_34#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_8_5, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_8_5);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_8_35#ly#0: LayerType :: 
                        Handle1((lambda $l#0_8_35#heap#0: Heap, $l#0_8_35#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_8_35#heap#0, 
                                  g#0, 
                                  $Box(x#0_8_2), 
                                  $Box($Unbox($l#0_8_35#y#0): int))): int)), 
                          (lambda $l#0_8_35#heap#0: Heap, $l#0_8_35#y#0: Box :: 
                            $IsBox($l#0_8_35#y#0, TInt)), 
                          (lambda $l#0_8_35#heap#0: Heap, $l#0_8_35#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_8_35#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id270"} lambdaResult#0_8_5
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_8_37#ly#0: LayerType :: 
                          Handle1((lambda $l#0_8_37#heap#0: Heap, $l#0_8_37#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_8_37#heap#0, 
                                    g#0, 
                                    $Box(x#0_8_2), 
                                    $Box($Unbox($l#0_8_37#y#0): int))): int)), 
                            (lambda $l#0_8_37#heap#0: Heap, $l#0_8_37#y#0: Box :: 
                              $IsBox($l#0_8_37#y#0, TInt)), 
                            (lambda $l#0_8_37#heap#0: Heap, $l#0_8_37#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_8_37#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_8_39#ly#0: LayerType :: 
                        Handle1((lambda $l#0_8_39#heap#0: Heap, $l#0_8_39#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_8_39#heap#0, 
                                  g#0, 
                                  $Box(x#0_8_2), 
                                  $Box($Unbox($l#0_8_39#y#0): int))): int)), 
                          (lambda $l#0_8_39#heap#0: Heap, $l#0_8_39#y#0: Box :: 
                            $IsBox($l#0_8_39#y#0, TInt)), 
                          (lambda $l#0_8_39#heap#0: Heap, $l#0_8_39#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_8_39#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_8_5, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_8_4 := Lit(AtLayer((lambda $l#0_8_42#ly#0: LayerType :: 
              Handle1((lambda $l#0_8_42#heap#0: Heap, $l#0_8_42#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_8_42#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_8_43#ly#0: LayerType :: 
                            Handle1((lambda $l#0_8_43#heap#0: Heap, $l#0_8_43#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_8_43#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_8_42#x#0): int), 
                                      $Box($Unbox($l#0_8_43#y#0): int))): int)), 
                              (lambda $l#0_8_43#heap#0: Heap, $l#0_8_43#y#0: Box :: 
                                $IsBox($l#0_8_43#y#0, TInt)), 
                              (lambda $l#0_8_43#heap#0: Heap, $l#0_8_43#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_8_43#o#0: ref :: false))))), 
                          $l#0_8_42#ly#0))))), 
                (lambda $l#0_8_42#heap#0: Heap, $l#0_8_42#x#0: Box :: 
                  $IsBox($l#0_8_42#x#0, TInt)), 
                (lambda $l#0_8_42#heap#0: Heap, $l#0_8_42#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_8_42#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_8_4, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_8_44#ly#0: LayerType :: 
                Handle1((lambda $l#0_8_44#heap#0: Heap, $l#0_8_44#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_8_44#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_8_45#ly#0: LayerType :: 
                              Handle1((lambda $l#0_8_45#heap#0: Heap, $l#0_8_45#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_8_45#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_8_44#x#0): int), 
                                        $Box($Unbox($l#0_8_45#y#0): int))): int)), 
                                (lambda $l#0_8_45#heap#0: Heap, $l#0_8_45#y#0: Box :: 
                                  $IsBox($l#0_8_45#y#0, TInt)), 
                                (lambda $l#0_8_45#heap#0: Heap, $l#0_8_45#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_8_45#o#0: ref :: false))))), 
                            $l#0_8_44#ly#0))))), 
                  (lambda $l#0_8_44#heap#0: Heap, $l#0_8_44#x#0: Box :: 
                    $IsBox($l#0_8_44#x#0, TInt)), 
                  (lambda $l#0_8_44#heap#0: Heap, $l#0_8_44#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_8_44#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n#0, 
            Lit(AtLayer((lambda $l#0_8_47#ly#0: LayerType :: 
                  Handle1((lambda $l#0_8_47#heap#0: Heap, $l#0_8_47#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_8_47#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_8_47#y#0): int))): int)), 
                    (lambda $l#0_8_47#heap#0: Heap, $l#0_8_47#y#0: Box :: 
                      $IsBox($l#0_8_47#y#0, TInt)), 
                    (lambda $l#0_8_47#heap#0: Heap, $l#0_8_47#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_8_47#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_8_48#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_8_50#ly#0: LayerType :: 
                    Handle1((lambda $l#0_8_50#heap#0: Heap, $l#0_8_50#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_8_50#heap#0, 
                              g#0, 
                              $Box($l#0_8_48#x#0), 
                              $Box($Unbox($l#0_8_50#y#0): int))): int)), 
                      (lambda $l#0_8_50#heap#0: Heap, $l#0_8_50#y#0: Box :: 
                        $IsBox($l#0_8_50#y#0, TInt)), 
                      (lambda $l#0_8_50#heap#0: Heap, $l#0_8_50#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_8_50#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_8_51#ly#0: LayerType :: 
                  Handle1((lambda $l#0_8_51#heap#0: Heap, $l#0_8_51#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_8_51#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_8_52#ly#0: LayerType :: 
                                Handle1((lambda $l#0_8_52#heap#0: Heap, $l#0_8_52#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_8_52#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_8_51#x#0): int), 
                                          $Box($Unbox($l#0_8_52#y#0): int))): int)), 
                                  (lambda $l#0_8_52#heap#0: Heap, $l#0_8_52#y#0: Box :: 
                                    $IsBox($l#0_8_52#y#0, TInt)), 
                                  (lambda $l#0_8_52#heap#0: Heap, $l#0_8_52#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_8_52#o#0: ref :: false))))), 
                              $l#0_8_51#ly#0))))), 
                    (lambda $l#0_8_51#heap#0: Heap, $l#0_8_51#x#0: Box :: 
                      $IsBox($l#0_8_51#x#0, TInt)), 
                    (lambda $l#0_8_51#heap#0: Heap, $l#0_8_51#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_8_51#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id271"} {:subsumption 0} $Unbox(Apply1(Tclass._System.nat(), 
                TInt, 
                $Heap, 
                Lit(AtLayer((lambda $l#0_8_53#ly#0: LayerType :: 
                      Handle1((lambda $l#0_8_53#heap#0: Heap, $l#0_8_53#x#0: Box :: 
                          $Box(_module.__default.Sum($l#0_8_53#ly#0, 
                              n#0, 
                              Lit(AtLayer((lambda $l#0_8_54#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_8_54#heap#0: Heap, $l#0_8_54#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_8_54#heap#0, 
                                              g#0, 
                                              $Box($Unbox($l#0_8_53#x#0): int), 
                                              $Box($Unbox($l#0_8_54#y#0): int))): int)), 
                                      (lambda $l#0_8_54#heap#0: Heap, $l#0_8_54#y#0: Box :: 
                                        $IsBox($l#0_8_54#y#0, TInt)), 
                                      (lambda $l#0_8_54#heap#0: Heap, $l#0_8_54#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_8_54#o#0: ref :: false))))), 
                                  $l#0_8_53#ly#0))))), 
                        (lambda $l#0_8_53#heap#0: Heap, $l#0_8_53#x#0: Box :: 
                          $IsBox($l#0_8_53#x#0, Tclass._System.nat())), 
                        (lambda $l#0_8_53#heap#0: Heap, $l#0_8_53#x#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_8_53#o#0: ref :: false))))), 
                    $LS($LZ))), 
                $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_8_55#ly#0: LayerType :: 
                    Handle1((lambda $l#0_8_55#heap#0: Heap, $l#0_8_55#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_8_55#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_8_56#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_8_56#heap#0: Heap, $l#0_8_56#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_8_56#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_8_55#x#0): int), 
                                            $Box($Unbox($l#0_8_56#y#0): int))): int)), 
                                    (lambda $l#0_8_56#heap#0: Heap, $l#0_8_56#y#0: Box :: 
                                      $IsBox($l#0_8_56#y#0, TInt)), 
                                    (lambda $l#0_8_56#heap#0: Heap, $l#0_8_56#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_8_56#o#0: ref :: false))))), 
                                $l#0_8_55#ly#0))))), 
                      (lambda $l#0_8_55#heap#0: Heap, $l#0_8_55#x#0: Box :: 
                        $IsBox($l#0_8_55#x#0, TInt)), 
                      (lambda $l#0_8_55#heap#0: Heap, $l#0_8_55#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_8_55#o#0: ref :: false))))), 
                  $LS($LZ))))
           == _module.__default.Sum($LS($LS($LZ)), 
              n#0, 
              Lit(AtLayer((lambda $l#0_8_57#ly#0: LayerType :: 
                    Handle1((lambda $l#0_8_57#heap#0: Heap, $l#0_8_57#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_8_57#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_8_57#y#0): int))): int)), 
                      (lambda $l#0_8_57#heap#0: Heap, $l#0_8_57#y#0: Box :: 
                        $IsBox($l#0_8_57#y#0, TInt)), 
                      (lambda $l#0_8_57#heap#0: Heap, $l#0_8_57#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_8_57#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_8_58#ly#0: LayerType :: 
                    Handle1((lambda $l#0_8_58#heap#0: Heap, $l#0_8_58#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_8_58#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_8_59#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_8_59#heap#0: Heap, $l#0_8_59#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_8_59#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_8_58#x#0): int), 
                                            $Box($Unbox($l#0_8_59#y#0): int))): int)), 
                                    (lambda $l#0_8_59#heap#0: Heap, $l#0_8_59#y#0: Box :: 
                                      $IsBox($l#0_8_59#y#0, TInt)), 
                                    (lambda $l#0_8_59#heap#0: Heap, $l#0_8_59#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_8_59#o#0: ref :: false))))), 
                                $l#0_8_58#ly#0))))), 
                      (lambda $l#0_8_58#heap#0: Heap, $l#0_8_58#x#0: Box :: 
                        $IsBox($l#0_8_58#x#0, TInt)), 
                      (lambda $l#0_8_58#heap#0: Heap, $l#0_8_58#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_8_58#o#0: ref :: false))))), 
                  $LS($LZ))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_7_0 := n#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_7_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_7_0;
            assume $IsGoodHeap($lambdaHeap#0_7_0);
            assume $Heap == $lambdaHeap#0_7_0 || $HeapSucc($Heap, $lambdaHeap#0_7_0);
            havoc y#0_7_0;
            if (true)
            {
                $_Frame#l0_7_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_7_0, $o, alloc)): bool ==> false);
                assume {:id "id254"} lambdaResult#0_7_0
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_7_0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_7_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_7_0 := Lit(AtLayer((lambda $l#0_7_1#ly#0: LayerType :: 
              Handle1((lambda $l#0_7_1#heap#0: Heap, $l#0_7_1#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_7_1#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_7_1#y#0): int))): int)), 
                (lambda $l#0_7_1#heap#0: Heap, $l#0_7_1#y#0: Box :: $IsBox($l#0_7_1#y#0, TInt)), 
                (lambda $l#0_7_1#heap#0: Heap, $l#0_7_1#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_7_1#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_7_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n#0, 
          Lit(AtLayer((lambda $l#0_7_2#ly#0: LayerType :: 
                Handle1((lambda $l#0_7_2#heap#0: Heap, $l#0_7_2#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_7_2#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_7_2#y#0): int))): int)), 
                  (lambda $l#0_7_2#heap#0: Heap, $l#0_7_2#y#0: Box :: $IsBox($l#0_7_2#y#0, TInt)), 
                  (lambda $l#0_7_2#heap#0: Heap, $l#0_7_2#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_7_2#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_7_1 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_7_1, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_7_1;
            assume $IsGoodHeap($lambdaHeap#0_7_1);
            assume $Heap == $lambdaHeap#0_7_1 || $HeapSucc($Heap, $lambdaHeap#0_7_1);
            havoc x#0_7_0;
            if (true)
            {
                $_Frame#l0_7_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_7_1, $o, alloc)): bool ==> false);
                ##n#0_7_2 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_7_2, Tclass._System.nat(), $lambdaHeap#0_7_1);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_7_2;
                    assume $IsGoodHeap($lambdaHeap#0_7_2);
                    assume $lambdaHeap#0_7_1 == $lambdaHeap#0_7_2
                       || $HeapSucc($lambdaHeap#0_7_1, $lambdaHeap#0_7_2);
                    havoc y#0_7_1;
                    if (true)
                    {
                        $_Frame#l0_7_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_7_2, $o, alloc)): bool ==> false);
                        assume {:id "id255"} lambdaResult#0_7_2
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_7_1, g#0, $Box(x#0_7_0), $Box(y#0_7_1))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_7_2, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_7_2 := Lit(AtLayer((lambda $l#0_7_4#ly#0: LayerType :: 
                      Handle1((lambda $l#0_7_4#heap#0: Heap, $l#0_7_4#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_7_4#heap#0, 
                                g#0, 
                                $Box(x#0_7_0), 
                                $Box($Unbox($l#0_7_4#y#0): int))): int)), 
                        (lambda $l#0_7_4#heap#0: Heap, $l#0_7_4#y#0: Box :: $IsBox($l#0_7_4#y#0, TInt)), 
                        (lambda $l#0_7_4#heap#0: Heap, $l#0_7_4#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_7_4#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_7_2, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_7_1);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_7_5#ly#0: LayerType :: 
                        Handle1((lambda $l#0_7_5#heap#0: Heap, $l#0_7_5#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_7_5#heap#0, 
                                  g#0, 
                                  $Box(x#0_7_0), 
                                  $Box($Unbox($l#0_7_5#y#0): int))): int)), 
                          (lambda $l#0_7_5#heap#0: Heap, $l#0_7_5#y#0: Box :: $IsBox($l#0_7_5#y#0, TInt)), 
                          (lambda $l#0_7_5#heap#0: Heap, $l#0_7_5#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_7_5#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id256"} lambdaResult#0_7_1
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_7_7#ly#0: LayerType :: 
                          Handle1((lambda $l#0_7_7#heap#0: Heap, $l#0_7_7#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_7_7#heap#0, 
                                    g#0, 
                                    $Box(x#0_7_0), 
                                    $Box($Unbox($l#0_7_7#y#0): int))): int)), 
                            (lambda $l#0_7_7#heap#0: Heap, $l#0_7_7#y#0: Box :: $IsBox($l#0_7_7#y#0, TInt)), 
                            (lambda $l#0_7_7#heap#0: Heap, $l#0_7_7#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_7_7#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_7_9#ly#0: LayerType :: 
                        Handle1((lambda $l#0_7_9#heap#0: Heap, $l#0_7_9#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_7_9#heap#0, 
                                  g#0, 
                                  $Box(x#0_7_0), 
                                  $Box($Unbox($l#0_7_9#y#0): int))): int)), 
                          (lambda $l#0_7_9#heap#0: Heap, $l#0_7_9#y#0: Box :: $IsBox($l#0_7_9#y#0, TInt)), 
                          (lambda $l#0_7_9#heap#0: Heap, $l#0_7_9#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_7_9#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_7_1, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_7_1 := Lit(AtLayer((lambda $l#0_7_12#ly#0: LayerType :: 
              Handle1((lambda $l#0_7_12#heap#0: Heap, $l#0_7_12#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_7_12#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_7_13#ly#0: LayerType :: 
                            Handle1((lambda $l#0_7_13#heap#0: Heap, $l#0_7_13#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_7_13#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_7_12#x#0): int), 
                                      $Box($Unbox($l#0_7_13#y#0): int))): int)), 
                              (lambda $l#0_7_13#heap#0: Heap, $l#0_7_13#y#0: Box :: 
                                $IsBox($l#0_7_13#y#0, TInt)), 
                              (lambda $l#0_7_13#heap#0: Heap, $l#0_7_13#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_7_13#o#0: ref :: false))))), 
                          $l#0_7_12#ly#0))))), 
                (lambda $l#0_7_12#heap#0: Heap, $l#0_7_12#x#0: Box :: 
                  $IsBox($l#0_7_12#x#0, TInt)), 
                (lambda $l#0_7_12#heap#0: Heap, $l#0_7_12#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_7_12#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_7_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_7_14#ly#0: LayerType :: 
                Handle1((lambda $l#0_7_14#heap#0: Heap, $l#0_7_14#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_7_14#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_7_15#ly#0: LayerType :: 
                              Handle1((lambda $l#0_7_15#heap#0: Heap, $l#0_7_15#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_7_15#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_7_14#x#0): int), 
                                        $Box($Unbox($l#0_7_15#y#0): int))): int)), 
                                (lambda $l#0_7_15#heap#0: Heap, $l#0_7_15#y#0: Box :: 
                                  $IsBox($l#0_7_15#y#0, TInt)), 
                                (lambda $l#0_7_15#heap#0: Heap, $l#0_7_15#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_7_15#o#0: ref :: false))))), 
                            $l#0_7_14#ly#0))))), 
                  (lambda $l#0_7_14#heap#0: Heap, $l#0_7_14#x#0: Box :: 
                    $IsBox($l#0_7_14#x#0, TInt)), 
                  (lambda $l#0_7_14#heap#0: Heap, $l#0_7_14#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_7_14#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n#0, 
            Lit(AtLayer((lambda $l#0_7_17#ly#0: LayerType :: 
                  Handle1((lambda $l#0_7_17#heap#0: Heap, $l#0_7_17#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_7_17#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_7_17#y#0): int))): int)), 
                    (lambda $l#0_7_17#heap#0: Heap, $l#0_7_17#y#0: Box :: 
                      $IsBox($l#0_7_17#y#0, TInt)), 
                    (lambda $l#0_7_17#heap#0: Heap, $l#0_7_17#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_7_17#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_7_18#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_7_20#ly#0: LayerType :: 
                    Handle1((lambda $l#0_7_20#heap#0: Heap, $l#0_7_20#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_7_20#heap#0, 
                              g#0, 
                              $Box($l#0_7_18#x#0), 
                              $Box($Unbox($l#0_7_20#y#0): int))): int)), 
                      (lambda $l#0_7_20#heap#0: Heap, $l#0_7_20#y#0: Box :: 
                        $IsBox($l#0_7_20#y#0, TInt)), 
                      (lambda $l#0_7_20#heap#0: Heap, $l#0_7_20#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_7_20#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_7_21#ly#0: LayerType :: 
                  Handle1((lambda $l#0_7_21#heap#0: Heap, $l#0_7_21#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_7_21#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_7_22#ly#0: LayerType :: 
                                Handle1((lambda $l#0_7_22#heap#0: Heap, $l#0_7_22#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_7_22#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_7_21#x#0): int), 
                                          $Box($Unbox($l#0_7_22#y#0): int))): int)), 
                                  (lambda $l#0_7_22#heap#0: Heap, $l#0_7_22#y#0: Box :: 
                                    $IsBox($l#0_7_22#y#0, TInt)), 
                                  (lambda $l#0_7_22#heap#0: Heap, $l#0_7_22#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_7_22#o#0: ref :: false))))), 
                              $l#0_7_21#ly#0))))), 
                    (lambda $l#0_7_21#heap#0: Heap, $l#0_7_21#x#0: Box :: 
                      $IsBox($l#0_7_21#x#0, TInt)), 
                    (lambda $l#0_7_21#heap#0: Heap, $l#0_7_21#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_7_21#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(101,7)
        assume true;
        assume {:id "id257"} Lit(false);
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_7_3;
            assume $IsGoodHeap($lambdaHeap#0_7_3);
            assume $Heap == $lambdaHeap#0_7_3 || $HeapSucc($Heap, $lambdaHeap#0_7_3);
            havoc y#0_7_2;
            if (LitInt(0) <= y#0_7_2)
            {
                $_Frame#l0_7_3 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_7_3, $o, alloc)): bool ==> false);
                assume {:id "id258"} lambdaResult#0_7_3
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_7_2))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_7_3, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##n#0_7_3 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_7_3, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_7_4;
            assume $IsGoodHeap($lambdaHeap#0_7_4);
            assume $Heap == $lambdaHeap#0_7_4 || $HeapSucc($Heap, $lambdaHeap#0_7_4);
            havoc y#0_7_3;
            if (true)
            {
                $_Frame#l0_7_4 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_7_4, $o, alloc)): bool ==> false);
                assume {:id "id259"} lambdaResult#0_7_4
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_7_3))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_7_4, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_7_3 := Lit(AtLayer((lambda $l#0_7_25#ly#0: LayerType :: 
              Handle1((lambda $l#0_7_25#heap#0: Heap, $l#0_7_25#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_7_25#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_7_25#y#0): int))): int)), 
                (lambda $l#0_7_25#heap#0: Heap, $l#0_7_25#y#0: Box :: 
                  $IsBox($l#0_7_25#y#0, TInt)), 
                (lambda $l#0_7_25#heap#0: Heap, $l#0_7_25#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_7_25#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_7_3, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_7_26#ly#0: LayerType :: 
                Handle1((lambda $l#0_7_26#heap#0: Heap, $l#0_7_26#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_7_26#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_7_26#y#0): int))): int)), 
                  (lambda $l#0_7_26#heap#0: Heap, $l#0_7_26#y#0: Box :: 
                    $IsBox($l#0_7_26#y#0, TInt)), 
                  (lambda $l#0_7_26#heap#0: Heap, $l#0_7_26#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_7_26#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_7_4 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_7_4, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_7_5;
            assume $IsGoodHeap($lambdaHeap#0_7_5);
            assume $Heap == $lambdaHeap#0_7_5 || $HeapSucc($Heap, $lambdaHeap#0_7_5);
            havoc x#0_7_1;
            if (true)
            {
                $_Frame#l0_7_5 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_7_5, $o, alloc)): bool ==> false);
                ##n#0_7_5 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_7_5, Tclass._System.nat(), $lambdaHeap#0_7_5);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_7_6;
                    assume $IsGoodHeap($lambdaHeap#0_7_6);
                    assume $lambdaHeap#0_7_5 == $lambdaHeap#0_7_6
                       || $HeapSucc($lambdaHeap#0_7_5, $lambdaHeap#0_7_6);
                    havoc y#0_7_4;
                    if (true)
                    {
                        $_Frame#l0_7_6 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_7_6, $o, alloc)): bool ==> false);
                        assume {:id "id260"} lambdaResult#0_7_6
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_7_5, g#0, $Box(x#0_7_1), $Box(y#0_7_4))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_7_6, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_7_5 := Lit(AtLayer((lambda $l#0_7_28#ly#0: LayerType :: 
                      Handle1((lambda $l#0_7_28#heap#0: Heap, $l#0_7_28#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_7_28#heap#0, 
                                g#0, 
                                $Box(x#0_7_1), 
                                $Box($Unbox($l#0_7_28#y#0): int))): int)), 
                        (lambda $l#0_7_28#heap#0: Heap, $l#0_7_28#y#0: Box :: 
                          $IsBox($l#0_7_28#y#0, TInt)), 
                        (lambda $l#0_7_28#heap#0: Heap, $l#0_7_28#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_7_28#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_7_5, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_7_5);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_7_29#ly#0: LayerType :: 
                        Handle1((lambda $l#0_7_29#heap#0: Heap, $l#0_7_29#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_7_29#heap#0, 
                                  g#0, 
                                  $Box(x#0_7_1), 
                                  $Box($Unbox($l#0_7_29#y#0): int))): int)), 
                          (lambda $l#0_7_29#heap#0: Heap, $l#0_7_29#y#0: Box :: 
                            $IsBox($l#0_7_29#y#0, TInt)), 
                          (lambda $l#0_7_29#heap#0: Heap, $l#0_7_29#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_7_29#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id261"} lambdaResult#0_7_5
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_7_31#ly#0: LayerType :: 
                          Handle1((lambda $l#0_7_31#heap#0: Heap, $l#0_7_31#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_7_31#heap#0, 
                                    g#0, 
                                    $Box(x#0_7_1), 
                                    $Box($Unbox($l#0_7_31#y#0): int))): int)), 
                            (lambda $l#0_7_31#heap#0: Heap, $l#0_7_31#y#0: Box :: 
                              $IsBox($l#0_7_31#y#0, TInt)), 
                            (lambda $l#0_7_31#heap#0: Heap, $l#0_7_31#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_7_31#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_7_33#ly#0: LayerType :: 
                        Handle1((lambda $l#0_7_33#heap#0: Heap, $l#0_7_33#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_7_33#heap#0, 
                                  g#0, 
                                  $Box(x#0_7_1), 
                                  $Box($Unbox($l#0_7_33#y#0): int))): int)), 
                          (lambda $l#0_7_33#heap#0: Heap, $l#0_7_33#y#0: Box :: 
                            $IsBox($l#0_7_33#y#0, TInt)), 
                          (lambda $l#0_7_33#heap#0: Heap, $l#0_7_33#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_7_33#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_7_5, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_7_4 := Lit(AtLayer((lambda $l#0_7_36#ly#0: LayerType :: 
              Handle1((lambda $l#0_7_36#heap#0: Heap, $l#0_7_36#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_7_36#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_7_37#ly#0: LayerType :: 
                            Handle1((lambda $l#0_7_37#heap#0: Heap, $l#0_7_37#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_7_37#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_7_36#x#0): int), 
                                      $Box($Unbox($l#0_7_37#y#0): int))): int)), 
                              (lambda $l#0_7_37#heap#0: Heap, $l#0_7_37#y#0: Box :: 
                                $IsBox($l#0_7_37#y#0, TInt)), 
                              (lambda $l#0_7_37#heap#0: Heap, $l#0_7_37#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_7_37#o#0: ref :: false))))), 
                          $l#0_7_36#ly#0))))), 
                (lambda $l#0_7_36#heap#0: Heap, $l#0_7_36#x#0: Box :: 
                  $IsBox($l#0_7_36#x#0, TInt)), 
                (lambda $l#0_7_36#heap#0: Heap, $l#0_7_36#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_7_36#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_7_4, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_7_38#ly#0: LayerType :: 
                Handle1((lambda $l#0_7_38#heap#0: Heap, $l#0_7_38#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_7_38#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_7_39#ly#0: LayerType :: 
                              Handle1((lambda $l#0_7_39#heap#0: Heap, $l#0_7_39#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_7_39#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_7_38#x#0): int), 
                                        $Box($Unbox($l#0_7_39#y#0): int))): int)), 
                                (lambda $l#0_7_39#heap#0: Heap, $l#0_7_39#y#0: Box :: 
                                  $IsBox($l#0_7_39#y#0, TInt)), 
                                (lambda $l#0_7_39#heap#0: Heap, $l#0_7_39#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_7_39#o#0: ref :: false))))), 
                            $l#0_7_38#ly#0))))), 
                  (lambda $l#0_7_38#heap#0: Heap, $l#0_7_38#x#0: Box :: 
                    $IsBox($l#0_7_38#x#0, TInt)), 
                  (lambda $l#0_7_38#heap#0: Heap, $l#0_7_38#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_7_38#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_7_42#ly#0: LayerType :: 
                  Handle1((lambda $l#0_7_42#heap#0: Heap, $l#0_7_42#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_7_42#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_7_42#y#0): int))): int)), 
                    (lambda $l#0_7_42#heap#0: Heap, $l#0_7_42#y#0: Box :: 
                      $IsBox($l#0_7_42#y#0, TInt)), 
                    (lambda $l#0_7_42#heap#0: Heap, $l#0_7_42#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_7_42#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_7_43#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_7_45#ly#0: LayerType :: 
                    Handle1((lambda $l#0_7_45#heap#0: Heap, $l#0_7_45#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_7_45#heap#0, 
                              g#0, 
                              $Box($l#0_7_43#x#0), 
                              $Box($Unbox($l#0_7_45#y#0): int))): int)), 
                      (lambda $l#0_7_45#heap#0: Heap, $l#0_7_45#y#0: Box :: 
                        $IsBox($l#0_7_45#y#0, TInt)), 
                      (lambda $l#0_7_45#heap#0: Heap, $l#0_7_45#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_7_45#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_7_46#ly#0: LayerType :: 
                  Handle1((lambda $l#0_7_46#heap#0: Heap, $l#0_7_46#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_7_46#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_7_47#ly#0: LayerType :: 
                                Handle1((lambda $l#0_7_47#heap#0: Heap, $l#0_7_47#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_7_47#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_7_46#x#0): int), 
                                          $Box($Unbox($l#0_7_47#y#0): int))): int)), 
                                  (lambda $l#0_7_47#heap#0: Heap, $l#0_7_47#y#0: Box :: 
                                    $IsBox($l#0_7_47#y#0, TInt)), 
                                  (lambda $l#0_7_47#heap#0: Heap, $l#0_7_47#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_7_47#o#0: ref :: false))))), 
                              $l#0_7_46#ly#0))))), 
                    (lambda $l#0_7_46#heap#0: Heap, $l#0_7_46#x#0: Box :: 
                      $IsBox($l#0_7_46#x#0, TInt)), 
                    (lambda $l#0_7_46#heap#0: Heap, $l#0_7_46#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_7_46#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id262"} {:subsumption 0} _module.__default.Sum($LS($LS($LZ)), 
              n#0, 
              Lit(AtLayer((lambda $l#0_7_48#ly#0: LayerType :: 
                    Handle1((lambda $l#0_7_48#heap#0: Heap, $l#0_7_48#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_7_48#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_7_48#y#0): int))): int)), 
                      (lambda $l#0_7_48#heap#0: Heap, $l#0_7_48#y#0: Box :: 
                        $IsBox($l#0_7_48#y#0, TInt)), 
                      (lambda $l#0_7_48#heap#0: Heap, $l#0_7_48#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_7_48#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_7_49#ly#0: LayerType :: 
                    Handle1((lambda $l#0_7_49#heap#0: Heap, $l#0_7_49#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_7_49#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_7_50#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_7_50#heap#0: Heap, $l#0_7_50#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_7_50#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_7_49#x#0): int), 
                                            $Box($Unbox($l#0_7_50#y#0): int))): int)), 
                                    (lambda $l#0_7_50#heap#0: Heap, $l#0_7_50#y#0: Box :: 
                                      $IsBox($l#0_7_50#y#0, TInt)), 
                                    (lambda $l#0_7_50#heap#0: Heap, $l#0_7_50#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_7_50#o#0: ref :: false))))), 
                                $l#0_7_49#ly#0))))), 
                      (lambda $l#0_7_49#heap#0: Heap, $l#0_7_49#x#0: Box :: 
                        $IsBox($l#0_7_49#x#0, TInt)), 
                      (lambda $l#0_7_49#heap#0: Heap, $l#0_7_49#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_7_49#o#0: ref :: false))))), 
                  $LS($LZ))))
           == $Unbox(Apply1(Tclass._System.nat(), 
                TInt, 
                $Heap, 
                Lit(AtLayer((lambda $l#0_7_51#ly#0: LayerType :: 
                      Handle1((lambda $l#0_7_51#heap#0: Heap, $l#0_7_51#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_7_51#heap#0, 
                                g#0, 
                                $Box(n'#0), 
                                $Box($Unbox($l#0_7_51#y#0): int))): int)), 
                        (lambda $l#0_7_51#heap#0: Heap, $l#0_7_51#y#0: Box :: 
                          $IsBox($l#0_7_51#y#0, Tclass._System.nat())), 
                        (lambda $l#0_7_51#heap#0: Heap, $l#0_7_51#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_7_51#o#0: ref :: false))))), 
                    $LS($LZ))), 
                $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_7_52#ly#0: LayerType :: 
                    Handle1((lambda $l#0_7_52#heap#0: Heap, $l#0_7_52#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_7_52#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_7_52#y#0): int))): int)), 
                      (lambda $l#0_7_52#heap#0: Heap, $l#0_7_52#y#0: Box :: 
                        $IsBox($l#0_7_52#y#0, TInt)), 
                      (lambda $l#0_7_52#heap#0: Heap, $l#0_7_52#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_7_52#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_7_53#ly#0: LayerType :: 
                    Handle1((lambda $l#0_7_53#heap#0: Heap, $l#0_7_53#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_7_53#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_7_54#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_7_54#heap#0: Heap, $l#0_7_54#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_7_54#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_7_53#x#0): int), 
                                            $Box($Unbox($l#0_7_54#y#0): int))): int)), 
                                    (lambda $l#0_7_54#heap#0: Heap, $l#0_7_54#y#0: Box :: 
                                      $IsBox($l#0_7_54#y#0, TInt)), 
                                    (lambda $l#0_7_54#heap#0: Heap, $l#0_7_54#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_7_54#o#0: ref :: false))))), 
                                $l#0_7_53#ly#0))))), 
                      (lambda $l#0_7_53#heap#0: Heap, $l#0_7_53#x#0: Box :: 
                        $IsBox($l#0_7_53#x#0, TInt)), 
                      (lambda $l#0_7_53#heap#0: Heap, $l#0_7_53#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_7_53#o#0: ref :: false))))), 
                  $LS($LZ))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_6_0;
            assume $IsGoodHeap($lambdaHeap#0_6_0);
            assume $Heap == $lambdaHeap#0_6_0 || $HeapSucc($Heap, $lambdaHeap#0_6_0);
            havoc y#0_6_0;
            if (LitInt(0) <= y#0_6_0)
            {
                $_Frame#l0_6_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_6_0, $o, alloc)): bool ==> false);
                assume {:id "id244"} lambdaResult#0_6_0
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_6_0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_6_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##n#0_6_0 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_6_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_6_1;
            assume $IsGoodHeap($lambdaHeap#0_6_1);
            assume $Heap == $lambdaHeap#0_6_1 || $HeapSucc($Heap, $lambdaHeap#0_6_1);
            havoc y#0_6_1;
            if (true)
            {
                $_Frame#l0_6_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_6_1, $o, alloc)): bool ==> false);
                assume {:id "id245"} lambdaResult#0_6_1
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_6_1))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_6_1, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_6_0 := Lit(AtLayer((lambda $l#0_6_2#ly#0: LayerType :: 
              Handle1((lambda $l#0_6_2#heap#0: Heap, $l#0_6_2#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_6_2#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_6_2#y#0): int))): int)), 
                (lambda $l#0_6_2#heap#0: Heap, $l#0_6_2#y#0: Box :: $IsBox($l#0_6_2#y#0, TInt)), 
                (lambda $l#0_6_2#heap#0: Heap, $l#0_6_2#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_6_2#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_6_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_6_3#ly#0: LayerType :: 
                Handle1((lambda $l#0_6_3#heap#0: Heap, $l#0_6_3#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_6_3#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_6_3#y#0): int))): int)), 
                  (lambda $l#0_6_3#heap#0: Heap, $l#0_6_3#y#0: Box :: $IsBox($l#0_6_3#y#0, TInt)), 
                  (lambda $l#0_6_3#heap#0: Heap, $l#0_6_3#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_6_3#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_6_1 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_6_1, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_6_2;
            assume $IsGoodHeap($lambdaHeap#0_6_2);
            assume $Heap == $lambdaHeap#0_6_2 || $HeapSucc($Heap, $lambdaHeap#0_6_2);
            havoc x#0_6_0;
            if (true)
            {
                $_Frame#l0_6_2 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_6_2, $o, alloc)): bool ==> false);
                ##n#0_6_2 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_6_2, Tclass._System.nat(), $lambdaHeap#0_6_2);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_6_3;
                    assume $IsGoodHeap($lambdaHeap#0_6_3);
                    assume $lambdaHeap#0_6_2 == $lambdaHeap#0_6_3
                       || $HeapSucc($lambdaHeap#0_6_2, $lambdaHeap#0_6_3);
                    havoc y#0_6_2;
                    if (true)
                    {
                        $_Frame#l0_6_3 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_6_3, $o, alloc)): bool ==> false);
                        assume {:id "id246"} lambdaResult#0_6_3
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_6_2, g#0, $Box(x#0_6_0), $Box(y#0_6_2))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_6_3, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_6_2 := Lit(AtLayer((lambda $l#0_6_5#ly#0: LayerType :: 
                      Handle1((lambda $l#0_6_5#heap#0: Heap, $l#0_6_5#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_6_5#heap#0, 
                                g#0, 
                                $Box(x#0_6_0), 
                                $Box($Unbox($l#0_6_5#y#0): int))): int)), 
                        (lambda $l#0_6_5#heap#0: Heap, $l#0_6_5#y#0: Box :: $IsBox($l#0_6_5#y#0, TInt)), 
                        (lambda $l#0_6_5#heap#0: Heap, $l#0_6_5#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_6_5#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_6_2, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_6_2);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_6_6#ly#0: LayerType :: 
                        Handle1((lambda $l#0_6_6#heap#0: Heap, $l#0_6_6#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_6_6#heap#0, 
                                  g#0, 
                                  $Box(x#0_6_0), 
                                  $Box($Unbox($l#0_6_6#y#0): int))): int)), 
                          (lambda $l#0_6_6#heap#0: Heap, $l#0_6_6#y#0: Box :: $IsBox($l#0_6_6#y#0, TInt)), 
                          (lambda $l#0_6_6#heap#0: Heap, $l#0_6_6#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_6_6#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id247"} lambdaResult#0_6_2
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_6_8#ly#0: LayerType :: 
                          Handle1((lambda $l#0_6_8#heap#0: Heap, $l#0_6_8#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_6_8#heap#0, 
                                    g#0, 
                                    $Box(x#0_6_0), 
                                    $Box($Unbox($l#0_6_8#y#0): int))): int)), 
                            (lambda $l#0_6_8#heap#0: Heap, $l#0_6_8#y#0: Box :: $IsBox($l#0_6_8#y#0, TInt)), 
                            (lambda $l#0_6_8#heap#0: Heap, $l#0_6_8#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_6_8#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_6_10#ly#0: LayerType :: 
                        Handle1((lambda $l#0_6_10#heap#0: Heap, $l#0_6_10#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_6_10#heap#0, 
                                  g#0, 
                                  $Box(x#0_6_0), 
                                  $Box($Unbox($l#0_6_10#y#0): int))): int)), 
                          (lambda $l#0_6_10#heap#0: Heap, $l#0_6_10#y#0: Box :: 
                            $IsBox($l#0_6_10#y#0, TInt)), 
                          (lambda $l#0_6_10#heap#0: Heap, $l#0_6_10#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_6_10#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_6_2, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_6_1 := Lit(AtLayer((lambda $l#0_6_13#ly#0: LayerType :: 
              Handle1((lambda $l#0_6_13#heap#0: Heap, $l#0_6_13#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_6_13#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_6_14#ly#0: LayerType :: 
                            Handle1((lambda $l#0_6_14#heap#0: Heap, $l#0_6_14#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_6_14#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_6_13#x#0): int), 
                                      $Box($Unbox($l#0_6_14#y#0): int))): int)), 
                              (lambda $l#0_6_14#heap#0: Heap, $l#0_6_14#y#0: Box :: 
                                $IsBox($l#0_6_14#y#0, TInt)), 
                              (lambda $l#0_6_14#heap#0: Heap, $l#0_6_14#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_6_14#o#0: ref :: false))))), 
                          $l#0_6_13#ly#0))))), 
                (lambda $l#0_6_13#heap#0: Heap, $l#0_6_13#x#0: Box :: 
                  $IsBox($l#0_6_13#x#0, TInt)), 
                (lambda $l#0_6_13#heap#0: Heap, $l#0_6_13#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_6_13#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_6_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_6_15#ly#0: LayerType :: 
                Handle1((lambda $l#0_6_15#heap#0: Heap, $l#0_6_15#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_6_15#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_6_16#ly#0: LayerType :: 
                              Handle1((lambda $l#0_6_16#heap#0: Heap, $l#0_6_16#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_6_16#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_6_15#x#0): int), 
                                        $Box($Unbox($l#0_6_16#y#0): int))): int)), 
                                (lambda $l#0_6_16#heap#0: Heap, $l#0_6_16#y#0: Box :: 
                                  $IsBox($l#0_6_16#y#0, TInt)), 
                                (lambda $l#0_6_16#heap#0: Heap, $l#0_6_16#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_6_16#o#0: ref :: false))))), 
                            $l#0_6_15#ly#0))))), 
                  (lambda $l#0_6_15#heap#0: Heap, $l#0_6_15#x#0: Box :: 
                    $IsBox($l#0_6_15#x#0, TInt)), 
                  (lambda $l#0_6_15#heap#0: Heap, $l#0_6_15#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_6_15#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_6_19#ly#0: LayerType :: 
                  Handle1((lambda $l#0_6_19#heap#0: Heap, $l#0_6_19#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_6_19#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_6_19#y#0): int))): int)), 
                    (lambda $l#0_6_19#heap#0: Heap, $l#0_6_19#y#0: Box :: 
                      $IsBox($l#0_6_19#y#0, TInt)), 
                    (lambda $l#0_6_19#heap#0: Heap, $l#0_6_19#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_6_19#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_6_20#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_6_22#ly#0: LayerType :: 
                    Handle1((lambda $l#0_6_22#heap#0: Heap, $l#0_6_22#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_6_22#heap#0, 
                              g#0, 
                              $Box($l#0_6_20#x#0), 
                              $Box($Unbox($l#0_6_22#y#0): int))): int)), 
                      (lambda $l#0_6_22#heap#0: Heap, $l#0_6_22#y#0: Box :: 
                        $IsBox($l#0_6_22#y#0, TInt)), 
                      (lambda $l#0_6_22#heap#0: Heap, $l#0_6_22#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_6_22#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_6_23#ly#0: LayerType :: 
                  Handle1((lambda $l#0_6_23#heap#0: Heap, $l#0_6_23#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_6_23#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_6_24#ly#0: LayerType :: 
                                Handle1((lambda $l#0_6_24#heap#0: Heap, $l#0_6_24#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_6_24#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_6_23#x#0): int), 
                                          $Box($Unbox($l#0_6_24#y#0): int))): int)), 
                                  (lambda $l#0_6_24#heap#0: Heap, $l#0_6_24#y#0: Box :: 
                                    $IsBox($l#0_6_24#y#0, TInt)), 
                                  (lambda $l#0_6_24#heap#0: Heap, $l#0_6_24#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_6_24#o#0: ref :: false))))), 
                              $l#0_6_23#ly#0))))), 
                    (lambda $l#0_6_23#heap#0: Heap, $l#0_6_23#x#0: Box :: 
                      $IsBox($l#0_6_23#x#0, TInt)), 
                    (lambda $l#0_6_23#heap#0: Heap, $l#0_6_23#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_6_23#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(103,7)
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_6_4;
            assume $IsGoodHeap($lambdaHeap#0_6_4);
            assume $Heap == $lambdaHeap#0_6_4 || $HeapSucc($Heap, $lambdaHeap#0_6_4);
            havoc y#0_6_3;
            if (LitInt(0) <= y#0_6_3)
            {
                $_Frame#l0_6_4 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_6_4, $o, alloc)): bool ==> false);
                assume {:id "id248"} lambdaResult#0_6_4
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_6_3))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_6_4, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        assume true;
        assert {:id "id249"} $Unbox(Apply1(Tclass._System.nat(), 
              TInt, 
              $Heap, 
              Lit(AtLayer((lambda $l#0_6_28#ly#0: LayerType :: 
                    Handle1((lambda $l#0_6_28#heap#0: Heap, $l#0_6_28#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_6_28#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_6_28#y#0): int))): int)), 
                      (lambda $l#0_6_28#heap#0: Heap, $l#0_6_28#y#0: Box :: 
                        $IsBox($l#0_6_28#y#0, Tclass._System.nat())), 
                      (lambda $l#0_6_28#heap#0: Heap, $l#0_6_28#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_6_28#o#0: ref :: false))))), 
                  $LS($LZ))), 
              $Box(n'#0))): int
           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int;
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_6_3 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_6_3, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_6_5;
            assume $IsGoodHeap($lambdaHeap#0_6_5);
            assume $Heap == $lambdaHeap#0_6_5 || $HeapSucc($Heap, $lambdaHeap#0_6_5);
            havoc y#0_6_4;
            if (true)
            {
                $_Frame#l0_6_5 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_6_5, $o, alloc)): bool ==> false);
                assume {:id "id250"} lambdaResult#0_6_5
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_6_4))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_6_5, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_6_3 := Lit(AtLayer((lambda $l#0_6_30#ly#0: LayerType :: 
              Handle1((lambda $l#0_6_30#heap#0: Heap, $l#0_6_30#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_6_30#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_6_30#y#0): int))): int)), 
                (lambda $l#0_6_30#heap#0: Heap, $l#0_6_30#y#0: Box :: 
                  $IsBox($l#0_6_30#y#0, TInt)), 
                (lambda $l#0_6_30#heap#0: Heap, $l#0_6_30#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_6_30#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_6_3, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_6_31#ly#0: LayerType :: 
                Handle1((lambda $l#0_6_31#heap#0: Heap, $l#0_6_31#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_6_31#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_6_31#y#0): int))): int)), 
                  (lambda $l#0_6_31#heap#0: Heap, $l#0_6_31#y#0: Box :: 
                    $IsBox($l#0_6_31#y#0, TInt)), 
                  (lambda $l#0_6_31#heap#0: Heap, $l#0_6_31#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_6_31#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_6_4 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_6_4, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_6_6;
            assume $IsGoodHeap($lambdaHeap#0_6_6);
            assume $Heap == $lambdaHeap#0_6_6 || $HeapSucc($Heap, $lambdaHeap#0_6_6);
            havoc x#0_6_1;
            if (true)
            {
                $_Frame#l0_6_6 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_6_6, $o, alloc)): bool ==> false);
                ##n#0_6_5 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_6_5, Tclass._System.nat(), $lambdaHeap#0_6_6);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_6_7;
                    assume $IsGoodHeap($lambdaHeap#0_6_7);
                    assume $lambdaHeap#0_6_6 == $lambdaHeap#0_6_7
                       || $HeapSucc($lambdaHeap#0_6_6, $lambdaHeap#0_6_7);
                    havoc y#0_6_5;
                    if (true)
                    {
                        $_Frame#l0_6_7 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_6_7, $o, alloc)): bool ==> false);
                        assume {:id "id251"} lambdaResult#0_6_7
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_6_6, g#0, $Box(x#0_6_1), $Box(y#0_6_5))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_6_7, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_6_5 := Lit(AtLayer((lambda $l#0_6_33#ly#0: LayerType :: 
                      Handle1((lambda $l#0_6_33#heap#0: Heap, $l#0_6_33#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_6_33#heap#0, 
                                g#0, 
                                $Box(x#0_6_1), 
                                $Box($Unbox($l#0_6_33#y#0): int))): int)), 
                        (lambda $l#0_6_33#heap#0: Heap, $l#0_6_33#y#0: Box :: 
                          $IsBox($l#0_6_33#y#0, TInt)), 
                        (lambda $l#0_6_33#heap#0: Heap, $l#0_6_33#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_6_33#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_6_5, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_6_6);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_6_34#ly#0: LayerType :: 
                        Handle1((lambda $l#0_6_34#heap#0: Heap, $l#0_6_34#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_6_34#heap#0, 
                                  g#0, 
                                  $Box(x#0_6_1), 
                                  $Box($Unbox($l#0_6_34#y#0): int))): int)), 
                          (lambda $l#0_6_34#heap#0: Heap, $l#0_6_34#y#0: Box :: 
                            $IsBox($l#0_6_34#y#0, TInt)), 
                          (lambda $l#0_6_34#heap#0: Heap, $l#0_6_34#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_6_34#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id252"} lambdaResult#0_6_6
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_6_36#ly#0: LayerType :: 
                          Handle1((lambda $l#0_6_36#heap#0: Heap, $l#0_6_36#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_6_36#heap#0, 
                                    g#0, 
                                    $Box(x#0_6_1), 
                                    $Box($Unbox($l#0_6_36#y#0): int))): int)), 
                            (lambda $l#0_6_36#heap#0: Heap, $l#0_6_36#y#0: Box :: 
                              $IsBox($l#0_6_36#y#0, TInt)), 
                            (lambda $l#0_6_36#heap#0: Heap, $l#0_6_36#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_6_36#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_6_38#ly#0: LayerType :: 
                        Handle1((lambda $l#0_6_38#heap#0: Heap, $l#0_6_38#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_6_38#heap#0, 
                                  g#0, 
                                  $Box(x#0_6_1), 
                                  $Box($Unbox($l#0_6_38#y#0): int))): int)), 
                          (lambda $l#0_6_38#heap#0: Heap, $l#0_6_38#y#0: Box :: 
                            $IsBox($l#0_6_38#y#0, TInt)), 
                          (lambda $l#0_6_38#heap#0: Heap, $l#0_6_38#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_6_38#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_6_6, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_6_4 := Lit(AtLayer((lambda $l#0_6_41#ly#0: LayerType :: 
              Handle1((lambda $l#0_6_41#heap#0: Heap, $l#0_6_41#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_6_41#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_6_42#ly#0: LayerType :: 
                            Handle1((lambda $l#0_6_42#heap#0: Heap, $l#0_6_42#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_6_42#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_6_41#x#0): int), 
                                      $Box($Unbox($l#0_6_42#y#0): int))): int)), 
                              (lambda $l#0_6_42#heap#0: Heap, $l#0_6_42#y#0: Box :: 
                                $IsBox($l#0_6_42#y#0, TInt)), 
                              (lambda $l#0_6_42#heap#0: Heap, $l#0_6_42#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_6_42#o#0: ref :: false))))), 
                          $l#0_6_41#ly#0))))), 
                (lambda $l#0_6_41#heap#0: Heap, $l#0_6_41#x#0: Box :: 
                  $IsBox($l#0_6_41#x#0, TInt)), 
                (lambda $l#0_6_41#heap#0: Heap, $l#0_6_41#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_6_41#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_6_4, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_6_43#ly#0: LayerType :: 
                Handle1((lambda $l#0_6_43#heap#0: Heap, $l#0_6_43#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_6_43#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_6_44#ly#0: LayerType :: 
                              Handle1((lambda $l#0_6_44#heap#0: Heap, $l#0_6_44#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_6_44#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_6_43#x#0): int), 
                                        $Box($Unbox($l#0_6_44#y#0): int))): int)), 
                                (lambda $l#0_6_44#heap#0: Heap, $l#0_6_44#y#0: Box :: 
                                  $IsBox($l#0_6_44#y#0, TInt)), 
                                (lambda $l#0_6_44#heap#0: Heap, $l#0_6_44#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_6_44#o#0: ref :: false))))), 
                            $l#0_6_43#ly#0))))), 
                  (lambda $l#0_6_43#heap#0: Heap, $l#0_6_43#x#0: Box :: 
                    $IsBox($l#0_6_43#x#0, TInt)), 
                  (lambda $l#0_6_43#heap#0: Heap, $l#0_6_43#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_6_43#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_6_46#ly#0: LayerType :: 
                  Handle1((lambda $l#0_6_46#heap#0: Heap, $l#0_6_46#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_6_46#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_6_46#y#0): int))): int)), 
                    (lambda $l#0_6_46#heap#0: Heap, $l#0_6_46#y#0: Box :: 
                      $IsBox($l#0_6_46#y#0, TInt)), 
                    (lambda $l#0_6_46#heap#0: Heap, $l#0_6_46#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_6_46#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_6_47#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_6_49#ly#0: LayerType :: 
                    Handle1((lambda $l#0_6_49#heap#0: Heap, $l#0_6_49#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_6_49#heap#0, 
                              g#0, 
                              $Box($l#0_6_47#x#0), 
                              $Box($Unbox($l#0_6_49#y#0): int))): int)), 
                      (lambda $l#0_6_49#heap#0: Heap, $l#0_6_49#y#0: Box :: 
                        $IsBox($l#0_6_49#y#0, TInt)), 
                      (lambda $l#0_6_49#heap#0: Heap, $l#0_6_49#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_6_49#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_6_50#ly#0: LayerType :: 
                  Handle1((lambda $l#0_6_50#heap#0: Heap, $l#0_6_50#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_6_50#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_6_51#ly#0: LayerType :: 
                                Handle1((lambda $l#0_6_51#heap#0: Heap, $l#0_6_51#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_6_51#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_6_50#x#0): int), 
                                          $Box($Unbox($l#0_6_51#y#0): int))): int)), 
                                  (lambda $l#0_6_51#heap#0: Heap, $l#0_6_51#y#0: Box :: 
                                    $IsBox($l#0_6_51#y#0, TInt)), 
                                  (lambda $l#0_6_51#heap#0: Heap, $l#0_6_51#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_6_51#o#0: ref :: false))))), 
                              $l#0_6_50#ly#0))))), 
                    (lambda $l#0_6_50#heap#0: Heap, $l#0_6_50#x#0: Box :: 
                      $IsBox($l#0_6_50#x#0, TInt)), 
                    (lambda $l#0_6_50#heap#0: Heap, $l#0_6_50#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_6_50#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id253"} {:subsumption 0} $Unbox(Apply1(Tclass._System.nat(), 
                TInt, 
                $Heap, 
                Lit(AtLayer((lambda $l#0_6_52#ly#0: LayerType :: 
                      Handle1((lambda $l#0_6_52#heap#0: Heap, $l#0_6_52#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_6_52#heap#0, 
                                g#0, 
                                $Box(n'#0), 
                                $Box($Unbox($l#0_6_52#y#0): int))): int)), 
                        (lambda $l#0_6_52#heap#0: Heap, $l#0_6_52#y#0: Box :: 
                          $IsBox($l#0_6_52#y#0, Tclass._System.nat())), 
                        (lambda $l#0_6_52#heap#0: Heap, $l#0_6_52#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_6_52#o#0: ref :: false))))), 
                    $LS($LZ))), 
                $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_6_53#ly#0: LayerType :: 
                    Handle1((lambda $l#0_6_53#heap#0: Heap, $l#0_6_53#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_6_53#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_6_53#y#0): int))): int)), 
                      (lambda $l#0_6_53#heap#0: Heap, $l#0_6_53#y#0: Box :: 
                        $IsBox($l#0_6_53#y#0, TInt)), 
                      (lambda $l#0_6_53#heap#0: Heap, $l#0_6_53#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_6_53#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_6_54#ly#0: LayerType :: 
                    Handle1((lambda $l#0_6_54#heap#0: Heap, $l#0_6_54#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_6_54#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_6_55#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_6_55#heap#0: Heap, $l#0_6_55#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_6_55#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_6_54#x#0): int), 
                                            $Box($Unbox($l#0_6_55#y#0): int))): int)), 
                                    (lambda $l#0_6_55#heap#0: Heap, $l#0_6_55#y#0: Box :: 
                                      $IsBox($l#0_6_55#y#0, TInt)), 
                                    (lambda $l#0_6_55#heap#0: Heap, $l#0_6_55#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_6_55#o#0: ref :: false))))), 
                                $l#0_6_54#ly#0))))), 
                      (lambda $l#0_6_54#heap#0: Heap, $l#0_6_54#x#0: Box :: 
                        $IsBox($l#0_6_54#x#0, TInt)), 
                      (lambda $l#0_6_54#heap#0: Heap, $l#0_6_54#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_6_54#o#0: ref :: false))))), 
                  $LS($LZ))))
           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_6_56#ly#0: LayerType :: 
                    Handle1((lambda $l#0_6_56#heap#0: Heap, $l#0_6_56#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_6_56#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_6_56#y#0): int))): int)), 
                      (lambda $l#0_6_56#heap#0: Heap, $l#0_6_56#y#0: Box :: 
                        $IsBox($l#0_6_56#y#0, TInt)), 
                      (lambda $l#0_6_56#heap#0: Heap, $l#0_6_56#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_6_56#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_6_57#ly#0: LayerType :: 
                    Handle1((lambda $l#0_6_57#heap#0: Heap, $l#0_6_57#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_6_57#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_6_58#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_6_58#heap#0: Heap, $l#0_6_58#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_6_58#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_6_57#x#0): int), 
                                            $Box($Unbox($l#0_6_58#y#0): int))): int)), 
                                    (lambda $l#0_6_58#heap#0: Heap, $l#0_6_58#y#0: Box :: 
                                      $IsBox($l#0_6_58#y#0, TInt)), 
                                    (lambda $l#0_6_58#heap#0: Heap, $l#0_6_58#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_6_58#o#0: ref :: false))))), 
                                $l#0_6_57#ly#0))))), 
                      (lambda $l#0_6_57#heap#0: Heap, $l#0_6_57#x#0: Box :: 
                        $IsBox($l#0_6_57#x#0, TInt)), 
                      (lambda $l#0_6_57#heap#0: Heap, $l#0_6_57#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_6_57#o#0: ref :: false))))), 
                  $LS($LZ))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_5_0 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_5_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_5_0;
            assume $IsGoodHeap($lambdaHeap#0_5_0);
            assume $Heap == $lambdaHeap#0_5_0 || $HeapSucc($Heap, $lambdaHeap#0_5_0);
            havoc y#0_5_0;
            if (true)
            {
                $_Frame#l0_5_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_5_0, $o, alloc)): bool ==> false);
                assume {:id "id203"} lambdaResult#0_5_0
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_5_0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_5_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_5_0 := Lit(AtLayer((lambda $l#0_5_1#ly#0: LayerType :: 
              Handle1((lambda $l#0_5_1#heap#0: Heap, $l#0_5_1#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_5_1#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_5_1#y#0): int))): int)), 
                (lambda $l#0_5_1#heap#0: Heap, $l#0_5_1#y#0: Box :: $IsBox($l#0_5_1#y#0, TInt)), 
                (lambda $l#0_5_1#heap#0: Heap, $l#0_5_1#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_5_1#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_5_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_5_2#ly#0: LayerType :: 
                Handle1((lambda $l#0_5_2#heap#0: Heap, $l#0_5_2#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_5_2#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_5_2#y#0): int))): int)), 
                  (lambda $l#0_5_2#heap#0: Heap, $l#0_5_2#y#0: Box :: $IsBox($l#0_5_2#y#0, TInt)), 
                  (lambda $l#0_5_2#heap#0: Heap, $l#0_5_2#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_5_2#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_5_1 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_5_1, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_5_1;
            assume $IsGoodHeap($lambdaHeap#0_5_1);
            assume $Heap == $lambdaHeap#0_5_1 || $HeapSucc($Heap, $lambdaHeap#0_5_1);
            havoc x#0_5_0;
            if (true)
            {
                $_Frame#l0_5_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_5_1, $o, alloc)): bool ==> false);
                ##n#0_5_2 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_2, Tclass._System.nat(), $lambdaHeap#0_5_1);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_2;
                    assume $IsGoodHeap($lambdaHeap#0_5_2);
                    assume $lambdaHeap#0_5_1 == $lambdaHeap#0_5_2
                       || $HeapSucc($lambdaHeap#0_5_1, $lambdaHeap#0_5_2);
                    havoc y#0_5_1;
                    if (true)
                    {
                        $_Frame#l0_5_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_2, $o, alloc)): bool ==> false);
                        assume {:id "id204"} lambdaResult#0_5_2
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_5_1, g#0, $Box(x#0_5_0), $Box(y#0_5_1))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_2, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_2 := Lit(AtLayer((lambda $l#0_5_4#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_4#heap#0: Heap, $l#0_5_4#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_4#heap#0, 
                                g#0, 
                                $Box(x#0_5_0), 
                                $Box($Unbox($l#0_5_4#y#0): int))): int)), 
                        (lambda $l#0_5_4#heap#0: Heap, $l#0_5_4#y#0: Box :: $IsBox($l#0_5_4#y#0, TInt)), 
                        (lambda $l#0_5_4#heap#0: Heap, $l#0_5_4#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_4#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_2, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_5_1);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_5_5#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_5#heap#0: Heap, $l#0_5_5#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_5#heap#0, 
                                  g#0, 
                                  $Box(x#0_5_0), 
                                  $Box($Unbox($l#0_5_5#y#0): int))): int)), 
                          (lambda $l#0_5_5#heap#0: Heap, $l#0_5_5#y#0: Box :: $IsBox($l#0_5_5#y#0, TInt)), 
                          (lambda $l#0_5_5#heap#0: Heap, $l#0_5_5#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_5#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id205"} lambdaResult#0_5_1
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_5_7#ly#0: LayerType :: 
                          Handle1((lambda $l#0_5_7#heap#0: Heap, $l#0_5_7#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_5_7#heap#0, 
                                    g#0, 
                                    $Box(x#0_5_0), 
                                    $Box($Unbox($l#0_5_7#y#0): int))): int)), 
                            (lambda $l#0_5_7#heap#0: Heap, $l#0_5_7#y#0: Box :: $IsBox($l#0_5_7#y#0, TInt)), 
                            (lambda $l#0_5_7#heap#0: Heap, $l#0_5_7#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_5_7#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_5_9#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_9#heap#0: Heap, $l#0_5_9#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_9#heap#0, 
                                  g#0, 
                                  $Box(x#0_5_0), 
                                  $Box($Unbox($l#0_5_9#y#0): int))): int)), 
                          (lambda $l#0_5_9#heap#0: Heap, $l#0_5_9#y#0: Box :: $IsBox($l#0_5_9#y#0, TInt)), 
                          (lambda $l#0_5_9#heap#0: Heap, $l#0_5_9#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_9#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_5_1, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_5_1 := Lit(AtLayer((lambda $l#0_5_12#ly#0: LayerType :: 
              Handle1((lambda $l#0_5_12#heap#0: Heap, $l#0_5_12#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_5_12#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_5_13#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_13#heap#0: Heap, $l#0_5_13#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_13#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_5_12#x#0): int), 
                                      $Box($Unbox($l#0_5_13#y#0): int))): int)), 
                              (lambda $l#0_5_13#heap#0: Heap, $l#0_5_13#y#0: Box :: 
                                $IsBox($l#0_5_13#y#0, TInt)), 
                              (lambda $l#0_5_13#heap#0: Heap, $l#0_5_13#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_13#o#0: ref :: false))))), 
                          $l#0_5_12#ly#0))))), 
                (lambda $l#0_5_12#heap#0: Heap, $l#0_5_12#x#0: Box :: 
                  $IsBox($l#0_5_12#x#0, TInt)), 
                (lambda $l#0_5_12#heap#0: Heap, $l#0_5_12#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_5_12#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_5_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_5_14#ly#0: LayerType :: 
                Handle1((lambda $l#0_5_14#heap#0: Heap, $l#0_5_14#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_5_14#ly#0, 
                        n#0, 
                        Lit(AtLayer((lambda $l#0_5_15#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_15#heap#0: Heap, $l#0_5_15#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_15#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_5_14#x#0): int), 
                                        $Box($Unbox($l#0_5_15#y#0): int))): int)), 
                                (lambda $l#0_5_15#heap#0: Heap, $l#0_5_15#y#0: Box :: 
                                  $IsBox($l#0_5_15#y#0, TInt)), 
                                (lambda $l#0_5_15#heap#0: Heap, $l#0_5_15#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_15#o#0: ref :: false))))), 
                            $l#0_5_14#ly#0))))), 
                  (lambda $l#0_5_14#heap#0: Heap, $l#0_5_14#x#0: Box :: 
                    $IsBox($l#0_5_14#x#0, TInt)), 
                  (lambda $l#0_5_14#heap#0: Heap, $l#0_5_14#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_5_14#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_5_17#ly#0: LayerType :: 
                  Handle1((lambda $l#0_5_17#heap#0: Heap, $l#0_5_17#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_5_17#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_5_17#y#0): int))): int)), 
                    (lambda $l#0_5_17#heap#0: Heap, $l#0_5_17#y#0: Box :: 
                      $IsBox($l#0_5_17#y#0, TInt)), 
                    (lambda $l#0_5_17#heap#0: Heap, $l#0_5_17#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_5_17#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_5_18#x#0: int :: 
            _module.__default.Sum#canCall(n#0, 
              Lit(AtLayer((lambda $l#0_5_20#ly#0: LayerType :: 
                    Handle1((lambda $l#0_5_20#heap#0: Heap, $l#0_5_20#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_5_20#heap#0, 
                              g#0, 
                              $Box($l#0_5_18#x#0), 
                              $Box($Unbox($l#0_5_20#y#0): int))): int)), 
                      (lambda $l#0_5_20#heap#0: Heap, $l#0_5_20#y#0: Box :: 
                        $IsBox($l#0_5_20#y#0, TInt)), 
                      (lambda $l#0_5_20#heap#0: Heap, $l#0_5_20#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_5_20#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_5_21#ly#0: LayerType :: 
                  Handle1((lambda $l#0_5_21#heap#0: Heap, $l#0_5_21#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_5_21#ly#0, 
                          n#0, 
                          Lit(AtLayer((lambda $l#0_5_22#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_22#heap#0: Heap, $l#0_5_22#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_22#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_5_21#x#0): int), 
                                          $Box($Unbox($l#0_5_22#y#0): int))): int)), 
                                  (lambda $l#0_5_22#heap#0: Heap, $l#0_5_22#y#0: Box :: 
                                    $IsBox($l#0_5_22#y#0, TInt)), 
                                  (lambda $l#0_5_22#heap#0: Heap, $l#0_5_22#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_22#o#0: ref :: false))))), 
                              $l#0_5_21#ly#0))))), 
                    (lambda $l#0_5_21#heap#0: Heap, $l#0_5_21#x#0: Box :: 
                      $IsBox($l#0_5_21#x#0, TInt)), 
                    (lambda $l#0_5_21#heap#0: Heap, $l#0_5_21#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_5_21#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(106,7)
        if (*)
        {
            // Assume Fuel Constant
            havoc i#0_5_0_0;
            assume true;
            if (LitInt(0) <= i#0_5_0_0)
            {
            }

            assume true;
            assume {:id "id206"} LitInt(0) <= i#0_5_0_0 && i#0_5_0_0 < n'#0;
            if (*)
            {
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0);
                    assume $Heap == $lambdaHeap#0_5_0_0 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0);
                    havoc x#0_5_0_0;
                    if (true)
                    {
                        $_Frame#l0_5_0_0 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0, $o, alloc)): bool ==> false);
                        ##n#0_5_0_0 := n#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##n#0_5_0_0, Tclass._System.nat(), $lambdaHeap#0_5_0_0);
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_5_0_1;
                            assume $IsGoodHeap($lambdaHeap#0_5_0_1);
                            assume $lambdaHeap#0_5_0_0 == $lambdaHeap#0_5_0_1
                               || $HeapSucc($lambdaHeap#0_5_0_0, $lambdaHeap#0_5_0_1);
                            havoc y#0_5_0_0;
                            if (true)
                            {
                                $_Frame#l0_5_0_1 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_5_0_1, $o, alloc)): bool ==> false);
                                assume {:id "id207"} lambdaResult#0_5_0_1
                                   == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_5_0_0, g#0, $Box(x#0_5_0_0), $Box(y#0_5_0_0))): int;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_5_0_1, TInt);
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        ##f#0_5_0_0 := Lit(AtLayer((lambda $l#0_5_0_1#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_0_1#heap#0: Heap, $l#0_5_0_1#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_1#heap#0, 
                                        g#0, 
                                        $Box(x#0_5_0_0), 
                                        $Box($Unbox($l#0_5_0_1#y#0): int))): int)), 
                                (lambda $l#0_5_0_1#heap#0: Heap, $l#0_5_0_1#y#0: Box :: 
                                  $IsBox($l#0_5_0_1#y#0, TInt)), 
                                (lambda $l#0_5_0_1#heap#0: Heap, $l#0_5_0_1#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_0_1#o#0: ref :: false))))), 
                            $LS($LZ)));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_5_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_5_0_0);
                        assume _module.__default.Sum#canCall(n#0, 
                          Lit(AtLayer((lambda $l#0_5_0_2#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_2#heap#0: Heap, $l#0_5_0_2#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_2#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_0), 
                                          $Box($Unbox($l#0_5_0_2#y#0): int))): int)), 
                                  (lambda $l#0_5_0_2#heap#0: Heap, $l#0_5_0_2#y#0: Box :: 
                                    $IsBox($l#0_5_0_2#y#0, TInt)), 
                                  (lambda $l#0_5_0_2#heap#0: Heap, $l#0_5_0_2#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_2#o#0: ref :: false))))), 
                              $LS($LZ))));
                        assume {:id "id208"} lambdaResult#0_5_0_0
                           == _module.__default.Sum($LS($LZ), 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_5_0_4#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_5_0_4#heap#0: Heap, $l#0_5_0_4#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_5_0_4#heap#0, 
                                            g#0, 
                                            $Box(x#0_5_0_0), 
                                            $Box($Unbox($l#0_5_0_4#y#0): int))): int)), 
                                    (lambda $l#0_5_0_4#heap#0: Heap, $l#0_5_0_4#y#0: Box :: 
                                      $IsBox($l#0_5_0_4#y#0, TInt)), 
                                    (lambda $l#0_5_0_4#heap#0: Heap, $l#0_5_0_4#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_5_0_4#o#0: ref :: false))))), 
                                $LS($LZ))));
                        assume _module.__default.Sum#canCall(n#0, 
                          Lit(AtLayer((lambda $l#0_5_0_6#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_6#heap#0: Heap, $l#0_5_0_6#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_6#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_0), 
                                          $Box($Unbox($l#0_5_0_6#y#0): int))): int)), 
                                  (lambda $l#0_5_0_6#heap#0: Heap, $l#0_5_0_6#y#0: Box :: 
                                    $IsBox($l#0_5_0_6#y#0, TInt)), 
                                  (lambda $l#0_5_0_6#heap#0: Heap, $l#0_5_0_6#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_6#o#0: ref :: false))))), 
                              $LS($LZ))));
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_2;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_2);
                    assume $Heap == $lambdaHeap#0_5_0_2 || $HeapSucc($Heap, $lambdaHeap#0_5_0_2);
                    havoc x#0_5_0_1;
                    if (true)
                    {
                        $_Frame#l0_5_0_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_2, $o, alloc)): bool ==> false);
                        ##n#0_5_0_1 := n'#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##n#0_5_0_1, Tclass._System.nat(), $lambdaHeap#0_5_0_2);
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_5_0_3;
                            assume $IsGoodHeap($lambdaHeap#0_5_0_3);
                            assume $lambdaHeap#0_5_0_2 == $lambdaHeap#0_5_0_3
                               || $HeapSucc($lambdaHeap#0_5_0_2, $lambdaHeap#0_5_0_3);
                            havoc y#0_5_0_1;
                            if (true)
                            {
                                $_Frame#l0_5_0_3 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_5_0_3, $o, alloc)): bool ==> false);
                                assume {:id "id209"} lambdaResult#0_5_0_3
                                   == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_5_0_2, g#0, $Box(x#0_5_0_1), $Box(y#0_5_0_1))): int;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_5_0_3, TInt);
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        ##f#0_5_0_1 := Lit(AtLayer((lambda $l#0_5_0_10#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_0_10#heap#0: Heap, $l#0_5_0_10#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_10#heap#0, 
                                        g#0, 
                                        $Box(x#0_5_0_1), 
                                        $Box($Unbox($l#0_5_0_10#y#0): int))): int)), 
                                (lambda $l#0_5_0_10#heap#0: Heap, $l#0_5_0_10#y#0: Box :: 
                                  $IsBox($l#0_5_0_10#y#0, TInt)), 
                                (lambda $l#0_5_0_10#heap#0: Heap, $l#0_5_0_10#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_0_10#o#0: ref :: false))))), 
                            $LS($LZ)));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_5_0_1, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_5_0_2);
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_5_0_11#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_11#heap#0: Heap, $l#0_5_0_11#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_11#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_1), 
                                          $Box($Unbox($l#0_5_0_11#y#0): int))): int)), 
                                  (lambda $l#0_5_0_11#heap#0: Heap, $l#0_5_0_11#y#0: Box :: 
                                    $IsBox($l#0_5_0_11#y#0, TInt)), 
                                  (lambda $l#0_5_0_11#heap#0: Heap, $l#0_5_0_11#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_11#o#0: ref :: false))))), 
                              $LS($LZ))));
                        assume {:id "id210"} lambdaResult#0_5_0_2
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#0_5_0_1), $Box(n'#0))): int
                             + _module.__default.Sum($LS($LZ), 
                              n'#0, 
                              Lit(AtLayer((lambda $l#0_5_0_13#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_5_0_13#heap#0: Heap, $l#0_5_0_13#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_5_0_13#heap#0, 
                                              g#0, 
                                              $Box(x#0_5_0_1), 
                                              $Box($Unbox($l#0_5_0_13#y#0): int))): int)), 
                                      (lambda $l#0_5_0_13#heap#0: Heap, $l#0_5_0_13#y#0: Box :: 
                                        $IsBox($l#0_5_0_13#y#0, TInt)), 
                                      (lambda $l#0_5_0_13#heap#0: Heap, $l#0_5_0_13#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_5_0_13#o#0: ref :: false))))), 
                                  $LS($LZ))));
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_5_0_15#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_15#heap#0: Heap, $l#0_5_0_15#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_15#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_1), 
                                          $Box($Unbox($l#0_5_0_15#y#0): int))): int)), 
                                  (lambda $l#0_5_0_15#heap#0: Heap, $l#0_5_0_15#y#0: Box :: 
                                    $IsBox($l#0_5_0_15#y#0, TInt)), 
                                  (lambda $l#0_5_0_15#heap#0: Heap, $l#0_5_0_15#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_15#o#0: ref :: false))))), 
                              $LS($LZ))));
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_2, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                assume (forall $l#0_5_0_18#x#0: int :: 
                    _module.__default.Sum#canCall(n#0, 
                      Lit(AtLayer((lambda $l#0_5_0_20#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_20#heap#0: Heap, $l#0_5_0_20#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_0_20#heap#0, 
                                      g#0, 
                                      $Box($l#0_5_0_18#x#0), 
                                      $Box($Unbox($l#0_5_0_20#y#0): int))): int)), 
                              (lambda $l#0_5_0_20#heap#0: Heap, $l#0_5_0_20#y#0: Box :: 
                                $IsBox($l#0_5_0_20#y#0, TInt)), 
                              (lambda $l#0_5_0_20#heap#0: Heap, $l#0_5_0_20#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_20#o#0: ref :: false))))), 
                          $LS($LZ)))))
                   && (forall $l#0_5_0_21#x#0: int :: 
                    _module.__default.Sum#canCall(n'#0, 
                      Lit(AtLayer((lambda $l#0_5_0_23#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_23#heap#0: Heap, $l#0_5_0_23#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_0_23#heap#0, 
                                      g#0, 
                                      $Box($l#0_5_0_21#x#0), 
                                      $Box($Unbox($l#0_5_0_23#y#0): int))): int)), 
                              (lambda $l#0_5_0_23#heap#0: Heap, $l#0_5_0_23#y#0: Box :: 
                                $IsBox($l#0_5_0_23#y#0, TInt)), 
                              (lambda $l#0_5_0_23#heap#0: Heap, $l#0_5_0_23#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_23#o#0: ref :: false))))), 
                          $LS($LZ)))));
                assume {:id "id211"} $Unbox(Apply1(TInt, 
                      TInt, 
                      $Heap, 
                      Lit(AtLayer((lambda $l#0_5_0_24#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_24#heap#0: Heap, $l#0_5_0_24#x#0: Box :: 
                                $Box(_module.__default.Sum($l#0_5_0_24#ly#0, 
                                    n#0, 
                                    Lit(AtLayer((lambda $l#0_5_0_25#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_5_0_25#heap#0: Heap, $l#0_5_0_25#y#0: Box :: 
                                              $Box($Unbox(Apply2(TInt, 
                                                    TInt, 
                                                    TInt, 
                                                    $l#0_5_0_25#heap#0, 
                                                    g#0, 
                                                    $Box($Unbox($l#0_5_0_24#x#0): int), 
                                                    $Box($Unbox($l#0_5_0_25#y#0): int))): int)), 
                                            (lambda $l#0_5_0_25#heap#0: Heap, $l#0_5_0_25#y#0: Box :: 
                                              $IsBox($l#0_5_0_25#y#0, TInt)), 
                                            (lambda $l#0_5_0_25#heap#0: Heap, $l#0_5_0_25#y#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_5_0_25#o#0: ref :: false))))), 
                                        $l#0_5_0_24#ly#0))))), 
                              (lambda $l#0_5_0_24#heap#0: Heap, $l#0_5_0_24#x#0: Box :: 
                                $IsBox($l#0_5_0_24#x#0, TInt)), 
                              (lambda $l#0_5_0_24#heap#0: Heap, $l#0_5_0_24#x#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_24#o#0: ref :: false))))), 
                          $LS($LZ))), 
                      $Box(i#0_5_0_0))): int
                   == $Unbox(Apply1(TInt, 
                      TInt, 
                      $Heap, 
                      Lit(AtLayer((lambda $l#0_5_0_26#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_26#heap#0: Heap, $l#0_5_0_26#x#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_26#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_5_0_26#x#0): int), 
                                        $Box(n'#0))): int
                                     + _module.__default.Sum($l#0_5_0_26#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#0_5_0_27#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_5_0_27#heap#0: Heap, $l#0_5_0_27#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#0_5_0_27#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#0_5_0_26#x#0): int), 
                                                      $Box($Unbox($l#0_5_0_27#y#0): int))): int)), 
                                              (lambda $l#0_5_0_27#heap#0: Heap, $l#0_5_0_27#y#0: Box :: 
                                                $IsBox($l#0_5_0_27#y#0, TInt)), 
                                              (lambda $l#0_5_0_27#heap#0: Heap, $l#0_5_0_27#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_5_0_27#o#0: ref :: false))))), 
                                          $l#0_5_0_26#ly#0))))), 
                              (lambda $l#0_5_0_26#heap#0: Heap, $l#0_5_0_26#x#0: Box :: 
                                $IsBox($l#0_5_0_26#x#0, TInt)), 
                              (lambda $l#0_5_0_26#heap#0: Heap, $l#0_5_0_26#x#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_26#o#0: ref :: false))))), 
                          $LS($LZ))), 
                      $Box(i#0_5_0_0))): int;
                assume false;
            }

            push;
            // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
            // Assume Fuel Constant
            if (*)
            {
                // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_0;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_0);
                    assume $Heap == $lambdaHeap#0_5_0_0_0 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_0);
                    havoc x#0_5_0_0_0;
                    if (true)
                    {
                        $_Frame#l0_5_0_0_0 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_0, $o, alloc)): bool ==> false);
                        ##n#0_5_0_0_0 := n#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##n#0_5_0_0_0, Tclass._System.nat(), $lambdaHeap#0_5_0_0_0);
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_5_0_0_1;
                            assume $IsGoodHeap($lambdaHeap#0_5_0_0_1);
                            assume $lambdaHeap#0_5_0_0_0 == $lambdaHeap#0_5_0_0_1
                               || $HeapSucc($lambdaHeap#0_5_0_0_0, $lambdaHeap#0_5_0_0_1);
                            havoc y#0_5_0_0_0;
                            if (true)
                            {
                                $_Frame#l0_5_0_0_1 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_5_0_0_1, $o, alloc)): bool ==> false);
                                assume {:id "id231"} lambdaResult#0_5_0_0_1
                                   == $Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $lambdaHeap#0_5_0_0_0, 
                                      g#0, 
                                      $Box(x#0_5_0_0_0), 
                                      $Box(y#0_5_0_0_0))): int;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_5_0_0_1, TInt);
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        ##f#0_5_0_0_0 := Lit(AtLayer((lambda $l#0_5_0_0_1#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_0_0_1#heap#0: Heap, $l#0_5_0_0_1#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_0_1#heap#0, 
                                        g#0, 
                                        $Box(x#0_5_0_0_0), 
                                        $Box($Unbox($l#0_5_0_0_1#y#0): int))): int)), 
                                (lambda $l#0_5_0_0_1#heap#0: Heap, $l#0_5_0_0_1#y#0: Box :: 
                                  $IsBox($l#0_5_0_0_1#y#0, TInt)), 
                                (lambda $l#0_5_0_0_1#heap#0: Heap, $l#0_5_0_0_1#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_0_0_1#o#0: ref :: false))))), 
                            $LS($LZ)));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_5_0_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_5_0_0_0);
                        assume _module.__default.Sum#canCall(n#0, 
                          Lit(AtLayer((lambda $l#0_5_0_0_2#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_0_2#heap#0: Heap, $l#0_5_0_0_2#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_0_2#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_0_0), 
                                          $Box($Unbox($l#0_5_0_0_2#y#0): int))): int)), 
                                  (lambda $l#0_5_0_0_2#heap#0: Heap, $l#0_5_0_0_2#y#0: Box :: 
                                    $IsBox($l#0_5_0_0_2#y#0, TInt)), 
                                  (lambda $l#0_5_0_0_2#heap#0: Heap, $l#0_5_0_0_2#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_0_2#o#0: ref :: false))))), 
                              $LS($LZ))));
                        assume {:id "id232"} lambdaResult#0_5_0_0_0
                           == _module.__default.Sum($LS($LZ), 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_5_0_0_4#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_5_0_0_4#heap#0: Heap, $l#0_5_0_0_4#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_5_0_0_4#heap#0, 
                                            g#0, 
                                            $Box(x#0_5_0_0_0), 
                                            $Box($Unbox($l#0_5_0_0_4#y#0): int))): int)), 
                                    (lambda $l#0_5_0_0_4#heap#0: Heap, $l#0_5_0_0_4#y#0: Box :: 
                                      $IsBox($l#0_5_0_0_4#y#0, TInt)), 
                                    (lambda $l#0_5_0_0_4#heap#0: Heap, $l#0_5_0_0_4#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_5_0_0_4#o#0: ref :: false))))), 
                                $LS($LZ))));
                        assume _module.__default.Sum#canCall(n#0, 
                          Lit(AtLayer((lambda $l#0_5_0_0_6#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_0_6#heap#0: Heap, $l#0_5_0_0_6#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_0_6#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_0_0), 
                                          $Box($Unbox($l#0_5_0_0_6#y#0): int))): int)), 
                                  (lambda $l#0_5_0_0_6#heap#0: Heap, $l#0_5_0_0_6#y#0: Box :: 
                                    $IsBox($l#0_5_0_0_6#y#0, TInt)), 
                                  (lambda $l#0_5_0_0_6#heap#0: Heap, $l#0_5_0_0_6#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_0_6#o#0: ref :: false))))), 
                              $LS($LZ))));
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_0, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                assume (forall $l#0_5_0_0_9#x#0: int :: 
                  _module.__default.Sum#canCall(n#0, 
                    Lit(AtLayer((lambda $l#0_5_0_0_11#ly#0: LayerType :: 
                          Handle1((lambda $l#0_5_0_0_11#heap#0: Heap, $l#0_5_0_0_11#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_5_0_0_11#heap#0, 
                                    g#0, 
                                    $Box($l#0_5_0_0_9#x#0), 
                                    $Box($Unbox($l#0_5_0_0_11#y#0): int))): int)), 
                            (lambda $l#0_5_0_0_11#heap#0: Heap, $l#0_5_0_0_11#y#0: Box :: 
                              $IsBox($l#0_5_0_0_11#y#0, TInt)), 
                            (lambda $l#0_5_0_0_11#heap#0: Heap, $l#0_5_0_0_11#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_5_0_0_11#o#0: ref :: false))))), 
                        $LS($LZ)))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_3_0;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_3_0);
                    assume $Heap == $lambdaHeap#0_5_0_0_3_0 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_3_0);
                    havoc x#0_5_0_0_3_0;
                    if (true)
                    {
                        $_Frame#l0_5_0_0_3_0 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_3_0, $o, alloc)): bool ==> false);
                        ##n#0_5_0_0_3_0 := n#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##n#0_5_0_0_3_0, Tclass._System.nat(), $lambdaHeap#0_5_0_0_3_0);
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_5_0_0_3_1;
                            assume $IsGoodHeap($lambdaHeap#0_5_0_0_3_1);
                            assume $lambdaHeap#0_5_0_0_3_0 == $lambdaHeap#0_5_0_0_3_1
                               || $HeapSucc($lambdaHeap#0_5_0_0_3_0, $lambdaHeap#0_5_0_0_3_1);
                            havoc y#0_5_0_0_3_0;
                            if (true)
                            {
                                $_Frame#l0_5_0_0_3_1 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_5_0_0_3_1, $o, alloc)): bool ==> false);
                                assume {:id "id226"} lambdaResult#0_5_0_0_3_1
                                   == $Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $lambdaHeap#0_5_0_0_3_0, 
                                      g#0, 
                                      $Box(x#0_5_0_0_3_0), 
                                      $Box(y#0_5_0_0_3_0))): int;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_5_0_0_3_1, TInt);
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        ##f#0_5_0_0_3_0 := Lit(AtLayer((lambda $l#0_5_0_0_3_1#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_0_0_3_1#heap#0: Heap, $l#0_5_0_0_3_1#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_0_3_1#heap#0, 
                                        g#0, 
                                        $Box(x#0_5_0_0_3_0), 
                                        $Box($Unbox($l#0_5_0_0_3_1#y#0): int))): int)), 
                                (lambda $l#0_5_0_0_3_1#heap#0: Heap, $l#0_5_0_0_3_1#y#0: Box :: 
                                  $IsBox($l#0_5_0_0_3_1#y#0, TInt)), 
                                (lambda $l#0_5_0_0_3_1#heap#0: Heap, $l#0_5_0_0_3_1#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_0_0_3_1#o#0: ref :: false))))), 
                            $LS($LZ)));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_5_0_0_3_0, 
                          Tclass._System.___hTotalFunc1(TInt, TInt), 
                          $lambdaHeap#0_5_0_0_3_0);
                        assume _module.__default.Sum#canCall(n#0, 
                          Lit(AtLayer((lambda $l#0_5_0_0_3_2#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_0_3_2#heap#0: Heap, $l#0_5_0_0_3_2#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_0_3_2#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_0_3_0), 
                                          $Box($Unbox($l#0_5_0_0_3_2#y#0): int))): int)), 
                                  (lambda $l#0_5_0_0_3_2#heap#0: Heap, $l#0_5_0_0_3_2#y#0: Box :: 
                                    $IsBox($l#0_5_0_0_3_2#y#0, TInt)), 
                                  (lambda $l#0_5_0_0_3_2#heap#0: Heap, $l#0_5_0_0_3_2#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_0_3_2#o#0: ref :: false))))), 
                              $LS($LZ))));
                        assume {:id "id227"} lambdaResult#0_5_0_0_3_0
                           == _module.__default.Sum($LS($LZ), 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_5_0_0_3_4#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_5_0_0_3_4#heap#0: Heap, $l#0_5_0_0_3_4#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_5_0_0_3_4#heap#0, 
                                            g#0, 
                                            $Box(x#0_5_0_0_3_0), 
                                            $Box($Unbox($l#0_5_0_0_3_4#y#0): int))): int)), 
                                    (lambda $l#0_5_0_0_3_4#heap#0: Heap, $l#0_5_0_0_3_4#y#0: Box :: 
                                      $IsBox($l#0_5_0_0_3_4#y#0, TInt)), 
                                    (lambda $l#0_5_0_0_3_4#heap#0: Heap, $l#0_5_0_0_3_4#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_5_0_0_3_4#o#0: ref :: false))))), 
                                $LS($LZ))));
                        assume _module.__default.Sum#canCall(n#0, 
                          Lit(AtLayer((lambda $l#0_5_0_0_3_6#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_0_3_6#heap#0: Heap, $l#0_5_0_0_3_6#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_0_3_6#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_0_3_0), 
                                          $Box($Unbox($l#0_5_0_0_3_6#y#0): int))): int)), 
                                  (lambda $l#0_5_0_0_3_6#heap#0: Heap, $l#0_5_0_0_3_6#y#0: Box :: 
                                    $IsBox($l#0_5_0_0_3_6#y#0, TInt)), 
                                  (lambda $l#0_5_0_0_3_6#heap#0: Heap, $l#0_5_0_0_3_6#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_0_3_6#o#0: ref :: false))))), 
                              $LS($LZ))));
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_3_0, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                assume (forall $l#0_5_0_0_3_9#x#0: int :: 
                  _module.__default.Sum#canCall(n#0, 
                    Lit(AtLayer((lambda $l#0_5_0_0_3_11#ly#0: LayerType :: 
                          Handle1((lambda $l#0_5_0_0_3_11#heap#0: Heap, $l#0_5_0_0_3_11#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_5_0_0_3_11#heap#0, 
                                    g#0, 
                                    $Box($l#0_5_0_0_3_9#x#0), 
                                    $Box($Unbox($l#0_5_0_0_3_11#y#0): int))): int)), 
                            (lambda $l#0_5_0_0_3_11#heap#0: Heap, $l#0_5_0_0_3_11#y#0: Box :: 
                              $IsBox($l#0_5_0_0_3_11#y#0, TInt)), 
                            (lambda $l#0_5_0_0_3_11#heap#0: Heap, $l#0_5_0_0_3_11#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_5_0_0_3_11#o#0: ref :: false))))), 
                        $LS($LZ)))));
                // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                push;
                push;
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(109,37)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                n##0_5_0_0_3_0 := n#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                g##0_5_0_0_3_0 := g#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                i##0_5_0_0_3_0 := i#0_5_0_0;
                call {:id "id228"} Call$$_module.__default.PrettyBasicBetaReduction(n##0_5_0_0_3_0, g##0_5_0_0_3_0, i##0_5_0_0_3_0);
                // TrCallStmt: After ProcessCallStmt
                pop;
                pop;
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                ##n#0_5_0_0_3_1 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_0_0_3_1, Tclass._System.nat(), $Heap);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_3_2;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_3_2);
                    assume $Heap == $lambdaHeap#0_5_0_0_3_2 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_3_2);
                    havoc y#0_5_0_0_3_1;
                    if (true)
                    {
                        $_Frame#l0_5_0_0_3_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_3_2, $o, alloc)): bool ==> false);
                        assume {:id "id229"} lambdaResult#0_5_0_0_3_2
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(y#0_5_0_0_3_1))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_3_2, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_0_0_3_1 := Lit(AtLayer((lambda $l#0_5_0_0_3_13#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_0_0_3_13#heap#0: Heap, $l#0_5_0_0_3_13#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_0_0_3_13#heap#0, 
                                g#0, 
                                $Box(i#0_5_0_0), 
                                $Box($Unbox($l#0_5_0_0_3_13#y#0): int))): int)), 
                        (lambda $l#0_5_0_0_3_13#heap#0: Heap, $l#0_5_0_0_3_13#y#0: Box :: 
                          $IsBox($l#0_5_0_0_3_13#y#0, TInt)), 
                        (lambda $l#0_5_0_0_3_13#heap#0: Heap, $l#0_5_0_0_3_13#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_0_0_3_13#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_0_0_3_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_3_14#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_3_14#heap#0: Heap, $l#0_5_0_0_3_14#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_3_14#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_3_14#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_3_14#heap#0: Heap, $l#0_5_0_0_3_14#y#0: Box :: 
                            $IsBox($l#0_5_0_0_3_14#y#0, TInt)), 
                          (lambda $l#0_5_0_0_3_14#heap#0: Heap, $l#0_5_0_0_3_14#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_3_14#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_3_16#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_3_16#heap#0: Heap, $l#0_5_0_0_3_16#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_3_16#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_3_16#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_3_16#heap#0: Heap, $l#0_5_0_0_3_16#y#0: Box :: 
                            $IsBox($l#0_5_0_0_3_16#y#0, TInt)), 
                          (lambda $l#0_5_0_0_3_16#heap#0: Heap, $l#0_5_0_0_3_16#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_3_16#o#0: ref :: false))))), 
                      $LS($LZ))));
                // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                assert {:id "id230"} {:subsumption 0} $Unbox(Apply1(TInt, 
                      TInt, 
                      $Heap, 
                      Lit(AtLayer((lambda $l#0_5_0_0_3_17#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_0_3_17#heap#0: Heap, $l#0_5_0_0_3_17#x#0: Box :: 
                                $Box(_module.__default.Sum($l#0_5_0_0_3_17#ly#0, 
                                    n#0, 
                                    Lit(AtLayer((lambda $l#0_5_0_0_3_18#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_5_0_0_3_18#heap#0: Heap, $l#0_5_0_0_3_18#y#0: Box :: 
                                              $Box($Unbox(Apply2(TInt, 
                                                    TInt, 
                                                    TInt, 
                                                    $l#0_5_0_0_3_18#heap#0, 
                                                    g#0, 
                                                    $Box($Unbox($l#0_5_0_0_3_17#x#0): int), 
                                                    $Box($Unbox($l#0_5_0_0_3_18#y#0): int))): int)), 
                                            (lambda $l#0_5_0_0_3_18#heap#0: Heap, $l#0_5_0_0_3_18#y#0: Box :: 
                                              $IsBox($l#0_5_0_0_3_18#y#0, TInt)), 
                                            (lambda $l#0_5_0_0_3_18#heap#0: Heap, $l#0_5_0_0_3_18#y#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_5_0_0_3_18#o#0: ref :: false))))), 
                                        $l#0_5_0_0_3_17#ly#0))))), 
                              (lambda $l#0_5_0_0_3_17#heap#0: Heap, $l#0_5_0_0_3_17#x#0: Box :: 
                                $IsBox($l#0_5_0_0_3_17#x#0, TInt)), 
                              (lambda $l#0_5_0_0_3_17#heap#0: Heap, $l#0_5_0_0_3_17#x#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_0_3_17#o#0: ref :: false))))), 
                          $LS($LZ))), 
                      $Box(i#0_5_0_0))): int
                   == _module.__default.Sum($LS($LS($LZ)), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_5_0_0_3_19#ly#0: LayerType :: 
                          Handle1((lambda $l#0_5_0_0_3_19#heap#0: Heap, $l#0_5_0_0_3_19#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_5_0_0_3_19#heap#0, 
                                    g#0, 
                                    $Box(i#0_5_0_0), 
                                    $Box($Unbox($l#0_5_0_0_3_19#y#0): int))): int)), 
                            (lambda $l#0_5_0_0_3_19#heap#0: Heap, $l#0_5_0_0_3_19#y#0: Box :: 
                              $IsBox($l#0_5_0_0_3_19#y#0, TInt)), 
                            (lambda $l#0_5_0_0_3_19#heap#0: Heap, $l#0_5_0_0_3_19#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_5_0_0_3_19#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                ##n#0_5_0_0_2_0 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_0_0_2_0, Tclass._System.nat(), $Heap);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_2_0;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_2_0);
                    assume $Heap == $lambdaHeap#0_5_0_0_2_0 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_2_0);
                    havoc y#0_5_0_0_2_0;
                    if (true)
                    {
                        $_Frame#l0_5_0_0_2_0 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_2_0, $o, alloc)): bool ==> false);
                        assume {:id "id221"} lambdaResult#0_5_0_0_2_0
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(y#0_5_0_0_2_0))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_2_0, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_0_0_2_0 := Lit(AtLayer((lambda $l#0_5_0_0_2_1#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_0_0_2_1#heap#0: Heap, $l#0_5_0_0_2_1#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_0_0_2_1#heap#0, 
                                g#0, 
                                $Box(i#0_5_0_0), 
                                $Box($Unbox($l#0_5_0_0_2_1#y#0): int))): int)), 
                        (lambda $l#0_5_0_0_2_1#heap#0: Heap, $l#0_5_0_0_2_1#y#0: Box :: 
                          $IsBox($l#0_5_0_0_2_1#y#0, TInt)), 
                        (lambda $l#0_5_0_0_2_1#heap#0: Heap, $l#0_5_0_0_2_1#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_0_0_2_1#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_0_0_2_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_2_2#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_2_2#heap#0: Heap, $l#0_5_0_0_2_2#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_2_2#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_2_2#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_2_2#heap#0: Heap, $l#0_5_0_0_2_2#y#0: Box :: 
                            $IsBox($l#0_5_0_0_2_2#y#0, TInt)), 
                          (lambda $l#0_5_0_0_2_2#heap#0: Heap, $l#0_5_0_0_2_2#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_2_2#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_2_4#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_2_4#heap#0: Heap, $l#0_5_0_0_2_4#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_2_4#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_2_4#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_2_4#heap#0: Heap, $l#0_5_0_0_2_4#y#0: Box :: 
                            $IsBox($l#0_5_0_0_2_4#y#0, TInt)), 
                          (lambda $l#0_5_0_0_2_4#heap#0: Heap, $l#0_5_0_0_2_4#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_2_4#o#0: ref :: false))))), 
                      $LS($LZ))));
                // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                push;
                push;
                // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(111,13)
                assume true;
                assume {:id "id222"} Lit(false);
                pop;
                pop;
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_2_1;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_2_1);
                    assume $Heap == $lambdaHeap#0_5_0_0_2_1 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_2_1);
                    havoc y#0_5_0_0_2_1;
                    if (LitInt(0) <= y#0_5_0_0_2_1)
                    {
                        $_Frame#l0_5_0_0_2_1 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_2_1, $o, alloc)): bool ==> false);
                        assume {:id "id223"} lambdaResult#0_5_0_0_2_1
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(y#0_5_0_0_2_1))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_2_1, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##n#0_5_0_0_2_1 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_0_0_2_1, Tclass._System.nat(), $Heap);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_2_2;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_2_2);
                    assume $Heap == $lambdaHeap#0_5_0_0_2_2 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_2_2);
                    havoc y#0_5_0_0_2_2;
                    if (true)
                    {
                        $_Frame#l0_5_0_0_2_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_2_2, $o, alloc)): bool ==> false);
                        assume {:id "id224"} lambdaResult#0_5_0_0_2_2
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(y#0_5_0_0_2_2))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_2_2, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_0_0_2_1 := Lit(AtLayer((lambda $l#0_5_0_0_2_7#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_0_0_2_7#heap#0: Heap, $l#0_5_0_0_2_7#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_0_0_2_7#heap#0, 
                                g#0, 
                                $Box(i#0_5_0_0), 
                                $Box($Unbox($l#0_5_0_0_2_7#y#0): int))): int)), 
                        (lambda $l#0_5_0_0_2_7#heap#0: Heap, $l#0_5_0_0_2_7#y#0: Box :: 
                          $IsBox($l#0_5_0_0_2_7#y#0, TInt)), 
                        (lambda $l#0_5_0_0_2_7#heap#0: Heap, $l#0_5_0_0_2_7#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_0_0_2_7#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_0_0_2_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_2_8#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_2_8#heap#0: Heap, $l#0_5_0_0_2_8#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_2_8#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_2_8#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_2_8#heap#0: Heap, $l#0_5_0_0_2_8#y#0: Box :: 
                            $IsBox($l#0_5_0_0_2_8#y#0, TInt)), 
                          (lambda $l#0_5_0_0_2_8#heap#0: Heap, $l#0_5_0_0_2_8#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_2_8#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_2_11#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_2_11#heap#0: Heap, $l#0_5_0_0_2_11#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_2_11#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_2_11#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_2_11#heap#0: Heap, $l#0_5_0_0_2_11#y#0: Box :: 
                            $IsBox($l#0_5_0_0_2_11#y#0, TInt)), 
                          (lambda $l#0_5_0_0_2_11#heap#0: Heap, $l#0_5_0_0_2_11#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_2_11#o#0: ref :: false))))), 
                      $LS($LZ))));
                // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                assert {:id "id225"} {:subsumption 0} _module.__default.Sum($LS($LS($LZ)), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_5_0_0_2_12#ly#0: LayerType :: 
                          Handle1((lambda $l#0_5_0_0_2_12#heap#0: Heap, $l#0_5_0_0_2_12#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_5_0_0_2_12#heap#0, 
                                    g#0, 
                                    $Box(i#0_5_0_0), 
                                    $Box($Unbox($l#0_5_0_0_2_12#y#0): int))): int)), 
                            (lambda $l#0_5_0_0_2_12#heap#0: Heap, $l#0_5_0_0_2_12#y#0: Box :: 
                              $IsBox($l#0_5_0_0_2_12#y#0, TInt)), 
                            (lambda $l#0_5_0_0_2_12#heap#0: Heap, $l#0_5_0_0_2_12#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_5_0_0_2_12#o#0: ref :: false))))), 
                        $LS($LZ))))
                   == $Unbox(Apply1(Tclass._System.nat(), 
                        TInt, 
                        $Heap, 
                        Lit(AtLayer((lambda $l#0_5_0_0_2_13#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_0_0_2_13#heap#0: Heap, $l#0_5_0_0_2_13#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_0_2_13#heap#0, 
                                        g#0, 
                                        $Box(i#0_5_0_0), 
                                        $Box($Unbox($l#0_5_0_0_2_13#y#0): int))): int)), 
                                (lambda $l#0_5_0_0_2_13#heap#0: Heap, $l#0_5_0_0_2_13#y#0: Box :: 
                                  $IsBox($l#0_5_0_0_2_13#y#0, Tclass._System.nat())), 
                                (lambda $l#0_5_0_0_2_13#heap#0: Heap, $l#0_5_0_0_2_13#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_0_0_2_13#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box(n'#0))): int
                     + _module.__default.Sum($LS($LS($LZ)), 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_5_0_0_2_14#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_0_2_14#heap#0: Heap, $l#0_5_0_0_2_14#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_0_0_2_14#heap#0, 
                                      g#0, 
                                      $Box(i#0_5_0_0), 
                                      $Box($Unbox($l#0_5_0_0_2_14#y#0): int))): int)), 
                              (lambda $l#0_5_0_0_2_14#heap#0: Heap, $l#0_5_0_0_2_14#y#0: Box :: 
                                $IsBox($l#0_5_0_0_2_14#y#0, TInt)), 
                              (lambda $l#0_5_0_0_2_14#heap#0: Heap, $l#0_5_0_0_2_14#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_0_2_14#o#0: ref :: false))))), 
                          $LS($LZ))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_1_0;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_1_0);
                    assume $Heap == $lambdaHeap#0_5_0_0_1_0 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_1_0);
                    havoc y#0_5_0_0_1_0;
                    if (LitInt(0) <= y#0_5_0_0_1_0)
                    {
                        $_Frame#l0_5_0_0_1_0 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_1_0, $o, alloc)): bool ==> false);
                        assume {:id "id217"} lambdaResult#0_5_0_0_1_0
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(y#0_5_0_0_1_0))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_1_0, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##n#0_5_0_0_1_0 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_0_0_1_0, Tclass._System.nat(), $Heap);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_1_1;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_1_1);
                    assume $Heap == $lambdaHeap#0_5_0_0_1_1 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_1_1);
                    havoc y#0_5_0_0_1_1;
                    if (true)
                    {
                        $_Frame#l0_5_0_0_1_1 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_1_1, $o, alloc)): bool ==> false);
                        assume {:id "id218"} lambdaResult#0_5_0_0_1_1
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(y#0_5_0_0_1_1))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_1_1, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_0_0_1_0 := Lit(AtLayer((lambda $l#0_5_0_0_1_2#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_0_0_1_2#heap#0: Heap, $l#0_5_0_0_1_2#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_0_0_1_2#heap#0, 
                                g#0, 
                                $Box(i#0_5_0_0), 
                                $Box($Unbox($l#0_5_0_0_1_2#y#0): int))): int)), 
                        (lambda $l#0_5_0_0_1_2#heap#0: Heap, $l#0_5_0_0_1_2#y#0: Box :: 
                          $IsBox($l#0_5_0_0_1_2#y#0, TInt)), 
                        (lambda $l#0_5_0_0_1_2#heap#0: Heap, $l#0_5_0_0_1_2#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_0_0_1_2#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_0_0_1_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_1_3#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_1_3#heap#0: Heap, $l#0_5_0_0_1_3#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_1_3#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_1_3#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_1_3#heap#0: Heap, $l#0_5_0_0_1_3#y#0: Box :: 
                            $IsBox($l#0_5_0_0_1_3#y#0, TInt)), 
                          (lambda $l#0_5_0_0_1_3#heap#0: Heap, $l#0_5_0_0_1_3#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_1_3#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_1_6#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_1_6#heap#0: Heap, $l#0_5_0_0_1_6#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_1_6#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_1_6#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_1_6#heap#0: Heap, $l#0_5_0_0_1_6#y#0: Box :: 
                            $IsBox($l#0_5_0_0_1_6#y#0, TInt)), 
                          (lambda $l#0_5_0_0_1_6#heap#0: Heap, $l#0_5_0_0_1_6#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_1_6#o#0: ref :: false))))), 
                      $LS($LZ))));
                // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                push;
                pop;
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                ##n#0_5_0_0_1_1 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_0_0_1_1, Tclass._System.nat(), $Heap);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_1_2;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_1_2);
                    assume $Heap == $lambdaHeap#0_5_0_0_1_2 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_1_2);
                    havoc y#0_5_0_0_1_2;
                    if (true)
                    {
                        $_Frame#l0_5_0_0_1_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_1_2, $o, alloc)): bool ==> false);
                        assume {:id "id219"} lambdaResult#0_5_0_0_1_2
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(y#0_5_0_0_1_2))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_1_2, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_0_0_1_1 := Lit(AtLayer((lambda $l#0_5_0_0_1_8#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_0_0_1_8#heap#0: Heap, $l#0_5_0_0_1_8#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_0_0_1_8#heap#0, 
                                g#0, 
                                $Box(i#0_5_0_0), 
                                $Box($Unbox($l#0_5_0_0_1_8#y#0): int))): int)), 
                        (lambda $l#0_5_0_0_1_8#heap#0: Heap, $l#0_5_0_0_1_8#y#0: Box :: 
                          $IsBox($l#0_5_0_0_1_8#y#0, TInt)), 
                        (lambda $l#0_5_0_0_1_8#heap#0: Heap, $l#0_5_0_0_1_8#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_0_0_1_8#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_0_0_1_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_1_9#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_1_9#heap#0: Heap, $l#0_5_0_0_1_9#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_1_9#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_1_9#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_1_9#heap#0: Heap, $l#0_5_0_0_1_9#y#0: Box :: 
                            $IsBox($l#0_5_0_0_1_9#y#0, TInt)), 
                          (lambda $l#0_5_0_0_1_9#heap#0: Heap, $l#0_5_0_0_1_9#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_1_9#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_1_11#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_1_11#heap#0: Heap, $l#0_5_0_0_1_11#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_1_11#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_1_11#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_1_11#heap#0: Heap, $l#0_5_0_0_1_11#y#0: Box :: 
                            $IsBox($l#0_5_0_0_1_11#y#0, TInt)), 
                          (lambda $l#0_5_0_0_1_11#heap#0: Heap, $l#0_5_0_0_1_11#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_1_11#o#0: ref :: false))))), 
                      $LS($LZ))));
                // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                assert {:id "id220"} {:subsumption 0} $Unbox(Apply1(Tclass._System.nat(), 
                        TInt, 
                        $Heap, 
                        Lit(AtLayer((lambda $l#0_5_0_0_1_12#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_0_0_1_12#heap#0: Heap, $l#0_5_0_0_1_12#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_0_1_12#heap#0, 
                                        g#0, 
                                        $Box(i#0_5_0_0), 
                                        $Box($Unbox($l#0_5_0_0_1_12#y#0): int))): int)), 
                                (lambda $l#0_5_0_0_1_12#heap#0: Heap, $l#0_5_0_0_1_12#y#0: Box :: 
                                  $IsBox($l#0_5_0_0_1_12#y#0, Tclass._System.nat())), 
                                (lambda $l#0_5_0_0_1_12#heap#0: Heap, $l#0_5_0_0_1_12#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_0_0_1_12#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box(n'#0))): int
                     + _module.__default.Sum($LS($LS($LZ)), 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_5_0_0_1_13#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_0_1_13#heap#0: Heap, $l#0_5_0_0_1_13#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_0_0_1_13#heap#0, 
                                      g#0, 
                                      $Box(i#0_5_0_0), 
                                      $Box($Unbox($l#0_5_0_0_1_13#y#0): int))): int)), 
                              (lambda $l#0_5_0_0_1_13#heap#0: Heap, $l#0_5_0_0_1_13#y#0: Box :: 
                                $IsBox($l#0_5_0_0_1_13#y#0, TInt)), 
                              (lambda $l#0_5_0_0_1_13#heap#0: Heap, $l#0_5_0_0_1_13#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_0_1_13#o#0: ref :: false))))), 
                          $LS($LZ))))
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(n'#0))): int
                     + _module.__default.Sum($LS($LS($LZ)), 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_5_0_0_1_14#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_0_1_14#heap#0: Heap, $l#0_5_0_0_1_14#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_0_0_1_14#heap#0, 
                                      g#0, 
                                      $Box(i#0_5_0_0), 
                                      $Box($Unbox($l#0_5_0_0_1_14#y#0): int))): int)), 
                              (lambda $l#0_5_0_0_1_14#heap#0: Heap, $l#0_5_0_0_1_14#y#0: Box :: 
                                $IsBox($l#0_5_0_0_1_14#y#0, TInt)), 
                              (lambda $l#0_5_0_0_1_14#heap#0: Heap, $l#0_5_0_0_1_14#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_0_1_14#o#0: ref :: false))))), 
                          $LS($LZ))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                ##n#0_5_0_0_0_0 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_0_0_0_0, Tclass._System.nat(), $Heap);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_0_0;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_0_0);
                    assume $Heap == $lambdaHeap#0_5_0_0_0_0 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_0_0);
                    havoc y#0_5_0_0_0_0;
                    if (true)
                    {
                        $_Frame#l0_5_0_0_0_0 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_0_0, $o, alloc)): bool ==> false);
                        assume {:id "id212"} lambdaResult#0_5_0_0_0_0
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(y#0_5_0_0_0_0))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_0_0, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_0_0_0_0 := Lit(AtLayer((lambda $l#0_5_0_0_0_1#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_0_0_0_1#heap#0: Heap, $l#0_5_0_0_0_1#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_0_0_0_1#heap#0, 
                                g#0, 
                                $Box(i#0_5_0_0), 
                                $Box($Unbox($l#0_5_0_0_0_1#y#0): int))): int)), 
                        (lambda $l#0_5_0_0_0_1#heap#0: Heap, $l#0_5_0_0_0_1#y#0: Box :: 
                          $IsBox($l#0_5_0_0_0_1#y#0, TInt)), 
                        (lambda $l#0_5_0_0_0_1#heap#0: Heap, $l#0_5_0_0_0_1#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_0_0_0_1#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_0_0_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_0_2#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_0_2#heap#0: Heap, $l#0_5_0_0_0_2#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_0_2#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_0_2#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_0_2#heap#0: Heap, $l#0_5_0_0_0_2#y#0: Box :: 
                            $IsBox($l#0_5_0_0_0_2#y#0, TInt)), 
                          (lambda $l#0_5_0_0_0_2#heap#0: Heap, $l#0_5_0_0_0_2#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_0_2#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_0_0_0_4#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_0_4#heap#0: Heap, $l#0_5_0_0_0_4#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_0_0_0_4#heap#0, 
                                  g#0, 
                                  $Box(i#0_5_0_0), 
                                  $Box($Unbox($l#0_5_0_0_0_4#y#0): int))): int)), 
                          (lambda $l#0_5_0_0_0_4#heap#0: Heap, $l#0_5_0_0_0_4#y#0: Box :: 
                            $IsBox($l#0_5_0_0_0_4#y#0, TInt)), 
                          (lambda $l#0_5_0_0_0_4#heap#0: Heap, $l#0_5_0_0_0_4#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_0_4#o#0: ref :: false))))), 
                      $LS($LZ))));
                // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                push;
                push;
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(115,27)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                n'##0_5_0_0_0_0 := n'#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                g##0_5_0_0_0_0 := g#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                i##0_5_0_0_0_0 := i#0_5_0_0;
                call {:id "id213"} Call$$_module.__default.BetaReduction1(n'##0_5_0_0_0_0, g##0_5_0_0_0_0, i##0_5_0_0_0_0);
                // TrCallStmt: After ProcessCallStmt
                pop;
                pop;
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_0_0_0_1;
                    assume $IsGoodHeap($lambdaHeap#0_5_0_0_0_1);
                    assume $Heap == $lambdaHeap#0_5_0_0_0_1 || $HeapSucc($Heap, $lambdaHeap#0_5_0_0_0_1);
                    havoc x#0_5_0_0_0_0;
                    if (true)
                    {
                        $_Frame#l0_5_0_0_0_1 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_0_0_0_1, $o, alloc)): bool ==> false);
                        ##n#0_5_0_0_0_1 := n'#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##n#0_5_0_0_0_1, Tclass._System.nat(), $lambdaHeap#0_5_0_0_0_1);
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_5_0_0_0_2;
                            assume $IsGoodHeap($lambdaHeap#0_5_0_0_0_2);
                            assume $lambdaHeap#0_5_0_0_0_1 == $lambdaHeap#0_5_0_0_0_2
                               || $HeapSucc($lambdaHeap#0_5_0_0_0_1, $lambdaHeap#0_5_0_0_0_2);
                            havoc y#0_5_0_0_0_1;
                            if (true)
                            {
                                $_Frame#l0_5_0_0_0_2 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_5_0_0_0_2, $o, alloc)): bool ==> false);
                                assume {:id "id214"} lambdaResult#0_5_0_0_0_2
                                   == $Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $lambdaHeap#0_5_0_0_0_1, 
                                      g#0, 
                                      $Box(x#0_5_0_0_0_0), 
                                      $Box(y#0_5_0_0_0_1))): int;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_5_0_0_0_2, TInt);
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        ##f#0_5_0_0_0_1 := Lit(AtLayer((lambda $l#0_5_0_0_0_6#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_0_0_0_6#heap#0: Heap, $l#0_5_0_0_0_6#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_0_0_6#heap#0, 
                                        g#0, 
                                        $Box(x#0_5_0_0_0_0), 
                                        $Box($Unbox($l#0_5_0_0_0_6#y#0): int))): int)), 
                                (lambda $l#0_5_0_0_0_6#heap#0: Heap, $l#0_5_0_0_0_6#y#0: Box :: 
                                  $IsBox($l#0_5_0_0_0_6#y#0, TInt)), 
                                (lambda $l#0_5_0_0_0_6#heap#0: Heap, $l#0_5_0_0_0_6#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_0_0_0_6#o#0: ref :: false))))), 
                            $LS($LZ)));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_5_0_0_0_1, 
                          Tclass._System.___hTotalFunc1(TInt, TInt), 
                          $lambdaHeap#0_5_0_0_0_1);
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_5_0_0_0_7#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_0_0_7#heap#0: Heap, $l#0_5_0_0_0_7#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_0_0_7#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_0_0_0), 
                                          $Box($Unbox($l#0_5_0_0_0_7#y#0): int))): int)), 
                                  (lambda $l#0_5_0_0_0_7#heap#0: Heap, $l#0_5_0_0_0_7#y#0: Box :: 
                                    $IsBox($l#0_5_0_0_0_7#y#0, TInt)), 
                                  (lambda $l#0_5_0_0_0_7#heap#0: Heap, $l#0_5_0_0_0_7#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_0_0_7#o#0: ref :: false))))), 
                              $LS($LZ))));
                        assume {:id "id215"} lambdaResult#0_5_0_0_0_1
                           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#0_5_0_0_0_0), $Box(n'#0))): int
                             + _module.__default.Sum($LS($LZ), 
                              n'#0, 
                              Lit(AtLayer((lambda $l#0_5_0_0_0_9#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_5_0_0_0_9#heap#0: Heap, $l#0_5_0_0_0_9#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_5_0_0_0_9#heap#0, 
                                              g#0, 
                                              $Box(x#0_5_0_0_0_0), 
                                              $Box($Unbox($l#0_5_0_0_0_9#y#0): int))): int)), 
                                      (lambda $l#0_5_0_0_0_9#heap#0: Heap, $l#0_5_0_0_0_9#y#0: Box :: 
                                        $IsBox($l#0_5_0_0_0_9#y#0, TInt)), 
                                      (lambda $l#0_5_0_0_0_9#heap#0: Heap, $l#0_5_0_0_0_9#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_5_0_0_0_9#o#0: ref :: false))))), 
                                  $LS($LZ))));
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_5_0_0_0_11#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_0_0_0_11#heap#0: Heap, $l#0_5_0_0_0_11#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_0_0_0_11#heap#0, 
                                          g#0, 
                                          $Box(x#0_5_0_0_0_0), 
                                          $Box($Unbox($l#0_5_0_0_0_11#y#0): int))): int)), 
                                  (lambda $l#0_5_0_0_0_11#heap#0: Heap, $l#0_5_0_0_0_11#y#0: Box :: 
                                    $IsBox($l#0_5_0_0_0_11#y#0, TInt)), 
                                  (lambda $l#0_5_0_0_0_11#heap#0: Heap, $l#0_5_0_0_0_11#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_0_0_0_11#o#0: ref :: false))))), 
                              $LS($LZ))));
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_0_0_0_1, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                assume (forall $l#0_5_0_0_0_14#x#0: int :: 
                  _module.__default.Sum#canCall(n'#0, 
                    Lit(AtLayer((lambda $l#0_5_0_0_0_16#ly#0: LayerType :: 
                          Handle1((lambda $l#0_5_0_0_0_16#heap#0: Heap, $l#0_5_0_0_0_16#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_5_0_0_0_16#heap#0, 
                                    g#0, 
                                    $Box($l#0_5_0_0_0_14#x#0), 
                                    $Box($Unbox($l#0_5_0_0_0_16#y#0): int))): int)), 
                            (lambda $l#0_5_0_0_0_16#heap#0: Heap, $l#0_5_0_0_0_16#y#0: Box :: 
                              $IsBox($l#0_5_0_0_0_16#y#0, TInt)), 
                            (lambda $l#0_5_0_0_0_16#heap#0: Heap, $l#0_5_0_0_0_16#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_5_0_0_0_16#o#0: ref :: false))))), 
                        $LS($LZ)))));
                // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(107,9)
                assert {:id "id216"} {:subsumption 0} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(i#0_5_0_0), $Box(n'#0))): int
                     + _module.__default.Sum($LS($LS($LZ)), 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_5_0_0_0_17#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_0_0_17#heap#0: Heap, $l#0_5_0_0_0_17#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_0_0_0_17#heap#0, 
                                      g#0, 
                                      $Box(i#0_5_0_0), 
                                      $Box($Unbox($l#0_5_0_0_0_17#y#0): int))): int)), 
                              (lambda $l#0_5_0_0_0_17#heap#0: Heap, $l#0_5_0_0_0_17#y#0: Box :: 
                                $IsBox($l#0_5_0_0_0_17#y#0, TInt)), 
                              (lambda $l#0_5_0_0_0_17#heap#0: Heap, $l#0_5_0_0_0_17#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_0_0_17#o#0: ref :: false))))), 
                          $LS($LZ))))
                   == $Unbox(Apply1(TInt, 
                      TInt, 
                      $Heap, 
                      Lit(AtLayer((lambda $l#0_5_0_0_0_18#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_0_0_18#heap#0: Heap, $l#0_5_0_0_0_18#x#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_0_0_18#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_5_0_0_0_18#x#0): int), 
                                        $Box(n'#0))): int
                                     + _module.__default.Sum($l#0_5_0_0_0_18#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#0_5_0_0_0_19#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_5_0_0_0_19#heap#0: Heap, $l#0_5_0_0_0_19#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#0_5_0_0_0_19#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#0_5_0_0_0_18#x#0): int), 
                                                      $Box($Unbox($l#0_5_0_0_0_19#y#0): int))): int)), 
                                              (lambda $l#0_5_0_0_0_19#heap#0: Heap, $l#0_5_0_0_0_19#y#0: Box :: 
                                                $IsBox($l#0_5_0_0_0_19#y#0, TInt)), 
                                              (lambda $l#0_5_0_0_0_19#heap#0: Heap, $l#0_5_0_0_0_19#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_5_0_0_0_19#o#0: ref :: false))))), 
                                          $l#0_5_0_0_0_18#ly#0))))), 
                              (lambda $l#0_5_0_0_0_18#heap#0: Heap, $l#0_5_0_0_0_18#x#0: Box :: 
                                $IsBox($l#0_5_0_0_0_18#x#0, TInt)), 
                              (lambda $l#0_5_0_0_0_18#heap#0: Heap, $l#0_5_0_0_0_18#x#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_0_0_18#o#0: ref :: false))))), 
                          $LS($LZ))), 
                      $Box(i#0_5_0_0))): int;
                assume false;
            }

            assume {:id "id233"} $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_5_0_0_12#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_12#heap#0: Heap, $l#0_5_0_0_12#x#0: Box :: 
                            $Box(_module.__default.Sum($l#0_5_0_0_12#ly#0, 
                                n#0, 
                                Lit(AtLayer((lambda $l#0_5_0_0_13#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_5_0_0_13#heap#0: Heap, $l#0_5_0_0_13#y#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#0_5_0_0_13#heap#0, 
                                                g#0, 
                                                $Box($Unbox($l#0_5_0_0_12#x#0): int), 
                                                $Box($Unbox($l#0_5_0_0_13#y#0): int))): int)), 
                                        (lambda $l#0_5_0_0_13#heap#0: Heap, $l#0_5_0_0_13#y#0: Box :: 
                                          $IsBox($l#0_5_0_0_13#y#0, TInt)), 
                                        (lambda $l#0_5_0_0_13#heap#0: Heap, $l#0_5_0_0_13#y#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_5_0_0_13#o#0: ref :: false))))), 
                                    $l#0_5_0_0_12#ly#0))))), 
                          (lambda $l#0_5_0_0_12#heap#0: Heap, $l#0_5_0_0_12#x#0: Box :: 
                            $IsBox($l#0_5_0_0_12#x#0, TInt)), 
                          (lambda $l#0_5_0_0_12#heap#0: Heap, $l#0_5_0_0_12#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_12#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_5_0_0))): int
               == $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_5_0_0_14#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_0_14#heap#0: Heap, $l#0_5_0_0_14#x#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_5_0_0_14#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#0_5_0_0_14#x#0): int), 
                                    $Box(n'#0))): int
                                 + _module.__default.Sum($l#0_5_0_0_14#ly#0, 
                                  n'#0, 
                                  Lit(AtLayer((lambda $l#0_5_0_0_15#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_5_0_0_15#heap#0: Heap, $l#0_5_0_0_15#y#0: Box :: 
                                            $Box($Unbox(Apply2(TInt, 
                                                  TInt, 
                                                  TInt, 
                                                  $l#0_5_0_0_15#heap#0, 
                                                  g#0, 
                                                  $Box($Unbox($l#0_5_0_0_14#x#0): int), 
                                                  $Box($Unbox($l#0_5_0_0_15#y#0): int))): int)), 
                                          (lambda $l#0_5_0_0_15#heap#0: Heap, $l#0_5_0_0_15#y#0: Box :: 
                                            $IsBox($l#0_5_0_0_15#y#0, TInt)), 
                                          (lambda $l#0_5_0_0_15#heap#0: Heap, $l#0_5_0_0_15#y#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_5_0_0_15#o#0: ref :: false))))), 
                                      $l#0_5_0_0_14#ly#0))))), 
                          (lambda $l#0_5_0_0_14#heap#0: Heap, $l#0_5_0_0_14#x#0: Box :: 
                            $IsBox($l#0_5_0_0_14#x#0, TInt)), 
                          (lambda $l#0_5_0_0_14#heap#0: Heap, $l#0_5_0_0_14#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_0_14#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_5_0_0))): int;
            pop;
            assert {:id "id234"} $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_5_0_28#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_28#heap#0: Heap, $l#0_5_0_28#x#0: Box :: 
                            $Box(_module.__default.Sum($l#0_5_0_28#ly#0, 
                                n#0, 
                                Lit(AtLayer((lambda $l#0_5_0_29#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_5_0_29#heap#0: Heap, $l#0_5_0_29#y#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#0_5_0_29#heap#0, 
                                                g#0, 
                                                $Box($Unbox($l#0_5_0_28#x#0): int), 
                                                $Box($Unbox($l#0_5_0_29#y#0): int))): int)), 
                                        (lambda $l#0_5_0_29#heap#0: Heap, $l#0_5_0_29#y#0: Box :: 
                                          $IsBox($l#0_5_0_29#y#0, TInt)), 
                                        (lambda $l#0_5_0_29#heap#0: Heap, $l#0_5_0_29#y#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_5_0_29#o#0: ref :: false))))), 
                                    $l#0_5_0_28#ly#0))))), 
                          (lambda $l#0_5_0_28#heap#0: Heap, $l#0_5_0_28#x#0: Box :: 
                            $IsBox($l#0_5_0_28#x#0, TInt)), 
                          (lambda $l#0_5_0_28#heap#0: Heap, $l#0_5_0_28#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_28#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_5_0_0))): int
               == $Unbox(Apply1(TInt, 
                  TInt, 
                  $Heap, 
                  Lit(AtLayer((lambda $l#0_5_0_30#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_0_30#heap#0: Heap, $l#0_5_0_30#x#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_5_0_30#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#0_5_0_30#x#0): int), 
                                    $Box(n'#0))): int
                                 + _module.__default.Sum($l#0_5_0_30#ly#0, 
                                  n'#0, 
                                  Lit(AtLayer((lambda $l#0_5_0_31#ly#0: LayerType :: 
                                        Handle1((lambda $l#0_5_0_31#heap#0: Heap, $l#0_5_0_31#y#0: Box :: 
                                            $Box($Unbox(Apply2(TInt, 
                                                  TInt, 
                                                  TInt, 
                                                  $l#0_5_0_31#heap#0, 
                                                  g#0, 
                                                  $Box($Unbox($l#0_5_0_30#x#0): int), 
                                                  $Box($Unbox($l#0_5_0_31#y#0): int))): int)), 
                                          (lambda $l#0_5_0_31#heap#0: Heap, $l#0_5_0_31#y#0: Box :: 
                                            $IsBox($l#0_5_0_31#y#0, TInt)), 
                                          (lambda $l#0_5_0_31#heap#0: Heap, $l#0_5_0_31#y#0: Box :: 
                                            SetRef_to_SetBox((lambda $l#0_5_0_31#o#0: ref :: false))))), 
                                      $l#0_5_0_30#ly#0))))), 
                          (lambda $l#0_5_0_30#heap#0: Heap, $l#0_5_0_30#x#0: Box :: 
                            $IsBox($l#0_5_0_30#x#0, TInt)), 
                          (lambda $l#0_5_0_30#heap#0: Heap, $l#0_5_0_30#x#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_0_30#o#0: ref :: false))))), 
                      $LS($LZ))), 
                  $Box(i#0_5_0_0))): int;
            assume false;
        }
        else
        {
            assume (forall i#0_5_0_1: int :: 
              LitInt(0) <= i#0_5_0_1 && i#0_5_0_1 < n'#0
                 ==> $Unbox(Apply1(TInt, 
                      TInt, 
                      $Heap, 
                      Lit(AtLayer((lambda $l#0_5_0_32#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_32#heap#0: Heap, $l#0_5_0_32#x#0: Box :: 
                                $Box(_module.__default.Sum($l#0_5_0_32#ly#0, 
                                    n#0, 
                                    Lit(AtLayer((lambda $l#0_5_0_33#ly#0: LayerType :: 
                                          Handle1((lambda $l#0_5_0_33#heap#0: Heap, $l#0_5_0_33#y#0: Box :: 
                                              $Box($Unbox(Apply2(TInt, 
                                                    TInt, 
                                                    TInt, 
                                                    $l#0_5_0_33#heap#0, 
                                                    g#0, 
                                                    $Box($Unbox($l#0_5_0_32#x#0): int), 
                                                    $Box($Unbox($l#0_5_0_33#y#0): int))): int)), 
                                            (lambda $l#0_5_0_33#heap#0: Heap, $l#0_5_0_33#y#0: Box :: 
                                              $IsBox($l#0_5_0_33#y#0, TInt)), 
                                            (lambda $l#0_5_0_33#heap#0: Heap, $l#0_5_0_33#y#0: Box :: 
                                              SetRef_to_SetBox((lambda $l#0_5_0_33#o#0: ref :: false))))), 
                                        $l#0_5_0_32#ly#0))))), 
                              (lambda $l#0_5_0_32#heap#0: Heap, $l#0_5_0_32#x#0: Box :: 
                                $IsBox($l#0_5_0_32#x#0, TInt)), 
                              (lambda $l#0_5_0_32#heap#0: Heap, $l#0_5_0_32#x#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_32#o#0: ref :: false))))), 
                          $LS($LZ))), 
                      $Box(i#0_5_0_1))): int
                   == $Unbox(Apply1(TInt, 
                      TInt, 
                      $Heap, 
                      Lit(AtLayer((lambda $l#0_5_0_34#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_0_34#heap#0: Heap, $l#0_5_0_34#x#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_0_34#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_5_0_34#x#0): int), 
                                        $Box(n'#0))): int
                                     + _module.__default.Sum($l#0_5_0_34#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#0_5_0_35#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_5_0_35#heap#0: Heap, $l#0_5_0_35#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#0_5_0_35#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#0_5_0_34#x#0): int), 
                                                      $Box($Unbox($l#0_5_0_35#y#0): int))): int)), 
                                              (lambda $l#0_5_0_35#heap#0: Heap, $l#0_5_0_35#y#0: Box :: 
                                                $IsBox($l#0_5_0_35#y#0, TInt)), 
                                              (lambda $l#0_5_0_35#heap#0: Heap, $l#0_5_0_35#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_5_0_35#o#0: ref :: false))))), 
                                          $l#0_5_0_34#ly#0))))), 
                              (lambda $l#0_5_0_34#heap#0: Heap, $l#0_5_0_34#x#0: Box :: 
                                $IsBox($l#0_5_0_34#x#0, TInt)), 
                              (lambda $l#0_5_0_34#heap#0: Heap, $l#0_5_0_34#x#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_0_34#o#0: ref :: false))))), 
                          $LS($LZ))), 
                      $Box(i#0_5_0_1))): int);
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(119,15)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        n##0_5_0 := n'#0;
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_5_3;
            assume $IsGoodHeap($lambdaHeap#0_5_3);
            assume $Heap == $lambdaHeap#0_5_3 || $HeapSucc($Heap, $lambdaHeap#0_5_3);
            havoc x#0_5_1;
            if (true)
            {
                $_Frame#l0_5_3 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_5_3, $o, alloc)): bool ==> false);
                ##n#0_5_3 := n#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_3, Tclass._System.nat(), $lambdaHeap#0_5_3);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_4;
                    assume $IsGoodHeap($lambdaHeap#0_5_4);
                    assume $lambdaHeap#0_5_3 == $lambdaHeap#0_5_4
                       || $HeapSucc($lambdaHeap#0_5_3, $lambdaHeap#0_5_4);
                    havoc y#0_5_2;
                    if (true)
                    {
                        $_Frame#l0_5_4 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_4, $o, alloc)): bool ==> false);
                        assume {:id "id235"} lambdaResult#0_5_4
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_5_3, g#0, $Box(x#0_5_1), $Box(y#0_5_2))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_4, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_3 := Lit(AtLayer((lambda $l#0_5_24#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_24#heap#0: Heap, $l#0_5_24#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_24#heap#0, 
                                g#0, 
                                $Box(x#0_5_1), 
                                $Box($Unbox($l#0_5_24#y#0): int))): int)), 
                        (lambda $l#0_5_24#heap#0: Heap, $l#0_5_24#y#0: Box :: 
                          $IsBox($l#0_5_24#y#0, TInt)), 
                        (lambda $l#0_5_24#heap#0: Heap, $l#0_5_24#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_24#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_3, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_5_3);
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_5_25#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_25#heap#0: Heap, $l#0_5_25#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_25#heap#0, 
                                  g#0, 
                                  $Box(x#0_5_1), 
                                  $Box($Unbox($l#0_5_25#y#0): int))): int)), 
                          (lambda $l#0_5_25#heap#0: Heap, $l#0_5_25#y#0: Box :: 
                            $IsBox($l#0_5_25#y#0, TInt)), 
                          (lambda $l#0_5_25#heap#0: Heap, $l#0_5_25#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_25#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id236"} lambdaResult#0_5_3
                   == _module.__default.Sum($LS($LZ), 
                    n#0, 
                    Lit(AtLayer((lambda $l#0_5_27#ly#0: LayerType :: 
                          Handle1((lambda $l#0_5_27#heap#0: Heap, $l#0_5_27#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_5_27#heap#0, 
                                    g#0, 
                                    $Box(x#0_5_1), 
                                    $Box($Unbox($l#0_5_27#y#0): int))): int)), 
                            (lambda $l#0_5_27#heap#0: Heap, $l#0_5_27#y#0: Box :: 
                              $IsBox($l#0_5_27#y#0, TInt)), 
                            (lambda $l#0_5_27#heap#0: Heap, $l#0_5_27#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_5_27#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n#0, 
                  Lit(AtLayer((lambda $l#0_5_29#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_29#heap#0: Heap, $l#0_5_29#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_29#heap#0, 
                                  g#0, 
                                  $Box(x#0_5_1), 
                                  $Box($Unbox($l#0_5_29#y#0): int))): int)), 
                          (lambda $l#0_5_29#heap#0: Heap, $l#0_5_29#y#0: Box :: 
                            $IsBox($l#0_5_29#y#0, TInt)), 
                          (lambda $l#0_5_29#heap#0: Heap, $l#0_5_29#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_29#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_5_3, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_5_30#x#0: int :: 
          _module.__default.Sum#canCall(n#0, 
            Lit(AtLayer((lambda $l#0_5_32#ly#0: LayerType :: 
                  Handle1((lambda $l#0_5_32#heap#0: Heap, $l#0_5_32#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_5_32#heap#0, 
                            g#0, 
                            $Box($l#0_5_30#x#0), 
                            $Box($Unbox($l#0_5_32#y#0): int))): int)), 
                    (lambda $l#0_5_32#heap#0: Heap, $l#0_5_32#y#0: Box :: 
                      $IsBox($l#0_5_32#y#0, TInt)), 
                    (lambda $l#0_5_32#heap#0: Heap, $l#0_5_32#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_5_32#o#0: ref :: false))))), 
                $LS($LZ)))));
        // ProcessCallStmt: CheckSubrange
        f##0_5_0 := Lit(AtLayer((lambda $l#0_5_33#ly#0: LayerType :: 
              Handle1((lambda $l#0_5_33#heap#0: Heap, $l#0_5_33#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_5_33#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_5_34#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_34#heap#0: Heap, $l#0_5_34#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_34#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_5_33#x#0): int), 
                                      $Box($Unbox($l#0_5_34#y#0): int))): int)), 
                              (lambda $l#0_5_34#heap#0: Heap, $l#0_5_34#y#0: Box :: 
                                $IsBox($l#0_5_34#y#0, TInt)), 
                              (lambda $l#0_5_34#heap#0: Heap, $l#0_5_34#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_34#o#0: ref :: false))))), 
                          $l#0_5_33#ly#0))))), 
                (lambda $l#0_5_33#heap#0: Heap, $l#0_5_33#x#0: Box :: 
                  $IsBox($l#0_5_33#x#0, TInt)), 
                (lambda $l#0_5_33#heap#0: Heap, $l#0_5_33#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_5_33#o#0: ref :: false))))), 
            $LS($LZ)));
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_5_5;
            assume $IsGoodHeap($lambdaHeap#0_5_5);
            assume $Heap == $lambdaHeap#0_5_5 || $HeapSucc($Heap, $lambdaHeap#0_5_5);
            havoc x#0_5_2;
            if (true)
            {
                $_Frame#l0_5_5 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_5_5, $o, alloc)): bool ==> false);
                ##n#0_5_4 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_4, Tclass._System.nat(), $lambdaHeap#0_5_5);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_6;
                    assume $IsGoodHeap($lambdaHeap#0_5_6);
                    assume $lambdaHeap#0_5_5 == $lambdaHeap#0_5_6
                       || $HeapSucc($lambdaHeap#0_5_5, $lambdaHeap#0_5_6);
                    havoc y#0_5_3;
                    if (true)
                    {
                        $_Frame#l0_5_6 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_6, $o, alloc)): bool ==> false);
                        assume {:id "id237"} lambdaResult#0_5_6
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_5_5, g#0, $Box(x#0_5_2), $Box(y#0_5_3))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_6, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_4 := Lit(AtLayer((lambda $l#0_5_36#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_36#heap#0: Heap, $l#0_5_36#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_36#heap#0, 
                                g#0, 
                                $Box(x#0_5_2), 
                                $Box($Unbox($l#0_5_36#y#0): int))): int)), 
                        (lambda $l#0_5_36#heap#0: Heap, $l#0_5_36#y#0: Box :: 
                          $IsBox($l#0_5_36#y#0, TInt)), 
                        (lambda $l#0_5_36#heap#0: Heap, $l#0_5_36#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_36#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_4, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_5_5);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_37#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_37#heap#0: Heap, $l#0_5_37#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_37#heap#0, 
                                  g#0, 
                                  $Box(x#0_5_2), 
                                  $Box($Unbox($l#0_5_37#y#0): int))): int)), 
                          (lambda $l#0_5_37#heap#0: Heap, $l#0_5_37#y#0: Box :: 
                            $IsBox($l#0_5_37#y#0, TInt)), 
                          (lambda $l#0_5_37#heap#0: Heap, $l#0_5_37#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_37#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id238"} lambdaResult#0_5_5
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#0_5_2), $Box(n'#0))): int
                     + _module.__default.Sum($LS($LZ), 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_5_39#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_39#heap#0: Heap, $l#0_5_39#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_39#heap#0, 
                                      g#0, 
                                      $Box(x#0_5_2), 
                                      $Box($Unbox($l#0_5_39#y#0): int))): int)), 
                              (lambda $l#0_5_39#heap#0: Heap, $l#0_5_39#y#0: Box :: 
                                $IsBox($l#0_5_39#y#0, TInt)), 
                              (lambda $l#0_5_39#heap#0: Heap, $l#0_5_39#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_39#o#0: ref :: false))))), 
                          $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_41#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_41#heap#0: Heap, $l#0_5_41#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_41#heap#0, 
                                  g#0, 
                                  $Box(x#0_5_2), 
                                  $Box($Unbox($l#0_5_41#y#0): int))): int)), 
                          (lambda $l#0_5_41#heap#0: Heap, $l#0_5_41#y#0: Box :: 
                            $IsBox($l#0_5_41#y#0, TInt)), 
                          (lambda $l#0_5_41#heap#0: Heap, $l#0_5_41#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_41#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_5_5, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_5_42#x#0: int :: 
          _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_5_44#ly#0: LayerType :: 
                  Handle1((lambda $l#0_5_44#heap#0: Heap, $l#0_5_44#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_5_44#heap#0, 
                            g#0, 
                            $Box($l#0_5_42#x#0), 
                            $Box($Unbox($l#0_5_44#y#0): int))): int)), 
                    (lambda $l#0_5_44#heap#0: Heap, $l#0_5_44#y#0: Box :: 
                      $IsBox($l#0_5_44#y#0, TInt)), 
                    (lambda $l#0_5_44#heap#0: Heap, $l#0_5_44#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_5_44#o#0: ref :: false))))), 
                $LS($LZ)))));
        // ProcessCallStmt: CheckSubrange
        g##0_5_0 := Lit(AtLayer((lambda $l#0_5_45#ly#0: LayerType :: 
              Handle1((lambda $l#0_5_45#heap#0: Heap, $l#0_5_45#x#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_5_45#heap#0, 
                          g#0, 
                          $Box($Unbox($l#0_5_45#x#0): int), 
                          $Box(n'#0))): int
                       + _module.__default.Sum($l#0_5_45#ly#0, 
                        n'#0, 
                        Lit(AtLayer((lambda $l#0_5_46#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_46#heap#0: Heap, $l#0_5_46#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_46#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_5_45#x#0): int), 
                                        $Box($Unbox($l#0_5_46#y#0): int))): int)), 
                                (lambda $l#0_5_46#heap#0: Heap, $l#0_5_46#y#0: Box :: 
                                  $IsBox($l#0_5_46#y#0, TInt)), 
                                (lambda $l#0_5_46#heap#0: Heap, $l#0_5_46#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_46#o#0: ref :: false))))), 
                            $l#0_5_45#ly#0))))), 
                (lambda $l#0_5_45#heap#0: Heap, $l#0_5_45#x#0: Box :: 
                  $IsBox($l#0_5_45#x#0, TInt)), 
                (lambda $l#0_5_45#heap#0: Heap, $l#0_5_45#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_5_45#o#0: ref :: false))))), 
            $LS($LZ)));
        call {:id "id239"} Call$$_module.__default.Exchange(n##0_5_0, f##0_5_0, g##0_5_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_5_5 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_5_5, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_5_7;
            assume $IsGoodHeap($lambdaHeap#0_5_7);
            assume $Heap == $lambdaHeap#0_5_7 || $HeapSucc($Heap, $lambdaHeap#0_5_7);
            havoc y#0_5_4;
            if (true)
            {
                $_Frame#l0_5_7 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_5_7, $o, alloc)): bool ==> false);
                assume {:id "id240"} lambdaResult#0_5_7
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_5_4))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_5_7, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_5_5 := Lit(AtLayer((lambda $l#0_5_48#ly#0: LayerType :: 
              Handle1((lambda $l#0_5_48#heap#0: Heap, $l#0_5_48#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_5_48#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_5_48#y#0): int))): int)), 
                (lambda $l#0_5_48#heap#0: Heap, $l#0_5_48#y#0: Box :: 
                  $IsBox($l#0_5_48#y#0, TInt)), 
                (lambda $l#0_5_48#heap#0: Heap, $l#0_5_48#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_5_48#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_5_5, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_5_49#ly#0: LayerType :: 
                Handle1((lambda $l#0_5_49#heap#0: Heap, $l#0_5_49#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_5_49#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_5_49#y#0): int))): int)), 
                  (lambda $l#0_5_49#heap#0: Heap, $l#0_5_49#y#0: Box :: 
                    $IsBox($l#0_5_49#y#0, TInt)), 
                  (lambda $l#0_5_49#heap#0: Heap, $l#0_5_49#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_5_49#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_5_6 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_5_6, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_5_8;
            assume $IsGoodHeap($lambdaHeap#0_5_8);
            assume $Heap == $lambdaHeap#0_5_8 || $HeapSucc($Heap, $lambdaHeap#0_5_8);
            havoc x#0_5_3;
            if (true)
            {
                $_Frame#l0_5_8 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_5_8, $o, alloc)): bool ==> false);
                ##n#0_5_7 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_5_7, Tclass._System.nat(), $lambdaHeap#0_5_8);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_5_9;
                    assume $IsGoodHeap($lambdaHeap#0_5_9);
                    assume $lambdaHeap#0_5_8 == $lambdaHeap#0_5_9
                       || $HeapSucc($lambdaHeap#0_5_8, $lambdaHeap#0_5_9);
                    havoc y#0_5_5;
                    if (true)
                    {
                        $_Frame#l0_5_9 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_5_9, $o, alloc)): bool ==> false);
                        assume {:id "id241"} lambdaResult#0_5_9
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_5_8, g#0, $Box(x#0_5_3), $Box(y#0_5_5))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_5_9, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_5_7 := Lit(AtLayer((lambda $l#0_5_51#ly#0: LayerType :: 
                      Handle1((lambda $l#0_5_51#heap#0: Heap, $l#0_5_51#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_51#heap#0, 
                                g#0, 
                                $Box(x#0_5_3), 
                                $Box($Unbox($l#0_5_51#y#0): int))): int)), 
                        (lambda $l#0_5_51#heap#0: Heap, $l#0_5_51#y#0: Box :: 
                          $IsBox($l#0_5_51#y#0, TInt)), 
                        (lambda $l#0_5_51#heap#0: Heap, $l#0_5_51#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_5_51#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_5_7, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_5_8);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_52#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_52#heap#0: Heap, $l#0_5_52#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_52#heap#0, 
                                  g#0, 
                                  $Box(x#0_5_3), 
                                  $Box($Unbox($l#0_5_52#y#0): int))): int)), 
                          (lambda $l#0_5_52#heap#0: Heap, $l#0_5_52#y#0: Box :: 
                            $IsBox($l#0_5_52#y#0, TInt)), 
                          (lambda $l#0_5_52#heap#0: Heap, $l#0_5_52#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_52#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id242"} lambdaResult#0_5_8
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#0_5_3), $Box(n'#0))): int
                     + _module.__default.Sum($LS($LZ), 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_5_54#ly#0: LayerType :: 
                            Handle1((lambda $l#0_5_54#heap#0: Heap, $l#0_5_54#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_5_54#heap#0, 
                                      g#0, 
                                      $Box(x#0_5_3), 
                                      $Box($Unbox($l#0_5_54#y#0): int))): int)), 
                              (lambda $l#0_5_54#heap#0: Heap, $l#0_5_54#y#0: Box :: 
                                $IsBox($l#0_5_54#y#0, TInt)), 
                              (lambda $l#0_5_54#heap#0: Heap, $l#0_5_54#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_5_54#o#0: ref :: false))))), 
                          $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_5_56#ly#0: LayerType :: 
                        Handle1((lambda $l#0_5_56#heap#0: Heap, $l#0_5_56#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_5_56#heap#0, 
                                  g#0, 
                                  $Box(x#0_5_3), 
                                  $Box($Unbox($l#0_5_56#y#0): int))): int)), 
                          (lambda $l#0_5_56#heap#0: Heap, $l#0_5_56#y#0: Box :: 
                            $IsBox($l#0_5_56#y#0, TInt)), 
                          (lambda $l#0_5_56#heap#0: Heap, $l#0_5_56#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_5_56#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_5_8, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_5_6 := Lit(AtLayer((lambda $l#0_5_59#ly#0: LayerType :: 
              Handle1((lambda $l#0_5_59#heap#0: Heap, $l#0_5_59#x#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_5_59#heap#0, 
                          g#0, 
                          $Box($Unbox($l#0_5_59#x#0): int), 
                          $Box(n'#0))): int
                       + _module.__default.Sum($l#0_5_59#ly#0, 
                        n'#0, 
                        Lit(AtLayer((lambda $l#0_5_60#ly#0: LayerType :: 
                              Handle1((lambda $l#0_5_60#heap#0: Heap, $l#0_5_60#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_5_60#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_5_59#x#0): int), 
                                        $Box($Unbox($l#0_5_60#y#0): int))): int)), 
                                (lambda $l#0_5_60#heap#0: Heap, $l#0_5_60#y#0: Box :: 
                                  $IsBox($l#0_5_60#y#0, TInt)), 
                                (lambda $l#0_5_60#heap#0: Heap, $l#0_5_60#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_5_60#o#0: ref :: false))))), 
                            $l#0_5_59#ly#0))))), 
                (lambda $l#0_5_59#heap#0: Heap, $l#0_5_59#x#0: Box :: 
                  $IsBox($l#0_5_59#x#0, TInt)), 
                (lambda $l#0_5_59#heap#0: Heap, $l#0_5_59#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_5_59#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_5_6, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_5_61#ly#0: LayerType :: 
                Handle1((lambda $l#0_5_61#heap#0: Heap, $l#0_5_61#x#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_5_61#heap#0, 
                            g#0, 
                            $Box($Unbox($l#0_5_61#x#0): int), 
                            $Box(n'#0))): int
                         + _module.__default.Sum($l#0_5_61#ly#0, 
                          n'#0, 
                          Lit(AtLayer((lambda $l#0_5_62#ly#0: LayerType :: 
                                Handle1((lambda $l#0_5_62#heap#0: Heap, $l#0_5_62#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_5_62#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_5_61#x#0): int), 
                                          $Box($Unbox($l#0_5_62#y#0): int))): int)), 
                                  (lambda $l#0_5_62#heap#0: Heap, $l#0_5_62#y#0: Box :: 
                                    $IsBox($l#0_5_62#y#0, TInt)), 
                                  (lambda $l#0_5_62#heap#0: Heap, $l#0_5_62#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_5_62#o#0: ref :: false))))), 
                              $l#0_5_61#ly#0))))), 
                  (lambda $l#0_5_61#heap#0: Heap, $l#0_5_61#x#0: Box :: 
                    $IsBox($l#0_5_61#x#0, TInt)), 
                  (lambda $l#0_5_61#heap#0: Heap, $l#0_5_61#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_5_61#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_5_64#ly#0: LayerType :: 
                  Handle1((lambda $l#0_5_64#heap#0: Heap, $l#0_5_64#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_5_64#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_5_64#y#0): int))): int)), 
                    (lambda $l#0_5_64#heap#0: Heap, $l#0_5_64#y#0: Box :: 
                      $IsBox($l#0_5_64#y#0, TInt)), 
                    (lambda $l#0_5_64#heap#0: Heap, $l#0_5_64#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_5_64#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_5_65#x#0: int :: 
            _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#0_5_67#ly#0: LayerType :: 
                    Handle1((lambda $l#0_5_67#heap#0: Heap, $l#0_5_67#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_5_67#heap#0, 
                              g#0, 
                              $Box($l#0_5_65#x#0), 
                              $Box($Unbox($l#0_5_67#y#0): int))): int)), 
                      (lambda $l#0_5_67#heap#0: Heap, $l#0_5_67#y#0: Box :: 
                        $IsBox($l#0_5_67#y#0, TInt)), 
                      (lambda $l#0_5_67#heap#0: Heap, $l#0_5_67#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_5_67#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_5_68#ly#0: LayerType :: 
                  Handle1((lambda $l#0_5_68#heap#0: Heap, $l#0_5_68#x#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_5_68#heap#0, 
                              g#0, 
                              $Box($Unbox($l#0_5_68#x#0): int), 
                              $Box(n'#0))): int
                           + _module.__default.Sum($l#0_5_68#ly#0, 
                            n'#0, 
                            Lit(AtLayer((lambda $l#0_5_69#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_5_69#heap#0: Heap, $l#0_5_69#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_5_69#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_5_68#x#0): int), 
                                            $Box($Unbox($l#0_5_69#y#0): int))): int)), 
                                    (lambda $l#0_5_69#heap#0: Heap, $l#0_5_69#y#0: Box :: 
                                      $IsBox($l#0_5_69#y#0, TInt)), 
                                    (lambda $l#0_5_69#heap#0: Heap, $l#0_5_69#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_5_69#o#0: ref :: false))))), 
                                $l#0_5_68#ly#0))))), 
                    (lambda $l#0_5_68#heap#0: Heap, $l#0_5_68#x#0: Box :: 
                      $IsBox($l#0_5_68#x#0, TInt)), 
                    (lambda $l#0_5_68#heap#0: Heap, $l#0_5_68#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_5_68#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id243"} {:subsumption 0} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_5_70#ly#0: LayerType :: 
                    Handle1((lambda $l#0_5_70#heap#0: Heap, $l#0_5_70#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_5_70#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_5_70#y#0): int))): int)), 
                      (lambda $l#0_5_70#heap#0: Heap, $l#0_5_70#y#0: Box :: 
                        $IsBox($l#0_5_70#y#0, TInt)), 
                      (lambda $l#0_5_70#heap#0: Heap, $l#0_5_70#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_5_70#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_5_71#ly#0: LayerType :: 
                    Handle1((lambda $l#0_5_71#heap#0: Heap, $l#0_5_71#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_5_71#ly#0, 
                            n#0, 
                            Lit(AtLayer((lambda $l#0_5_72#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_5_72#heap#0: Heap, $l#0_5_72#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_5_72#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_5_71#x#0): int), 
                                            $Box($Unbox($l#0_5_72#y#0): int))): int)), 
                                    (lambda $l#0_5_72#heap#0: Heap, $l#0_5_72#y#0: Box :: 
                                      $IsBox($l#0_5_72#y#0, TInt)), 
                                    (lambda $l#0_5_72#heap#0: Heap, $l#0_5_72#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_5_72#o#0: ref :: false))))), 
                                $l#0_5_71#ly#0))))), 
                      (lambda $l#0_5_71#heap#0: Heap, $l#0_5_71#x#0: Box :: 
                        $IsBox($l#0_5_71#x#0, TInt)), 
                      (lambda $l#0_5_71#heap#0: Heap, $l#0_5_71#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_5_71#o#0: ref :: false))))), 
                  $LS($LZ))))
           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_5_73#ly#0: LayerType :: 
                    Handle1((lambda $l#0_5_73#heap#0: Heap, $l#0_5_73#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_5_73#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_5_73#y#0): int))): int)), 
                      (lambda $l#0_5_73#heap#0: Heap, $l#0_5_73#y#0: Box :: 
                        $IsBox($l#0_5_73#y#0, TInt)), 
                      (lambda $l#0_5_73#heap#0: Heap, $l#0_5_73#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_5_73#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_5_74#ly#0: LayerType :: 
                    Handle1((lambda $l#0_5_74#heap#0: Heap, $l#0_5_74#x#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_5_74#heap#0, 
                                g#0, 
                                $Box($Unbox($l#0_5_74#x#0): int), 
                                $Box(n'#0))): int
                             + _module.__default.Sum($l#0_5_74#ly#0, 
                              n'#0, 
                              Lit(AtLayer((lambda $l#0_5_75#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_5_75#heap#0: Heap, $l#0_5_75#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_5_75#heap#0, 
                                              g#0, 
                                              $Box($Unbox($l#0_5_74#x#0): int), 
                                              $Box($Unbox($l#0_5_75#y#0): int))): int)), 
                                      (lambda $l#0_5_75#heap#0: Heap, $l#0_5_75#y#0: Box :: 
                                        $IsBox($l#0_5_75#y#0, TInt)), 
                                      (lambda $l#0_5_75#heap#0: Heap, $l#0_5_75#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_5_75#o#0: ref :: false))))), 
                                  $l#0_5_74#ly#0))))), 
                      (lambda $l#0_5_74#heap#0: Heap, $l#0_5_74#x#0: Box :: 
                        $IsBox($l#0_5_74#x#0, TInt)), 
                      (lambda $l#0_5_74#heap#0: Heap, $l#0_5_74#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_5_74#o#0: ref :: false))))), 
                  $LS($LZ))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_4_0 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_4_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_4_0;
            assume $IsGoodHeap($lambdaHeap#0_4_0);
            assume $Heap == $lambdaHeap#0_4_0 || $HeapSucc($Heap, $lambdaHeap#0_4_0);
            havoc y#0_4_0;
            if (true)
            {
                $_Frame#l0_4_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_4_0, $o, alloc)): bool ==> false);
                assume {:id "id193"} lambdaResult#0_4_0
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_4_0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_4_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_4_0 := Lit(AtLayer((lambda $l#0_4_1#ly#0: LayerType :: 
              Handle1((lambda $l#0_4_1#heap#0: Heap, $l#0_4_1#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_4_1#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_4_1#y#0): int))): int)), 
                (lambda $l#0_4_1#heap#0: Heap, $l#0_4_1#y#0: Box :: $IsBox($l#0_4_1#y#0, TInt)), 
                (lambda $l#0_4_1#heap#0: Heap, $l#0_4_1#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_4_1#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_4_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_4_2#ly#0: LayerType :: 
                Handle1((lambda $l#0_4_2#heap#0: Heap, $l#0_4_2#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_4_2#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_4_2#y#0): int))): int)), 
                  (lambda $l#0_4_2#heap#0: Heap, $l#0_4_2#y#0: Box :: $IsBox($l#0_4_2#y#0, TInt)), 
                  (lambda $l#0_4_2#heap#0: Heap, $l#0_4_2#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_4_2#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_4_1 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_4_1, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_4_1;
            assume $IsGoodHeap($lambdaHeap#0_4_1);
            assume $Heap == $lambdaHeap#0_4_1 || $HeapSucc($Heap, $lambdaHeap#0_4_1);
            havoc x#0_4_0;
            if (true)
            {
                $_Frame#l0_4_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_4_1, $o, alloc)): bool ==> false);
                ##n#0_4_2 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_4_2, Tclass._System.nat(), $lambdaHeap#0_4_1);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_4_2;
                    assume $IsGoodHeap($lambdaHeap#0_4_2);
                    assume $lambdaHeap#0_4_1 == $lambdaHeap#0_4_2
                       || $HeapSucc($lambdaHeap#0_4_1, $lambdaHeap#0_4_2);
                    havoc y#0_4_1;
                    if (true)
                    {
                        $_Frame#l0_4_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_4_2, $o, alloc)): bool ==> false);
                        assume {:id "id194"} lambdaResult#0_4_2
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_4_1, g#0, $Box(x#0_4_0), $Box(y#0_4_1))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_4_2, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_4_2 := Lit(AtLayer((lambda $l#0_4_4#ly#0: LayerType :: 
                      Handle1((lambda $l#0_4_4#heap#0: Heap, $l#0_4_4#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_4_4#heap#0, 
                                g#0, 
                                $Box(x#0_4_0), 
                                $Box($Unbox($l#0_4_4#y#0): int))): int)), 
                        (lambda $l#0_4_4#heap#0: Heap, $l#0_4_4#y#0: Box :: $IsBox($l#0_4_4#y#0, TInt)), 
                        (lambda $l#0_4_4#heap#0: Heap, $l#0_4_4#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_4_4#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_4_2, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_4_1);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_4_5#ly#0: LayerType :: 
                        Handle1((lambda $l#0_4_5#heap#0: Heap, $l#0_4_5#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_4_5#heap#0, 
                                  g#0, 
                                  $Box(x#0_4_0), 
                                  $Box($Unbox($l#0_4_5#y#0): int))): int)), 
                          (lambda $l#0_4_5#heap#0: Heap, $l#0_4_5#y#0: Box :: $IsBox($l#0_4_5#y#0, TInt)), 
                          (lambda $l#0_4_5#heap#0: Heap, $l#0_4_5#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_4_5#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id195"} lambdaResult#0_4_1
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#0_4_0), $Box(n'#0))): int
                     + _module.__default.Sum($LS($LZ), 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_4_7#ly#0: LayerType :: 
                            Handle1((lambda $l#0_4_7#heap#0: Heap, $l#0_4_7#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_4_7#heap#0, 
                                      g#0, 
                                      $Box(x#0_4_0), 
                                      $Box($Unbox($l#0_4_7#y#0): int))): int)), 
                              (lambda $l#0_4_7#heap#0: Heap, $l#0_4_7#y#0: Box :: $IsBox($l#0_4_7#y#0, TInt)), 
                              (lambda $l#0_4_7#heap#0: Heap, $l#0_4_7#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_4_7#o#0: ref :: false))))), 
                          $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_4_9#ly#0: LayerType :: 
                        Handle1((lambda $l#0_4_9#heap#0: Heap, $l#0_4_9#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_4_9#heap#0, 
                                  g#0, 
                                  $Box(x#0_4_0), 
                                  $Box($Unbox($l#0_4_9#y#0): int))): int)), 
                          (lambda $l#0_4_9#heap#0: Heap, $l#0_4_9#y#0: Box :: $IsBox($l#0_4_9#y#0, TInt)), 
                          (lambda $l#0_4_9#heap#0: Heap, $l#0_4_9#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_4_9#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_4_1, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_4_1 := Lit(AtLayer((lambda $l#0_4_12#ly#0: LayerType :: 
              Handle1((lambda $l#0_4_12#heap#0: Heap, $l#0_4_12#x#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_4_12#heap#0, 
                          g#0, 
                          $Box($Unbox($l#0_4_12#x#0): int), 
                          $Box(n'#0))): int
                       + _module.__default.Sum($l#0_4_12#ly#0, 
                        n'#0, 
                        Lit(AtLayer((lambda $l#0_4_13#ly#0: LayerType :: 
                              Handle1((lambda $l#0_4_13#heap#0: Heap, $l#0_4_13#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_4_13#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_4_12#x#0): int), 
                                        $Box($Unbox($l#0_4_13#y#0): int))): int)), 
                                (lambda $l#0_4_13#heap#0: Heap, $l#0_4_13#y#0: Box :: 
                                  $IsBox($l#0_4_13#y#0, TInt)), 
                                (lambda $l#0_4_13#heap#0: Heap, $l#0_4_13#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_4_13#o#0: ref :: false))))), 
                            $l#0_4_12#ly#0))))), 
                (lambda $l#0_4_12#heap#0: Heap, $l#0_4_12#x#0: Box :: 
                  $IsBox($l#0_4_12#x#0, TInt)), 
                (lambda $l#0_4_12#heap#0: Heap, $l#0_4_12#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_4_12#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_4_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_4_14#ly#0: LayerType :: 
                Handle1((lambda $l#0_4_14#heap#0: Heap, $l#0_4_14#x#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_4_14#heap#0, 
                            g#0, 
                            $Box($Unbox($l#0_4_14#x#0): int), 
                            $Box(n'#0))): int
                         + _module.__default.Sum($l#0_4_14#ly#0, 
                          n'#0, 
                          Lit(AtLayer((lambda $l#0_4_15#ly#0: LayerType :: 
                                Handle1((lambda $l#0_4_15#heap#0: Heap, $l#0_4_15#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_4_15#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_4_14#x#0): int), 
                                          $Box($Unbox($l#0_4_15#y#0): int))): int)), 
                                  (lambda $l#0_4_15#heap#0: Heap, $l#0_4_15#y#0: Box :: 
                                    $IsBox($l#0_4_15#y#0, TInt)), 
                                  (lambda $l#0_4_15#heap#0: Heap, $l#0_4_15#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_4_15#o#0: ref :: false))))), 
                              $l#0_4_14#ly#0))))), 
                  (lambda $l#0_4_14#heap#0: Heap, $l#0_4_14#x#0: Box :: 
                    $IsBox($l#0_4_14#x#0, TInt)), 
                  (lambda $l#0_4_14#heap#0: Heap, $l#0_4_14#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_4_14#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_4_17#ly#0: LayerType :: 
                  Handle1((lambda $l#0_4_17#heap#0: Heap, $l#0_4_17#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_4_17#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_4_17#y#0): int))): int)), 
                    (lambda $l#0_4_17#heap#0: Heap, $l#0_4_17#y#0: Box :: 
                      $IsBox($l#0_4_17#y#0, TInt)), 
                    (lambda $l#0_4_17#heap#0: Heap, $l#0_4_17#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_4_17#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_4_18#x#0: int :: 
            _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#0_4_20#ly#0: LayerType :: 
                    Handle1((lambda $l#0_4_20#heap#0: Heap, $l#0_4_20#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_4_20#heap#0, 
                              g#0, 
                              $Box($l#0_4_18#x#0), 
                              $Box($Unbox($l#0_4_20#y#0): int))): int)), 
                      (lambda $l#0_4_20#heap#0: Heap, $l#0_4_20#y#0: Box :: 
                        $IsBox($l#0_4_20#y#0, TInt)), 
                      (lambda $l#0_4_20#heap#0: Heap, $l#0_4_20#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_4_20#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_4_21#ly#0: LayerType :: 
                  Handle1((lambda $l#0_4_21#heap#0: Heap, $l#0_4_21#x#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_4_21#heap#0, 
                              g#0, 
                              $Box($Unbox($l#0_4_21#x#0): int), 
                              $Box(n'#0))): int
                           + _module.__default.Sum($l#0_4_21#ly#0, 
                            n'#0, 
                            Lit(AtLayer((lambda $l#0_4_22#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_4_22#heap#0: Heap, $l#0_4_22#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_4_22#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_4_21#x#0): int), 
                                            $Box($Unbox($l#0_4_22#y#0): int))): int)), 
                                    (lambda $l#0_4_22#heap#0: Heap, $l#0_4_22#y#0: Box :: 
                                      $IsBox($l#0_4_22#y#0, TInt)), 
                                    (lambda $l#0_4_22#heap#0: Heap, $l#0_4_22#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_4_22#o#0: ref :: false))))), 
                                $l#0_4_21#ly#0))))), 
                    (lambda $l#0_4_21#heap#0: Heap, $l#0_4_21#x#0: Box :: 
                      $IsBox($l#0_4_21#x#0, TInt)), 
                    (lambda $l#0_4_21#heap#0: Heap, $l#0_4_21#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_4_21#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(122,26)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        n'##0_4_0 := n'#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        g##0_4_0 := g#0;
        call {:id "id196"} Call$$_module.__default.BetaReductionInside(n'##0_4_0, g##0_4_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_4_3 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_4_3, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_4_3;
            assume $IsGoodHeap($lambdaHeap#0_4_3);
            assume $Heap == $lambdaHeap#0_4_3 || $HeapSucc($Heap, $lambdaHeap#0_4_3);
            havoc y#0_4_2;
            if (true)
            {
                $_Frame#l0_4_3 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_4_3, $o, alloc)): bool ==> false);
                assume {:id "id197"} lambdaResult#0_4_3
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_4_2))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_4_3, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_4_3 := Lit(AtLayer((lambda $l#0_4_24#ly#0: LayerType :: 
              Handle1((lambda $l#0_4_24#heap#0: Heap, $l#0_4_24#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_4_24#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_4_24#y#0): int))): int)), 
                (lambda $l#0_4_24#heap#0: Heap, $l#0_4_24#y#0: Box :: 
                  $IsBox($l#0_4_24#y#0, TInt)), 
                (lambda $l#0_4_24#heap#0: Heap, $l#0_4_24#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_4_24#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_4_3, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_4_25#ly#0: LayerType :: 
                Handle1((lambda $l#0_4_25#heap#0: Heap, $l#0_4_25#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_4_25#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_4_25#y#0): int))): int)), 
                  (lambda $l#0_4_25#heap#0: Heap, $l#0_4_25#y#0: Box :: 
                    $IsBox($l#0_4_25#y#0, TInt)), 
                  (lambda $l#0_4_25#heap#0: Heap, $l#0_4_25#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_4_25#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_4_4 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_4_4, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_4_4;
            assume $IsGoodHeap($lambdaHeap#0_4_4);
            assume $Heap == $lambdaHeap#0_4_4 || $HeapSucc($Heap, $lambdaHeap#0_4_4);
            havoc x#0_4_1;
            if (true)
            {
                $_Frame#l0_4_4 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_4_4, $o, alloc)): bool ==> false);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_4_5;
                    assume $IsGoodHeap($lambdaHeap#0_4_5);
                    assume $lambdaHeap#0_4_4 == $lambdaHeap#0_4_5
                       || $HeapSucc($lambdaHeap#0_4_4, $lambdaHeap#0_4_5);
                    havoc w#0_4_0;
                    if (true)
                    {
                        $_Frame#l0_4_5 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_4_5, $o, alloc)): bool ==> false);
                        assume {:id "id198"} lambdaResult#0_4_5
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_4_4, g#0, $Box(w#0_4_0), $Box(n'#0))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_4_5, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_4_6;
                    assume $IsGoodHeap($lambdaHeap#0_4_6);
                    assume $lambdaHeap#0_4_4 == $lambdaHeap#0_4_6
                       || $HeapSucc($lambdaHeap#0_4_4, $lambdaHeap#0_4_6);
                    havoc w#0_4_1;
                    if (true)
                    {
                        $_Frame#l0_4_6 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_4_6, $o, alloc)): bool ==> false);
                        ##n#0_4_5 := n'#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##n#0_4_5, Tclass._System.nat(), $lambdaHeap#0_4_6);
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_4_7;
                            assume $IsGoodHeap($lambdaHeap#0_4_7);
                            assume $lambdaHeap#0_4_6 == $lambdaHeap#0_4_7
                               || $HeapSucc($lambdaHeap#0_4_6, $lambdaHeap#0_4_7);
                            havoc y#0_4_3;
                            if (true)
                            {
                                $_Frame#l0_4_7 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_4_7, $o, alloc)): bool ==> false);
                                assume {:id "id199"} lambdaResult#0_4_7
                                   == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_4_6, g#0, $Box(w#0_4_1), $Box(y#0_4_3))): int;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_4_7, TInt);
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        ##f#0_4_5 := Lit(AtLayer((lambda $l#0_4_28#ly#0: LayerType :: 
                              Handle1((lambda $l#0_4_28#heap#0: Heap, $l#0_4_28#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_4_28#heap#0, 
                                        g#0, 
                                        $Box(w#0_4_1), 
                                        $Box($Unbox($l#0_4_28#y#0): int))): int)), 
                                (lambda $l#0_4_28#heap#0: Heap, $l#0_4_28#y#0: Box :: 
                                  $IsBox($l#0_4_28#y#0, TInt)), 
                                (lambda $l#0_4_28#heap#0: Heap, $l#0_4_28#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_4_28#o#0: ref :: false))))), 
                            $LS($LZ)));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_4_5, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_4_6);
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_4_29#ly#0: LayerType :: 
                                Handle1((lambda $l#0_4_29#heap#0: Heap, $l#0_4_29#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_4_29#heap#0, 
                                          g#0, 
                                          $Box(w#0_4_1), 
                                          $Box($Unbox($l#0_4_29#y#0): int))): int)), 
                                  (lambda $l#0_4_29#heap#0: Heap, $l#0_4_29#y#0: Box :: 
                                    $IsBox($l#0_4_29#y#0, TInt)), 
                                  (lambda $l#0_4_29#heap#0: Heap, $l#0_4_29#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_4_29#o#0: ref :: false))))), 
                              $LS($LZ))));
                        assume {:id "id200"} lambdaResult#0_4_6
                           == _module.__default.Sum($LS($LZ), 
                            n'#0, 
                            Lit(AtLayer((lambda $l#0_4_31#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_4_31#heap#0: Heap, $l#0_4_31#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_4_31#heap#0, 
                                            g#0, 
                                            $Box(w#0_4_1), 
                                            $Box($Unbox($l#0_4_31#y#0): int))): int)), 
                                    (lambda $l#0_4_31#heap#0: Heap, $l#0_4_31#y#0: Box :: 
                                      $IsBox($l#0_4_31#y#0, TInt)), 
                                    (lambda $l#0_4_31#heap#0: Heap, $l#0_4_31#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_4_31#o#0: ref :: false))))), 
                                $LS($LZ))));
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_4_33#ly#0: LayerType :: 
                                Handle1((lambda $l#0_4_33#heap#0: Heap, $l#0_4_33#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_4_33#heap#0, 
                                          g#0, 
                                          $Box(w#0_4_1), 
                                          $Box($Unbox($l#0_4_33#y#0): int))): int)), 
                                  (lambda $l#0_4_33#heap#0: Heap, $l#0_4_33#y#0: Box :: 
                                    $IsBox($l#0_4_33#y#0, TInt)), 
                                  (lambda $l#0_4_33#heap#0: Heap, $l#0_4_33#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_4_33#o#0: ref :: false))))), 
                              $LS($LZ))));
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_4_6, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                assume {:id "id201"} lambdaResult#0_4_4
                   == $Unbox(Apply1(TInt, 
                        TInt, 
                        $Heap, 
                        Lit(AtLayer((lambda $l#0_4_39#ly#0: LayerType :: 
                              Handle1((lambda $l#0_4_39#heap#0: Heap, $l#0_4_39#w#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_4_39#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_4_39#w#0): int), 
                                        $Box(n'#0))): int)), 
                                (lambda $l#0_4_39#heap#0: Heap, $l#0_4_39#w#0: Box :: 
                                  $IsBox($l#0_4_39#w#0, TInt)), 
                                (lambda $l#0_4_39#heap#0: Heap, $l#0_4_39#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_4_39#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box(x#0_4_1))): int
                     + $Unbox(Apply1(TInt, 
                        TInt, 
                        $Heap, 
                        Lit(AtLayer((lambda $l#0_4_40#ly#0: LayerType :: 
                              Handle1((lambda $l#0_4_40#heap#0: Heap, $l#0_4_40#w#0: Box :: 
                                  $Box(_module.__default.Sum($l#0_4_40#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#0_4_41#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_4_41#heap#0: Heap, $l#0_4_41#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#0_4_41#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#0_4_40#w#0): int), 
                                                      $Box($Unbox($l#0_4_41#y#0): int))): int)), 
                                              (lambda $l#0_4_41#heap#0: Heap, $l#0_4_41#y#0: Box :: 
                                                $IsBox($l#0_4_41#y#0, TInt)), 
                                              (lambda $l#0_4_41#heap#0: Heap, $l#0_4_41#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_4_41#o#0: ref :: false))))), 
                                          $l#0_4_40#ly#0))))), 
                                (lambda $l#0_4_40#heap#0: Heap, $l#0_4_40#w#0: Box :: 
                                  $IsBox($l#0_4_40#w#0, TInt)), 
                                (lambda $l#0_4_40#heap#0: Heap, $l#0_4_40#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_4_40#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box(x#0_4_1))): int;
                assume (forall $l#0_4_43#w#0: int :: 
                  _module.__default.Sum#canCall(n'#0, 
                    Lit(AtLayer((lambda $l#0_4_45#ly#0: LayerType :: 
                          Handle1((lambda $l#0_4_45#heap#0: Heap, $l#0_4_45#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_4_45#heap#0, 
                                    g#0, 
                                    $Box($l#0_4_43#w#0), 
                                    $Box($Unbox($l#0_4_45#y#0): int))): int)), 
                            (lambda $l#0_4_45#heap#0: Heap, $l#0_4_45#y#0: Box :: 
                              $IsBox($l#0_4_45#y#0, TInt)), 
                            (lambda $l#0_4_45#heap#0: Heap, $l#0_4_45#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_4_45#o#0: ref :: false))))), 
                        $LS($LZ)))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_4_4, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_4_4 := Lit(AtLayer((lambda $l#0_4_50#ly#0: LayerType :: 
              Handle1((lambda $l#0_4_50#heap#0: Heap, $l#0_4_50#x#0: Box :: 
                  $Box($Unbox(Apply1(TInt, 
                          TInt, 
                          $l#0_4_50#heap#0, 
                          Lit(AtLayer((lambda $l#0_4_51#ly#0: LayerType :: 
                                Handle1((lambda $l#0_4_51#heap#0: Heap, $l#0_4_51#w#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_4_51#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_4_51#w#0): int), 
                                          $Box(n'#0))): int)), 
                                  (lambda $l#0_4_51#heap#0: Heap, $l#0_4_51#w#0: Box :: 
                                    $IsBox($l#0_4_51#w#0, TInt)), 
                                  (lambda $l#0_4_51#heap#0: Heap, $l#0_4_51#w#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_4_51#o#0: ref :: false))))), 
                              $l#0_4_50#ly#0)), 
                          $Box($Unbox($l#0_4_50#x#0): int))): int
                       + $Unbox(Apply1(TInt, 
                          TInt, 
                          $l#0_4_50#heap#0, 
                          Lit(AtLayer((lambda $l#0_4_52#ly#0: LayerType :: 
                                Handle1((lambda $l#0_4_52#heap#0: Heap, $l#0_4_52#w#0: Box :: 
                                    $Box(_module.__default.Sum($l#0_4_52#ly#0, 
                                        n'#0, 
                                        Lit(AtLayer((lambda $l#0_4_53#ly#0: LayerType :: 
                                              Handle1((lambda $l#0_4_53#heap#0: Heap, $l#0_4_53#y#0: Box :: 
                                                  $Box($Unbox(Apply2(TInt, 
                                                        TInt, 
                                                        TInt, 
                                                        $l#0_4_53#heap#0, 
                                                        g#0, 
                                                        $Box($Unbox($l#0_4_52#w#0): int), 
                                                        $Box($Unbox($l#0_4_53#y#0): int))): int)), 
                                                (lambda $l#0_4_53#heap#0: Heap, $l#0_4_53#y#0: Box :: 
                                                  $IsBox($l#0_4_53#y#0, TInt)), 
                                                (lambda $l#0_4_53#heap#0: Heap, $l#0_4_53#y#0: Box :: 
                                                  SetRef_to_SetBox((lambda $l#0_4_53#o#0: ref :: false))))), 
                                            $l#0_4_52#ly#0))))), 
                                  (lambda $l#0_4_52#heap#0: Heap, $l#0_4_52#w#0: Box :: 
                                    $IsBox($l#0_4_52#w#0, TInt)), 
                                  (lambda $l#0_4_52#heap#0: Heap, $l#0_4_52#w#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_4_52#o#0: ref :: false))))), 
                              $l#0_4_50#ly#0)), 
                          $Box($Unbox($l#0_4_50#x#0): int))): int)), 
                (lambda $l#0_4_50#heap#0: Heap, $l#0_4_50#x#0: Box :: 
                  $IsBox($l#0_4_50#x#0, TInt)), 
                (lambda $l#0_4_50#heap#0: Heap, $l#0_4_50#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_4_50#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_4_4, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_4_54#ly#0: LayerType :: 
                Handle1((lambda $l#0_4_54#heap#0: Heap, $l#0_4_54#x#0: Box :: 
                    $Box($Unbox(Apply1(TInt, 
                            TInt, 
                            $l#0_4_54#heap#0, 
                            Lit(AtLayer((lambda $l#0_4_55#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_4_55#heap#0: Heap, $l#0_4_55#w#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_4_55#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_4_55#w#0): int), 
                                            $Box(n'#0))): int)), 
                                    (lambda $l#0_4_55#heap#0: Heap, $l#0_4_55#w#0: Box :: 
                                      $IsBox($l#0_4_55#w#0, TInt)), 
                                    (lambda $l#0_4_55#heap#0: Heap, $l#0_4_55#w#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_4_55#o#0: ref :: false))))), 
                                $l#0_4_54#ly#0)), 
                            $Box($Unbox($l#0_4_54#x#0): int))): int
                         + $Unbox(Apply1(TInt, 
                            TInt, 
                            $l#0_4_54#heap#0, 
                            Lit(AtLayer((lambda $l#0_4_56#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_4_56#heap#0: Heap, $l#0_4_56#w#0: Box :: 
                                      $Box(_module.__default.Sum($l#0_4_56#ly#0, 
                                          n'#0, 
                                          Lit(AtLayer((lambda $l#0_4_57#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_4_57#heap#0: Heap, $l#0_4_57#y#0: Box :: 
                                                    $Box($Unbox(Apply2(TInt, 
                                                          TInt, 
                                                          TInt, 
                                                          $l#0_4_57#heap#0, 
                                                          g#0, 
                                                          $Box($Unbox($l#0_4_56#w#0): int), 
                                                          $Box($Unbox($l#0_4_57#y#0): int))): int)), 
                                                  (lambda $l#0_4_57#heap#0: Heap, $l#0_4_57#y#0: Box :: 
                                                    $IsBox($l#0_4_57#y#0, TInt)), 
                                                  (lambda $l#0_4_57#heap#0: Heap, $l#0_4_57#y#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_4_57#o#0: ref :: false))))), 
                                              $l#0_4_56#ly#0))))), 
                                    (lambda $l#0_4_56#heap#0: Heap, $l#0_4_56#w#0: Box :: 
                                      $IsBox($l#0_4_56#w#0, TInt)), 
                                    (lambda $l#0_4_56#heap#0: Heap, $l#0_4_56#w#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_4_56#o#0: ref :: false))))), 
                                $l#0_4_54#ly#0)), 
                            $Box($Unbox($l#0_4_54#x#0): int))): int)), 
                  (lambda $l#0_4_54#heap#0: Heap, $l#0_4_54#x#0: Box :: 
                    $IsBox($l#0_4_54#x#0, TInt)), 
                  (lambda $l#0_4_54#heap#0: Heap, $l#0_4_54#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_4_54#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_4_59#ly#0: LayerType :: 
                  Handle1((lambda $l#0_4_59#heap#0: Heap, $l#0_4_59#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_4_59#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_4_59#y#0): int))): int)), 
                    (lambda $l#0_4_59#heap#0: Heap, $l#0_4_59#y#0: Box :: 
                      $IsBox($l#0_4_59#y#0, TInt)), 
                    (lambda $l#0_4_59#heap#0: Heap, $l#0_4_59#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_4_59#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_4_62#w#0: int :: 
            _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#0_4_64#ly#0: LayerType :: 
                    Handle1((lambda $l#0_4_64#heap#0: Heap, $l#0_4_64#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_4_64#heap#0, 
                              g#0, 
                              $Box($l#0_4_62#w#0), 
                              $Box($Unbox($l#0_4_64#y#0): int))): int)), 
                      (lambda $l#0_4_64#heap#0: Heap, $l#0_4_64#y#0: Box :: 
                        $IsBox($l#0_4_64#y#0, TInt)), 
                      (lambda $l#0_4_64#heap#0: Heap, $l#0_4_64#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_4_64#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_4_65#ly#0: LayerType :: 
                  Handle1((lambda $l#0_4_65#heap#0: Heap, $l#0_4_65#x#0: Box :: 
                      $Box($Unbox(Apply1(TInt, 
                              TInt, 
                              $l#0_4_65#heap#0, 
                              Lit(AtLayer((lambda $l#0_4_66#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_4_66#heap#0: Heap, $l#0_4_66#w#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_4_66#heap#0, 
                                              g#0, 
                                              $Box($Unbox($l#0_4_66#w#0): int), 
                                              $Box(n'#0))): int)), 
                                      (lambda $l#0_4_66#heap#0: Heap, $l#0_4_66#w#0: Box :: 
                                        $IsBox($l#0_4_66#w#0, TInt)), 
                                      (lambda $l#0_4_66#heap#0: Heap, $l#0_4_66#w#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_4_66#o#0: ref :: false))))), 
                                  $l#0_4_65#ly#0)), 
                              $Box($Unbox($l#0_4_65#x#0): int))): int
                           + $Unbox(Apply1(TInt, 
                              TInt, 
                              $l#0_4_65#heap#0, 
                              Lit(AtLayer((lambda $l#0_4_67#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_4_67#heap#0: Heap, $l#0_4_67#w#0: Box :: 
                                        $Box(_module.__default.Sum($l#0_4_67#ly#0, 
                                            n'#0, 
                                            Lit(AtLayer((lambda $l#0_4_68#ly#0: LayerType :: 
                                                  Handle1((lambda $l#0_4_68#heap#0: Heap, $l#0_4_68#y#0: Box :: 
                                                      $Box($Unbox(Apply2(TInt, 
                                                            TInt, 
                                                            TInt, 
                                                            $l#0_4_68#heap#0, 
                                                            g#0, 
                                                            $Box($Unbox($l#0_4_67#w#0): int), 
                                                            $Box($Unbox($l#0_4_68#y#0): int))): int)), 
                                                    (lambda $l#0_4_68#heap#0: Heap, $l#0_4_68#y#0: Box :: 
                                                      $IsBox($l#0_4_68#y#0, TInt)), 
                                                    (lambda $l#0_4_68#heap#0: Heap, $l#0_4_68#y#0: Box :: 
                                                      SetRef_to_SetBox((lambda $l#0_4_68#o#0: ref :: false))))), 
                                                $l#0_4_67#ly#0))))), 
                                      (lambda $l#0_4_67#heap#0: Heap, $l#0_4_67#w#0: Box :: 
                                        $IsBox($l#0_4_67#w#0, TInt)), 
                                      (lambda $l#0_4_67#heap#0: Heap, $l#0_4_67#w#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_4_67#o#0: ref :: false))))), 
                                  $l#0_4_65#ly#0)), 
                              $Box($Unbox($l#0_4_65#x#0): int))): int)), 
                    (lambda $l#0_4_65#heap#0: Heap, $l#0_4_65#x#0: Box :: 
                      $IsBox($l#0_4_65#x#0, TInt)), 
                    (lambda $l#0_4_65#heap#0: Heap, $l#0_4_65#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_4_65#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id202"} {:subsumption 0} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_4_69#ly#0: LayerType :: 
                    Handle1((lambda $l#0_4_69#heap#0: Heap, $l#0_4_69#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_4_69#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_4_69#y#0): int))): int)), 
                      (lambda $l#0_4_69#heap#0: Heap, $l#0_4_69#y#0: Box :: 
                        $IsBox($l#0_4_69#y#0, TInt)), 
                      (lambda $l#0_4_69#heap#0: Heap, $l#0_4_69#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_4_69#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_4_70#ly#0: LayerType :: 
                    Handle1((lambda $l#0_4_70#heap#0: Heap, $l#0_4_70#x#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_4_70#heap#0, 
                                g#0, 
                                $Box($Unbox($l#0_4_70#x#0): int), 
                                $Box(n'#0))): int
                             + _module.__default.Sum($l#0_4_70#ly#0, 
                              n'#0, 
                              Lit(AtLayer((lambda $l#0_4_71#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_4_71#heap#0: Heap, $l#0_4_71#y#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_4_71#heap#0, 
                                              g#0, 
                                              $Box($Unbox($l#0_4_70#x#0): int), 
                                              $Box($Unbox($l#0_4_71#y#0): int))): int)), 
                                      (lambda $l#0_4_71#heap#0: Heap, $l#0_4_71#y#0: Box :: 
                                        $IsBox($l#0_4_71#y#0, TInt)), 
                                      (lambda $l#0_4_71#heap#0: Heap, $l#0_4_71#y#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_4_71#o#0: ref :: false))))), 
                                  $l#0_4_70#ly#0))))), 
                      (lambda $l#0_4_70#heap#0: Heap, $l#0_4_70#x#0: Box :: 
                        $IsBox($l#0_4_70#x#0, TInt)), 
                      (lambda $l#0_4_70#heap#0: Heap, $l#0_4_70#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_4_70#o#0: ref :: false))))), 
                  $LS($LZ))))
           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_4_72#ly#0: LayerType :: 
                    Handle1((lambda $l#0_4_72#heap#0: Heap, $l#0_4_72#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_4_72#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_4_72#y#0): int))): int)), 
                      (lambda $l#0_4_72#heap#0: Heap, $l#0_4_72#y#0: Box :: 
                        $IsBox($l#0_4_72#y#0, TInt)), 
                      (lambda $l#0_4_72#heap#0: Heap, $l#0_4_72#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_4_72#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_4_73#ly#0: LayerType :: 
                    Handle1((lambda $l#0_4_73#heap#0: Heap, $l#0_4_73#x#0: Box :: 
                        $Box($Unbox(Apply1(TInt, 
                                TInt, 
                                $l#0_4_73#heap#0, 
                                Lit(AtLayer((lambda $l#0_4_74#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_4_74#heap#0: Heap, $l#0_4_74#w#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#0_4_74#heap#0, 
                                                g#0, 
                                                $Box($Unbox($l#0_4_74#w#0): int), 
                                                $Box(n'#0))): int)), 
                                        (lambda $l#0_4_74#heap#0: Heap, $l#0_4_74#w#0: Box :: 
                                          $IsBox($l#0_4_74#w#0, TInt)), 
                                        (lambda $l#0_4_74#heap#0: Heap, $l#0_4_74#w#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_4_74#o#0: ref :: false))))), 
                                    $l#0_4_73#ly#0)), 
                                $Box($Unbox($l#0_4_73#x#0): int))): int
                             + $Unbox(Apply1(TInt, 
                                TInt, 
                                $l#0_4_73#heap#0, 
                                Lit(AtLayer((lambda $l#0_4_75#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_4_75#heap#0: Heap, $l#0_4_75#w#0: Box :: 
                                          $Box(_module.__default.Sum($l#0_4_75#ly#0, 
                                              n'#0, 
                                              Lit(AtLayer((lambda $l#0_4_76#ly#0: LayerType :: 
                                                    Handle1((lambda $l#0_4_76#heap#0: Heap, $l#0_4_76#y#0: Box :: 
                                                        $Box($Unbox(Apply2(TInt, 
                                                              TInt, 
                                                              TInt, 
                                                              $l#0_4_76#heap#0, 
                                                              g#0, 
                                                              $Box($Unbox($l#0_4_75#w#0): int), 
                                                              $Box($Unbox($l#0_4_76#y#0): int))): int)), 
                                                      (lambda $l#0_4_76#heap#0: Heap, $l#0_4_76#y#0: Box :: 
                                                        $IsBox($l#0_4_76#y#0, TInt)), 
                                                      (lambda $l#0_4_76#heap#0: Heap, $l#0_4_76#y#0: Box :: 
                                                        SetRef_to_SetBox((lambda $l#0_4_76#o#0: ref :: false))))), 
                                                  $l#0_4_75#ly#0))))), 
                                        (lambda $l#0_4_75#heap#0: Heap, $l#0_4_75#w#0: Box :: 
                                          $IsBox($l#0_4_75#w#0, TInt)), 
                                        (lambda $l#0_4_75#heap#0: Heap, $l#0_4_75#w#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_4_75#o#0: ref :: false))))), 
                                    $l#0_4_73#ly#0)), 
                                $Box($Unbox($l#0_4_73#x#0): int))): int)), 
                      (lambda $l#0_4_73#heap#0: Heap, $l#0_4_73#x#0: Box :: 
                        $IsBox($l#0_4_73#x#0, TInt)), 
                      (lambda $l#0_4_73#heap#0: Heap, $l#0_4_73#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_4_73#o#0: ref :: false))))), 
                  $LS($LZ))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_3_0 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_3_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_0;
            assume $IsGoodHeap($lambdaHeap#0_3_0);
            assume $Heap == $lambdaHeap#0_3_0 || $HeapSucc($Heap, $lambdaHeap#0_3_0);
            havoc y#0_3_0;
            if (true)
            {
                $_Frame#l0_3_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_0, $o, alloc)): bool ==> false);
                assume {:id "id179"} lambdaResult#0_3_0
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_3_0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_3_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_3_0 := Lit(AtLayer((lambda $l#0_3_1#ly#0: LayerType :: 
              Handle1((lambda $l#0_3_1#heap#0: Heap, $l#0_3_1#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_3_1#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_3_1#y#0): int))): int)), 
                (lambda $l#0_3_1#heap#0: Heap, $l#0_3_1#y#0: Box :: $IsBox($l#0_3_1#y#0, TInt)), 
                (lambda $l#0_3_1#heap#0: Heap, $l#0_3_1#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_3_1#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_3_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_3_2#ly#0: LayerType :: 
                Handle1((lambda $l#0_3_2#heap#0: Heap, $l#0_3_2#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_3_2#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_3_2#y#0): int))): int)), 
                  (lambda $l#0_3_2#heap#0: Heap, $l#0_3_2#y#0: Box :: $IsBox($l#0_3_2#y#0, TInt)), 
                  (lambda $l#0_3_2#heap#0: Heap, $l#0_3_2#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_3_2#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_3_1 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_3_1, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_1;
            assume $IsGoodHeap($lambdaHeap#0_3_1);
            assume $Heap == $lambdaHeap#0_3_1 || $HeapSucc($Heap, $lambdaHeap#0_3_1);
            havoc x#0_3_0;
            if (true)
            {
                $_Frame#l0_3_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_1, $o, alloc)): bool ==> false);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_3_2;
                    assume $IsGoodHeap($lambdaHeap#0_3_2);
                    assume $lambdaHeap#0_3_1 == $lambdaHeap#0_3_2
                       || $HeapSucc($lambdaHeap#0_3_1, $lambdaHeap#0_3_2);
                    havoc w#0_3_0;
                    if (true)
                    {
                        $_Frame#l0_3_2 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_3_2, $o, alloc)): bool ==> false);
                        assume {:id "id180"} lambdaResult#0_3_2
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_3_1, g#0, $Box(w#0_3_0), $Box(n'#0))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_2, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_3_3;
                    assume $IsGoodHeap($lambdaHeap#0_3_3);
                    assume $lambdaHeap#0_3_1 == $lambdaHeap#0_3_3
                       || $HeapSucc($lambdaHeap#0_3_1, $lambdaHeap#0_3_3);
                    havoc w#0_3_1;
                    if (true)
                    {
                        $_Frame#l0_3_3 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_3_3, $o, alloc)): bool ==> false);
                        ##n#0_3_2 := n'#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##n#0_3_2, Tclass._System.nat(), $lambdaHeap#0_3_3);
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_3_4;
                            assume $IsGoodHeap($lambdaHeap#0_3_4);
                            assume $lambdaHeap#0_3_3 == $lambdaHeap#0_3_4
                               || $HeapSucc($lambdaHeap#0_3_3, $lambdaHeap#0_3_4);
                            havoc y#0_3_1;
                            if (true)
                            {
                                $_Frame#l0_3_4 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_3_4, $o, alloc)): bool ==> false);
                                assume {:id "id181"} lambdaResult#0_3_4
                                   == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_3_3, g#0, $Box(w#0_3_1), $Box(y#0_3_1))): int;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_3_4, TInt);
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        ##f#0_3_2 := Lit(AtLayer((lambda $l#0_3_5#ly#0: LayerType :: 
                              Handle1((lambda $l#0_3_5#heap#0: Heap, $l#0_3_5#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_3_5#heap#0, 
                                        g#0, 
                                        $Box(w#0_3_1), 
                                        $Box($Unbox($l#0_3_5#y#0): int))): int)), 
                                (lambda $l#0_3_5#heap#0: Heap, $l#0_3_5#y#0: Box :: $IsBox($l#0_3_5#y#0, TInt)), 
                                (lambda $l#0_3_5#heap#0: Heap, $l#0_3_5#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_3_5#o#0: ref :: false))))), 
                            $LS($LZ)));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_3_2, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_3_3);
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_3_6#ly#0: LayerType :: 
                                Handle1((lambda $l#0_3_6#heap#0: Heap, $l#0_3_6#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_3_6#heap#0, 
                                          g#0, 
                                          $Box(w#0_3_1), 
                                          $Box($Unbox($l#0_3_6#y#0): int))): int)), 
                                  (lambda $l#0_3_6#heap#0: Heap, $l#0_3_6#y#0: Box :: $IsBox($l#0_3_6#y#0, TInt)), 
                                  (lambda $l#0_3_6#heap#0: Heap, $l#0_3_6#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_3_6#o#0: ref :: false))))), 
                              $LS($LZ))));
                        assume {:id "id182"} lambdaResult#0_3_3
                           == _module.__default.Sum($LS($LZ), 
                            n'#0, 
                            Lit(AtLayer((lambda $l#0_3_8#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_3_8#heap#0: Heap, $l#0_3_8#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_3_8#heap#0, 
                                            g#0, 
                                            $Box(w#0_3_1), 
                                            $Box($Unbox($l#0_3_8#y#0): int))): int)), 
                                    (lambda $l#0_3_8#heap#0: Heap, $l#0_3_8#y#0: Box :: $IsBox($l#0_3_8#y#0, TInt)), 
                                    (lambda $l#0_3_8#heap#0: Heap, $l#0_3_8#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_3_8#o#0: ref :: false))))), 
                                $LS($LZ))));
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_3_10#ly#0: LayerType :: 
                                Handle1((lambda $l#0_3_10#heap#0: Heap, $l#0_3_10#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_3_10#heap#0, 
                                          g#0, 
                                          $Box(w#0_3_1), 
                                          $Box($Unbox($l#0_3_10#y#0): int))): int)), 
                                  (lambda $l#0_3_10#heap#0: Heap, $l#0_3_10#y#0: Box :: 
                                    $IsBox($l#0_3_10#y#0, TInt)), 
                                  (lambda $l#0_3_10#heap#0: Heap, $l#0_3_10#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_3_10#o#0: ref :: false))))), 
                              $LS($LZ))));
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_3, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                assume {:id "id183"} lambdaResult#0_3_1
                   == $Unbox(Apply1(TInt, 
                        TInt, 
                        $Heap, 
                        Lit(AtLayer((lambda $l#0_3_16#ly#0: LayerType :: 
                              Handle1((lambda $l#0_3_16#heap#0: Heap, $l#0_3_16#w#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_3_16#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_3_16#w#0): int), 
                                        $Box(n'#0))): int)), 
                                (lambda $l#0_3_16#heap#0: Heap, $l#0_3_16#w#0: Box :: 
                                  $IsBox($l#0_3_16#w#0, TInt)), 
                                (lambda $l#0_3_16#heap#0: Heap, $l#0_3_16#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_3_16#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box(x#0_3_0))): int
                     + $Unbox(Apply1(TInt, 
                        TInt, 
                        $Heap, 
                        Lit(AtLayer((lambda $l#0_3_17#ly#0: LayerType :: 
                              Handle1((lambda $l#0_3_17#heap#0: Heap, $l#0_3_17#w#0: Box :: 
                                  $Box(_module.__default.Sum($l#0_3_17#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#0_3_18#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_3_18#heap#0: Heap, $l#0_3_18#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#0_3_18#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#0_3_17#w#0): int), 
                                                      $Box($Unbox($l#0_3_18#y#0): int))): int)), 
                                              (lambda $l#0_3_18#heap#0: Heap, $l#0_3_18#y#0: Box :: 
                                                $IsBox($l#0_3_18#y#0, TInt)), 
                                              (lambda $l#0_3_18#heap#0: Heap, $l#0_3_18#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_3_18#o#0: ref :: false))))), 
                                          $l#0_3_17#ly#0))))), 
                                (lambda $l#0_3_17#heap#0: Heap, $l#0_3_17#w#0: Box :: 
                                  $IsBox($l#0_3_17#w#0, TInt)), 
                                (lambda $l#0_3_17#heap#0: Heap, $l#0_3_17#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_3_17#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box(x#0_3_0))): int;
                assume (forall $l#0_3_20#w#0: int :: 
                  _module.__default.Sum#canCall(n'#0, 
                    Lit(AtLayer((lambda $l#0_3_22#ly#0: LayerType :: 
                          Handle1((lambda $l#0_3_22#heap#0: Heap, $l#0_3_22#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_3_22#heap#0, 
                                    g#0, 
                                    $Box($l#0_3_20#w#0), 
                                    $Box($Unbox($l#0_3_22#y#0): int))): int)), 
                            (lambda $l#0_3_22#heap#0: Heap, $l#0_3_22#y#0: Box :: 
                              $IsBox($l#0_3_22#y#0, TInt)), 
                            (lambda $l#0_3_22#heap#0: Heap, $l#0_3_22#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_3_22#o#0: ref :: false))))), 
                        $LS($LZ)))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_3_1, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_3_1 := Lit(AtLayer((lambda $l#0_3_27#ly#0: LayerType :: 
              Handle1((lambda $l#0_3_27#heap#0: Heap, $l#0_3_27#x#0: Box :: 
                  $Box($Unbox(Apply1(TInt, 
                          TInt, 
                          $l#0_3_27#heap#0, 
                          Lit(AtLayer((lambda $l#0_3_28#ly#0: LayerType :: 
                                Handle1((lambda $l#0_3_28#heap#0: Heap, $l#0_3_28#w#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_3_28#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_3_28#w#0): int), 
                                          $Box(n'#0))): int)), 
                                  (lambda $l#0_3_28#heap#0: Heap, $l#0_3_28#w#0: Box :: 
                                    $IsBox($l#0_3_28#w#0, TInt)), 
                                  (lambda $l#0_3_28#heap#0: Heap, $l#0_3_28#w#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_3_28#o#0: ref :: false))))), 
                              $l#0_3_27#ly#0)), 
                          $Box($Unbox($l#0_3_27#x#0): int))): int
                       + $Unbox(Apply1(TInt, 
                          TInt, 
                          $l#0_3_27#heap#0, 
                          Lit(AtLayer((lambda $l#0_3_29#ly#0: LayerType :: 
                                Handle1((lambda $l#0_3_29#heap#0: Heap, $l#0_3_29#w#0: Box :: 
                                    $Box(_module.__default.Sum($l#0_3_29#ly#0, 
                                        n'#0, 
                                        Lit(AtLayer((lambda $l#0_3_30#ly#0: LayerType :: 
                                              Handle1((lambda $l#0_3_30#heap#0: Heap, $l#0_3_30#y#0: Box :: 
                                                  $Box($Unbox(Apply2(TInt, 
                                                        TInt, 
                                                        TInt, 
                                                        $l#0_3_30#heap#0, 
                                                        g#0, 
                                                        $Box($Unbox($l#0_3_29#w#0): int), 
                                                        $Box($Unbox($l#0_3_30#y#0): int))): int)), 
                                                (lambda $l#0_3_30#heap#0: Heap, $l#0_3_30#y#0: Box :: 
                                                  $IsBox($l#0_3_30#y#0, TInt)), 
                                                (lambda $l#0_3_30#heap#0: Heap, $l#0_3_30#y#0: Box :: 
                                                  SetRef_to_SetBox((lambda $l#0_3_30#o#0: ref :: false))))), 
                                            $l#0_3_29#ly#0))))), 
                                  (lambda $l#0_3_29#heap#0: Heap, $l#0_3_29#w#0: Box :: 
                                    $IsBox($l#0_3_29#w#0, TInt)), 
                                  (lambda $l#0_3_29#heap#0: Heap, $l#0_3_29#w#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_3_29#o#0: ref :: false))))), 
                              $l#0_3_27#ly#0)), 
                          $Box($Unbox($l#0_3_27#x#0): int))): int)), 
                (lambda $l#0_3_27#heap#0: Heap, $l#0_3_27#x#0: Box :: 
                  $IsBox($l#0_3_27#x#0, TInt)), 
                (lambda $l#0_3_27#heap#0: Heap, $l#0_3_27#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_3_27#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_3_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_3_31#ly#0: LayerType :: 
                Handle1((lambda $l#0_3_31#heap#0: Heap, $l#0_3_31#x#0: Box :: 
                    $Box($Unbox(Apply1(TInt, 
                            TInt, 
                            $l#0_3_31#heap#0, 
                            Lit(AtLayer((lambda $l#0_3_32#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_3_32#heap#0: Heap, $l#0_3_32#w#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_3_32#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_3_32#w#0): int), 
                                            $Box(n'#0))): int)), 
                                    (lambda $l#0_3_32#heap#0: Heap, $l#0_3_32#w#0: Box :: 
                                      $IsBox($l#0_3_32#w#0, TInt)), 
                                    (lambda $l#0_3_32#heap#0: Heap, $l#0_3_32#w#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_3_32#o#0: ref :: false))))), 
                                $l#0_3_31#ly#0)), 
                            $Box($Unbox($l#0_3_31#x#0): int))): int
                         + $Unbox(Apply1(TInt, 
                            TInt, 
                            $l#0_3_31#heap#0, 
                            Lit(AtLayer((lambda $l#0_3_33#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_3_33#heap#0: Heap, $l#0_3_33#w#0: Box :: 
                                      $Box(_module.__default.Sum($l#0_3_33#ly#0, 
                                          n'#0, 
                                          Lit(AtLayer((lambda $l#0_3_34#ly#0: LayerType :: 
                                                Handle1((lambda $l#0_3_34#heap#0: Heap, $l#0_3_34#y#0: Box :: 
                                                    $Box($Unbox(Apply2(TInt, 
                                                          TInt, 
                                                          TInt, 
                                                          $l#0_3_34#heap#0, 
                                                          g#0, 
                                                          $Box($Unbox($l#0_3_33#w#0): int), 
                                                          $Box($Unbox($l#0_3_34#y#0): int))): int)), 
                                                  (lambda $l#0_3_34#heap#0: Heap, $l#0_3_34#y#0: Box :: 
                                                    $IsBox($l#0_3_34#y#0, TInt)), 
                                                  (lambda $l#0_3_34#heap#0: Heap, $l#0_3_34#y#0: Box :: 
                                                    SetRef_to_SetBox((lambda $l#0_3_34#o#0: ref :: false))))), 
                                              $l#0_3_33#ly#0))))), 
                                    (lambda $l#0_3_33#heap#0: Heap, $l#0_3_33#w#0: Box :: 
                                      $IsBox($l#0_3_33#w#0, TInt)), 
                                    (lambda $l#0_3_33#heap#0: Heap, $l#0_3_33#w#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_3_33#o#0: ref :: false))))), 
                                $l#0_3_31#ly#0)), 
                            $Box($Unbox($l#0_3_31#x#0): int))): int)), 
                  (lambda $l#0_3_31#heap#0: Heap, $l#0_3_31#x#0: Box :: 
                    $IsBox($l#0_3_31#x#0, TInt)), 
                  (lambda $l#0_3_31#heap#0: Heap, $l#0_3_31#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_3_31#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_3_36#ly#0: LayerType :: 
                  Handle1((lambda $l#0_3_36#heap#0: Heap, $l#0_3_36#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_3_36#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_3_36#y#0): int))): int)), 
                    (lambda $l#0_3_36#heap#0: Heap, $l#0_3_36#y#0: Box :: 
                      $IsBox($l#0_3_36#y#0, TInt)), 
                    (lambda $l#0_3_36#heap#0: Heap, $l#0_3_36#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_3_36#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_3_39#w#0: int :: 
            _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#0_3_41#ly#0: LayerType :: 
                    Handle1((lambda $l#0_3_41#heap#0: Heap, $l#0_3_41#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_3_41#heap#0, 
                              g#0, 
                              $Box($l#0_3_39#w#0), 
                              $Box($Unbox($l#0_3_41#y#0): int))): int)), 
                      (lambda $l#0_3_41#heap#0: Heap, $l#0_3_41#y#0: Box :: 
                        $IsBox($l#0_3_41#y#0, TInt)), 
                      (lambda $l#0_3_41#heap#0: Heap, $l#0_3_41#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_3_41#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_3_42#ly#0: LayerType :: 
                  Handle1((lambda $l#0_3_42#heap#0: Heap, $l#0_3_42#x#0: Box :: 
                      $Box($Unbox(Apply1(TInt, 
                              TInt, 
                              $l#0_3_42#heap#0, 
                              Lit(AtLayer((lambda $l#0_3_43#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_3_43#heap#0: Heap, $l#0_3_43#w#0: Box :: 
                                        $Box($Unbox(Apply2(TInt, 
                                              TInt, 
                                              TInt, 
                                              $l#0_3_43#heap#0, 
                                              g#0, 
                                              $Box($Unbox($l#0_3_43#w#0): int), 
                                              $Box(n'#0))): int)), 
                                      (lambda $l#0_3_43#heap#0: Heap, $l#0_3_43#w#0: Box :: 
                                        $IsBox($l#0_3_43#w#0, TInt)), 
                                      (lambda $l#0_3_43#heap#0: Heap, $l#0_3_43#w#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_3_43#o#0: ref :: false))))), 
                                  $l#0_3_42#ly#0)), 
                              $Box($Unbox($l#0_3_42#x#0): int))): int
                           + $Unbox(Apply1(TInt, 
                              TInt, 
                              $l#0_3_42#heap#0, 
                              Lit(AtLayer((lambda $l#0_3_44#ly#0: LayerType :: 
                                    Handle1((lambda $l#0_3_44#heap#0: Heap, $l#0_3_44#w#0: Box :: 
                                        $Box(_module.__default.Sum($l#0_3_44#ly#0, 
                                            n'#0, 
                                            Lit(AtLayer((lambda $l#0_3_45#ly#0: LayerType :: 
                                                  Handle1((lambda $l#0_3_45#heap#0: Heap, $l#0_3_45#y#0: Box :: 
                                                      $Box($Unbox(Apply2(TInt, 
                                                            TInt, 
                                                            TInt, 
                                                            $l#0_3_45#heap#0, 
                                                            g#0, 
                                                            $Box($Unbox($l#0_3_44#w#0): int), 
                                                            $Box($Unbox($l#0_3_45#y#0): int))): int)), 
                                                    (lambda $l#0_3_45#heap#0: Heap, $l#0_3_45#y#0: Box :: 
                                                      $IsBox($l#0_3_45#y#0, TInt)), 
                                                    (lambda $l#0_3_45#heap#0: Heap, $l#0_3_45#y#0: Box :: 
                                                      SetRef_to_SetBox((lambda $l#0_3_45#o#0: ref :: false))))), 
                                                $l#0_3_44#ly#0))))), 
                                      (lambda $l#0_3_44#heap#0: Heap, $l#0_3_44#w#0: Box :: 
                                        $IsBox($l#0_3_44#w#0, TInt)), 
                                      (lambda $l#0_3_44#heap#0: Heap, $l#0_3_44#w#0: Box :: 
                                        SetRef_to_SetBox((lambda $l#0_3_44#o#0: ref :: false))))), 
                                  $l#0_3_42#ly#0)), 
                              $Box($Unbox($l#0_3_42#x#0): int))): int)), 
                    (lambda $l#0_3_42#heap#0: Heap, $l#0_3_42#x#0: Box :: 
                      $IsBox($l#0_3_42#x#0, TInt)), 
                    (lambda $l#0_3_42#heap#0: Heap, $l#0_3_42#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_3_42#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- Hint6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(124,15)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        n##0_3_0 := n'#0;
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_5;
            assume $IsGoodHeap($lambdaHeap#0_3_5);
            assume $Heap == $lambdaHeap#0_3_5 || $HeapSucc($Heap, $lambdaHeap#0_3_5);
            havoc x#0_3_1;
            if (true)
            {
                $_Frame#l0_3_5 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_5, $o, alloc)): bool ==> false);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_3_6;
                    assume $IsGoodHeap($lambdaHeap#0_3_6);
                    assume $lambdaHeap#0_3_5 == $lambdaHeap#0_3_6
                       || $HeapSucc($lambdaHeap#0_3_5, $lambdaHeap#0_3_6);
                    havoc w#0_3_2;
                    if (true)
                    {
                        $_Frame#l0_3_6 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_3_6, $o, alloc)): bool ==> false);
                        assume {:id "id184"} lambdaResult#0_3_6
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_3_5, g#0, $Box(w#0_3_2), $Box(n'#0))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_6, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_3_7;
                    assume $IsGoodHeap($lambdaHeap#0_3_7);
                    assume $lambdaHeap#0_3_5 == $lambdaHeap#0_3_7
                       || $HeapSucc($lambdaHeap#0_3_5, $lambdaHeap#0_3_7);
                    havoc w#0_3_3;
                    if (true)
                    {
                        $_Frame#l0_3_7 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_3_7, $o, alloc)): bool ==> false);
                        ##n#0_3_3 := n'#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##n#0_3_3, Tclass._System.nat(), $lambdaHeap#0_3_7);
                        // Begin Comprehension WF check
                        if (*)
                        {
                            havoc $lambdaHeap#0_3_8;
                            assume $IsGoodHeap($lambdaHeap#0_3_8);
                            assume $lambdaHeap#0_3_7 == $lambdaHeap#0_3_8
                               || $HeapSucc($lambdaHeap#0_3_7, $lambdaHeap#0_3_8);
                            havoc y#0_3_2;
                            if (true)
                            {
                                $_Frame#l0_3_8 := (lambda $o: ref, $f: Field :: 
                                  $o != null && $Unbox(read($lambdaHeap#0_3_8, $o, alloc)): bool ==> false);
                                assume {:id "id185"} lambdaResult#0_3_8
                                   == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_3_7, g#0, $Box(w#0_3_3), $Box(y#0_3_2))): int;
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(lambdaResult#0_3_8, TInt);
                            }

                            assume false;
                        }

                        // End Comprehension WF check
                        ##f#0_3_3 := Lit(AtLayer((lambda $l#0_3_48#ly#0: LayerType :: 
                              Handle1((lambda $l#0_3_48#heap#0: Heap, $l#0_3_48#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_3_48#heap#0, 
                                        g#0, 
                                        $Box(w#0_3_3), 
                                        $Box($Unbox($l#0_3_48#y#0): int))): int)), 
                                (lambda $l#0_3_48#heap#0: Heap, $l#0_3_48#y#0: Box :: 
                                  $IsBox($l#0_3_48#y#0, TInt)), 
                                (lambda $l#0_3_48#heap#0: Heap, $l#0_3_48#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_3_48#o#0: ref :: false))))), 
                            $LS($LZ)));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##f#0_3_3, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_3_7);
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_3_49#ly#0: LayerType :: 
                                Handle1((lambda $l#0_3_49#heap#0: Heap, $l#0_3_49#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_3_49#heap#0, 
                                          g#0, 
                                          $Box(w#0_3_3), 
                                          $Box($Unbox($l#0_3_49#y#0): int))): int)), 
                                  (lambda $l#0_3_49#heap#0: Heap, $l#0_3_49#y#0: Box :: 
                                    $IsBox($l#0_3_49#y#0, TInt)), 
                                  (lambda $l#0_3_49#heap#0: Heap, $l#0_3_49#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_3_49#o#0: ref :: false))))), 
                              $LS($LZ))));
                        assume {:id "id186"} lambdaResult#0_3_7
                           == _module.__default.Sum($LS($LZ), 
                            n'#0, 
                            Lit(AtLayer((lambda $l#0_3_51#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_3_51#heap#0: Heap, $l#0_3_51#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_3_51#heap#0, 
                                            g#0, 
                                            $Box(w#0_3_3), 
                                            $Box($Unbox($l#0_3_51#y#0): int))): int)), 
                                    (lambda $l#0_3_51#heap#0: Heap, $l#0_3_51#y#0: Box :: 
                                      $IsBox($l#0_3_51#y#0, TInt)), 
                                    (lambda $l#0_3_51#heap#0: Heap, $l#0_3_51#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_3_51#o#0: ref :: false))))), 
                                $LS($LZ))));
                        assume _module.__default.Sum#canCall(n'#0, 
                          Lit(AtLayer((lambda $l#0_3_53#ly#0: LayerType :: 
                                Handle1((lambda $l#0_3_53#heap#0: Heap, $l#0_3_53#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_3_53#heap#0, 
                                          g#0, 
                                          $Box(w#0_3_3), 
                                          $Box($Unbox($l#0_3_53#y#0): int))): int)), 
                                  (lambda $l#0_3_53#heap#0: Heap, $l#0_3_53#y#0: Box :: 
                                    $IsBox($l#0_3_53#y#0, TInt)), 
                                  (lambda $l#0_3_53#heap#0: Heap, $l#0_3_53#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_3_53#o#0: ref :: false))))), 
                              $LS($LZ))));
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_3_7, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                assume {:id "id187"} lambdaResult#0_3_5
                   == $Unbox(Apply1(TInt, 
                        TInt, 
                        $Heap, 
                        Lit(AtLayer((lambda $l#0_3_59#ly#0: LayerType :: 
                              Handle1((lambda $l#0_3_59#heap#0: Heap, $l#0_3_59#w#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_3_59#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_3_59#w#0): int), 
                                        $Box(n'#0))): int)), 
                                (lambda $l#0_3_59#heap#0: Heap, $l#0_3_59#w#0: Box :: 
                                  $IsBox($l#0_3_59#w#0, TInt)), 
                                (lambda $l#0_3_59#heap#0: Heap, $l#0_3_59#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_3_59#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box(x#0_3_1))): int
                     + $Unbox(Apply1(TInt, 
                        TInt, 
                        $Heap, 
                        Lit(AtLayer((lambda $l#0_3_60#ly#0: LayerType :: 
                              Handle1((lambda $l#0_3_60#heap#0: Heap, $l#0_3_60#w#0: Box :: 
                                  $Box(_module.__default.Sum($l#0_3_60#ly#0, 
                                      n'#0, 
                                      Lit(AtLayer((lambda $l#0_3_61#ly#0: LayerType :: 
                                            Handle1((lambda $l#0_3_61#heap#0: Heap, $l#0_3_61#y#0: Box :: 
                                                $Box($Unbox(Apply2(TInt, 
                                                      TInt, 
                                                      TInt, 
                                                      $l#0_3_61#heap#0, 
                                                      g#0, 
                                                      $Box($Unbox($l#0_3_60#w#0): int), 
                                                      $Box($Unbox($l#0_3_61#y#0): int))): int)), 
                                              (lambda $l#0_3_61#heap#0: Heap, $l#0_3_61#y#0: Box :: 
                                                $IsBox($l#0_3_61#y#0, TInt)), 
                                              (lambda $l#0_3_61#heap#0: Heap, $l#0_3_61#y#0: Box :: 
                                                SetRef_to_SetBox((lambda $l#0_3_61#o#0: ref :: false))))), 
                                          $l#0_3_60#ly#0))))), 
                                (lambda $l#0_3_60#heap#0: Heap, $l#0_3_60#w#0: Box :: 
                                  $IsBox($l#0_3_60#w#0, TInt)), 
                                (lambda $l#0_3_60#heap#0: Heap, $l#0_3_60#w#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_3_60#o#0: ref :: false))))), 
                            $LS($LZ))), 
                        $Box(x#0_3_1))): int;
                assume (forall $l#0_3_63#w#0: int :: 
                  _module.__default.Sum#canCall(n'#0, 
                    Lit(AtLayer((lambda $l#0_3_65#ly#0: LayerType :: 
                          Handle1((lambda $l#0_3_65#heap#0: Heap, $l#0_3_65#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_3_65#heap#0, 
                                    g#0, 
                                    $Box($l#0_3_63#w#0), 
                                    $Box($Unbox($l#0_3_65#y#0): int))): int)), 
                            (lambda $l#0_3_65#heap#0: Heap, $l#0_3_65#y#0: Box :: 
                              $IsBox($l#0_3_65#y#0, TInt)), 
                            (lambda $l#0_3_65#heap#0: Heap, $l#0_3_65#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_3_65#o#0: ref :: false))))), 
                        $LS($LZ)))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_3_5, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        assume (forall $l#0_3_68#w#0: int :: 
          _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_3_70#ly#0: LayerType :: 
                  Handle1((lambda $l#0_3_70#heap#0: Heap, $l#0_3_70#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_3_70#heap#0, 
                            g#0, 
                            $Box($l#0_3_68#w#0), 
                            $Box($Unbox($l#0_3_70#y#0): int))): int)), 
                    (lambda $l#0_3_70#heap#0: Heap, $l#0_3_70#y#0: Box :: 
                      $IsBox($l#0_3_70#y#0, TInt)), 
                    (lambda $l#0_3_70#heap#0: Heap, $l#0_3_70#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_3_70#o#0: ref :: false))))), 
                $LS($LZ)))));
        // ProcessCallStmt: CheckSubrange
        f##0_3_0 := Lit(AtLayer((lambda $l#0_3_71#ly#0: LayerType :: 
              Handle1((lambda $l#0_3_71#heap#0: Heap, $l#0_3_71#x#0: Box :: 
                  $Box($Unbox(Apply1(TInt, 
                          TInt, 
                          $l#0_3_71#heap#0, 
                          Lit(AtLayer((lambda $l#0_3_72#ly#0: LayerType :: 
                                Handle1((lambda $l#0_3_72#heap#0: Heap, $l#0_3_72#w#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_3_72#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_3_72#w#0): int), 
                                          $Box(n'#0))): int)), 
                                  (lambda $l#0_3_72#heap#0: Heap, $l#0_3_72#w#0: Box :: 
                                    $IsBox($l#0_3_72#w#0, TInt)), 
                                  (lambda $l#0_3_72#heap#0: Heap, $l#0_3_72#w#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_3_72#o#0: ref :: false))))), 
                              $l#0_3_71#ly#0)), 
                          $Box($Unbox($l#0_3_71#x#0): int))): int
                       + $Unbox(Apply1(TInt, 
                          TInt, 
                          $l#0_3_71#heap#0, 
                          Lit(AtLayer((lambda $l#0_3_73#ly#0: LayerType :: 
                                Handle1((lambda $l#0_3_73#heap#0: Heap, $l#0_3_73#w#0: Box :: 
                                    $Box(_module.__default.Sum($l#0_3_73#ly#0, 
                                        n'#0, 
                                        Lit(AtLayer((lambda $l#0_3_74#ly#0: LayerType :: 
                                              Handle1((lambda $l#0_3_74#heap#0: Heap, $l#0_3_74#y#0: Box :: 
                                                  $Box($Unbox(Apply2(TInt, 
                                                        TInt, 
                                                        TInt, 
                                                        $l#0_3_74#heap#0, 
                                                        g#0, 
                                                        $Box($Unbox($l#0_3_73#w#0): int), 
                                                        $Box($Unbox($l#0_3_74#y#0): int))): int)), 
                                                (lambda $l#0_3_74#heap#0: Heap, $l#0_3_74#y#0: Box :: 
                                                  $IsBox($l#0_3_74#y#0, TInt)), 
                                                (lambda $l#0_3_74#heap#0: Heap, $l#0_3_74#y#0: Box :: 
                                                  SetRef_to_SetBox((lambda $l#0_3_74#o#0: ref :: false))))), 
                                            $l#0_3_73#ly#0))))), 
                                  (lambda $l#0_3_73#heap#0: Heap, $l#0_3_73#w#0: Box :: 
                                    $IsBox($l#0_3_73#w#0, TInt)), 
                                  (lambda $l#0_3_73#heap#0: Heap, $l#0_3_73#w#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_3_73#o#0: ref :: false))))), 
                              $l#0_3_71#ly#0)), 
                          $Box($Unbox($l#0_3_71#x#0): int))): int)), 
                (lambda $l#0_3_71#heap#0: Heap, $l#0_3_71#x#0: Box :: 
                  $IsBox($l#0_3_71#x#0, TInt)), 
                (lambda $l#0_3_71#heap#0: Heap, $l#0_3_71#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_3_71#o#0: ref :: false))))), 
            $LS($LZ)));
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_9;
            assume $IsGoodHeap($lambdaHeap#0_3_9);
            assume $Heap == $lambdaHeap#0_3_9 || $HeapSucc($Heap, $lambdaHeap#0_3_9);
            havoc x#0_3_2;
            if (true)
            {
                $_Frame#l0_3_9 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_9, $o, alloc)): bool ==> false);
                assume {:id "id188"} lambdaResult#0_3_9
                   == $Unbox(Apply1(TInt, TInt, $Heap, A#0, $Box(x#0_3_2))): int
                     + $Unbox(Apply1(TInt, TInt, $Heap, B#0, $Box(x#0_3_2))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_3_9, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        assume true;
        // ProcessCallStmt: CheckSubrange
        g##0_3_0 := Lit(AtLayer((lambda $l#0_3_76#ly#0: LayerType :: 
              Handle1((lambda $l#0_3_76#heap#0: Heap, $l#0_3_76#x#0: Box :: 
                  $Box($Unbox(Apply1(TInt, TInt, $l#0_3_76#heap#0, A#0, $Box($Unbox($l#0_3_76#x#0): int))): int
                       + $Unbox(Apply1(TInt, TInt, $l#0_3_76#heap#0, B#0, $Box($Unbox($l#0_3_76#x#0): int))): int)), 
                (lambda $l#0_3_76#heap#0: Heap, $l#0_3_76#x#0: Box :: 
                  $IsBox($l#0_3_76#x#0, TInt)), 
                (lambda $l#0_3_76#heap#0: Heap, $l#0_3_76#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_3_76#o#0: ref :: false))))), 
            $LS($LZ)));
        call {:id "id189"} Call$$_module.__default.Exchange(n##0_3_0, f##0_3_0, g##0_3_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_3_4 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_3_4, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_10;
            assume $IsGoodHeap($lambdaHeap#0_3_10);
            assume $Heap == $lambdaHeap#0_3_10 || $HeapSucc($Heap, $lambdaHeap#0_3_10);
            havoc y#0_3_3;
            if (true)
            {
                $_Frame#l0_3_10 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_10, $o, alloc)): bool ==> false);
                assume {:id "id190"} lambdaResult#0_3_10
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_3_3))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_3_10, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_3_4 := Lit(AtLayer((lambda $l#0_3_78#ly#0: LayerType :: 
              Handle1((lambda $l#0_3_78#heap#0: Heap, $l#0_3_78#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_3_78#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_3_78#y#0): int))): int)), 
                (lambda $l#0_3_78#heap#0: Heap, $l#0_3_78#y#0: Box :: 
                  $IsBox($l#0_3_78#y#0, TInt)), 
                (lambda $l#0_3_78#heap#0: Heap, $l#0_3_78#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_3_78#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_3_4, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_3_79#ly#0: LayerType :: 
                Handle1((lambda $l#0_3_79#heap#0: Heap, $l#0_3_79#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_3_79#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_3_79#y#0): int))): int)), 
                  (lambda $l#0_3_79#heap#0: Heap, $l#0_3_79#y#0: Box :: 
                    $IsBox($l#0_3_79#y#0, TInt)), 
                  (lambda $l#0_3_79#heap#0: Heap, $l#0_3_79#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_3_79#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_3_5 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_3_5, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_3_11;
            assume $IsGoodHeap($lambdaHeap#0_3_11);
            assume $Heap == $lambdaHeap#0_3_11 || $HeapSucc($Heap, $lambdaHeap#0_3_11);
            havoc x#0_3_3;
            if (true)
            {
                $_Frame#l0_3_11 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_3_11, $o, alloc)): bool ==> false);
                assume {:id "id191"} lambdaResult#0_3_11
                   == $Unbox(Apply1(TInt, TInt, $Heap, A#0, $Box(x#0_3_3))): int
                     + $Unbox(Apply1(TInt, TInt, $Heap, B#0, $Box(x#0_3_3))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_3_11, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_3_5 := Lit(AtLayer((lambda $l#0_3_81#ly#0: LayerType :: 
              Handle1((lambda $l#0_3_81#heap#0: Heap, $l#0_3_81#x#0: Box :: 
                  $Box($Unbox(Apply1(TInt, TInt, $l#0_3_81#heap#0, A#0, $Box($Unbox($l#0_3_81#x#0): int))): int
                       + $Unbox(Apply1(TInt, TInt, $l#0_3_81#heap#0, B#0, $Box($Unbox($l#0_3_81#x#0): int))): int)), 
                (lambda $l#0_3_81#heap#0: Heap, $l#0_3_81#x#0: Box :: 
                  $IsBox($l#0_3_81#x#0, TInt)), 
                (lambda $l#0_3_81#heap#0: Heap, $l#0_3_81#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_3_81#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_3_5, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_3_82#ly#0: LayerType :: 
                Handle1((lambda $l#0_3_82#heap#0: Heap, $l#0_3_82#x#0: Box :: 
                    $Box($Unbox(Apply1(TInt, TInt, $l#0_3_82#heap#0, A#0, $Box($Unbox($l#0_3_82#x#0): int))): int
                         + $Unbox(Apply1(TInt, TInt, $l#0_3_82#heap#0, B#0, $Box($Unbox($l#0_3_82#x#0): int))): int)), 
                  (lambda $l#0_3_82#heap#0: Heap, $l#0_3_82#x#0: Box :: 
                    $IsBox($l#0_3_82#x#0, TInt)), 
                  (lambda $l#0_3_82#heap#0: Heap, $l#0_3_82#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_3_82#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_3_84#ly#0: LayerType :: 
                  Handle1((lambda $l#0_3_84#heap#0: Heap, $l#0_3_84#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_3_84#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_3_84#y#0): int))): int)), 
                    (lambda $l#0_3_84#heap#0: Heap, $l#0_3_84#y#0: Box :: 
                      $IsBox($l#0_3_84#y#0, TInt)), 
                    (lambda $l#0_3_84#heap#0: Heap, $l#0_3_84#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_3_84#o#0: ref :: false))))), 
                $LS($LZ))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_3_86#ly#0: LayerType :: 
                  Handle1((lambda $l#0_3_86#heap#0: Heap, $l#0_3_86#x#0: Box :: 
                      $Box($Unbox(Apply1(TInt, TInt, $l#0_3_86#heap#0, A#0, $Box($Unbox($l#0_3_86#x#0): int))): int
                           + $Unbox(Apply1(TInt, TInt, $l#0_3_86#heap#0, B#0, $Box($Unbox($l#0_3_86#x#0): int))): int)), 
                    (lambda $l#0_3_86#heap#0: Heap, $l#0_3_86#x#0: Box :: 
                      $IsBox($l#0_3_86#x#0, TInt)), 
                    (lambda $l#0_3_86#heap#0: Heap, $l#0_3_86#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_3_86#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- assert line6 == line7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id192"} {:subsumption 0} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_3_87#ly#0: LayerType :: 
                    Handle1((lambda $l#0_3_87#heap#0: Heap, $l#0_3_87#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_3_87#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_3_87#y#0): int))): int)), 
                      (lambda $l#0_3_87#heap#0: Heap, $l#0_3_87#y#0: Box :: 
                        $IsBox($l#0_3_87#y#0, TInt)), 
                      (lambda $l#0_3_87#heap#0: Heap, $l#0_3_87#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_3_87#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_3_88#ly#0: LayerType :: 
                    Handle1((lambda $l#0_3_88#heap#0: Heap, $l#0_3_88#x#0: Box :: 
                        $Box($Unbox(Apply1(TInt, 
                                TInt, 
                                $l#0_3_88#heap#0, 
                                Lit(AtLayer((lambda $l#0_3_89#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_3_89#heap#0: Heap, $l#0_3_89#w#0: Box :: 
                                          $Box($Unbox(Apply2(TInt, 
                                                TInt, 
                                                TInt, 
                                                $l#0_3_89#heap#0, 
                                                g#0, 
                                                $Box($Unbox($l#0_3_89#w#0): int), 
                                                $Box(n'#0))): int)), 
                                        (lambda $l#0_3_89#heap#0: Heap, $l#0_3_89#w#0: Box :: 
                                          $IsBox($l#0_3_89#w#0, TInt)), 
                                        (lambda $l#0_3_89#heap#0: Heap, $l#0_3_89#w#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_3_89#o#0: ref :: false))))), 
                                    $l#0_3_88#ly#0)), 
                                $Box($Unbox($l#0_3_88#x#0): int))): int
                             + $Unbox(Apply1(TInt, 
                                TInt, 
                                $l#0_3_88#heap#0, 
                                Lit(AtLayer((lambda $l#0_3_90#ly#0: LayerType :: 
                                      Handle1((lambda $l#0_3_90#heap#0: Heap, $l#0_3_90#w#0: Box :: 
                                          $Box(_module.__default.Sum($l#0_3_90#ly#0, 
                                              n'#0, 
                                              Lit(AtLayer((lambda $l#0_3_91#ly#0: LayerType :: 
                                                    Handle1((lambda $l#0_3_91#heap#0: Heap, $l#0_3_91#y#0: Box :: 
                                                        $Box($Unbox(Apply2(TInt, 
                                                              TInt, 
                                                              TInt, 
                                                              $l#0_3_91#heap#0, 
                                                              g#0, 
                                                              $Box($Unbox($l#0_3_90#w#0): int), 
                                                              $Box($Unbox($l#0_3_91#y#0): int))): int)), 
                                                      (lambda $l#0_3_91#heap#0: Heap, $l#0_3_91#y#0: Box :: 
                                                        $IsBox($l#0_3_91#y#0, TInt)), 
                                                      (lambda $l#0_3_91#heap#0: Heap, $l#0_3_91#y#0: Box :: 
                                                        SetRef_to_SetBox((lambda $l#0_3_91#o#0: ref :: false))))), 
                                                  $l#0_3_90#ly#0))))), 
                                        (lambda $l#0_3_90#heap#0: Heap, $l#0_3_90#w#0: Box :: 
                                          $IsBox($l#0_3_90#w#0, TInt)), 
                                        (lambda $l#0_3_90#heap#0: Heap, $l#0_3_90#w#0: Box :: 
                                          SetRef_to_SetBox((lambda $l#0_3_90#o#0: ref :: false))))), 
                                    $l#0_3_88#ly#0)), 
                                $Box($Unbox($l#0_3_88#x#0): int))): int)), 
                      (lambda $l#0_3_88#heap#0: Heap, $l#0_3_88#x#0: Box :: 
                        $IsBox($l#0_3_88#x#0, TInt)), 
                      (lambda $l#0_3_88#heap#0: Heap, $l#0_3_88#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_3_88#o#0: ref :: false))))), 
                  $LS($LZ))))
           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_3_92#ly#0: LayerType :: 
                    Handle1((lambda $l#0_3_92#heap#0: Heap, $l#0_3_92#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_3_92#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_3_92#y#0): int))): int)), 
                      (lambda $l#0_3_92#heap#0: Heap, $l#0_3_92#y#0: Box :: 
                        $IsBox($l#0_3_92#y#0, TInt)), 
                      (lambda $l#0_3_92#heap#0: Heap, $l#0_3_92#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_3_92#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_3_93#ly#0: LayerType :: 
                    Handle1((lambda $l#0_3_93#heap#0: Heap, $l#0_3_93#x#0: Box :: 
                        $Box($Unbox(Apply1(TInt, TInt, $l#0_3_93#heap#0, A#0, $Box($Unbox($l#0_3_93#x#0): int))): int
                             + $Unbox(Apply1(TInt, TInt, $l#0_3_93#heap#0, B#0, $Box($Unbox($l#0_3_93#x#0): int))): int)), 
                      (lambda $l#0_3_93#heap#0: Heap, $l#0_3_93#x#0: Box :: 
                        $IsBox($l#0_3_93#x#0, TInt)), 
                      (lambda $l#0_3_93#heap#0: Heap, $l#0_3_93#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_3_93#o#0: ref :: false))))), 
                  $LS($LZ))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_2_0 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_2_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_2_0;
            assume $IsGoodHeap($lambdaHeap#0_2_0);
            assume $Heap == $lambdaHeap#0_2_0 || $HeapSucc($Heap, $lambdaHeap#0_2_0);
            havoc y#0_2_0;
            if (true)
            {
                $_Frame#l0_2_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_2_0, $o, alloc)): bool ==> false);
                assume {:id "id174"} lambdaResult#0_2_0
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_2_0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_2_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_2_0 := Lit(AtLayer((lambda $l#0_2_1#ly#0: LayerType :: 
              Handle1((lambda $l#0_2_1#heap#0: Heap, $l#0_2_1#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_2_1#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_2_1#y#0): int))): int)), 
                (lambda $l#0_2_1#heap#0: Heap, $l#0_2_1#y#0: Box :: $IsBox($l#0_2_1#y#0, TInt)), 
                (lambda $l#0_2_1#heap#0: Heap, $l#0_2_1#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_2_1#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_2_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_2_2#ly#0: LayerType :: 
                Handle1((lambda $l#0_2_2#heap#0: Heap, $l#0_2_2#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_2_2#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_2_2#y#0): int))): int)), 
                  (lambda $l#0_2_2#heap#0: Heap, $l#0_2_2#y#0: Box :: $IsBox($l#0_2_2#y#0, TInt)), 
                  (lambda $l#0_2_2#heap#0: Heap, $l#0_2_2#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_2_2#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_2_1 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_2_1, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_2_1;
            assume $IsGoodHeap($lambdaHeap#0_2_1);
            assume $Heap == $lambdaHeap#0_2_1 || $HeapSucc($Heap, $lambdaHeap#0_2_1);
            havoc x#0_2_0;
            if (true)
            {
                $_Frame#l0_2_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_2_1, $o, alloc)): bool ==> false);
                assume {:id "id175"} lambdaResult#0_2_1
                   == $Unbox(Apply1(TInt, TInt, $Heap, A#0, $Box(x#0_2_0))): int
                     + $Unbox(Apply1(TInt, TInt, $Heap, B#0, $Box(x#0_2_0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_2_1, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_2_1 := Lit(AtLayer((lambda $l#0_2_4#ly#0: LayerType :: 
              Handle1((lambda $l#0_2_4#heap#0: Heap, $l#0_2_4#x#0: Box :: 
                  $Box($Unbox(Apply1(TInt, TInt, $l#0_2_4#heap#0, A#0, $Box($Unbox($l#0_2_4#x#0): int))): int
                       + $Unbox(Apply1(TInt, TInt, $l#0_2_4#heap#0, B#0, $Box($Unbox($l#0_2_4#x#0): int))): int)), 
                (lambda $l#0_2_4#heap#0: Heap, $l#0_2_4#x#0: Box :: $IsBox($l#0_2_4#x#0, TInt)), 
                (lambda $l#0_2_4#heap#0: Heap, $l#0_2_4#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_2_4#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_2_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_2_5#ly#0: LayerType :: 
                Handle1((lambda $l#0_2_5#heap#0: Heap, $l#0_2_5#x#0: Box :: 
                    $Box($Unbox(Apply1(TInt, TInt, $l#0_2_5#heap#0, A#0, $Box($Unbox($l#0_2_5#x#0): int))): int
                         + $Unbox(Apply1(TInt, TInt, $l#0_2_5#heap#0, B#0, $Box($Unbox($l#0_2_5#x#0): int))): int)), 
                  (lambda $l#0_2_5#heap#0: Heap, $l#0_2_5#x#0: Box :: $IsBox($l#0_2_5#x#0, TInt)), 
                  (lambda $l#0_2_5#heap#0: Heap, $l#0_2_5#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_2_5#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_2_7#ly#0: LayerType :: 
                  Handle1((lambda $l#0_2_7#heap#0: Heap, $l#0_2_7#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_2_7#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_2_7#y#0): int))): int)), 
                    (lambda $l#0_2_7#heap#0: Heap, $l#0_2_7#y#0: Box :: $IsBox($l#0_2_7#y#0, TInt)), 
                    (lambda $l#0_2_7#heap#0: Heap, $l#0_2_7#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_2_7#o#0: ref :: false))))), 
                $LS($LZ))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_2_9#ly#0: LayerType :: 
                  Handle1((lambda $l#0_2_9#heap#0: Heap, $l#0_2_9#x#0: Box :: 
                      $Box($Unbox(Apply1(TInt, TInt, $l#0_2_9#heap#0, A#0, $Box($Unbox($l#0_2_9#x#0): int))): int
                           + $Unbox(Apply1(TInt, TInt, $l#0_2_9#heap#0, B#0, $Box($Unbox($l#0_2_9#x#0): int))): int)), 
                    (lambda $l#0_2_9#heap#0: Heap, $l#0_2_9#x#0: Box :: $IsBox($l#0_2_9#x#0, TInt)), 
                    (lambda $l#0_2_9#heap#0: Heap, $l#0_2_9#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_2_9#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- Hint7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(126,17)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        n##0_2_0 := n'#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        f##0_2_0 := A#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        g##0_2_0 := B#0;
        call {:id "id176"} Call$$_module.__default.Distribute(n##0_2_0, f##0_2_0, g##0_2_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_2_2 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_2_2, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_2_2;
            assume $IsGoodHeap($lambdaHeap#0_2_2);
            assume $Heap == $lambdaHeap#0_2_2 || $HeapSucc($Heap, $lambdaHeap#0_2_2);
            havoc y#0_2_1;
            if (true)
            {
                $_Frame#l0_2_2 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_2_2, $o, alloc)): bool ==> false);
                assume {:id "id177"} lambdaResult#0_2_2
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_2_1))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_2_2, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_2_2 := Lit(AtLayer((lambda $l#0_2_11#ly#0: LayerType :: 
              Handle1((lambda $l#0_2_11#heap#0: Heap, $l#0_2_11#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_2_11#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_2_11#y#0): int))): int)), 
                (lambda $l#0_2_11#heap#0: Heap, $l#0_2_11#y#0: Box :: 
                  $IsBox($l#0_2_11#y#0, TInt)), 
                (lambda $l#0_2_11#heap#0: Heap, $l#0_2_11#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_2_11#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_2_2, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_2_12#ly#0: LayerType :: 
                Handle1((lambda $l#0_2_12#heap#0: Heap, $l#0_2_12#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_2_12#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_2_12#y#0): int))): int)), 
                  (lambda $l#0_2_12#heap#0: Heap, $l#0_2_12#y#0: Box :: 
                    $IsBox($l#0_2_12#y#0, TInt)), 
                  (lambda $l#0_2_12#heap#0: Heap, $l#0_2_12#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_2_12#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_2_3 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_2_3, Tclass._System.nat(), $Heap);
        ##f#0_2_3 := A#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_2_3, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, A#0);
        ##n#0_2_4 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_2_4, Tclass._System.nat(), $Heap);
        ##f#0_2_4 := B#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_2_4, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, B#0);
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_2_14#ly#0: LayerType :: 
                  Handle1((lambda $l#0_2_14#heap#0: Heap, $l#0_2_14#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_2_14#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_2_14#y#0): int))): int)), 
                    (lambda $l#0_2_14#heap#0: Heap, $l#0_2_14#y#0: Box :: 
                      $IsBox($l#0_2_14#y#0, TInt)), 
                    (lambda $l#0_2_14#heap#0: Heap, $l#0_2_14#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_2_14#o#0: ref :: false))))), 
                $LS($LZ))))
           && _module.__default.Sum#canCall(n'#0, A#0)
           && _module.__default.Sum#canCall(n'#0, B#0);
        // ----- assert line7 == line8 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id178"} {:subsumption 0} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_2_15#ly#0: LayerType :: 
                    Handle1((lambda $l#0_2_15#heap#0: Heap, $l#0_2_15#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_2_15#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_2_15#y#0): int))): int)), 
                      (lambda $l#0_2_15#heap#0: Heap, $l#0_2_15#y#0: Box :: 
                        $IsBox($l#0_2_15#y#0, TInt)), 
                      (lambda $l#0_2_15#heap#0: Heap, $l#0_2_15#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_2_15#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_2_16#ly#0: LayerType :: 
                    Handle1((lambda $l#0_2_16#heap#0: Heap, $l#0_2_16#x#0: Box :: 
                        $Box($Unbox(Apply1(TInt, TInt, $l#0_2_16#heap#0, A#0, $Box($Unbox($l#0_2_16#x#0): int))): int
                             + $Unbox(Apply1(TInt, TInt, $l#0_2_16#heap#0, B#0, $Box($Unbox($l#0_2_16#x#0): int))): int)), 
                      (lambda $l#0_2_16#heap#0: Heap, $l#0_2_16#x#0: Box :: 
                        $IsBox($l#0_2_16#x#0, TInt)), 
                      (lambda $l#0_2_16#heap#0: Heap, $l#0_2_16#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_2_16#o#0: ref :: false))))), 
                  $LS($LZ))))
           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_2_17#ly#0: LayerType :: 
                    Handle1((lambda $l#0_2_17#heap#0: Heap, $l#0_2_17#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_2_17#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_2_17#y#0): int))): int)), 
                      (lambda $l#0_2_17#heap#0: Heap, $l#0_2_17#y#0: Box :: 
                        $IsBox($l#0_2_17#y#0, TInt)), 
                      (lambda $l#0_2_17#heap#0: Heap, $l#0_2_17#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_2_17#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), n'#0, A#0)
             + _module.__default.Sum($LS($LS($LZ)), n'#0, B#0);
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_1_0 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_1_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_1_0;
            assume $IsGoodHeap($lambdaHeap#0_1_0);
            assume $Heap == $lambdaHeap#0_1_0 || $HeapSucc($Heap, $lambdaHeap#0_1_0);
            havoc y#0_1_0;
            if (true)
            {
                $_Frame#l0_1_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_1_0, $o, alloc)): bool ==> false);
                assume {:id "id168"} lambdaResult#0_1_0
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_1_0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_1_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_1_0 := Lit(AtLayer((lambda $l#0_1_1#ly#0: LayerType :: 
              Handle1((lambda $l#0_1_1#heap#0: Heap, $l#0_1_1#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_1_1#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_1_1#y#0): int))): int)), 
                (lambda $l#0_1_1#heap#0: Heap, $l#0_1_1#y#0: Box :: $IsBox($l#0_1_1#y#0, TInt)), 
                (lambda $l#0_1_1#heap#0: Heap, $l#0_1_1#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_1_1#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_1_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_1_2#ly#0: LayerType :: 
                Handle1((lambda $l#0_1_2#heap#0: Heap, $l#0_1_2#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_1_2#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_1_2#y#0): int))): int)), 
                  (lambda $l#0_1_2#heap#0: Heap, $l#0_1_2#y#0: Box :: $IsBox($l#0_1_2#y#0, TInt)), 
                  (lambda $l#0_1_2#heap#0: Heap, $l#0_1_2#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_1_2#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_1_1 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_1_1, Tclass._System.nat(), $Heap);
        ##f#0_1_1 := A#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_1_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, A#0);
        ##n#0_1_2 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_1_2, Tclass._System.nat(), $Heap);
        ##f#0_1_2 := B#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_1_2, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, B#0);
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_1_4#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_4#heap#0: Heap, $l#0_1_4#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_1_4#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_1_4#y#0): int))): int)), 
                    (lambda $l#0_1_4#heap#0: Heap, $l#0_1_4#y#0: Box :: $IsBox($l#0_1_4#y#0, TInt)), 
                    (lambda $l#0_1_4#heap#0: Heap, $l#0_1_4#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_4#o#0: ref :: false))))), 
                $LS($LZ))))
           && _module.__default.Sum#canCall(n'#0, A#0)
           && _module.__default.Sum#canCall(n'#0, B#0);
        // ----- Hint8 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_1_3 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_1_3, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_1_1;
            assume $IsGoodHeap($lambdaHeap#0_1_1);
            assume $Heap == $lambdaHeap#0_1_1 || $HeapSucc($Heap, $lambdaHeap#0_1_1);
            havoc y#0_1_1;
            if (true)
            {
                $_Frame#l0_1_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_1_1, $o, alloc)): bool ==> false);
                assume {:id "id169"} lambdaResult#0_1_1
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_1_1))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_1_1, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_1_3 := Lit(AtLayer((lambda $l#0_1_6#ly#0: LayerType :: 
              Handle1((lambda $l#0_1_6#heap#0: Heap, $l#0_1_6#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_1_6#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_1_6#y#0): int))): int)), 
                (lambda $l#0_1_6#heap#0: Heap, $l#0_1_6#y#0: Box :: $IsBox($l#0_1_6#y#0, TInt)), 
                (lambda $l#0_1_6#heap#0: Heap, $l#0_1_6#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_1_6#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_1_3, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_1_7#ly#0: LayerType :: 
                Handle1((lambda $l#0_1_7#heap#0: Heap, $l#0_1_7#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_1_7#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_1_7#y#0): int))): int)), 
                  (lambda $l#0_1_7#heap#0: Heap, $l#0_1_7#y#0: Box :: $IsBox($l#0_1_7#y#0, TInt)), 
                  (lambda $l#0_1_7#heap#0: Heap, $l#0_1_7#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_1_7#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_1_4 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_1_4, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_1_2;
            assume $IsGoodHeap($lambdaHeap#0_1_2);
            assume $Heap == $lambdaHeap#0_1_2 || $HeapSucc($Heap, $lambdaHeap#0_1_2);
            havoc w#0_1_0;
            if (true)
            {
                $_Frame#l0_1_2 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_1_2, $o, alloc)): bool ==> false);
                assume {:id "id170"} lambdaResult#0_1_2
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(w#0_1_0), $Box(n'#0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_1_2, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_1_4 := Lit(AtLayer((lambda $l#0_1_9#ly#0: LayerType :: 
              Handle1((lambda $l#0_1_9#heap#0: Heap, $l#0_1_9#w#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_1_9#heap#0, 
                        g#0, 
                        $Box($Unbox($l#0_1_9#w#0): int), 
                        $Box(n'#0))): int)), 
                (lambda $l#0_1_9#heap#0: Heap, $l#0_1_9#w#0: Box :: $IsBox($l#0_1_9#w#0, TInt)), 
                (lambda $l#0_1_9#heap#0: Heap, $l#0_1_9#w#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_1_9#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_1_4, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_1_10#ly#0: LayerType :: 
                Handle1((lambda $l#0_1_10#heap#0: Heap, $l#0_1_10#w#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_1_10#heap#0, 
                          g#0, 
                          $Box($Unbox($l#0_1_10#w#0): int), 
                          $Box(n'#0))): int)), 
                  (lambda $l#0_1_10#heap#0: Heap, $l#0_1_10#w#0: Box :: 
                    $IsBox($l#0_1_10#w#0, TInt)), 
                  (lambda $l#0_1_10#heap#0: Heap, $l#0_1_10#w#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_1_10#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_1_5 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_1_5, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_1_3;
            assume $IsGoodHeap($lambdaHeap#0_1_3);
            assume $Heap == $lambdaHeap#0_1_3 || $HeapSucc($Heap, $lambdaHeap#0_1_3);
            havoc w#0_1_1;
            if (true)
            {
                $_Frame#l0_1_3 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_1_3, $o, alloc)): bool ==> false);
                ##n#0_1_6 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_1_6, Tclass._System.nat(), $lambdaHeap#0_1_3);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_1_4;
                    assume $IsGoodHeap($lambdaHeap#0_1_4);
                    assume $lambdaHeap#0_1_3 == $lambdaHeap#0_1_4
                       || $HeapSucc($lambdaHeap#0_1_3, $lambdaHeap#0_1_4);
                    havoc y#0_1_2;
                    if (true)
                    {
                        $_Frame#l0_1_4 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_1_4, $o, alloc)): bool ==> false);
                        assume {:id "id171"} lambdaResult#0_1_4
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_1_3, g#0, $Box(w#0_1_1), $Box(y#0_1_2))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_1_4, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_1_6 := Lit(AtLayer((lambda $l#0_1_12#ly#0: LayerType :: 
                      Handle1((lambda $l#0_1_12#heap#0: Heap, $l#0_1_12#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_1_12#heap#0, 
                                g#0, 
                                $Box(w#0_1_1), 
                                $Box($Unbox($l#0_1_12#y#0): int))): int)), 
                        (lambda $l#0_1_12#heap#0: Heap, $l#0_1_12#y#0: Box :: 
                          $IsBox($l#0_1_12#y#0, TInt)), 
                        (lambda $l#0_1_12#heap#0: Heap, $l#0_1_12#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_1_12#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_1_6, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_1_3);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_1_13#ly#0: LayerType :: 
                        Handle1((lambda $l#0_1_13#heap#0: Heap, $l#0_1_13#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_1_13#heap#0, 
                                  g#0, 
                                  $Box(w#0_1_1), 
                                  $Box($Unbox($l#0_1_13#y#0): int))): int)), 
                          (lambda $l#0_1_13#heap#0: Heap, $l#0_1_13#y#0: Box :: 
                            $IsBox($l#0_1_13#y#0, TInt)), 
                          (lambda $l#0_1_13#heap#0: Heap, $l#0_1_13#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_1_13#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id172"} lambdaResult#0_1_3
                   == _module.__default.Sum($LS($LZ), 
                    n'#0, 
                    Lit(AtLayer((lambda $l#0_1_15#ly#0: LayerType :: 
                          Handle1((lambda $l#0_1_15#heap#0: Heap, $l#0_1_15#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_1_15#heap#0, 
                                    g#0, 
                                    $Box(w#0_1_1), 
                                    $Box($Unbox($l#0_1_15#y#0): int))): int)), 
                            (lambda $l#0_1_15#heap#0: Heap, $l#0_1_15#y#0: Box :: 
                              $IsBox($l#0_1_15#y#0, TInt)), 
                            (lambda $l#0_1_15#heap#0: Heap, $l#0_1_15#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_1_15#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_1_17#ly#0: LayerType :: 
                        Handle1((lambda $l#0_1_17#heap#0: Heap, $l#0_1_17#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_1_17#heap#0, 
                                  g#0, 
                                  $Box(w#0_1_1), 
                                  $Box($Unbox($l#0_1_17#y#0): int))): int)), 
                          (lambda $l#0_1_17#heap#0: Heap, $l#0_1_17#y#0: Box :: 
                            $IsBox($l#0_1_17#y#0, TInt)), 
                          (lambda $l#0_1_17#heap#0: Heap, $l#0_1_17#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_1_17#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_1_3, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_1_5 := Lit(AtLayer((lambda $l#0_1_20#ly#0: LayerType :: 
              Handle1((lambda $l#0_1_20#heap#0: Heap, $l#0_1_20#w#0: Box :: 
                  $Box(_module.__default.Sum($l#0_1_20#ly#0, 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_1_21#ly#0: LayerType :: 
                            Handle1((lambda $l#0_1_21#heap#0: Heap, $l#0_1_21#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_1_21#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_1_20#w#0): int), 
                                      $Box($Unbox($l#0_1_21#y#0): int))): int)), 
                              (lambda $l#0_1_21#heap#0: Heap, $l#0_1_21#y#0: Box :: 
                                $IsBox($l#0_1_21#y#0, TInt)), 
                              (lambda $l#0_1_21#heap#0: Heap, $l#0_1_21#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_1_21#o#0: ref :: false))))), 
                          $l#0_1_20#ly#0))))), 
                (lambda $l#0_1_20#heap#0: Heap, $l#0_1_20#w#0: Box :: 
                  $IsBox($l#0_1_20#w#0, TInt)), 
                (lambda $l#0_1_20#heap#0: Heap, $l#0_1_20#w#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_1_20#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_1_5, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_1_22#ly#0: LayerType :: 
                Handle1((lambda $l#0_1_22#heap#0: Heap, $l#0_1_22#w#0: Box :: 
                    $Box(_module.__default.Sum($l#0_1_22#ly#0, 
                        n'#0, 
                        Lit(AtLayer((lambda $l#0_1_23#ly#0: LayerType :: 
                              Handle1((lambda $l#0_1_23#heap#0: Heap, $l#0_1_23#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_1_23#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_1_22#w#0): int), 
                                        $Box($Unbox($l#0_1_23#y#0): int))): int)), 
                                (lambda $l#0_1_23#heap#0: Heap, $l#0_1_23#y#0: Box :: 
                                  $IsBox($l#0_1_23#y#0, TInt)), 
                                (lambda $l#0_1_23#heap#0: Heap, $l#0_1_23#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_1_23#o#0: ref :: false))))), 
                            $l#0_1_22#ly#0))))), 
                  (lambda $l#0_1_22#heap#0: Heap, $l#0_1_22#w#0: Box :: 
                    $IsBox($l#0_1_22#w#0, TInt)), 
                  (lambda $l#0_1_22#heap#0: Heap, $l#0_1_22#w#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_1_22#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_1_25#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_25#heap#0: Heap, $l#0_1_25#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_1_25#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_1_25#y#0): int))): int)), 
                    (lambda $l#0_1_25#heap#0: Heap, $l#0_1_25#y#0: Box :: 
                      $IsBox($l#0_1_25#y#0, TInt)), 
                    (lambda $l#0_1_25#heap#0: Heap, $l#0_1_25#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_25#o#0: ref :: false))))), 
                $LS($LZ))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_1_27#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_27#heap#0: Heap, $l#0_1_27#w#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_1_27#heap#0, 
                            g#0, 
                            $Box($Unbox($l#0_1_27#w#0): int), 
                            $Box(n'#0))): int)), 
                    (lambda $l#0_1_27#heap#0: Heap, $l#0_1_27#w#0: Box :: 
                      $IsBox($l#0_1_27#w#0, TInt)), 
                    (lambda $l#0_1_27#heap#0: Heap, $l#0_1_27#w#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_27#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_1_28#w#0: int :: 
            _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#0_1_30#ly#0: LayerType :: 
                    Handle1((lambda $l#0_1_30#heap#0: Heap, $l#0_1_30#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_1_30#heap#0, 
                              g#0, 
                              $Box($l#0_1_28#w#0), 
                              $Box($Unbox($l#0_1_30#y#0): int))): int)), 
                      (lambda $l#0_1_30#heap#0: Heap, $l#0_1_30#y#0: Box :: 
                        $IsBox($l#0_1_30#y#0, TInt)), 
                      (lambda $l#0_1_30#heap#0: Heap, $l#0_1_30#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_1_30#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_1_31#ly#0: LayerType :: 
                  Handle1((lambda $l#0_1_31#heap#0: Heap, $l#0_1_31#w#0: Box :: 
                      $Box(_module.__default.Sum($l#0_1_31#ly#0, 
                          n'#0, 
                          Lit(AtLayer((lambda $l#0_1_32#ly#0: LayerType :: 
                                Handle1((lambda $l#0_1_32#heap#0: Heap, $l#0_1_32#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_1_32#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_1_31#w#0): int), 
                                          $Box($Unbox($l#0_1_32#y#0): int))): int)), 
                                  (lambda $l#0_1_32#heap#0: Heap, $l#0_1_32#y#0: Box :: 
                                    $IsBox($l#0_1_32#y#0, TInt)), 
                                  (lambda $l#0_1_32#heap#0: Heap, $l#0_1_32#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_1_32#o#0: ref :: false))))), 
                              $l#0_1_31#ly#0))))), 
                    (lambda $l#0_1_31#heap#0: Heap, $l#0_1_31#w#0: Box :: 
                      $IsBox($l#0_1_31#w#0, TInt)), 
                    (lambda $l#0_1_31#heap#0: Heap, $l#0_1_31#w#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_1_31#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- assert line8 == line9 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id173"} {:subsumption 0} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_1_33#ly#0: LayerType :: 
                    Handle1((lambda $l#0_1_33#heap#0: Heap, $l#0_1_33#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_1_33#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_1_33#y#0): int))): int)), 
                      (lambda $l#0_1_33#heap#0: Heap, $l#0_1_33#y#0: Box :: 
                        $IsBox($l#0_1_33#y#0, TInt)), 
                      (lambda $l#0_1_33#heap#0: Heap, $l#0_1_33#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_1_33#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), n'#0, A#0)
             + _module.__default.Sum($LS($LS($LZ)), n'#0, B#0)
           == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_1_34#ly#0: LayerType :: 
                    Handle1((lambda $l#0_1_34#heap#0: Heap, $l#0_1_34#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_1_34#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_1_34#y#0): int))): int)), 
                      (lambda $l#0_1_34#heap#0: Heap, $l#0_1_34#y#0: Box :: 
                        $IsBox($l#0_1_34#y#0, TInt)), 
                      (lambda $l#0_1_34#heap#0: Heap, $l#0_1_34#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_1_34#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_1_35#ly#0: LayerType :: 
                    Handle1((lambda $l#0_1_35#heap#0: Heap, $l#0_1_35#w#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_1_35#heap#0, 
                              g#0, 
                              $Box($Unbox($l#0_1_35#w#0): int), 
                              $Box(n'#0))): int)), 
                      (lambda $l#0_1_35#heap#0: Heap, $l#0_1_35#w#0: Box :: 
                        $IsBox($l#0_1_35#w#0, TInt)), 
                      (lambda $l#0_1_35#heap#0: Heap, $l#0_1_35#w#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_1_35#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_1_36#ly#0: LayerType :: 
                    Handle1((lambda $l#0_1_36#heap#0: Heap, $l#0_1_36#w#0: Box :: 
                        $Box(_module.__default.Sum($l#0_1_36#ly#0, 
                            n'#0, 
                            Lit(AtLayer((lambda $l#0_1_37#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_1_37#heap#0: Heap, $l#0_1_37#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_1_37#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_1_36#w#0): int), 
                                            $Box($Unbox($l#0_1_37#y#0): int))): int)), 
                                    (lambda $l#0_1_37#heap#0: Heap, $l#0_1_37#y#0: Box :: 
                                      $IsBox($l#0_1_37#y#0, TInt)), 
                                    (lambda $l#0_1_37#heap#0: Heap, $l#0_1_37#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_1_37#o#0: ref :: false))))), 
                                $l#0_1_36#ly#0))))), 
                      (lambda $l#0_1_36#heap#0: Heap, $l#0_1_36#w#0: Box :: 
                        $IsBox($l#0_1_36#w#0, TInt)), 
                      (lambda $l#0_1_36#heap#0: Heap, $l#0_1_36#w#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_1_36#o#0: ref :: false))))), 
                  $LS($LZ))));
        assume false;
    }
    else if (*)
    {
        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_0_0 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_0_0, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_0_0;
            assume $IsGoodHeap($lambdaHeap#0_0_0);
            assume $Heap == $lambdaHeap#0_0_0 || $HeapSucc($Heap, $lambdaHeap#0_0_0);
            havoc y#0_0_0;
            if (true)
            {
                $_Frame#l0_0_0 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_0_0, $o, alloc)): bool ==> false);
                assume {:id "id159"} lambdaResult#0_0_0
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_0_0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_0_0, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_0_0 := Lit(AtLayer((lambda $l#0_0_1#ly#0: LayerType :: 
              Handle1((lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_0_1#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_0_1#y#0): int))): int)), 
                (lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#y#0: Box :: $IsBox($l#0_0_1#y#0, TInt)), 
                (lambda $l#0_0_1#heap#0: Heap, $l#0_0_1#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_0_1#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_0_0, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_0_2#ly#0: LayerType :: 
                Handle1((lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_0_2#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_0_2#y#0): int))): int)), 
                  (lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#y#0: Box :: $IsBox($l#0_0_2#y#0, TInt)), 
                  (lambda $l#0_0_2#heap#0: Heap, $l#0_0_2#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_0_2#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_0_1 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_0_1, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_0_1;
            assume $IsGoodHeap($lambdaHeap#0_0_1);
            assume $Heap == $lambdaHeap#0_0_1 || $HeapSucc($Heap, $lambdaHeap#0_0_1);
            havoc w#0_0_0;
            if (true)
            {
                $_Frame#l0_0_1 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_0_1, $o, alloc)): bool ==> false);
                assume {:id "id160"} lambdaResult#0_0_1
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(w#0_0_0), $Box(n'#0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_0_1, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_0_1 := Lit(AtLayer((lambda $l#0_0_4#ly#0: LayerType :: 
              Handle1((lambda $l#0_0_4#heap#0: Heap, $l#0_0_4#w#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_0_4#heap#0, 
                        g#0, 
                        $Box($Unbox($l#0_0_4#w#0): int), 
                        $Box(n'#0))): int)), 
                (lambda $l#0_0_4#heap#0: Heap, $l#0_0_4#w#0: Box :: $IsBox($l#0_0_4#w#0, TInt)), 
                (lambda $l#0_0_4#heap#0: Heap, $l#0_0_4#w#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_0_4#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_0_1, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_0_5#ly#0: LayerType :: 
                Handle1((lambda $l#0_0_5#heap#0: Heap, $l#0_0_5#w#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_0_5#heap#0, 
                          g#0, 
                          $Box($Unbox($l#0_0_5#w#0): int), 
                          $Box(n'#0))): int)), 
                  (lambda $l#0_0_5#heap#0: Heap, $l#0_0_5#w#0: Box :: $IsBox($l#0_0_5#w#0, TInt)), 
                  (lambda $l#0_0_5#heap#0: Heap, $l#0_0_5#w#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_0_5#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_0_2 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_0_2, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_0_2;
            assume $IsGoodHeap($lambdaHeap#0_0_2);
            assume $Heap == $lambdaHeap#0_0_2 || $HeapSucc($Heap, $lambdaHeap#0_0_2);
            havoc w#0_0_1;
            if (true)
            {
                $_Frame#l0_0_2 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_0_2, $o, alloc)): bool ==> false);
                ##n#0_0_3 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_0_3, Tclass._System.nat(), $lambdaHeap#0_0_2);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_0_3;
                    assume $IsGoodHeap($lambdaHeap#0_0_3);
                    assume $lambdaHeap#0_0_2 == $lambdaHeap#0_0_3
                       || $HeapSucc($lambdaHeap#0_0_2, $lambdaHeap#0_0_3);
                    havoc y#0_0_1;
                    if (true)
                    {
                        $_Frame#l0_0_3 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_0_3, $o, alloc)): bool ==> false);
                        assume {:id "id161"} lambdaResult#0_0_3
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0_2, g#0, $Box(w#0_0_1), $Box(y#0_0_1))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_0_3, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_0_3 := Lit(AtLayer((lambda $l#0_0_7#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_7#heap#0: Heap, $l#0_0_7#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_0_7#heap#0, 
                                g#0, 
                                $Box(w#0_0_1), 
                                $Box($Unbox($l#0_0_7#y#0): int))): int)), 
                        (lambda $l#0_0_7#heap#0: Heap, $l#0_0_7#y#0: Box :: $IsBox($l#0_0_7#y#0, TInt)), 
                        (lambda $l#0_0_7#heap#0: Heap, $l#0_0_7#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_7#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_0_3, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_0_2);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_0_8#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0_8#heap#0: Heap, $l#0_0_8#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_0_8#heap#0, 
                                  g#0, 
                                  $Box(w#0_0_1), 
                                  $Box($Unbox($l#0_0_8#y#0): int))): int)), 
                          (lambda $l#0_0_8#heap#0: Heap, $l#0_0_8#y#0: Box :: $IsBox($l#0_0_8#y#0, TInt)), 
                          (lambda $l#0_0_8#heap#0: Heap, $l#0_0_8#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0_8#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id162"} lambdaResult#0_0_2
                   == _module.__default.Sum($LS($LZ), 
                    n'#0, 
                    Lit(AtLayer((lambda $l#0_0_10#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_10#heap#0: Heap, $l#0_0_10#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_0_10#heap#0, 
                                    g#0, 
                                    $Box(w#0_0_1), 
                                    $Box($Unbox($l#0_0_10#y#0): int))): int)), 
                            (lambda $l#0_0_10#heap#0: Heap, $l#0_0_10#y#0: Box :: 
                              $IsBox($l#0_0_10#y#0, TInt)), 
                            (lambda $l#0_0_10#heap#0: Heap, $l#0_0_10#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_10#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_0_12#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0_12#heap#0: Heap, $l#0_0_12#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_0_12#heap#0, 
                                  g#0, 
                                  $Box(w#0_0_1), 
                                  $Box($Unbox($l#0_0_12#y#0): int))): int)), 
                          (lambda $l#0_0_12#heap#0: Heap, $l#0_0_12#y#0: Box :: 
                            $IsBox($l#0_0_12#y#0, TInt)), 
                          (lambda $l#0_0_12#heap#0: Heap, $l#0_0_12#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0_12#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_0_2, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_0_2 := Lit(AtLayer((lambda $l#0_0_15#ly#0: LayerType :: 
              Handle1((lambda $l#0_0_15#heap#0: Heap, $l#0_0_15#w#0: Box :: 
                  $Box(_module.__default.Sum($l#0_0_15#ly#0, 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_0_16#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_16#heap#0: Heap, $l#0_0_16#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_16#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_0_15#w#0): int), 
                                      $Box($Unbox($l#0_0_16#y#0): int))): int)), 
                              (lambda $l#0_0_16#heap#0: Heap, $l#0_0_16#y#0: Box :: 
                                $IsBox($l#0_0_16#y#0, TInt)), 
                              (lambda $l#0_0_16#heap#0: Heap, $l#0_0_16#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_16#o#0: ref :: false))))), 
                          $l#0_0_15#ly#0))))), 
                (lambda $l#0_0_15#heap#0: Heap, $l#0_0_15#w#0: Box :: 
                  $IsBox($l#0_0_15#w#0, TInt)), 
                (lambda $l#0_0_15#heap#0: Heap, $l#0_0_15#w#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_0_15#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_0_2, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_0_17#ly#0: LayerType :: 
                Handle1((lambda $l#0_0_17#heap#0: Heap, $l#0_0_17#w#0: Box :: 
                    $Box(_module.__default.Sum($l#0_0_17#ly#0, 
                        n'#0, 
                        Lit(AtLayer((lambda $l#0_0_18#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_18#heap#0: Heap, $l#0_0_18#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_0_18#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_0_17#w#0): int), 
                                        $Box($Unbox($l#0_0_18#y#0): int))): int)), 
                                (lambda $l#0_0_18#heap#0: Heap, $l#0_0_18#y#0: Box :: 
                                  $IsBox($l#0_0_18#y#0, TInt)), 
                                (lambda $l#0_0_18#heap#0: Heap, $l#0_0_18#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_18#o#0: ref :: false))))), 
                            $l#0_0_17#ly#0))))), 
                  (lambda $l#0_0_17#heap#0: Heap, $l#0_0_17#w#0: Box :: 
                    $IsBox($l#0_0_17#w#0, TInt)), 
                  (lambda $l#0_0_17#heap#0: Heap, $l#0_0_17#w#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_0_17#o#0: ref :: false))))), 
              $LS($LZ))));
        assume _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_0_20#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_20#heap#0: Heap, $l#0_0_20#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_0_20#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_0_20#y#0): int))): int)), 
                    (lambda $l#0_0_20#heap#0: Heap, $l#0_0_20#y#0: Box :: 
                      $IsBox($l#0_0_20#y#0, TInt)), 
                    (lambda $l#0_0_20#heap#0: Heap, $l#0_0_20#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_20#o#0: ref :: false))))), 
                $LS($LZ))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_0_22#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_22#heap#0: Heap, $l#0_0_22#w#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_0_22#heap#0, 
                            g#0, 
                            $Box($Unbox($l#0_0_22#w#0): int), 
                            $Box(n'#0))): int)), 
                    (lambda $l#0_0_22#heap#0: Heap, $l#0_0_22#w#0: Box :: 
                      $IsBox($l#0_0_22#w#0, TInt)), 
                    (lambda $l#0_0_22#heap#0: Heap, $l#0_0_22#w#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_22#o#0: ref :: false))))), 
                $LS($LZ))))
           && 
          (forall $l#0_0_23#w#0: int :: 
            _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#0_0_25#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_25#heap#0: Heap, $l#0_0_25#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_0_25#heap#0, 
                              g#0, 
                              $Box($l#0_0_23#w#0), 
                              $Box($Unbox($l#0_0_25#y#0): int))): int)), 
                      (lambda $l#0_0_25#heap#0: Heap, $l#0_0_25#y#0: Box :: 
                        $IsBox($l#0_0_25#y#0, TInt)), 
                      (lambda $l#0_0_25#heap#0: Heap, $l#0_0_25#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_25#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_0_26#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_26#heap#0: Heap, $l#0_0_26#w#0: Box :: 
                      $Box(_module.__default.Sum($l#0_0_26#ly#0, 
                          n'#0, 
                          Lit(AtLayer((lambda $l#0_0_27#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_27#heap#0: Heap, $l#0_0_27#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_0_27#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_0_26#w#0): int), 
                                          $Box($Unbox($l#0_0_27#y#0): int))): int)), 
                                  (lambda $l#0_0_27#heap#0: Heap, $l#0_0_27#y#0: Box :: 
                                    $IsBox($l#0_0_27#y#0, TInt)), 
                                  (lambda $l#0_0_27#heap#0: Heap, $l#0_0_27#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_27#o#0: ref :: false))))), 
                              $l#0_0_26#ly#0))))), 
                    (lambda $l#0_0_26#heap#0: Heap, $l#0_0_26#w#0: Box :: 
                      $IsBox($l#0_0_26#w#0, TInt)), 
                    (lambda $l#0_0_26#heap#0: Heap, $l#0_0_26#w#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_26#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- Hint9 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        ##n#0_0_4 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_0_4, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_0_4;
            assume $IsGoodHeap($lambdaHeap#0_0_4);
            assume $Heap == $lambdaHeap#0_0_4 || $HeapSucc($Heap, $lambdaHeap#0_0_4);
            havoc x#0_0_0;
            if (true)
            {
                $_Frame#l0_0_4 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_0_4, $o, alloc)): bool ==> false);
                ##n#0_0_5 := n'#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0_0_5, Tclass._System.nat(), $lambdaHeap#0_0_4);
                // Begin Comprehension WF check
                if (*)
                {
                    havoc $lambdaHeap#0_0_5;
                    assume $IsGoodHeap($lambdaHeap#0_0_5);
                    assume $lambdaHeap#0_0_4 == $lambdaHeap#0_0_5
                       || $HeapSucc($lambdaHeap#0_0_4, $lambdaHeap#0_0_5);
                    havoc y#0_0_2;
                    if (true)
                    {
                        $_Frame#l0_0_5 := (lambda $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($lambdaHeap#0_0_5, $o, alloc)): bool ==> false);
                        assume {:id "id163"} lambdaResult#0_0_5
                           == $Unbox(Apply2(TInt, TInt, TInt, $lambdaHeap#0_0_4, g#0, $Box(x#0_0_0), $Box(y#0_0_2))): int;
                        assume true;
                        // CheckWellformedWithResult: any expression
                        assume $Is(lambdaResult#0_0_5, TInt);
                    }

                    assume false;
                }

                // End Comprehension WF check
                ##f#0_0_5 := Lit(AtLayer((lambda $l#0_0_29#ly#0: LayerType :: 
                      Handle1((lambda $l#0_0_29#heap#0: Heap, $l#0_0_29#y#0: Box :: 
                          $Box($Unbox(Apply2(TInt, 
                                TInt, 
                                TInt, 
                                $l#0_0_29#heap#0, 
                                g#0, 
                                $Box(x#0_0_0), 
                                $Box($Unbox($l#0_0_29#y#0): int))): int)), 
                        (lambda $l#0_0_29#heap#0: Heap, $l#0_0_29#y#0: Box :: 
                          $IsBox($l#0_0_29#y#0, TInt)), 
                        (lambda $l#0_0_29#heap#0: Heap, $l#0_0_29#y#0: Box :: 
                          SetRef_to_SetBox((lambda $l#0_0_29#o#0: ref :: false))))), 
                    $LS($LZ)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##f#0_0_5, Tclass._System.___hTotalFunc1(TInt, TInt), $lambdaHeap#0_0_4);
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_0_30#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0_30#heap#0: Heap, $l#0_0_30#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_0_30#heap#0, 
                                  g#0, 
                                  $Box(x#0_0_0), 
                                  $Box($Unbox($l#0_0_30#y#0): int))): int)), 
                          (lambda $l#0_0_30#heap#0: Heap, $l#0_0_30#y#0: Box :: 
                            $IsBox($l#0_0_30#y#0, TInt)), 
                          (lambda $l#0_0_30#heap#0: Heap, $l#0_0_30#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0_30#o#0: ref :: false))))), 
                      $LS($LZ))));
                assume {:id "id164"} lambdaResult#0_0_4
                   == _module.__default.Sum($LS($LZ), 
                    n'#0, 
                    Lit(AtLayer((lambda $l#0_0_32#ly#0: LayerType :: 
                          Handle1((lambda $l#0_0_32#heap#0: Heap, $l#0_0_32#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#0_0_32#heap#0, 
                                    g#0, 
                                    $Box(x#0_0_0), 
                                    $Box($Unbox($l#0_0_32#y#0): int))): int)), 
                            (lambda $l#0_0_32#heap#0: Heap, $l#0_0_32#y#0: Box :: 
                              $IsBox($l#0_0_32#y#0, TInt)), 
                            (lambda $l#0_0_32#heap#0: Heap, $l#0_0_32#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#0_0_32#o#0: ref :: false))))), 
                        $LS($LZ))));
                assume _module.__default.Sum#canCall(n'#0, 
                  Lit(AtLayer((lambda $l#0_0_34#ly#0: LayerType :: 
                        Handle1((lambda $l#0_0_34#heap#0: Heap, $l#0_0_34#y#0: Box :: 
                            $Box($Unbox(Apply2(TInt, 
                                  TInt, 
                                  TInt, 
                                  $l#0_0_34#heap#0, 
                                  g#0, 
                                  $Box(x#0_0_0), 
                                  $Box($Unbox($l#0_0_34#y#0): int))): int)), 
                          (lambda $l#0_0_34#heap#0: Heap, $l#0_0_34#y#0: Box :: 
                            $IsBox($l#0_0_34#y#0, TInt)), 
                          (lambda $l#0_0_34#heap#0: Heap, $l#0_0_34#y#0: Box :: 
                            SetRef_to_SetBox((lambda $l#0_0_34#o#0: ref :: false))))), 
                      $LS($LZ))));
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_0_4, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_0_4 := Lit(AtLayer((lambda $l#0_0_37#ly#0: LayerType :: 
              Handle1((lambda $l#0_0_37#heap#0: Heap, $l#0_0_37#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_0_37#ly#0, 
                      n'#0, 
                      Lit(AtLayer((lambda $l#0_0_38#ly#0: LayerType :: 
                            Handle1((lambda $l#0_0_38#heap#0: Heap, $l#0_0_38#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_0_38#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_0_37#x#0): int), 
                                      $Box($Unbox($l#0_0_38#y#0): int))): int)), 
                              (lambda $l#0_0_38#heap#0: Heap, $l#0_0_38#y#0: Box :: 
                                $IsBox($l#0_0_38#y#0, TInt)), 
                              (lambda $l#0_0_38#heap#0: Heap, $l#0_0_38#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_0_38#o#0: ref :: false))))), 
                          $l#0_0_37#ly#0))))), 
                (lambda $l#0_0_37#heap#0: Heap, $l#0_0_37#x#0: Box :: 
                  $IsBox($l#0_0_37#x#0, TInt)), 
                (lambda $l#0_0_37#heap#0: Heap, $l#0_0_37#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_0_37#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_0_4, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_0_39#ly#0: LayerType :: 
                Handle1((lambda $l#0_0_39#heap#0: Heap, $l#0_0_39#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_0_39#ly#0, 
                        n'#0, 
                        Lit(AtLayer((lambda $l#0_0_40#ly#0: LayerType :: 
                              Handle1((lambda $l#0_0_40#heap#0: Heap, $l#0_0_40#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_0_40#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_0_39#x#0): int), 
                                        $Box($Unbox($l#0_0_40#y#0): int))): int)), 
                                (lambda $l#0_0_40#heap#0: Heap, $l#0_0_40#y#0: Box :: 
                                  $IsBox($l#0_0_40#y#0, TInt)), 
                                (lambda $l#0_0_40#heap#0: Heap, $l#0_0_40#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_0_40#o#0: ref :: false))))), 
                            $l#0_0_39#ly#0))))), 
                  (lambda $l#0_0_39#heap#0: Heap, $l#0_0_39#x#0: Box :: 
                    $IsBox($l#0_0_39#x#0, TInt)), 
                  (lambda $l#0_0_39#heap#0: Heap, $l#0_0_39#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_0_39#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_0_6 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_0_6, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_0_6;
            assume $IsGoodHeap($lambdaHeap#0_0_6);
            assume $Heap == $lambdaHeap#0_0_6 || $HeapSucc($Heap, $lambdaHeap#0_0_6);
            havoc y#0_0_3;
            if (true)
            {
                $_Frame#l0_0_6 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_0_6, $o, alloc)): bool ==> false);
                assume {:id "id165"} lambdaResult#0_0_6
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(y#0_0_3))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_0_6, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_0_6 := Lit(AtLayer((lambda $l#0_0_42#ly#0: LayerType :: 
              Handle1((lambda $l#0_0_42#heap#0: Heap, $l#0_0_42#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_0_42#heap#0, 
                        g#0, 
                        $Box(n'#0), 
                        $Box($Unbox($l#0_0_42#y#0): int))): int)), 
                (lambda $l#0_0_42#heap#0: Heap, $l#0_0_42#y#0: Box :: 
                  $IsBox($l#0_0_42#y#0, TInt)), 
                (lambda $l#0_0_42#heap#0: Heap, $l#0_0_42#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_0_42#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_0_6, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_0_43#ly#0: LayerType :: 
                Handle1((lambda $l#0_0_43#heap#0: Heap, $l#0_0_43#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_0_43#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_0_43#y#0): int))): int)), 
                  (lambda $l#0_0_43#heap#0: Heap, $l#0_0_43#y#0: Box :: 
                    $IsBox($l#0_0_43#y#0, TInt)), 
                  (lambda $l#0_0_43#heap#0: Heap, $l#0_0_43#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_0_43#o#0: ref :: false))))), 
              $LS($LZ))));
        ##n#0_0_7 := n'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##n#0_0_7, Tclass._System.nat(), $Heap);
        // Begin Comprehension WF check
        if (*)
        {
            havoc $lambdaHeap#0_0_7;
            assume $IsGoodHeap($lambdaHeap#0_0_7);
            assume $Heap == $lambdaHeap#0_0_7 || $HeapSucc($Heap, $lambdaHeap#0_0_7);
            havoc x#0_0_1;
            if (true)
            {
                $_Frame#l0_0_7 := (lambda $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($lambdaHeap#0_0_7, $o, alloc)): bool ==> false);
                assume {:id "id166"} lambdaResult#0_0_7
                   == $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(x#0_0_1), $Box(n'#0))): int;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(lambdaResult#0_0_7, TInt);
            }

            assume false;
        }

        // End Comprehension WF check
        ##f#0_0_7 := Lit(AtLayer((lambda $l#0_0_45#ly#0: LayerType :: 
              Handle1((lambda $l#0_0_45#heap#0: Heap, $l#0_0_45#x#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#0_0_45#heap#0, 
                        g#0, 
                        $Box($Unbox($l#0_0_45#x#0): int), 
                        $Box(n'#0))): int)), 
                (lambda $l#0_0_45#heap#0: Heap, $l#0_0_45#x#0: Box :: 
                  $IsBox($l#0_0_45#x#0, TInt)), 
                (lambda $l#0_0_45#heap#0: Heap, $l#0_0_45#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_0_45#o#0: ref :: false))))), 
            $LS($LZ)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##f#0_0_7, Tclass._System.___hTotalFunc1(TInt, TInt), $Heap);
        assume _module.__default.Sum#canCall(n'#0, 
          Lit(AtLayer((lambda $l#0_0_46#ly#0: LayerType :: 
                Handle1((lambda $l#0_0_46#heap#0: Heap, $l#0_0_46#x#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_0_46#heap#0, 
                          g#0, 
                          $Box($Unbox($l#0_0_46#x#0): int), 
                          $Box(n'#0))): int)), 
                  (lambda $l#0_0_46#heap#0: Heap, $l#0_0_46#x#0: Box :: 
                    $IsBox($l#0_0_46#x#0, TInt)), 
                  (lambda $l#0_0_46#heap#0: Heap, $l#0_0_46#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_0_46#o#0: ref :: false))))), 
              $LS($LZ))));
        assume (forall $l#0_0_47#x#0: int :: 
            _module.__default.Sum#canCall(n'#0, 
              Lit(AtLayer((lambda $l#0_0_49#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_49#heap#0: Heap, $l#0_0_49#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_0_49#heap#0, 
                              g#0, 
                              $Box($l#0_0_47#x#0), 
                              $Box($Unbox($l#0_0_49#y#0): int))): int)), 
                      (lambda $l#0_0_49#heap#0: Heap, $l#0_0_49#y#0: Box :: 
                        $IsBox($l#0_0_49#y#0, TInt)), 
                      (lambda $l#0_0_49#heap#0: Heap, $l#0_0_49#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_49#o#0: ref :: false))))), 
                  $LS($LZ)))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_0_50#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_50#heap#0: Heap, $l#0_0_50#x#0: Box :: 
                      $Box(_module.__default.Sum($l#0_0_50#ly#0, 
                          n'#0, 
                          Lit(AtLayer((lambda $l#0_0_51#ly#0: LayerType :: 
                                Handle1((lambda $l#0_0_51#heap#0: Heap, $l#0_0_51#y#0: Box :: 
                                    $Box($Unbox(Apply2(TInt, 
                                          TInt, 
                                          TInt, 
                                          $l#0_0_51#heap#0, 
                                          g#0, 
                                          $Box($Unbox($l#0_0_50#x#0): int), 
                                          $Box($Unbox($l#0_0_51#y#0): int))): int)), 
                                  (lambda $l#0_0_51#heap#0: Heap, $l#0_0_51#y#0: Box :: 
                                    $IsBox($l#0_0_51#y#0, TInt)), 
                                  (lambda $l#0_0_51#heap#0: Heap, $l#0_0_51#y#0: Box :: 
                                    SetRef_to_SetBox((lambda $l#0_0_51#o#0: ref :: false))))), 
                              $l#0_0_50#ly#0))))), 
                    (lambda $l#0_0_50#heap#0: Heap, $l#0_0_50#x#0: Box :: 
                      $IsBox($l#0_0_50#x#0, TInt)), 
                    (lambda $l#0_0_50#heap#0: Heap, $l#0_0_50#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_50#o#0: ref :: false))))), 
                $LS($LZ))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_0_53#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_53#heap#0: Heap, $l#0_0_53#y#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_0_53#heap#0, 
                            g#0, 
                            $Box(n'#0), 
                            $Box($Unbox($l#0_0_53#y#0): int))): int)), 
                    (lambda $l#0_0_53#heap#0: Heap, $l#0_0_53#y#0: Box :: 
                      $IsBox($l#0_0_53#y#0, TInt)), 
                    (lambda $l#0_0_53#heap#0: Heap, $l#0_0_53#y#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_53#o#0: ref :: false))))), 
                $LS($LZ))))
           && _module.__default.Sum#canCall(n'#0, 
            Lit(AtLayer((lambda $l#0_0_55#ly#0: LayerType :: 
                  Handle1((lambda $l#0_0_55#heap#0: Heap, $l#0_0_55#x#0: Box :: 
                      $Box($Unbox(Apply2(TInt, 
                            TInt, 
                            TInt, 
                            $l#0_0_55#heap#0, 
                            g#0, 
                            $Box($Unbox($l#0_0_55#x#0): int), 
                            $Box(n'#0))): int)), 
                    (lambda $l#0_0_55#heap#0: Heap, $l#0_0_55#x#0: Box :: 
                      $IsBox($l#0_0_55#x#0, TInt)), 
                    (lambda $l#0_0_55#heap#0: Heap, $l#0_0_55#x#0: Box :: 
                      SetRef_to_SetBox((lambda $l#0_0_55#o#0: ref :: false))))), 
                $LS($LZ))));
        // ----- assert line9 == line10 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/hofs/SumSum.dfy(95,3)
        assert {:id "id167"} {:subsumption 0} $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_0_56#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_56#heap#0: Heap, $l#0_0_56#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_0_56#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_0_56#y#0): int))): int)), 
                      (lambda $l#0_0_56#heap#0: Heap, $l#0_0_56#y#0: Box :: 
                        $IsBox($l#0_0_56#y#0, TInt)), 
                      (lambda $l#0_0_56#heap#0: Heap, $l#0_0_56#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_56#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_0_57#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_57#heap#0: Heap, $l#0_0_57#w#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_0_57#heap#0, 
                              g#0, 
                              $Box($Unbox($l#0_0_57#w#0): int), 
                              $Box(n'#0))): int)), 
                      (lambda $l#0_0_57#heap#0: Heap, $l#0_0_57#w#0: Box :: 
                        $IsBox($l#0_0_57#w#0, TInt)), 
                      (lambda $l#0_0_57#heap#0: Heap, $l#0_0_57#w#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_57#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_0_58#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_58#heap#0: Heap, $l#0_0_58#w#0: Box :: 
                        $Box(_module.__default.Sum($l#0_0_58#ly#0, 
                            n'#0, 
                            Lit(AtLayer((lambda $l#0_0_59#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_59#heap#0: Heap, $l#0_0_59#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_0_59#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_0_58#w#0): int), 
                                            $Box($Unbox($l#0_0_59#y#0): int))): int)), 
                                    (lambda $l#0_0_59#heap#0: Heap, $l#0_0_59#y#0: Box :: 
                                      $IsBox($l#0_0_59#y#0, TInt)), 
                                    (lambda $l#0_0_59#heap#0: Heap, $l#0_0_59#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_59#o#0: ref :: false))))), 
                                $l#0_0_58#ly#0))))), 
                      (lambda $l#0_0_58#heap#0: Heap, $l#0_0_58#w#0: Box :: 
                        $IsBox($l#0_0_58#w#0, TInt)), 
                      (lambda $l#0_0_58#heap#0: Heap, $l#0_0_58#w#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_58#o#0: ref :: false))))), 
                  $LS($LZ))))
           == _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_0_60#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_60#heap#0: Heap, $l#0_0_60#x#0: Box :: 
                        $Box(_module.__default.Sum($l#0_0_60#ly#0, 
                            n'#0, 
                            Lit(AtLayer((lambda $l#0_0_61#ly#0: LayerType :: 
                                  Handle1((lambda $l#0_0_61#heap#0: Heap, $l#0_0_61#y#0: Box :: 
                                      $Box($Unbox(Apply2(TInt, 
                                            TInt, 
                                            TInt, 
                                            $l#0_0_61#heap#0, 
                                            g#0, 
                                            $Box($Unbox($l#0_0_60#x#0): int), 
                                            $Box($Unbox($l#0_0_61#y#0): int))): int)), 
                                    (lambda $l#0_0_61#heap#0: Heap, $l#0_0_61#y#0: Box :: 
                                      $IsBox($l#0_0_61#y#0, TInt)), 
                                    (lambda $l#0_0_61#heap#0: Heap, $l#0_0_61#y#0: Box :: 
                                      SetRef_to_SetBox((lambda $l#0_0_61#o#0: ref :: false))))), 
                                $l#0_0_60#ly#0))))), 
                      (lambda $l#0_0_60#heap#0: Heap, $l#0_0_60#x#0: Box :: 
                        $IsBox($l#0_0_60#x#0, TInt)), 
                      (lambda $l#0_0_60#heap#0: Heap, $l#0_0_60#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_60#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_0_62#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_62#heap#0: Heap, $l#0_0_62#y#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_0_62#heap#0, 
                              g#0, 
                              $Box(n'#0), 
                              $Box($Unbox($l#0_0_62#y#0): int))): int)), 
                      (lambda $l#0_0_62#heap#0: Heap, $l#0_0_62#y#0: Box :: 
                        $IsBox($l#0_0_62#y#0, TInt)), 
                      (lambda $l#0_0_62#heap#0: Heap, $l#0_0_62#y#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_62#o#0: ref :: false))))), 
                  $LS($LZ))))
             + _module.__default.Sum($LS($LS($LZ)), 
              n'#0, 
              Lit(AtLayer((lambda $l#0_0_63#ly#0: LayerType :: 
                    Handle1((lambda $l#0_0_63#heap#0: Heap, $l#0_0_63#x#0: Box :: 
                        $Box($Unbox(Apply2(TInt, 
                              TInt, 
                              TInt, 
                              $l#0_0_63#heap#0, 
                              g#0, 
                              $Box($Unbox($l#0_0_63#x#0): int), 
                              $Box(n'#0))): int)), 
                      (lambda $l#0_0_63#heap#0: Heap, $l#0_0_63#x#0: Box :: 
                        $IsBox($l#0_0_63#x#0, TInt)), 
                      (lambda $l#0_0_63#heap#0: Heap, $l#0_0_63#x#0: Box :: 
                        SetRef_to_SetBox((lambda $l#0_0_63#o#0: ref :: false))))), 
                  $LS($LZ))))
             + $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int;
        assume false;
    }

    assume {:id "id282"} _module.__default.Sum($LS($LZ), 
        n#0, 
        Lit(AtLayer((lambda $l#0_18#ly#0: LayerType :: 
              Handle1((lambda $l#0_18#heap#0: Heap, $l#0_18#x#0: Box :: 
                  $Box(_module.__default.Sum($l#0_18#ly#0, 
                      n#0, 
                      Lit(AtLayer((lambda $l#0_19#ly#0: LayerType :: 
                            Handle1((lambda $l#0_19#heap#0: Heap, $l#0_19#y#0: Box :: 
                                $Box($Unbox(Apply2(TInt, 
                                      TInt, 
                                      TInt, 
                                      $l#0_19#heap#0, 
                                      g#0, 
                                      $Box($Unbox($l#0_18#x#0): int), 
                                      $Box($Unbox($l#0_19#y#0): int))): int)), 
                              (lambda $l#0_19#heap#0: Heap, $l#0_19#y#0: Box :: $IsBox($l#0_19#y#0, TInt)), 
                              (lambda $l#0_19#heap#0: Heap, $l#0_19#y#0: Box :: 
                                SetRef_to_SetBox((lambda $l#0_19#o#0: ref :: false))))), 
                          $l#0_18#ly#0))))), 
                (lambda $l#0_18#heap#0: Heap, $l#0_18#x#0: Box :: $IsBox($l#0_18#x#0, TInt)), 
                (lambda $l#0_18#heap#0: Heap, $l#0_18#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#0_18#o#0: ref :: false))))), 
            $LS($LZ))))
       == _module.__default.Sum($LS($LZ), 
          n'#0, 
          Lit(AtLayer((lambda $l#0_20#ly#0: LayerType :: 
                Handle1((lambda $l#0_20#heap#0: Heap, $l#0_20#x#0: Box :: 
                    $Box(_module.__default.Sum($l#0_20#ly#0, 
                        n'#0, 
                        Lit(AtLayer((lambda $l#0_21#ly#0: LayerType :: 
                              Handle1((lambda $l#0_21#heap#0: Heap, $l#0_21#y#0: Box :: 
                                  $Box($Unbox(Apply2(TInt, 
                                        TInt, 
                                        TInt, 
                                        $l#0_21#heap#0, 
                                        g#0, 
                                        $Box($Unbox($l#0_20#x#0): int), 
                                        $Box($Unbox($l#0_21#y#0): int))): int)), 
                                (lambda $l#0_21#heap#0: Heap, $l#0_21#y#0: Box :: $IsBox($l#0_21#y#0, TInt)), 
                                (lambda $l#0_21#heap#0: Heap, $l#0_21#y#0: Box :: 
                                  SetRef_to_SetBox((lambda $l#0_21#o#0: ref :: false))))), 
                            $l#0_20#ly#0))))), 
                  (lambda $l#0_20#heap#0: Heap, $l#0_20#x#0: Box :: $IsBox($l#0_20#x#0, TInt)), 
                  (lambda $l#0_20#heap#0: Heap, $l#0_20#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_20#o#0: ref :: false))))), 
              $LS($LZ))))
         + _module.__default.Sum($LS($LZ), 
          n'#0, 
          Lit(AtLayer((lambda $l#0_22#ly#0: LayerType :: 
                Handle1((lambda $l#0_22#heap#0: Heap, $l#0_22#y#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_22#heap#0, 
                          g#0, 
                          $Box(n'#0), 
                          $Box($Unbox($l#0_22#y#0): int))): int)), 
                  (lambda $l#0_22#heap#0: Heap, $l#0_22#y#0: Box :: $IsBox($l#0_22#y#0, TInt)), 
                  (lambda $l#0_22#heap#0: Heap, $l#0_22#y#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_22#o#0: ref :: false))))), 
              $LS($LZ))))
         + _module.__default.Sum($LS($LZ), 
          n'#0, 
          Lit(AtLayer((lambda $l#0_23#ly#0: LayerType :: 
                Handle1((lambda $l#0_23#heap#0: Heap, $l#0_23#x#0: Box :: 
                    $Box($Unbox(Apply2(TInt, 
                          TInt, 
                          TInt, 
                          $l#0_23#heap#0, 
                          g#0, 
                          $Box($Unbox($l#0_23#x#0): int), 
                          $Box(n'#0))): int)), 
                  (lambda $l#0_23#heap#0: Heap, $l#0_23#x#0: Box :: $IsBox($l#0_23#x#0, TInt)), 
                  (lambda $l#0_23#heap#0: Heap, $l#0_23#x#0: Box :: 
                    SetRef_to_SetBox((lambda $l#0_23#o#0: ref :: false))))), 
              $LS($LZ))))
         + $Unbox(Apply2(TInt, TInt, TInt, $Heap, g#0, $Box(n'#0), $Box(n'#0))): int;
}



procedure {:verboseName "Commute (well-formedness)"} CheckWellFormed$$_module.__default.Commute(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Commute (call)"} Call$$_module.__default.Commute(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#30#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#32#ly#0: LayerType :: 
              Handle1((lambda $l#32#heap#0: Heap, $l#32#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#32#heap#0, 
                        g#0, 
                        $Box($l#30#x#0), 
                        $Box($Unbox($l#32#y#0): int))): int)), 
                (lambda $l#32#heap#0: Heap, $l#32#y#0: Box :: $IsBox($l#32#y#0, TInt)), 
                (lambda $l#32#heap#0: Heap, $l#32#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#32#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#33#ly#0: LayerType :: 
            Handle1((lambda $l#33#heap#0: Heap, $l#33#x#0: Box :: 
                $Box(_module.__default.Sum($l#33#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#34#ly#0: LayerType :: 
                          Handle1((lambda $l#34#heap#0: Heap, $l#34#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#34#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#33#x#0): int), 
                                    $Box($Unbox($l#34#y#0): int))): int)), 
                            (lambda $l#34#heap#0: Heap, $l#34#y#0: Box :: $IsBox($l#34#y#0, TInt)), 
                            (lambda $l#34#heap#0: Heap, $l#34#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#34#o#0: ref :: false))))), 
                        $l#33#ly#0))))), 
              (lambda $l#33#heap#0: Heap, $l#33#x#0: Box :: $IsBox($l#33#x#0, TInt)), 
              (lambda $l#33#heap#0: Heap, $l#33#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#33#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    (forall $l#35#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#37#ly#0: LayerType :: 
              Handle1((lambda $l#37#heap#0: Heap, $l#37#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#37#heap#0, 
                        g#0, 
                        $Box($Unbox($l#37#y#0): int), 
                        $Box($l#35#x#0))): int)), 
                (lambda $l#37#heap#0: Heap, $l#37#y#0: Box :: $IsBox($l#37#y#0, TInt)), 
                (lambda $l#37#heap#0: Heap, $l#37#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#37#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#38#ly#0: LayerType :: 
            Handle1((lambda $l#38#heap#0: Heap, $l#38#x#0: Box :: 
                $Box(_module.__default.Sum($l#38#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#39#ly#0: LayerType :: 
                          Handle1((lambda $l#39#heap#0: Heap, $l#39#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#39#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#39#y#0): int), 
                                    $Box($Unbox($l#38#x#0): int))): int)), 
                            (lambda $l#39#heap#0: Heap, $l#39#y#0: Box :: $IsBox($l#39#y#0, TInt)), 
                            (lambda $l#39#heap#0: Heap, $l#39#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#39#o#0: ref :: false))))), 
                        $l#38#ly#0))))), 
              (lambda $l#38#heap#0: Heap, $l#38#x#0: Box :: $IsBox($l#38#x#0, TInt)), 
              (lambda $l#38#heap#0: Heap, $l#38#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#38#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id288"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#40#ly#0: LayerType :: 
            Handle1((lambda $l#40#heap#0: Heap, $l#40#x#0: Box :: 
                $Box(_module.__default.Sum($l#40#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#41#ly#0: LayerType :: 
                          Handle1((lambda $l#41#heap#0: Heap, $l#41#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#41#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#40#x#0): int), 
                                    $Box($Unbox($l#41#y#0): int))): int)), 
                            (lambda $l#41#heap#0: Heap, $l#41#y#0: Box :: $IsBox($l#41#y#0, TInt)), 
                            (lambda $l#41#heap#0: Heap, $l#41#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#41#o#0: ref :: false))))), 
                        $l#40#ly#0))))), 
              (lambda $l#40#heap#0: Heap, $l#40#x#0: Box :: $IsBox($l#40#x#0, TInt)), 
              (lambda $l#40#heap#0: Heap, $l#40#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#40#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#42#ly#0: LayerType :: 
            Handle1((lambda $l#42#heap#0: Heap, $l#42#x#0: Box :: 
                $Box(_module.__default.Sum($l#42#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#43#ly#0: LayerType :: 
                          Handle1((lambda $l#43#heap#0: Heap, $l#43#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#43#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#43#y#0): int), 
                                    $Box($Unbox($l#42#x#0): int))): int)), 
                            (lambda $l#43#heap#0: Heap, $l#43#y#0: Box :: $IsBox($l#43#y#0, TInt)), 
                            (lambda $l#43#heap#0: Heap, $l#43#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#43#o#0: ref :: false))))), 
                        $l#42#ly#0))))), 
              (lambda $l#42#heap#0: Heap, $l#42#x#0: Box :: $IsBox($l#42#x#0, TInt)), 
              (lambda $l#42#heap#0: Heap, $l#42#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#42#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "CommuteSum (well-formedness)"} CheckWellFormed$$_module.__default.CommuteSum(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "CommuteSum (call)"} Call$$_module.__default.CommuteSum(n#0: int where LitInt(0) <= n#0, 
    g#0: HandleType
       where $Is(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt))
         && $IsAlloc(g#0, Tclass._System.___hTotalFunc2(TInt, TInt, TInt), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall $l#30#x#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#32#ly#0: LayerType :: 
              Handle1((lambda $l#32#heap#0: Heap, $l#32#y#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#32#heap#0, 
                        g#0, 
                        $Box($l#30#x#0), 
                        $Box($Unbox($l#32#y#0): int))): int)), 
                (lambda $l#32#heap#0: Heap, $l#32#y#0: Box :: $IsBox($l#32#y#0, TInt)), 
                (lambda $l#32#heap#0: Heap, $l#32#y#0: Box :: 
                  SetRef_to_SetBox((lambda $l#32#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#33#ly#0: LayerType :: 
            Handle1((lambda $l#33#heap#0: Heap, $l#33#x#0: Box :: 
                $Box(_module.__default.Sum($l#33#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#34#ly#0: LayerType :: 
                          Handle1((lambda $l#34#heap#0: Heap, $l#34#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#34#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#33#x#0): int), 
                                    $Box($Unbox($l#34#y#0): int))): int)), 
                            (lambda $l#34#heap#0: Heap, $l#34#y#0: Box :: $IsBox($l#34#y#0, TInt)), 
                            (lambda $l#34#heap#0: Heap, $l#34#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#34#o#0: ref :: false))))), 
                        $l#33#ly#0))))), 
              (lambda $l#33#heap#0: Heap, $l#33#x#0: Box :: $IsBox($l#33#x#0, TInt)), 
              (lambda $l#33#heap#0: Heap, $l#33#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#33#o#0: ref :: false))))), 
          $LS($LZ))))
     && 
    (forall $l#35#y#0: int :: 
      _module.__default.Sum#canCall(n#0, 
        Lit(AtLayer((lambda $l#37#ly#0: LayerType :: 
              Handle1((lambda $l#37#heap#0: Heap, $l#37#x#0: Box :: 
                  $Box($Unbox(Apply2(TInt, 
                        TInt, 
                        TInt, 
                        $l#37#heap#0, 
                        g#0, 
                        $Box($Unbox($l#37#x#0): int), 
                        $Box($l#35#y#0))): int)), 
                (lambda $l#37#heap#0: Heap, $l#37#x#0: Box :: $IsBox($l#37#x#0, TInt)), 
                (lambda $l#37#heap#0: Heap, $l#37#x#0: Box :: 
                  SetRef_to_SetBox((lambda $l#37#o#0: ref :: false))))), 
            $LS($LZ)))))
     && _module.__default.Sum#canCall(n#0, 
      Lit(AtLayer((lambda $l#38#ly#0: LayerType :: 
            Handle1((lambda $l#38#heap#0: Heap, $l#38#y#0: Box :: 
                $Box(_module.__default.Sum($l#38#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#39#ly#0: LayerType :: 
                          Handle1((lambda $l#39#heap#0: Heap, $l#39#x#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#39#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#39#x#0): int), 
                                    $Box($Unbox($l#38#y#0): int))): int)), 
                            (lambda $l#39#heap#0: Heap, $l#39#x#0: Box :: $IsBox($l#39#x#0, TInt)), 
                            (lambda $l#39#heap#0: Heap, $l#39#x#0: Box :: 
                              SetRef_to_SetBox((lambda $l#39#o#0: ref :: false))))), 
                        $l#38#ly#0))))), 
              (lambda $l#38#heap#0: Heap, $l#38#y#0: Box :: $IsBox($l#38#y#0, TInt)), 
              (lambda $l#38#heap#0: Heap, $l#38#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#38#o#0: ref :: false))))), 
          $LS($LZ))));
  ensures {:id "id294"} _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#40#ly#0: LayerType :: 
            Handle1((lambda $l#40#heap#0: Heap, $l#40#x#0: Box :: 
                $Box(_module.__default.Sum($l#40#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#41#ly#0: LayerType :: 
                          Handle1((lambda $l#41#heap#0: Heap, $l#41#y#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#41#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#40#x#0): int), 
                                    $Box($Unbox($l#41#y#0): int))): int)), 
                            (lambda $l#41#heap#0: Heap, $l#41#y#0: Box :: $IsBox($l#41#y#0, TInt)), 
                            (lambda $l#41#heap#0: Heap, $l#41#y#0: Box :: 
                              SetRef_to_SetBox((lambda $l#41#o#0: ref :: false))))), 
                        $l#40#ly#0))))), 
              (lambda $l#40#heap#0: Heap, $l#40#x#0: Box :: $IsBox($l#40#x#0, TInt)), 
              (lambda $l#40#heap#0: Heap, $l#40#x#0: Box :: 
                SetRef_to_SetBox((lambda $l#40#o#0: ref :: false))))), 
          $LS($LZ))))
     == _module.__default.Sum($LS($LS($LZ)), 
      n#0, 
      Lit(AtLayer((lambda $l#42#ly#0: LayerType :: 
            Handle1((lambda $l#42#heap#0: Heap, $l#42#y#0: Box :: 
                $Box(_module.__default.Sum($l#42#ly#0, 
                    n#0, 
                    Lit(AtLayer((lambda $l#43#ly#0: LayerType :: 
                          Handle1((lambda $l#43#heap#0: Heap, $l#43#x#0: Box :: 
                              $Box($Unbox(Apply2(TInt, 
                                    TInt, 
                                    TInt, 
                                    $l#43#heap#0, 
                                    g#0, 
                                    $Box($Unbox($l#43#x#0): int), 
                                    $Box($Unbox($l#42#y#0): int))): int)), 
                            (lambda $l#43#heap#0: Heap, $l#43#x#0: Box :: $IsBox($l#43#x#0, TInt)), 
                            (lambda $l#43#heap#0: Heap, $l#43#x#0: Box :: 
                              SetRef_to_SetBox((lambda $l#43#o#0: ref :: false))))), 
                        $l#42#ly#0))))), 
              (lambda $l#42#heap#0: Heap, $l#42#y#0: Box :: $IsBox($l#42#y#0, TInt)), 
              (lambda $l#42#heap#0: Heap, $l#42#y#0: Box :: 
                SetRef_to_SetBox((lambda $l#42#o#0: ref :: false))))), 
          $LS($LZ))));
  // frame condition
  free ensures old($Heap) == $Heap;



const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$_#Func2: TyTagFamily;

const unique tytagFamily$_#PartialFunc2: TyTagFamily;

const unique tytagFamily$_#TotalFunc2: TyTagFamily;
