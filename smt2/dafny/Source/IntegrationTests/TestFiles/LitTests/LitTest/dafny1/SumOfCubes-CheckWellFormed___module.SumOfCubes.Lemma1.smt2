(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U Int Int) Int)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (Int Int) Bool)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@24 (Int Int) Int)
(declare-fun $generated@@28 (T@U Int) Int)
(declare-fun $generated@@29 (Int) Bool)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@T T@T) T@T)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@69 (T@U) Bool)
(declare-fun $generated@@70 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@76 (T@U T@U) Bool)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@25 T@U) ($generated@@26 Int) ($generated@@27 Int) ) (!  (=> (or ($generated@@22 $generated@@26 $generated@@27) (and (< 0 $generated@@19) (and (<= ($generated@@23 0) $generated@@26) (<= $generated@@26 $generated@@27)))) (and (=> (or (not (= $generated@@27 $generated@@26)) (not true)) ($generated@@22 (+ $generated@@26 1) $generated@@27)) (= ($generated@@20 ($generated@@21 $generated@@25) $generated@@26 $generated@@27) (ite (= $generated@@27 $generated@@26) 0 (+ ($generated@@24 ($generated@@24 $generated@@26 $generated@@26) $generated@@26) ($generated@@20 $generated@@25 (+ $generated@@26 1) $generated@@27))))))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@25) $generated@@26 $generated@@27))
))))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@30 T@U) ($generated@@31 Int) ) (!  (=> (or ($generated@@29 ($generated@@23 $generated@@31)) (and (< 0 $generated@@19) (<= ($generated@@23 0) ($generated@@23 $generated@@31)))) (and (=> (or (not (= ($generated@@23 $generated@@31) ($generated@@23 0))) (not true)) ($generated@@29 ($generated@@23 (- $generated@@31 1)))) (= ($generated@@28 ($generated@@21 $generated@@30) ($generated@@23 $generated@@31)) (ite (= ($generated@@23 $generated@@31) ($generated@@23 0)) 0 (- (+ ($generated@@28 ($generated@@21 $generated@@30) ($generated@@23 (- $generated@@31 1))) $generated@@31) 1)))))
 :weight 3
 :pattern ( ($generated@@28 ($generated@@21 $generated@@30) ($generated@@23 $generated@@31)))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@33 $generated@@42 $generated@@43 ($generated@@39 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@46) $generated@@44)
 :weight 0
)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@51 $generated@@52) (= ($generated@@33 $generated@@47 $generated@@48 ($generated@@39 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@52) ($generated@@33 $generated@@47 $generated@@48 $generated@@50 $generated@@52)))
 :weight 0
))) (= ($generated@@2 $generated@@34) 3)) (= ($generated@@2 $generated@@35) 4)) (= ($generated@@2 $generated@@36) 5)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (= ($generated@@2 ($generated@@37 $generated@@53 $generated@@54)) 6))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@55 $generated@@56)) $generated@@55)
 :pattern ( ($generated@@37 $generated@@55 $generated@@56))
))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@41 ($generated@@37 $generated@@57 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@37 $generated@@57 $generated@@58))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> ($generated@@32 $generated@@59 $generated@@60) (forall (($generated@@61 T@U) ) (!  (=> ($generated@@7 ($generated@@38 $generated@@3 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@59 $generated@@61) $generated@@1))) ($generated@@7 ($generated@@38 $generated@@3 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@60 $generated@@61) $generated@@1))))
 :pattern ( ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@60 $generated@@61) $generated@@1))
)))
 :pattern ( ($generated@@32 $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@62 Int) ) (! (= ($generated@@23 $generated@@62) $generated@@62)
 :pattern ( ($generated@@23 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 $generated@@64) $generated@@64)
 :pattern ( ($generated@@63 $generated@@65 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 ($generated@@38 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@38 $generated@@68 $generated@@67))
)))
(assert ($generated@@69 $generated@@1))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@T) ) (!  (=> ($generated@@32 $generated@@71 $generated@@72) (=> ($generated@@70 $generated@@75 $generated@@73 $generated@@74 $generated@@71) ($generated@@70 $generated@@75 $generated@@73 $generated@@74 $generated@@72)))
 :pattern ( ($generated@@32 $generated@@71 $generated@@72) ($generated@@70 $generated@@75 $generated@@73 $generated@@74 $generated@@71))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (!  (=> ($generated@@76 $generated@@77 $generated@@78) (and ($generated@@32 $generated@@77 $generated@@78) (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> (not ($generated@@69 $generated@@80)) (= ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@77 $generated@@79) $generated@@80) ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@78 $generated@@79) $generated@@80)))
 :pattern ( ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@78 $generated@@79) $generated@@80))
))))
 :pattern ( ($generated@@76 $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 Int) ($generated@@83 Int) ) (! (= ($generated@@20 ($generated@@21 $generated@@81) $generated@@82 $generated@@83) ($generated@@20 $generated@@81 $generated@@82 $generated@@83))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@81) $generated@@82 $generated@@83))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@84 T@U) ($generated@@85 Int) ) (!  (=> (or ($generated@@29 $generated@@85) (and (< 0 $generated@@19) (<= ($generated@@23 0) $generated@@85))) (and (=> (or (not (= $generated@@85 ($generated@@23 0))) (not true)) ($generated@@29 (- $generated@@85 1))) (= ($generated@@28 ($generated@@21 $generated@@84) $generated@@85) (ite (= $generated@@85 ($generated@@23 0)) 0 (- (+ ($generated@@28 $generated@@84 (- $generated@@85 1)) $generated@@85) 1)))))
 :pattern ( ($generated@@28 ($generated@@21 $generated@@84) $generated@@85))
))))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (or (not (= $generated@@86 $generated@@88)) (not true)) (=> (and ($generated@@32 $generated@@86 $generated@@87) ($generated@@32 $generated@@87 $generated@@88)) ($generated@@32 $generated@@86 $generated@@88)))
 :pattern ( ($generated@@32 $generated@@86 $generated@@87) ($generated@@32 $generated@@87 $generated@@88))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@89 T@U) ($generated@@90 Int) ($generated@@91 Int) ) (!  (=> (or ($generated@@22 ($generated@@23 $generated@@90) ($generated@@23 $generated@@91)) (and (< 0 $generated@@19) (and (<= ($generated@@23 0) ($generated@@23 $generated@@90)) (<= ($generated@@23 $generated@@90) ($generated@@23 $generated@@91))))) (and (=> (or (not (= ($generated@@23 $generated@@91) ($generated@@23 $generated@@90))) (not true)) ($generated@@22 ($generated@@23 (+ $generated@@90 1)) ($generated@@23 $generated@@91))) (= ($generated@@20 ($generated@@21 $generated@@89) ($generated@@23 $generated@@90) ($generated@@23 $generated@@91)) (ite (= ($generated@@23 $generated@@91) ($generated@@23 $generated@@90)) 0 (+ ($generated@@24 ($generated@@23 ($generated@@24 ($generated@@23 $generated@@90) ($generated@@23 $generated@@90))) ($generated@@23 $generated@@90)) ($generated@@20 ($generated@@21 $generated@@89) ($generated@@23 (+ $generated@@90 1)) ($generated@@23 $generated@@91)))))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@89) ($generated@@23 $generated@@90) ($generated@@23 $generated@@91)))
))))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@38 $generated@@93 ($generated@@66 $generated@@93 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@66 $generated@@93 $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 Int) ) (! (= ($generated@@28 ($generated@@21 $generated@@94) $generated@@95) ($generated@@28 $generated@@94 $generated@@95))
 :pattern ( ($generated@@28 ($generated@@21 $generated@@94) $generated@@95))
)))
(assert  (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@96 $generated@@99 $generated@@100 $generated@@101 ($generated@@98 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@104 $generated@@105) $generated@@102)
 :weight 0
)) (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@96 $generated@@106 $generated@@107 $generated@@108 ($generated@@98 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@96 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@96 $generated@@115 $generated@@116 $generated@@117 ($generated@@98 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@96 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@7 ($generated@@96 $generated@@36 $generated@@34 $generated@@3 ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@7 ($generated@@38 $generated@@3 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@96 $generated@@36 $generated@@34 $generated@@3 ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert (forall (($generated@@130 Int) ($generated@@131 Int) ) (! (= ($generated@@24 $generated@@130 $generated@@131) (* $generated@@130 $generated@@131))
 :pattern ( ($generated@@24 $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@132 Int) ) (! (= ($generated@@66 $generated@@4 ($generated@@8 ($generated@@23 $generated@@132))) ($generated@@63 $generated@@35 ($generated@@66 $generated@@4 ($generated@@8 $generated@@132))))
 :pattern ( ($generated@@66 $generated@@4 ($generated@@8 ($generated@@23 $generated@@132))))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@T) ) (! (= ($generated@@66 $generated@@134 ($generated@@63 $generated@@134 $generated@@133)) ($generated@@63 $generated@@35 ($generated@@66 $generated@@134 $generated@@133)))
 :pattern ( ($generated@@66 $generated@@134 ($generated@@63 $generated@@134 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (! ($generated@@70 $generated@@4 $generated@@136 $generated $generated@@135)
 :pattern ( ($generated@@70 $generated@@4 $generated@@136 $generated $generated@@135))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 (T@U) Bool)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 (T@U) Bool)
(declare-fun $generated@@144 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@145  (=> (and (= $generated@@137 ($generated@@97 $generated@@138 $generated@@139 $generated@@1 false)) (<= ($generated@@23 0) $generated@@140)) (=> (and (and (and ($generated@@141 $generated@@142) ($generated@@143 $generated@@142)) (forall (($generated@@146 T@U) ) (!  (=> (and (or (not (= $generated@@146 $generated@@138)) (not true)) ($generated@@7 ($generated@@38 $generated@@3 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@139 $generated@@146) $generated@@1)))) (= ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@142 $generated@@146) ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@139 $generated@@146)))
 :pattern ( ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@142 $generated@@146))
))) (and (and ($generated@@76 $generated@@139 $generated@@142) (= $generated@@144 ($generated@@23 0))) (and ($generated@@70 $generated@@4 ($generated@@8 $generated@@144) $generated $generated@@142) ($generated@@70 $generated@@4 ($generated@@8 $generated@@140) $generated $generated@@142)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= ($generated@@23 0) $generated@@144)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= $generated@@144 $generated@@140)) (=> (and (and (<= ($generated@@23 0) $generated@@144) (<= $generated@@144 $generated@@140)) (and ($generated@@22 ($generated@@23 0) $generated@@140) ($generated@@70 $generated@@4 ($generated@@8 $generated@@140) $generated $generated@@142))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@23 0) $generated@@140)) (=> (and (and (<= ($generated@@23 0) $generated@@140) ($generated@@29 $generated@@140)) (and ($generated@@70 $generated@@4 ($generated@@8 $generated@@140) $generated $generated@@142) (= (ControlFlow 0 2) (- 0 1)))) (<= ($generated@@23 0) $generated@@140))))))))))
(let (($generated@@147  (=> (and (and ($generated@@141 $generated@@139) ($generated@@143 $generated@@139)) (and (= 2 $generated@@19) (= (ControlFlow 0 6) 2))) $generated@@145)))
$generated@@147)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
