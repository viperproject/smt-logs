(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.Node () T@U)
(declare-fun Tagclass._module.Node? () T@U)
(declare-fun class._module.Node? () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun field$children () T@U)
(declare-fun field$marked () T@U)
(declare-fun field$childrenVisited () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Node? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.Node () T@U)
(declare-fun _module.Node.children () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.Node.marked () T@U)
(declare-fun _module.Node.childrenVisited () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool TagSet TagSeq alloc allocName Tagclass._System.nat Tagclass._module.Node Tagclass._module.Node? class._module.Node? tytagFamily$nat tytagFamily$Node field$children field$marked field$childrenVisited)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (DeclName alloc) allocName))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (forall ((a@@2 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b y@@0) (not (|Set#IsMember| (|Set#Difference| a@@2 b) y@@0)))
 :pattern ( (|Set#Difference| a@@2 b) (|Set#IsMember| b y@@0))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((x@@5 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@5))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@5))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Node?)  (or (= $o null) (= (dtype $o) Tclass._module.Node?)))
 :pattern ( ($Is refType $o Tclass._module.Node?))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1)  (and (|Set#IsMember| a@@3 o@@1) (not (|Set#IsMember| b@@0 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Node $h@@0) ($IsAlloc refType |c#0| Tclass._module.Node? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node? $h@@0))
)))
(assert (= (FDim _module.Node.children) 0))
(assert (= (FieldOfDecl class._module.Node? field$children) _module.Node.children))
(assert  (not ($IsGhostField _module.Node.children)))
(assert (= (FDim _module.Node.marked) 0))
(assert (= (FieldOfDecl class._module.Node? field$marked) _module.Node.marked))
(assert  (not ($IsGhostField _module.Node.marked)))
(assert (= (FDim _module.Node.childrenVisited) 0))
(assert (= (FieldOfDecl class._module.Node? field$childrenVisited) _module.Node.childrenVisited))
(assert  (not ($IsGhostField _module.Node.childrenVisited)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@1))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@6 Int) ) (! (= (LitInt x@@6) x@@6)
 :pattern ( (LitInt x@@6))
)))
(assert (forall ((x@@7 T@U) (T T@T) ) (! (= (Lit T x@@7) x@@7)
 :pattern ( (Lit T x@@7))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (! (= (|Set#Subset| a@@4 b@@1) (forall ((o@@3 T@U) ) (!  (=> (|Set#IsMember| a@@4 o@@3) (|Set#IsMember| b@@1 o@@3))
 :pattern ( (|Set#IsMember| a@@4 o@@3))
 :pattern ( (|Set#IsMember| b@@1 o@@3))
)))
 :pattern ( (|Set#Subset| a@@4 b@@1))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0))) (= (|Seq#Index| s0 j) (|Seq#Index| s1 j)))
 :pattern ( (|Seq#Index| s0 j))
 :pattern ( (|Seq#Index| s1 j))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@8 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@8)) x@@8)
 :pattern ( ($Unbox T@@0 x@@8))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert ($IsGhostField alloc))
(assert (forall (($h@@2 T@U) ($o@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) Tclass._module.Node?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@1) alloc)))) ($IsAlloc boolType ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@1) _module.Node.marked)) TBool $h@@2))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@1) _module.Node.marked)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert (forall (($h@@3 T@U) ($o@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass._module.Node?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) _module.Node.childrenVisited)) Tclass._System.nat))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) _module.Node.childrenVisited)))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@1 Tclass._System.nat))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Node) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.Node)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Node))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.Node?) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.Node?)))
 :pattern ( ($IsBox bx@@3 Tclass._module.Node?))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.Node)  (and ($Is refType |c#0@@0| Tclass._module.Node?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node?))
)))
(assert (forall (($h@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) Tclass._module.Node?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) _module.Node.childrenVisited)) Tclass._System.nat $h@@4))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) _module.Node.childrenVisited)))
)))
(assert (forall ((s T@U) (x@@9 T@U) ) (! (= (|Seq#Contains| s x@@9) (exists ((i Int) ) (!  (and (and (<= 0 i) (< i (|Seq#Length| s))) (= (|Seq#Index| s i) x@@9))
 :pattern ( (|Seq#Index| s i))
)))
 :pattern ( (|Seq#Contains| s x@@9))
)))
(assert (= (Ctor SeqType) 8))
(assert (forall (($h@@5 T@U) ($o@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass._module.Node?))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) _module.Node.children)) (TSeq Tclass._module.Node?)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) _module.Node.children)))
)))
(assert (forall (($h@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) Tclass._module.Node?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@5) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@5) _module.Node.children)) (TSeq Tclass._module.Node?) $h@@6))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@5) _module.Node.children)))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (!  (=> (|Set#Equal| a@@5 b@@2) (= a@@5 b@@2))
 :pattern ( (|Set#Equal| a@@5 b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) ) (!  (=> (|Seq#Equal| a@@6 b@@3) (= a@@6 b@@3))
 :pattern ( (|Seq#Equal| a@@6 b@@3))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) (c T@U) ) (!  (=> (or (not (= a@@7 c)) (not true)) (=> (and ($HeapSucc a@@7 b@@4) ($HeapSucc b@@4 c)) ($HeapSucc a@@7 c)))
 :pattern ( ($HeapSucc a@@7 b@@4) ($HeapSucc b@@4 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TBool) (and (= ($Box boolType ($Unbox boolType bx@@4)) bx@@4) ($Is boolType ($Unbox boolType bx@@4) TBool)))
 :pattern ( ($IsBox bx@@4 TBool))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Seq#Length| s@@0))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@5) ($IsAllocBox bx@@5 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@5))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@2) h@@4) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i@@0) t0@@2 h@@4))
 :pattern ( (|Seq#Index| v@@4 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@2) h@@4))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Inv0_TSeq (TSeq t@@5)) t@@5)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Tag (TSeq t@@6)) TagSeq)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((x@@10 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@10)) x@@10)
 :pattern ( ($Box T@@4 x@@10))
)))
(assert (forall (($h@@7 T@U) ($o@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) Tclass._module.Node?))) ($Is boolType ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@6) _module.Node.marked)) TBool))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@6) _module.Node.marked)))
)))
(assert (forall ((bx@@6 T@U) (t@@7 T@U) ) (!  (=> ($IsBox bx@@6 (TSet t@@7)) (and (= ($Box SetType ($Unbox SetType bx@@6)) bx@@6) ($Is SetType ($Unbox SetType bx@@6) (TSet t@@7))))
 :pattern ( ($IsBox bx@@6 (TSet t@@7)))
)))
(assert (forall ((bx@@7 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@7 (TSeq t@@8)) (and (= ($Box SeqType ($Unbox SeqType bx@@7)) bx@@7) ($Is SeqType ($Unbox SeqType bx@@7) (TSeq t@@8))))
 :pattern ( ($IsBox bx@@7 (TSeq t@@8)))
)))
(assert (forall ((h@@5 T@U) (r T@U) (f T@U) (x@@11 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@11))) ($HeapSucc h@@5 (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@11))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@11)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._module.Node) Tagclass._module.Node))
(assert (= (TagFamily Tclass._module.Node) tytagFamily$Node))
(assert (= (Tag Tclass._module.Node?) Tagclass._module.Node?))
(assert (= (TagFamily Tclass._module.Node?) tytagFamily$Node))
(assert (forall ((a@@8 T@U) (b@@5 T@U) ) (! (= (|Set#Equal| a@@8 b@@5) (forall ((o@@4 T@U) ) (! (= (|Set#IsMember| a@@8 o@@4) (|Set#IsMember| b@@5 o@@4))
 :pattern ( (|Set#IsMember| a@@8 o@@4))
 :pattern ( (|Set#IsMember| b@@5 o@@4))
)))
 :pattern ( (|Set#Equal| a@@8 b@@5))
)))
(assert (forall ((x@@12 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@12))) (Lit BoxType ($Box intType (int_2_U x@@12))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@12))))
)))
(assert (forall ((x@@13 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@13)) (Lit BoxType ($Box T@@5 x@@13)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@13)))
)))
(assert (forall ((s@@1 T@U) ) (!  (=> (= (|Seq#Length| s@@1) 0) (= s@@1 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert  (and (forall ((t0@@3 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 t2 (MapType1Store t0@@3 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@7 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))  (=> (and (or (not (= $o@@7 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) (|Set#IsMember| |l#3| ($Box refType $o@@7))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))
)))
(assert (forall ((h@@6 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@6)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@6))
)))
(assert (forall ((v@@6 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@4)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@1) t0@@4))
 :pattern ( (|Seq#Index| v@@6 i@@1))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@4)))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |unmarkedNodes#0@1| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |S#0| () T@U)
(declare-fun |t#0@0| () T@U)
(declare-fun |n#20@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |n#18@0| () T@U)
(declare-fun |stackNodes#0@1| () T@U)
(declare-fun |n#16@0| () T@U)
(declare-fun |n#14@0| () T@U)
(declare-fun |ch#6@0| () T@U)
(declare-fun |j#4@0| () Int)
(declare-fun |n#12@0| () T@U)
(declare-fun |n#10@0| () T@U)
(declare-fun |j#2@0| () Int)
(declare-fun |n#8@0| () T@U)
(declare-fun |i#0@0| () Int)
(declare-fun |j#0@0| () Int)
(declare-fun |root#0| () T@U)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$rhs#0_1_0_0@1| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |t#0@3| () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |stackNodes#0@4| () T@U)
(declare-fun |unmarkedNodes#0@3| () T@U)
(declare-fun |$decr$loop#02@1| () Int)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun $Heap@7 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |t#0| () T@U)
(declare-fun |stackNodes#0| () T@U)
(declare-fun |unmarkedNodes#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |$rhs#0@0| () Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun |stackNodes#0@0| () T@U)
(declare-fun |unmarkedNodes#0@0| () T@U)
(declare-fun |$decr_init$loop#02@0| () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 166) (let ((anon70_correct  (=> (forall ((|n#21| T@U) ) (!  (=> ($Is refType |n#21| Tclass._module.Node) (=> (and (|Set#IsMember| |S#0| ($Box refType |n#21|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#21|) _module.Node.marked))))) (|Set#IsMember| |unmarkedNodes#0@1| ($Box refType |n#21|))))
 :pattern ( (|Set#IsMember| |unmarkedNodes#0@1| ($Box refType |n#21|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#21|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#21|)))
)) (and (=> (= (ControlFlow 0 41) (- 0 42)) (or (not (= |t#0@0| null)) (not true))) (=> (or (not (= |t#0@0| null)) (not true)) (=> (= (ControlFlow 0 41) (- 0 40)) (or (not (= |t#0@0| null)) (not true))))))))
(let ((anon127_Else_correct  (=> (and (not (and (|Set#IsMember| |S#0| ($Box refType |n#20@0|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#20@0|) _module.Node.marked)))))) (= (ControlFlow 0 45) 41)) anon70_correct)))
(let ((anon127_Then_correct  (=> (and (and (|Set#IsMember| |S#0| ($Box refType |n#20@0|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#20@0|) _module.Node.marked))))) (= (ControlFlow 0 44) 41)) anon70_correct)))
(let ((anon126_Else_correct  (=> (not (|Set#IsMember| |S#0| ($Box refType |n#20@0|))) (and (=> (= (ControlFlow 0 48) 44) anon127_Then_correct) (=> (= (ControlFlow 0 48) 45) anon127_Else_correct)))))
(let ((anon126_Then_correct  (=> (|Set#IsMember| |S#0| ($Box refType |n#20@0|)) (and (=> (= (ControlFlow 0 46) (- 0 47)) (or (not (= |n#20@0| null)) (not true))) (and (=> (= (ControlFlow 0 46) 44) anon127_Then_correct) (=> (= (ControlFlow 0 46) 45) anon127_Else_correct))))))
(let ((anon125_Then_correct  (=> (and ($Is refType |n#20@0| Tclass._module.Node) ($IsAlloc refType |n#20@0| Tclass._module.Node $Heap@1)) (and (=> (= (ControlFlow 0 49) 46) anon126_Then_correct) (=> (= (ControlFlow 0 49) 48) anon126_Else_correct)))))
(let ((anon125_Else_correct  (=> (and (not (and ($Is refType |n#20@0| Tclass._module.Node) ($IsAlloc refType |n#20@0| Tclass._module.Node $Heap@1))) (= (ControlFlow 0 43) 41)) anon70_correct)))
(let ((anon65_correct  (=> (forall ((|n#19| T@U) ) (!  (=> ($Is refType |n#19| Tclass._module.Node) (=> (|Set#IsMember| |S#0| ($Box refType |n#19|)) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#19|) _module.Node.children)) ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19|) _module.Node.children)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19|) _module.Node.children)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#19|) _module.Node.children)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#19|)))
)) (and (=> (= (ControlFlow 0 50) 49) anon125_Then_correct) (=> (= (ControlFlow 0 50) 43) anon125_Else_correct)))))
(let ((anon124_Else_correct  (=> (and (not (|Set#IsMember| |S#0| ($Box refType |n#18@0|))) (= (ControlFlow 0 56) 50)) anon65_correct)))
(let ((anon124_Then_correct  (=> (|Set#IsMember| |S#0| ($Box refType |n#18@0|)) (and (=> (= (ControlFlow 0 52) (- 0 55)) (or (not (= |n#18@0| null)) (not true))) (and (=> (= (ControlFlow 0 52) (- 0 54)) (or (not (= |n#18@0| null)) (not true))) (and (=> (= (ControlFlow 0 52) (- 0 53)) ($IsAlloc refType |n#18@0| Tclass._module.Node $Heap)) (=> ($IsAlloc refType |n#18@0| Tclass._module.Node $Heap) (=> (= (ControlFlow 0 52) 50) anon65_correct))))))))
(let ((anon123_Then_correct  (=> (and ($Is refType |n#18@0| Tclass._module.Node) ($IsAlloc refType |n#18@0| Tclass._module.Node $Heap@1)) (and (=> (= (ControlFlow 0 57) 52) anon124_Then_correct) (=> (= (ControlFlow 0 57) 56) anon124_Else_correct)))))
(let ((anon123_Else_correct  (=> (and (not (and ($Is refType |n#18@0| Tclass._module.Node) ($IsAlloc refType |n#18@0| Tclass._module.Node $Heap@1))) (= (ControlFlow 0 51) 50)) anon65_correct)))
(let ((anon62_correct  (=> (forall ((|n#17| T@U) ) (!  (=> ($Is refType |n#17| Tclass._module.Node) (=> (and (and (|Set#IsMember| |S#0| ($Box refType |n#17|)) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#17|)))) (or (not (= |n#17| |t#0@0|)) (not true))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#17|) _module.Node.childrenVisited))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17|) _module.Node.childrenVisited)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#17|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#17|)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#17|)))
)) (and (=> (= (ControlFlow 0 58) 57) anon123_Then_correct) (=> (= (ControlFlow 0 58) 51) anon123_Else_correct)))))
(let ((anon122_Else_correct  (=> (and (not (and (and (|Set#IsMember| |S#0| ($Box refType |n#16@0|)) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#16@0|)))) (or (not (= |n#16@0| |t#0@0|)) (not true)))) (= (ControlFlow 0 64) 58)) anon62_correct)))
(let ((anon122_Then_correct  (=> (and (and (|Set#IsMember| |S#0| ($Box refType |n#16@0|)) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#16@0|)))) (or (not (= |n#16@0| |t#0@0|)) (not true))) (and (=> (= (ControlFlow 0 60) (- 0 63)) (or (not (= |n#16@0| null)) (not true))) (and (=> (= (ControlFlow 0 60) (- 0 62)) (or (not (= |n#16@0| null)) (not true))) (and (=> (= (ControlFlow 0 60) (- 0 61)) ($IsAlloc refType |n#16@0| Tclass._module.Node $Heap)) (=> ($IsAlloc refType |n#16@0| Tclass._module.Node $Heap) (=> (= (ControlFlow 0 60) 58) anon62_correct))))))))
(let ((anon121_Else_correct  (=> (not (and (|Set#IsMember| |S#0| ($Box refType |n#16@0|)) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#16@0|))))) (and (=> (= (ControlFlow 0 66) 60) anon122_Then_correct) (=> (= (ControlFlow 0 66) 64) anon122_Else_correct)))))
(let ((anon121_Then_correct  (=> (and (|Set#IsMember| |S#0| ($Box refType |n#16@0|)) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#16@0|)))) (and (=> (= (ControlFlow 0 65) 60) anon122_Then_correct) (=> (= (ControlFlow 0 65) 64) anon122_Else_correct)))))
(let ((anon120_Else_correct  (=> (not (|Set#IsMember| |S#0| ($Box refType |n#16@0|))) (and (=> (= (ControlFlow 0 68) 65) anon121_Then_correct) (=> (= (ControlFlow 0 68) 66) anon121_Else_correct)))))
(let ((anon120_Then_correct  (=> (|Set#IsMember| |S#0| ($Box refType |n#16@0|)) (and (=> (= (ControlFlow 0 67) 65) anon121_Then_correct) (=> (= (ControlFlow 0 67) 66) anon121_Else_correct)))))
(let ((anon119_Then_correct  (=> (and ($Is refType |n#16@0| Tclass._module.Node) ($IsAlloc refType |n#16@0| Tclass._module.Node $Heap@1)) (and (=> (= (ControlFlow 0 69) 67) anon120_Then_correct) (=> (= (ControlFlow 0 69) 68) anon120_Else_correct)))))
(let ((anon119_Else_correct  (=> (and (not (and ($Is refType |n#16@0| Tclass._module.Node) ($IsAlloc refType |n#16@0| Tclass._module.Node $Heap@1))) (= (ControlFlow 0 59) 58)) anon62_correct)))
(let ((anon55_correct  (=> (forall ((|n#15| T@U) ) (!  (=> ($Is refType |n#15| Tclass._module.Node) (=> (and (and (and (|Set#IsMember| |S#0| ($Box refType |n#15|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#15|)))) (or (not (= |n#15| |t#0@0|)) (not true))) (forall ((|ch#7| T@U) ) (!  (=> ($Is refType |ch#7| Tclass._module.Node?) (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15|) _module.Node.children)) ($Box refType |ch#7|)) (or (not (= |ch#7| null)) (not true))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |ch#7|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |ch#7|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15|) _module.Node.children)) ($Box refType |ch#7|)))
))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15|) _module.Node.children)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#15|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#15|)))
)) (and (=> (= (ControlFlow 0 70) 69) anon119_Then_correct) (=> (= (ControlFlow 0 70) 59) anon119_Else_correct)))))
(let ((anon118_Else_correct  (=> (and (not (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.children)) ($Box refType |ch#6@0|)) (or (not (= |ch#6@0| null)) (not true)))) (= (ControlFlow 0 76) 70)) anon55_correct)))
(let ((anon118_Then_correct  (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.children)) ($Box refType |ch#6@0|)) (or (not (= |ch#6@0| null)) (not true))) (and (=> (= (ControlFlow 0 74) (- 0 75)) (or (not (= |ch#6@0| null)) (not true))) (=> (= (ControlFlow 0 74) 70) anon55_correct)))))
(let ((anon117_Else_correct  (=> (not (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.children)) ($Box refType |ch#6@0|))) (and (=> (= (ControlFlow 0 78) 74) anon118_Then_correct) (=> (= (ControlFlow 0 78) 76) anon118_Else_correct)))))
(let ((anon117_Then_correct  (=> (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.children)) ($Box refType |ch#6@0|)) (and (=> (= (ControlFlow 0 77) 74) anon118_Then_correct) (=> (= (ControlFlow 0 77) 76) anon118_Else_correct)))))
(let ((anon116_Then_correct  (=> (and ($Is refType |ch#6@0| Tclass._module.Node?) ($IsAlloc refType |ch#6@0| Tclass._module.Node? $Heap@1)) (and (=> (= (ControlFlow 0 79) (- 0 80)) (or (not (= |n#14@0| null)) (not true))) (and (=> (= (ControlFlow 0 79) 77) anon117_Then_correct) (=> (= (ControlFlow 0 79) 78) anon117_Else_correct))))))
(let ((anon116_Else_correct  (=> (and (not (and ($Is refType |ch#6@0| Tclass._module.Node?) ($IsAlloc refType |ch#6@0| Tclass._module.Node? $Heap@1))) (= (ControlFlow 0 73) 70)) anon55_correct)))
(let ((anon115_Then_correct  (=> (and (and (and (|Set#IsMember| |S#0| ($Box refType |n#14@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#14@0|)))) (or (not (= |n#14@0| |t#0@0|)) (not true))) (and (=> (= (ControlFlow 0 81) 79) anon116_Then_correct) (=> (= (ControlFlow 0 81) 73) anon116_Else_correct)))))
(let ((anon115_Else_correct  (=> (and (not (and (and (and (|Set#IsMember| |S#0| ($Box refType |n#14@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#14@0|)))) (or (not (= |n#14@0| |t#0@0|)) (not true)))) (= (ControlFlow 0 72) 70)) anon55_correct)))
(let ((anon114_Else_correct  (=> (not (and (and (|Set#IsMember| |S#0| ($Box refType |n#14@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#14@0|))))) (and (=> (= (ControlFlow 0 83) 81) anon115_Then_correct) (=> (= (ControlFlow 0 83) 72) anon115_Else_correct)))))
(let ((anon114_Then_correct  (=> (and (and (|Set#IsMember| |S#0| ($Box refType |n#14@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#14@0|)))) (and (=> (= (ControlFlow 0 82) 81) anon115_Then_correct) (=> (= (ControlFlow 0 82) 72) anon115_Else_correct)))))
(let ((anon113_Else_correct  (=> (not (and (|Set#IsMember| |S#0| ($Box refType |n#14@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.marked))))) (and (=> (= (ControlFlow 0 85) 82) anon114_Then_correct) (=> (= (ControlFlow 0 85) 83) anon114_Else_correct)))))
(let ((anon113_Then_correct  (=> (and (|Set#IsMember| |S#0| ($Box refType |n#14@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#14@0|) _module.Node.marked)))) (and (=> (= (ControlFlow 0 84) 82) anon114_Then_correct) (=> (= (ControlFlow 0 84) 83) anon114_Else_correct)))))
(let ((anon112_Else_correct  (=> (not (|Set#IsMember| |S#0| ($Box refType |n#14@0|))) (and (=> (= (ControlFlow 0 88) 84) anon113_Then_correct) (=> (= (ControlFlow 0 88) 85) anon113_Else_correct)))))
(let ((anon112_Then_correct  (=> (|Set#IsMember| |S#0| ($Box refType |n#14@0|)) (and (=> (= (ControlFlow 0 86) (- 0 87)) (or (not (= |n#14@0| null)) (not true))) (and (=> (= (ControlFlow 0 86) 84) anon113_Then_correct) (=> (= (ControlFlow 0 86) 85) anon113_Else_correct))))))
(let ((anon111_Then_correct  (=> (and ($Is refType |n#14@0| Tclass._module.Node) ($IsAlloc refType |n#14@0| Tclass._module.Node $Heap@1)) (and (=> (= (ControlFlow 0 89) 86) anon112_Then_correct) (=> (= (ControlFlow 0 89) 88) anon112_Else_correct)))))
(let ((anon111_Else_correct  (=> (and (not (and ($Is refType |n#14@0| Tclass._module.Node) ($IsAlloc refType |n#14@0| Tclass._module.Node $Heap@1))) (= (ControlFlow 0 71) 70)) anon55_correct)))
(let ((anon41_correct  (=> (=> (< 0 (|Seq#Length| |stackNodes#0@1|)) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| (- (|Seq#Length| |stackNodes#0@1|) 1)))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| (- (|Seq#Length| |stackNodes#0@1|) 1)))) _module.Node.childrenVisited))))) |t#0@0|)) (and (=> (= (ControlFlow 0 90) 89) anon111_Then_correct) (=> (= (ControlFlow 0 90) 71) anon111_Else_correct)))))
(let ((anon110_Else_correct  (=> (and (<= (|Seq#Length| |stackNodes#0@1|) 0) (= (ControlFlow 0 97) 90)) anon41_correct)))
(let ((anon110_Then_correct  (=> (< 0 (|Seq#Length| |stackNodes#0@1|)) (and (=> (= (ControlFlow 0 91) (- 0 96)) (and (<= 0 (- (|Seq#Length| |stackNodes#0@1|) 1)) (< (- (|Seq#Length| |stackNodes#0@1|) 1) (|Seq#Length| |stackNodes#0@1|)))) (and (=> (= (ControlFlow 0 91) (- 0 95)) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@1| (- (|Seq#Length| |stackNodes#0@1|) 1))) null)) (not true))) (and (=> (= (ControlFlow 0 91) (- 0 94)) (and (<= 0 (- (|Seq#Length| |stackNodes#0@1|) 1)) (< (- (|Seq#Length| |stackNodes#0@1|) 1) (|Seq#Length| |stackNodes#0@1|)))) (and (=> (= (ControlFlow 0 91) (- 0 93)) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@1| (- (|Seq#Length| |stackNodes#0@1|) 1))) null)) (not true))) (and (=> (= (ControlFlow 0 91) (- 0 92)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| (- (|Seq#Length| |stackNodes#0@1|) 1)))) _module.Node.childrenVisited)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| (- (|Seq#Length| |stackNodes#0@1|) 1)))) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| (- (|Seq#Length| |stackNodes#0@1|) 1)))) _module.Node.children)))))) (=> (= (ControlFlow 0 91) 90) anon41_correct)))))))))
(let ((anon39_correct  (=> (forall ((|j#5| Int) (|_t#0#0| Int) ) (!  (=> (= |_t#0#0| (+ |j#5| 1)) (=> (and (<= (LitInt 0) |j#5|) (< |_t#0#0| (|Seq#Length| |stackNodes#0@1|))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#5|))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#5|))) _module.Node.childrenVisited))))) ($Unbox refType (|Seq#Index| |stackNodes#0@1| |_t#0#0|)))))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@1| |_t#0#0|)) ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#5|)))
)) (and (=> (= (ControlFlow 0 98) 91) anon110_Then_correct) (=> (= (ControlFlow 0 98) 97) anon110_Else_correct)))))
(let ((anon109_Else_correct  (=> (and (not (and (<= (LitInt 0) |j#4@0|) (< (+ |j#4@0| 1) (|Seq#Length| |stackNodes#0@1|)))) (= (ControlFlow 0 106) 98)) anon39_correct)))
(let ((anon109_Then_correct  (=> (and (<= (LitInt 0) |j#4@0|) (< (+ |j#4@0| 1) (|Seq#Length| |stackNodes#0@1|))) (and (=> (= (ControlFlow 0 99) (- 0 105)) (and (<= 0 |j#4@0|) (< |j#4@0| (|Seq#Length| |stackNodes#0@1|)))) (and (=> (= (ControlFlow 0 99) (- 0 104)) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#4@0|)) null)) (not true))) (and (=> (= (ControlFlow 0 99) (- 0 103)) (and (<= 0 |j#4@0|) (< |j#4@0| (|Seq#Length| |stackNodes#0@1|)))) (and (=> (= (ControlFlow 0 99) (- 0 102)) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#4@0|)) null)) (not true))) (and (=> (= (ControlFlow 0 99) (- 0 101)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#4@0|))) _module.Node.childrenVisited)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#4@0|))) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#4@0|))) _module.Node.children)))))) (and (=> (= (ControlFlow 0 99) (- 0 100)) (and (<= 0 (+ |j#4@0| 1)) (< (+ |j#4@0| 1) (|Seq#Length| |stackNodes#0@1|)))) (=> (= (ControlFlow 0 99) 98) anon39_correct))))))))))
(let ((anon108_Else_correct  (=> (< |j#4@0| (LitInt 0)) (and (=> (= (ControlFlow 0 108) 99) anon109_Then_correct) (=> (= (ControlFlow 0 108) 106) anon109_Else_correct)))))
(let ((anon108_Then_correct  (=> (<= (LitInt 0) |j#4@0|) (and (=> (= (ControlFlow 0 107) 99) anon109_Then_correct) (=> (= (ControlFlow 0 107) 106) anon109_Else_correct)))))
(let ((anon34_correct  (=> (forall ((|n#13| T@U) ) (!  (=> ($Is refType |n#13| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#13|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13|) _module.Node.children))))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#13|)))
)) (and (=> (= (ControlFlow 0 109) 107) anon108_Then_correct) (=> (= (ControlFlow 0 109) 108) anon108_Else_correct)))))
(let ((anon106_Else_correct  (=> (and (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#12@0|))) (= (ControlFlow 0 114) 109)) anon34_correct)))
(let ((anon106_Then_correct  (=> (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#12@0|)) (and (=> (= (ControlFlow 0 111) (- 0 113)) (or (not (= |n#12@0| null)) (not true))) (and (=> (= (ControlFlow 0 111) (- 0 112)) (or (not (= |n#12@0| null)) (not true))) (=> (= (ControlFlow 0 111) 109) anon34_correct))))))
(let ((anon105_Then_correct  (=> (and ($Is refType |n#12@0| Tclass._module.Node) ($IsAlloc refType |n#12@0| Tclass._module.Node $Heap@1)) (and (=> (= (ControlFlow 0 115) 111) anon106_Then_correct) (=> (= (ControlFlow 0 115) 114) anon106_Else_correct)))))
(let ((anon105_Else_correct  (=> (and (not (and ($Is refType |n#12@0| Tclass._module.Node) ($IsAlloc refType |n#12@0| Tclass._module.Node $Heap@1))) (= (ControlFlow 0 110) 109)) anon34_correct)))
(let ((anon31_correct  (=> (and (and (forall ((|n#11| T@U) ) (!  (=> (and ($Is refType |n#11| Tclass._module.Node) ($IsAlloc refType |n#11| Tclass._module.Node $Heap@1)) (=> (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11|)) (= |n#11| |t#0@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11|)))
)) (forall ((|n#11@@0| T@U) ) (!  (=> (and ($Is refType |n#11@@0| Tclass._module.Node) ($IsAlloc refType |n#11@@0| Tclass._module.Node $Heap@1)) (=> (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@0|)) (= |n#11@@0| |t#0@0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@0|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@0|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@0|)))
))) (forall ((|n#11@@1| T@U) ) (!  (=> (and ($Is refType |n#11@@1| Tclass._module.Node) ($IsAlloc refType |n#11@@1| Tclass._module.Node $Heap@1)) (and (=> (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@1|)) (= |n#11@@1| |t#0@0|)) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@1|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@1|) _module.Node.children))))) (=> (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@1|)) (= |n#11@@1| |t#0@0|)) (forall ((|j#3| Int) ) (!  (=> (and (<= (LitInt 0) |j#3|) (< |j#3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@1|) _module.Node.childrenVisited))))) (or (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@1|) _module.Node.children)) |j#3|)) null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@1|) _module.Node.children)) |j#3|))) _module.Node.marked)))))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@1|) _module.Node.children)) |j#3|)))
)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@1|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@1|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@1|)))
))) (and (=> (= (ControlFlow 0 116) 115) anon105_Then_correct) (=> (= (ControlFlow 0 116) 110) anon105_Else_correct)))))
(let ((anon104_Else_correct  (=> (and (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.children)) |j#2@0|)) null) (= (ControlFlow 0 125) 116)) anon31_correct)))
(let ((anon104_Then_correct  (=> (or (not (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.children)) |j#2@0|)) null)) (not true)) (and (=> (= (ControlFlow 0 121) (- 0 124)) (or (not (= |n#10@0| null)) (not true))) (and (=> (= (ControlFlow 0 121) (- 0 123)) (and (<= 0 |j#2@0|) (< |j#2@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.children)))))) (and (=> (= (ControlFlow 0 121) (- 0 122)) (or (not (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.children)) |j#2@0|)) null)) (not true))) (=> (= (ControlFlow 0 121) 116) anon31_correct)))))))
(let ((anon103_Then_correct  (=> (and (<= (LitInt 0) |j#2@0|) (< |j#2@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.childrenVisited))))) (and (=> (= (ControlFlow 0 126) (- 0 128)) (or (not (= |n#10@0| null)) (not true))) (and (=> (= (ControlFlow 0 126) (- 0 127)) (and (<= 0 |j#2@0|) (< |j#2@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.children)))))) (and (=> (= (ControlFlow 0 126) 121) anon104_Then_correct) (=> (= (ControlFlow 0 126) 125) anon104_Else_correct)))))))
(let ((anon103_Else_correct  (=> (and (not (and (<= (LitInt 0) |j#2@0|) (< |j#2@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.childrenVisited)))))) (= (ControlFlow 0 120) 116)) anon31_correct)))
(let ((anon102_Else_correct  (=> (< |j#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 131) 126) anon103_Then_correct) (=> (= (ControlFlow 0 131) 120) anon103_Else_correct)))))
(let ((anon102_Then_correct  (=> (<= (LitInt 0) |j#2@0|) (and (=> (= (ControlFlow 0 129) (- 0 130)) (or (not (= |n#10@0| null)) (not true))) (and (=> (= (ControlFlow 0 129) 126) anon103_Then_correct) (=> (= (ControlFlow 0 129) 120) anon103_Else_correct))))))
(let ((anon100_Then_correct  (=> (and (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.marked))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.childrenVisited)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.children)))))) (and (=> (= (ControlFlow 0 132) 129) anon102_Then_correct) (=> (= (ControlFlow 0 132) 131) anon102_Else_correct)))))
(let ((anon100_Else_correct  (=> (and (not (and (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.marked))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.childrenVisited)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.children))))))) (= (ControlFlow 0 119) 116)) anon31_correct)))
(let ((anon99_Else_correct  (=> (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.childrenVisited))) (LitInt 0)) (and (=> (= (ControlFlow 0 137) 132) anon100_Then_correct) (=> (= (ControlFlow 0 137) 119) anon100_Else_correct)))))
(let ((anon99_Then_correct  (=> (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.childrenVisited)))) (and (=> (= (ControlFlow 0 134) (- 0 136)) (or (not (= |n#10@0| null)) (not true))) (and (=> (= (ControlFlow 0 134) (- 0 135)) (or (not (= |n#10@0| null)) (not true))) (and (=> (= (ControlFlow 0 134) 132) anon100_Then_correct) (=> (= (ControlFlow 0 134) 119) anon100_Else_correct)))))))
(let ((anon98_Then_correct  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.marked))) (and (=> (= (ControlFlow 0 138) (- 0 139)) (or (not (= |n#10@0| null)) (not true))) (and (=> (= (ControlFlow 0 138) 134) anon99_Then_correct) (=> (= (ControlFlow 0 138) 137) anon99_Else_correct))))))
(let ((anon98_Else_correct  (=> (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10@0|) _module.Node.marked)))) (and (=> (= (ControlFlow 0 133) 132) anon100_Then_correct) (=> (= (ControlFlow 0 133) 119) anon100_Else_correct)))))
(let ((anon97_Then_correct  (=> (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#10@0|)) (= |n#10@0| |t#0@0|)) (and (=> (= (ControlFlow 0 140) (- 0 141)) (or (not (= |n#10@0| null)) (not true))) (and (=> (= (ControlFlow 0 140) 138) anon98_Then_correct) (=> (= (ControlFlow 0 140) 133) anon98_Else_correct))))))
(let ((anon97_Else_correct  (=> (and (not (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#10@0|)) (= |n#10@0| |t#0@0|))) (= (ControlFlow 0 118) 116)) anon31_correct)))
(let ((anon96_Else_correct  (=> (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#10@0|)) (and (=> (= (ControlFlow 0 143) 140) anon97_Then_correct) (=> (= (ControlFlow 0 143) 118) anon97_Else_correct)))))
(let ((anon96_Then_correct  (=> (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#10@0|))) (and (=> (= (ControlFlow 0 142) 140) anon97_Then_correct) (=> (= (ControlFlow 0 142) 118) anon97_Else_correct)))))
(let ((anon95_Then_correct  (=> (and ($Is refType |n#10@0| Tclass._module.Node) ($IsAlloc refType |n#10@0| Tclass._module.Node $Heap@1)) (and (=> (= (ControlFlow 0 144) 142) anon96_Then_correct) (=> (= (ControlFlow 0 144) 143) anon96_Else_correct)))))
(let ((anon95_Else_correct  (=> (and (not (and ($Is refType |n#10@0| Tclass._module.Node) ($IsAlloc refType |n#10@0| Tclass._module.Node $Heap@1))) (= (ControlFlow 0 117) 116)) anon31_correct)))
(let ((anon16_correct  (=> (forall ((|n#9| T@U) ) (!  (=> ($Is refType |n#9| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#9|)) (|Set#IsMember| |S#0| ($Box refType |n#9|))))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#9|)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#9|)))
)) (and (=> (= (ControlFlow 0 145) 144) anon95_Then_correct) (=> (= (ControlFlow 0 145) 117) anon95_Else_correct)))))
(let ((anon94_Else_correct  (=> (and (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#8@0|))) (= (ControlFlow 0 148) 145)) anon16_correct)))
(let ((anon94_Then_correct  (=> (and (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#8@0|)) (= (ControlFlow 0 147) 145)) anon16_correct)))
(let ((anon93_Then_correct  (=> (and ($Is refType |n#8@0| Tclass._module.Node) ($IsAlloc refType |n#8@0| Tclass._module.Node $Heap@1)) (and (=> (= (ControlFlow 0 149) 147) anon94_Then_correct) (=> (= (ControlFlow 0 149) 148) anon94_Else_correct)))))
(let ((anon93_Else_correct  (=> (and (not (and ($Is refType |n#8@0| Tclass._module.Node) ($IsAlloc refType |n#8@0| Tclass._module.Node $Heap@1))) (= (ControlFlow 0 146) 145)) anon16_correct)))
(let ((anon13_correct  (=> (forall ((|i#1| Int) (|j#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1|) (< |i#1| |j#1|)) (< |j#1| (|Seq#Length| |stackNodes#0@1|))) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@1| |i#1|)) ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#1|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#1|)) ($Unbox refType (|Seq#Index| |stackNodes#0@1| |i#1|)))
)) (and (=> (= (ControlFlow 0 150) 149) anon93_Then_correct) (=> (= (ControlFlow 0 150) 146) anon93_Else_correct)))))
(let ((anon92_Else_correct  (=> (and (not (and (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |j#0@0|)) (< |j#0@0| (|Seq#Length| |stackNodes#0@1|)))) (= (ControlFlow 0 154) 150)) anon13_correct)))
(let ((anon92_Then_correct  (=> (and (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |j#0@0|)) (< |j#0@0| (|Seq#Length| |stackNodes#0@1|))) (and (=> (= (ControlFlow 0 151) (- 0 153)) (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |stackNodes#0@1|)))) (and (=> (= (ControlFlow 0 151) (- 0 152)) (and (<= 0 |j#0@0|) (< |j#0@0| (|Seq#Length| |stackNodes#0@1|)))) (=> (= (ControlFlow 0 151) 150) anon13_correct))))))
(let ((anon91_Else_correct  (=> (not (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |j#0@0|))) (and (=> (= (ControlFlow 0 156) 151) anon92_Then_correct) (=> (= (ControlFlow 0 156) 154) anon92_Else_correct)))))
(let ((anon91_Then_correct  (=> (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |j#0@0|)) (and (=> (= (ControlFlow 0 155) 151) anon92_Then_correct) (=> (= (ControlFlow 0 155) 154) anon92_Else_correct)))))
(let ((anon90_Else_correct  (=> (< |i#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 158) 155) anon91_Then_correct) (=> (= (ControlFlow 0 158) 156) anon91_Else_correct)))))
(let ((anon90_Then_correct  (=> (<= (LitInt 0) |i#0@0|) (and (=> (= (ControlFlow 0 157) 155) anon91_Then_correct) (=> (= (ControlFlow 0 157) 156) anon91_Else_correct)))))
(let ((anon6_correct  (=> (and (and (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |root#0|) _module.Node.marked))) (|Set#IsMember| |S#0| ($Box refType |t#0@0|))) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |t#0@0|)))) (and (=> (= (ControlFlow 0 159) 157) anon90_Then_correct) (=> (= (ControlFlow 0 159) 158) anon90_Else_correct)))))
(let ((anon88_Else_correct  (=> (and (not (and (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |root#0|) _module.Node.marked))) (|Set#IsMember| |S#0| ($Box refType |t#0@0|)))) (= (ControlFlow 0 161) 159)) anon6_correct)))
(let ((anon88_Then_correct  (=> (and (and (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |root#0|) _module.Node.marked))) (|Set#IsMember| |S#0| ($Box refType |t#0@0|))) (= (ControlFlow 0 160) 159)) anon6_correct)))
(let ((anon87_Else_correct  (=> (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |root#0|) _module.Node.marked)))) (and (=> (= (ControlFlow 0 163) 160) anon88_Then_correct) (=> (= (ControlFlow 0 163) 161) anon88_Else_correct)))))
(let ((anon87_Then_correct  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |root#0|) _module.Node.marked))) (and (=> (= (ControlFlow 0 162) 160) anon88_Then_correct) (=> (= (ControlFlow 0 162) 161) anon88_Else_correct)))))
(let ((anon86_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 164) (- 0 165)) (or (not (= |root#0| null)) (not true))) (and (=> (= (ControlFlow 0 164) 162) anon87_Then_correct) (=> (= (ControlFlow 0 164) 163) anon87_Else_correct))))))
(let ((anon81_correct  (=> (or (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))))) null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited)))))) _module.Node.marked)))) (and (=> (= (ControlFlow 0 6) (- 0 26)) (or (not (= |t#0@0| null)) (not true))) (=> (or (not (= |t#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 6) (- 0 25)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |t#0@0| _module.Node.childrenVisited))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |t#0@0| _module.Node.childrenVisited)) (and (=> (= (ControlFlow 0 6) (- 0 24)) (or (not (= |t#0@0| null)) (not true))) (=> (or (not (= |t#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 6) (- 0 23)) ($Is intType (int_2_U (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))) 1)) Tclass._System.nat) (=> (= |$rhs#0_1_0_0@1| (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))) 1)) (=> (and (= $Heap@3 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited ($Box intType (int_2_U |$rhs#0_1_0_0@1|))))) ($IsGoodHeap $Heap@3)) (=> (and (and (= |t#0@3| |t#0@0|) (= $Heap@6 $Heap@3)) (and (= |stackNodes#0@4| |stackNodes#0@1|) (= |unmarkedNodes#0@3| |unmarkedNodes#0@1|))) (and (=> (= (ControlFlow 0 6) (- 0 22)) (or (or (or (<= 0 |$decr$loop#02@1|) (and (|Set#Subset| |unmarkedNodes#0@3| |unmarkedNodes#0@1|) (not (|Set#Subset| |unmarkedNodes#0@1| |unmarkedNodes#0@3|)))) (< (|Seq#Rank| |stackNodes#0@4|) (|Seq#Rank| |stackNodes#0@1|))) (= (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |t#0@3|) _module.Node.children))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |t#0@3|) _module.Node.childrenVisited)))) |$decr$loop#02@1|))) (=> (or (or (or (<= 0 |$decr$loop#02@1|) (and (|Set#Subset| |unmarkedNodes#0@3| |unmarkedNodes#0@1|) (not (|Set#Subset| |unmarkedNodes#0@1| |unmarkedNodes#0@3|)))) (< (|Seq#Rank| |stackNodes#0@4|) (|Seq#Rank| |stackNodes#0@1|))) (= (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |t#0@3|) _module.Node.children))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |t#0@3|) _module.Node.childrenVisited)))) |$decr$loop#02@1|)) (and (=> (= (ControlFlow 0 6) (- 0 21)) (or (and (|Set#Subset| |unmarkedNodes#0@3| |unmarkedNodes#0@1|) (not (|Set#Subset| |unmarkedNodes#0@1| |unmarkedNodes#0@3|))) (and (|Set#Equal| |unmarkedNodes#0@3| |unmarkedNodes#0@1|) (or (< (|Seq#Rank| |stackNodes#0@4|) (|Seq#Rank| |stackNodes#0@1|)) (and (= (|Seq#Rank| |stackNodes#0@4|) (|Seq#Rank| |stackNodes#0@1|)) (< (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |t#0@3|) _module.Node.children))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |t#0@3|) _module.Node.childrenVisited)))) |$decr$loop#02@1|)))))) (=> (or (and (|Set#Subset| |unmarkedNodes#0@3| |unmarkedNodes#0@1|) (not (|Set#Subset| |unmarkedNodes#0@1| |unmarkedNodes#0@3|))) (and (|Set#Equal| |unmarkedNodes#0@3| |unmarkedNodes#0@1|) (or (< (|Seq#Rank| |stackNodes#0@4|) (|Seq#Rank| |stackNodes#0@1|)) (and (= (|Seq#Rank| |stackNodes#0@4|) (|Seq#Rank| |stackNodes#0@1|)) (< (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |t#0@3|) _module.Node.children))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |t#0@3|) _module.Node.childrenVisited)))) |$decr$loop#02@1|))))) (and (=> (= (ControlFlow 0 6) (- 0 20)) (=> |$w$loop#0@0| (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |root#0|) _module.Node.marked))))) (=> (=> |$w$loop#0@0| (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |root#0|) _module.Node.marked)))) (and (=> (= (ControlFlow 0 6) (- 0 19)) (=> |$w$loop#0@0| (|Set#IsMember| |S#0| ($Box refType |t#0@3|)))) (=> (=> |$w$loop#0@0| (|Set#IsMember| |S#0| ($Box refType |t#0@3|))) (and (=> (= (ControlFlow 0 6) (- 0 18)) (=> |$w$loop#0@0| (not (|Seq#Contains| |stackNodes#0@4| ($Box refType |t#0@3|))))) (=> (=> |$w$loop#0@0| (not (|Seq#Contains| |stackNodes#0@4| ($Box refType |t#0@3|)))) (and (=> (= (ControlFlow 0 6) (- 0 17)) (=> |$w$loop#0@0| (forall ((|i#1@@0| Int) (|j#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| |j#1@@0|)) (< |j#1@@0| (|Seq#Length| |stackNodes#0@4|))) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@4| |i#1@@0|)) ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#1@@0|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#1@@0|)) ($Unbox refType (|Seq#Index| |stackNodes#0@4| |i#1@@0|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#1@@1| Int) (|j#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| |j#1@@1|)) (< |j#1@@1| (|Seq#Length| |stackNodes#0@4|))) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@4| |i#1@@1|)) ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#1@@1|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#1@@1|)) ($Unbox refType (|Seq#Index| |stackNodes#0@4| |i#1@@1|)))
))) (and (=> (= (ControlFlow 0 6) (- 0 16)) (=> |$w$loop#0@0| (forall ((|n#9@@0| T@U) ) (!  (=> ($Is refType |n#9@@0| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#9@@0|)) (|Set#IsMember| |S#0| ($Box refType |n#9@@0|))))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#9@@0|)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#9@@0|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#9@@1| T@U) ) (!  (=> ($Is refType |n#9@@1| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#9@@1|)) (|Set#IsMember| |S#0| ($Box refType |n#9@@1|))))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#9@@1|)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#9@@1|)))
))) (and (=> (= (ControlFlow 0 6) (- 0 15)) (=> |$w$loop#0@0| (forall ((|n#11@@2| T@U) ) (!  (=> (and ($Is refType |n#11@@2| Tclass._module.Node) ($IsAlloc refType |n#11@@2| Tclass._module.Node $Heap@6)) (=> (or (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@2|)) (= |n#11@@2| |t#0@3|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@2|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@2|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@2|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#11@@3| T@U) ) (!  (=> (and ($Is refType |n#11@@3| Tclass._module.Node) ($IsAlloc refType |n#11@@3| Tclass._module.Node $Heap@6)) (=> (or (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@3|)) (= |n#11@@3| |t#0@3|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@3|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@3|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@3|)))
))) (and (=> (= (ControlFlow 0 6) (- 0 14)) (=> |$w$loop#0@0| (forall ((|n#11@@4| T@U) ) (!  (=> (and ($Is refType |n#11@@4| Tclass._module.Node) ($IsAlloc refType |n#11@@4| Tclass._module.Node $Heap@6)) (=> (or (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@4|)) (= |n#11@@4| |t#0@3|)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@4|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@4|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@4|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#11@@5| T@U) ) (!  (=> (and ($Is refType |n#11@@5| Tclass._module.Node) ($IsAlloc refType |n#11@@5| Tclass._module.Node $Heap@6)) (=> (or (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@5|)) (= |n#11@@5| |t#0@3|)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@5|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@5|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@5|)))
))) (and (=> (= (ControlFlow 0 6) (- 0 13)) (=> |$w$loop#0@0| (forall ((|n#11@@6| T@U) ) (!  (=> (and ($Is refType |n#11@@6| Tclass._module.Node) ($IsAlloc refType |n#11@@6| Tclass._module.Node $Heap@6)) (and (=> (or (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@6|)) (= |n#11@@6| |t#0@3|)) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@6|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@6|) _module.Node.children))))) (=> (or (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@6|)) (= |n#11@@6| |t#0@3|)) (forall ((|j#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@0|) (< |j#3@@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@6|) _module.Node.childrenVisited))))) (or (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@6|) _module.Node.children)) |j#3@@0|)) null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@6|) _module.Node.children)) |j#3@@0|))) _module.Node.marked)))))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@6|) _module.Node.children)) |j#3@@0|)))
)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@6|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@6|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@6|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#11@@7| T@U) ) (!  (=> (and ($Is refType |n#11@@7| Tclass._module.Node) ($IsAlloc refType |n#11@@7| Tclass._module.Node $Heap@6)) (and (=> (or (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@7|)) (= |n#11@@7| |t#0@3|)) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@7|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@7|) _module.Node.children))))) (=> (or (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@7|)) (= |n#11@@7| |t#0@3|)) (forall ((|j#3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@1|) (< |j#3@@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@7|) _module.Node.childrenVisited))))) (or (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@7|) _module.Node.children)) |j#3@@1|)) null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@7|) _module.Node.children)) |j#3@@1|))) _module.Node.marked)))))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@7|) _module.Node.children)) |j#3@@1|)))
)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@7|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#11@@7|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#11@@7|)))
))) (and (=> (= (ControlFlow 0 6) (- 0 12)) (=> |$w$loop#0@0| (forall ((|n#13@@0| T@U) ) (!  (=> ($Is refType |n#13@@0| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#13@@0|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#13@@0|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#13@@0|) _module.Node.children))))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#13@@0|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#13@@0|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#13@@0|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#13@@1| T@U) ) (!  (=> ($Is refType |n#13@@1| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#13@@1|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#13@@1|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#13@@1|) _module.Node.children))))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#13@@1|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#13@@1|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#13@@1|)))
))) (and (=> (= (ControlFlow 0 6) (- 0 11)) (=> |$w$loop#0@0| (forall ((|j#5@@0| Int) (|_t#0#0@@0| Int) ) (!  (=> (= |_t#0#0@@0| (+ |j#5@@0| 1)) (=> (and (<= (LitInt 0) |j#5@@0|) (< |_t#0#0@@0| (|Seq#Length| |stackNodes#0@4|))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#5@@0|))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#5@@0|))) _module.Node.childrenVisited))))) ($Unbox refType (|Seq#Index| |stackNodes#0@4| |_t#0#0@@0|)))))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@4| |_t#0#0@@0|)) ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#5@@0|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|j#5@@1| Int) (|_t#0#0@@1| Int) ) (!  (=> (= |_t#0#0@@1| (+ |j#5@@1| 1)) (=> (and (<= (LitInt 0) |j#5@@1|) (< |_t#0#0@@1| (|Seq#Length| |stackNodes#0@4|))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#5@@1|))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#5@@1|))) _module.Node.childrenVisited))))) ($Unbox refType (|Seq#Index| |stackNodes#0@4| |_t#0#0@@1|)))))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@4| |_t#0#0@@1|)) ($Unbox refType (|Seq#Index| |stackNodes#0@4| |j#5@@1|)))
))) (and (=> (= (ControlFlow 0 6) (- 0 10)) (=> |$w$loop#0@0| (=> (< 0 (|Seq#Length| |stackNodes#0@4|)) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| |stackNodes#0@4| (- (|Seq#Length| |stackNodes#0@4|) 1)))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| |stackNodes#0@4| (- (|Seq#Length| |stackNodes#0@4|) 1)))) _module.Node.childrenVisited))))) |t#0@3|)))) (=> (=> |$w$loop#0@0| (=> (< 0 (|Seq#Length| |stackNodes#0@4|)) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| |stackNodes#0@4| (- (|Seq#Length| |stackNodes#0@4|) 1)))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 ($Unbox refType (|Seq#Index| |stackNodes#0@4| (- (|Seq#Length| |stackNodes#0@4|) 1)))) _module.Node.childrenVisited))))) |t#0@3|))) (and (=> (= (ControlFlow 0 6) (- 0 9)) (=> |$w$loop#0@0| (forall ((|n#15@@0| T@U) ) (!  (=> ($Is refType |n#15@@0| Tclass._module.Node) (=> (and (and (and (|Set#IsMember| |S#0| ($Box refType |n#15@@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@0|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#15@@0|)))) (or (not (= |n#15@@0| |t#0@3|)) (not true))) (forall ((|ch#7@@0| T@U) ) (!  (=> ($Is refType |ch#7@@0| Tclass._module.Node?) (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@0|) _module.Node.children)) ($Box refType |ch#7@@0|)) (or (not (= |ch#7@@0| null)) (not true))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |ch#7@@0|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |ch#7@@0|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@0|) _module.Node.children)) ($Box refType |ch#7@@0|)))
))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@0|) _module.Node.children)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#15@@0|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@0|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#15@@0|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#15@@1| T@U) ) (!  (=> ($Is refType |n#15@@1| Tclass._module.Node) (=> (and (and (and (|Set#IsMember| |S#0| ($Box refType |n#15@@1|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@1|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#15@@1|)))) (or (not (= |n#15@@1| |t#0@3|)) (not true))) (forall ((|ch#7@@1| T@U) ) (!  (=> ($Is refType |ch#7@@1| Tclass._module.Node?) (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@1|) _module.Node.children)) ($Box refType |ch#7@@1|)) (or (not (= |ch#7@@1| null)) (not true))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |ch#7@@1|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |ch#7@@1|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@1|) _module.Node.children)) ($Box refType |ch#7@@1|)))
))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@1|) _module.Node.children)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#15@@1|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#15@@1|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#15@@1|)))
))) (and (=> (= (ControlFlow 0 6) (- 0 8)) (=> |$w$loop#0@0| (forall ((|n#17@@0| T@U) ) (!  (=> ($Is refType |n#17@@0| Tclass._module.Node) (=> (and (and (|Set#IsMember| |S#0| ($Box refType |n#17@@0|)) (not (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#17@@0|)))) (or (not (= |n#17@@0| |t#0@3|)) (not true))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#17@@0|) _module.Node.childrenVisited))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@0|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@0|) _module.Node.childrenVisited)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#17@@0|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#17@@0|)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#17@@0|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#17@@1| T@U) ) (!  (=> ($Is refType |n#17@@1| Tclass._module.Node) (=> (and (and (|Set#IsMember| |S#0| ($Box refType |n#17@@1|)) (not (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#17@@1|)))) (or (not (= |n#17@@1| |t#0@3|)) (not true))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#17@@1|) _module.Node.childrenVisited))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@1|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@1|) _module.Node.childrenVisited)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#17@@1|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@4| ($Box refType |n#17@@1|)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#17@@1|)))
))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> |$w$loop#0@0| (forall ((|n#19@@0| T@U) ) (!  (=> ($Is refType |n#19@@0| Tclass._module.Node) (=> (|Set#IsMember| |S#0| ($Box refType |n#19@@0|)) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#19@@0|) _module.Node.children)) ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@0|) _module.Node.children)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@0|) _module.Node.children)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#19@@0|) _module.Node.children)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#19@@0|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#19@@1| T@U) ) (!  (=> ($Is refType |n#19@@1| Tclass._module.Node) (=> (|Set#IsMember| |S#0| ($Box refType |n#19@@1|)) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#19@@1|) _module.Node.children)) ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@1|) _module.Node.children)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@1|) _module.Node.children)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#19@@1|) _module.Node.children)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#19@@1|)))
))) (=> (= (ControlFlow 0 6) (- 0 5)) (=> |$w$loop#0@0| (forall ((|n#21@@0| T@U) ) (!  (=> ($Is refType |n#21@@0| Tclass._module.Node) (=> (and (|Set#IsMember| |S#0| ($Box refType |n#21@@0|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#21@@0|) _module.Node.marked))))) (|Set#IsMember| |unmarkedNodes#0@3| ($Box refType |n#21@@0|))))
 :pattern ( (|Set#IsMember| |unmarkedNodes#0@3| ($Box refType |n#21@@0|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#21@@0|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#21@@0|)))
))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon131_Else_correct  (=> (and (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))))) null) (= (ControlFlow 0 32) 6)) anon81_correct)))
(let ((anon131_Then_correct  (=> (or (not (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))))) null)) (not true)) (and (=> (= (ControlFlow 0 27) (- 0 31)) (or (not (= |t#0@0| null)) (not true))) (=> (or (not (= |t#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 27) (- 0 30)) (or (not (= |t#0@0| null)) (not true))) (=> (or (not (= |t#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 27) (- 0 29)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children)))))) (=> (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children))))) (and (=> (= (ControlFlow 0 27) (- 0 28)) (or (not (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))))) null)) (not true))) (=> (or (not (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))))) null)) (not true)) (=> (= (ControlFlow 0 27) 6) anon81_correct))))))))))))
(let ((anon128_Else_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (= |$decr$loop#02@1| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited)))))) (and (=> (= (ControlFlow 0 33) (- 0 38)) (or (not (= |t#0@0| null)) (not true))) (=> (or (not (= |t#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 33) (- 0 37)) (or (not (= |t#0@0| null)) (not true))) (=> (or (not (= |t#0@0| null)) (not true)) (=> (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children))))) (not true)) (and (=> (= (ControlFlow 0 33) (- 0 36)) (or (not (= |t#0@0| null)) (not true))) (=> (or (not (= |t#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 33) (- 0 35)) (or (not (= |t#0@0| null)) (not true))) (=> (or (not (= |t#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children)))))) (=> (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children))))) (and (=> (= (ControlFlow 0 33) 27) anon131_Then_correct) (=> (= (ControlFlow 0 33) 32) anon131_Else_correct))))))))))))))))
(let ((anon128_Then_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= $Heap@7 $Heap@1)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |root#0|) _module.Node.marked)))) (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |root#0|) _module.Node.marked))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall ((|n#5| T@U) ) (!  (=> ($Is refType |n#5| Tclass._module.Node) (=> (and (|Set#IsMember| |S#0| ($Box refType |n#5|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5|) _module.Node.marked)))) (forall ((|ch#5| T@U) ) (!  (=> ($Is refType |ch#5| Tclass._module.Node?) (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5|) _module.Node.children)) ($Box refType |ch#5|)) (or (not (= |ch#5| null)) (not true))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |ch#5|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |ch#5|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5|) _module.Node.children)) ($Box refType |ch#5|)))
))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5|) _module.Node.children)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#5|)))
))) (=> (forall ((|n#5@@0| T@U) ) (!  (=> ($Is refType |n#5@@0| Tclass._module.Node) (=> (and (|Set#IsMember| |S#0| ($Box refType |n#5@@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5@@0|) _module.Node.marked)))) (forall ((|ch#5@@0| T@U) ) (!  (=> ($Is refType |ch#5@@0| Tclass._module.Node?) (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5@@0|) _module.Node.children)) ($Box refType |ch#5@@0|)) (or (not (= |ch#5@@0| null)) (not true))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |ch#5@@0|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |ch#5@@0|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5@@0|) _module.Node.children)) ($Box refType |ch#5@@0|)))
))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5@@0|) _module.Node.children)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#5@@0|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#5@@0|)))
)) (=> (= (ControlFlow 0 2) (- 0 1)) (forall ((|n#7| T@U) ) (!  (=> ($Is refType |n#7| Tclass._module.Node) (and (=> (|Set#IsMember| |S#0| ($Box refType |n#7|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#7|) _module.Node.childrenVisited))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#7|) _module.Node.childrenVisited))))) (=> (|Set#IsMember| |S#0| ($Box refType |n#7|)) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#7|) _module.Node.children)) ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#7|) _module.Node.children))))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#7|) _module.Node.children)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#7|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#7|) _module.Node.childrenVisited)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#7|) _module.Node.childrenVisited)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#7|)))
))))))))))
(let ((anon86_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 39) 2) anon128_Then_correct) (=> (= (ControlFlow 0 39) 33) anon128_Else_correct)))))
(let ((anon0_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is refType |root#0| Tclass._module.Node) ($IsAlloc refType |root#0| Tclass._module.Node $Heap)) (and ($Is SetType |S#0| (TSet Tclass._module.Node)) ($IsAlloc SetType |S#0| (TSet Tclass._module.Node) $Heap))) (=> (and (and (and ($Is refType |t#0| Tclass._module.Node?) ($IsAlloc refType |t#0| Tclass._module.Node? $Heap)) true) (and (and ($Is SeqType |stackNodes#0| (TSeq Tclass._module.Node)) ($IsAlloc SeqType |stackNodes#0| (TSeq Tclass._module.Node) $Heap)) true)) (=> (and (and (and (and ($Is SetType |unmarkedNodes#0| (TSet Tclass._module.Node?)) ($IsAlloc SetType |unmarkedNodes#0| (TSet Tclass._module.Node?) $Heap)) true) (= 1 $FunctionContextHeight)) (and (and (|Set#IsMember| |S#0| ($Box refType |root#0|)) (forall ((|n#1| T@U) ) (!  (=> ($Is refType |n#1| Tclass._module.Node) (=> (|Set#IsMember| |S#0| ($Box refType |n#1|)) (forall ((|ch#2| T@U) ) (!  (=> ($Is refType |ch#2| Tclass._module.Node?) (=> (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#1|) _module.Node.children)) ($Box refType |ch#2|)) (or (= |ch#2| null) (|Set#IsMember| |S#0| ($Box refType |ch#2|)))))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |ch#2|)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#1|) _module.Node.children)) ($Box refType |ch#2|)))
))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#1|) _module.Node.children)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#1|)))
))) (and (forall ((|n#3| T@U) ) (!  (=> ($Is refType |n#3| Tclass._module.Node) (and (=> (|Set#IsMember| |S#0| ($Box refType |n#3|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#3|) _module.Node.marked))))) (=> (|Set#IsMember| |S#0| ($Box refType |n#3|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#3|) _module.Node.childrenVisited))) (LitInt 0)))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#3|) _module.Node.childrenVisited)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#3|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#3|)))
)) (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc |S#0|))))) (and (=> (= (ControlFlow 0 166) (- 0 183)) (or (not (= |root#0| null)) (not true))) (=> (or (not (= |root#0| null)) (not true)) (and (=> (= (ControlFlow 0 166) (- 0 182)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |root#0| _module.Node.marked))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |root#0| _module.Node.marked)) (=> (and (= |$rhs#0@0| (U_2_bool (Lit boolType (bool_2_U true)))) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap |root#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |root#0|) _module.Node.marked ($Box boolType (bool_2_U |$rhs#0@0|)))))) (=> (and (and ($IsGoodHeap $Heap@0) (= |stackNodes#0@0| (Lit SeqType |Seq#Empty|))) (and (= |unmarkedNodes#0@0| (|Set#Difference| |S#0| (|Set#UnionOne| |Set#Empty| ($Box refType |root#0|)))) (= |$decr_init$loop#02@0| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |root#0|) _module.Node.children))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |root#0|) _module.Node.childrenVisited))))))) (and (=> (= (ControlFlow 0 166) (- 0 181)) (=> |$w$loop#0@0| (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |root#0|) _module.Node.marked))))) (=> (=> |$w$loop#0@0| (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |root#0|) _module.Node.marked)))) (and (=> (= (ControlFlow 0 166) (- 0 180)) (=> |$w$loop#0@0| (|Set#IsMember| |S#0| ($Box refType |root#0|)))) (=> (=> |$w$loop#0@0| (|Set#IsMember| |S#0| ($Box refType |root#0|))) (and (=> (= (ControlFlow 0 166) (- 0 179)) (=> |$w$loop#0@0| (not (|Seq#Contains| |stackNodes#0@0| ($Box refType |root#0|))))) (=> (=> |$w$loop#0@0| (not (|Seq#Contains| |stackNodes#0@0| ($Box refType |root#0|)))) (and (=> (= (ControlFlow 0 166) (- 0 178)) (=> |$w$loop#0@0| (forall ((|i#1@@2| Int) (|j#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| |j#1@@2|)) (< |j#1@@2| (|Seq#Length| |stackNodes#0@0|))) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@0| |i#1@@2|)) ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#1@@2|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#1@@2|)) ($Unbox refType (|Seq#Index| |stackNodes#0@0| |i#1@@2|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#1@@3| Int) (|j#1@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| |j#1@@3|)) (< |j#1@@3| (|Seq#Length| |stackNodes#0@0|))) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@0| |i#1@@3|)) ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#1@@3|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#1@@3|)) ($Unbox refType (|Seq#Index| |stackNodes#0@0| |i#1@@3|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 177)) (=> |$w$loop#0@0| (forall ((|n#9@@2| T@U) ) (!  (=> ($Is refType |n#9@@2| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#9@@2|)) (|Set#IsMember| |S#0| ($Box refType |n#9@@2|))))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#9@@2|)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#9@@2|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#9@@3| T@U) ) (!  (=> ($Is refType |n#9@@3| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#9@@3|)) (|Set#IsMember| |S#0| ($Box refType |n#9@@3|))))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#9@@3|)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#9@@3|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 176)) (=> |$w$loop#0@0| (forall ((|n#11@@8| T@U) ) (!  (=> (and ($Is refType |n#11@@8| Tclass._module.Node) ($IsAlloc refType |n#11@@8| Tclass._module.Node $Heap@0)) (=> (or (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@8|)) (= |n#11@@8| |root#0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@8|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@8|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@8|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#11@@9| T@U) ) (!  (=> (and ($Is refType |n#11@@9| Tclass._module.Node) ($IsAlloc refType |n#11@@9| Tclass._module.Node $Heap@0)) (=> (or (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@9|)) (= |n#11@@9| |root#0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@9|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@9|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@9|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 175)) (=> |$w$loop#0@0| (forall ((|n#11@@10| T@U) ) (!  (=> (and ($Is refType |n#11@@10| Tclass._module.Node) ($IsAlloc refType |n#11@@10| Tclass._module.Node $Heap@0)) (=> (or (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@10|)) (= |n#11@@10| |root#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@10|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@10|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@10|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#11@@11| T@U) ) (!  (=> (and ($Is refType |n#11@@11| Tclass._module.Node) ($IsAlloc refType |n#11@@11| Tclass._module.Node $Heap@0)) (=> (or (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@11|)) (= |n#11@@11| |root#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@11|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@11|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@11|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 174)) (=> |$w$loop#0@0| (forall ((|n#11@@12| T@U) ) (!  (=> (and ($Is refType |n#11@@12| Tclass._module.Node) ($IsAlloc refType |n#11@@12| Tclass._module.Node $Heap@0)) (and (=> (or (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@12|)) (= |n#11@@12| |root#0|)) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@12|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@12|) _module.Node.children))))) (=> (or (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@12|)) (= |n#11@@12| |root#0|)) (forall ((|j#3@@2| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@2|) (< |j#3@@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@12|) _module.Node.childrenVisited))))) (or (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@12|) _module.Node.children)) |j#3@@2|)) null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@12|) _module.Node.children)) |j#3@@2|))) _module.Node.marked)))))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@12|) _module.Node.children)) |j#3@@2|)))
)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@12|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@12|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@12|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#11@@13| T@U) ) (!  (=> (and ($Is refType |n#11@@13| Tclass._module.Node) ($IsAlloc refType |n#11@@13| Tclass._module.Node $Heap@0)) (and (=> (or (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@13|)) (= |n#11@@13| |root#0|)) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@13|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@13|) _module.Node.children))))) (=> (or (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@13|)) (= |n#11@@13| |root#0|)) (forall ((|j#3@@3| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@3|) (< |j#3@@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@13|) _module.Node.childrenVisited))))) (or (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@13|) _module.Node.children)) |j#3@@3|)) null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@13|) _module.Node.children)) |j#3@@3|))) _module.Node.marked)))))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@13|) _module.Node.children)) |j#3@@3|)))
)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@13|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#11@@13|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#11@@13|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 173)) (=> |$w$loop#0@0| (forall ((|n#13@@2| T@U) ) (!  (=> ($Is refType |n#13@@2| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#13@@2|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#13@@2|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#13@@2|) _module.Node.children))))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#13@@2|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#13@@2|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#13@@2|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#13@@3| T@U) ) (!  (=> ($Is refType |n#13@@3| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#13@@3|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#13@@3|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#13@@3|) _module.Node.children))))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#13@@3|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#13@@3|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#13@@3|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 172)) (=> |$w$loop#0@0| (forall ((|j#5@@2| Int) (|_t#0#0@@2| Int) ) (!  (=> (= |_t#0#0@@2| (+ |j#5@@2| 1)) (=> (and (<= (LitInt 0) |j#5@@2|) (< |_t#0#0@@2| (|Seq#Length| |stackNodes#0@0|))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#5@@2|))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#5@@2|))) _module.Node.childrenVisited))))) ($Unbox refType (|Seq#Index| |stackNodes#0@0| |_t#0#0@@2|)))))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@0| |_t#0#0@@2|)) ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#5@@2|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|j#5@@3| Int) (|_t#0#0@@3| Int) ) (!  (=> (= |_t#0#0@@3| (+ |j#5@@3| 1)) (=> (and (<= (LitInt 0) |j#5@@3|) (< |_t#0#0@@3| (|Seq#Length| |stackNodes#0@0|))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#5@@3|))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#5@@3|))) _module.Node.childrenVisited))))) ($Unbox refType (|Seq#Index| |stackNodes#0@0| |_t#0#0@@3|)))))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@0| |_t#0#0@@3|)) ($Unbox refType (|Seq#Index| |stackNodes#0@0| |j#5@@3|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 171)) (=> |$w$loop#0@0| (=> (< 0 (|Seq#Length| |stackNodes#0@0|)) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| |stackNodes#0@0| (- (|Seq#Length| |stackNodes#0@0|) 1)))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| |stackNodes#0@0| (- (|Seq#Length| |stackNodes#0@0|) 1)))) _module.Node.childrenVisited))))) |root#0|)))) (=> (=> |$w$loop#0@0| (=> (< 0 (|Seq#Length| |stackNodes#0@0|)) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| |stackNodes#0@0| (- (|Seq#Length| |stackNodes#0@0|) 1)))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (|Seq#Index| |stackNodes#0@0| (- (|Seq#Length| |stackNodes#0@0|) 1)))) _module.Node.childrenVisited))))) |root#0|))) (and (=> (= (ControlFlow 0 166) (- 0 170)) (=> |$w$loop#0@0| (forall ((|n#15@@2| T@U) ) (!  (=> ($Is refType |n#15@@2| Tclass._module.Node) (=> (and (and (and (|Set#IsMember| |S#0| ($Box refType |n#15@@2|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@2|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#15@@2|)))) (or (not (= |n#15@@2| |root#0|)) (not true))) (forall ((|ch#7@@2| T@U) ) (!  (=> ($Is refType |ch#7@@2| Tclass._module.Node?) (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@2|) _module.Node.children)) ($Box refType |ch#7@@2|)) (or (not (= |ch#7@@2| null)) (not true))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |ch#7@@2|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |ch#7@@2|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@2|) _module.Node.children)) ($Box refType |ch#7@@2|)))
))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@2|) _module.Node.children)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#15@@2|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@2|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#15@@2|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#15@@3| T@U) ) (!  (=> ($Is refType |n#15@@3| Tclass._module.Node) (=> (and (and (and (|Set#IsMember| |S#0| ($Box refType |n#15@@3|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@3|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#15@@3|)))) (or (not (= |n#15@@3| |root#0|)) (not true))) (forall ((|ch#7@@3| T@U) ) (!  (=> ($Is refType |ch#7@@3| Tclass._module.Node?) (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@3|) _module.Node.children)) ($Box refType |ch#7@@3|)) (or (not (= |ch#7@@3| null)) (not true))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |ch#7@@3|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |ch#7@@3|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@3|) _module.Node.children)) ($Box refType |ch#7@@3|)))
))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@3|) _module.Node.children)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#15@@3|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#15@@3|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#15@@3|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 169)) (=> |$w$loop#0@0| (forall ((|n#17@@2| T@U) ) (!  (=> ($Is refType |n#17@@2| Tclass._module.Node) (=> (and (and (|Set#IsMember| |S#0| ($Box refType |n#17@@2|)) (not (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#17@@2|)))) (or (not (= |n#17@@2| |root#0|)) (not true))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#17@@2|) _module.Node.childrenVisited))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@2|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@2|) _module.Node.childrenVisited)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#17@@2|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#17@@2|)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#17@@2|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#17@@3| T@U) ) (!  (=> ($Is refType |n#17@@3| Tclass._module.Node) (=> (and (and (|Set#IsMember| |S#0| ($Box refType |n#17@@3|)) (not (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#17@@3|)))) (or (not (= |n#17@@3| |root#0|)) (not true))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#17@@3|) _module.Node.childrenVisited))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@3|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@3|) _module.Node.childrenVisited)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#17@@3|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@0| ($Box refType |n#17@@3|)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#17@@3|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 168)) (=> |$w$loop#0@0| (forall ((|n#19@@2| T@U) ) (!  (=> ($Is refType |n#19@@2| Tclass._module.Node) (=> (|Set#IsMember| |S#0| ($Box refType |n#19@@2|)) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#19@@2|) _module.Node.children)) ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@2|) _module.Node.children)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@2|) _module.Node.children)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#19@@2|) _module.Node.children)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#19@@2|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#19@@3| T@U) ) (!  (=> ($Is refType |n#19@@3| Tclass._module.Node) (=> (|Set#IsMember| |S#0| ($Box refType |n#19@@3|)) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#19@@3|) _module.Node.children)) ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@3|) _module.Node.children)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@3|) _module.Node.children)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#19@@3|) _module.Node.children)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#19@@3|)))
))) (and (=> (= (ControlFlow 0 166) (- 0 167)) (=> |$w$loop#0@0| (forall ((|n#21@@1| T@U) ) (!  (=> ($Is refType |n#21@@1| Tclass._module.Node) (=> (and (|Set#IsMember| |S#0| ($Box refType |n#21@@1|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#21@@1|) _module.Node.marked))))) (|Set#IsMember| |unmarkedNodes#0@0| ($Box refType |n#21@@1|))))
 :pattern ( (|Set#IsMember| |unmarkedNodes#0@0| ($Box refType |n#21@@1|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#21@@1|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#21@@1|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#21@@2| T@U) ) (!  (=> ($Is refType |n#21@@2| Tclass._module.Node) (=> (and (|Set#IsMember| |S#0| ($Box refType |n#21@@2|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#21@@2|) _module.Node.marked))))) (|Set#IsMember| |unmarkedNodes#0@0| ($Box refType |n#21@@2|))))
 :pattern ( (|Set#IsMember| |unmarkedNodes#0@0| ($Box refType |n#21@@2|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#21@@2|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#21@@2|)))
))) (=> (and ($Is SeqType |stackNodes#0@1| (TSeq Tclass._module.Node)) ($IsAlloc SeqType |stackNodes#0@1| (TSeq Tclass._module.Node) $Heap@1)) (=> (and (and ($Is refType |t#0@0| Tclass._module.Node?) ($IsAlloc refType |t#0@0| Tclass._module.Node? $Heap@1)) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (=> (and (and (and ($Is SetType |unmarkedNodes#0@1| (TSet Tclass._module.Node?)) ($IsAlloc SetType |unmarkedNodes#0@1| (TSet Tclass._module.Node?) $Heap@1)) (and (not false) |$rhs#0@0|)) (and (and (=> |$w$loop#0@0| (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |root#0|) _module.Node.marked)))) (=> |$w$loop#0@0| (|Set#IsMember| |S#0| ($Box refType |t#0@0|)))) (and (=> |$w$loop#0@0| (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |t#0@0|)))) (=> |$w$loop#0@0| (forall ((|i#1@@4| Int) (|j#1@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| |j#1@@4|)) (< |j#1@@4| (|Seq#Length| |stackNodes#0@1|))) (or (not (= ($Unbox refType (|Seq#Index| |stackNodes#0@1| |i#1@@4|)) ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#1@@4|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#1@@4|)) ($Unbox refType (|Seq#Index| |stackNodes#0@1| |i#1@@4|)))
)))))) (=> (and (and (and (and (=> |$w$loop#0@0| (forall ((|n#9@@4| T@U) ) (!  (=> ($Is refType |n#9@@4| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#9@@4|)) (|Set#IsMember| |S#0| ($Box refType |n#9@@4|))))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#9@@4|)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#9@@4|)))
))) (=> |$w$loop#0@0| (forall ((|n#11@@14| T@U) ) (!  (=> (and ($Is refType |n#11@@14| Tclass._module.Node) ($IsAlloc refType |n#11@@14| Tclass._module.Node $Heap@1)) (=> (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@14|)) (= |n#11@@14| |t#0@0|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@14|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@14|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@14|)))
)))) (and (=> |$w$loop#0@0| (forall ((|n#11@@15| T@U) ) (!  (=> (and ($Is refType |n#11@@15| Tclass._module.Node) ($IsAlloc refType |n#11@@15| Tclass._module.Node $Heap@1)) (=> (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@15|)) (= |n#11@@15| |t#0@0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@15|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@15|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@15|)))
))) (=> |$w$loop#0@0| (forall ((|n#11@@16| T@U) ) (!  (=> (and ($Is refType |n#11@@16| Tclass._module.Node) ($IsAlloc refType |n#11@@16| Tclass._module.Node $Heap@1)) (and (=> (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@16|)) (= |n#11@@16| |t#0@0|)) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@16|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@16|) _module.Node.children))))) (=> (or (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@16|)) (= |n#11@@16| |t#0@0|)) (forall ((|j#3@@4| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@4|) (< |j#3@@4| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@16|) _module.Node.childrenVisited))))) (or (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@16|) _module.Node.children)) |j#3@@4|)) null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@16|) _module.Node.children)) |j#3@@4|))) _module.Node.marked)))))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@16|) _module.Node.children)) |j#3@@4|)))
)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@16|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11@@16|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#11@@16|)))
))))) (and (and (=> |$w$loop#0@0| (forall ((|n#13@@4| T@U) ) (!  (=> ($Is refType |n#13@@4| Tclass._module.Node) (=> (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#13@@4|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13@@4|) _module.Node.childrenVisited))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13@@4|) _module.Node.children))))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13@@4|) _module.Node.children)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13@@4|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#13@@4|)))
))) (=> |$w$loop#0@0| (forall ((|j#5@@4| Int) (|_t#0#0@@4| Int) ) (!  (=> (= |_t#0#0@@4| (+ |j#5@@4| 1)) (=> (and (<= (LitInt 0) |j#5@@4|) (< |_t#0#0@@4| (|Seq#Length| |stackNodes#0@1|))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#5@@4|))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#5@@4|))) _module.Node.childrenVisited))))) ($Unbox refType (|Seq#Index| |stackNodes#0@1| |_t#0#0@@4|)))))
 :pattern ( ($Unbox refType (|Seq#Index| |stackNodes#0@1| |_t#0#0@@4|)) ($Unbox refType (|Seq#Index| |stackNodes#0@1| |j#5@@4|)))
)))) (and (=> |$w$loop#0@0| (=> (< 0 (|Seq#Length| |stackNodes#0@1|)) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| (- (|Seq#Length| |stackNodes#0@1|) 1)))) _module.Node.children)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 ($Unbox refType (|Seq#Index| |stackNodes#0@1| (- (|Seq#Length| |stackNodes#0@1|) 1)))) _module.Node.childrenVisited))))) |t#0@0|))) (=> |$w$loop#0@0| (forall ((|n#15@@4| T@U) ) (!  (=> ($Is refType |n#15@@4| Tclass._module.Node) (=> (and (and (and (|Set#IsMember| |S#0| ($Box refType |n#15@@4|)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15@@4|) _module.Node.marked)))) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#15@@4|)))) (or (not (= |n#15@@4| |t#0@0|)) (not true))) (forall ((|ch#7@@4| T@U) ) (!  (=> ($Is refType |ch#7@@4| Tclass._module.Node?) (=> (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15@@4|) _module.Node.children)) ($Box refType |ch#7@@4|)) (or (not (= |ch#7@@4| null)) (not true))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |ch#7@@4|) _module.Node.marked)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |ch#7@@4|) _module.Node.marked)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15@@4|) _module.Node.children)) ($Box refType |ch#7@@4|)))
))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15@@4|) _module.Node.children)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#15@@4|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#15@@4|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#15@@4|)))
)))))) (and (and (and (=> |$w$loop#0@0| (forall ((|n#17@@4| T@U) ) (!  (=> ($Is refType |n#17@@4| Tclass._module.Node) (=> (and (and (|Set#IsMember| |S#0| ($Box refType |n#17@@4|)) (not (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#17@@4|)))) (or (not (= |n#17@@4| |t#0@0|)) (not true))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#17@@4|) _module.Node.childrenVisited))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@4|) _module.Node.childrenVisited))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#17@@4|) _module.Node.childrenVisited)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#17@@4|) _module.Node.childrenVisited)))
 :pattern ( (|Seq#Contains| |stackNodes#0@1| ($Box refType |n#17@@4|)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#17@@4|)))
))) (=> |$w$loop#0@0| (forall ((|n#19@@4| T@U) ) (!  (=> ($Is refType |n#19@@4| Tclass._module.Node) (=> (|Set#IsMember| |S#0| ($Box refType |n#19@@4|)) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#19@@4|) _module.Node.children)) ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@4|) _module.Node.children)))))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#19@@4|) _module.Node.children)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#19@@4|) _module.Node.children)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#19@@4|)))
)))) (and (=> |$w$loop#0@0| (forall ((|n#21@@3| T@U) ) (!  (=> ($Is refType |n#21@@3| Tclass._module.Node) (=> (and (|Set#IsMember| |S#0| ($Box refType |n#21@@3|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#21@@3|) _module.Node.marked))))) (|Set#IsMember| |unmarkedNodes#0@1| ($Box refType |n#21@@3|))))
 :pattern ( (|Set#IsMember| |unmarkedNodes#0@1| ($Box refType |n#21@@3|)))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#21@@3|) _module.Node.marked)))
 :pattern ( (|Set#IsMember| |S#0| ($Box refType |n#21@@3|)))
))) (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@8) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@8)) (|Set#IsMember| |S#0| ($Box refType $o@@8))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8))
)))) (and (and ($HeapSucc $Heap@0 $Heap@1) (forall (($o@@9 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@9) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@9) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@9) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@9 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@9) $f@@0))
))) (and (|Set#Subset| |unmarkedNodes#0@1| |unmarkedNodes#0@0|) (=> (|Set#Equal| |unmarkedNodes#0@1| |unmarkedNodes#0@0|) (and (<= (|Seq#Rank| |stackNodes#0@1|) (|Seq#Rank| |stackNodes#0@0|)) (=> (= (|Seq#Rank| |stackNodes#0@1|) (|Seq#Rank| |stackNodes#0@0|)) (<= (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.children))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |t#0@0|) _module.Node.childrenVisited)))) |$decr_init$loop#02@0|)))))))) (and (=> (= (ControlFlow 0 166) 164) anon86_Then_correct) (=> (= (ControlFlow 0 166) 39) anon86_Else_correct))))))))))))))))))))))))))))))))))))))))))))))))
anon0_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
