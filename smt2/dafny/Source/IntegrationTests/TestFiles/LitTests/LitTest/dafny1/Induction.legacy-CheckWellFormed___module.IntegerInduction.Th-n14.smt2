(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U Int) Int)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@26 (T@U Int) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (Int Int) Int)
(declare-fun $generated@@35 (T@U T@U Int) Int)
(declare-fun $generated@@36 (T@U Int) Bool)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@43 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T T@T) T@T)
(declare-fun $generated@@51 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@77 (T@T T@U) T@U)
(declare-fun $generated@@83 (T@T T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U) Bool)
(declare-fun $generated@@109 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@110 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@111 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@145 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@29) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 Int) ) (!  (=> (or ($generated@@26 $generated@@33 ($generated@@25 $generated@@34)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@33 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@33 $generated@@30)) (<= ($generated@@25 0) ($generated@@25 $generated@@34))))) (and (=> (or (not (= ($generated@@25 $generated@@34) ($generated@@25 0))) (not true)) ($generated@@26 $generated@@33 ($generated@@25 (- $generated@@34 1)))) (= ($generated@@23 ($generated@@24 $generated@@32) $generated@@33 ($generated@@25 $generated@@34)) (ite (= ($generated@@25 $generated@@34) ($generated@@25 0)) 0 (+ ($generated@@23 ($generated@@24 $generated@@32) $generated@@33 ($generated@@25 (- $generated@@34 1))) ($generated@@31 ($generated@@25 ($generated@@31 ($generated@@25 $generated@@34) ($generated@@25 $generated@@34))) ($generated@@25 $generated@@34)))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@32) $generated@@33 ($generated@@25 $generated@@34)))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 Int) ) (!  (=> (or ($generated@@36 $generated@@38 $generated@@39) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@38 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@38 $generated@@30)) (<= ($generated@@25 0) $generated@@39)))) (and (=> (or (not (= $generated@@39 ($generated@@25 0))) (not true)) ($generated@@36 $generated@@38 (- $generated@@39 1))) (= ($generated@@35 ($generated@@24 $generated@@37) $generated@@38 $generated@@39) (ite (= $generated@@39 ($generated@@25 0)) 0 (+ ($generated@@35 $generated@@37 $generated@@38 (- $generated@@39 1)) $generated@@39)))))
 :pattern ( ($generated@@35 ($generated@@24 $generated@@37) $generated@@38 $generated@@39))
))))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@42 $generated@@40)  (or (= $generated@@42 $generated@@27) (= ($generated@@41 $generated@@42) $generated@@40)))
 :pattern ( ($generated@@28 $generated@@29 $generated@@42 $generated@@40))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@43 $generated@@29 $generated@@44 $generated@@30 $generated@@45) ($generated@@43 $generated@@29 $generated@@44 $generated@@40 $generated@@45))
 :pattern ( ($generated@@43 $generated@@29 $generated@@44 $generated@@30 $generated@@45))
 :pattern ( ($generated@@43 $generated@@29 $generated@@44 $generated@@40 $generated@@45))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@47 $generated@@54 $generated@@55 ($generated@@51 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@56) $generated@@58) $generated@@56)
 :weight 0
)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (or (= $generated@@63 $generated@@64) (= ($generated@@47 $generated@@59 $generated@@60 ($generated@@51 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@61) $generated@@64) ($generated@@47 $generated@@59 $generated@@60 $generated@@62 $generated@@64)))
 :weight 0
))) (= ($generated@@5 $generated@@48) 4)) (= ($generated@@5 $generated@@49) 5)) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (= ($generated@@5 ($generated@@50 $generated@@65 $generated@@66)) 6))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (! (= ($generated@@52 ($generated@@50 $generated@@67 $generated@@68)) $generated@@67)
 :pattern ( ($generated@@50 $generated@@67 $generated@@68))
))) (forall (($generated@@69 T@T) ($generated@@70 T@T) ) (! (= ($generated@@53 ($generated@@50 $generated@@69 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@50 $generated@@69 $generated@@70))
))))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@43 $generated@@29 $generated@@71 $generated@@40 $generated@@72)  (or (= $generated@@71 $generated@@27) ($generated@@10 ($generated@@46 $generated@@6 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@29 ($generated@@50 $generated@@48 $generated@@49) $generated@@72 $generated@@71) $generated@@1)))))
 :pattern ( ($generated@@43 $generated@@29 $generated@@71 $generated@@40 $generated@@72))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 Int) ) (!  (=> (or ($generated@@26 $generated@@74 $generated@@75) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@74 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@74 $generated@@30)) (<= ($generated@@25 0) $generated@@75)))) (and (=> (or (not (= $generated@@75 ($generated@@25 0))) (not true)) ($generated@@26 $generated@@74 (- $generated@@75 1))) (= ($generated@@23 ($generated@@24 $generated@@73) $generated@@74 $generated@@75) (ite (= $generated@@75 ($generated@@25 0)) 0 (+ ($generated@@23 $generated@@73 $generated@@74 (- $generated@@75 1)) ($generated@@31 ($generated@@31 $generated@@75 $generated@@75) $generated@@75))))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@73) $generated@@74 $generated@@75))
))))
(assert (forall (($generated@@76 Int) ) (! (= ($generated@@25 $generated@@76) $generated@@76)
 :pattern ( ($generated@@25 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@77 $generated@@79 $generated@@78) $generated@@78)
 :pattern ( ($generated@@77 $generated@@79 $generated@@78))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 Int) ) (!  (=> (or ($generated@@36 ($generated@@77 $generated@@29 $generated@@81) ($generated@@25 $generated@@82)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@81 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@81 $generated@@30)) (<= ($generated@@25 0) ($generated@@25 $generated@@82))))) (and (=> (or (not (= ($generated@@25 $generated@@82) ($generated@@25 0))) (not true)) ($generated@@36 ($generated@@77 $generated@@29 $generated@@81) ($generated@@25 (- $generated@@82 1)))) (= ($generated@@35 ($generated@@24 $generated@@80) ($generated@@77 $generated@@29 $generated@@81) ($generated@@25 $generated@@82)) (ite (= ($generated@@25 $generated@@82) ($generated@@25 0)) 0 (+ ($generated@@35 ($generated@@24 $generated@@80) ($generated@@77 $generated@@29 $generated@@81) ($generated@@25 (- $generated@@82 1))) $generated@@82)))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@24 $generated@@80) ($generated@@77 $generated@@29 $generated@@81) ($generated@@25 $generated@@82)))
))))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@T) ) (! (= ($generated@@83 $generated@@85 ($generated@@46 $generated@@85 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@46 $generated@@85 $generated@@84))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 Int) ) (!  (=> (or ($generated@@36 $generated@@87 $generated@@88) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@87 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@87 $generated@@30)) (<= ($generated@@25 0) $generated@@88)))) (= ($generated@@31 ($generated@@25 2) ($generated@@35 $generated@@86 $generated@@87 $generated@@88)) ($generated@@31 $generated@@88 (+ $generated@@88 1))))
 :pattern ( ($generated@@35 $generated@@86 $generated@@87 $generated@@88))
))))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@89 ($generated@@83 $generated@@93 $generated@@90) $generated@@91 $generated@@92) ($generated@@43 $generated@@93 $generated@@90 $generated@@91 $generated@@92))
 :pattern ( ($generated@@89 ($generated@@83 $generated@@93 $generated@@90) $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@94 $generated@@30)  (and ($generated@@28 $generated@@29 $generated@@94 $generated@@40) (or (not (= $generated@@94 $generated@@27)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@94 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 $generated@@94 $generated@@40))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 Int) ) (! (= ($generated@@23 ($generated@@24 $generated@@95) $generated@@96 $generated@@97) ($generated@@23 $generated@@95 $generated@@96 $generated@@97))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@95) $generated@@96 $generated@@97))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 Int) ) (! (= ($generated@@35 ($generated@@24 $generated@@98) $generated@@99 $generated@@100) ($generated@@35 $generated@@98 $generated@@99 $generated@@100))
 :pattern ( ($generated@@35 ($generated@@24 $generated@@98) $generated@@99 $generated@@100))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 Int) ) (!  (=> (or ($generated@@26 ($generated@@77 $generated@@29 $generated@@102) ($generated@@25 $generated@@103)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@102 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@102 $generated@@30)) (<= ($generated@@25 0) ($generated@@25 $generated@@103))))) (and (=> (or (not (= ($generated@@25 $generated@@103) ($generated@@25 0))) (not true)) ($generated@@26 ($generated@@77 $generated@@29 $generated@@102) ($generated@@25 (- $generated@@103 1)))) (= ($generated@@23 ($generated@@24 $generated@@101) ($generated@@77 $generated@@29 $generated@@102) ($generated@@25 $generated@@103)) (ite (= ($generated@@25 $generated@@103) ($generated@@25 0)) 0 (+ ($generated@@23 ($generated@@24 $generated@@101) ($generated@@77 $generated@@29 $generated@@102) ($generated@@25 (- $generated@@103 1))) ($generated@@31 ($generated@@25 ($generated@@31 ($generated@@25 $generated@@103) ($generated@@25 $generated@@103))) ($generated@@25 $generated@@103)))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@101) ($generated@@77 $generated@@29 $generated@@102) ($generated@@25 $generated@@103)))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 Int) ) (!  (=> (or ($generated@@36 $generated@@105 ($generated@@25 $generated@@106)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@105 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@105 $generated@@30)) (<= ($generated@@25 0) ($generated@@25 $generated@@106))))) (and (=> (or (not (= ($generated@@25 $generated@@106) ($generated@@25 0))) (not true)) ($generated@@36 $generated@@105 ($generated@@25 (- $generated@@106 1)))) (= ($generated@@35 ($generated@@24 $generated@@104) $generated@@105 ($generated@@25 $generated@@106)) (ite (= ($generated@@25 $generated@@106) ($generated@@25 0)) 0 (+ ($generated@@35 ($generated@@24 $generated@@104) $generated@@105 ($generated@@25 (- $generated@@106 1))) $generated@@106)))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@24 $generated@@104) $generated@@105 ($generated@@25 $generated@@106)))
))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@T) ) (! (= ($generated@@46 $generated@@108 ($generated@@83 $generated@@108 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@83 $generated@@108 $generated@@107))
)))
(assert  (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@109 $generated@@112 $generated@@113 $generated@@114 ($generated@@111 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@117 $generated@@118) $generated@@115)
 :weight 0
)) (and (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@124 $generated@@126) (= ($generated@@109 $generated@@119 $generated@@120 $generated@@121 ($generated@@111 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@126 $generated@@127) ($generated@@109 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@126 $generated@@127)))
 :weight 0
)) (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (!  (or (= $generated@@134 $generated@@136) (= ($generated@@109 $generated@@128 $generated@@129 $generated@@130 ($generated@@111 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@134 $generated@@131) $generated@@135 $generated@@136) ($generated@@109 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@135 $generated@@136)))
 :weight 0
)))))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 Bool) ($generated@@141 T@U) ($generated@@142 T@U) ) (! (= ($generated@@10 ($generated@@109 $generated@@29 $generated@@48 $generated@@6 ($generated@@110 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))  (=> (and (or (not (= $generated@@141 $generated@@137)) (not true)) ($generated@@10 ($generated@@46 $generated@@6 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@29 ($generated@@50 $generated@@48 $generated@@49) $generated@@138 $generated@@141) $generated@@139)))) $generated@@140))
 :pattern ( ($generated@@109 $generated@@29 $generated@@48 $generated@@6 ($generated@@110 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@143 Int) ($generated@@144 Int) ) (! (= ($generated@@31 $generated@@143 $generated@@144) (* $generated@@143 $generated@@144))
 :pattern ( ($generated@@31 $generated@@143 $generated@@144))
)))
(assert (= ($generated@@21 $generated@@40) $generated@@2))
(assert (= ($generated@@145 $generated@@40) $generated@@4))
(assert (= ($generated@@21 $generated@@30) $generated@@3))
(assert (= ($generated@@145 $generated@@30) $generated@@4))
(assert (forall (($generated@@146 Int) ) (! (= ($generated@@83 $generated@@7 ($generated@@11 ($generated@@25 $generated@@146))) ($generated@@77 $generated@@49 ($generated@@83 $generated@@7 ($generated@@11 $generated@@146))))
 :pattern ( ($generated@@83 $generated@@7 ($generated@@11 ($generated@@25 $generated@@146))))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@T) ) (! (= ($generated@@83 $generated@@148 ($generated@@77 $generated@@148 $generated@@147)) ($generated@@77 $generated@@49 ($generated@@83 $generated@@148 $generated@@147)))
 :pattern ( ($generated@@83 $generated@@148 ($generated@@77 $generated@@148 $generated@@147)))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (! ($generated@@43 $generated@@7 $generated@@150 $generated $generated@@149)
 :pattern ( ($generated@@43 $generated@@7 $generated@@150 $generated $generated@@149))
)))
(assert (forall (($generated@@151 T@U) ) (! ($generated@@28 $generated@@7 $generated@@151 $generated)
 :pattern ( ($generated@@28 $generated@@7 $generated@@151 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@152 () Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 (T@U) Bool)
(declare-fun $generated@@158 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@159 true))
(let (($generated@@160  (=> (and (< $generated@@152 ($generated@@25 0)) (= (ControlFlow 0 7) 2)) $generated@@159)))
(let (($generated@@161  (=> (<= ($generated@@25 0) $generated@@152) (=> (and ($generated@@89 ($generated@@83 $generated@@29 $generated@@153) $generated@@40 $generated@@154) ($generated@@43 $generated@@7 ($generated@@11 $generated@@152) $generated $generated@@154)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (<= ($generated@@25 0) $generated@@152)) (=> (and (and (<= ($generated@@25 0) $generated@@152) ($generated@@26 $generated@@153 $generated@@152)) (and ($generated@@89 ($generated@@83 $generated@@29 $generated@@153) $generated@@40 $generated@@154) ($generated@@43 $generated@@7 ($generated@@11 $generated@@152) $generated $generated@@154))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (<= ($generated@@25 0) $generated@@152)) (=> (and (and (<= ($generated@@25 0) $generated@@152) ($generated@@36 $generated@@153 $generated@@152)) (and ($generated@@89 ($generated@@83 $generated@@29 $generated@@153) $generated@@40 $generated@@154) ($generated@@43 $generated@@7 ($generated@@11 $generated@@152) $generated $generated@@154))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= ($generated@@25 0) $generated@@152)) (=> (<= ($generated@@25 0) $generated@@152) (=> (and ($generated@@36 $generated@@153 $generated@@152) (= (ControlFlow 0 3) 2)) $generated@@159)))))))))))
(let (($generated@@162  (and (=> (= (ControlFlow 0 8) 3) $generated@@161) (=> (= (ControlFlow 0 8) 7) $generated@@160))))
(let (($generated@@163 true))
(let (($generated@@164  (=> (= $generated@@155 ($generated@@110 $generated@@27 $generated@@156 $generated@@1 false)) (=> (and (and ($generated@@157 $generated@@154) ($generated@@158 $generated@@154)) (= $generated@@156 $generated@@154)) (and (=> (= (ControlFlow 0 9) 8) $generated@@162) (=> (= (ControlFlow 0 9) 1) $generated@@163))))))
(let (($generated@@165  (=> (and ($generated@@157 $generated@@156) ($generated@@158 $generated@@156)) (=> (and (and (or (not (= $generated@@153 $generated@@27)) (not true)) (and ($generated@@28 $generated@@29 $generated@@153 $generated@@30) ($generated@@43 $generated@@29 $generated@@153 $generated@@30 $generated@@156))) (and (= 1 $generated@@22) (= (ControlFlow 0 10) 9))) $generated@@164))))
$generated@@165))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
