(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@43 () Int)
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 (T@U T@U) Bool)
(declare-fun $generated@@47 (T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@U T@U) Bool)
(declare-fun $generated@@77 (T@U) Bool)
(declare-fun $generated@@98 (T@U) Int)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@101 () T@T)
(declare-fun $generated@@102 () T@T)
(declare-fun $generated@@103 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@104 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@105 () T@T)
(declare-fun $generated@@106 (T@T T@T) T@T)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@108 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@109 (T@T) T@T)
(declare-fun $generated@@110 (T@T) T@T)
(declare-fun $generated@@159 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@160 (T@U) Bool)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@1))
(assert (= ($generated@@4 $generated@@23) 3))
(assert ($generated@@22 $generated@@23 $generated@@21 $generated@@24))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@27) (= $generated@@26 $generated@@27))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@32 T@U) ) (! (= ($generated@@31 $generated@@32) (= ($generated@@20 $generated@@32) $generated@@1))
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@33 $generated@@34) (= ($generated@@20 $generated@@34) $generated@@2))
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (!  (=> ($generated@@31 $generated@@39) (= $generated@@39 $generated@@21))
 :pattern ( ($generated@@31 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ) (!  (=> ($generated@@33 $generated@@41) (exists (($generated@@42 T@U) ) (= $generated@@41 ($generated@@40 $generated@@42))))
 :pattern ( ($generated@@33 $generated@@41))
)))
(assert  (=> (<= 1 $generated@@43) (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> (or ($generated@@46 ($generated@@28 $generated@@23 $generated@@49) ($generated@@28 $generated@@23 $generated@@50)) (and (< 1 $generated@@43) (and ($generated@@22 $generated@@23 $generated@@49 $generated@@24) ($generated@@22 $generated@@23 $generated@@50 $generated@@24)))) (and (=> (not ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@31 ($generated@@28 $generated@@23 $generated@@49)))))) (let (($generated@@51 ($generated@@28 $generated@@23 ($generated@@47 ($generated@@28 $generated@@23 $generated@@49)))))
($generated@@46 $generated@@51 ($generated@@28 $generated@@23 $generated@@50)))) (= ($generated@@44 ($generated@@45 $generated@@48) ($generated@@28 $generated@@23 $generated@@49) ($generated@@28 $generated@@23 $generated@@50)) (ite ($generated@@31 ($generated@@28 $generated@@23 $generated@@49)) $generated@@50 (let (($generated@@52 ($generated@@28 $generated@@23 ($generated@@47 ($generated@@28 $generated@@23 $generated@@49)))))
($generated@@28 $generated@@23 ($generated@@40 ($generated@@28 $generated@@23 ($generated@@44 ($generated@@45 $generated@@48) $generated@@52 ($generated@@28 $generated@@23 $generated@@50))))))))))
 :weight 3
 :pattern ( ($generated@@44 ($generated@@45 $generated@@48) ($generated@@28 $generated@@23 $generated@@49) ($generated@@28 $generated@@23 $generated@@50)))
))))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@40 $generated@@53) $generated@@24) ($generated@@22 $generated@@23 $generated@@53 $generated@@24))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@40 $generated@@53) $generated@@24))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (and ($generated@@33 $generated@@54) ($generated@@33 $generated@@55)) (= ($generated@@25 $generated@@54 $generated@@55) ($generated@@25 ($generated@@47 $generated@@54) ($generated@@47 $generated@@55))))
 :pattern ( ($generated@@25 $generated@@54 $generated@@55) ($generated@@33 $generated@@54))
 :pattern ( ($generated@@25 $generated@@54 $generated@@55) ($generated@@33 $generated@@55))
)))
(assert  (=> (<= 1 $generated@@43) (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (=> (or ($generated@@46 $generated@@57 $generated@@58) (and (< 1 $generated@@43) (and ($generated@@22 $generated@@23 $generated@@57 $generated@@24) ($generated@@22 $generated@@23 $generated@@58 $generated@@24)))) ($generated@@22 $generated@@23 ($generated@@44 $generated@@56 $generated@@57 $generated@@58) $generated@@24))
 :pattern ( ($generated@@44 $generated@@56 $generated@@57 $generated@@58))
))))
(assert  (=> (<= 1 $generated@@43) (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> (or ($generated@@60 $generated@@62 $generated@@63) (and (< 1 $generated@@43) (and ($generated@@22 $generated@@23 $generated@@62 $generated@@24) ($generated@@22 $generated@@23 $generated@@63 $generated@@24)))) ($generated@@22 $generated@@23 ($generated@@59 $generated@@61 $generated@@62 $generated@@63) $generated@@24))
 :pattern ( ($generated@@59 $generated@@61 $generated@@62 $generated@@63))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@44 ($generated@@45 $generated@@64) $generated@@65 $generated@@66) ($generated@@44 $generated@@64 $generated@@65 $generated@@66))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@64) $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@59 ($generated@@45 $generated@@67) $generated@@68 $generated@@69) ($generated@@59 $generated@@67 $generated@@68 $generated@@69))
 :pattern ( ($generated@@59 ($generated@@45 $generated@@67) $generated@@68 $generated@@69))
)))
(assert  (=> (<= 1 $generated@@43) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> (or ($generated@@60 ($generated@@28 $generated@@23 $generated@@71) ($generated@@28 $generated@@23 $generated@@72)) (and (< 1 $generated@@43) (and ($generated@@22 $generated@@23 $generated@@71 $generated@@24) ($generated@@22 $generated@@23 $generated@@72 $generated@@24)))) (and (=> (not ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@31 ($generated@@28 $generated@@23 $generated@@71)))))) (let (($generated@@73 ($generated@@28 $generated@@23 ($generated@@47 ($generated@@28 $generated@@23 $generated@@71)))))
 (=> (not ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@31 ($generated@@28 $generated@@23 $generated@@72)))))) (let (($generated@@74 ($generated@@28 $generated@@23 ($generated@@47 ($generated@@28 $generated@@23 $generated@@72)))))
($generated@@60 $generated@@73 $generated@@74))))) (= ($generated@@59 ($generated@@45 $generated@@70) ($generated@@28 $generated@@23 $generated@@71) ($generated@@28 $generated@@23 $generated@@72)) (ite ($generated@@31 ($generated@@28 $generated@@23 $generated@@71)) $generated@@21 (let (($generated@@75 ($generated@@28 $generated@@23 ($generated@@47 ($generated@@28 $generated@@23 $generated@@71)))))
(ite ($generated@@31 ($generated@@28 $generated@@23 $generated@@72)) $generated@@71 (let (($generated@@76 ($generated@@28 $generated@@23 ($generated@@47 ($generated@@28 $generated@@23 $generated@@72)))))
($generated@@28 $generated@@23 ($generated@@59 ($generated@@45 $generated@@70) $generated@@75 $generated@@76)))))))))
 :weight 3
 :pattern ( ($generated@@59 ($generated@@45 $generated@@70) ($generated@@28 $generated@@23 $generated@@71) ($generated@@28 $generated@@23 $generated@@72)))
))))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@77 $generated@@78) (or ($generated@@31 $generated@@78) ($generated@@33 $generated@@78)))
 :pattern ( ($generated@@77 $generated@@78))
)))
(assert  (=> (<= 1 $generated@@43) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (=> (or ($generated@@60 $generated@@80 $generated@@81) (and (< 1 $generated@@43) (and ($generated@@22 $generated@@23 $generated@@80 $generated@@24) ($generated@@22 $generated@@23 $generated@@81 $generated@@24)))) (and (=> (not ($generated@@31 $generated@@80)) (let (($generated@@82 ($generated@@47 $generated@@80)))
 (=> (not ($generated@@31 $generated@@81)) (let (($generated@@83 ($generated@@47 $generated@@81)))
($generated@@60 $generated@@82 $generated@@83))))) (= ($generated@@59 ($generated@@45 $generated@@79) $generated@@80 $generated@@81) (ite ($generated@@31 $generated@@80) $generated@@21 (let (($generated@@84 ($generated@@47 $generated@@80)))
(ite ($generated@@31 $generated@@81) $generated@@80 (let (($generated@@85 ($generated@@47 $generated@@81)))
($generated@@59 $generated@@79 $generated@@84 $generated@@85))))))))
 :pattern ( ($generated@@59 ($generated@@45 $generated@@79) $generated@@80 $generated@@81))
))))
(assert (forall (($generated@@86 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@86 $generated@@24) (or ($generated@@31 $generated@@86) ($generated@@33 $generated@@86)))
 :pattern ( ($generated@@33 $generated@@86) ($generated@@22 $generated@@23 $generated@@86 $generated@@24))
 :pattern ( ($generated@@31 $generated@@86) ($generated@@22 $generated@@23 $generated@@86 $generated@@24))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (and ($generated@@31 $generated@@87) ($generated@@31 $generated@@88)) ($generated@@25 $generated@@87 $generated@@88))
 :pattern ( ($generated@@25 $generated@@87 $generated@@88) ($generated@@31 $generated@@87))
 :pattern ( ($generated@@25 $generated@@87 $generated@@88) ($generated@@31 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@20 ($generated@@40 $generated@@89)) $generated@@2)
 :pattern ( ($generated@@40 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@47 ($generated@@40 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@40 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@35 $generated@@92 ($generated@@36 $generated@@92 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@36 $generated@@92 $generated@@91))
)))
(assert  (=> (<= 1 $generated@@43) (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (=> (or ($generated@@46 $generated@@94 $generated@@95) (and (< 1 $generated@@43) (and ($generated@@22 $generated@@23 $generated@@94 $generated@@24) ($generated@@22 $generated@@23 $generated@@95 $generated@@24)))) (and (=> (not ($generated@@31 $generated@@94)) (let (($generated@@96 ($generated@@47 $generated@@94)))
($generated@@46 $generated@@96 $generated@@95))) (= ($generated@@44 ($generated@@45 $generated@@93) $generated@@94 $generated@@95) (ite ($generated@@31 $generated@@94) $generated@@95 (let (($generated@@97 ($generated@@47 $generated@@94)))
($generated@@40 ($generated@@44 $generated@@93 $generated@@97 $generated@@95)))))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@93) $generated@@94 $generated@@95))
))))
(assert (forall (($generated@@99 T@U) ) (! (< ($generated@@98 $generated@@99) ($generated@@98 ($generated@@40 $generated@@99)))
 :pattern ( ($generated@@40 $generated@@99))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@100 $generated@@111 $generated@@112 $generated@@113 ($generated@@107 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@116 $generated@@117) $generated@@114)
 :weight 0
)) (and (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@100 $generated@@118 $generated@@119 $generated@@120 ($generated@@107 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@125 $generated@@126) ($generated@@100 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@125 $generated@@126)))
 :weight 0
)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@133 $generated@@135) (= ($generated@@100 $generated@@127 $generated@@128 $generated@@129 ($generated@@107 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@133 $generated@@130) $generated@@134 $generated@@135) ($generated@@100 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@134 $generated@@135)))
 :weight 0
)))) (= ($generated@@4 $generated@@101) 4)) (= ($generated@@4 $generated@@102) 5)) (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@104 $generated@@136 $generated@@137 ($generated@@108 $generated@@136 $generated@@137 $generated@@139 $generated@@140 $generated@@138) $generated@@140) $generated@@138)
 :weight 0
))) (forall (($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (!  (or (= $generated@@145 $generated@@146) (= ($generated@@104 $generated@@141 $generated@@142 ($generated@@108 $generated@@141 $generated@@142 $generated@@144 $generated@@145 $generated@@143) $generated@@146) ($generated@@104 $generated@@141 $generated@@142 $generated@@144 $generated@@146)))
 :weight 0
))) (= ($generated@@4 $generated@@105) 6)) (forall (($generated@@147 T@T) ($generated@@148 T@T) ) (= ($generated@@4 ($generated@@106 $generated@@147 $generated@@148)) 7))) (forall (($generated@@149 T@T) ($generated@@150 T@T) ) (! (= ($generated@@109 ($generated@@106 $generated@@149 $generated@@150)) $generated@@149)
 :pattern ( ($generated@@106 $generated@@149 $generated@@150))
))) (forall (($generated@@151 T@T) ($generated@@152 T@T) ) (! (= ($generated@@110 ($generated@@106 $generated@@151 $generated@@152)) $generated@@152)
 :pattern ( ($generated@@106 $generated@@151 $generated@@152))
))))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 Bool) ($generated@@157 T@U) ($generated@@158 T@U) ) (! (= ($generated@@9 ($generated@@100 $generated@@101 $generated@@102 $generated@@5 ($generated@@103 $generated@@153 $generated@@154 $generated@@155 $generated@@156) $generated@@157 $generated@@158))  (=> (and (or (not (= $generated@@157 $generated@@153)) (not true)) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@104 $generated@@102 $generated@@105 ($generated@@104 $generated@@101 ($generated@@106 $generated@@102 $generated@@105) $generated@@154 $generated@@157) $generated@@155)))) $generated@@156))
 :pattern ( ($generated@@100 $generated@@101 $generated@@102 $generated@@5 ($generated@@103 $generated@@153 $generated@@154 $generated@@155 $generated@@156) $generated@@157 $generated@@158))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> (and ($generated@@160 $generated@@162) ($generated@@22 $generated@@23 $generated@@161 $generated@@24)) ($generated@@159 $generated@@23 $generated@@161 $generated@@24 $generated@@162))
 :pattern ( ($generated@@159 $generated@@23 $generated@@161 $generated@@24 $generated@@162))
)))
(assert (= ($generated@@163 $generated@@24) $generated@@0))
(assert (= ($generated@@164 $generated@@24) $generated@@3))
(assert (= $generated@@21 ($generated@@28 $generated@@23 $generated@@21)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (!  (=> (and ($generated@@160 $generated@@166) (and ($generated@@33 $generated@@165) ($generated@@159 $generated@@23 $generated@@165 $generated@@24 $generated@@166))) ($generated@@159 $generated@@23 ($generated@@47 $generated@@165) $generated@@24 $generated@@166))
 :pattern ( ($generated@@159 $generated@@23 ($generated@@47 $generated@@165) $generated@@24 $generated@@166))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@40 ($generated@@28 $generated@@23 $generated@@167)) ($generated@@28 $generated@@23 ($generated@@40 $generated@@167)))
 :pattern ( ($generated@@40 ($generated@@28 $generated@@23 $generated@@167)))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@T) ) (! (= ($generated@@36 $generated@@169 ($generated@@28 $generated@@169 $generated@@168)) ($generated@@28 $generated@@105 ($generated@@36 $generated@@169 $generated@@168)))
 :pattern ( ($generated@@36 $generated@@169 ($generated@@28 $generated@@169 $generated@@168)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@180  (=> (forall (($generated@@181 T@U) ($generated@@182 T@U) ) (!  (=> (and ($generated@@22 $generated@@23 $generated@@181 $generated@@24) ($generated@@22 $generated@@23 $generated@@182 $generated@@24)) (and (and ($generated@@77 ($generated@@44 ($generated@@45 $generated@@170) $generated@@181 $generated@@182)) ($generated@@77 ($generated@@44 ($generated@@45 $generated@@170) $generated@@182 $generated@@181))) (and ($generated@@46 $generated@@181 $generated@@182) ($generated@@46 $generated@@182 $generated@@181))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@170) $generated@@182 $generated@@181))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@170) $generated@@181 $generated@@182))
)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@183 T@U) ($generated@@184 T@U) ) (!  (=> (and ($generated@@22 $generated@@23 $generated@@183 $generated@@24) ($generated@@22 $generated@@23 $generated@@184 $generated@@24)) ($generated@@25 ($generated@@44 ($generated@@45 ($generated@@45 $generated@@170)) $generated@@183 $generated@@184) ($generated@@44 ($generated@@45 ($generated@@45 $generated@@170)) $generated@@184 $generated@@183)))
 :pattern ( ($generated@@44 ($generated@@45 ($generated@@45 $generated@@170)) $generated@@184 $generated@@183))
 :pattern ( ($generated@@44 ($generated@@45 ($generated@@45 $generated@@170)) $generated@@183 $generated@@184))
))) (=> (and (forall (($generated@@185 T@U) ($generated@@186 T@U) ) (!  (=> (and ($generated@@22 $generated@@23 $generated@@185 $generated@@24) ($generated@@22 $generated@@23 $generated@@186 $generated@@24)) ($generated@@25 ($generated@@44 ($generated@@45 $generated@@170) $generated@@185 $generated@@186) ($generated@@44 ($generated@@45 $generated@@170) $generated@@186 $generated@@185)))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@170) $generated@@186 $generated@@185))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@170) $generated@@185 $generated@@186))
)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@187 T@U) ($generated@@188 T@U) ) (!  (=> (and ($generated@@22 $generated@@23 $generated@@187 $generated@@24) ($generated@@22 $generated@@23 $generated@@188 $generated@@24)) ($generated@@25 ($generated@@59 ($generated@@45 ($generated@@45 $generated@@170)) ($generated@@44 ($generated@@45 ($generated@@45 $generated@@170)) $generated@@187 $generated@@188) $generated@@188) $generated@@187))
 :pattern ( ($generated@@44 ($generated@@45 ($generated@@45 $generated@@170)) $generated@@187 $generated@@188))
)))))))
(let (($generated@@189  (=> (and (not (and (and ($generated@@22 $generated@@23 $generated@@171 $generated@@24) ($generated@@159 $generated@@23 $generated@@171 $generated@@24 $generated@@172)) (and ($generated@@22 $generated@@23 $generated@@173 $generated@@24) ($generated@@159 $generated@@23 $generated@@173 $generated@@24 $generated@@172)))) (= (ControlFlow 0 5) 2)) $generated@@180)))
(let (($generated@@190  (=> (and (and (and (and (and ($generated@@22 $generated@@23 $generated@@171 $generated@@24) ($generated@@159 $generated@@23 $generated@@171 $generated@@24 $generated@@172)) (and ($generated@@22 $generated@@23 $generated@@173 $generated@@24) ($generated@@159 $generated@@23 $generated@@173 $generated@@24 $generated@@172))) ($generated@@159 $generated@@23 $generated@@171 $generated@@24 $generated@@172)) (and ($generated@@159 $generated@@23 $generated@@173 $generated@@24 $generated@@172) ($generated@@46 $generated@@171 $generated@@173))) (and (and ($generated@@159 $generated@@23 $generated@@173 $generated@@24 $generated@@172) ($generated@@159 $generated@@23 $generated@@171 $generated@@24 $generated@@172)) (and ($generated@@46 $generated@@173 $generated@@171) (= (ControlFlow 0 4) 2)))) $generated@@180)))
(let (($generated@@191  (=> (forall (($generated@@192 T@U) ($generated@@193 T@U) )  (=> (and ($generated@@22 $generated@@23 $generated@@192 $generated@@24) ($generated@@22 $generated@@23 $generated@@193 $generated@@24)) (and (and ($generated@@77 ($generated@@59 ($generated@@45 $generated@@170) ($generated@@44 ($generated@@45 $generated@@170) $generated@@193 $generated@@192) $generated@@193)) ($generated@@77 $generated@@192)) (and ($generated@@46 $generated@@193 $generated@@192) ($generated@@60 ($generated@@44 ($generated@@45 $generated@@170) $generated@@193 $generated@@192) $generated@@193))))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (forall (($generated@@194 T@U) ($generated@@195 T@U) )  (=> (and ($generated@@22 $generated@@23 $generated@@194 $generated@@24) ($generated@@22 $generated@@23 $generated@@195 $generated@@24)) ($generated@@25 ($generated@@59 ($generated@@45 ($generated@@45 $generated@@170)) ($generated@@44 ($generated@@45 ($generated@@45 $generated@@170)) $generated@@195 $generated@@194) $generated@@195) $generated@@194)))) (=> (forall (($generated@@196 T@U) ($generated@@197 T@U) )  (=> (and ($generated@@22 $generated@@23 $generated@@196 $generated@@24) ($generated@@22 $generated@@23 $generated@@197 $generated@@24)) ($generated@@25 ($generated@@59 ($generated@@45 $generated@@170) ($generated@@44 ($generated@@45 $generated@@170) $generated@@197 $generated@@196) $generated@@197) $generated@@196))) (and (=> (= (ControlFlow 0 6) 4) $generated@@190) (=> (= (ControlFlow 0 6) 5) $generated@@189)))))))
(let (($generated@@198  (=> (and (not (and (and ($generated@@22 $generated@@23 $generated@@174 $generated@@24) ($generated@@159 $generated@@23 $generated@@174 $generated@@24 $generated@@172)) (and ($generated@@22 $generated@@23 $generated@@175 $generated@@24) ($generated@@159 $generated@@23 $generated@@175 $generated@@24 $generated@@172)))) (= (ControlFlow 0 9) 6)) $generated@@191)))
(let (($generated@@199  (=> (and (and ($generated@@22 $generated@@23 $generated@@174 $generated@@24) ($generated@@159 $generated@@23 $generated@@174 $generated@@24 $generated@@172)) (and ($generated@@22 $generated@@23 $generated@@175 $generated@@24) ($generated@@159 $generated@@23 $generated@@175 $generated@@24 $generated@@172))) (=> (and (and (and ($generated@@159 $generated@@23 $generated@@175 $generated@@24 $generated@@172) ($generated@@159 $generated@@23 $generated@@174 $generated@@24 $generated@@172)) (and ($generated@@46 $generated@@175 $generated@@174) (= $generated@@176 ($generated@@44 ($generated@@45 $generated@@170) $generated@@175 $generated@@174)))) (and (and ($generated@@159 $generated@@23 $generated@@176 $generated@@24 $generated@@172) ($generated@@159 $generated@@23 $generated@@175 $generated@@24 $generated@@172)) (and ($generated@@60 ($generated@@44 ($generated@@45 $generated@@170) $generated@@175 $generated@@174) $generated@@175) (= (ControlFlow 0 8) 6)))) $generated@@191))))
(let (($generated@@200  (=> (= $generated@@177 ($generated@@103 $generated@@178 $generated@@172 $generated false)) (and (=> (= (ControlFlow 0 10) 8) $generated@@199) (=> (= (ControlFlow 0 10) 9) $generated@@198)))))
(let (($generated@@201  (=> (and (and ($generated@@160 $generated@@172) ($generated@@179 $generated@@172)) (and (= 2 $generated@@43) (= (ControlFlow 0 11) 10))) $generated@@200)))
$generated@@201)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 7))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
