(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@31 () Int)
(declare-fun $generated@@32 (T@U T@U T@U) T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 (T@U T@U) Bool)
(declare-fun $generated@@53 (T@U T@U) Bool)
(declare-fun $generated@@59 (T@U) Bool)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@64 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@94 (T@U) T@U)
(declare-fun $generated@@111 (T@U) Int)
(declare-fun $generated@@117 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@118 () T@T)
(declare-fun $generated@@119 () T@T)
(declare-fun $generated@@120 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@121 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@122 () T@T)
(declare-fun $generated@@123 (T@T T@T) T@T)
(declare-fun $generated@@124 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@125 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@T) T@T)
(declare-fun $generated@@127 (T@T) T@T)
(declare-fun $generated@@176 (T@U) T@U)
(declare-fun $generated@@177 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@8 $generated@@25) 3))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@26 $generated@@29 $generated@@30) $generated@@27)  (and ($generated@@24 $generated@@25 $generated@@29 $generated@@28) ($generated@@24 $generated@@25 $generated@@30 $generated@@27)))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@26 $generated@@29 $generated@@30) $generated@@27))
)))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (=> (or ($generated@@35 ($generated@@34 $generated@@25 $generated@@42) ($generated@@34 $generated@@25 $generated@@43)) (and (< 2 $generated@@31) (and ($generated@@24 $generated@@25 $generated@@42 $generated@@28) ($generated@@24 $generated@@25 $generated@@43 $generated@@27)))) (and (=> (not ($generated@@13 ($generated@@34 $generated@@9 ($generated@@12 ($generated@@36 ($generated@@34 $generated@@25 $generated@@42)))))) (let (($generated@@44 ($generated@@34 $generated@@25 ($generated@@37 ($generated@@34 $generated@@25 $generated@@42)))))
 (=> (not ($generated@@13 ($generated@@34 $generated@@9 ($generated@@12 ($generated@@38 ($generated@@34 $generated@@25 $generated@@43)))))) (let (($generated@@45 ($generated@@34 $generated@@25 ($generated@@39 ($generated@@34 $generated@@25 $generated@@43)))))
($generated@@35 $generated@@44 $generated@@45))))) (= ($generated@@32 ($generated@@33 $generated@@41) ($generated@@34 $generated@@25 $generated@@42) ($generated@@34 $generated@@25 $generated@@43)) (ite ($generated@@36 ($generated@@34 $generated@@25 $generated@@42)) $generated@@43 (let (($generated@@46 ($generated@@34 $generated@@25 ($generated@@37 ($generated@@34 $generated@@25 $generated@@42)))))
(ite ($generated@@38 ($generated@@34 $generated@@25 $generated@@43)) $generated@@40 (let (($generated@@47 ($generated@@34 $generated@@25 ($generated@@39 ($generated@@34 $generated@@25 $generated@@43)))))
($generated@@34 $generated@@25 ($generated@@32 ($generated@@33 $generated@@41) $generated@@46 $generated@@47)))))))))
 :weight 3
 :pattern ( ($generated@@32 ($generated@@33 $generated@@41) ($generated@@34 $generated@@25 $generated@@42) ($generated@@34 $generated@@25 $generated@@43)))
))))
(assert (= ($generated@@48 $generated@@49) $generated@@2))
(assert (= ($generated@@48 $generated@@40) $generated@@4))
(assert ($generated@@24 $generated@@25 $generated@@49 $generated@@28))
(assert ($generated@@24 $generated@@25 $generated@@40 $generated@@27))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@50 $generated@@51 $generated@@52) (= $generated@@51 $generated@@52))
 :pattern ( ($generated@@50 $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@53 $generated@@54 $generated@@55) (= $generated@@54 $generated@@55))
 :pattern ( ($generated@@53 $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@34 $generated@@57 $generated@@56) $generated@@56)
 :pattern ( ($generated@@34 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@36 $generated@@58) (= ($generated@@48 $generated@@58) $generated@@2))
 :pattern ( ($generated@@36 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@59 $generated@@60) (= ($generated@@48 $generated@@60) $generated@@3))
 :pattern ( ($generated@@59 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@38 $generated@@61) (= ($generated@@48 $generated@@61) $generated@@4))
 :pattern ( ($generated@@38 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@62 $generated@@63) (= ($generated@@48 $generated@@63) $generated@@5))
 :pattern ( ($generated@@62 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@65 $generated@@67 ($generated@@64 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@64 $generated@@67 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ) (!  (=> ($generated@@62 $generated@@68) (exists (($generated@@69 T@U) ($generated@@70 T@U) ) (= $generated@@68 ($generated@@26 $generated@@69 $generated@@70))))
 :pattern ( ($generated@@62 $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@36 $generated@@71) (= $generated@@71 $generated@@49))
 :pattern ( ($generated@@36 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> ($generated@@38 $generated@@72) (= $generated@@72 $generated@@40))
 :pattern ( ($generated@@38 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@59 $generated@@74) (exists (($generated@@75 T@U) ) (= $generated@@74 ($generated@@73 $generated@@75))))
 :pattern ( ($generated@@59 $generated@@74))
)))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (=> (or ($generated@@35 $generated@@77 $generated@@78) (and (< 2 $generated@@31) (and ($generated@@24 $generated@@25 $generated@@77 $generated@@28) ($generated@@24 $generated@@25 $generated@@78 $generated@@27)))) (and (=> (not ($generated@@36 $generated@@77)) (let (($generated@@79 ($generated@@37 $generated@@77)))
 (=> (not ($generated@@38 $generated@@78)) (let (($generated@@80 ($generated@@39 $generated@@78)))
($generated@@35 $generated@@79 $generated@@80))))) (= ($generated@@32 ($generated@@33 $generated@@76) $generated@@77 $generated@@78) (ite ($generated@@36 $generated@@77) $generated@@78 (let (($generated@@81 ($generated@@37 $generated@@77)))
(ite ($generated@@38 $generated@@78) $generated@@40 (let (($generated@@82 ($generated@@39 $generated@@78)))
($generated@@32 $generated@@76 $generated@@81 $generated@@82))))))))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@76) $generated@@77 $generated@@78))
))))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@73 $generated@@83) $generated@@28) ($generated@@24 $generated@@25 $generated@@83 $generated@@28))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@73 $generated@@83) $generated@@28))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> (and ($generated@@59 $generated@@84) ($generated@@59 $generated@@85)) (= ($generated@@50 $generated@@84 $generated@@85) ($generated@@50 ($generated@@37 $generated@@84) ($generated@@37 $generated@@85))))
 :pattern ( ($generated@@50 $generated@@84 $generated@@85) ($generated@@59 $generated@@84))
 :pattern ( ($generated@@50 $generated@@84 $generated@@85) ($generated@@59 $generated@@85))
)))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (or ($generated@@35 $generated@@87 $generated@@88) (and (< 2 $generated@@31) (and ($generated@@24 $generated@@25 $generated@@87 $generated@@28) ($generated@@24 $generated@@25 $generated@@88 $generated@@27)))) ($generated@@24 $generated@@25 ($generated@@32 $generated@@86 $generated@@87 $generated@@88) $generated@@27))
 :pattern ( ($generated@@32 $generated@@86 $generated@@87 $generated@@88))
))))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@32 ($generated@@33 $generated@@89) $generated@@90 $generated@@91) ($generated@@32 $generated@@89 $generated@@90 $generated@@91))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@89) $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@92 $generated@@28) (or ($generated@@36 $generated@@92) ($generated@@59 $generated@@92)))
 :pattern ( ($generated@@59 $generated@@92) ($generated@@24 $generated@@25 $generated@@92 $generated@@28))
 :pattern ( ($generated@@36 $generated@@92) ($generated@@24 $generated@@25 $generated@@92 $generated@@28))
)))
(assert (forall (($generated@@93 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@93 $generated@@27) (or ($generated@@38 $generated@@93) ($generated@@62 $generated@@93)))
 :pattern ( ($generated@@62 $generated@@93) ($generated@@24 $generated@@25 $generated@@93 $generated@@27))
 :pattern ( ($generated@@38 $generated@@93) ($generated@@24 $generated@@25 $generated@@93 $generated@@27))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ) (!  (=> (and ($generated@@62 $generated@@95) ($generated@@62 $generated@@96)) (= ($generated@@53 $generated@@95 $generated@@96)  (and ($generated@@50 ($generated@@94 $generated@@95) ($generated@@94 $generated@@96)) ($generated@@53 ($generated@@39 $generated@@95) ($generated@@39 $generated@@96)))))
 :pattern ( ($generated@@53 $generated@@95 $generated@@96) ($generated@@62 $generated@@95))
 :pattern ( ($generated@@53 $generated@@95 $generated@@96) ($generated@@62 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ) (!  (=> (and ($generated@@36 $generated@@97) ($generated@@36 $generated@@98)) ($generated@@50 $generated@@97 $generated@@98))
 :pattern ( ($generated@@50 $generated@@97 $generated@@98) ($generated@@36 $generated@@97))
 :pattern ( ($generated@@50 $generated@@97 $generated@@98) ($generated@@36 $generated@@98))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (!  (=> (and ($generated@@38 $generated@@99) ($generated@@38 $generated@@100)) ($generated@@53 $generated@@99 $generated@@100))
 :pattern ( ($generated@@53 $generated@@99 $generated@@100) ($generated@@38 $generated@@99))
 :pattern ( ($generated@@53 $generated@@99 $generated@@100) ($generated@@38 $generated@@100))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@48 ($generated@@26 $generated@@101 $generated@@102)) $generated@@5)
 :pattern ( ($generated@@26 $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@94 ($generated@@26 $generated@@103 $generated@@104)) $generated@@103)
 :pattern ( ($generated@@26 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@39 ($generated@@26 $generated@@105 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@26 $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ) (! (= ($generated@@48 ($generated@@73 $generated@@107)) $generated@@3)
 :pattern ( ($generated@@73 $generated@@107))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@37 ($generated@@73 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@73 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@64 $generated@@110 ($generated@@65 $generated@@110 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@65 $generated@@110 $generated@@109))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (! (< ($generated@@111 $generated@@112) ($generated@@111 ($generated@@26 $generated@@112 $generated@@113)))
 :pattern ( ($generated@@26 $generated@@112 $generated@@113))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ) (! (< ($generated@@111 $generated@@115) ($generated@@111 ($generated@@26 $generated@@114 $generated@@115)))
 :pattern ( ($generated@@26 $generated@@114 $generated@@115))
)))
(assert (forall (($generated@@116 T@U) ) (! (< ($generated@@111 $generated@@116) ($generated@@111 ($generated@@73 $generated@@116)))
 :pattern ( ($generated@@73 $generated@@116))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@117 $generated@@128 $generated@@129 $generated@@130 ($generated@@124 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@134 $generated@@131) $generated@@133 $generated@@134) $generated@@131)
 :weight 0
)) (and (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (!  (or (= $generated@@140 $generated@@142) (= ($generated@@117 $generated@@135 $generated@@136 $generated@@137 ($generated@@124 $generated@@135 $generated@@136 $generated@@137 $generated@@139 $generated@@140 $generated@@141 $generated@@138) $generated@@142 $generated@@143) ($generated@@117 $generated@@135 $generated@@136 $generated@@137 $generated@@139 $generated@@142 $generated@@143)))
 :weight 0
)) (forall (($generated@@144 T@T) ($generated@@145 T@T) ($generated@@146 T@T) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (!  (or (= $generated@@150 $generated@@152) (= ($generated@@117 $generated@@144 $generated@@145 $generated@@146 ($generated@@124 $generated@@144 $generated@@145 $generated@@146 $generated@@148 $generated@@149 $generated@@150 $generated@@147) $generated@@151 $generated@@152) ($generated@@117 $generated@@144 $generated@@145 $generated@@146 $generated@@148 $generated@@151 $generated@@152)))
 :weight 0
)))) (= ($generated@@8 $generated@@118) 4)) (= ($generated@@8 $generated@@119) 5)) (forall (($generated@@153 T@T) ($generated@@154 T@T) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ) (! (= ($generated@@121 $generated@@153 $generated@@154 ($generated@@125 $generated@@153 $generated@@154 $generated@@156 $generated@@157 $generated@@155) $generated@@157) $generated@@155)
 :weight 0
))) (forall (($generated@@158 T@T) ($generated@@159 T@T) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ) (!  (or (= $generated@@162 $generated@@163) (= ($generated@@121 $generated@@158 $generated@@159 ($generated@@125 $generated@@158 $generated@@159 $generated@@161 $generated@@162 $generated@@160) $generated@@163) ($generated@@121 $generated@@158 $generated@@159 $generated@@161 $generated@@163)))
 :weight 0
))) (= ($generated@@8 $generated@@122) 6)) (forall (($generated@@164 T@T) ($generated@@165 T@T) ) (= ($generated@@8 ($generated@@123 $generated@@164 $generated@@165)) 7))) (forall (($generated@@166 T@T) ($generated@@167 T@T) ) (! (= ($generated@@126 ($generated@@123 $generated@@166 $generated@@167)) $generated@@166)
 :pattern ( ($generated@@123 $generated@@166 $generated@@167))
))) (forall (($generated@@168 T@T) ($generated@@169 T@T) ) (! (= ($generated@@127 ($generated@@123 $generated@@168 $generated@@169)) $generated@@169)
 :pattern ( ($generated@@123 $generated@@168 $generated@@169))
))))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ($generated@@172 T@U) ($generated@@173 Bool) ($generated@@174 T@U) ($generated@@175 T@U) ) (! (= ($generated@@13 ($generated@@117 $generated@@118 $generated@@119 $generated@@9 ($generated@@120 $generated@@170 $generated@@171 $generated@@172 $generated@@173) $generated@@174 $generated@@175))  (=> (and (or (not (= $generated@@174 $generated@@170)) (not true)) ($generated@@13 ($generated@@64 $generated@@9 ($generated@@121 $generated@@119 $generated@@122 ($generated@@121 $generated@@118 ($generated@@123 $generated@@119 $generated@@122) $generated@@171 $generated@@174) $generated@@172)))) $generated@@173))
 :pattern ( ($generated@@117 $generated@@118 $generated@@119 $generated@@9 ($generated@@120 $generated@@170 $generated@@171 $generated@@172 $generated@@173) $generated@@174 $generated@@175))
)))
(assert (= ($generated@@176 $generated@@28) $generated@@0))
(assert (= ($generated@@177 $generated@@28) $generated@@6))
(assert (= ($generated@@176 $generated@@27) $generated@@1))
(assert (= ($generated@@177 $generated@@27) $generated@@7))
(assert (= $generated@@49 ($generated@@34 $generated@@25 $generated@@49)))
(assert (= $generated@@40 ($generated@@34 $generated@@25 $generated@@40)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (! (= ($generated@@26 ($generated@@34 $generated@@25 $generated@@178) ($generated@@34 $generated@@25 $generated@@179)) ($generated@@34 $generated@@25 ($generated@@26 $generated@@178 $generated@@179)))
 :pattern ( ($generated@@26 ($generated@@34 $generated@@25 $generated@@178) ($generated@@34 $generated@@25 $generated@@179)))
)))
(assert (forall (($generated@@180 T@U) ) (! (= ($generated@@73 ($generated@@34 $generated@@25 $generated@@180)) ($generated@@34 $generated@@25 ($generated@@73 $generated@@180)))
 :pattern ( ($generated@@73 ($generated@@34 $generated@@25 $generated@@180)))
)))
(assert (forall (($generated@@181 T@U) ($generated@@182 T@T) ) (! (= ($generated@@65 $generated@@182 ($generated@@34 $generated@@182 $generated@@181)) ($generated@@34 $generated@@122 ($generated@@65 $generated@@182 $generated@@181)))
 :pattern ( ($generated@@65 $generated@@182 ($generated@@34 $generated@@182 $generated@@181)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 (T@U) Bool)
(declare-fun $generated@@188 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@189  (=> (and (= $generated@@183 ($generated@@120 $generated@@184 $generated@@185 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@190 T@U) ($generated@@191 T@U) ($generated@@192 T@U) ) (!  (=> (and (and ($generated@@24 $generated@@25 $generated@@190 $generated@@28) ($generated@@24 $generated@@25 $generated@@191 $generated@@28)) ($generated@@24 $generated@@25 $generated@@192 $generated@@27)) ($generated@@53 ($generated@@32 ($generated@@33 ($generated@@33 $generated@@186)) ($generated@@73 $generated@@190) ($generated@@26 $generated@@191 $generated@@192)) ($generated@@32 ($generated@@33 ($generated@@33 $generated@@186)) $generated@@190 $generated@@192)))
 :pattern ( ($generated@@26 $generated@@191 $generated@@192) ($generated@@73 $generated@@190))
)))))
(let (($generated@@193  (=> (and (and ($generated@@187 $generated@@185) ($generated@@188 $generated@@185)) (and (= 3 $generated@@31) (= (ControlFlow 0 3) 2))) $generated@@189)))
$generated@@193)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
