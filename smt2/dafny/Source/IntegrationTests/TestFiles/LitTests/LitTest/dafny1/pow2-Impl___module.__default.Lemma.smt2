(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U Int) Int)
(declare-fun $generated@@1 (T@U) T@U)
(declare-fun $generated@@2 (Int) Int)
(declare-fun $generated@@3 (Int) Bool)
(declare-fun $generated@@4 (Int Int) Int)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@24 (Int) Bool)
(declare-fun $generated@@26 (Int) Bool)
(declare-fun $generated@@27 (Int) Bool)
(declare-fun $generated@@28 (Int Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@T T@T) T@T)
(declare-fun $generated@@55 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@21 T@U) ($generated@@22 Int) ) (!  (=> (or ($generated@@3 ($generated@@2 $generated@@22)) (and (< 0 $generated) (<= ($generated@@2 0) ($generated@@2 $generated@@22)))) (and (=> (or (not (= ($generated@@2 $generated@@22) ($generated@@2 0))) (not true)) ($generated@@3 ($generated@@2 (- $generated@@22 1)))) (= ($generated@@0 ($generated@@1 $generated@@21) ($generated@@2 $generated@@22)) (ite (= ($generated@@2 $generated@@22) ($generated@@2 0)) 1 ($generated@@4 ($generated@@2 2) ($generated@@2 ($generated@@0 ($generated@@1 $generated@@21) ($generated@@2 (- $generated@@22 1)))))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@21) ($generated@@2 $generated@@22)))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@25 Int) ) (!  (=> (or ($generated@@24 ($generated@@2 $generated@@25)) (< 0 $generated)) (= ($generated@@23 ($generated@@2 $generated@@25)) ($generated@@2 ($generated@@4 ($generated@@2 $generated@@25) ($generated@@2 $generated@@25)))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@2 $generated@@25)))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@29 Int) ) (!  (=> (or ($generated@@27 $generated@@29) (and (< 0 $generated) (<= ($generated@@2 0) $generated@@29))) (= ($generated@@26 $generated@@29) (= ($generated@@4 ($generated@@28 $generated@@29 ($generated@@2 2)) ($generated@@2 2)) $generated@@29)))
 :pattern ( ($generated@@26 $generated@@29))
))))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@2 $generated@@30) $generated@@30)
 :pattern ( ($generated@@2 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 ($generated@@34 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@34 $generated@@37 $generated@@36))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@38 Int) ) (!  (=> (or ($generated@@27 ($generated@@2 $generated@@38)) (and (< 0 $generated) (<= ($generated@@2 0) ($generated@@2 $generated@@38)))) (= ($generated@@26 ($generated@@2 $generated@@38)) (= ($generated@@2 ($generated@@4 ($generated@@2 ($generated@@28 $generated@@38 ($generated@@2 2))) ($generated@@2 2))) ($generated@@2 $generated@@38))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@2 $generated@@38)))
))))
(assert (forall (($generated@@39 Int) ($generated@@40 Int) ) (! (= ($generated@@28 $generated@@39 $generated@@40) (div $generated@@39 $generated@@40))
 :pattern ( ($generated@@28 $generated@@39 $generated@@40))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@41 T@U) ($generated@@42 Int) ) (!  (=> (or ($generated@@3 $generated@@42) (and (< 0 $generated) (<= ($generated@@2 0) $generated@@42))) (and (=> (or (not (= $generated@@42 ($generated@@2 0))) (not true)) ($generated@@3 (- $generated@@42 1))) (= ($generated@@0 ($generated@@1 $generated@@41) $generated@@42) (ite (= $generated@@42 ($generated@@2 0)) 1 ($generated@@4 ($generated@@2 2) ($generated@@0 $generated@@41 (- $generated@@42 1)))))))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@41) $generated@@42))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@34 $generated@@44 ($generated@@35 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@35 $generated@@44 $generated@@43))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@45 Int) ) (!  (=> (or ($generated@@24 $generated@@45) (< 0 $generated)) (= ($generated@@23 $generated@@45) ($generated@@4 $generated@@45 $generated@@45)))
 :pattern ( ($generated@@23 $generated@@45))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 Int) ) (! (= ($generated@@0 ($generated@@1 $generated@@46) $generated@@47) ($generated@@0 $generated@@46 $generated@@47))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@46) $generated@@47))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@48 $generated@@59 $generated@@60 $generated@@61 ($generated@@55 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@65 $generated@@62) $generated@@64 $generated@@65) $generated@@62)
 :weight 0
)) (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (or (= $generated@@71 $generated@@73) (= ($generated@@48 $generated@@66 $generated@@67 $generated@@68 ($generated@@55 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@72 $generated@@69) $generated@@73 $generated@@74) ($generated@@48 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@73 $generated@@74)))
 :weight 0
)) (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@81 $generated@@83) (= ($generated@@48 $generated@@75 $generated@@76 $generated@@77 ($generated@@55 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@48 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)))) (= ($generated@@5 $generated@@49) 3)) (= ($generated@@5 $generated@@50) 4)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@52 $generated@@84 $generated@@85 ($generated@@56 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@86) $generated@@88) $generated@@86)
 :weight 0
))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@93 $generated@@94) (= ($generated@@52 $generated@@89 $generated@@90 ($generated@@56 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@91) $generated@@94) ($generated@@52 $generated@@89 $generated@@90 $generated@@92 $generated@@94)))
 :weight 0
))) (= ($generated@@5 $generated@@53) 5)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (= ($generated@@5 ($generated@@54 $generated@@95 $generated@@96)) 6))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@57 ($generated@@54 $generated@@97 $generated@@98)) $generated@@97)
 :pattern ( ($generated@@54 $generated@@97 $generated@@98))
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (! (= ($generated@@58 ($generated@@54 $generated@@99 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@54 $generated@@99 $generated@@100))
))))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 Bool) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@10 ($generated@@48 $generated@@49 $generated@@50 $generated@@6 ($generated@@51 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))  (=> (and (or (not (= $generated@@105 $generated@@101)) (not true)) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@52 $generated@@50 $generated@@53 ($generated@@52 $generated@@49 ($generated@@54 $generated@@50 $generated@@53) $generated@@102 $generated@@105) $generated@@103)))) $generated@@104))
 :pattern ( ($generated@@48 $generated@@49 $generated@@50 $generated@@6 ($generated@@51 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 Int) ($generated@@108 Int) ) (! (= ($generated@@4 $generated@@107 $generated@@108) (* $generated@@107 $generated@@108))
 :pattern ( ($generated@@4 $generated@@107 $generated@@108))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@109 Int) ) (!  (=> (or ($generated@@27 $generated@@109) (and (< 0 $generated) (<= ($generated@@2 0) $generated@@109))) (=> ($generated@@26 $generated@@109) (= $generated@@109 (+ ($generated@@28 $generated@@109 ($generated@@2 2)) ($generated@@28 $generated@@109 ($generated@@2 2))))))
 :pattern ( ($generated@@26 $generated@@109))
))))
(assert (forall (($generated@@110 Int) ) (! (= ($generated@@35 $generated@@7 ($generated@@11 ($generated@@2 $generated@@110))) ($generated@@31 $generated@@53 ($generated@@35 $generated@@7 ($generated@@11 $generated@@110))))
 :pattern ( ($generated@@35 $generated@@7 ($generated@@11 ($generated@@2 $generated@@110))))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@T) ) (! (= ($generated@@35 $generated@@112 ($generated@@31 $generated@@112 $generated@@111)) ($generated@@31 $generated@@53 ($generated@@35 $generated@@112 $generated@@111)))
 :pattern ( ($generated@@35 $generated@@112 ($generated@@31 $generated@@112 $generated@@111)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 (T@U) Bool)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 (T@U) Bool)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@124  (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@0 ($generated@@1 ($generated@@1 $generated@@113)) $generated@@114) ($generated@@23 ($generated@@0 ($generated@@1 ($generated@@1 $generated@@113)) ($generated@@28 $generated@@114 ($generated@@2 2))))))))
(let (($generated@@125  (=> (and (= $generated@@114 0) (= (ControlFlow 0 8) 2)) $generated@@124)))
(let (($generated@@126  (=> (and (or (not (= $generated@@114 0)) (not true)) (= $generated@@115 (- $generated@@114 2))) (and (=> (= (ControlFlow 0 3) (- 0 7)) (or (<= 0 $generated@@114) (= $generated@@115 $generated@@114))) (=> (or (<= 0 $generated@@114) (= $generated@@115 $generated@@114)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (< $generated@@115 $generated@@114)) (=> (< $generated@@115 $generated@@114) (and (=> (= (ControlFlow 0 3) (- 0 5)) (<= ($generated@@2 0) $generated@@115)) (=> (<= ($generated@@2 0) $generated@@115) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> ($generated@@27 $generated@@115) (or ($generated@@26 $generated@@115) (= ($generated@@4 ($generated@@28 $generated@@115 ($generated@@2 2)) ($generated@@2 2)) $generated@@115)))) (=> (=> ($generated@@27 $generated@@115) (or ($generated@@26 $generated@@115) (= ($generated@@4 ($generated@@28 $generated@@115 ($generated@@2 2)) ($generated@@2 2)) $generated@@115))) (=> (and ($generated@@116 $generated@@117) ($generated@@118 $generated@@117)) (=> (and (and (and ($generated@@3 $generated@@115) (and ($generated@@3 ($generated@@28 $generated@@115 ($generated@@2 2))) ($generated@@24 ($generated@@0 ($generated@@1 $generated@@113) ($generated@@28 $generated@@115 ($generated@@2 2)))))) (= ($generated@@0 ($generated@@1 ($generated@@1 $generated@@113)) $generated@@115) ($generated@@23 ($generated@@0 ($generated@@1 ($generated@@1 $generated@@113)) ($generated@@28 $generated@@115 ($generated@@2 2)))))) (and (= $generated@@119 $generated@@117) (= (ControlFlow 0 3) 2))) $generated@@124)))))))))))))
(let (($generated@@127  (=> (= $generated@@120 ($generated@@51 $generated@@121 $generated@@122 $generated@@123 false)) (=> (and (and ($generated@@116 $generated@@119) ($generated@@118 $generated@@119)) (and (= $generated@@122 $generated@@119) (forall (($generated@@128 Int) ) (!  (=> (and (and (<= ($generated@@2 0) $generated@@128) ($generated@@26 $generated@@128)) (and (<= 0 $generated@@128) (< $generated@@128 $generated@@114))) (= ($generated@@0 ($generated@@1 $generated@@113) $generated@@128) ($generated@@23 ($generated@@0 ($generated@@1 $generated@@113) ($generated@@28 $generated@@128 ($generated@@2 2))))))
 :pattern ( ($generated@@28 $generated@@128 ($generated@@2 2)))
 :pattern ( ($generated@@26 $generated@@128))
)))) (and (=> (= (ControlFlow 0 9) 3) $generated@@126) (=> (= (ControlFlow 0 9) 8) $generated@@125))))))
(let (($generated@@129  (=> (and (and (and ($generated@@116 $generated@@122) ($generated@@118 $generated@@122)) (and (= 1 $generated) (<= ($generated@@2 0) $generated@@114))) (and (and ($generated@@27 $generated@@114) (and ($generated@@26 $generated@@114) (= ($generated@@4 ($generated@@28 $generated@@114 ($generated@@2 2)) ($generated@@2 2)) $generated@@114))) (= (ControlFlow 0 10) 9))) $generated@@127)))
$generated@@129))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
