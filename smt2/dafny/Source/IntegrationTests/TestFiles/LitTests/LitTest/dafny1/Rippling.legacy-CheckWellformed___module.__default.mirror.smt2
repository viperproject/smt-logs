(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U T@U T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 () Int)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@53 (T@U) Bool)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@63 (T@U) Bool)
(declare-fun $generated@@65 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@82 (T@U) Int)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@T T@T) T@T)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@104 (T@T) T@T)
(declare-fun $generated@@153 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@160 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@23) 3))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@24 $generated@@27 $generated@@28 $generated@@29) $generated@@25)  (and (and ($generated@@22 $generated@@23 $generated@@27 $generated@@25) ($generated@@22 $generated@@23 $generated@@28 $generated@@26)) ($generated@@22 $generated@@23 $generated@@29 $generated@@25)))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@24 $generated@@27 $generated@@28 $generated@@29) $generated@@25))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@30 ($generated@@24 $generated@@31 $generated@@32 $generated@@33)) $generated@@3)
 :pattern ( ($generated@@24 $generated@@31 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@34 ($generated@@24 $generated@@35 $generated@@36 $generated@@37)) $generated@@35)
 :pattern ( ($generated@@24 $generated@@35 $generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@38 ($generated@@24 $generated@@39 $generated@@40 $generated@@41)) $generated@@40)
 :pattern ( ($generated@@24 $generated@@39 $generated@@40 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@42 ($generated@@24 $generated@@43 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@24 $generated@@43 $generated@@44 $generated@@45))
)))
(assert (= ($generated@@30 $generated@@46) $generated@@2))
(assert ($generated@@22 $generated@@23 $generated@@46 $generated@@25))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@47 $generated@@49 $generated@@48))
)))
(assert  (=> (<= 2 $generated@@50) (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> (or ($generated@@53 ($generated@@47 $generated@@23 $generated@@56)) (and (< 2 $generated@@50) ($generated@@22 $generated@@23 $generated@@56 $generated@@25))) (and (=> (not ($generated@@11 ($generated@@47 $generated@@7 ($generated@@10 ($generated@@54 ($generated@@47 $generated@@23 $generated@@56)))))) (let (($generated@@57 ($generated@@47 $generated@@23 ($generated@@42 ($generated@@47 $generated@@23 $generated@@56)))))
(let (($generated@@58 ($generated@@47 $generated@@23 ($generated@@34 ($generated@@47 $generated@@23 $generated@@56)))))
 (and ($generated@@53 $generated@@57) ($generated@@53 $generated@@58))))) (= ($generated@@51 ($generated@@52 $generated@@55) ($generated@@47 $generated@@23 $generated@@56)) (ite ($generated@@54 ($generated@@47 $generated@@23 $generated@@56)) $generated@@46 (let (($generated@@59 ($generated@@47 $generated@@23 ($generated@@42 ($generated@@47 $generated@@23 $generated@@56)))))
(let (($generated@@60 ($generated@@47 $generated@@23 ($generated@@38 ($generated@@47 $generated@@23 $generated@@56)))))
(let (($generated@@61 ($generated@@47 $generated@@23 ($generated@@34 ($generated@@47 $generated@@23 $generated@@56)))))
($generated@@47 $generated@@23 ($generated@@24 ($generated@@47 $generated@@23 ($generated@@51 ($generated@@52 $generated@@55) $generated@@59)) $generated@@60 ($generated@@47 $generated@@23 ($generated@@51 ($generated@@52 $generated@@55) $generated@@61)))))))))))
 :weight 3
 :pattern ( ($generated@@51 ($generated@@52 $generated@@55) ($generated@@47 $generated@@23 $generated@@56)))
))))
(assert (forall (($generated@@62 T@U) ) (! (= ($generated@@54 $generated@@62) (= ($generated@@30 $generated@@62) $generated@@2))
 :pattern ( ($generated@@54 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@63 $generated@@64) (= ($generated@@30 $generated@@64) $generated@@3))
 :pattern ( ($generated@@63 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 ($generated@@65 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@65 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@63 $generated@@69) (exists (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (= $generated@@69 ($generated@@24 $generated@@70 $generated@@71 $generated@@72))))
 :pattern ( ($generated@@63 $generated@@69))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@54 $generated@@73) (= $generated@@73 $generated@@46))
 :pattern ( ($generated@@54 $generated@@73))
)))
(assert  (=> (<= 2 $generated@@50) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> (or ($generated@@53 $generated@@75) (and (< 2 $generated@@50) ($generated@@22 $generated@@23 $generated@@75 $generated@@25))) ($generated@@22 $generated@@23 ($generated@@51 $generated@@74 $generated@@75) $generated@@25))
 :pattern ( ($generated@@51 $generated@@74 $generated@@75))
))))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@76 $generated@@25) (or ($generated@@54 $generated@@76) ($generated@@63 $generated@@76)))
 :pattern ( ($generated@@63 $generated@@76) ($generated@@22 $generated@@23 $generated@@76 $generated@@25))
 :pattern ( ($generated@@54 $generated@@76) ($generated@@22 $generated@@23 $generated@@76 $generated@@25))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@24 ($generated@@47 $generated@@23 $generated@@77) ($generated@@47 $generated@@23 $generated@@78) ($generated@@47 $generated@@23 $generated@@79)) ($generated@@47 $generated@@23 ($generated@@24 $generated@@77 $generated@@78 $generated@@79)))
 :pattern ( ($generated@@24 ($generated@@47 $generated@@23 $generated@@77) ($generated@@47 $generated@@23 $generated@@78) ($generated@@47 $generated@@23 $generated@@79)))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@65 $generated@@81 ($generated@@66 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@66 $generated@@81 $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (< ($generated@@82 $generated@@83) ($generated@@82 ($generated@@24 $generated@@83 $generated@@84 $generated@@85)))
 :pattern ( ($generated@@24 $generated@@83 $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (< ($generated@@82 $generated@@87) ($generated@@82 ($generated@@24 $generated@@86 $generated@@87 $generated@@88)))
 :pattern ( ($generated@@24 $generated@@86 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (< ($generated@@82 $generated@@91) ($generated@@82 ($generated@@24 $generated@@89 $generated@@90 $generated@@91)))
 :pattern ( ($generated@@24 $generated@@89 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@51 ($generated@@52 $generated@@92) $generated@@93) ($generated@@51 $generated@@92 $generated@@93))
 :pattern ( ($generated@@51 ($generated@@52 $generated@@92) $generated@@93))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@94 $generated@@105 $generated@@106 $generated@@107 ($generated@@101 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@94 $generated@@112 $generated@@113 $generated@@114 ($generated@@101 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@94 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@94 $generated@@121 $generated@@122 $generated@@123 ($generated@@101 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))) (= ($generated@@6 $generated@@95) 4)) (= ($generated@@6 $generated@@96) 5)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@98 $generated@@130 $generated@@131 ($generated@@102 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@134) $generated@@132)
 :weight 0
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@139 $generated@@140) (= ($generated@@98 $generated@@135 $generated@@136 ($generated@@102 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@137) $generated@@140) ($generated@@98 $generated@@135 $generated@@136 $generated@@138 $generated@@140)))
 :weight 0
))) (= ($generated@@6 $generated@@99) 6)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (= ($generated@@6 ($generated@@100 $generated@@141 $generated@@142)) 7))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@103 ($generated@@100 $generated@@143 $generated@@144)) $generated@@143)
 :pattern ( ($generated@@100 $generated@@143 $generated@@144))
))) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (! (= ($generated@@104 ($generated@@100 $generated@@145 $generated@@146)) $generated@@146)
 :pattern ( ($generated@@100 $generated@@145 $generated@@146))
))))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 Bool) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (= ($generated@@11 ($generated@@94 $generated@@95 $generated@@96 $generated@@7 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))  (=> (and (or (not (= $generated@@151 $generated@@147)) (not true)) ($generated@@11 ($generated@@65 $generated@@7 ($generated@@98 $generated@@96 $generated@@99 ($generated@@98 $generated@@95 ($generated@@100 $generated@@96 $generated@@99) $generated@@148 $generated@@151) $generated@@149)))) $generated@@150))
 :pattern ( ($generated@@94 $generated@@95 $generated@@96 $generated@@7 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> (and ($generated@@154 $generated@@156) ($generated@@22 $generated@@23 $generated@@155 $generated@@26)) ($generated@@153 $generated@@23 $generated@@155 $generated@@26 $generated@@156))
 :pattern ( ($generated@@153 $generated@@23 $generated@@155 $generated@@26 $generated@@156))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (!  (=> (and ($generated@@154 $generated@@158) ($generated@@22 $generated@@23 $generated@@157 $generated@@25)) ($generated@@153 $generated@@23 $generated@@157 $generated@@25 $generated@@158))
 :pattern ( ($generated@@153 $generated@@23 $generated@@157 $generated@@25 $generated@@158))
)))
(assert (= ($generated@@159 $generated@@26) $generated@@0))
(assert (= ($generated@@160 $generated@@26) $generated@@4))
(assert (= ($generated@@159 $generated@@25) $generated@@1))
(assert (= ($generated@@160 $generated@@25) $generated@@5))
(assert (= $generated@@46 ($generated@@47 $generated@@23 $generated@@46)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> (and ($generated@@154 $generated@@162) (and ($generated@@63 $generated@@161) ($generated@@153 $generated@@23 $generated@@161 $generated@@25 $generated@@162))) ($generated@@153 $generated@@23 ($generated@@34 $generated@@161) $generated@@25 $generated@@162))
 :pattern ( ($generated@@153 $generated@@23 ($generated@@34 $generated@@161) $generated@@25 $generated@@162))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (!  (=> (and ($generated@@154 $generated@@164) (and ($generated@@63 $generated@@163) ($generated@@153 $generated@@23 $generated@@163 $generated@@25 $generated@@164))) ($generated@@153 $generated@@23 ($generated@@38 $generated@@163) $generated@@26 $generated@@164))
 :pattern ( ($generated@@153 $generated@@23 ($generated@@38 $generated@@163) $generated@@26 $generated@@164))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (!  (=> (and ($generated@@154 $generated@@166) (and ($generated@@63 $generated@@165) ($generated@@153 $generated@@23 $generated@@165 $generated@@25 $generated@@166))) ($generated@@153 $generated@@23 ($generated@@42 $generated@@165) $generated@@25 $generated@@166))
 :pattern ( ($generated@@153 $generated@@23 ($generated@@42 $generated@@165) $generated@@25 $generated@@166))
)))
(assert  (=> (<= 2 $generated@@50) (forall (($generated@@167 T@U) ($generated@@168 T@U) ) (!  (=> (or ($generated@@53 $generated@@168) (and (< 2 $generated@@50) ($generated@@22 $generated@@23 $generated@@168 $generated@@25))) (and (=> (not ($generated@@54 $generated@@168)) (let (($generated@@169 ($generated@@42 $generated@@168)))
(let (($generated@@170 ($generated@@34 $generated@@168)))
 (and ($generated@@53 $generated@@169) ($generated@@53 $generated@@170))))) (= ($generated@@51 ($generated@@52 $generated@@167) $generated@@168) (ite ($generated@@54 $generated@@168) $generated@@46 (let (($generated@@171 ($generated@@42 $generated@@168)))
(let (($generated@@172 ($generated@@38 $generated@@168)))
(let (($generated@@173 ($generated@@34 $generated@@168)))
($generated@@24 ($generated@@51 $generated@@167 $generated@@171) $generated@@172 ($generated@@51 $generated@@167 $generated@@173)))))))))
 :pattern ( ($generated@@51 ($generated@@52 $generated@@167) $generated@@168))
))))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@T) ) (! (= ($generated@@66 $generated@@175 ($generated@@47 $generated@@175 $generated@@174)) ($generated@@47 $generated@@99 ($generated@@66 $generated@@175 $generated@@174)))
 :pattern ( ($generated@@66 $generated@@175 ($generated@@47 $generated@@175 $generated@@174)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@190 true))
(let (($generated@@191  (=> (and (= $generated@@176 ($generated@@24 $generated@@177 $generated@@178 $generated@@179)) ($generated@@22 $generated@@23 $generated@@177 $generated@@25)) (=> (and (and ($generated@@22 $generated@@23 $generated@@178 $generated@@26) ($generated@@22 $generated@@23 $generated@@179 $generated@@25)) (and (= $generated@@180 $generated@@179) ($generated@@22 $generated@@23 $generated@@180 $generated@@25))) (=> (and (and (and (= $generated@@181 $generated@@180) (= $generated@@182 $generated@@178)) (and ($generated@@22 $generated@@23 $generated@@182 $generated@@26) (= $generated@@183 $generated@@182))) (and (and (= $generated@@184 $generated@@177) ($generated@@22 $generated@@23 $generated@@184 $generated@@25)) (and (= $generated@@185 $generated@@184) ($generated@@153 $generated@@23 $generated@@181 $generated@@25 $generated@@186)))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (< ($generated@@82 $generated@@181) ($generated@@82 $generated@@176))) (=> (< ($generated@@82 $generated@@181) ($generated@@82 $generated@@176)) (=> ($generated@@53 $generated@@181) (=> (and ($generated@@153 $generated@@23 $generated@@185 $generated@@25 $generated@@186) (= (ControlFlow 0 4) (- 0 3))) (< ($generated@@82 $generated@@185) ($generated@@82 $generated@@176)))))))))))
(let (($generated@@192  (=> (or (not (= $generated@@176 $generated@@46)) (not true)) (and (=> (= (ControlFlow 0 7) 4) $generated@@191) (=> (= (ControlFlow 0 7) 6) $generated@@190)))))
(let (($generated@@193 true))
(let (($generated@@194 true))
(let (($generated@@195  (=> (= $generated@@187 ($generated@@97 $generated@@188 $generated@@186 $generated false)) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@194) (=> (= (ControlFlow 0 8) 2) $generated@@193)) (=> (= (ControlFlow 0 8) 7) $generated@@192)))))
(let (($generated@@196  (=> (and (and (and ($generated@@154 $generated@@186) ($generated@@189 $generated@@186)) ($generated@@22 $generated@@23 $generated@@176 $generated@@25)) (and (= 2 $generated@@50) (= (ControlFlow 0 9) 8))) $generated@@195)))
$generated@@196))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
