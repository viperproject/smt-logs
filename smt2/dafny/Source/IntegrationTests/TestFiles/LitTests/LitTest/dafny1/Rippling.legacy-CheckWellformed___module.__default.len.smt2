(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@U) T@U)
(declare-fun $generated@@57 () Int)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@77 (T@U) T@U)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@87 (T@U) Int)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 () T@T)
(declare-fun $generated@@98 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@99 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@100 () T@T)
(declare-fun $generated@@101 (T@T T@T) T@T)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@104 (T@T) T@T)
(declare-fun $generated@@105 (T@T) T@T)
(declare-fun $generated@@154 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@155 (T@U) Bool)
(declare-fun $generated@@160 (T@U) T@U)
(declare-fun $generated@@161 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@8 $generated@@25) 3))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@26 $generated@@29 $generated@@30) $generated@@27)  (and ($generated@@24 $generated@@25 $generated@@29 $generated@@28) ($generated@@24 $generated@@25 $generated@@30 $generated@@27)))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@26 $generated@@29 $generated@@30) $generated@@27))
)))
(assert (= ($generated@@31 $generated@@32) $generated@@2))
(assert (= ($generated@@31 $generated@@33) $generated@@4))
(assert ($generated@@24 $generated@@25 $generated@@32 $generated@@28))
(assert ($generated@@24 $generated@@25 $generated@@33 $generated@@27))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ) (! (= ($generated@@37 $generated@@38) (= ($generated@@31 $generated@@38) $generated@@2))
 :pattern ( ($generated@@37 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@40) (= ($generated@@31 $generated@@40) $generated@@3))
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@41 $generated@@42) (= ($generated@@31 $generated@@42) $generated@@4))
 :pattern ( ($generated@@41 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@43 $generated@@44) (= ($generated@@31 $generated@@44) $generated@@5))
 :pattern ( ($generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 ($generated@@45 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@45 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@43 $generated@@49) (exists (($generated@@50 T@U) ($generated@@51 T@U) ) (= $generated@@49 ($generated@@26 $generated@@50 $generated@@51))))
 :pattern ( ($generated@@43 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@37 $generated@@52) (= $generated@@52 $generated@@32))
 :pattern ( ($generated@@37 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ) (!  (=> ($generated@@41 $generated@@53) (= $generated@@53 $generated@@33))
 :pattern ( ($generated@@41 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@39 $generated@@55) (exists (($generated@@56 T@U) ) (= $generated@@55 ($generated@@54 $generated@@56))))
 :pattern ( ($generated@@39 $generated@@55))
)))
(assert  (=> (<= 2 $generated@@57) (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> (or ($generated@@60 $generated@@63) (and (< 2 $generated@@57) ($generated@@24 $generated@@25 $generated@@63 $generated@@27))) (and (=> (not ($generated@@41 $generated@@63)) (let (($generated@@64 ($generated@@61 $generated@@63)))
($generated@@60 $generated@@64))) (= ($generated@@58 ($generated@@59 $generated@@62) $generated@@63) (ite ($generated@@41 $generated@@63) $generated@@32 (let (($generated@@65 ($generated@@61 $generated@@63)))
($generated@@54 ($generated@@58 $generated@@62 $generated@@65)))))))
 :pattern ( ($generated@@58 ($generated@@59 $generated@@62) $generated@@63))
))))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@54 $generated@@66) $generated@@28) ($generated@@24 $generated@@25 $generated@@66 $generated@@28))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@54 $generated@@66) $generated@@28))
)))
(assert  (=> (<= 2 $generated@@57) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> (or ($generated@@60 $generated@@68) (and (< 2 $generated@@57) ($generated@@24 $generated@@25 $generated@@68 $generated@@27))) ($generated@@24 $generated@@25 ($generated@@58 $generated@@67 $generated@@68) $generated@@28))
 :pattern ( ($generated@@58 $generated@@67 $generated@@68))
))))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@69 $generated@@28) (or ($generated@@37 $generated@@69) ($generated@@39 $generated@@69)))
 :pattern ( ($generated@@39 $generated@@69) ($generated@@24 $generated@@25 $generated@@69 $generated@@28))
 :pattern ( ($generated@@37 $generated@@69) ($generated@@24 $generated@@25 $generated@@69 $generated@@28))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@70 $generated@@27) (or ($generated@@41 $generated@@70) ($generated@@43 $generated@@70)))
 :pattern ( ($generated@@43 $generated@@70) ($generated@@24 $generated@@25 $generated@@70 $generated@@27))
 :pattern ( ($generated@@41 $generated@@70) ($generated@@24 $generated@@25 $generated@@70 $generated@@27))
)))
(assert  (=> (<= 2 $generated@@57) (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> (or ($generated@@60 ($generated@@34 $generated@@25 $generated@@72)) (and (< 2 $generated@@57) ($generated@@24 $generated@@25 $generated@@72 $generated@@27))) (and (=> (not ($generated@@13 ($generated@@34 $generated@@9 ($generated@@12 ($generated@@41 ($generated@@34 $generated@@25 $generated@@72)))))) (let (($generated@@73 ($generated@@34 $generated@@25 ($generated@@61 ($generated@@34 $generated@@25 $generated@@72)))))
($generated@@60 $generated@@73))) (= ($generated@@58 ($generated@@59 $generated@@71) ($generated@@34 $generated@@25 $generated@@72)) (ite ($generated@@41 ($generated@@34 $generated@@25 $generated@@72)) $generated@@32 (let (($generated@@74 ($generated@@34 $generated@@25 ($generated@@61 ($generated@@34 $generated@@25 $generated@@72)))))
($generated@@34 $generated@@25 ($generated@@54 ($generated@@34 $generated@@25 ($generated@@58 ($generated@@59 $generated@@71) $generated@@74)))))))))
 :weight 3
 :pattern ( ($generated@@58 ($generated@@59 $generated@@71) ($generated@@34 $generated@@25 $generated@@72)))
))))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@31 ($generated@@26 $generated@@75 $generated@@76)) $generated@@5)
 :pattern ( ($generated@@26 $generated@@75 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@77 ($generated@@26 $generated@@78 $generated@@79)) $generated@@78)
 :pattern ( ($generated@@26 $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@61 ($generated@@26 $generated@@80 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@26 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@31 ($generated@@54 $generated@@82)) $generated@@3)
 :pattern ( ($generated@@54 $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@54 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@54 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@45 $generated@@86 ($generated@@46 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@46 $generated@@86 $generated@@85))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ) (! (< ($generated@@87 $generated@@88) ($generated@@87 ($generated@@26 $generated@@88 $generated@@89)))
 :pattern ( ($generated@@26 $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (< ($generated@@87 $generated@@91) ($generated@@87 ($generated@@26 $generated@@90 $generated@@91)))
 :pattern ( ($generated@@26 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@58 ($generated@@59 $generated@@92) $generated@@93) ($generated@@58 $generated@@92 $generated@@93))
 :pattern ( ($generated@@58 ($generated@@59 $generated@@92) $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ) (! (< ($generated@@87 $generated@@94) ($generated@@87 ($generated@@54 $generated@@94)))
 :pattern ( ($generated@@54 $generated@@94))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@95 $generated@@106 $generated@@107 $generated@@108 ($generated@@102 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@111 $generated@@112) $generated@@109)
 :weight 0
)) (and (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@95 $generated@@113 $generated@@114 $generated@@115 ($generated@@102 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@95 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@128 $generated@@130) (= ($generated@@95 $generated@@122 $generated@@123 $generated@@124 ($generated@@102 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@128 $generated@@125) $generated@@129 $generated@@130) ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@129 $generated@@130)))
 :weight 0
)))) (= ($generated@@8 $generated@@96) 4)) (= ($generated@@8 $generated@@97) 5)) (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@99 $generated@@131 $generated@@132 ($generated@@103 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@133) $generated@@135) $generated@@133)
 :weight 0
))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (!  (or (= $generated@@140 $generated@@141) (= ($generated@@99 $generated@@136 $generated@@137 ($generated@@103 $generated@@136 $generated@@137 $generated@@139 $generated@@140 $generated@@138) $generated@@141) ($generated@@99 $generated@@136 $generated@@137 $generated@@139 $generated@@141)))
 :weight 0
))) (= ($generated@@8 $generated@@100) 6)) (forall (($generated@@142 T@T) ($generated@@143 T@T) ) (= ($generated@@8 ($generated@@101 $generated@@142 $generated@@143)) 7))) (forall (($generated@@144 T@T) ($generated@@145 T@T) ) (! (= ($generated@@104 ($generated@@101 $generated@@144 $generated@@145)) $generated@@144)
 :pattern ( ($generated@@101 $generated@@144 $generated@@145))
))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ) (! (= ($generated@@105 ($generated@@101 $generated@@146 $generated@@147)) $generated@@147)
 :pattern ( ($generated@@101 $generated@@146 $generated@@147))
))))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 Bool) ($generated@@152 T@U) ($generated@@153 T@U) ) (! (= ($generated@@13 ($generated@@95 $generated@@96 $generated@@97 $generated@@9 ($generated@@98 $generated@@148 $generated@@149 $generated@@150 $generated@@151) $generated@@152 $generated@@153))  (=> (and (or (not (= $generated@@152 $generated@@148)) (not true)) ($generated@@13 ($generated@@45 $generated@@9 ($generated@@99 $generated@@97 $generated@@100 ($generated@@99 $generated@@96 ($generated@@101 $generated@@97 $generated@@100) $generated@@149 $generated@@152) $generated@@150)))) $generated@@151))
 :pattern ( ($generated@@95 $generated@@96 $generated@@97 $generated@@9 ($generated@@98 $generated@@148 $generated@@149 $generated@@150 $generated@@151) $generated@@152 $generated@@153))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ) (!  (=> (and ($generated@@155 $generated@@157) ($generated@@24 $generated@@25 $generated@@156 $generated@@28)) ($generated@@154 $generated@@25 $generated@@156 $generated@@28 $generated@@157))
 :pattern ( ($generated@@154 $generated@@25 $generated@@156 $generated@@28 $generated@@157))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (!  (=> (and ($generated@@155 $generated@@159) ($generated@@24 $generated@@25 $generated@@158 $generated@@27)) ($generated@@154 $generated@@25 $generated@@158 $generated@@27 $generated@@159))
 :pattern ( ($generated@@154 $generated@@25 $generated@@158 $generated@@27 $generated@@159))
)))
(assert (= ($generated@@160 $generated@@28) $generated@@0))
(assert (= ($generated@@161 $generated@@28) $generated@@6))
(assert (= ($generated@@160 $generated@@27) $generated@@1))
(assert (= ($generated@@161 $generated@@27) $generated@@7))
(assert (= $generated@@32 ($generated@@34 $generated@@25 $generated@@32)))
(assert (= $generated@@33 ($generated@@34 $generated@@25 $generated@@33)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@U) ) (!  (=> (and ($generated@@155 $generated@@163) (and ($generated@@39 $generated@@162) ($generated@@154 $generated@@25 $generated@@162 $generated@@28 $generated@@163))) ($generated@@154 $generated@@25 ($generated@@83 $generated@@162) $generated@@28 $generated@@163))
 :pattern ( ($generated@@154 $generated@@25 ($generated@@83 $generated@@162) $generated@@28 $generated@@163))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (!  (=> (and ($generated@@155 $generated@@165) (and ($generated@@43 $generated@@164) ($generated@@154 $generated@@25 $generated@@164 $generated@@27 $generated@@165))) ($generated@@154 $generated@@25 ($generated@@77 $generated@@164) $generated@@28 $generated@@165))
 :pattern ( ($generated@@154 $generated@@25 ($generated@@77 $generated@@164) $generated@@28 $generated@@165))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (!  (=> (and ($generated@@155 $generated@@167) (and ($generated@@43 $generated@@166) ($generated@@154 $generated@@25 $generated@@166 $generated@@27 $generated@@167))) ($generated@@154 $generated@@25 ($generated@@61 $generated@@166) $generated@@27 $generated@@167))
 :pattern ( ($generated@@154 $generated@@25 ($generated@@61 $generated@@166) $generated@@27 $generated@@167))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ) (! (= ($generated@@26 ($generated@@34 $generated@@25 $generated@@168) ($generated@@34 $generated@@25 $generated@@169)) ($generated@@34 $generated@@25 ($generated@@26 $generated@@168 $generated@@169)))
 :pattern ( ($generated@@26 ($generated@@34 $generated@@25 $generated@@168) ($generated@@34 $generated@@25 $generated@@169)))
)))
(assert (forall (($generated@@170 T@U) ) (! (= ($generated@@54 ($generated@@34 $generated@@25 $generated@@170)) ($generated@@34 $generated@@25 ($generated@@54 $generated@@170)))
 :pattern ( ($generated@@54 ($generated@@34 $generated@@25 $generated@@170)))
)))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@T) ) (! (= ($generated@@46 $generated@@172 ($generated@@34 $generated@@172 $generated@@171)) ($generated@@34 $generated@@100 ($generated@@46 $generated@@172 $generated@@171)))
 :pattern ( ($generated@@46 $generated@@172 ($generated@@34 $generated@@172 $generated@@171)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@184 true))
(let (($generated@@185  (=> (= $generated@@173 ($generated@@26 $generated@@174 $generated@@175)) (=> (and ($generated@@24 $generated@@25 $generated@@174 $generated@@28) ($generated@@24 $generated@@25 $generated@@175 $generated@@27)) (=> (and (and (and (= $generated@@176 $generated@@175) ($generated@@24 $generated@@25 $generated@@176 $generated@@27)) (and (= $generated@@177 $generated@@176) (= $generated@@178 $generated@@174))) (and (and ($generated@@24 $generated@@25 $generated@@178 $generated@@28) (= $generated@@179 $generated@@178)) (and ($generated@@154 $generated@@25 $generated@@177 $generated@@27 $generated@@180) (= (ControlFlow 0 4) (- 0 3))))) (< ($generated@@87 $generated@@177) ($generated@@87 $generated@@173)))))))
(let (($generated@@186  (=> (or (not (= $generated@@173 $generated@@33)) (not true)) (and (=> (= (ControlFlow 0 6) 4) $generated@@185) (=> (= (ControlFlow 0 6) 5) $generated@@184)))))
(let (($generated@@187 true))
(let (($generated@@188 true))
(let (($generated@@189  (=> (= $generated@@181 ($generated@@98 $generated@@182 $generated@@180 $generated false)) (and (and (=> (= (ControlFlow 0 7) 1) $generated@@188) (=> (= (ControlFlow 0 7) 2) $generated@@187)) (=> (= (ControlFlow 0 7) 6) $generated@@186)))))
(let (($generated@@190  (=> (and (and (and ($generated@@155 $generated@@180) ($generated@@183 $generated@@180)) ($generated@@24 $generated@@25 $generated@@173 $generated@@27)) (and (= 2 $generated@@57) (= (ControlFlow 0 8) 7))) $generated@@189)))
$generated@@190))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
