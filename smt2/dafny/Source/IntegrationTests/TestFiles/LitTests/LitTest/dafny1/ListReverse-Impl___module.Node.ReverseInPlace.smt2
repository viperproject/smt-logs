(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun class._module.Node? () T@U)
(declare-fun Tagclass._module.Node? () T@U)
(declare-fun Tagclass._module.Node () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun field$nxt () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun DeclName (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Node? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.Node () T@U)
(declare-fun _module.Node.nxt () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc allocName class._module.Node? Tagclass._module.Node? Tagclass._module.Node tytagFamily$Node field$nxt)
)
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Node?)  (or (= $o null) (= (dtype $o) Tclass._module.Node?)))
 :pattern ( ($Is refType $o Tclass._module.Node?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Node $h) ($IsAlloc refType |c#0| Tclass._module.Node? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node? $h))
)))
(assert (= (FDim _module.Node.nxt) 0))
(assert (= (FieldOfDecl class._module.Node? field$nxt) _module.Node.nxt))
(assert  (not ($IsGhostField _module.Node.nxt)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v@@0) t h@@0) ($IsAlloc T@@0 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@0 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@1 v@@1 t@@1 h@@2) ($IsAlloc T@@1 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@1 v@@1 t@@1 h@@2))
)))
(assert (forall (($h@@1 T@U) ($o@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) Tclass._module.Node?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Node.nxt)) Tclass._module.Node?))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Node.nxt)))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Node?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.Node?)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Node?))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Node) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.Node)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Node))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.Node)  (and ($Is refType |c#0@@0| Tclass._module.Node?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node?))
)))
(assert (forall (($h@@2 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass._module.Node?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Node.nxt)) Tclass._module.Node? $h@@2))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Node.nxt)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@2) t@@2) ($Is T@@2 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@3) ($IsAllocBox bx@@3 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@3 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@3)) x@@3)
 :pattern ( ($Box T@@3 x@@3))
)))
(assert (forall ((bx@@4 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@5))))
 :pattern ( ($IsBox bx@@4 (TSet t@@5)))
)))
(assert (forall ((h@@4 T@U) (r T@U) (f T@U) (x@@4 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@4))) ($HeapSucc h@@4 (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@4))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@4)))
)))
(assert (= (Tag Tclass._module.Node?) Tagclass._module.Node?))
(assert (= (TagFamily Tclass._module.Node?) tytagFamily$Node))
(assert (= (Tag Tclass._module.Node) Tagclass._module.Node))
(assert (= (TagFamily Tclass._module.Node) tytagFamily$Node))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) (|Set#IsMember| |l#3| ($Box refType $o@@3))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |y#4@0| () T@U)
(declare-fun |r#0| () T@U)
(declare-fun |reverse#0@0| () T@U)
(declare-fun |current#0@0| () T@U)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |reverse#0@1| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |tmp#0_0@1| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |tmp#0_0@0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap () T@U)
(declare-fun |x#0| () T@U)
(declare-fun this () T@U)
(declare-fun |reverse#0| () T@U)
(declare-fun |current#0| () T@U)
(declare-fun |tmp#0_0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 36) (let ((anon10_correct true))
(let ((anon20_Else_correct  (=> (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |y#4@0|) _module.Node.nxt)) null) (= (ControlFlow 0 19) 14)) anon10_correct)))
(let ((anon20_Then_correct  (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |y#4@0|) _module.Node.nxt)) null)) (not true)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (or (not (= |y#4@0| null)) (not true))) (=> (= (ControlFlow 0 17) 14) anon10_correct)))))
(let ((anon19_Then_correct  (=> (|Set#IsMember| |r#0| ($Box refType |y#4@0|)) (and (=> (= (ControlFlow 0 20) (- 0 21)) (or (not (= |y#4@0| null)) (not true))) (and (=> (= (ControlFlow 0 20) 17) anon20_Then_correct) (=> (= (ControlFlow 0 20) 19) anon20_Else_correct))))))
(let ((anon19_Else_correct  (=> (and (not (|Set#IsMember| |r#0| ($Box refType |y#4@0|))) (= (ControlFlow 0 16) 14)) anon10_correct)))
(let ((anon18_Then_correct  (=> (and ($Is refType |y#4@0| Tclass._module.Node) ($IsAlloc refType |y#4@0| Tclass._module.Node $Heap@0)) (and (=> (= (ControlFlow 0 22) 20) anon19_Then_correct) (=> (= (ControlFlow 0 22) 16) anon19_Else_correct)))))
(let ((anon18_Else_correct  (=> (and (not (and ($Is refType |y#4@0| Tclass._module.Node) ($IsAlloc refType |y#4@0| Tclass._module.Node $Heap@0))) (= (ControlFlow 0 15) 14)) anon10_correct)))
(let ((anon6_correct  (=> (or (= |reverse#0@0| null) (|Set#IsMember| |r#0| ($Box refType |reverse#0@0|))) (and (=> (= (ControlFlow 0 23) 22) anon18_Then_correct) (=> (= (ControlFlow 0 23) 15) anon18_Else_correct)))))
(let ((anon17_Else_correct  (=> (and (= |reverse#0@0| null) (= (ControlFlow 0 25) 23)) anon6_correct)))
(let ((anon17_Then_correct  (=> (and (or (not (= |reverse#0@0| null)) (not true)) (= (ControlFlow 0 24) 23)) anon6_correct)))
(let ((anon4_correct  (=> (or (= |current#0@0| null) (|Set#IsMember| |r#0| ($Box refType |current#0@0|))) (and (=> (= (ControlFlow 0 26) 24) anon17_Then_correct) (=> (= (ControlFlow 0 26) 25) anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (and (= |current#0@0| null) (= (ControlFlow 0 28) 26)) anon4_correct)))
(let ((anon16_Then_correct  (=> (and (or (not (= |current#0@0| null)) (not true)) (= (ControlFlow 0 27) 26)) anon4_correct)))
(let ((anon15_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 29) 27) anon16_Then_correct) (=> (= (ControlFlow 0 29) 28) anon16_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 10) (- 0 11)) (or (= |reverse#0@1| null) (|Set#IsMember| |r#0| ($Box refType |reverse#0@1|)))) (=> (or (= |reverse#0@1| null) (|Set#IsMember| |r#0| ($Box refType |reverse#0@1|))) (=> (= (ControlFlow 0 10) (- 0 9)) (forall ((|y#3| T@U) ) (!  (=> ($Is refType |y#3| Tclass._module.Node) (=> (|Set#IsMember| |r#0| ($Box refType |y#3|)) (or (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |y#3|) _module.Node.nxt)) null) (|Set#IsMember| |r#0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |y#3|) _module.Node.nxt)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |y#3|) _module.Node.nxt)))
)))))))
(let ((anon21_Then_correct  (=> (and (and (= |current#0@0| null) (= |reverse#0@1| |reverse#0@0|)) (and (= $Heap@2 $Heap@0) (= (ControlFlow 0 12) 10))) GeneratedUnifiedExit_correct)))
(let ((anon21_Else_correct  (=> (or (not (= |current#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (or (not (= |current#0@0| null)) (not true))) (=> (or (not (= |current#0@0| null)) (not true)) (=> (= |tmp#0_0@1| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |current#0@0|) _module.Node.nxt))) (and (=> (= (ControlFlow 0 3) (- 0 7)) (or (not (= |current#0@0| null)) (not true))) (=> (or (not (= |current#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |current#0@0| _module.Node.nxt))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |current#0@0| _module.Node.nxt)) (=> (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 |current#0@0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |current#0@0|) _module.Node.nxt ($Box refType |reverse#0@0|)))) ($IsGoodHeap $Heap@1)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> |$w$loop#0@0| (or (= |tmp#0_0@1| null) (|Set#IsMember| |r#0| ($Box refType |tmp#0_0@1|))))) (=> (=> |$w$loop#0@0| (or (= |tmp#0_0@1| null) (|Set#IsMember| |r#0| ($Box refType |tmp#0_0@1|)))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#0@0| (or (= |current#0@0| null) (|Set#IsMember| |r#0| ($Box refType |current#0@0|))))) (=> (=> |$w$loop#0@0| (or (= |current#0@0| null) (|Set#IsMember| |r#0| ($Box refType |current#0@0|)))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#0@0| (forall ((|y#5| T@U) ) (!  (=> ($Is refType |y#5| Tclass._module.Node) (=> (|Set#IsMember| |r#0| ($Box refType |y#5|)) (or (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |y#5|) _module.Node.nxt)) null) (|Set#IsMember| |r#0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |y#5|) _module.Node.nxt)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |y#5|) _module.Node.nxt)))
)))))))))))))))))))
(let ((anon15_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 13) 12) anon21_Then_correct) (=> (= (ControlFlow 0 13) 3) anon21_Else_correct)))))
(let ((anon14_LoopBody_correct  (and (=> (= (ControlFlow 0 30) 29) anon15_Then_correct) (=> (= (ControlFlow 0 30) 13) anon15_Else_correct))))
(let ((anon14_LoopDone_correct true))
(let ((anon14_LoopHead_correct  (=> (and ($Is refType |tmp#0_0@0| Tclass._module.Node?) ($IsAlloc refType |tmp#0_0@0| Tclass._module.Node? $Heap@0)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and ($Is refType |reverse#0@0| Tclass._module.Node?) ($IsAlloc refType |reverse#0@0| Tclass._module.Node? $Heap@0))) (=> (and (and (and (and ($Is refType |current#0@0| Tclass._module.Node?) ($IsAlloc refType |current#0@0| Tclass._module.Node? $Heap@0)) (not false)) (and (=> |$w$loop#0@0| (or (= |current#0@0| null) (|Set#IsMember| |r#0| ($Box refType |current#0@0|)))) (=> |$w$loop#0@0| (or (= |reverse#0@0| null) (|Set#IsMember| |r#0| ($Box refType |reverse#0@0|)))))) (and (and (=> |$w$loop#0@0| (forall ((|y#5@@0| T@U) ) (!  (=> ($Is refType |y#5@@0| Tclass._module.Node) (=> (|Set#IsMember| |r#0| ($Box refType |y#5@@0|)) (or (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |y#5@@0|) _module.Node.nxt)) null) (|Set#IsMember| |r#0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |y#5@@0|) _module.Node.nxt)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |y#5@@0|) _module.Node.nxt)))
))) (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4)) (|Set#IsMember| |r#0| ($Box refType $o@@4))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@4))
))) (and ($HeapSucc $Heap $Heap@0) (forall (($o@@5 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@5) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@5 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@5) $f@@0))
))))) (and (=> (= (ControlFlow 0 31) 1) anon14_LoopDone_correct) (=> (= (ControlFlow 0 31) 30) anon14_LoopBody_correct)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc |r#0|)) (and (=> (= (ControlFlow 0 32) (- 0 35)) (=> |$w$loop#0@0| (or (= |x#0| null) (|Set#IsMember| |r#0| ($Box refType |x#0|))))) (=> (=> |$w$loop#0@0| (or (= |x#0| null) (|Set#IsMember| |r#0| ($Box refType |x#0|)))) (and (=> (= (ControlFlow 0 32) (- 0 34)) (=> |$w$loop#0@0| (or (= null null) (|Set#IsMember| |r#0| ($Box refType null))))) (=> (=> |$w$loop#0@0| (or (= null null) (|Set#IsMember| |r#0| ($Box refType null)))) (and (=> (= (ControlFlow 0 32) (- 0 33)) (=> |$w$loop#0@0| (forall ((|y#5@@1| T@U) ) (!  (=> ($Is refType |y#5@@1| Tclass._module.Node) (=> (|Set#IsMember| |r#0| ($Box refType |y#5@@1|)) (or (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#5@@1|) _module.Node.nxt)) null) (|Set#IsMember| |r#0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#5@@1|) _module.Node.nxt)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#5@@1|) _module.Node.nxt)))
)))) (=> (=> |$w$loop#0@0| (forall ((|y#5@@2| T@U) ) (!  (=> ($Is refType |y#5@@2| Tclass._module.Node) (=> (|Set#IsMember| |r#0| ($Box refType |y#5@@2|)) (or (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#5@@2|) _module.Node.nxt)) null) (|Set#IsMember| |r#0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#5@@2|) _module.Node.nxt)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#5@@2|) _module.Node.nxt)))
))) (=> (= (ControlFlow 0 32) 31) anon14_LoopHead_correct))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.Node) ($IsAlloc refType this Tclass._module.Node $Heap))) (and ($Is refType |x#0| Tclass._module.Node?) ($IsAlloc refType |x#0| Tclass._module.Node? $Heap))) (=> (and (and (and (and ($Is SetType |r#0| (TSet Tclass._module.Node)) ($IsAlloc SetType |r#0| (TSet Tclass._module.Node) $Heap)) (and ($Is refType |reverse#0| Tclass._module.Node?) ($IsAlloc refType |reverse#0| Tclass._module.Node? $Heap))) (and (and ($Is refType |current#0| Tclass._module.Node?) ($IsAlloc refType |current#0| Tclass._module.Node? $Heap)) true)) (and (and (and ($Is refType |tmp#0_0| Tclass._module.Node?) ($IsAlloc refType |tmp#0_0| Tclass._module.Node? $Heap)) true) (and (and (= 1 $FunctionContextHeight) (or (= |x#0| null) (|Set#IsMember| |r#0| ($Box refType |x#0|)))) (and (forall ((|y#1| T@U) ) (!  (=> ($Is refType |y#1| Tclass._module.Node) (=> (|Set#IsMember| |r#0| ($Box refType |y#1|)) (or (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#1|) _module.Node.nxt)) null) (|Set#IsMember| |r#0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#1|) _module.Node.nxt)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |y#1|) _module.Node.nxt)))
)) (= (ControlFlow 0 36) 32))))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
