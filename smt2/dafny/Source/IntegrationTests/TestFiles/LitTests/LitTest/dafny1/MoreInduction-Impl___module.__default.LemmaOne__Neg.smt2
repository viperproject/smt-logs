(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U Int) Int)
(declare-fun $generated@@1 (T@U) T@U)
(declare-fun $generated@@2 (Int) Int)
(declare-fun $generated@@3 (Int) Bool)
(declare-fun $generated@@4 (Int Int) Int)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@T T@T) T@T)
(declare-fun $generated@@44 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@21 T@U) ($generated@@22 Int) ) (!  (=> (or ($generated@@3 ($generated@@2 $generated@@22)) (< 0 $generated)) (and (=> (< ($generated@@2 $generated@@22) ($generated@@2 (- 0 1))) ($generated@@3 ($generated@@2 (+ $generated@@22 1)))) (= ($generated@@0 ($generated@@1 $generated@@21) ($generated@@2 $generated@@22)) (ite (<= ($generated@@2 (- 0 1)) ($generated@@2 $generated@@22)) (- 0 1) ($generated@@4 ($generated@@2 (- 0 ($generated@@0 ($generated@@1 $generated@@21) ($generated@@2 (+ $generated@@22 1))))) ($generated@@2 $generated@@22))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@21) ($generated@@2 $generated@@22)))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@23 T@U) ($generated@@24 Int) ) (!  (=> (or ($generated@@3 $generated@@24) (< 0 $generated)) (and (=> (< $generated@@24 ($generated@@2 (- 0 1))) ($generated@@3 (+ $generated@@24 1))) (= ($generated@@0 ($generated@@1 $generated@@23) $generated@@24) (ite (<= ($generated@@2 (- 0 1)) $generated@@24) (- 0 1) ($generated@@4 (- 0 ($generated@@0 $generated@@23 (+ $generated@@24 1))) $generated@@24)))))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@23) $generated@@24))
))))
(assert (forall (($generated@@25 Int) ) (! (= ($generated@@2 $generated@@25) $generated@@25)
 :pattern ( ($generated@@2 $generated@@25))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 ($generated@@29 $generated@@32 $generated@@31)) $generated@@31)
 :pattern ( ($generated@@29 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@29 $generated@@34 ($generated@@30 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@30 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 Int) ) (! (= ($generated@@0 ($generated@@1 $generated@@35) $generated@@36) ($generated@@0 $generated@@35 $generated@@36))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@35) $generated@@36))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@37 $generated@@48 $generated@@49 $generated@@50 ($generated@@44 $generated@@48 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@54 $generated@@51) $generated@@53 $generated@@54) $generated@@51)
 :weight 0
)) (and (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@60 $generated@@62) (= ($generated@@37 $generated@@55 $generated@@56 $generated@@57 ($generated@@44 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@61 $generated@@58) $generated@@62 $generated@@63) ($generated@@37 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@62 $generated@@63)))
 :weight 0
)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@70 $generated@@72) (= ($generated@@37 $generated@@64 $generated@@65 $generated@@66 ($generated@@44 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@37 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)))) (= ($generated@@5 $generated@@38) 3)) (= ($generated@@5 $generated@@39) 4)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@41 $generated@@73 $generated@@74 ($generated@@45 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@75) $generated@@77) $generated@@75)
 :weight 0
))) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@82 $generated@@83) (= ($generated@@41 $generated@@78 $generated@@79 ($generated@@45 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@80) $generated@@83) ($generated@@41 $generated@@78 $generated@@79 $generated@@81 $generated@@83)))
 :weight 0
))) (= ($generated@@5 $generated@@42) 5)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (= ($generated@@5 ($generated@@43 $generated@@84 $generated@@85)) 6))) (forall (($generated@@86 T@T) ($generated@@87 T@T) ) (! (= ($generated@@46 ($generated@@43 $generated@@86 $generated@@87)) $generated@@86)
 :pattern ( ($generated@@43 $generated@@86 $generated@@87))
))) (forall (($generated@@88 T@T) ($generated@@89 T@T) ) (! (= ($generated@@47 ($generated@@43 $generated@@88 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@43 $generated@@88 $generated@@89))
))))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 Bool) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@10 ($generated@@37 $generated@@38 $generated@@39 $generated@@6 ($generated@@40 $generated@@90 $generated@@91 $generated@@92 $generated@@93) $generated@@94 $generated@@95))  (=> (and (or (not (= $generated@@94 $generated@@90)) (not true)) ($generated@@10 ($generated@@29 $generated@@6 ($generated@@41 $generated@@39 $generated@@42 ($generated@@41 $generated@@38 ($generated@@43 $generated@@39 $generated@@42) $generated@@91 $generated@@94) $generated@@92)))) $generated@@93))
 :pattern ( ($generated@@37 $generated@@38 $generated@@39 $generated@@6 ($generated@@40 $generated@@90 $generated@@91 $generated@@92 $generated@@93) $generated@@94 $generated@@95))
)))
(assert (forall (($generated@@96 Int) ($generated@@97 Int) ) (! (= ($generated@@4 $generated@@96 $generated@@97) (* $generated@@96 $generated@@97))
 :pattern ( ($generated@@4 $generated@@96 $generated@@97))
)))
(assert (forall (($generated@@98 Int) ) (! (= ($generated@@30 $generated@@7 ($generated@@11 ($generated@@2 $generated@@98))) ($generated@@26 $generated@@42 ($generated@@30 $generated@@7 ($generated@@11 $generated@@98))))
 :pattern ( ($generated@@30 $generated@@7 ($generated@@11 ($generated@@2 $generated@@98))))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@T) ) (! (= ($generated@@30 $generated@@100 ($generated@@26 $generated@@100 $generated@@99)) ($generated@@26 $generated@@42 ($generated@@30 $generated@@100 $generated@@99)))
 :pattern ( ($generated@@30 $generated@@100 ($generated@@26 $generated@@100 $generated@@99)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@101 () T@U)
(declare-fun $generated@@102 () T@U)
(declare-fun $generated@@103 () T@U)
(declare-fun $generated@@104 () T@U)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 () Int)
(declare-fun $generated@@107 (T@U) Bool)
(declare-fun $generated@@108 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@109  (=> (and (= $generated@@101 ($generated@@40 $generated@@102 $generated@@103 $generated@@104 false)) (= (ControlFlow 0 2) (- 0 1))) (<= ($generated@@0 ($generated@@1 ($generated@@1 $generated@@105)) (- 0 $generated@@106)) ($generated@@2 (- 0 1))))))
(let (($generated@@110  (=> (and (and ($generated@@107 $generated@@103) ($generated@@108 $generated@@103)) (and (= 1 $generated) (= (ControlFlow 0 3) 2))) $generated@@109)))
$generated@@110)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
