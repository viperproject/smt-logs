(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@48 () Int)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U) Bool)
(declare-fun $generated@@54 (T@U) T@U)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@78 (T@U) Int)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@84 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@T T@T) T@T)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T) T@T)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@139 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@145 (T@U) T@U)
(declare-fun $generated@@146 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated@@25) $generated@@2))
(assert (= ($generated@@24 $generated@@26) $generated@@3))
(assert (= ($generated@@24 $generated@@27) $generated@@4))
(assert (= ($generated@@8 $generated@@29) 3))
(assert ($generated@@28 $generated@@29 $generated@@25 $generated@@30))
(assert ($generated@@28 $generated@@29 $generated@@26 $generated@@30))
(assert ($generated@@28 $generated@@29 $generated@@27 $generated@@31))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@35 $generated@@36) (= ($generated@@24 $generated@@36) $generated@@4))
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ) (! (= ($generated@@37 $generated@@38) (= ($generated@@24 $generated@@38) $generated@@5))
 :pattern ( ($generated@@37 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@39 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@39 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (!  (=> ($generated@@35 $generated@@43) (= $generated@@43 $generated@@27))
 :pattern ( ($generated@@35 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ) (!  (=> ($generated@@37 $generated@@45) (exists (($generated@@46 T@U) ) (= $generated@@45 ($generated@@44 $generated@@46))))
 :pattern ( ($generated@@37 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@28 $generated@@29 ($generated@@44 $generated@@47) $generated@@31) ($generated@@28 $generated@@29 $generated@@47 $generated@@31))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@44 $generated@@47) $generated@@31))
)))
(assert  (=> (<= 1 $generated@@48) (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> (or ($generated@@50 $generated@@52 $generated@@53) (and (< 1 $generated@@48) (and ($generated@@28 $generated@@29 $generated@@52 $generated@@31) ($generated@@28 $generated@@29 $generated@@53 $generated@@31)))) ($generated@@28 $generated@@29 ($generated@@49 $generated@@51 $generated@@52 $generated@@53) $generated@@30))
 :pattern ( ($generated@@49 $generated@@51 $generated@@52 $generated@@53))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@49 ($generated@@54 $generated@@55) $generated@@56 $generated@@57) ($generated@@49 $generated@@55 $generated@@56 $generated@@57))
 :pattern ( ($generated@@49 ($generated@@54 $generated@@55) $generated@@56 $generated@@57))
)))
(assert  (=> (<= 1 $generated@@48) (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (=> (or ($generated@@50 ($generated@@32 $generated@@29 $generated@@60) ($generated@@32 $generated@@29 $generated@@61)) (and (< 1 $generated@@48) (and ($generated@@28 $generated@@29 $generated@@60 $generated@@31) ($generated@@28 $generated@@29 $generated@@61 $generated@@31)))) (and (=> (not ($generated@@13 ($generated@@32 $generated@@9 ($generated@@12 ($generated@@35 ($generated@@32 $generated@@29 $generated@@61)))))) (let (($generated@@62 ($generated@@32 $generated@@29 ($generated@@58 ($generated@@32 $generated@@29 $generated@@61)))))
 (=> (not ($generated@@13 ($generated@@32 $generated@@9 ($generated@@12 ($generated@@35 ($generated@@32 $generated@@29 $generated@@60)))))) (let (($generated@@63 ($generated@@32 $generated@@29 ($generated@@58 ($generated@@32 $generated@@29 $generated@@60)))))
($generated@@50 $generated@@63 $generated@@62))))) (= ($generated@@49 ($generated@@54 $generated@@59) ($generated@@32 $generated@@29 $generated@@60) ($generated@@32 $generated@@29 $generated@@61)) (ite ($generated@@35 ($generated@@32 $generated@@29 $generated@@61)) $generated@@25 (let (($generated@@64 ($generated@@32 $generated@@29 ($generated@@58 ($generated@@32 $generated@@29 $generated@@61)))))
(ite ($generated@@35 ($generated@@32 $generated@@29 $generated@@60)) $generated@@26 (let (($generated@@65 ($generated@@32 $generated@@29 ($generated@@58 ($generated@@32 $generated@@29 $generated@@60)))))
($generated@@32 $generated@@29 ($generated@@49 ($generated@@54 $generated@@59) $generated@@65 $generated@@64)))))))))
 :weight 3
 :pattern ( ($generated@@49 ($generated@@54 $generated@@59) ($generated@@32 $generated@@29 $generated@@60) ($generated@@32 $generated@@29 $generated@@61)))
))))
(assert  (=> (<= 1 $generated@@48) (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> (or ($generated@@50 $generated@@67 $generated@@68) (and (< 1 $generated@@48) (and ($generated@@28 $generated@@29 $generated@@67 $generated@@31) ($generated@@28 $generated@@29 $generated@@68 $generated@@31)))) (and (=> (not ($generated@@35 $generated@@68)) (let (($generated@@69 ($generated@@58 $generated@@68)))
 (=> (not ($generated@@35 $generated@@67)) (let (($generated@@70 ($generated@@58 $generated@@67)))
($generated@@50 $generated@@70 $generated@@69))))) (= ($generated@@49 ($generated@@54 $generated@@66) $generated@@67 $generated@@68) (ite ($generated@@35 $generated@@68) $generated@@25 (let (($generated@@71 ($generated@@58 $generated@@68)))
(ite ($generated@@35 $generated@@67) $generated@@26 (let (($generated@@72 ($generated@@58 $generated@@67)))
($generated@@49 $generated@@66 $generated@@72 $generated@@71))))))))
 :pattern ( ($generated@@49 ($generated@@54 $generated@@66) $generated@@67 $generated@@68))
))))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@73 $generated@@31) (or ($generated@@35 $generated@@73) ($generated@@37 $generated@@73)))
 :pattern ( ($generated@@37 $generated@@73) ($generated@@28 $generated@@29 $generated@@73 $generated@@31))
 :pattern ( ($generated@@35 $generated@@73) ($generated@@28 $generated@@29 $generated@@73 $generated@@31))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@24 ($generated@@44 $generated@@74)) $generated@@5)
 :pattern ( ($generated@@44 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@58 ($generated@@44 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@44 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@39 $generated@@77 ($generated@@40 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@40 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ) (! (< ($generated@@78 $generated@@79) ($generated@@78 ($generated@@44 $generated@@79)))
 :pattern ( ($generated@@44 $generated@@79))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@80 $generated@@91 $generated@@92 $generated@@93 ($generated@@87 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@80 $generated@@98 $generated@@99 $generated@@100 ($generated@@87 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@80 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@80 $generated@@107 $generated@@108 $generated@@109 ($generated@@87 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))) (= ($generated@@8 $generated@@81) 4)) (= ($generated@@8 $generated@@82) 5)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@84 $generated@@116 $generated@@117 ($generated@@88 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@118) $generated@@120) $generated@@118)
 :weight 0
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@125 $generated@@126) (= ($generated@@84 $generated@@121 $generated@@122 ($generated@@88 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@123) $generated@@126) ($generated@@84 $generated@@121 $generated@@122 $generated@@124 $generated@@126)))
 :weight 0
))) (= ($generated@@8 $generated@@85) 6)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (= ($generated@@8 ($generated@@86 $generated@@127 $generated@@128)) 7))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (! (= ($generated@@89 ($generated@@86 $generated@@129 $generated@@130)) $generated@@129)
 :pattern ( ($generated@@86 $generated@@129 $generated@@130))
))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (! (= ($generated@@90 ($generated@@86 $generated@@131 $generated@@132)) $generated@@132)
 :pattern ( ($generated@@86 $generated@@131 $generated@@132))
))))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 Bool) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@13 ($generated@@80 $generated@@81 $generated@@82 $generated@@9 ($generated@@83 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))  (=> (and (or (not (= $generated@@137 $generated@@133)) (not true)) ($generated@@13 ($generated@@39 $generated@@9 ($generated@@84 $generated@@82 $generated@@85 ($generated@@84 $generated@@81 ($generated@@86 $generated@@82 $generated@@85) $generated@@134 $generated@@137) $generated@@135)))) $generated@@136))
 :pattern ( ($generated@@80 $generated@@81 $generated@@82 $generated@@9 ($generated@@83 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (!  (=> (and ($generated@@140 $generated@@142) ($generated@@28 $generated@@29 $generated@@141 $generated@@30)) ($generated@@139 $generated@@29 $generated@@141 $generated@@30 $generated@@142))
 :pattern ( ($generated@@139 $generated@@29 $generated@@141 $generated@@30 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> (and ($generated@@140 $generated@@144) ($generated@@28 $generated@@29 $generated@@143 $generated@@31)) ($generated@@139 $generated@@29 $generated@@143 $generated@@31 $generated@@144))
 :pattern ( ($generated@@139 $generated@@29 $generated@@143 $generated@@31 $generated@@144))
)))
(assert (= ($generated@@145 $generated@@30) $generated@@0))
(assert (= ($generated@@146 $generated@@30) $generated@@6))
(assert (= ($generated@@145 $generated@@31) $generated@@1))
(assert (= ($generated@@146 $generated@@31) $generated@@7))
(assert (= $generated@@25 ($generated@@32 $generated@@29 $generated@@25)))
(assert (= $generated@@26 ($generated@@32 $generated@@29 $generated@@26)))
(assert (= $generated@@27 ($generated@@32 $generated@@29 $generated@@27)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ) (!  (=> (and ($generated@@140 $generated@@148) (and ($generated@@37 $generated@@147) ($generated@@139 $generated@@29 $generated@@147 $generated@@31 $generated@@148))) ($generated@@139 $generated@@29 ($generated@@58 $generated@@147) $generated@@31 $generated@@148))
 :pattern ( ($generated@@139 $generated@@29 ($generated@@58 $generated@@147) $generated@@31 $generated@@148))
)))
(assert (forall (($generated@@149 T@U) ) (! (= ($generated@@44 ($generated@@32 $generated@@29 $generated@@149)) ($generated@@32 $generated@@29 ($generated@@44 $generated@@149)))
 :pattern ( ($generated@@44 ($generated@@32 $generated@@29 $generated@@149)))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@T) ) (! (= ($generated@@40 $generated@@151 ($generated@@32 $generated@@151 $generated@@150)) ($generated@@32 $generated@@85 ($generated@@40 $generated@@151 $generated@@150)))
 :pattern ( ($generated@@40 $generated@@151 ($generated@@32 $generated@@151 $generated@@150)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@164 true))
(let (($generated@@165  (=> (and (and (and (= $generated@@152 ($generated@@44 $generated@@153)) ($generated@@28 $generated@@29 $generated@@153 $generated@@31)) (and (= $generated@@154 $generated@@153) ($generated@@28 $generated@@29 $generated@@154 $generated@@31))) (and (and (= $generated@@155 $generated@@154) ($generated@@139 $generated@@29 $generated@@155 $generated@@31 $generated@@156)) (and ($generated@@139 $generated@@29 $generated@@157 $generated@@31 $generated@@156) (= (ControlFlow 0 6) (- 0 5))))) (or (< ($generated@@78 $generated@@155) ($generated@@78 $generated@@152)) (and (= ($generated@@78 $generated@@155) ($generated@@78 $generated@@152)) (< ($generated@@78 $generated@@157) ($generated@@78 $generated@@158)))))))
(let (($generated@@166  (=> (or (not (= $generated@@152 $generated@@27)) (not true)) (and (=> (= (ControlFlow 0 8) 6) $generated@@165) (=> (= (ControlFlow 0 8) 7) $generated@@164)))))
(let (($generated@@167 true))
(let (($generated@@168  (=> (= $generated@@158 ($generated@@44 $generated@@159)) (=> (and (and ($generated@@28 $generated@@29 $generated@@159 $generated@@31) (= $generated@@160 $generated@@159)) (and ($generated@@28 $generated@@29 $generated@@160 $generated@@31) (= $generated@@157 $generated@@160))) (and (=> (= (ControlFlow 0 9) 4) $generated@@167) (=> (= (ControlFlow 0 9) 8) $generated@@166))))))
(let (($generated@@169 true))
(let (($generated@@170  (=> (or (not (= $generated@@158 $generated@@27)) (not true)) (and (=> (= (ControlFlow 0 10) 9) $generated@@168) (=> (= (ControlFlow 0 10) 3) $generated@@169)))))
(let (($generated@@171 true))
(let (($generated@@172 true))
(let (($generated@@173  (=> (= $generated@@161 ($generated@@83 $generated@@162 $generated@@156 $generated false)) (and (and (=> (= (ControlFlow 0 11) 1) $generated@@172) (=> (= (ControlFlow 0 11) 2) $generated@@171)) (=> (= (ControlFlow 0 11) 10) $generated@@170)))))
(let (($generated@@174  (=> (and ($generated@@140 $generated@@156) ($generated@@163 $generated@@156)) (=> (and (and ($generated@@28 $generated@@29 $generated@@152 $generated@@31) ($generated@@28 $generated@@29 $generated@@158 $generated@@31)) (and (= 1 $generated@@48) (= (ControlFlow 0 12) 11))) $generated@@173))))
$generated@@174))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
