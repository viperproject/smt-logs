(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.IsCelebrity (T@U T@U T@U) Bool)
(declare-fun |_module.__default.IsCelebrity#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.__default.Knows (T@U T@U T@U) Bool)
(declare-fun |_module.__default.Knows#canCall| (T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc)
)
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (forall ((a@@2 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b y@@0) (not (|Set#IsMember| (|Set#Difference| a@@2 b) y@@0)))
 :pattern ( (|Set#Difference| a@@2 b) (|Set#IsMember| b y@@0))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1)  (and (|Set#IsMember| a@@3 o@@1) (not (|Set#IsMember| b@@0 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (! (= (|Set#Subset| a@@4 b@@1) (forall ((o@@3 T@U) ) (!  (=> (|Set#IsMember| a@@4 o@@3) (|Set#IsMember| b@@1 o@@3))
 :pattern ( (|Set#IsMember| a@@4 o@@3))
 :pattern ( (|Set#IsMember| b@@1 o@@3))
)))
 :pattern ( (|Set#Subset| a@@4 b@@1))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.IsCelebrity$Y T@U) (|c#0| T@U) (|people#0| T@U) ) (!  (=> (or (|_module.__default.IsCelebrity#canCall| _module._default.IsCelebrity$Y (Lit BoxType |c#0|) (Lit SetType |people#0|)) (and (< 1 $FunctionContextHeight) (and ($IsBox |c#0| _module._default.IsCelebrity$Y) ($Is SetType |people#0| (TSet _module._default.IsCelebrity$Y))))) (and (=> (|Set#IsMember| (Lit SetType |people#0|) (Lit BoxType |c#0|)) (forall ((|p#2| T@U) ) (!  (=> ($IsBox |p#2| _module._default.IsCelebrity$Y) (and (=> (|Set#IsMember| (Lit SetType |people#0|) |p#2|) (=> (or (not (= |p#2| |c#0|)) (not true)) (|_module.__default.Knows#canCall| _module._default.IsCelebrity$Y |p#2| (Lit BoxType |c#0|)))) (=> (=> (and (|Set#IsMember| (Lit SetType |people#0|) |p#2|) (or (not (= |p#2| |c#0|)) (not true))) (_module.__default.Knows _module._default.IsCelebrity$Y |p#2| (Lit BoxType |c#0|))) (=> (|Set#IsMember| (Lit SetType |people#0|) |p#2|) (=> (or (not (= |p#2| |c#0|)) (not true)) (|_module.__default.Knows#canCall| _module._default.IsCelebrity$Y (Lit BoxType |c#0|) |p#2|))))))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y |c#0| |p#2|))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y |p#2| |c#0|))
 :pattern ( (|Set#IsMember| |people#0| |p#2|))
))) (= (_module.__default.IsCelebrity _module._default.IsCelebrity$Y (Lit BoxType |c#0|) (Lit SetType |people#0|))  (and (|Set#IsMember| (Lit SetType |people#0|) (Lit BoxType |c#0|)) (forall ((|p#2@@0| T@U) ) (!  (=> ($IsBox |p#2@@0| _module._default.IsCelebrity$Y) (and (=> (and (|Set#IsMember| (Lit SetType |people#0|) |p#2@@0|) (or (not (= |p#2@@0| |c#0|)) (not true))) (_module.__default.Knows _module._default.IsCelebrity$Y |p#2@@0| (Lit BoxType |c#0|))) (=> (and (|Set#IsMember| (Lit SetType |people#0|) |p#2@@0|) (or (not (= |p#2@@0| |c#0|)) (not true))) (not (_module.__default.Knows _module._default.IsCelebrity$Y (Lit BoxType |c#0|) |p#2@@0|)))))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y |c#0| |p#2@@0|))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y |p#2@@0| |c#0|))
 :pattern ( (|Set#IsMember| |people#0| |p#2@@0|))
))))))
 :weight 3
 :pattern ( (_module.__default.IsCelebrity _module._default.IsCelebrity$Y (Lit BoxType |c#0|) (Lit SetType |people#0|)))
))))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (!  (=> (|Set#Equal| a@@5 b@@2) (= a@@5 b@@2))
 :pattern ( (|Set#Equal| a@@5 b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (c T@U) ) (!  (=> (or (not (= a@@6 c)) (not true)) (=> (and ($HeapSucc a@@6 b@@3) ($HeapSucc b@@3 c)) ($HeapSucc a@@6 c)))
 :pattern ( ($HeapSucc a@@6 b@@3) ($HeapSucc b@@3 c))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@1) ($IsAllocBox bx@@1 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@1))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.IsCelebrity$Y@@0 T@U) (|c#0@@0| T@U) (|people#0@@0| T@U) ) (!  (=> (or (|_module.__default.IsCelebrity#canCall| _module._default.IsCelebrity$Y@@0 |c#0@@0| (Lit SetType |people#0@@0|)) (and (< 1 $FunctionContextHeight) (and ($IsBox |c#0@@0| _module._default.IsCelebrity$Y@@0) ($Is SetType |people#0@@0| (TSet _module._default.IsCelebrity$Y@@0))))) (and (=> (|Set#IsMember| (Lit SetType |people#0@@0|) |c#0@@0|) (forall ((|p#1| T@U) ) (!  (=> ($IsBox |p#1| _module._default.IsCelebrity$Y@@0) (and (=> (|Set#IsMember| (Lit SetType |people#0@@0|) |p#1|) (=> (or (not (= |p#1| |c#0@@0|)) (not true)) (|_module.__default.Knows#canCall| _module._default.IsCelebrity$Y@@0 |p#1| |c#0@@0|))) (=> (=> (and (|Set#IsMember| (Lit SetType |people#0@@0|) |p#1|) (or (not (= |p#1| |c#0@@0|)) (not true))) (_module.__default.Knows _module._default.IsCelebrity$Y@@0 |p#1| |c#0@@0|)) (=> (|Set#IsMember| (Lit SetType |people#0@@0|) |p#1|) (=> (or (not (= |p#1| |c#0@@0|)) (not true)) (|_module.__default.Knows#canCall| _module._default.IsCelebrity$Y@@0 |c#0@@0| |p#1|))))))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y@@0 |c#0@@0| |p#1|))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y@@0 |p#1| |c#0@@0|))
 :pattern ( (|Set#IsMember| |people#0@@0| |p#1|))
))) (= (_module.__default.IsCelebrity _module._default.IsCelebrity$Y@@0 |c#0@@0| (Lit SetType |people#0@@0|))  (and (|Set#IsMember| (Lit SetType |people#0@@0|) |c#0@@0|) (forall ((|p#1@@0| T@U) ) (!  (=> ($IsBox |p#1@@0| _module._default.IsCelebrity$Y@@0) (and (=> (and (|Set#IsMember| (Lit SetType |people#0@@0|) |p#1@@0|) (or (not (= |p#1@@0| |c#0@@0|)) (not true))) (_module.__default.Knows _module._default.IsCelebrity$Y@@0 |p#1@@0| |c#0@@0|)) (=> (and (|Set#IsMember| (Lit SetType |people#0@@0|) |p#1@@0|) (or (not (= |p#1@@0| |c#0@@0|)) (not true))) (not (_module.__default.Knows _module._default.IsCelebrity$Y@@0 |c#0@@0| |p#1@@0|)))))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y@@0 |c#0@@0| |p#1@@0|))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y@@0 |p#1@@0| |c#0@@0|))
 :pattern ( (|Set#IsMember| |people#0@@0| |p#1@@0|))
))))))
 :weight 3
 :pattern ( (_module.__default.IsCelebrity _module._default.IsCelebrity$Y@@0 |c#0@@0| (Lit SetType |people#0@@0|)))
))))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@7)) x@@7)
 :pattern ( ($Box T@@4 x@@7))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@2 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@2 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@2)) bx@@2) ($Is SetType ($Unbox SetType bx@@2) (TSet t@@5))))
 :pattern ( ($IsBox bx@@2 (TSet t@@5)))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Equal| a@@7 b@@4) (forall ((o@@4 T@U) ) (! (= (|Set#IsMember| a@@7 o@@4) (|Set#IsMember| b@@4 o@@4))
 :pattern ( (|Set#IsMember| a@@7 o@@4))
 :pattern ( (|Set#IsMember| b@@4 o@@4))
)))
 :pattern ( (|Set#Equal| a@@7 b@@4))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.IsCelebrity$Y@@1 T@U) (|c#0@@1| T@U) (|people#0@@1| T@U) ) (!  (=> (or (|_module.__default.IsCelebrity#canCall| _module._default.IsCelebrity$Y@@1 |c#0@@1| |people#0@@1|) (and (< 1 $FunctionContextHeight) (and ($IsBox |c#0@@1| _module._default.IsCelebrity$Y@@1) ($Is SetType |people#0@@1| (TSet _module._default.IsCelebrity$Y@@1))))) (and (=> (|Set#IsMember| |people#0@@1| |c#0@@1|) (forall ((|p#0| T@U) ) (!  (=> ($IsBox |p#0| _module._default.IsCelebrity$Y@@1) (and (=> (|Set#IsMember| |people#0@@1| |p#0|) (=> (or (not (= |p#0| |c#0@@1|)) (not true)) (|_module.__default.Knows#canCall| _module._default.IsCelebrity$Y@@1 |p#0| |c#0@@1|))) (=> (=> (and (|Set#IsMember| |people#0@@1| |p#0|) (or (not (= |p#0| |c#0@@1|)) (not true))) (_module.__default.Knows _module._default.IsCelebrity$Y@@1 |p#0| |c#0@@1|)) (=> (|Set#IsMember| |people#0@@1| |p#0|) (=> (or (not (= |p#0| |c#0@@1|)) (not true)) (|_module.__default.Knows#canCall| _module._default.IsCelebrity$Y@@1 |c#0@@1| |p#0|))))))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y@@1 |c#0@@1| |p#0|))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y@@1 |p#0| |c#0@@1|))
 :pattern ( (|Set#IsMember| |people#0@@1| |p#0|))
))) (= (_module.__default.IsCelebrity _module._default.IsCelebrity$Y@@1 |c#0@@1| |people#0@@1|)  (and (|Set#IsMember| |people#0@@1| |c#0@@1|) (forall ((|p#0@@0| T@U) ) (!  (=> ($IsBox |p#0@@0| _module._default.IsCelebrity$Y@@1) (and (=> (and (|Set#IsMember| |people#0@@1| |p#0@@0|) (or (not (= |p#0@@0| |c#0@@1|)) (not true))) (_module.__default.Knows _module._default.IsCelebrity$Y@@1 |p#0@@0| |c#0@@1|)) (=> (and (|Set#IsMember| |people#0@@1| |p#0@@0|) (or (not (= |p#0@@0| |c#0@@1|)) (not true))) (not (_module.__default.Knows _module._default.IsCelebrity$Y@@1 |c#0@@1| |p#0@@0|)))))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y@@1 |c#0@@1| |p#0@@0|))
 :pattern ( (_module.__default.Knows _module._default.IsCelebrity$Y@@1 |p#0@@0| |c#0@@1|))
 :pattern ( (|Set#IsMember| |people#0@@1| |p#0@@0|))
))))))
 :pattern ( (_module.__default.IsCelebrity _module._default.IsCelebrity$Y@@1 |c#0@@1| |people#0@@1|))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |r#0@0| () T@U)
(declare-fun |c#0@@2| () T@U)
(declare-fun |Q#0@0| () T@U)
(declare-fun |x#0@1| () T@U)
(declare-fun |defass#x#0@0| () Bool)
(declare-fun _module._default.FindCelebrity1$W () T@U)
(declare-fun |Q#0@3| () T@U)
(declare-fun |x#0@2| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |x#0_0@1| () T@U)
(declare-fun |y#0_0@1| () T@U)
(declare-fun |Q#0@2| () T@U)
(declare-fun |Q#0@1| () T@U)
(declare-fun |y#0_1@1| () T@U)
(declare-fun |defass#y#0_0@0| () Bool)
(declare-fun |y#0_0@0| () T@U)
(declare-fun null () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |people#0@@2| () T@U)
(declare-fun |x#0@0| () T@U)
(declare-fun |x#1@0| () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |defass#r#0| () Bool)
(declare-fun |r#0| () T@U)
(declare-fun |Q#0| () T@U)
(declare-fun |defass#x#0| () Bool)
(declare-fun |x#0| () T@U)
(declare-fun |defass#y#0_0| () Bool)
(declare-fun |y#0_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 44) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 28) (- 0 27)) (= |r#0@0| |c#0@@2|))))
(let ((anon19_Then_correct  (=> (|Set#Equal| |Q#0@0| (|Set#UnionOne| |Set#Empty| |x#0@1|)) (and (=> (= (ControlFlow 0 29) (- 0 31)) |defass#x#0@0|) (=> |defass#x#0@0| (and (=> (= (ControlFlow 0 29) (- 0 30)) true) (=> (and (= |r#0@0| |x#0@1|) (= (ControlFlow 0 29) 28)) GeneratedUnifiedExit_correct)))))))
(let ((anon14_correct  (and (=> (= (ControlFlow 0 5) (- 0 9)) (exists ((|$as#x0_0#0_0| T@U) )  (and ($IsBox |$as#x0_0#0_0| _module._default.FindCelebrity1$W) (|Set#IsMember| |Q#0@3| |$as#x0_0#0_0|)))) (=> (exists ((|$as#x0_0#0_0@@0| T@U) )  (and ($IsBox |$as#x0_0#0_0@@0| _module._default.FindCelebrity1$W) (|Set#IsMember| |Q#0@3| |$as#x0_0#0_0@@0|))) (=> (and (=> true (and ($IsBox |x#0@2| _module._default.FindCelebrity1$W) ($IsAllocBox |x#0@2| _module._default.FindCelebrity1$W $Heap))) (|Set#IsMember| |Q#0@3| |x#0@2|)) (and (=> (= (ControlFlow 0 5) (- 0 8)) (and (|Set#Subset| |Q#0@3| |Q#0@0|) (not (|Set#Subset| |Q#0@0| |Q#0@3|)))) (=> (and (|Set#Subset| |Q#0@3| |Q#0@0|) (not (|Set#Subset| |Q#0@0| |Q#0@3|))) (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@3|) (and (=> (= (ControlFlow 0 5) (- 0 7)) (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@3|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |Q#0@3|) (|Set#IsMember| |Q#0@3| |c#0@@2|))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@3|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |Q#0@3|) (|Set#IsMember| |Q#0@3| |c#0@@2|)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@3|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |Q#0@3|) (forall ((|p#2@@1| T@U) ) (!  (=> ($IsBox |p#2@@1| _module._default.FindCelebrity1$W) (and (=> (and (|Set#IsMember| |Q#0@3| |p#2@@1|) (or (not (= |p#2@@1| |c#0@@2|)) (not true))) (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@1| |c#0@@2|)) (=> (and (|Set#IsMember| |Q#0@3| |p#2@@1|) (or (not (= |p#2@@1| |c#0@@2|)) (not true))) (not (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@1|)))))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@1|))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@1| |c#0@@2|))
 :pattern ( (|Set#IsMember| |Q#0@3| |p#2@@1|))
)))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@3|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |Q#0@3|) (forall ((|p#2@@2| T@U) ) (!  (=> ($IsBox |p#2@@2| _module._default.FindCelebrity1$W) (and (=> (and (|Set#IsMember| |Q#0@3| |p#2@@2|) (or (not (= |p#2@@2| |c#0@@2|)) (not true))) (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@2| |c#0@@2|)) (=> (and (|Set#IsMember| |Q#0@3| |p#2@@2|) (or (not (= |p#2@@2| |c#0@@2|)) (not true))) (not (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@2|)))))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@2|))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@2| |c#0@@2|))
 :pattern ( (|Set#IsMember| |Q#0@3| |p#2@@2|))
))))) (=> (= (ControlFlow 0 5) (- 0 4)) (=> |$w$loop#0@0| (|Set#IsMember| |Q#0@3| |x#0@2|)))))))))))))))
(let ((anon22_Else_correct  (=> (and (not (and ($IsBox |x#0_0@1| _module._default.FindCelebrity1$W) ($IsAllocBox |x#0_0@1| _module._default.FindCelebrity1$W $Heap))) (= (ControlFlow 0 11) 5)) anon14_correct)))
(let ((anon22_Then_correct  (=> (and (and ($IsBox |x#0_0@1| _module._default.FindCelebrity1$W) ($IsAllocBox |x#0_0@1| _module._default.FindCelebrity1$W $Heap)) (= (ControlFlow 0 10) 5)) anon14_correct)))
(let ((anon21_Else_correct  (=> (not (_module.__default.Knows _module._default.FindCelebrity1$W |x#0@1| |y#0_0@1|)) (and (=> (= (ControlFlow 0 14) (- 0 17)) true) (=> (= |Q#0@2| (|Set#Difference| |Q#0@0| (|Set#UnionOne| |Set#Empty| |y#0_0@1|))) (and (=> (= (ControlFlow 0 14) (- 0 16)) |defass#x#0@0|) (=> |defass#x#0@0| (and (=> (= (ControlFlow 0 14) (- 0 15)) (|Set#IsMember| |Q#0@2| |x#0@1|)) (=> (|Set#IsMember| |Q#0@2| |x#0@1|) (=> (= |Q#0@3| |Q#0@2|) (and (=> (= (ControlFlow 0 14) 10) anon22_Then_correct) (=> (= (ControlFlow 0 14) 11) anon22_Else_correct))))))))))))
(let ((anon21_Then_correct  (=> (_module.__default.Knows _module._default.FindCelebrity1$W |x#0@1| |y#0_0@1|) (and (=> (= (ControlFlow 0 12) (- 0 13)) |defass#x#0@0|) (=> |defass#x#0@0| (=> (and (= |Q#0@1| (|Set#Difference| |Q#0@0| (|Set#UnionOne| |Set#Empty| |x#0@1|))) (= |Q#0@3| |Q#0@1|)) (and (=> (= (ControlFlow 0 12) 10) anon22_Then_correct) (=> (= (ControlFlow 0 12) 11) anon22_Else_correct))))))))
(let ((anon9_correct  (and (=> (= (ControlFlow 0 18) (- 0 22)) (exists ((|$as#y0_0#0_0| T@U) )  (and ($IsBox |$as#y0_0#0_0| _module._default.FindCelebrity1$W) (|Set#IsMember| (|Set#Difference| |Q#0@0| (|Set#UnionOne| |Set#Empty| |x#0@1|)) |$as#y0_0#0_0|)))) (=> (exists ((|$as#y0_0#0_0@@0| T@U) )  (and ($IsBox |$as#y0_0#0_0@@0| _module._default.FindCelebrity1$W) (|Set#IsMember| (|Set#Difference| |Q#0@0| (|Set#UnionOne| |Set#Empty| |x#0@1|)) |$as#y0_0#0_0@@0|))) (=> (and (=> true (and ($IsBox |y#0_0@1| _module._default.FindCelebrity1$W) ($IsAllocBox |y#0_0@1| _module._default.FindCelebrity1$W $Heap))) (|Set#IsMember| (|Set#Difference| |Q#0@0| (|Set#UnionOne| |Set#Empty| |x#0@1|)) |y#0_0@1|)) (and (=> (= (ControlFlow 0 18) (- 0 21)) |defass#x#0@0|) (=> |defass#x#0@0| (=> ($IsAllocBox |x#0@1| _module._default.FindCelebrity1$W $Heap) (and (=> (= (ControlFlow 0 18) (- 0 20)) true) (=> ($IsAllocBox |y#0_0@1| _module._default.FindCelebrity1$W $Heap) (and (=> (= (ControlFlow 0 18) (- 0 19)) (or (not (= |x#0@1| |y#0_0@1|)) (not true))) (=> (or (not (= |x#0@1| |y#0_0@1|)) (not true)) (=> (and (|_module.__default.Knows#canCall| _module._default.FindCelebrity1$W |x#0@1| |y#0_0@1|) (|_module.__default.Knows#canCall| _module._default.FindCelebrity1$W |x#0@1| |y#0_0@1|)) (and (=> (= (ControlFlow 0 18) 12) anon21_Then_correct) (=> (= (ControlFlow 0 18) 14) anon21_Else_correct)))))))))))))))
(let ((anon20_Else_correct  (=> (and (not (and ($IsBox |y#0_1@1| _module._default.FindCelebrity1$W) ($IsAllocBox |y#0_1@1| _module._default.FindCelebrity1$W $Heap))) (= (ControlFlow 0 25) 18)) anon9_correct)))
(let ((anon20_Then_correct  (=> (and ($IsBox |y#0_1@1| _module._default.FindCelebrity1$W) ($IsAllocBox |y#0_1@1| _module._default.FindCelebrity1$W $Heap)) (and (=> (= (ControlFlow 0 23) (- 0 24)) |defass#x#0@0|) (=> |defass#x#0@0| (=> (= (ControlFlow 0 23) 18) anon9_correct))))))
(let ((anon19_Else_correct  (=> (not (|Set#Equal| |Q#0@0| (|Set#UnionOne| |Set#Empty| |x#0@1|))) (and (=> (= (ControlFlow 0 26) 23) anon20_Then_correct) (=> (= (ControlFlow 0 26) 25) anon20_Else_correct)))))
(let ((anon18_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 32) (- 0 33)) |defass#x#0@0|) (=> |defass#x#0@0| (and (=> (= (ControlFlow 0 32) 29) anon19_Then_correct) (=> (= (ControlFlow 0 32) 26) anon19_Else_correct)))))))
(let ((anon18_Then_correct  (=> (not |$w$loop#0@0|) (=> (and ($IsAllocBox |c#0@@2| _module._default.FindCelebrity1$W $Heap) ($IsAlloc SetType |Q#0@0| (TSet _module._default.FindCelebrity1$W) $Heap)) (=> (and (and (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|) (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|)) (and (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|) (= (ControlFlow 0 3) (- 0 2)))) |defass#x#0@0|)))))
(let ((anon17_LoopBody_correct  (and (=> (= (ControlFlow 0 34) 3) anon18_Then_correct) (=> (= (ControlFlow 0 34) 32) anon18_Else_correct))))
(let ((anon17_LoopDone_correct true))
(let ((anon17_LoopHead_correct  (=> (=> |defass#x#0@0| (and ($IsBox |x#0@1| _module._default.FindCelebrity1$W) ($IsAllocBox |x#0@1| _module._default.FindCelebrity1$W $Heap))) (=> (and (and ($Is SetType |Q#0@0| (TSet _module._default.FindCelebrity1$W)) ($IsAlloc SetType |Q#0@0| (TSet _module._default.FindCelebrity1$W) $Heap)) (=> |defass#y#0_0@0| (and ($IsBox |y#0_0@0| _module._default.FindCelebrity1$W) ($IsAllocBox |y#0_0@0| _module._default.FindCelebrity1$W $Heap)))) (=> (and (and (and (and (not false) |defass#x#0@0|) true) (and (=> |$w$loop#0@0| (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|)) (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|) (|Set#IsMember| |Q#0@0| |c#0@@2|)))))) (and (and (and (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|) (forall ((|p#2@@3| T@U) ) (!  (=> ($IsBox |p#2@@3| _module._default.FindCelebrity1$W) (and (=> (and (|Set#IsMember| |Q#0@0| |p#2@@3|) (or (not (= |p#2@@3| |c#0@@2|)) (not true))) (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@3| |c#0@@2|)) (=> (and (|Set#IsMember| |Q#0@0| |p#2@@3|) (or (not (= |p#2@@3| |c#0@@2|)) (not true))) (not (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@3|)))))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@3|))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@3| |c#0@@2|))
 :pattern ( (|Set#IsMember| |Q#0@0| |p#2@@3|))
))))) (=> |$w$loop#0@0| (and (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|) (and (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |Q#0@0|) (and (|Set#IsMember| |Q#0@0| |c#0@@2|) (forall ((|p#2@@4| T@U) ) (!  (=> ($IsBox |p#2@@4| _module._default.FindCelebrity1$W) (and (=> (and (|Set#IsMember| |Q#0@0| |p#2@@4|) (or (not (= |p#2@@4| |c#0@@2|)) (not true))) (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@4| |c#0@@2|)) (=> (and (|Set#IsMember| |Q#0@0| |p#2@@4|) (or (not (= |p#2@@4| |c#0@@2|)) (not true))) (not (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@4|)))))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@4|))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@4| |c#0@@2|))
 :pattern ( (|Set#IsMember| |Q#0@0| |p#2@@4|))
))))))) (and (=> |$w$loop#0@0| (|Set#IsMember| |Q#0@0| |x#0@1|)) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0))
)))) (and (and ($HeapSucc $Heap $Heap) (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0))
))) (and (=> true |defass#x#0@0|) (|Set#Subset| |Q#0@0| |people#0@@2|))))) (and (=> (= (ControlFlow 0 35) 1) anon17_LoopDone_correct) (=> (= (ControlFlow 0 35) 34) anon17_LoopBody_correct)))))))
(let ((anon2_correct  (and (=> (= (ControlFlow 0 36) (- 0 40)) (exists ((|$as#x0#0| T@U) )  (and ($IsBox |$as#x0#0| _module._default.FindCelebrity1$W) (|Set#IsMember| |people#0@@2| |$as#x0#0|)))) (=> (exists ((|$as#x0#0@@0| T@U) )  (and ($IsBox |$as#x0#0@@0| _module._default.FindCelebrity1$W) (|Set#IsMember| |people#0@@2| |$as#x0#0@@0|))) (=> (and (=> true (and ($IsBox |x#0@0| _module._default.FindCelebrity1$W) ($IsAllocBox |x#0@0| _module._default.FindCelebrity1$W $Heap))) (|Set#IsMember| |people#0@@2| |x#0@0|)) (and (=> (= (ControlFlow 0 36) (- 0 39)) (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (|Set#IsMember| |people#0@@2| |c#0@@2|))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (|Set#IsMember| |people#0@@2| |c#0@@2|)))) (and (=> (= (ControlFlow 0 36) (- 0 38)) (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (forall ((|p#2@@5| T@U) ) (!  (=> ($IsBox |p#2@@5| _module._default.FindCelebrity1$W) (and (=> (and (|Set#IsMember| |people#0@@2| |p#2@@5|) (or (not (= |p#2@@5| |c#0@@2|)) (not true))) (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@5| |c#0@@2|)) (=> (and (|Set#IsMember| |people#0@@2| |p#2@@5|) (or (not (= |p#2@@5| |c#0@@2|)) (not true))) (not (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@5|)))))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@5|))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@5| |c#0@@2|))
 :pattern ( (|Set#IsMember| |people#0@@2| |p#2@@5|))
)))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (or (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (forall ((|p#2@@6| T@U) ) (!  (=> ($IsBox |p#2@@6| _module._default.FindCelebrity1$W) (and (=> (and (|Set#IsMember| |people#0@@2| |p#2@@6|) (or (not (= |p#2@@6| |c#0@@2|)) (not true))) (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@6| |c#0@@2|)) (=> (and (|Set#IsMember| |people#0@@2| |p#2@@6|) (or (not (= |p#2@@6| |c#0@@2|)) (not true))) (not (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@6|)))))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#2@@6|))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |p#2@@6| |c#0@@2|))
 :pattern ( (|Set#IsMember| |people#0@@2| |p#2@@6|))
))))) (and (=> (= (ControlFlow 0 36) (- 0 37)) (=> |$w$loop#0@0| (|Set#IsMember| |people#0@@2| |x#0@0|))) (=> (=> |$w$loop#0@0| (|Set#IsMember| |people#0@@2| |x#0@0|)) (=> (= (ControlFlow 0 36) 35) anon17_LoopHead_correct))))))))))))
(let ((anon16_Else_correct  (=> (and (not (and ($IsBox |x#1@0| _module._default.FindCelebrity1$W) ($IsAllocBox |x#1@0| _module._default.FindCelebrity1$W $Heap))) (= (ControlFlow 0 42) 36)) anon2_correct)))
(let ((anon16_Then_correct  (=> (and (and ($IsBox |x#1@0| _module._default.FindCelebrity1$W) ($IsAllocBox |x#1@0| _module._default.FindCelebrity1$W $Heap)) (= (ControlFlow 0 41) 36)) anon2_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 43) 41) anon16_Then_correct) (=> (= (ControlFlow 0 43) 42) anon16_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is SetType |people#0@@2| (TSet _module._default.FindCelebrity1$W)) ($IsAlloc SetType |people#0@@2| (TSet _module._default.FindCelebrity1$W) $Heap))) (and (and ($IsBox |c#0@@2| _module._default.FindCelebrity1$W) ($IsAllocBox |c#0@@2| _module._default.FindCelebrity1$W $Heap)) (=> |defass#r#0| (and ($IsBox |r#0| _module._default.FindCelebrity1$W) ($IsAllocBox |r#0| _module._default.FindCelebrity1$W $Heap))))) (=> (and (and (and (and ($Is SetType |Q#0| (TSet _module._default.FindCelebrity1$W)) ($IsAlloc SetType |Q#0| (TSet _module._default.FindCelebrity1$W) $Heap)) true) (and (=> |defass#x#0| (and ($IsBox |x#0| _module._default.FindCelebrity1$W) ($IsAllocBox |x#0| _module._default.FindCelebrity1$W $Heap))) true)) (and (and (and (=> |defass#y#0_0| (and ($IsBox |y#0_0| _module._default.FindCelebrity1$W) ($IsAllocBox |y#0_0| _module._default.FindCelebrity1$W $Heap))) true) (= 2 $FunctionContextHeight)) (and (and (|_module.__default.IsCelebrity#canCall| _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (and (_module.__default.IsCelebrity _module._default.FindCelebrity1$W |c#0@@2| |people#0@@2|) (and (|Set#IsMember| |people#0@@2| |c#0@@2|) (forall ((|p#1@@1| T@U) ) (!  (=> ($IsBox |p#1@@1| _module._default.FindCelebrity1$W) (and (=> (and (|Set#IsMember| |people#0@@2| |p#1@@1|) (or (not (= |p#1@@1| |c#0@@2|)) (not true))) (_module.__default.Knows _module._default.FindCelebrity1$W |p#1@@1| |c#0@@2|)) (=> (and (|Set#IsMember| |people#0@@2| |p#1@@1|) (or (not (= |p#1@@1| |c#0@@2|)) (not true))) (not (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#1@@1|)))))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |c#0@@2| |p#1@@1|))
 :pattern ( (_module.__default.Knows _module._default.FindCelebrity1$W |p#1@@1| |c#0@@2|))
 :pattern ( (|Set#IsMember| |people#0@@2| |p#1@@1|))
))))) (= (ControlFlow 0 44) 43)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
