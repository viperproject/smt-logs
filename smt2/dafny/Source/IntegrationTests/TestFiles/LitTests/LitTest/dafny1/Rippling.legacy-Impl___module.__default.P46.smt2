(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 () T@U)
(declare-fun $generated@@12 () T@U)
(declare-fun $generated@@13 (T@T) Int)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 () T@T)
(declare-fun $generated@@16 () T@T)
(declare-fun $generated@@17 (Bool) T@U)
(declare-fun $generated@@18 (T@U) Bool)
(declare-fun $generated@@19 (Int) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 (Real) T@U)
(declare-fun $generated@@22 (T@U) Real)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@U T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@36 (T@U T@U) T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@40 (T@U T@U) T@U)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@U T@U) Bool)
(declare-fun $generated@@50 () Int)
(declare-fun $generated@@51 (T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@53 (T@U T@U) Bool)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@55 (T@U) T@U)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@U) Bool)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@104 (T@U) T@U)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@112 (T@U) T@U)
(declare-fun $generated@@115 (T@U) T@U)
(declare-fun $generated@@120 (T@U) Int)
(declare-fun $generated@@133 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@134 () T@T)
(declare-fun $generated@@135 () T@T)
(declare-fun $generated@@136 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@137 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@138 () T@T)
(declare-fun $generated@@139 (T@T T@T) T@T)
(declare-fun $generated@@140 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@141 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@142 (T@T) T@T)
(declare-fun $generated@@143 (T@T) T@T)
(declare-fun $generated@@192 (T@U) T@U)
(declare-fun $generated@@193 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@13 $generated@@14) 0) (= ($generated@@13 $generated@@15) 1)) (= ($generated@@13 $generated@@16) 2)) (forall (($generated@@23 Bool) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Int) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))) (forall (($generated@@27 Real) ) (! (= ($generated@@22 ($generated@@21 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@21 $generated@@27))
))) (forall (($generated@@28 T@U) ) (! (= ($generated@@21 ($generated@@22 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@22 $generated@@28))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10 $generated@@11 $generated@@12)
)
(assert (= ($generated@@13 $generated@@30) 3))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@29 $generated@@30 ($generated@@31 $generated@@34 $generated@@35) $generated@@32)  (and ($generated@@29 $generated@@30 $generated@@34 $generated@@33) ($generated@@29 $generated@@30 $generated@@35 $generated@@32)))
 :pattern ( ($generated@@29 $generated@@30 ($generated@@31 $generated@@34 $generated@@35) $generated@@32))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@29 $generated@@30 ($generated@@36 $generated@@38 $generated@@39) $generated@@37)  (and ($generated@@29 $generated@@30 $generated@@38 $generated@@33) ($generated@@29 $generated@@30 $generated@@39 $generated@@33)))
 :pattern ( ($generated@@29 $generated@@30 ($generated@@36 $generated@@38 $generated@@39) $generated@@37))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@29 $generated@@30 ($generated@@40 $generated@@42 $generated@@43) $generated@@41)  (and ($generated@@29 $generated@@30 $generated@@42 $generated@@37) ($generated@@29 $generated@@30 $generated@@43 $generated@@41)))
 :pattern ( ($generated@@29 $generated@@30 ($generated@@40 $generated@@42 $generated@@43) $generated@@41))
)))
(assert (= ($generated@@44 $generated@@45) $generated@@3))
(assert (= ($generated@@44 $generated@@46) $generated@@7))
(assert ($generated@@29 $generated@@30 $generated@@45 $generated@@32))
(assert ($generated@@29 $generated@@30 $generated@@46 $generated@@41))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@47 $generated@@48 $generated@@49) (= $generated@@48 $generated@@49))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49))
)))
(assert  (=> (<= 3 $generated@@50) (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (!  (=> (or ($generated@@53 $generated@@58 $generated@@59) (and (< 3 $generated@@50) (and ($generated@@29 $generated@@30 $generated@@58 $generated@@32) ($generated@@29 $generated@@30 $generated@@59 $generated@@32)))) (and (=> (not ($generated@@54 $generated@@58)) (let (($generated@@60 ($generated@@55 $generated@@58)))
 (=> (not ($generated@@54 $generated@@59)) (let (($generated@@61 ($generated@@55 $generated@@59)))
($generated@@53 $generated@@60 $generated@@61))))) (= ($generated@@51 ($generated@@52 $generated@@57) $generated@@58 $generated@@59) (ite ($generated@@54 $generated@@58) $generated@@46 (let (($generated@@62 ($generated@@55 $generated@@58)))
(let (($generated@@63 ($generated@@56 $generated@@58)))
(ite ($generated@@54 $generated@@59) $generated@@46 (let (($generated@@64 ($generated@@55 $generated@@59)))
(let (($generated@@65 ($generated@@56 $generated@@59)))
($generated@@40 ($generated@@36 $generated@@63 $generated@@65) ($generated@@51 $generated@@57 $generated@@62 $generated@@64)))))))))))
 :pattern ( ($generated@@51 ($generated@@52 $generated@@57) $generated@@58 $generated@@59))
))))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 $generated@@67) $generated@@67)
 :pattern ( ($generated@@66 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@54 $generated@@69) (= ($generated@@44 $generated@@69) $generated@@3))
 :pattern ( ($generated@@54 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@70 $generated@@71) (= ($generated@@44 $generated@@71) $generated@@4))
 :pattern ( ($generated@@70 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 ($generated@@72 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@72 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@70 $generated@@76) (exists (($generated@@77 T@U) ($generated@@78 T@U) ) (= $generated@@76 ($generated@@31 $generated@@77 $generated@@78))))
 :pattern ( ($generated@@70 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ) (!  (=> ($generated@@54 $generated@@79) (= $generated@@79 $generated@@45))
 :pattern ( ($generated@@54 $generated@@79))
)))
(assert  (=> (<= 3 $generated@@50) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> (or ($generated@@53 $generated@@81 $generated@@82) (and (< 3 $generated@@50) (and ($generated@@29 $generated@@30 $generated@@81 $generated@@32) ($generated@@29 $generated@@30 $generated@@82 $generated@@32)))) ($generated@@29 $generated@@30 ($generated@@51 $generated@@80 $generated@@81 $generated@@82) $generated@@41))
 :pattern ( ($generated@@51 $generated@@80 $generated@@81 $generated@@82))
))))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@51 ($generated@@52 $generated@@83) $generated@@84 $generated@@85) ($generated@@51 $generated@@83 $generated@@84 $generated@@85))
 :pattern ( ($generated@@51 ($generated@@52 $generated@@83) $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@86 $generated@@32) (or ($generated@@54 $generated@@86) ($generated@@70 $generated@@86)))
 :pattern ( ($generated@@70 $generated@@86) ($generated@@29 $generated@@30 $generated@@86 $generated@@32))
 :pattern ( ($generated@@54 $generated@@86) ($generated@@29 $generated@@30 $generated@@86 $generated@@32))
)))
(assert  (=> (<= 3 $generated@@50) (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (=> (or ($generated@@53 ($generated@@66 $generated@@30 $generated@@88) ($generated@@66 $generated@@30 $generated@@89)) (and (< 3 $generated@@50) (and ($generated@@29 $generated@@30 $generated@@88 $generated@@32) ($generated@@29 $generated@@30 $generated@@89 $generated@@32)))) (and (=> (not ($generated@@18 ($generated@@66 $generated@@14 ($generated@@17 ($generated@@54 ($generated@@66 $generated@@30 $generated@@88)))))) (let (($generated@@90 ($generated@@66 $generated@@30 ($generated@@55 ($generated@@66 $generated@@30 $generated@@88)))))
 (=> (not ($generated@@18 ($generated@@66 $generated@@14 ($generated@@17 ($generated@@54 ($generated@@66 $generated@@30 $generated@@89)))))) (let (($generated@@91 ($generated@@66 $generated@@30 ($generated@@55 ($generated@@66 $generated@@30 $generated@@89)))))
($generated@@53 $generated@@90 $generated@@91))))) (= ($generated@@51 ($generated@@52 $generated@@87) ($generated@@66 $generated@@30 $generated@@88) ($generated@@66 $generated@@30 $generated@@89)) (ite ($generated@@54 ($generated@@66 $generated@@30 $generated@@88)) $generated@@46 (let (($generated@@92 ($generated@@66 $generated@@30 ($generated@@55 ($generated@@66 $generated@@30 $generated@@88)))))
(let (($generated@@93 ($generated@@66 $generated@@30 ($generated@@56 ($generated@@66 $generated@@30 $generated@@88)))))
(ite ($generated@@54 ($generated@@66 $generated@@30 $generated@@89)) $generated@@46 (let (($generated@@94 ($generated@@66 $generated@@30 ($generated@@55 ($generated@@66 $generated@@30 $generated@@89)))))
(let (($generated@@95 ($generated@@66 $generated@@30 ($generated@@56 ($generated@@66 $generated@@30 $generated@@89)))))
($generated@@66 $generated@@30 ($generated@@40 ($generated@@66 $generated@@30 ($generated@@36 $generated@@93 $generated@@95)) ($generated@@66 $generated@@30 ($generated@@51 ($generated@@52 $generated@@87) $generated@@92 $generated@@94)))))))))))))
 :weight 3
 :pattern ( ($generated@@51 ($generated@@52 $generated@@87) ($generated@@66 $generated@@30 $generated@@88) ($generated@@66 $generated@@30 $generated@@89)))
))))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@44 ($generated@@31 $generated@@96 $generated@@97)) $generated@@4)
 :pattern ( ($generated@@31 $generated@@96 $generated@@97))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@56 ($generated@@31 $generated@@98 $generated@@99)) $generated@@98)
 :pattern ( ($generated@@31 $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@55 ($generated@@31 $generated@@100 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@31 $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@44 ($generated@@36 $generated@@102 $generated@@103)) $generated@@5)
 :pattern ( ($generated@@36 $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@104 ($generated@@36 $generated@@105 $generated@@106)) $generated@@105)
 :pattern ( ($generated@@36 $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@107 ($generated@@36 $generated@@108 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@36 $generated@@108 $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@44 ($generated@@40 $generated@@110 $generated@@111)) $generated@@8)
 :pattern ( ($generated@@40 $generated@@110 $generated@@111))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@112 ($generated@@40 $generated@@113 $generated@@114)) $generated@@113)
 :pattern ( ($generated@@40 $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@115 ($generated@@40 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@40 $generated@@116 $generated@@117))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@T) ) (! (= ($generated@@72 $generated@@119 ($generated@@73 $generated@@119 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@73 $generated@@119 $generated@@118))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (! (< ($generated@@120 $generated@@121) ($generated@@120 ($generated@@31 $generated@@121 $generated@@122)))
 :pattern ( ($generated@@31 $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (! (< ($generated@@120 $generated@@124) ($generated@@120 ($generated@@31 $generated@@123 $generated@@124)))
 :pattern ( ($generated@@31 $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! (< ($generated@@120 $generated@@125) ($generated@@120 ($generated@@36 $generated@@125 $generated@@126)))
 :pattern ( ($generated@@36 $generated@@125 $generated@@126))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (! (< ($generated@@120 $generated@@128) ($generated@@120 ($generated@@36 $generated@@127 $generated@@128)))
 :pattern ( ($generated@@36 $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (! (< ($generated@@120 $generated@@129) ($generated@@120 ($generated@@40 $generated@@129 $generated@@130)))
 :pattern ( ($generated@@40 $generated@@129 $generated@@130))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (! (< ($generated@@120 $generated@@132) ($generated@@120 ($generated@@40 $generated@@131 $generated@@132)))
 :pattern ( ($generated@@40 $generated@@131 $generated@@132))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@144 T@T) ($generated@@145 T@T) ($generated@@146 T@T) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (! (= ($generated@@133 $generated@@144 $generated@@145 $generated@@146 ($generated@@140 $generated@@144 $generated@@145 $generated@@146 $generated@@148 $generated@@149 $generated@@150 $generated@@147) $generated@@149 $generated@@150) $generated@@147)
 :weight 0
)) (and (forall (($generated@@151 T@T) ($generated@@152 T@T) ($generated@@153 T@T) ($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or (= $generated@@156 $generated@@158) (= ($generated@@133 $generated@@151 $generated@@152 $generated@@153 ($generated@@140 $generated@@151 $generated@@152 $generated@@153 $generated@@155 $generated@@156 $generated@@157 $generated@@154) $generated@@158 $generated@@159) ($generated@@133 $generated@@151 $generated@@152 $generated@@153 $generated@@155 $generated@@158 $generated@@159)))
 :weight 0
)) (forall (($generated@@160 T@T) ($generated@@161 T@T) ($generated@@162 T@T) ($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ) (!  (or (= $generated@@166 $generated@@168) (= ($generated@@133 $generated@@160 $generated@@161 $generated@@162 ($generated@@140 $generated@@160 $generated@@161 $generated@@162 $generated@@164 $generated@@165 $generated@@166 $generated@@163) $generated@@167 $generated@@168) ($generated@@133 $generated@@160 $generated@@161 $generated@@162 $generated@@164 $generated@@167 $generated@@168)))
 :weight 0
)))) (= ($generated@@13 $generated@@134) 4)) (= ($generated@@13 $generated@@135) 5)) (forall (($generated@@169 T@T) ($generated@@170 T@T) ($generated@@171 T@U) ($generated@@172 T@U) ($generated@@173 T@U) ) (! (= ($generated@@137 $generated@@169 $generated@@170 ($generated@@141 $generated@@169 $generated@@170 $generated@@172 $generated@@173 $generated@@171) $generated@@173) $generated@@171)
 :weight 0
))) (forall (($generated@@174 T@T) ($generated@@175 T@T) ($generated@@176 T@U) ($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 T@U) ) (!  (or (= $generated@@178 $generated@@179) (= ($generated@@137 $generated@@174 $generated@@175 ($generated@@141 $generated@@174 $generated@@175 $generated@@177 $generated@@178 $generated@@176) $generated@@179) ($generated@@137 $generated@@174 $generated@@175 $generated@@177 $generated@@179)))
 :weight 0
))) (= ($generated@@13 $generated@@138) 6)) (forall (($generated@@180 T@T) ($generated@@181 T@T) ) (= ($generated@@13 ($generated@@139 $generated@@180 $generated@@181)) 7))) (forall (($generated@@182 T@T) ($generated@@183 T@T) ) (! (= ($generated@@142 ($generated@@139 $generated@@182 $generated@@183)) $generated@@182)
 :pattern ( ($generated@@139 $generated@@182 $generated@@183))
))) (forall (($generated@@184 T@T) ($generated@@185 T@T) ) (! (= ($generated@@143 ($generated@@139 $generated@@184 $generated@@185)) $generated@@185)
 :pattern ( ($generated@@139 $generated@@184 $generated@@185))
))))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@U) ($generated@@188 T@U) ($generated@@189 Bool) ($generated@@190 T@U) ($generated@@191 T@U) ) (! (= ($generated@@18 ($generated@@133 $generated@@134 $generated@@135 $generated@@14 ($generated@@136 $generated@@186 $generated@@187 $generated@@188 $generated@@189) $generated@@190 $generated@@191))  (=> (and (or (not (= $generated@@190 $generated@@186)) (not true)) ($generated@@18 ($generated@@72 $generated@@14 ($generated@@137 $generated@@135 $generated@@138 ($generated@@137 $generated@@134 ($generated@@139 $generated@@135 $generated@@138) $generated@@187 $generated@@190) $generated@@188)))) $generated@@189))
 :pattern ( ($generated@@133 $generated@@134 $generated@@135 $generated@@14 ($generated@@136 $generated@@186 $generated@@187 $generated@@188 $generated@@189) $generated@@190 $generated@@191))
)))
(assert (= ($generated@@192 $generated@@33) $generated@@0))
(assert (= ($generated@@193 $generated@@33) $generated@@9))
(assert (= ($generated@@192 $generated@@32) $generated@@1))
(assert (= ($generated@@193 $generated@@32) $generated@@10))
(assert (= ($generated@@192 $generated@@41) $generated@@2))
(assert (= ($generated@@193 $generated@@41) $generated@@11))
(assert (= ($generated@@192 $generated@@37) $generated@@6))
(assert (= ($generated@@193 $generated@@37) $generated@@12))
(assert (= $generated@@45 ($generated@@66 $generated@@30 $generated@@45)))
(assert (= $generated@@46 ($generated@@66 $generated@@30 $generated@@46)))
(assert (forall (($generated@@194 T@U) ($generated@@195 T@U) ) (! (= ($generated@@31 ($generated@@66 $generated@@30 $generated@@194) ($generated@@66 $generated@@30 $generated@@195)) ($generated@@66 $generated@@30 ($generated@@31 $generated@@194 $generated@@195)))
 :pattern ( ($generated@@31 ($generated@@66 $generated@@30 $generated@@194) ($generated@@66 $generated@@30 $generated@@195)))
)))
(assert (forall (($generated@@196 T@U) ($generated@@197 T@U) ) (! (= ($generated@@36 ($generated@@66 $generated@@30 $generated@@196) ($generated@@66 $generated@@30 $generated@@197)) ($generated@@66 $generated@@30 ($generated@@36 $generated@@196 $generated@@197)))
 :pattern ( ($generated@@36 ($generated@@66 $generated@@30 $generated@@196) ($generated@@66 $generated@@30 $generated@@197)))
)))
(assert (forall (($generated@@198 T@U) ($generated@@199 T@U) ) (! (= ($generated@@40 ($generated@@66 $generated@@30 $generated@@198) ($generated@@66 $generated@@30 $generated@@199)) ($generated@@66 $generated@@30 ($generated@@40 $generated@@198 $generated@@199)))
 :pattern ( ($generated@@40 ($generated@@66 $generated@@30 $generated@@198) ($generated@@66 $generated@@30 $generated@@199)))
)))
(assert (forall (($generated@@200 T@U) ($generated@@201 T@T) ) (! (= ($generated@@73 $generated@@201 ($generated@@66 $generated@@201 $generated@@200)) ($generated@@66 $generated@@138 ($generated@@73 $generated@@201 $generated@@200)))
 :pattern ( ($generated@@73 $generated@@201 ($generated@@66 $generated@@201 $generated@@200)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@202 () T@U)
(declare-fun $generated@@203 () T@U)
(declare-fun $generated@@204 () T@U)
(declare-fun $generated@@205 () T@U)
(declare-fun $generated@@206 (T@U) Bool)
(declare-fun $generated@@207 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@208  (=> (and (= $generated@@202 ($generated@@136 $generated@@203 $generated@@204 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@209 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@209 $generated@@32) ($generated@@47 ($generated@@51 ($generated@@52 ($generated@@52 $generated@@205)) ($generated@@66 $generated@@30 $generated@@45) $generated@@209) $generated@@46))
 :pattern ( ($generated@@51 ($generated@@52 ($generated@@52 $generated@@205)) $generated@@45 $generated@@209))
)))))
(let (($generated@@210  (=> (and (and ($generated@@206 $generated@@204) ($generated@@207 $generated@@204)) (and (= 4 $generated@@50) (= (ControlFlow 0 3) 2))) $generated@@208)))
$generated@@210)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
