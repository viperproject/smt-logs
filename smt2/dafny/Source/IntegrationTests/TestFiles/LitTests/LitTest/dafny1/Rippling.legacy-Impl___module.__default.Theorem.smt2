(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 () Int)
(declare-fun $generated@@30 (T@U T@U T@U) T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U T@U) Bool)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 (T@U T@U) Bool)
(declare-fun $generated@@48 (T@U T@U) Bool)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@U T@U) T@U)
(declare-fun $generated@@71 (T@U) Bool)
(declare-fun $generated@@72 () T@U)
(declare-fun $generated@@85 (T@U) Bool)
(declare-fun $generated@@108 (T@U) Int)
(declare-fun $generated@@115 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@116 () T@T)
(declare-fun $generated@@117 () T@T)
(declare-fun $generated@@118 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@119 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@120 () T@T)
(declare-fun $generated@@121 (T@T T@T) T@T)
(declare-fun $generated@@122 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@123 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@124 (T@T) T@T)
(declare-fun $generated@@125 (T@T) T@T)
(declare-fun $generated@@174 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@175 (T@U) Bool)
(declare-fun $generated@@180 (T@U) T@U)
(declare-fun $generated@@181 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@23) 3))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@24 $generated@@27 $generated@@28) $generated@@25)  (and ($generated@@22 $generated@@23 $generated@@27 $generated@@26) ($generated@@22 $generated@@23 $generated@@28 $generated@@25)))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@24 $generated@@27 $generated@@28) $generated@@25))
)))
(assert  (=> (<= 2 $generated@@29) (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> (or ($generated@@33 ($generated@@32 $generated@@23 $generated@@38) ($generated@@32 $generated@@23 $generated@@39)) (and (< 2 $generated@@29) (and ($generated@@22 $generated@@23 $generated@@38 $generated@@25) ($generated@@22 $generated@@23 $generated@@39 $generated@@25)))) (and (=> (not ($generated@@11 ($generated@@32 $generated@@7 ($generated@@10 ($generated@@34 ($generated@@32 $generated@@23 $generated@@38)))))) (let (($generated@@40 ($generated@@32 $generated@@23 ($generated@@35 ($generated@@32 $generated@@23 $generated@@38)))))
($generated@@33 $generated@@40 ($generated@@32 $generated@@23 $generated@@39)))) (= ($generated@@30 ($generated@@31 $generated@@37) ($generated@@32 $generated@@23 $generated@@38) ($generated@@32 $generated@@23 $generated@@39)) (ite ($generated@@34 ($generated@@32 $generated@@23 $generated@@38)) $generated@@39 (let (($generated@@41 ($generated@@32 $generated@@23 ($generated@@35 ($generated@@32 $generated@@23 $generated@@38)))))
(let (($generated@@42 ($generated@@32 $generated@@23 ($generated@@36 ($generated@@32 $generated@@23 $generated@@38)))))
($generated@@32 $generated@@23 ($generated@@24 $generated@@42 ($generated@@32 $generated@@23 ($generated@@30 ($generated@@31 $generated@@37) $generated@@41 ($generated@@32 $generated@@23 $generated@@39)))))))))))
 :weight 3
 :pattern ( ($generated@@30 ($generated@@31 $generated@@37) ($generated@@32 $generated@@23 $generated@@38) ($generated@@32 $generated@@23 $generated@@39)))
))))
(assert (= ($generated@@43 $generated@@44) $generated@@2))
(assert ($generated@@22 $generated@@23 $generated@@44 $generated@@25))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@45 $generated@@46 $generated@@47) (= $generated@@46 $generated@@47))
 :pattern ( ($generated@@45 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@48 $generated@@49 $generated@@50) (= $generated@@49 $generated@@50))
 :pattern ( ($generated@@48 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@32 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@32 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@34 $generated@@53) (= ($generated@@43 $generated@@53) $generated@@2))
 :pattern ( ($generated@@34 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@54 $generated@@55) (= ($generated@@43 $generated@@55) $generated@@3))
 :pattern ( ($generated@@54 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@56 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@56 $generated@@59 $generated@@58))
)))
(assert  (=> (<= 2 $generated@@29) (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (or ($generated@@33 $generated@@61 $generated@@62) (and (< 2 $generated@@29) (and ($generated@@22 $generated@@23 $generated@@61 $generated@@25) ($generated@@22 $generated@@23 $generated@@62 $generated@@25)))) (and (=> (not ($generated@@34 $generated@@61)) (let (($generated@@63 ($generated@@35 $generated@@61)))
($generated@@33 $generated@@63 $generated@@62))) (= ($generated@@30 ($generated@@31 $generated@@60) $generated@@61 $generated@@62) (ite ($generated@@34 $generated@@61) $generated@@62 (let (($generated@@64 ($generated@@35 $generated@@61)))
(let (($generated@@65 ($generated@@36 $generated@@61)))
($generated@@24 $generated@@65 ($generated@@30 $generated@@60 $generated@@64 $generated@@62))))))))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@60) $generated@@61 $generated@@62))
))))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@54 $generated@@66) (exists (($generated@@67 T@U) ($generated@@68 T@U) ) (= $generated@@66 ($generated@@24 $generated@@67 $generated@@68))))
 :pattern ( ($generated@@54 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@34 $generated@@69) (= $generated@@69 $generated@@44))
 :pattern ( ($generated@@34 $generated@@69))
)))
(assert  (=> (<= 3 $generated@@29) (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> (or ($generated@@71 $generated@@74) (and (< 3 $generated@@29) ($generated@@22 $generated@@23 $generated@@74 $generated@@25))) (and (=> (not ($generated@@34 $generated@@74)) (let (($generated@@75 ($generated@@35 $generated@@74)))
(let (($generated@@76 ($generated@@36 $generated@@74)))
 (and ($generated@@71 $generated@@75) ($generated@@33 ($generated@@70 $generated@@73 $generated@@75) ($generated@@24 $generated@@76 ($generated@@32 $generated@@23 $generated@@44))))))) (= ($generated@@70 ($generated@@31 $generated@@73) $generated@@74) (ite ($generated@@34 $generated@@74) $generated@@44 (let (($generated@@77 ($generated@@35 $generated@@74)))
(let (($generated@@78 ($generated@@36 $generated@@74)))
($generated@@30 ($generated@@31 $generated@@72) ($generated@@70 $generated@@73 $generated@@77) ($generated@@24 $generated@@78 ($generated@@32 $generated@@23 $generated@@44)))))))))
 :pattern ( ($generated@@70 ($generated@@31 $generated@@73) $generated@@74))
))))
(assert  (=> (<= 2 $generated@@29) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (=> (or ($generated@@33 $generated@@80 $generated@@81) (and (< 2 $generated@@29) (and ($generated@@22 $generated@@23 $generated@@80 $generated@@25) ($generated@@22 $generated@@23 $generated@@81 $generated@@25)))) ($generated@@22 $generated@@23 ($generated@@30 $generated@@79 $generated@@80 $generated@@81) $generated@@25))
 :pattern ( ($generated@@30 $generated@@79 $generated@@80 $generated@@81))
))))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@30 ($generated@@31 $generated@@82) $generated@@83 $generated@@84) ($generated@@30 $generated@@82 $generated@@83 $generated@@84))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@82) $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ) (!  (=> ($generated@@85 $generated@@86) (or ($generated@@34 $generated@@86) ($generated@@54 $generated@@86)))
 :pattern ( ($generated@@85 $generated@@86))
)))
(assert  (=> (<= 3 $generated@@29) (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (or ($generated@@71 $generated@@88) (and (< 3 $generated@@29) ($generated@@22 $generated@@23 $generated@@88 $generated@@25))) ($generated@@22 $generated@@23 ($generated@@70 $generated@@87 $generated@@88) $generated@@25))
 :pattern ( ($generated@@70 $generated@@87 $generated@@88))
))))
(assert (forall (($generated@@89 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@89 $generated@@25) (or ($generated@@34 $generated@@89) ($generated@@54 $generated@@89)))
 :pattern ( ($generated@@54 $generated@@89) ($generated@@22 $generated@@23 $generated@@89 $generated@@25))
 :pattern ( ($generated@@34 $generated@@89) ($generated@@22 $generated@@23 $generated@@89 $generated@@25))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> (and ($generated@@54 $generated@@90) ($generated@@54 $generated@@91)) (= ($generated@@48 $generated@@90 $generated@@91)  (and ($generated@@45 ($generated@@36 $generated@@90) ($generated@@36 $generated@@91)) ($generated@@48 ($generated@@35 $generated@@90) ($generated@@35 $generated@@91)))))
 :pattern ( ($generated@@48 $generated@@90 $generated@@91) ($generated@@54 $generated@@90))
 :pattern ( ($generated@@48 $generated@@90 $generated@@91) ($generated@@54 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ) (!  (=> (and ($generated@@34 $generated@@92) ($generated@@34 $generated@@93)) ($generated@@48 $generated@@92 $generated@@93))
 :pattern ( ($generated@@48 $generated@@92 $generated@@93) ($generated@@34 $generated@@92))
 :pattern ( ($generated@@48 $generated@@92 $generated@@93) ($generated@@34 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@43 ($generated@@24 $generated@@94 $generated@@95)) $generated@@3)
 :pattern ( ($generated@@24 $generated@@94 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@36 ($generated@@24 $generated@@96 $generated@@97)) $generated@@96)
 :pattern ( ($generated@@24 $generated@@96 $generated@@97))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@35 ($generated@@24 $generated@@98 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@24 $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@T) ) (! (= ($generated@@56 $generated@@101 ($generated@@57 $generated@@101 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@57 $generated@@101 $generated@@100))
)))
(assert  (=> (<= 3 $generated@@29) (forall (($generated@@102 T@U) ($generated@@103 T@U) ) (!  (=> (or ($generated@@71 ($generated@@32 $generated@@23 $generated@@103)) (and (< 3 $generated@@29) ($generated@@22 $generated@@23 $generated@@103 $generated@@25))) (and (=> (not ($generated@@11 ($generated@@32 $generated@@7 ($generated@@10 ($generated@@34 ($generated@@32 $generated@@23 $generated@@103)))))) (let (($generated@@104 ($generated@@32 $generated@@23 ($generated@@35 ($generated@@32 $generated@@23 $generated@@103)))))
(let (($generated@@105 ($generated@@32 $generated@@23 ($generated@@36 ($generated@@32 $generated@@23 $generated@@103)))))
 (and ($generated@@71 $generated@@104) ($generated@@33 ($generated@@70 ($generated@@31 $generated@@102) $generated@@104) ($generated@@24 $generated@@105 ($generated@@32 $generated@@23 $generated@@44))))))) (= ($generated@@70 ($generated@@31 $generated@@102) ($generated@@32 $generated@@23 $generated@@103)) (ite ($generated@@34 ($generated@@32 $generated@@23 $generated@@103)) $generated@@44 (let (($generated@@106 ($generated@@32 $generated@@23 ($generated@@35 ($generated@@32 $generated@@23 $generated@@103)))))
(let (($generated@@107 ($generated@@32 $generated@@23 ($generated@@36 ($generated@@32 $generated@@23 $generated@@103)))))
($generated@@32 $generated@@23 ($generated@@30 ($generated@@31 $generated@@72) ($generated@@32 $generated@@23 ($generated@@70 ($generated@@31 $generated@@102) $generated@@106)) ($generated@@32 $generated@@23 ($generated@@24 $generated@@107 ($generated@@32 $generated@@23 $generated@@44)))))))))))
 :weight 3
 :pattern ( ($generated@@70 ($generated@@31 $generated@@102) ($generated@@32 $generated@@23 $generated@@103)))
))))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ) (! (< ($generated@@108 $generated@@109) ($generated@@108 ($generated@@24 $generated@@109 $generated@@110)))
 :pattern ( ($generated@@24 $generated@@109 $generated@@110))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! (< ($generated@@108 $generated@@112) ($generated@@108 ($generated@@24 $generated@@111 $generated@@112)))
 :pattern ( ($generated@@24 $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@70 ($generated@@31 $generated@@113) $generated@@114) ($generated@@70 $generated@@113 $generated@@114))
 :pattern ( ($generated@@70 ($generated@@31 $generated@@113) $generated@@114))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (! (= ($generated@@115 $generated@@126 $generated@@127 $generated@@128 ($generated@@122 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@132 $generated@@129) $generated@@131 $generated@@132) $generated@@129)
 :weight 0
)) (and (forall (($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (!  (or (= $generated@@138 $generated@@140) (= ($generated@@115 $generated@@133 $generated@@134 $generated@@135 ($generated@@122 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@138 $generated@@139 $generated@@136) $generated@@140 $generated@@141) ($generated@@115 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@140 $generated@@141)))
 :weight 0
)) (forall (($generated@@142 T@T) ($generated@@143 T@T) ($generated@@144 T@T) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or (= $generated@@148 $generated@@150) (= ($generated@@115 $generated@@142 $generated@@143 $generated@@144 ($generated@@122 $generated@@142 $generated@@143 $generated@@144 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@115 $generated@@142 $generated@@143 $generated@@144 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (= ($generated@@6 $generated@@116) 4)) (= ($generated@@6 $generated@@117) 5)) (forall (($generated@@151 T@T) ($generated@@152 T@T) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (= ($generated@@119 $generated@@151 $generated@@152 ($generated@@123 $generated@@151 $generated@@152 $generated@@154 $generated@@155 $generated@@153) $generated@@155) $generated@@153)
 :weight 0
))) (forall (($generated@@156 T@T) ($generated@@157 T@T) ($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ) (!  (or (= $generated@@160 $generated@@161) (= ($generated@@119 $generated@@156 $generated@@157 ($generated@@123 $generated@@156 $generated@@157 $generated@@159 $generated@@160 $generated@@158) $generated@@161) ($generated@@119 $generated@@156 $generated@@157 $generated@@159 $generated@@161)))
 :weight 0
))) (= ($generated@@6 $generated@@120) 6)) (forall (($generated@@162 T@T) ($generated@@163 T@T) ) (= ($generated@@6 ($generated@@121 $generated@@162 $generated@@163)) 7))) (forall (($generated@@164 T@T) ($generated@@165 T@T) ) (! (= ($generated@@124 ($generated@@121 $generated@@164 $generated@@165)) $generated@@164)
 :pattern ( ($generated@@121 $generated@@164 $generated@@165))
))) (forall (($generated@@166 T@T) ($generated@@167 T@T) ) (! (= ($generated@@125 ($generated@@121 $generated@@166 $generated@@167)) $generated@@167)
 :pattern ( ($generated@@121 $generated@@166 $generated@@167))
))))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 Bool) ($generated@@172 T@U) ($generated@@173 T@U) ) (! (= ($generated@@11 ($generated@@115 $generated@@116 $generated@@117 $generated@@7 ($generated@@118 $generated@@168 $generated@@169 $generated@@170 $generated@@171) $generated@@172 $generated@@173))  (=> (and (or (not (= $generated@@172 $generated@@168)) (not true)) ($generated@@11 ($generated@@56 $generated@@7 ($generated@@119 $generated@@117 $generated@@120 ($generated@@119 $generated@@116 ($generated@@121 $generated@@117 $generated@@120) $generated@@169 $generated@@172) $generated@@170)))) $generated@@171))
 :pattern ( ($generated@@115 $generated@@116 $generated@@117 $generated@@7 ($generated@@118 $generated@@168 $generated@@169 $generated@@170 $generated@@171) $generated@@172 $generated@@173))
)))
(assert (forall (($generated@@176 T@U) ($generated@@177 T@U) ) (!  (=> (and ($generated@@175 $generated@@177) ($generated@@22 $generated@@23 $generated@@176 $generated@@26)) ($generated@@174 $generated@@23 $generated@@176 $generated@@26 $generated@@177))
 :pattern ( ($generated@@174 $generated@@23 $generated@@176 $generated@@26 $generated@@177))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (!  (=> (and ($generated@@175 $generated@@179) ($generated@@22 $generated@@23 $generated@@178 $generated@@25)) ($generated@@174 $generated@@23 $generated@@178 $generated@@25 $generated@@179))
 :pattern ( ($generated@@174 $generated@@23 $generated@@178 $generated@@25 $generated@@179))
)))
(assert (= ($generated@@180 $generated@@26) $generated@@0))
(assert (= ($generated@@181 $generated@@26) $generated@@4))
(assert (= ($generated@@180 $generated@@25) $generated@@1))
(assert (= ($generated@@181 $generated@@25) $generated@@5))
(assert (= $generated@@44 ($generated@@32 $generated@@23 $generated@@44)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ) (!  (=> (and ($generated@@175 $generated@@183) (and ($generated@@54 $generated@@182) ($generated@@174 $generated@@23 $generated@@182 $generated@@25 $generated@@183))) ($generated@@174 $generated@@23 ($generated@@36 $generated@@182) $generated@@26 $generated@@183))
 :pattern ( ($generated@@174 $generated@@23 ($generated@@36 $generated@@182) $generated@@26 $generated@@183))
)))
(assert (forall (($generated@@184 T@U) ($generated@@185 T@U) ) (!  (=> (and ($generated@@175 $generated@@185) (and ($generated@@54 $generated@@184) ($generated@@174 $generated@@23 $generated@@184 $generated@@25 $generated@@185))) ($generated@@174 $generated@@23 ($generated@@35 $generated@@184) $generated@@25 $generated@@185))
 :pattern ( ($generated@@174 $generated@@23 ($generated@@35 $generated@@184) $generated@@25 $generated@@185))
)))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@U) ) (! (= ($generated@@24 ($generated@@32 $generated@@23 $generated@@186) ($generated@@32 $generated@@23 $generated@@187)) ($generated@@32 $generated@@23 ($generated@@24 $generated@@186 $generated@@187)))
 :pattern ( ($generated@@24 ($generated@@32 $generated@@23 $generated@@186) ($generated@@32 $generated@@23 $generated@@187)))
)))
(assert (forall (($generated@@188 T@U) ($generated@@189 T@T) ) (! (= ($generated@@57 $generated@@189 ($generated@@32 $generated@@189 $generated@@188)) ($generated@@32 $generated@@120 ($generated@@57 $generated@@189 $generated@@188)))
 :pattern ( ($generated@@57 $generated@@189 ($generated@@32 $generated@@189 $generated@@188)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@190 () T@U)
(declare-fun $generated@@191 () T@U)
(declare-fun $generated@@192 () T@U)
(declare-fun $generated@@193 () T@U)
(declare-fun $generated@@194 () T@U)
(declare-fun $generated@@195 () T@U)
(declare-fun $generated@@196 () T@U)
(declare-fun $generated@@197 () T@U)
(declare-fun $generated@@198 () T@U)
(declare-fun $generated@@199 () T@U)
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 (T@U) Bool)
(declare-fun $generated@@202 () T@U)
(declare-fun $generated@@203 () T@U)
(declare-fun $generated@@204 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@205  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@48 ($generated@@70 ($generated@@31 ($generated@@31 $generated@@72)) ($generated@@70 ($generated@@31 ($generated@@31 $generated@@72)) $generated@@190)) $generated@@190))))
(let (($generated@@206  (=> (= $generated@@190 ($generated@@24 $generated@@191 $generated@@192)) (=> (and ($generated@@22 $generated@@23 $generated@@191 $generated@@26) ($generated@@22 $generated@@23 $generated@@192 $generated@@25)) (=> (and (and (and (and (and (and ($generated@@22 $generated@@23 $generated@@193 $generated@@25) ($generated@@174 $generated@@23 $generated@@193 $generated@@25 $generated@@194)) (= $generated@@195 $generated@@192)) (and ($generated@@22 $generated@@23 $generated@@195 $generated@@25) (= $generated@@193 $generated@@195))) (and (and ($generated@@22 $generated@@23 $generated@@196 $generated@@26) ($generated@@174 $generated@@23 $generated@@196 $generated@@26 $generated@@194)) (and (= $generated@@197 $generated@@191) ($generated@@22 $generated@@23 $generated@@197 $generated@@26)))) (and (and (and (= $generated@@196 $generated@@197) ($generated@@174 $generated@@23 $generated@@193 $generated@@25 $generated@@194)) (and ($generated@@71 $generated@@193) ($generated@@71 $generated@@193))) (and (and (= $generated@@198 ($generated@@70 ($generated@@31 $generated@@72) $generated@@193)) (= $generated@@199 ($generated@@24 $generated@@196 ($generated@@32 $generated@@23 $generated@@44)))) (and ($generated@@175 $generated@@200) ($generated@@201 $generated@@200))))) (and (and (and (and ($generated@@85 ($generated@@70 ($generated@@31 $generated@@72) ($generated@@30 ($generated@@31 $generated@@72) $generated@@198 $generated@@199))) ($generated@@85 ($generated@@30 ($generated@@31 $generated@@72) ($generated@@70 ($generated@@31 $generated@@72) $generated@@199) ($generated@@70 ($generated@@31 $generated@@72) $generated@@198)))) (and (and ($generated@@33 $generated@@198 $generated@@199) ($generated@@71 ($generated@@30 ($generated@@31 $generated@@72) $generated@@198 $generated@@199))) (and (and ($generated@@71 $generated@@199) ($generated@@71 $generated@@198)) ($generated@@33 ($generated@@70 ($generated@@31 $generated@@72) $generated@@199) ($generated@@70 ($generated@@31 $generated@@72) $generated@@198))))) ($generated@@48 ($generated@@70 ($generated@@31 ($generated@@31 $generated@@72)) ($generated@@30 ($generated@@31 ($generated@@31 $generated@@72)) $generated@@198 $generated@@199)) ($generated@@30 ($generated@@31 ($generated@@31 $generated@@72)) ($generated@@70 ($generated@@31 ($generated@@31 $generated@@72)) $generated@@199) ($generated@@70 ($generated@@31 ($generated@@31 $generated@@72)) $generated@@198)))) (and (= $generated@@194 $generated@@200) (= (ControlFlow 0 5) 3)))) $generated@@205)))))
(let (($generated@@207  (=> (and (= $generated@@190 $generated@@44) (= (ControlFlow 0 4) 3)) $generated@@205)))
(let (($generated@@208 true))
(let (($generated@@209  (=> (or (not (= $generated@@190 $generated@@44)) (not true)) (and (=> (= (ControlFlow 0 6) 5) $generated@@206) (=> (= (ControlFlow 0 6) 1) $generated@@208)))))
(let (($generated@@210  (=> (and (= $generated@@202 ($generated@@118 $generated@@203 $generated@@204 $generated false)) ($generated@@85 $generated@@190)) (=> (and (and ($generated@@175 $generated@@194) ($generated@@201 $generated@@194)) (and (= $generated@@204 $generated@@194) (forall (($generated@@211 T@U) ) (!  (=> (and (and ($generated@@22 $generated@@23 $generated@@211 $generated@@25) ($generated@@11 ($generated@@32 $generated@@7 ($generated@@10 true)))) (< ($generated@@108 $generated@@211) ($generated@@108 $generated@@190))) ($generated@@48 ($generated@@70 ($generated@@31 $generated@@72) ($generated@@70 ($generated@@31 $generated@@72) $generated@@211)) $generated@@211))
 :pattern ( ($generated@@70 ($generated@@31 $generated@@72) ($generated@@70 ($generated@@31 $generated@@72) $generated@@211)))
)))) (and (=> (= (ControlFlow 0 7) 4) $generated@@207) (=> (= (ControlFlow 0 7) 6) $generated@@209))))))
(let (($generated@@212  (=> (and ($generated@@175 $generated@@204) ($generated@@201 $generated@@204)) (=> (and (and (and ($generated@@22 $generated@@23 $generated@@190 $generated@@25) ($generated@@174 $generated@@23 $generated@@190 $generated@@25 $generated@@204)) ($generated@@85 $generated@@190)) (and (= 5 $generated@@29) (= (ControlFlow 0 8) 7))) $generated@@210))))
$generated@@212))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
