(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@47 () Int)
(declare-fun $generated@@48 (T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) Bool)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@78 (T@U) Int)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@84 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@T T@T) T@T)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T) T@T)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@139 (T@U) T@U)
(declare-fun $generated@@140 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@1))
(assert (= ($generated@@4 $generated@@23) 3))
(assert ($generated@@22 $generated@@23 $generated@@21 $generated@@24))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@27) (= $generated@@26 $generated@@27))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@32 T@U) ) (! (= ($generated@@31 $generated@@32) (= ($generated@@20 $generated@@32) $generated@@1))
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@33 $generated@@34) (= ($generated@@20 $generated@@34) $generated@@2))
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (!  (=> ($generated@@31 $generated@@39) (= $generated@@39 $generated@@21))
 :pattern ( ($generated@@31 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ) (!  (=> ($generated@@33 $generated@@41) (exists (($generated@@42 T@U) ) (= $generated@@41 ($generated@@40 $generated@@42))))
 :pattern ( ($generated@@33 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@40 $generated@@43) $generated@@24) ($generated@@22 $generated@@23 $generated@@43 $generated@@24))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@40 $generated@@43) $generated@@24))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> (and ($generated@@33 $generated@@45) ($generated@@33 $generated@@46)) (= ($generated@@25 $generated@@45 $generated@@46) ($generated@@25 ($generated@@44 $generated@@45) ($generated@@44 $generated@@46))))
 :pattern ( ($generated@@25 $generated@@45 $generated@@46) ($generated@@33 $generated@@45))
 :pattern ( ($generated@@25 $generated@@45 $generated@@46) ($generated@@33 $generated@@46))
)))
(assert  (=> (<= 1 $generated@@47) (forall (($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (=> (or ($generated@@49 $generated@@51 $generated@@52) (and (< 1 $generated@@47) (and ($generated@@22 $generated@@23 $generated@@51 $generated@@24) ($generated@@22 $generated@@23 $generated@@52 $generated@@24)))) ($generated@@22 $generated@@23 ($generated@@48 $generated@@50 $generated@@51 $generated@@52) $generated@@24))
 :pattern ( ($generated@@48 $generated@@50 $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@48 ($generated@@53 $generated@@54) $generated@@55 $generated@@56) ($generated@@48 $generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@48 ($generated@@53 $generated@@54) $generated@@55 $generated@@56))
)))
(assert  (=> (<= 1 $generated@@47) (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (!  (=> (or ($generated@@49 $generated@@58 $generated@@59) (and (< 1 $generated@@47) (and ($generated@@22 $generated@@23 $generated@@58 $generated@@24) ($generated@@22 $generated@@23 $generated@@59 $generated@@24)))) (and (=> (not ($generated@@31 $generated@@58)) (let (($generated@@60 ($generated@@44 $generated@@58)))
 (=> (not ($generated@@31 $generated@@59)) (let (($generated@@61 ($generated@@44 $generated@@59)))
($generated@@49 $generated@@60 $generated@@61))))) (= ($generated@@48 ($generated@@53 $generated@@57) $generated@@58 $generated@@59) (ite ($generated@@31 $generated@@58) $generated@@59 (let (($generated@@62 ($generated@@44 $generated@@58)))
(ite ($generated@@31 $generated@@59) $generated@@58 (let (($generated@@63 ($generated@@44 $generated@@59)))
($generated@@40 ($generated@@48 $generated@@57 $generated@@62 $generated@@63)))))))))
 :pattern ( ($generated@@48 ($generated@@53 $generated@@57) $generated@@58 $generated@@59))
))))
(assert  (=> (<= 1 $generated@@47) (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> (or ($generated@@49 ($generated@@28 $generated@@23 $generated@@65) ($generated@@28 $generated@@23 $generated@@66)) (and (< 1 $generated@@47) (and ($generated@@22 $generated@@23 $generated@@65 $generated@@24) ($generated@@22 $generated@@23 $generated@@66 $generated@@24)))) (and (=> (not ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@31 ($generated@@28 $generated@@23 $generated@@65)))))) (let (($generated@@67 ($generated@@28 $generated@@23 ($generated@@44 ($generated@@28 $generated@@23 $generated@@65)))))
 (=> (not ($generated@@9 ($generated@@28 $generated@@5 ($generated@@8 ($generated@@31 ($generated@@28 $generated@@23 $generated@@66)))))) (let (($generated@@68 ($generated@@28 $generated@@23 ($generated@@44 ($generated@@28 $generated@@23 $generated@@66)))))
($generated@@49 $generated@@67 $generated@@68))))) (= ($generated@@48 ($generated@@53 $generated@@64) ($generated@@28 $generated@@23 $generated@@65) ($generated@@28 $generated@@23 $generated@@66)) (ite ($generated@@31 ($generated@@28 $generated@@23 $generated@@65)) $generated@@66 (let (($generated@@69 ($generated@@28 $generated@@23 ($generated@@44 ($generated@@28 $generated@@23 $generated@@65)))))
(ite ($generated@@31 ($generated@@28 $generated@@23 $generated@@66)) $generated@@65 (let (($generated@@70 ($generated@@28 $generated@@23 ($generated@@44 ($generated@@28 $generated@@23 $generated@@66)))))
($generated@@28 $generated@@23 ($generated@@40 ($generated@@28 $generated@@23 ($generated@@48 ($generated@@53 $generated@@64) $generated@@69 $generated@@70)))))))))))
 :weight 3
 :pattern ( ($generated@@48 ($generated@@53 $generated@@64) ($generated@@28 $generated@@23 $generated@@65) ($generated@@28 $generated@@23 $generated@@66)))
))))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@71 $generated@@24) (or ($generated@@31 $generated@@71) ($generated@@33 $generated@@71)))
 :pattern ( ($generated@@33 $generated@@71) ($generated@@22 $generated@@23 $generated@@71 $generated@@24))
 :pattern ( ($generated@@31 $generated@@71) ($generated@@22 $generated@@23 $generated@@71 $generated@@24))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (!  (=> (and ($generated@@31 $generated@@72) ($generated@@31 $generated@@73)) ($generated@@25 $generated@@72 $generated@@73))
 :pattern ( ($generated@@25 $generated@@72 $generated@@73) ($generated@@31 $generated@@72))
 :pattern ( ($generated@@25 $generated@@72 $generated@@73) ($generated@@31 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@20 ($generated@@40 $generated@@74)) $generated@@2)
 :pattern ( ($generated@@40 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@44 ($generated@@40 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@40 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@35 $generated@@77 ($generated@@36 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@36 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ) (! (< ($generated@@78 $generated@@79) ($generated@@78 ($generated@@40 $generated@@79)))
 :pattern ( ($generated@@40 $generated@@79))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@80 $generated@@91 $generated@@92 $generated@@93 ($generated@@87 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@80 $generated@@98 $generated@@99 $generated@@100 ($generated@@87 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@80 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@80 $generated@@107 $generated@@108 $generated@@109 ($generated@@87 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))) (= ($generated@@4 $generated@@81) 4)) (= ($generated@@4 $generated@@82) 5)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@84 $generated@@116 $generated@@117 ($generated@@88 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@118) $generated@@120) $generated@@118)
 :weight 0
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@125 $generated@@126) (= ($generated@@84 $generated@@121 $generated@@122 ($generated@@88 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@123) $generated@@126) ($generated@@84 $generated@@121 $generated@@122 $generated@@124 $generated@@126)))
 :weight 0
))) (= ($generated@@4 $generated@@85) 6)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (= ($generated@@4 ($generated@@86 $generated@@127 $generated@@128)) 7))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (! (= ($generated@@89 ($generated@@86 $generated@@129 $generated@@130)) $generated@@129)
 :pattern ( ($generated@@86 $generated@@129 $generated@@130))
))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (! (= ($generated@@90 ($generated@@86 $generated@@131 $generated@@132)) $generated@@132)
 :pattern ( ($generated@@86 $generated@@131 $generated@@132))
))))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 Bool) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@9 ($generated@@80 $generated@@81 $generated@@82 $generated@@5 ($generated@@83 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))  (=> (and (or (not (= $generated@@137 $generated@@133)) (not true)) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@84 $generated@@82 $generated@@85 ($generated@@84 $generated@@81 ($generated@@86 $generated@@82 $generated@@85) $generated@@134 $generated@@137) $generated@@135)))) $generated@@136))
 :pattern ( ($generated@@80 $generated@@81 $generated@@82 $generated@@5 ($generated@@83 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))
)))
(assert (= ($generated@@139 $generated@@24) $generated@@0))
(assert (= ($generated@@140 $generated@@24) $generated@@3))
(assert (= $generated@@21 ($generated@@28 $generated@@23 $generated@@21)))
(assert (forall (($generated@@141 T@U) ) (! (= ($generated@@40 ($generated@@28 $generated@@23 $generated@@141)) ($generated@@28 $generated@@23 ($generated@@40 $generated@@141)))
 :pattern ( ($generated@@40 ($generated@@28 $generated@@23 $generated@@141)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@T) ) (! (= ($generated@@36 $generated@@143 ($generated@@28 $generated@@143 $generated@@142)) ($generated@@28 $generated@@85 ($generated@@36 $generated@@143 $generated@@142)))
 :pattern ( ($generated@@36 $generated@@143 ($generated@@28 $generated@@143 $generated@@142)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 (T@U) Bool)
(declare-fun $generated@@149 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@150  (=> (and (= $generated@@144 ($generated@@83 $generated@@145 $generated@@146 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> (and (and ($generated@@22 $generated@@23 $generated@@151 $generated@@24) ($generated@@22 $generated@@23 $generated@@152 $generated@@24)) ($generated@@22 $generated@@23 $generated@@153 $generated@@24)) ($generated@@25 ($generated@@48 ($generated@@53 ($generated@@53 $generated@@147)) ($generated@@48 ($generated@@53 ($generated@@53 $generated@@147)) $generated@@151 $generated@@152) $generated@@153) ($generated@@48 ($generated@@53 ($generated@@53 $generated@@147)) $generated@@151 ($generated@@48 ($generated@@53 ($generated@@53 $generated@@147)) $generated@@152 $generated@@153))))
 :pattern ( ($generated@@48 ($generated@@53 ($generated@@53 $generated@@147)) $generated@@151 ($generated@@48 ($generated@@53 ($generated@@53 $generated@@147)) $generated@@152 $generated@@153)))
 :pattern ( ($generated@@48 ($generated@@53 ($generated@@53 $generated@@147)) ($generated@@48 ($generated@@53 ($generated@@53 $generated@@147)) $generated@@151 $generated@@152) $generated@@153))
)))))
(let (($generated@@154  (=> (and (and ($generated@@148 $generated@@146) ($generated@@149 $generated@@146)) (and (= 2 $generated@@47) (= (ControlFlow 0 3) 2))) $generated@@150)))
$generated@@154)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
