(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U Int Int) Int)
(declare-fun $generated@@1 (T@U) T@U)
(declare-fun $generated@@2 (Int Int) Bool)
(declare-fun $generated@@3 (Int) Int)
(declare-fun $generated@@4 (Int Int) Int)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@T T@T) T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@33 (T@T) T@T)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@63 (T@U T@U) Bool)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@21 T@U) ($generated@@22 Int) ($generated@@23 Int) ) (!  (=> (or ($generated@@2 $generated@@22 $generated@@23) (and (< 0 $generated) (and (<= ($generated@@3 0) $generated@@22) (<= $generated@@22 $generated@@23)))) (and (=> (or (not (= $generated@@23 $generated@@22)) (not true)) ($generated@@2 (+ $generated@@22 1) $generated@@23)) (= ($generated@@0 ($generated@@1 $generated@@21) $generated@@22 $generated@@23) (ite (= $generated@@23 $generated@@22) 0 (+ ($generated@@4 ($generated@@4 $generated@@22 $generated@@22) $generated@@22) ($generated@@0 $generated@@21 (+ $generated@@22 1) $generated@@23))))))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@21) $generated@@22 $generated@@23))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@35 T@T) ($generated@@36 T@T) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@25 $generated@@35 $generated@@36 ($generated@@32 $generated@@35 $generated@@36 $generated@@38 $generated@@39 $generated@@37) $generated@@39) $generated@@37)
 :weight 0
)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (!  (or (= $generated@@44 $generated@@45) (= ($generated@@25 $generated@@40 $generated@@41 ($generated@@32 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@45) ($generated@@25 $generated@@40 $generated@@41 $generated@@43 $generated@@45)))
 :weight 0
))) (= ($generated@@5 $generated@@26) 3)) (= ($generated@@5 $generated@@27) 4)) (= ($generated@@5 $generated@@28) 5)) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (= ($generated@@5 ($generated@@29 $generated@@46 $generated@@47)) 6))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@33 ($generated@@29 $generated@@48 $generated@@49)) $generated@@48)
 :pattern ( ($generated@@29 $generated@@48 $generated@@49))
))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@34 ($generated@@29 $generated@@50 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@29 $generated@@50 $generated@@51))
))))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> ($generated@@24 $generated@@52 $generated@@53) (forall (($generated@@54 T@U) ) (!  (=> ($generated@@10 ($generated@@31 $generated@@6 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@52 $generated@@54) $generated@@30))) ($generated@@10 ($generated@@31 $generated@@6 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@53 $generated@@54) $generated@@30))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@53 $generated@@54) $generated@@30))
)))
 :pattern ( ($generated@@24 $generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 Int) ) (! (= ($generated@@3 $generated@@55) $generated@@55)
 :pattern ( ($generated@@3 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 $generated@@57) $generated@@57)
 :pattern ( ($generated@@56 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 ($generated@@31 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@31 $generated@@61 $generated@@60))
)))
(assert ($generated@@62 $generated@@30))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> ($generated@@63 $generated@@64 $generated@@65) (and ($generated@@24 $generated@@64 $generated@@65) (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> (not ($generated@@62 $generated@@67)) (= ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@64 $generated@@66) $generated@@67) ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@65 $generated@@66) $generated@@67)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@65 $generated@@66) $generated@@67))
))))
 :pattern ( ($generated@@63 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 Int) ($generated@@70 Int) ) (! (= ($generated@@0 ($generated@@1 $generated@@68) $generated@@69 $generated@@70) ($generated@@0 $generated@@68 $generated@@69 $generated@@70))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@68) $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (=> (or (not (= $generated@@71 $generated@@73)) (not true)) (=> (and ($generated@@24 $generated@@71 $generated@@72) ($generated@@24 $generated@@72 $generated@@73)) ($generated@@24 $generated@@71 $generated@@73)))
 :pattern ( ($generated@@24 $generated@@71 $generated@@72) ($generated@@24 $generated@@72 $generated@@73))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@74 T@U) ($generated@@75 Int) ($generated@@76 Int) ) (!  (=> (or ($generated@@2 ($generated@@3 $generated@@75) ($generated@@3 $generated@@76)) (and (< 0 $generated) (and (<= ($generated@@3 0) ($generated@@3 $generated@@75)) (<= ($generated@@3 $generated@@75) ($generated@@3 $generated@@76))))) (and (=> (or (not (= ($generated@@3 $generated@@76) ($generated@@3 $generated@@75))) (not true)) ($generated@@2 ($generated@@3 (+ $generated@@75 1)) ($generated@@3 $generated@@76))) (= ($generated@@0 ($generated@@1 $generated@@74) ($generated@@3 $generated@@75) ($generated@@3 $generated@@76)) (ite (= ($generated@@3 $generated@@76) ($generated@@3 $generated@@75)) 0 (+ ($generated@@4 ($generated@@3 ($generated@@4 ($generated@@3 $generated@@75) ($generated@@3 $generated@@75))) ($generated@@3 $generated@@75)) ($generated@@0 ($generated@@1 $generated@@74) ($generated@@3 (+ $generated@@75 1)) ($generated@@3 $generated@@76)))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@74) ($generated@@3 $generated@@75) ($generated@@3 $generated@@76)))
))))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@31 $generated@@78 ($generated@@59 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@59 $generated@@78 $generated@@77))
)))
(assert  (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@79 $generated@@82 $generated@@83 $generated@@84 ($generated@@81 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@87 $generated@@88) $generated@@85)
 :weight 0
)) (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@79 $generated@@89 $generated@@90 $generated@@91 ($generated@@81 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@79 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@79 $generated@@98 $generated@@99 $generated@@100 ($generated@@81 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@79 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 Bool) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@10 ($generated@@79 $generated@@28 $generated@@26 $generated@@6 ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))  (=> (and (or (not (= $generated@@111 $generated@@107)) (not true)) ($generated@@10 ($generated@@31 $generated@@6 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@108 $generated@@111) $generated@@109)))) $generated@@110))
 :pattern ( ($generated@@79 $generated@@28 $generated@@26 $generated@@6 ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 Int) ($generated@@114 Int) ) (! (= ($generated@@4 $generated@@113 $generated@@114) (* $generated@@113 $generated@@114))
 :pattern ( ($generated@@4 $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 Int) ) (! (= ($generated@@59 $generated@@7 ($generated@@11 ($generated@@3 $generated@@115))) ($generated@@56 $generated@@27 ($generated@@59 $generated@@7 ($generated@@11 $generated@@115))))
 :pattern ( ($generated@@59 $generated@@7 ($generated@@11 ($generated@@3 $generated@@115))))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@59 $generated@@117 ($generated@@56 $generated@@117 $generated@@116)) ($generated@@56 $generated@@27 ($generated@@59 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@59 $generated@@117 ($generated@@56 $generated@@117 $generated@@116)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@132  (=> (= $generated@@118 ($generated@@80 $generated@@119 $generated@@120 $generated@@30 false)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (<= ($generated@@3 0) $generated@@121)) (=> (<= ($generated@@3 0) $generated@@121) (=> (and ($generated@@122 $generated@@123) ($generated@@124 $generated@@123)) (=> (and (and ($generated@@2 ($generated@@3 0) $generated@@121) (= $generated@@125 ($generated@@0 ($generated@@1 ($generated@@1 $generated@@126)) ($generated@@3 0) $generated@@121))) (and (forall (($generated@@133 T@U) ) (!  (=> (and (or (not (= $generated@@133 $generated@@119)) (not true)) ($generated@@10 ($generated@@31 $generated@@6 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@120 $generated@@133) $generated@@30)))) (= ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@123 $generated@@133) ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@120 $generated@@133)))
 :pattern ( ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@123 $generated@@133))
)) ($generated@@24 $generated@@120 $generated@@123))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= ($generated@@3 0) $generated@@127)) (=> (<= ($generated@@3 0) $generated@@127) (=> (and (and (and ($generated@@122 $generated@@128) ($generated@@124 $generated@@128)) ($generated@@2 ($generated@@3 0) $generated@@127)) (and (and (= $generated@@129 ($generated@@0 ($generated@@1 ($generated@@1 $generated@@126)) ($generated@@3 0) $generated@@127)) (forall (($generated@@134 T@U) ) (!  (=> (and (or (not (= $generated@@134 $generated@@119)) (not true)) ($generated@@10 ($generated@@31 $generated@@6 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@123 $generated@@134) $generated@@30)))) (= ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@128 $generated@@134) ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@123 $generated@@134)))
 :pattern ( ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@128 $generated@@134))
))) (and ($generated@@24 $generated@@123 $generated@@128) (= $generated@@130 (- $generated@@125 $generated@@129))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= ($generated@@3 0) $generated@@127)) (=> (<= ($generated@@3 0) $generated@@127) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= $generated@@127 $generated@@121)) (=> (<= $generated@@127 $generated@@121) (=> (and (and (and ($generated@@122 $generated@@131) ($generated@@124 $generated@@131)) (and ($generated@@2 $generated@@127 $generated@@121) (and ($generated@@2 ($generated@@3 0) $generated@@121) ($generated@@2 ($generated@@3 0) $generated@@127)))) (and (and (= ($generated@@0 ($generated@@1 ($generated@@1 $generated@@126)) $generated@@127 $generated@@121) (- ($generated@@0 ($generated@@1 ($generated@@1 $generated@@126)) ($generated@@3 0) $generated@@121) ($generated@@0 ($generated@@1 ($generated@@1 $generated@@126)) ($generated@@3 0) $generated@@127))) (forall (($generated@@135 T@U) ) (!  (=> (and (or (not (= $generated@@135 $generated@@119)) (not true)) ($generated@@10 ($generated@@31 $generated@@6 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@128 $generated@@135) $generated@@30)))) (= ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@131 $generated@@135) ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@128 $generated@@135)))
 :pattern ( ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@131 $generated@@135))
))) (and ($generated@@63 $generated@@128 $generated@@131) (= (ControlFlow 0 2) (- 0 1))))) (= $generated@@130 ($generated@@0 ($generated@@1 ($generated@@1 $generated@@126)) $generated@@127 $generated@@121)))))))))))))))))
(let (($generated@@136  (=> (and ($generated@@122 $generated@@120) ($generated@@124 $generated@@120)) (=> (and (and (= 4 $generated) (<= ($generated@@3 0) $generated@@127)) (and (<= $generated@@127 $generated@@121) (= (ControlFlow 0 7) 2))) $generated@@132))))
$generated@@136)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
