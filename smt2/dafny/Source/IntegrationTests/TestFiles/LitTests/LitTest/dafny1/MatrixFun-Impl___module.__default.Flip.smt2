(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.array2? () T@U)
(declare-fun Tagclass._System.array2 () T@U)
(declare-fun tytagFamily$array2 () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.array2.Length0 (T@U) Int)
(declare-fun Tclass._System.array2? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _System.array2.Length1 (T@U) Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array2 (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun IndexField (Int) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array2?_0 (T@U) T@U)
(declare-fun Tclass._System.array2_0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.array2? Tagclass._System.array2 tytagFamily$array2)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (forall ((_System.array2$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array2? _System.array2$arg))) ($Is intType (int_2_U (_System.array2.Length0 $o)) TInt))
 :pattern ( (_System.array2.Length0 $o) (Tclass._System.array2? _System.array2$arg))
)))
(assert (forall ((_System.array2$arg@@0 T@U) ($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass._System.array2? _System.array2$arg@@0))) ($Is intType (int_2_U (_System.array2.Length1 $o@@0)) TInt))
 :pattern ( (_System.array2.Length1 $o@@0) (Tclass._System.array2? _System.array2$arg@@0))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array2$arg@@1 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array2 _System.array2$arg@@1) $h) ($IsAlloc refType |c#0| (Tclass._System.array2? _System.array2$arg@@1) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array2 _System.array2$arg@@1) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array2? _System.array2$arg@@1) $h))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array2$arg@@2 T@U) ($o@@1 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@1 (Tclass._System.array2? _System.array2$arg@@2) $h@@0)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 (Tclass._System.array2? _System.array2$arg@@2) $h@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((f T@U) (i Int) ) (! (= (FDim (MultiIndexField f i)) (+ (FDim f) 1))
 :pattern ( (MultiIndexField f i))
)))
(assert (forall ((_System.array2$arg@@3 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._System.array2 _System.array2$arg@@3))  (and ($Is refType |c#0@@0| (Tclass._System.array2? _System.array2$arg@@3)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array2 _System.array2$arg@@3)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array2? _System.array2$arg@@3)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((_System.array2$arg@@4 T@U) ($h@@1 T@U) ($o@@2 T@U) ($i0 Int) ($i1 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._System.array2? _System.array2$arg@@4)))) (and (and (<= 0 $i0) (< $i0 (_System.array2.Length0 $o@@2))) (and (<= 0 $i1) (< $i1 (_System.array2.Length1 $o@@2))))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@2) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@2) (MultiIndexField (IndexField $i0) $i1)) _System.array2$arg@@4 $h@@1))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@2) (MultiIndexField (IndexField $i0) $i1)) (Tclass._System.array2? _System.array2$arg@@4))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_System.array2$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array2? _System.array2$arg@@5)) Tagclass._System.array2?) (= (TagFamily (Tclass._System.array2? _System.array2$arg@@5)) tytagFamily$array2))
 :pattern ( (Tclass._System.array2? _System.array2$arg@@5))
)))
(assert (forall ((_System.array2$arg@@6 T@U) ) (!  (and (= (Tag (Tclass._System.array2 _System.array2$arg@@6)) Tagclass._System.array2) (= (TagFamily (Tclass._System.array2 _System.array2$arg@@6)) tytagFamily$array2))
 :pattern ( (Tclass._System.array2 _System.array2$arg@@6))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) (= $o@@3 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(assert (forall ((_System.array2$arg@@7 T@U) ($o@@4 T@U) ) (! (= ($Is refType $o@@4 (Tclass._System.array2? _System.array2$arg@@7))  (or (= $o@@4 null) (= (dtype $o@@4) (Tclass._System.array2? _System.array2$arg@@7))))
 :pattern ( ($Is refType $o@@4 (Tclass._System.array2? _System.array2$arg@@7)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((_System.array2$arg@@8 T@U) ($h@@2 T@U) ($o@@5 T@U) ($i0@@0 Int) ($i1@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._System.array2? _System.array2$arg@@8)))) (and (and (<= 0 $i0@@0) (< $i0@@0 (_System.array2.Length0 $o@@5))) (and (<= 0 $i1@@0) (< $i1@@0 (_System.array2.Length1 $o@@5))))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@5) (MultiIndexField (IndexField $i0@@0) $i1@@0)) _System.array2$arg@@8))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@5) (MultiIndexField (IndexField $i0@@0) $i1@@0)) (Tclass._System.array2? _System.array2$arg@@8))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((o@@0 T@U) ) (! (<= 0 (_System.array2.Length0 o@@0))
 :pattern ( (_System.array2.Length0 o@@0))
)))
(assert (forall ((o@@1 T@U) ) (! (<= 0 (_System.array2.Length1 o@@1))
 :pattern ( (_System.array2.Length1 o@@1))
)))
(assert (forall ((i@@0 Int) ) (! (= (FDim (IndexField i@@0)) 1)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((i@@1 Int) ) (! (= (IndexField_Inverse (IndexField i@@1)) i@@1)
 :pattern ( (IndexField i@@1))
)))
(assert (forall ((_System.array2$arg@@9 T@U) ) (! (= (Tclass._System.array2?_0 (Tclass._System.array2? _System.array2$arg@@9)) _System.array2$arg@@9)
 :pattern ( (Tclass._System.array2? _System.array2$arg@@9))
)))
(assert (forall ((_System.array2$arg@@10 T@U) ) (! (= (Tclass._System.array2_0 (Tclass._System.array2 _System.array2$arg@@10)) _System.array2$arg@@10)
 :pattern ( (Tclass._System.array2 _System.array2$arg@@10))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_System.array2$arg@@11 T@U) ($h@@3 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._System.array2? _System.array2$arg@@11)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@6) alloc)))) ($IsAlloc intType (int_2_U (_System.array2.Length0 $o@@6)) TInt $h@@3))
 :pattern ( (_System.array2.Length0 $o@@6) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@6) alloc)) (Tclass._System.array2? _System.array2$arg@@11))
)))
(assert (forall ((_System.array2$arg@@12 T@U) ($h@@4 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._System.array2? _System.array2$arg@@12)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@7) alloc)))) ($IsAlloc intType (int_2_U (_System.array2.Length1 $o@@7)) TInt $h@@4))
 :pattern ( (_System.array2.Length1 $o@@7) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@7) alloc)) (Tclass._System.array2? _System.array2$arg@@12))
)))
(assert (forall ((f@@0 T@U) (i@@2 Int) ) (!  (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@0 i@@2)) f@@0) (= (MultiIndexField_Inverse1 (MultiIndexField f@@0 i@@2)) i@@2))
 :pattern ( (MultiIndexField f@@0 i@@2))
)))
(assert (forall ((_System.array2$arg@@13 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.array2? _System.array2$arg@@13)) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) (Tclass._System.array2? _System.array2$arg@@13))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.array2? _System.array2$arg@@13)))
)))
(assert (forall ((_System.array2$arg@@14 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.array2 _System.array2$arg@@14)) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) (Tclass._System.array2 _System.array2$arg@@14))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.array2 _System.array2$arg@@14)))
)))
(assert (forall ((h@@3 T@U) (r T@U) (f@@1 T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f@@1 x@@6))) ($HeapSucc h@@3 (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f@@1 x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f@@1 x@@6)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((h@@4 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@4))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |m#0| () T@U)
(declare-fun |i#2@0| () Int)
(declare-fun |j#2@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun _module._default.Flip$T () T@U)
(declare-fun |a#0@1| () Int)
(declare-fun |b#0@1| () Int)
(declare-fun |N#0@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun $Heap@4 () T@U)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |a#0@3| () Int)
(declare-fun |$decr$loop#01@1| () Int)
(declare-fun |b#0@4| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |a#0@2| () Int)
(declare-fun |b#0@3| () Int)
(declare-fun $index0@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $index1@1 () T@U)
(declare-fun |$rhs#0_0_0@1| () T@U)
(declare-fun |$rhs#0_0_1@1| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |b#0@2| () Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |$decr_init$loop#01@0| () Int)
(declare-fun |a#0@0| () Int)
(declare-fun |b#0@0| () Int)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 91) (let ((anon21_correct true))
(let ((anon40_Else_correct  (=> (and (or (not (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |i#2@0|) |j#2@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#2@0|) |i#2@0|)))) (not true)) (= (ControlFlow 0 58) 31)) anon21_correct)))
(let ((anon40_Then_correct  (=> (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |i#2@0|) |j#2@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#2@0|) |i#2@0|))) (and (=> (= (ControlFlow 0 50) (- 0 57)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 50) (- 0 56)) (and (<= 0 |j#2@0|) (< |j#2@0| (_System.array2.Length0 |m#0|)))) (and (=> (= (ControlFlow 0 50) (- 0 55)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array2.Length1 |m#0|)))) (and (=> (= (ControlFlow 0 50) (- 0 54)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 50) (- 0 53)) ($IsAlloc refType |m#0| (Tclass._System.array2 _module._default.Flip$T) $Heap)) (=> ($IsAlloc refType |m#0| (Tclass._System.array2 _module._default.Flip$T) $Heap) (and (=> (= (ControlFlow 0 50) (- 0 52)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array2.Length0 |m#0|)))) (and (=> (= (ControlFlow 0 50) (- 0 51)) (and (<= 0 |j#2@0|) (< |j#2@0| (_System.array2.Length1 |m#0|)))) (=> (= (ControlFlow 0 50) 31) anon21_correct))))))))))))))
(let ((anon39_Then_correct  (=> (or (< |i#2@0| |a#0@1|) (and (= |i#2@0| |a#0@1|) (< |j#2@0| |b#0@1|))) (and (=> (= (ControlFlow 0 59) (- 0 66)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 59) (- 0 65)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array2.Length0 |m#0|)))) (and (=> (= (ControlFlow 0 59) (- 0 64)) (and (<= 0 |j#2@0|) (< |j#2@0| (_System.array2.Length1 |m#0|)))) (and (=> (= (ControlFlow 0 59) (- 0 63)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 59) (- 0 62)) ($IsAlloc refType |m#0| (Tclass._System.array2 _module._default.Flip$T) $Heap)) (=> ($IsAlloc refType |m#0| (Tclass._System.array2 _module._default.Flip$T) $Heap) (and (=> (= (ControlFlow 0 59) (- 0 61)) (and (<= 0 |j#2@0|) (< |j#2@0| (_System.array2.Length0 |m#0|)))) (and (=> (= (ControlFlow 0 59) (- 0 60)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array2.Length1 |m#0|)))) (and (=> (= (ControlFlow 0 59) 50) anon40_Then_correct) (=> (= (ControlFlow 0 59) 58) anon40_Else_correct)))))))))))))))
(let ((anon41_Else_correct  (=> (and (or (not (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |i#2@0|) |j#2@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#2@0|) |j#2@0|)))) (not true)) (= (ControlFlow 0 41) 31)) anon21_correct)))
(let ((anon41_Then_correct  (=> (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |i#2@0|) |j#2@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#2@0|) |j#2@0|))) (and (=> (= (ControlFlow 0 33) (- 0 40)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 33) (- 0 39)) (and (<= 0 |j#2@0|) (< |j#2@0| (_System.array2.Length0 |m#0|)))) (and (=> (= (ControlFlow 0 33) (- 0 38)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array2.Length1 |m#0|)))) (and (=> (= (ControlFlow 0 33) (- 0 37)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 33) (- 0 36)) ($IsAlloc refType |m#0| (Tclass._System.array2 _module._default.Flip$T) $Heap)) (=> ($IsAlloc refType |m#0| (Tclass._System.array2 _module._default.Flip$T) $Heap) (and (=> (= (ControlFlow 0 33) (- 0 35)) (and (<= 0 |j#2@0|) (< |j#2@0| (_System.array2.Length0 |m#0|)))) (and (=> (= (ControlFlow 0 33) (- 0 34)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array2.Length1 |m#0|)))) (=> (= (ControlFlow 0 33) 31) anon21_correct))))))))))))))
(let ((anon39_Else_correct  (=> (not (or (< |i#2@0| |a#0@1|) (and (= |i#2@0| |a#0@1|) (< |j#2@0| |b#0@1|)))) (and (=> (= (ControlFlow 0 42) (- 0 49)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 42) (- 0 48)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array2.Length0 |m#0|)))) (and (=> (= (ControlFlow 0 42) (- 0 47)) (and (<= 0 |j#2@0|) (< |j#2@0| (_System.array2.Length1 |m#0|)))) (and (=> (= (ControlFlow 0 42) (- 0 46)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 42) (- 0 45)) ($IsAlloc refType |m#0| (Tclass._System.array2 _module._default.Flip$T) $Heap)) (=> ($IsAlloc refType |m#0| (Tclass._System.array2 _module._default.Flip$T) $Heap) (and (=> (= (ControlFlow 0 42) (- 0 44)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array2.Length0 |m#0|)))) (and (=> (= (ControlFlow 0 42) (- 0 43)) (and (<= 0 |j#2@0|) (< |j#2@0| (_System.array2.Length1 |m#0|)))) (and (=> (= (ControlFlow 0 42) 33) anon41_Then_correct) (=> (= (ControlFlow 0 42) 41) anon41_Else_correct)))))))))))))))
(let ((anon38_Else_correct  (=> (or (not (= |i#2@0| |a#0@1|)) (not true)) (and (=> (= (ControlFlow 0 69) 59) anon39_Then_correct) (=> (= (ControlFlow 0 69) 42) anon39_Else_correct)))))
(let ((anon38_Then_correct  (=> (= |i#2@0| |a#0@1|) (and (=> (= (ControlFlow 0 68) 59) anon39_Then_correct) (=> (= (ControlFlow 0 68) 42) anon39_Else_correct)))))
(let ((anon37_Then_correct  (=> (<= |a#0@1| |i#2@0|) (and (=> (= (ControlFlow 0 70) 68) anon38_Then_correct) (=> (= (ControlFlow 0 70) 69) anon38_Else_correct)))))
(let ((anon37_Else_correct  (=> (< |i#2@0| |a#0@1|) (and (=> (= (ControlFlow 0 67) 59) anon39_Then_correct) (=> (= (ControlFlow 0 67) 42) anon39_Else_correct)))))
(let ((anon36_Then_correct  (=> (and (and (<= (LitInt 0) |i#2@0|) (<= |i#2@0| |j#2@0|)) (< |j#2@0| |N#0@0|)) (and (=> (= (ControlFlow 0 71) 70) anon37_Then_correct) (=> (= (ControlFlow 0 71) 67) anon37_Else_correct)))))
(let ((anon36_Else_correct  (=> (and (not (and (and (<= (LitInt 0) |i#2@0|) (<= |i#2@0| |j#2@0|)) (< |j#2@0| |N#0@0|))) (= (ControlFlow 0 32) 31)) anon21_correct)))
(let ((anon35_Else_correct  (=> (not (and (<= (LitInt 0) |i#2@0|) (<= |i#2@0| |j#2@0|))) (and (=> (= (ControlFlow 0 73) 71) anon36_Then_correct) (=> (= (ControlFlow 0 73) 32) anon36_Else_correct)))))
(let ((anon35_Then_correct  (=> (and (<= (LitInt 0) |i#2@0|) (<= |i#2@0| |j#2@0|)) (and (=> (= (ControlFlow 0 72) 71) anon36_Then_correct) (=> (= (ControlFlow 0 72) 32) anon36_Else_correct)))))
(let ((anon34_Else_correct  (=> (< |i#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 75) 72) anon35_Then_correct) (=> (= (ControlFlow 0 75) 73) anon35_Else_correct)))))
(let ((anon34_Then_correct  (=> (<= (LitInt 0) |i#2@0|) (and (=> (= (ControlFlow 0 74) 72) anon35_Then_correct) (=> (= (ControlFlow 0 74) 73) anon35_Else_correct)))))
(let ((anon33_Then_correct  (and (=> (= (ControlFlow 0 76) 74) anon34_Then_correct) (=> (= (ControlFlow 0 76) 75) anon34_Else_correct))))
(let ((anon33_Else_correct true))
(let ((anon7_correct  (=> (or (and (< |a#0@1| |b#0@1|) (<= |b#0@1| |N#0@0|)) (and (= |a#0@1| |N#0@0|) (= |b#0@1| (+ |N#0@0| 1)))) (and (=> (= (ControlFlow 0 77) 76) anon33_Then_correct) (=> (= (ControlFlow 0 77) 30) anon33_Else_correct)))))
(let ((anon32_Else_correct  (=> (and (or (not (= |a#0@1| |N#0@0|)) (not true)) (= (ControlFlow 0 80) 77)) anon7_correct)))
(let ((anon32_Then_correct  (=> (and (= |a#0@1| |N#0@0|) (= (ControlFlow 0 79) 77)) anon7_correct)))
(let ((anon31_Then_correct  (=> (not (and (< |a#0@1| |b#0@1|) (<= |b#0@1| |N#0@0|))) (and (=> (= (ControlFlow 0 81) 79) anon32_Then_correct) (=> (= (ControlFlow 0 81) 80) anon32_Else_correct)))))
(let ((anon31_Else_correct  (=> (and (and (< |a#0@1| |b#0@1|) (<= |b#0@1| |N#0@0|)) (= (ControlFlow 0 78) 77)) anon7_correct)))
(let ((anon30_Else_correct  (=> (<= |b#0@1| |a#0@1|) (and (=> (= (ControlFlow 0 83) 81) anon31_Then_correct) (=> (= (ControlFlow 0 83) 78) anon31_Else_correct)))))
(let ((anon30_Then_correct  (=> (< |a#0@1| |b#0@1|) (and (=> (= (ControlFlow 0 82) 81) anon31_Then_correct) (=> (= (ControlFlow 0 82) 78) anon31_Else_correct)))))
(let ((anon29_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 84) 82) anon30_Then_correct) (=> (= (ControlFlow 0 84) 83) anon30_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 27) (- 0 26)) (forall ((|i#1| Int) (|j#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1|) (< |i#1| (_System.array2.Length0 |m#0|))) (and (<= (LitInt 0) |j#1|) (< |j#1| (_System.array2.Length1 |m#0|)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |m#0|) (MultiIndexField (IndexField |i#1|) |j#1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#1|) |i#1|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#1|) |i#1|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |m#0|) (MultiIndexField (IndexField |i#1|) |j#1|)))
)))))
(let ((anon42_Then_correct  (=> (= |a#0@1| |N#0@0|) (=> (and (= $Heap@4 $Heap@0) (= (ControlFlow 0 28) 27)) GeneratedUnifiedExit_correct))))
(let ((anon27_correct  (and (=> (= (ControlFlow 0 3) (- 0 7)) (or (<= 0 |$decr$loop#00@1|) (= (- |N#0@0| |a#0@3|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- |N#0@0| |a#0@3|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (or (<= 0 |$decr$loop#01@1|) (< (- |N#0@0| |a#0@3|) |$decr$loop#00@1|)) (= (- |N#0@0| |b#0@4|) |$decr$loop#01@1|))) (=> (or (or (<= 0 |$decr$loop#01@1|) (< (- |N#0@0| |a#0@3|) |$decr$loop#00@1|)) (= (- |N#0@0| |b#0@4|) |$decr$loop#01@1|)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (< (- |N#0@0| |a#0@3|) |$decr$loop#00@1|) (and (= (- |N#0@0| |a#0@3|) |$decr$loop#00@1|) (< (- |N#0@0| |b#0@4|) |$decr$loop#01@1|)))) (=> (or (< (- |N#0@0| |a#0@3|) |$decr$loop#00@1|) (and (= (- |N#0@0| |a#0@3|) |$decr$loop#00@1|) (< (- |N#0@0| |b#0@4|) |$decr$loop#01@1|))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#0@0| (or (and (< |a#0@3| |b#0@4|) (<= |b#0@4| |N#0@0|)) (and (= |a#0@3| |N#0@0|) (= |b#0@4| (+ |N#0@0| 1)))))) (=> (=> |$w$loop#0@0| (or (and (< |a#0@3| |b#0@4|) (<= |b#0@4| |N#0@0|)) (and (= |a#0@3| |N#0@0|) (= |b#0@4| (+ |N#0@0| 1))))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#0@0| (forall ((|i#3| Int) (|j#3| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3|) (<= |i#3| |j#3|)) (< |j#3| |N#0@0|)) (ite  (or (< |i#3| |a#0@3|) (and (= |i#3| |a#0@3|) (< |j#3| |b#0@4|)))  (and (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |m#0|) (MultiIndexField (IndexField |i#3|) |j#3|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3|) |i#3|))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |m#0|) (MultiIndexField (IndexField |j#3|) |i#3|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3|) |j#3|))))  (and (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |m#0|) (MultiIndexField (IndexField |i#3|) |j#3|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3|) |j#3|))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |m#0|) (MultiIndexField (IndexField |j#3|) |i#3|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3|) |i#3|))))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3|) |j#3|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |m#0|) (MultiIndexField (IndexField |j#3|) |i#3|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3|) |i#3|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |m#0|) (MultiIndexField (IndexField |i#3|) |j#3|)))
))))))))))))))
(let ((anon43_Else_correct  (=> (<= |N#0@0| |b#0@1|) (=> (and (= |a#0@2| (+ |a#0@1| 1)) (= |b#0@3| (+ |a#0@2| 1))) (=> (and (and (= |a#0@3| |a#0@2|) (= |b#0@4| |b#0@3|)) (and (= $Heap@3 $Heap@0) (= (ControlFlow 0 24) 3))) anon27_correct)))))
(let ((anon43_Then_correct  (=> (< |b#0@1| |N#0@0|) (and (=> (= (ControlFlow 0 8) (- 0 23)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 8) (- 0 22)) (and (<= 0 |a#0@1|) (< |a#0@1| (_System.array2.Length0 |m#0|)))) (=> (and (<= 0 |a#0@1|) (< |a#0@1| (_System.array2.Length0 |m#0|))) (and (=> (= (ControlFlow 0 8) (- 0 21)) (and (<= 0 |b#0@1|) (< |b#0@1| (_System.array2.Length1 |m#0|)))) (=> (and (<= 0 |b#0@1|) (< |b#0@1| (_System.array2.Length1 |m#0|))) (=> (= $index0@1 (MultiIndexField (IndexField |a#0@1|) |b#0@1|)) (and (=> (= (ControlFlow 0 8) (- 0 20)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| $index0@1))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| $index0@1)) (and (=> (= (ControlFlow 0 8) (- 0 19)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 8) (- 0 18)) (and (<= 0 |b#0@1|) (< |b#0@1| (_System.array2.Length0 |m#0|)))) (=> (and (<= 0 |b#0@1|) (< |b#0@1| (_System.array2.Length0 |m#0|))) (and (=> (= (ControlFlow 0 8) (- 0 17)) (and (<= 0 |a#0@1|) (< |a#0@1| (_System.array2.Length1 |m#0|)))) (=> (and (<= 0 |a#0@1|) (< |a#0@1| (_System.array2.Length1 |m#0|))) (=> (= $index1@1 (MultiIndexField (IndexField |b#0@1|) |a#0@1|)) (and (=> (= (ControlFlow 0 8) (- 0 16)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| $index1@1))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |m#0| $index1@1)) (and (=> (= (ControlFlow 0 8) (- 0 15)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 8) (- 0 14)) (and (<= 0 |b#0@1|) (< |b#0@1| (_System.array2.Length0 |m#0|)))) (=> (and (<= 0 |b#0@1|) (< |b#0@1| (_System.array2.Length0 |m#0|))) (and (=> (= (ControlFlow 0 8) (- 0 13)) (and (<= 0 |a#0@1|) (< |a#0@1| (_System.array2.Length1 |m#0|)))) (=> (and (<= 0 |a#0@1|) (< |a#0@1| (_System.array2.Length1 |m#0|))) (=> (= |$rhs#0_0_0@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |b#0@1|) |a#0@1|))) (and (=> (= (ControlFlow 0 8) (- 0 12)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (and (=> (= (ControlFlow 0 8) (- 0 11)) (and (<= 0 |a#0@1|) (< |a#0@1| (_System.array2.Length0 |m#0|)))) (=> (and (<= 0 |a#0@1|) (< |a#0@1| (_System.array2.Length0 |m#0|))) (and (=> (= (ControlFlow 0 8) (- 0 10)) (and (<= 0 |b#0@1|) (< |b#0@1| (_System.array2.Length1 |m#0|)))) (=> (and (<= 0 |b#0@1|) (< |b#0@1| (_System.array2.Length1 |m#0|))) (=> (= |$rhs#0_0_1@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |a#0@1|) |b#0@1|))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (or (or (or (not (= |m#0| |m#0|)) (not true)) (or (not (= |b#0@1| |a#0@1|)) (not true))) (or (not (= |a#0@1| |b#0@1|)) (not true))) (= |$rhs#0_0_1@1| |$rhs#0_0_0@1|))) (=> (or (or (or (or (not (= |m#0| |m#0|)) (not true)) (or (not (= |b#0@1| |a#0@1|)) (not true))) (or (not (= |a#0@1| |b#0@1|)) (not true))) (= |$rhs#0_0_1@1| |$rhs#0_0_0@1|)) (=> (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) $index0@1 |$rhs#0_0_0@1|))) (=> (and (and (and ($IsGoodHeap $Heap@1) (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 |m#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |m#0|) $index1@1 |$rhs#0_0_1@1|)))) (and ($IsGoodHeap $Heap@2) (= |b#0@2| (+ |b#0@1| 1)))) (and (and (= |a#0@3| |a#0@1|) (= |b#0@4| |b#0@2|)) (and (= $Heap@3 $Heap@2) (= (ControlFlow 0 8) 3)))) anon27_correct)))))))))))))))))))))))))))))))))))))))
(let ((anon42_Else_correct  (=> (or (not (= |a#0@1| |N#0@0|)) (not true)) (=> (and (= |$decr$loop#00@1| (- |N#0@0| |a#0@1|)) (= |$decr$loop#01@1| (- |N#0@0| |b#0@1|))) (and (=> (= (ControlFlow 0 25) 8) anon43_Then_correct) (=> (= (ControlFlow 0 25) 24) anon43_Else_correct))))))
(let ((anon29_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 29) 28) anon42_Then_correct) (=> (= (ControlFlow 0 29) 25) anon42_Else_correct)))))
(let ((anon28_LoopBody_correct  (and (=> (= (ControlFlow 0 85) 84) anon29_Then_correct) (=> (= (ControlFlow 0 85) 29) anon29_Else_correct))))
(let ((anon28_LoopDone_correct true))
(let ((anon28_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (and (and (not false) (<= 0 |a#0@1|)) (<= 1 |b#0@1|)) (=> |$w$loop#0@0| (or (and (< |a#0@1| |b#0@1|) (<= |b#0@1| |N#0@0|)) (and (= |a#0@1| |N#0@0|) (= |b#0@1| (+ |N#0@0| 1)))))) (and (=> |$w$loop#0@0| (forall ((|i#3@@0| Int) (|j#3@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@0|) (<= |i#3@@0| |j#3@@0|)) (< |j#3@@0| |N#0@0|)) (ite  (or (< |i#3@@0| |a#0@1|) (and (= |i#3@@0| |a#0@1|) (< |j#3@@0| |b#0@1|)))  (and (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |i#3@@0|) |j#3@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@0|) |i#3@@0|))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |j#3@@0|) |i#3@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@0|) |j#3@@0|))))  (and (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |i#3@@0|) |j#3@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@0|) |j#3@@0|))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |j#3@@0|) |i#3@@0|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@0|) |i#3@@0|))))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@0|) |j#3@@0|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |j#3@@0|) |i#3@@0|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@0|) |i#3@@0|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |m#0|) (MultiIndexField (IndexField |i#3@@0|) |j#3@@0|)))
))) (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@8) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@8)) (= $o@@8 |m#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@8))
)))) (and (and ($HeapSucc $Heap $Heap@0) (forall (($o@@9 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@9) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@9) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@9) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@9 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@9) $f@@0))
))) (and (<= (- |N#0@0| |a#0@1|) |$decr_init$loop#00@0|) (=> (= (- |N#0@0| |a#0@1|) |$decr_init$loop#00@0|) (<= (- |N#0@0| |b#0@1|) |$decr_init$loop#01@0|))))) (and (=> (= (ControlFlow 0 86) 1) anon28_LoopDone_correct) (=> (= (ControlFlow 0 86) 85) anon28_LoopBody_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc |m#0|)) (and (=> (= (ControlFlow 0 87) (- 0 90)) (or (not (= |m#0| null)) (not true))) (=> (or (not (= |m#0| null)) (not true)) (=> (= |N#0@0| (_System.array2.Length0 |m#0|)) (=> (and (and (= |a#0@0| (LitInt 0)) (= |b#0@0| (LitInt 1))) (and (= |$decr_init$loop#00@0| (- |N#0@0| |a#0@0|)) (= |$decr_init$loop#01@0| (- |N#0@0| |b#0@0|)))) (and (=> (= (ControlFlow 0 87) (- 0 89)) (=> |$w$loop#0@0| (or (and (< |a#0@0| |b#0@0|) (<= |b#0@0| |N#0@0|)) (and (= |a#0@0| |N#0@0|) (= |b#0@0| (+ |N#0@0| 1)))))) (=> (=> |$w$loop#0@0| (or (and (< |a#0@0| |b#0@0|) (<= |b#0@0| |N#0@0|)) (and (= |a#0@0| |N#0@0|) (= |b#0@0| (+ |N#0@0| 1))))) (and (=> (= (ControlFlow 0 87) (- 0 88)) (=> |$w$loop#0@0| (forall ((|i#3@@1| Int) (|j#3@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@1|) (<= |i#3@@1| |j#3@@1|)) (< |j#3@@1| |N#0@0|)) (ite  (or (< |i#3@@1| |a#0@0|) (and (= |i#3@@1| |a#0@0|) (< |j#3@@1| |b#0@0|)))  (and (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@1|) |j#3@@1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@1|) |i#3@@1|))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@1|) |i#3@@1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@1|) |j#3@@1|))))  (and (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@1|) |j#3@@1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@1|) |j#3@@1|))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@1|) |i#3@@1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@1|) |i#3@@1|))))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@1|) |j#3@@1|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@1|) |i#3@@1|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@1|) |i#3@@1|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@1|) |j#3@@1|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#3@@2| Int) (|j#3@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@2|) (<= |i#3@@2| |j#3@@2|)) (< |j#3@@2| |N#0@0|)) (ite  (or (< |i#3@@2| |a#0@0|) (and (= |i#3@@2| |a#0@0|) (< |j#3@@2| |b#0@0|)))  (and (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@2|) |j#3@@2|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@2|) |i#3@@2|))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@2|) |i#3@@2|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@2|) |j#3@@2|))))  (and (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@2|) |j#3@@2|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@2|) |j#3@@2|))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@2|) |i#3@@2|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@2|) |i#3@@2|))))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@2|) |j#3@@2|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@2|) |i#3@@2|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |j#3@@2|) |i#3@@2|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |m#0|) (MultiIndexField (IndexField |i#3@@2|) |j#3@@2|)))
))) (=> (= (ControlFlow 0 87) 86) anon28_LoopHead_correct))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is refType |m#0| (Tclass._System.array2 _module._default.Flip$T)) ($IsAlloc refType |m#0| (Tclass._System.array2 _module._default.Flip$T) $Heap)) (= 0 $FunctionContextHeight)) (and (= (_System.array2.Length0 |m#0|) (_System.array2.Length1 |m#0|)) (= (ControlFlow 0 91) 87))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
