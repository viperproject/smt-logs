(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U Int Int) Int)
(declare-fun $generated@@1 (T@U) T@U)
(declare-fun $generated@@2 (Int Int) Bool)
(declare-fun $generated@@3 (Int) Int)
(declare-fun $generated@@4 (Int Int) Int)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@24 (T@U Int) Int)
(declare-fun $generated@@25 (Int) Bool)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@T T@T) T@T)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@U) Bool)
(declare-fun $generated@@67 (T@U T@U) Bool)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@21 T@U) ($generated@@22 Int) ($generated@@23 Int) ) (!  (=> (or ($generated@@2 $generated@@22 $generated@@23) (and (< 0 $generated) (and (<= ($generated@@3 0) $generated@@22) (<= $generated@@22 $generated@@23)))) (and (=> (or (not (= $generated@@23 $generated@@22)) (not true)) ($generated@@2 (+ $generated@@22 1) $generated@@23)) (= ($generated@@0 ($generated@@1 $generated@@21) $generated@@22 $generated@@23) (ite (= $generated@@23 $generated@@22) 0 (+ ($generated@@4 ($generated@@4 $generated@@22 $generated@@22) $generated@@22) ($generated@@0 $generated@@21 (+ $generated@@22 1) $generated@@23))))))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@21) $generated@@22 $generated@@23))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (or ($generated@@25 ($generated@@3 $generated@@27)) (and (< 0 $generated) (<= ($generated@@3 0) ($generated@@3 $generated@@27)))) (and (=> (or (not (= ($generated@@3 $generated@@27) ($generated@@3 0))) (not true)) ($generated@@25 ($generated@@3 (- $generated@@27 1)))) (= ($generated@@24 ($generated@@1 $generated@@26) ($generated@@3 $generated@@27)) (ite (= ($generated@@3 $generated@@27) ($generated@@3 0)) 0 (- (+ ($generated@@24 ($generated@@1 $generated@@26) ($generated@@3 (- $generated@@27 1))) $generated@@27) 1)))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@1 $generated@@26) ($generated@@3 $generated@@27)))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@29 $generated@@39 $generated@@40 ($generated@@36 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@43) $generated@@41)
 :weight 0
)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (or (= $generated@@48 $generated@@49) (= ($generated@@29 $generated@@44 $generated@@45 ($generated@@36 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@49) ($generated@@29 $generated@@44 $generated@@45 $generated@@47 $generated@@49)))
 :weight 0
))) (= ($generated@@5 $generated@@30) 3)) (= ($generated@@5 $generated@@31) 4)) (= ($generated@@5 $generated@@32) 5)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (= ($generated@@5 ($generated@@33 $generated@@50 $generated@@51)) 6))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@37 ($generated@@33 $generated@@52 $generated@@53)) $generated@@52)
 :pattern ( ($generated@@33 $generated@@52 $generated@@53))
))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@38 ($generated@@33 $generated@@54 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@33 $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> ($generated@@28 $generated@@56 $generated@@57) (forall (($generated@@58 T@U) ) (!  (=> ($generated@@10 ($generated@@35 $generated@@6 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@56 $generated@@58) $generated@@34))) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@57 $generated@@58) $generated@@34))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@57 $generated@@58) $generated@@34))
)))
 :pattern ( ($generated@@28 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 Int) ) (! (= ($generated@@3 $generated@@59) $generated@@59)
 :pattern ( ($generated@@3 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 $generated@@61) $generated@@61)
 :pattern ( ($generated@@60 $generated@@62 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 ($generated@@35 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@35 $generated@@65 $generated@@64))
)))
(assert ($generated@@66 $generated@@34))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (!  (=> ($generated@@67 $generated@@68 $generated@@69) (and ($generated@@28 $generated@@68 $generated@@69) (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> (not ($generated@@66 $generated@@71)) (= ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@68 $generated@@70) $generated@@71) ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@69 $generated@@70) $generated@@71)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@69 $generated@@70) $generated@@71))
))))
 :pattern ( ($generated@@67 $generated@@68 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 Int) ($generated@@74 Int) ) (! (= ($generated@@0 ($generated@@1 $generated@@72) $generated@@73 $generated@@74) ($generated@@0 $generated@@72 $generated@@73 $generated@@74))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@72) $generated@@73 $generated@@74))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@75 T@U) ($generated@@76 Int) ) (!  (=> (or ($generated@@25 $generated@@76) (and (< 0 $generated) (<= ($generated@@3 0) $generated@@76))) (and (=> (or (not (= $generated@@76 ($generated@@3 0))) (not true)) ($generated@@25 (- $generated@@76 1))) (= ($generated@@24 ($generated@@1 $generated@@75) $generated@@76) (ite (= $generated@@76 ($generated@@3 0)) 0 (- (+ ($generated@@24 $generated@@75 (- $generated@@76 1)) $generated@@76) 1)))))
 :pattern ( ($generated@@24 ($generated@@1 $generated@@75) $generated@@76))
))))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> (or (not (= $generated@@77 $generated@@79)) (not true)) (=> (and ($generated@@28 $generated@@77 $generated@@78) ($generated@@28 $generated@@78 $generated@@79)) ($generated@@28 $generated@@77 $generated@@79)))
 :pattern ( ($generated@@28 $generated@@77 $generated@@78) ($generated@@28 $generated@@78 $generated@@79))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@80 T@U) ($generated@@81 Int) ($generated@@82 Int) ) (!  (=> (or ($generated@@2 ($generated@@3 $generated@@81) ($generated@@3 $generated@@82)) (and (< 0 $generated) (and (<= ($generated@@3 0) ($generated@@3 $generated@@81)) (<= ($generated@@3 $generated@@81) ($generated@@3 $generated@@82))))) (and (=> (or (not (= ($generated@@3 $generated@@82) ($generated@@3 $generated@@81))) (not true)) ($generated@@2 ($generated@@3 (+ $generated@@81 1)) ($generated@@3 $generated@@82))) (= ($generated@@0 ($generated@@1 $generated@@80) ($generated@@3 $generated@@81) ($generated@@3 $generated@@82)) (ite (= ($generated@@3 $generated@@82) ($generated@@3 $generated@@81)) 0 (+ ($generated@@4 ($generated@@3 ($generated@@4 ($generated@@3 $generated@@81) ($generated@@3 $generated@@81))) ($generated@@3 $generated@@81)) ($generated@@0 ($generated@@1 $generated@@80) ($generated@@3 (+ $generated@@81 1)) ($generated@@3 $generated@@82)))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@80) ($generated@@3 $generated@@81) ($generated@@3 $generated@@82)))
))))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@35 $generated@@84 ($generated@@63 $generated@@84 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@63 $generated@@84 $generated@@83))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 Int) ) (! (= ($generated@@24 ($generated@@1 $generated@@85) $generated@@86) ($generated@@24 $generated@@85 $generated@@86))
 :pattern ( ($generated@@24 ($generated@@1 $generated@@85) $generated@@86))
)))
(assert  (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@87 $generated@@90 $generated@@91 $generated@@92 ($generated@@89 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@95 $generated@@96) $generated@@93)
 :weight 0
)) (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@87 $generated@@97 $generated@@98 $generated@@99 ($generated@@89 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@87 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@87 $generated@@106 $generated@@107 $generated@@108 ($generated@@89 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@87 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 Bool) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@10 ($generated@@87 $generated@@32 $generated@@30 $generated@@6 ($generated@@88 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))  (=> (and (or (not (= $generated@@119 $generated@@115)) (not true)) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@116 $generated@@119) $generated@@117)))) $generated@@118))
 :pattern ( ($generated@@87 $generated@@32 $generated@@30 $generated@@6 ($generated@@88 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))
)))
(assert (forall (($generated@@121 Int) ($generated@@122 Int) ) (! (= ($generated@@4 $generated@@121 $generated@@122) (* $generated@@121 $generated@@122))
 :pattern ( ($generated@@4 $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@123 Int) ) (! (= ($generated@@63 $generated@@7 ($generated@@11 ($generated@@3 $generated@@123))) ($generated@@60 $generated@@31 ($generated@@63 $generated@@7 ($generated@@11 $generated@@123))))
 :pattern ( ($generated@@63 $generated@@7 ($generated@@11 ($generated@@3 $generated@@123))))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@T) ) (! (= ($generated@@63 $generated@@125 ($generated@@60 $generated@@125 $generated@@124)) ($generated@@60 $generated@@31 ($generated@@63 $generated@@125 $generated@@124)))
 :pattern ( ($generated@@63 $generated@@125 ($generated@@60 $generated@@125 $generated@@124)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@137  (=> (= $generated@@126 ($generated@@88 $generated@@127 $generated@@128 $generated@@34 false)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= ($generated@@3 0) $generated@@129)) (=> (<= ($generated@@3 0) $generated@@129) (=> (and (and (and ($generated@@130 $generated@@131) ($generated@@132 $generated@@131)) ($generated@@25 $generated@@129)) (and (and (= $generated@@133 ($generated@@24 ($generated@@1 ($generated@@1 $generated@@134)) $generated@@129)) (forall (($generated@@138 T@U) ) (!  (=> (and (or (not (= $generated@@138 $generated@@127)) (not true)) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@128 $generated@@138) $generated@@34)))) (= ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@138) ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@128 $generated@@138)))
 :pattern ( ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@138))
))) (and ($generated@@28 $generated@@128 $generated@@131) (= $generated@@135 ($generated@@4 $generated@@133 $generated@@133))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@3 0) $generated@@129)) (=> (<= ($generated@@3 0) $generated@@129) (=> (and (and (and ($generated@@130 $generated@@136) ($generated@@132 $generated@@136)) (and ($generated@@2 ($generated@@3 0) $generated@@129) (and ($generated@@25 $generated@@129) ($generated@@25 $generated@@129)))) (and (and (= ($generated@@0 ($generated@@1 ($generated@@1 $generated@@134)) ($generated@@3 0) $generated@@129) ($generated@@4 ($generated@@24 ($generated@@1 ($generated@@1 $generated@@134)) $generated@@129) ($generated@@24 ($generated@@1 ($generated@@1 $generated@@134)) $generated@@129))) (forall (($generated@@139 T@U) ) (!  (=> (and (or (not (= $generated@@139 $generated@@127)) (not true)) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@139) $generated@@34)))) (= ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@136 $generated@@139) ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@139)))
 :pattern ( ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@136 $generated@@139))
))) (and ($generated@@67 $generated@@131 $generated@@136) (= (ControlFlow 0 2) (- 0 1))))) (= $generated@@135 ($generated@@0 ($generated@@1 ($generated@@1 $generated@@134)) ($generated@@3 0) $generated@@129)))))))))))
(let (($generated@@140  (=> (and (and (and ($generated@@130 $generated@@128) ($generated@@132 $generated@@128)) (= 3 $generated)) (and (<= ($generated@@3 0) $generated@@129) (= (ControlFlow 0 5) 2))) $generated@@137)))
$generated@@140)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
