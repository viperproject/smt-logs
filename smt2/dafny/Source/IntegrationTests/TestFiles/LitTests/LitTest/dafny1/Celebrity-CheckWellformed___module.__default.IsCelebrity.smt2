(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@U T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 () Int)
(declare-fun $generated@@42 (T@U T@U T@U) Bool)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@U T@U T@U) Bool)
(declare-fun $generated@@45 (T@U T@U T@U) Bool)
(declare-fun $generated@@46 (T@U T@U T@U) Bool)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@75 (T@T T@T) T@T)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@T) T@T)
(declare-fun $generated@@79 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@21 T@U) ($generated@@22 T@T) ) (! (= ($generated@@20 $generated@@22 $generated@@21) $generated@@21)
 :pattern ( ($generated@@20 $generated@@22 $generated@@21))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 ($generated@@23 $generated@@26 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@23 $generated@@26 $generated@@25))
)))
(assert (= ($generated@@3 $generated@@28) 3))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@32 ($generated@@29 $generated@@33)) (forall (($generated@@34 T@U) ) (!  (=> ($generated@@30 $generated@@32 $generated@@34) ($generated@@31 $generated@@34 $generated@@33))
 :pattern ( ($generated@@30 $generated@@32 $generated@@34))
)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@32 ($generated@@29 $generated@@33)))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@35 ($generated@@24 $generated@@40 $generated@@37) $generated@@38 $generated@@39) ($generated@@36 $generated@@40 $generated@@37 $generated@@38 $generated@@39))
 :pattern ( ($generated@@35 ($generated@@24 $generated@@40 $generated@@37) $generated@@38 $generated@@39))
)))
(assert (= ($generated@@3 $generated@@43) 4))
(assert  (=> (<= 1 $generated@@41) (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (=> (or ($generated@@44 $generated@@47 ($generated@@20 $generated@@43 $generated@@48) ($generated@@20 $generated@@28 $generated@@49)) (and (< 1 $generated@@41) (and ($generated@@31 $generated@@48 $generated@@47) ($generated@@27 $generated@@28 $generated@@49 ($generated@@29 $generated@@47))))) (and (=> ($generated@@30 ($generated@@20 $generated@@28 $generated@@49) ($generated@@20 $generated@@43 $generated@@48)) (forall (($generated@@50 T@U) ) (!  (=> ($generated@@31 $generated@@50 $generated@@47) (and (=> ($generated@@30 ($generated@@20 $generated@@28 $generated@@49) $generated@@50) (=> (or (not (= $generated@@50 $generated@@48)) (not true)) ($generated@@46 $generated@@47 $generated@@50 ($generated@@20 $generated@@43 $generated@@48)))) (=> (=> (and ($generated@@30 ($generated@@20 $generated@@28 $generated@@49) $generated@@50) (or (not (= $generated@@50 $generated@@48)) (not true))) ($generated@@45 $generated@@47 $generated@@50 ($generated@@20 $generated@@43 $generated@@48))) (=> ($generated@@30 ($generated@@20 $generated@@28 $generated@@49) $generated@@50) (=> (or (not (= $generated@@50 $generated@@48)) (not true)) ($generated@@46 $generated@@47 ($generated@@20 $generated@@43 $generated@@48) $generated@@50))))))
 :pattern ( ($generated@@45 $generated@@47 $generated@@48 $generated@@50))
 :pattern ( ($generated@@45 $generated@@47 $generated@@50 $generated@@48))
 :pattern ( ($generated@@30 $generated@@49 $generated@@50))
))) (= ($generated@@42 $generated@@47 ($generated@@20 $generated@@43 $generated@@48) ($generated@@20 $generated@@28 $generated@@49))  (and ($generated@@30 ($generated@@20 $generated@@28 $generated@@49) ($generated@@20 $generated@@43 $generated@@48)) (forall (($generated@@51 T@U) ) (!  (=> ($generated@@31 $generated@@51 $generated@@47) (and (=> (and ($generated@@30 ($generated@@20 $generated@@28 $generated@@49) $generated@@51) (or (not (= $generated@@51 $generated@@48)) (not true))) ($generated@@45 $generated@@47 $generated@@51 ($generated@@20 $generated@@43 $generated@@48))) (=> (and ($generated@@30 ($generated@@20 $generated@@28 $generated@@49) $generated@@51) (or (not (= $generated@@51 $generated@@48)) (not true))) (not ($generated@@45 $generated@@47 ($generated@@20 $generated@@43 $generated@@48) $generated@@51)))))
 :pattern ( ($generated@@45 $generated@@47 $generated@@48 $generated@@51))
 :pattern ( ($generated@@45 $generated@@47 $generated@@51 $generated@@48))
 :pattern ( ($generated@@30 $generated@@49 $generated@@51))
))))))
 :weight 3
 :pattern ( ($generated@@42 $generated@@47 ($generated@@20 $generated@@43 $generated@@48) ($generated@@20 $generated@@28 $generated@@49)))
))))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@31 $generated@@52 $generated) (and (= ($generated@@24 $generated@@4 ($generated@@23 $generated@@4 $generated@@52)) $generated@@52) ($generated@@27 $generated@@4 ($generated@@23 $generated@@4 $generated@@52) $generated)))
 :pattern ( ($generated@@31 $generated@@52 $generated))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@31 ($generated@@24 $generated@@55 $generated@@53) $generated@@54) ($generated@@27 $generated@@55 $generated@@53 $generated@@54))
 :pattern ( ($generated@@31 ($generated@@24 $generated@@55 $generated@@53) $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@36 $generated@@28 $generated@@56 ($generated@@29 $generated@@57) $generated@@58) (forall (($generated@@59 T@U) ) (!  (=> ($generated@@30 $generated@@56 $generated@@59) ($generated@@35 $generated@@59 $generated@@57 $generated@@58))
 :pattern ( ($generated@@30 $generated@@56 $generated@@59))
)))
 :pattern ( ($generated@@36 $generated@@28 $generated@@56 ($generated@@29 $generated@@57) $generated@@58))
)))
(assert  (=> (<= 1 $generated@@41) (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (or ($generated@@44 $generated@@60 $generated@@61 ($generated@@20 $generated@@28 $generated@@62)) (and (< 1 $generated@@41) (and ($generated@@31 $generated@@61 $generated@@60) ($generated@@27 $generated@@28 $generated@@62 ($generated@@29 $generated@@60))))) (and (=> ($generated@@30 ($generated@@20 $generated@@28 $generated@@62) $generated@@61) (forall (($generated@@63 T@U) ) (!  (=> ($generated@@31 $generated@@63 $generated@@60) (and (=> ($generated@@30 ($generated@@20 $generated@@28 $generated@@62) $generated@@63) (=> (or (not (= $generated@@63 $generated@@61)) (not true)) ($generated@@46 $generated@@60 $generated@@63 $generated@@61))) (=> (=> (and ($generated@@30 ($generated@@20 $generated@@28 $generated@@62) $generated@@63) (or (not (= $generated@@63 $generated@@61)) (not true))) ($generated@@45 $generated@@60 $generated@@63 $generated@@61)) (=> ($generated@@30 ($generated@@20 $generated@@28 $generated@@62) $generated@@63) (=> (or (not (= $generated@@63 $generated@@61)) (not true)) ($generated@@46 $generated@@60 $generated@@61 $generated@@63))))))
 :pattern ( ($generated@@45 $generated@@60 $generated@@61 $generated@@63))
 :pattern ( ($generated@@45 $generated@@60 $generated@@63 $generated@@61))
 :pattern ( ($generated@@30 $generated@@62 $generated@@63))
))) (= ($generated@@42 $generated@@60 $generated@@61 ($generated@@20 $generated@@28 $generated@@62))  (and ($generated@@30 ($generated@@20 $generated@@28 $generated@@62) $generated@@61) (forall (($generated@@64 T@U) ) (!  (=> ($generated@@31 $generated@@64 $generated@@60) (and (=> (and ($generated@@30 ($generated@@20 $generated@@28 $generated@@62) $generated@@64) (or (not (= $generated@@64 $generated@@61)) (not true))) ($generated@@45 $generated@@60 $generated@@64 $generated@@61)) (=> (and ($generated@@30 ($generated@@20 $generated@@28 $generated@@62) $generated@@64) (or (not (= $generated@@64 $generated@@61)) (not true))) (not ($generated@@45 $generated@@60 $generated@@61 $generated@@64)))))
 :pattern ( ($generated@@45 $generated@@60 $generated@@61 $generated@@64))
 :pattern ( ($generated@@45 $generated@@60 $generated@@64 $generated@@61))
 :pattern ( ($generated@@30 $generated@@62 $generated@@64))
))))))
 :weight 3
 :pattern ( ($generated@@42 $generated@@60 $generated@@61 ($generated@@20 $generated@@28 $generated@@62)))
))))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@65 ($generated@@29 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@29 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@19 ($generated@@29 $generated@@67)) $generated@@1)
 :pattern ( ($generated@@29 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@23 $generated@@69 ($generated@@24 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@24 $generated@@69 $generated@@68))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@70 $generated@@80 $generated@@81 $generated@@82 ($generated@@76 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@85 $generated@@86) $generated@@83)
 :weight 0
)) (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@70 $generated@@87 $generated@@88 $generated@@89 ($generated@@76 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@70 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@70 $generated@@96 $generated@@97 $generated@@98 ($generated@@76 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@103 $generated@@104) ($generated@@70 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@103 $generated@@104)))
 :weight 0
)))) (= ($generated@@3 $generated@@71) 5)) (= ($generated@@3 $generated@@72) 6)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@74 $generated@@105 $generated@@106 ($generated@@77 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@107) $generated@@109) $generated@@107)
 :weight 0
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@114 $generated@@115) (= ($generated@@74 $generated@@110 $generated@@111 ($generated@@77 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@112) $generated@@115) ($generated@@74 $generated@@110 $generated@@111 $generated@@113 $generated@@115)))
 :weight 0
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (= ($generated@@3 ($generated@@75 $generated@@116 $generated@@117)) 7))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@78 ($generated@@75 $generated@@118 $generated@@119)) $generated@@118)
 :pattern ( ($generated@@75 $generated@@118 $generated@@119))
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@79 ($generated@@75 $generated@@120 $generated@@121)) $generated@@121)
 :pattern ( ($generated@@75 $generated@@120 $generated@@121))
))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@8 ($generated@@70 $generated@@71 $generated@@72 $generated@@4 ($generated@@73 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@8 ($generated@@23 $generated@@4 ($generated@@74 $generated@@72 $generated@@43 ($generated@@74 $generated@@71 ($generated@@75 $generated@@72 $generated@@43) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@70 $generated@@71 $generated@@72 $generated@@4 ($generated@@73 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> ($generated@@31 $generated@@128 ($generated@@29 $generated@@129)) (and (= ($generated@@24 $generated@@28 ($generated@@23 $generated@@28 $generated@@128)) $generated@@128) ($generated@@27 $generated@@28 ($generated@@23 $generated@@28 $generated@@128) ($generated@@29 $generated@@129))))
 :pattern ( ($generated@@31 $generated@@128 ($generated@@29 $generated@@129)))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@T) ) (! (= ($generated@@24 $generated@@131 ($generated@@20 $generated@@131 $generated@@130)) ($generated@@20 $generated@@43 ($generated@@24 $generated@@131 $generated@@130)))
 :pattern ( ($generated@@24 $generated@@131 ($generated@@20 $generated@@131 $generated@@130)))
)))
(assert  (=> (<= 1 $generated@@41) (forall (($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (=> (or ($generated@@44 $generated@@132 $generated@@133 $generated@@134) (and (< 1 $generated@@41) (and ($generated@@31 $generated@@133 $generated@@132) ($generated@@27 $generated@@28 $generated@@134 ($generated@@29 $generated@@132))))) (and (=> ($generated@@30 $generated@@134 $generated@@133) (forall (($generated@@135 T@U) ) (!  (=> ($generated@@31 $generated@@135 $generated@@132) (and (=> ($generated@@30 $generated@@134 $generated@@135) (=> (or (not (= $generated@@135 $generated@@133)) (not true)) ($generated@@46 $generated@@132 $generated@@135 $generated@@133))) (=> (=> (and ($generated@@30 $generated@@134 $generated@@135) (or (not (= $generated@@135 $generated@@133)) (not true))) ($generated@@45 $generated@@132 $generated@@135 $generated@@133)) (=> ($generated@@30 $generated@@134 $generated@@135) (=> (or (not (= $generated@@135 $generated@@133)) (not true)) ($generated@@46 $generated@@132 $generated@@133 $generated@@135))))))
 :pattern ( ($generated@@45 $generated@@132 $generated@@133 $generated@@135))
 :pattern ( ($generated@@45 $generated@@132 $generated@@135 $generated@@133))
 :pattern ( ($generated@@30 $generated@@134 $generated@@135))
))) (= ($generated@@42 $generated@@132 $generated@@133 $generated@@134)  (and ($generated@@30 $generated@@134 $generated@@133) (forall (($generated@@136 T@U) ) (!  (=> ($generated@@31 $generated@@136 $generated@@132) (and (=> (and ($generated@@30 $generated@@134 $generated@@136) (or (not (= $generated@@136 $generated@@133)) (not true))) ($generated@@45 $generated@@132 $generated@@136 $generated@@133)) (=> (and ($generated@@30 $generated@@134 $generated@@136) (or (not (= $generated@@136 $generated@@133)) (not true))) (not ($generated@@45 $generated@@132 $generated@@133 $generated@@136)))))
 :pattern ( ($generated@@45 $generated@@132 $generated@@133 $generated@@136))
 :pattern ( ($generated@@45 $generated@@132 $generated@@136 $generated@@133))
 :pattern ( ($generated@@30 $generated@@134 $generated@@136))
))))))
 :pattern ( ($generated@@42 $generated@@132 $generated@@133 $generated@@134))
))))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (! ($generated@@36 $generated@@4 $generated@@138 $generated $generated@@137)
 :pattern ( ($generated@@36 $generated@@4 $generated@@138 $generated $generated@@137))
)))
(assert (forall (($generated@@139 T@U) ) (! ($generated@@27 $generated@@4 $generated@@139 $generated)
 :pattern ( ($generated@@27 $generated@@4 $generated@@139 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 (T@U) Bool)
(declare-fun $generated@@148 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@149 true))
(let (($generated@@150  (=> (and (not ($generated@@45 $generated@@140 $generated@@141 $generated@@142)) (= (ControlFlow 0 8) 2)) $generated@@149)))
(let (($generated@@151  (=> ($generated@@45 $generated@@140 $generated@@141 $generated@@142) (=> (and ($generated@@35 $generated@@142 $generated@@140 $generated@@143) ($generated@@35 $generated@@141 $generated@@140 $generated@@143)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (or (not (= $generated@@142 $generated@@141)) (not true))) (=> (or (not (= $generated@@142 $generated@@141)) (not true)) (=> (and ($generated@@46 $generated@@140 $generated@@142 $generated@@141) (= (ControlFlow 0 6) 2)) $generated@@149)))))))
(let (($generated@@152  (=> (and (and ($generated@@30 $generated@@144 $generated@@141) (or (not (= $generated@@141 $generated@@142)) (not true))) (and ($generated@@35 $generated@@141 $generated@@140 $generated@@143) ($generated@@35 $generated@@142 $generated@@140 $generated@@143))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (or (not (= $generated@@141 $generated@@142)) (not true))) (=> (and (or (not (= $generated@@141 $generated@@142)) (not true)) ($generated@@46 $generated@@140 $generated@@141 $generated@@142)) (and (=> (= (ControlFlow 0 9) 6) $generated@@151) (=> (= (ControlFlow 0 9) 8) $generated@@150)))))))
(let (($generated@@153  (=> (and (not (and ($generated@@30 $generated@@144 $generated@@141) (or (not (= $generated@@141 $generated@@142)) (not true)))) (= (ControlFlow 0 5) 2)) $generated@@149)))
(let (($generated@@154  (=> (not ($generated@@30 $generated@@144 $generated@@141)) (and (=> (= (ControlFlow 0 12) 9) $generated@@152) (=> (= (ControlFlow 0 12) 5) $generated@@153)))))
(let (($generated@@155  (=> ($generated@@30 $generated@@144 $generated@@141) (and (=> (= (ControlFlow 0 11) 9) $generated@@152) (=> (= (ControlFlow 0 11) 5) $generated@@153)))))
(let (($generated@@156  (=> (and ($generated@@31 $generated@@141 $generated@@140) ($generated@@35 $generated@@141 $generated@@140 $generated@@143)) (and (=> (= (ControlFlow 0 13) 11) $generated@@155) (=> (= (ControlFlow 0 13) 12) $generated@@154)))))
(let (($generated@@157  (=> (and (not (and ($generated@@31 $generated@@141 $generated@@140) ($generated@@35 $generated@@141 $generated@@140 $generated@@143))) (= (ControlFlow 0 4) 2)) $generated@@149)))
(let (($generated@@158  (=> ($generated@@30 $generated@@144 $generated@@142) (and (=> (= (ControlFlow 0 14) 13) $generated@@156) (=> (= (ControlFlow 0 14) 4) $generated@@157)))))
(let (($generated@@159  (=> (and (not ($generated@@30 $generated@@144 $generated@@142)) (= (ControlFlow 0 3) 2)) $generated@@149)))
(let (($generated@@160 true))
(let (($generated@@161  (=> (= $generated@@145 ($generated@@73 $generated@@146 $generated@@143 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 15) 1) $generated@@160) (=> (= (ControlFlow 0 15) 14) $generated@@158)) (=> (= (ControlFlow 0 15) 3) $generated@@159)))))
(let (($generated@@162  (=> (and ($generated@@147 $generated@@143) ($generated@@148 $generated@@143)) (=> (and (and ($generated@@31 $generated@@142 $generated@@140) ($generated@@27 $generated@@28 $generated@@144 ($generated@@29 $generated@@140))) (and (= 1 $generated@@41) (= (ControlFlow 0 16) 15))) $generated@@161))))
$generated@@162)))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
