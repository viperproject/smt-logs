(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U Int Int) Int)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (Int Int) Bool)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@24 (Int Int) Int)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@T T@T) T@T)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@U) Bool)
(declare-fun $generated@@66 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@72 (T@U T@U) Bool)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@25 T@U) ($generated@@26 Int) ($generated@@27 Int) ) (!  (=> (or ($generated@@22 $generated@@26 $generated@@27) (and (< 0 $generated@@19) (and (<= ($generated@@23 0) $generated@@26) (<= $generated@@26 $generated@@27)))) (and (=> (or (not (= $generated@@27 $generated@@26)) (not true)) ($generated@@22 (+ $generated@@26 1) $generated@@27)) (= ($generated@@20 ($generated@@21 $generated@@25) $generated@@26 $generated@@27) (ite (= $generated@@27 $generated@@26) 0 (+ ($generated@@24 ($generated@@24 $generated@@26 $generated@@26) $generated@@26) ($generated@@20 $generated@@25 (+ $generated@@26 1) $generated@@27))))))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@25) $generated@@26 $generated@@27))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@29 $generated@@38 $generated@@39 ($generated@@35 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@42) $generated@@40)
 :weight 0
)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (or (= $generated@@47 $generated@@48) (= ($generated@@29 $generated@@43 $generated@@44 ($generated@@35 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@45) $generated@@48) ($generated@@29 $generated@@43 $generated@@44 $generated@@46 $generated@@48)))
 :weight 0
))) (= ($generated@@2 $generated@@30) 3)) (= ($generated@@2 $generated@@31) 4)) (= ($generated@@2 $generated@@32) 5)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (= ($generated@@2 ($generated@@33 $generated@@49 $generated@@50)) 6))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@36 ($generated@@33 $generated@@51 $generated@@52)) $generated@@51)
 :pattern ( ($generated@@33 $generated@@51 $generated@@52))
))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@37 ($generated@@33 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@33 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> ($generated@@28 $generated@@55 $generated@@56) (forall (($generated@@57 T@U) ) (!  (=> ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@55 $generated@@57) $generated@@1))) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@56 $generated@@57) $generated@@1))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@56 $generated@@57) $generated@@1))
)))
 :pattern ( ($generated@@28 $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@58 Int) ) (! (= ($generated@@23 $generated@@58) $generated@@58)
 :pattern ( ($generated@@23 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 $generated@@60) $generated@@60)
 :pattern ( ($generated@@59 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 ($generated@@34 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@34 $generated@@64 $generated@@63))
)))
(assert ($generated@@65 $generated@@1))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (!  (=> ($generated@@28 $generated@@67 $generated@@68) (=> ($generated@@66 $generated@@71 $generated@@69 $generated@@70 $generated@@67) ($generated@@66 $generated@@71 $generated@@69 $generated@@70 $generated@@68)))
 :pattern ( ($generated@@28 $generated@@67 $generated@@68) ($generated@@66 $generated@@71 $generated@@69 $generated@@70 $generated@@67))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> ($generated@@72 $generated@@73 $generated@@74) (and ($generated@@28 $generated@@73 $generated@@74) (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> (not ($generated@@65 $generated@@76)) (= ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@73 $generated@@75) $generated@@76) ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@74 $generated@@75) $generated@@76)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@74 $generated@@75) $generated@@76))
))))
 :pattern ( ($generated@@72 $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 Int) ($generated@@79 Int) ) (! (= ($generated@@20 ($generated@@21 $generated@@77) $generated@@78 $generated@@79) ($generated@@20 $generated@@77 $generated@@78 $generated@@79))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@77) $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> (or (not (= $generated@@80 $generated@@82)) (not true)) (=> (and ($generated@@28 $generated@@80 $generated@@81) ($generated@@28 $generated@@81 $generated@@82)) ($generated@@28 $generated@@80 $generated@@82)))
 :pattern ( ($generated@@28 $generated@@80 $generated@@81) ($generated@@28 $generated@@81 $generated@@82))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@83 T@U) ($generated@@84 Int) ($generated@@85 Int) ) (!  (=> (or ($generated@@22 ($generated@@23 $generated@@84) ($generated@@23 $generated@@85)) (and (< 0 $generated@@19) (and (<= ($generated@@23 0) ($generated@@23 $generated@@84)) (<= ($generated@@23 $generated@@84) ($generated@@23 $generated@@85))))) (and (=> (or (not (= ($generated@@23 $generated@@85) ($generated@@23 $generated@@84))) (not true)) ($generated@@22 ($generated@@23 (+ $generated@@84 1)) ($generated@@23 $generated@@85))) (= ($generated@@20 ($generated@@21 $generated@@83) ($generated@@23 $generated@@84) ($generated@@23 $generated@@85)) (ite (= ($generated@@23 $generated@@85) ($generated@@23 $generated@@84)) 0 (+ ($generated@@24 ($generated@@23 ($generated@@24 ($generated@@23 $generated@@84) ($generated@@23 $generated@@84))) ($generated@@23 $generated@@84)) ($generated@@20 ($generated@@21 $generated@@83) ($generated@@23 (+ $generated@@84 1)) ($generated@@23 $generated@@85)))))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@83) ($generated@@23 $generated@@84) ($generated@@23 $generated@@85)))
))))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@34 $generated@@87 ($generated@@62 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@62 $generated@@87 $generated@@86))
)))
(assert  (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@88 $generated@@91 $generated@@92 $generated@@93 ($generated@@90 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@90 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@88 $generated@@107 $generated@@108 $generated@@109 ($generated@@90 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@7 ($generated@@88 $generated@@32 $generated@@30 $generated@@3 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@88 $generated@@32 $generated@@30 $generated@@3 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@122 Int) ($generated@@123 Int) ) (! (= ($generated@@24 $generated@@122 $generated@@123) (* $generated@@122 $generated@@123))
 :pattern ( ($generated@@24 $generated@@122 $generated@@123))
)))
(assert (forall (($generated@@124 Int) ) (! (= ($generated@@62 $generated@@4 ($generated@@8 ($generated@@23 $generated@@124))) ($generated@@59 $generated@@31 ($generated@@62 $generated@@4 ($generated@@8 $generated@@124))))
 :pattern ( ($generated@@62 $generated@@4 ($generated@@8 ($generated@@23 $generated@@124))))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@T) ) (! (= ($generated@@62 $generated@@126 ($generated@@59 $generated@@126 $generated@@125)) ($generated@@59 $generated@@31 ($generated@@62 $generated@@126 $generated@@125)))
 :pattern ( ($generated@@62 $generated@@126 ($generated@@59 $generated@@126 $generated@@125)))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (! ($generated@@66 $generated@@4 $generated@@128 $generated $generated@@127)
 :pattern ( ($generated@@66 $generated@@4 $generated@@128 $generated $generated@@127))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 (T@U) Bool)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@139  (=> (= $generated@@129 ($generated@@89 $generated@@130 $generated@@131 $generated@@1 false)) (=> (and (and (and (<= ($generated@@23 0) $generated@@132) (<= $generated@@132 $generated@@133)) (and ($generated@@134 $generated@@135) ($generated@@136 $generated@@135))) (and (and (forall (($generated@@140 T@U) ) (!  (=> (and (or (not (= $generated@@140 $generated@@130)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@140) $generated@@1)))) (= ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@135 $generated@@140) ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@140)))
 :pattern ( ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@135 $generated@@140))
)) ($generated@@72 $generated@@131 $generated@@135)) (and ($generated@@66 $generated@@4 ($generated@@8 $generated@@132) $generated $generated@@135) ($generated@@66 $generated@@4 ($generated@@8 $generated@@133) $generated $generated@@135)))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (<= ($generated@@23 0) $generated@@132)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (<= $generated@@132 $generated@@133)) (=> (and (<= ($generated@@23 0) $generated@@132) (<= $generated@@132 $generated@@133)) (=> (and (and ($generated@@22 $generated@@132 $generated@@133) (= $generated@@137 ($generated@@23 0))) (and ($generated@@66 $generated@@4 ($generated@@8 $generated@@137) $generated $generated@@135) ($generated@@66 $generated@@4 ($generated@@8 $generated@@133) $generated $generated@@135))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= ($generated@@23 0) $generated@@137)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= $generated@@137 $generated@@133)) (=> (and (<= ($generated@@23 0) $generated@@137) (<= $generated@@137 $generated@@133)) (=> (and (and ($generated@@22 ($generated@@23 0) $generated@@133) (= $generated@@138 ($generated@@23 0))) (and ($generated@@66 $generated@@4 ($generated@@8 $generated@@138) $generated $generated@@135) ($generated@@66 $generated@@4 ($generated@@8 $generated@@132) $generated $generated@@135))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@23 0) $generated@@138)) (=> (= (ControlFlow 0 2) (- 0 1)) (<= $generated@@138 $generated@@132)))))))))))))))
(let (($generated@@141  (=> (and (and ($generated@@134 $generated@@131) ($generated@@136 $generated@@131)) (and (= 2 $generated@@19) (= (ControlFlow 0 8) 2))) $generated@@139)))
$generated@@141)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
