(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U Int) Int)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U Int) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@37 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T) T@T)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@74 (T@T T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U) Bool)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@125 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@28) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 Int) ) (!  (=> (or ($generated@@25 $generated@@32 $generated@@33) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@32 $generated@@26)) (not true)) ($generated@@27 $generated@@28 $generated@@32 $generated@@29)) (<= ($generated@@30 0) $generated@@33)))) (and (=> (or (not (= $generated@@33 ($generated@@30 0))) (not true)) ($generated@@25 $generated@@32 (- $generated@@33 1))) (= ($generated@@23 ($generated@@24 $generated@@31) $generated@@32 $generated@@33) (ite (= $generated@@33 ($generated@@30 0)) 0 (+ ($generated@@23 $generated@@31 $generated@@32 (- $generated@@33 1)) $generated@@33)))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@31) $generated@@32 $generated@@33))
))))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@36 $generated@@34)  (or (= $generated@@36 $generated@@26) (= ($generated@@35 $generated@@36) $generated@@34)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@36 $generated@@34))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@37 $generated@@28 $generated@@38 $generated@@29 $generated@@39) ($generated@@37 $generated@@28 $generated@@38 $generated@@34 $generated@@39))
 :pattern ( ($generated@@37 $generated@@28 $generated@@38 $generated@@29 $generated@@39))
 :pattern ( ($generated@@37 $generated@@28 $generated@@38 $generated@@34 $generated@@39))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@41 $generated@@48 $generated@@49 ($generated@@45 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@50) $generated@@52) $generated@@50)
 :weight 0
)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (or (= $generated@@57 $generated@@58) (= ($generated@@41 $generated@@53 $generated@@54 ($generated@@45 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@58) ($generated@@41 $generated@@53 $generated@@54 $generated@@56 $generated@@58)))
 :weight 0
))) (= ($generated@@5 $generated@@42) 4)) (= ($generated@@5 $generated@@43) 5)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (= ($generated@@5 ($generated@@44 $generated@@59 $generated@@60)) 6))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@46 ($generated@@44 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@44 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@63 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@44 $generated@@63 $generated@@64))
))))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@37 $generated@@28 $generated@@65 $generated@@34 $generated@@66)  (or (= $generated@@65 $generated@@26) ($generated@@10 ($generated@@40 $generated@@6 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@28 ($generated@@44 $generated@@42 $generated@@43) $generated@@66 $generated@@65) $generated@@1)))))
 :pattern ( ($generated@@37 $generated@@28 $generated@@65 $generated@@34 $generated@@66))
)))
(assert (forall (($generated@@67 Int) ) (! (= ($generated@@30 $generated@@67) $generated@@67)
 :pattern ( ($generated@@30 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@68 $generated@@70 $generated@@69) $generated@@69)
 :pattern ( ($generated@@68 $generated@@70 $generated@@69))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 Int) ) (!  (=> (or ($generated@@25 ($generated@@68 $generated@@28 $generated@@72) ($generated@@30 $generated@@73)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@72 $generated@@26)) (not true)) ($generated@@27 $generated@@28 $generated@@72 $generated@@29)) (<= ($generated@@30 0) ($generated@@30 $generated@@73))))) (and (=> (or (not (= ($generated@@30 $generated@@73) ($generated@@30 0))) (not true)) ($generated@@25 ($generated@@68 $generated@@28 $generated@@72) ($generated@@30 (- $generated@@73 1)))) (= ($generated@@23 ($generated@@24 $generated@@71) ($generated@@68 $generated@@28 $generated@@72) ($generated@@30 $generated@@73)) (ite (= ($generated@@30 $generated@@73) ($generated@@30 0)) 0 (+ ($generated@@23 ($generated@@24 $generated@@71) ($generated@@68 $generated@@28 $generated@@72) ($generated@@30 (- $generated@@73 1))) $generated@@73)))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@71) ($generated@@68 $generated@@28 $generated@@72) ($generated@@30 $generated@@73)))
))))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@74 $generated@@76 ($generated@@40 $generated@@76 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@40 $generated@@76 $generated@@75))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@77 ($generated@@74 $generated@@81 $generated@@78) $generated@@79 $generated@@80) ($generated@@37 $generated@@81 $generated@@78 $generated@@79 $generated@@80))
 :pattern ( ($generated@@77 ($generated@@74 $generated@@81 $generated@@78) $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@82 $generated@@29)  (and ($generated@@27 $generated@@28 $generated@@82 $generated@@34) (or (not (= $generated@@82 $generated@@26)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@82 $generated@@29))
 :pattern ( ($generated@@27 $generated@@28 $generated@@82 $generated@@34))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 Int) ) (! (= ($generated@@23 ($generated@@24 $generated@@83) $generated@@84 $generated@@85) ($generated@@23 $generated@@83 $generated@@84 $generated@@85))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@83) $generated@@84 $generated@@85))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 Int) ) (!  (=> (or ($generated@@25 $generated@@87 ($generated@@30 $generated@@88)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@87 $generated@@26)) (not true)) ($generated@@27 $generated@@28 $generated@@87 $generated@@29)) (<= ($generated@@30 0) ($generated@@30 $generated@@88))))) (and (=> (or (not (= ($generated@@30 $generated@@88) ($generated@@30 0))) (not true)) ($generated@@25 $generated@@87 ($generated@@30 (- $generated@@88 1)))) (= ($generated@@23 ($generated@@24 $generated@@86) $generated@@87 ($generated@@30 $generated@@88)) (ite (= ($generated@@30 $generated@@88) ($generated@@30 0)) 0 (+ ($generated@@23 ($generated@@24 $generated@@86) $generated@@87 ($generated@@30 (- $generated@@88 1))) $generated@@88)))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@86) $generated@@87 ($generated@@30 $generated@@88)))
))))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@40 $generated@@90 ($generated@@74 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@74 $generated@@90 $generated@@89))
)))
(assert  (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@91 $generated@@94 $generated@@95 $generated@@96 ($generated@@93 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@99 $generated@@100) $generated@@97)
 :weight 0
)) (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@91 $generated@@101 $generated@@102 $generated@@103 ($generated@@93 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@91 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@91 $generated@@110 $generated@@111 $generated@@112 ($generated@@93 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@91 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@10 ($generated@@91 $generated@@28 $generated@@42 $generated@@6 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@10 ($generated@@40 $generated@@6 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@28 ($generated@@44 $generated@@42 $generated@@43) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@91 $generated@@28 $generated@@42 $generated@@6 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (= ($generated@@21 $generated@@34) $generated@@2))
(assert (= ($generated@@125 $generated@@34) $generated@@4))
(assert (= ($generated@@21 $generated@@29) $generated@@3))
(assert (= ($generated@@125 $generated@@29) $generated@@4))
(assert (forall (($generated@@126 Int) ) (! (= ($generated@@74 $generated@@7 ($generated@@11 ($generated@@30 $generated@@126))) ($generated@@68 $generated@@43 ($generated@@74 $generated@@7 ($generated@@11 $generated@@126))))
 :pattern ( ($generated@@74 $generated@@7 ($generated@@11 ($generated@@30 $generated@@126))))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@T) ) (! (= ($generated@@74 $generated@@128 ($generated@@68 $generated@@128 $generated@@127)) ($generated@@68 $generated@@43 ($generated@@74 $generated@@128 $generated@@127)))
 :pattern ( ($generated@@74 $generated@@128 ($generated@@68 $generated@@128 $generated@@127)))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (! ($generated@@37 $generated@@7 $generated@@130 $generated $generated@@129)
 :pattern ( ($generated@@37 $generated@@7 $generated@@130 $generated $generated@@129))
)))
(assert (forall (($generated@@131 T@U) ) (! ($generated@@27 $generated@@7 $generated@@131 $generated)
 :pattern ( ($generated@@27 $generated@@7 $generated@@131 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 (T@U) Bool)
(declare-fun $generated@@138 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@139  (=> (and (and (or (not (= $generated@@132 ($generated@@30 0))) (not true)) ($generated@@77 ($generated@@74 $generated@@28 $generated@@133) $generated@@34 $generated@@134)) (and (= $generated@@135 (- $generated@@132 1)) ($generated@@37 $generated@@7 ($generated@@11 $generated@@135) $generated $generated@@134))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (<= ($generated@@30 0) $generated@@135)) (=> (<= ($generated@@30 0) $generated@@135) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (<= 0 $generated@@132) (= $generated@@135 $generated@@132))) (=> (or (<= 0 $generated@@132) (= $generated@@135 $generated@@132)) (=> (= (ControlFlow 0 4) (- 0 3)) (< $generated@@135 $generated@@132)))))))))
(let (($generated@@140 true))
(let (($generated@@141 true))
(let (($generated@@142  (=> (and (= $generated@@136 ($generated@@92 $generated@@26 $generated@@134 $generated@@1 false)) (<= ($generated@@30 0) $generated@@132)) (and (and (=> (= (ControlFlow 0 7) 1) $generated@@141) (=> (= (ControlFlow 0 7) 2) $generated@@140)) (=> (= (ControlFlow 0 7) 4) $generated@@139)))))
(let (($generated@@143  (=> (and ($generated@@137 $generated@@134) ($generated@@138 $generated@@134)) (=> (and (and (or (not (= $generated@@133 $generated@@26)) (not true)) (and ($generated@@27 $generated@@28 $generated@@133 $generated@@29) ($generated@@37 $generated@@28 $generated@@133 $generated@@29 $generated@@134))) (and (= 0 $generated@@22) (= (ControlFlow 0 8) 7))) $generated@@142))))
$generated@@143))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
