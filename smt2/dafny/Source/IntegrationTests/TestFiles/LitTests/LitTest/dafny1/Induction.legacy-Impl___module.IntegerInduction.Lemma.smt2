(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U T@U Int) Int)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U Int) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@34 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@T T@T) T@T)
(declare-fun $generated@@42 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@65 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@117 (Int Int) Int)
(declare-fun $generated@@120 (T@U) T@U)
(declare-fun $generated@@121 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@3 $generated@@25) 3))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 Int) ) (!  (=> (or ($generated@@22 $generated@@29 $generated@@30) (and (< 0 $generated@@19) (and (and (or (not (= $generated@@29 $generated@@23)) (not true)) ($generated@@24 $generated@@25 $generated@@29 $generated@@26)) (<= ($generated@@27 0) $generated@@30)))) (and (=> (or (not (= $generated@@30 ($generated@@27 0))) (not true)) ($generated@@22 $generated@@29 (- $generated@@30 1))) (= ($generated@@20 ($generated@@21 $generated@@28) $generated@@29 $generated@@30) (ite (= $generated@@30 ($generated@@27 0)) 0 (+ ($generated@@20 $generated@@28 $generated@@29 (- $generated@@30 1)) $generated@@30)))))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@28) $generated@@29 $generated@@30))
))))
(assert (forall (($generated@@33 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@33 $generated@@31)  (or (= $generated@@33 $generated@@23) (= ($generated@@32 $generated@@33) $generated@@31)))
 :pattern ( ($generated@@24 $generated@@25 $generated@@33 $generated@@31))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@34 $generated@@25 $generated@@35 $generated@@26 $generated@@36) ($generated@@34 $generated@@25 $generated@@35 $generated@@31 $generated@@36))
 :pattern ( ($generated@@34 $generated@@25 $generated@@35 $generated@@26 $generated@@36))
 :pattern ( ($generated@@34 $generated@@25 $generated@@35 $generated@@31 $generated@@36))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@38 $generated@@45 $generated@@46 ($generated@@42 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@49) $generated@@47)
 :weight 0
)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (= $generated@@54 $generated@@55) (= ($generated@@38 $generated@@50 $generated@@51 ($generated@@42 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@55) ($generated@@38 $generated@@50 $generated@@51 $generated@@53 $generated@@55)))
 :weight 0
))) (= ($generated@@3 $generated@@39) 4)) (= ($generated@@3 $generated@@40) 5)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (= ($generated@@3 ($generated@@41 $generated@@56 $generated@@57)) 6))) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (! (= ($generated@@43 ($generated@@41 $generated@@58 $generated@@59)) $generated@@58)
 :pattern ( ($generated@@41 $generated@@58 $generated@@59))
))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@44 ($generated@@41 $generated@@60 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@41 $generated@@60 $generated@@61))
))))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@34 $generated@@25 $generated@@62 $generated@@31 $generated@@63)  (or (= $generated@@62 $generated@@23) ($generated@@8 ($generated@@37 $generated@@4 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@25 ($generated@@41 $generated@@39 $generated@@40) $generated@@63 $generated@@62) $generated)))))
 :pattern ( ($generated@@34 $generated@@25 $generated@@62 $generated@@31 $generated@@63))
)))
(assert (forall (($generated@@64 Int) ) (! (= ($generated@@27 $generated@@64) $generated@@64)
 :pattern ( ($generated@@27 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@65 $generated@@67 $generated@@66) $generated@@66)
 :pattern ( ($generated@@65 $generated@@67 $generated@@66))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 Int) ) (!  (=> (or ($generated@@22 ($generated@@65 $generated@@25 $generated@@69) ($generated@@27 $generated@@70)) (and (< 0 $generated@@19) (and (and (or (not (= $generated@@69 $generated@@23)) (not true)) ($generated@@24 $generated@@25 $generated@@69 $generated@@26)) (<= ($generated@@27 0) ($generated@@27 $generated@@70))))) (and (=> (or (not (= ($generated@@27 $generated@@70) ($generated@@27 0))) (not true)) ($generated@@22 ($generated@@65 $generated@@25 $generated@@69) ($generated@@27 (- $generated@@70 1)))) (= ($generated@@20 ($generated@@21 $generated@@68) ($generated@@65 $generated@@25 $generated@@69) ($generated@@27 $generated@@70)) (ite (= ($generated@@27 $generated@@70) ($generated@@27 0)) 0 (+ ($generated@@20 ($generated@@21 $generated@@68) ($generated@@65 $generated@@25 $generated@@69) ($generated@@27 (- $generated@@70 1))) $generated@@70)))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@68) ($generated@@65 $generated@@25 $generated@@69) ($generated@@27 $generated@@70)))
))))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@71 $generated@@73 ($generated@@37 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@37 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@74 $generated@@26)  (and ($generated@@24 $generated@@25 $generated@@74 $generated@@31) (or (not (= $generated@@74 $generated@@23)) (not true))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@74 $generated@@26))
 :pattern ( ($generated@@24 $generated@@25 $generated@@74 $generated@@31))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 Int) ) (! (= ($generated@@20 ($generated@@21 $generated@@75) $generated@@76 $generated@@77) ($generated@@20 $generated@@75 $generated@@76 $generated@@77))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@75) $generated@@76 $generated@@77))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 Int) ) (!  (=> (or ($generated@@22 $generated@@79 ($generated@@27 $generated@@80)) (and (< 0 $generated@@19) (and (and (or (not (= $generated@@79 $generated@@23)) (not true)) ($generated@@24 $generated@@25 $generated@@79 $generated@@26)) (<= ($generated@@27 0) ($generated@@27 $generated@@80))))) (and (=> (or (not (= ($generated@@27 $generated@@80) ($generated@@27 0))) (not true)) ($generated@@22 $generated@@79 ($generated@@27 (- $generated@@80 1)))) (= ($generated@@20 ($generated@@21 $generated@@78) $generated@@79 ($generated@@27 $generated@@80)) (ite (= ($generated@@27 $generated@@80) ($generated@@27 0)) 0 (+ ($generated@@20 ($generated@@21 $generated@@78) $generated@@79 ($generated@@27 (- $generated@@80 1))) $generated@@80)))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@78) $generated@@79 ($generated@@27 $generated@@80)))
))))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@37 $generated@@82 ($generated@@71 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@71 $generated@@82 $generated@@81))
)))
(assert  (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@83 $generated@@86 $generated@@87 $generated@@88 ($generated@@85 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@91 $generated@@92) $generated@@89)
 :weight 0
)) (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@83 $generated@@93 $generated@@94 $generated@@95 ($generated@@85 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@83 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@83 $generated@@102 $generated@@103 $generated@@104 ($generated@@85 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@83 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)))))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 Bool) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@8 ($generated@@83 $generated@@25 $generated@@39 $generated@@4 ($generated@@84 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))  (=> (and (or (not (= $generated@@115 $generated@@111)) (not true)) ($generated@@8 ($generated@@37 $generated@@4 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@25 ($generated@@41 $generated@@39 $generated@@40) $generated@@112 $generated@@115) $generated@@113)))) $generated@@114))
 :pattern ( ($generated@@83 $generated@@25 $generated@@39 $generated@@4 ($generated@@84 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))
)))
(assert (forall (($generated@@118 Int) ($generated@@119 Int) ) (! (= ($generated@@117 $generated@@118 $generated@@119) (* $generated@@118 $generated@@119))
 :pattern ( ($generated@@117 $generated@@118 $generated@@119))
)))
(assert (= ($generated@@120 $generated@@31) $generated@@0))
(assert (= ($generated@@121 $generated@@31) $generated@@2))
(assert (= ($generated@@120 $generated@@26) $generated@@1))
(assert (= ($generated@@121 $generated@@26) $generated@@2))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@71 $generated@@5 ($generated@@9 ($generated@@27 $generated@@122))) ($generated@@65 $generated@@40 ($generated@@71 $generated@@5 ($generated@@9 $generated@@122))))
 :pattern ( ($generated@@71 $generated@@5 ($generated@@9 ($generated@@27 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@71 $generated@@124 ($generated@@65 $generated@@124 $generated@@123)) ($generated@@65 $generated@@40 ($generated@@71 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@71 $generated@@124 ($generated@@65 $generated@@124 $generated@@123)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 (T@U) Bool)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@135  (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@117 ($generated@@27 2) ($generated@@20 ($generated@@21 ($generated@@21 $generated@@125)) $generated@@126 $generated@@127)) ($generated@@117 $generated@@127 (+ $generated@@127 1))))))
(let (($generated@@136  (=> (and (= $generated@@127 0) (= (ControlFlow 0 7) 2)) $generated@@135)))
(let (($generated@@137  (=> (and (or (not (= $generated@@127 0)) (not true)) (= $generated@@128 (- $generated@@127 1))) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (<= 0 $generated@@127) (= $generated@@128 $generated@@127))) (=> (or (<= 0 $generated@@127) (= $generated@@128 $generated@@127)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (< $generated@@128 $generated@@127)) (=> (< $generated@@128 $generated@@127) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= ($generated@@27 0) $generated@@128)) (=> (<= ($generated@@27 0) $generated@@128) (=> (and ($generated@@129 $generated@@130) ($generated@@131 $generated@@130)) (=> (and (and ($generated@@22 $generated@@126 $generated@@128) (= ($generated@@117 ($generated@@27 2) ($generated@@20 ($generated@@21 ($generated@@21 $generated@@125)) $generated@@126 $generated@@128)) ($generated@@117 $generated@@128 (+ $generated@@128 1)))) (and (= $generated@@132 $generated@@130) (= (ControlFlow 0 3) 2))) $generated@@135)))))))))))
(let (($generated@@138  (=> (= $generated@@133 ($generated@@84 $generated@@23 $generated@@134 $generated false)) (=> (and (and ($generated@@129 $generated@@132) ($generated@@131 $generated@@132)) (and (= $generated@@134 $generated@@132) (forall (($generated@@139 Int) ) (!  (=> (and (<= ($generated@@27 0) $generated@@139) (and (<= 0 $generated@@139) (< $generated@@139 $generated@@127))) (= ($generated@@117 ($generated@@27 2) ($generated@@20 ($generated@@21 $generated@@125) $generated@@126 $generated@@139)) ($generated@@117 $generated@@139 (+ $generated@@139 1))))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@125) $generated@@126 $generated@@139))
)))) (and (=> (= (ControlFlow 0 8) 3) $generated@@137) (=> (= (ControlFlow 0 8) 7) $generated@@136))))))
(let (($generated@@140  (=> (and ($generated@@129 $generated@@134) ($generated@@131 $generated@@134)) (=> (and (and (and (or (not (= $generated@@126 $generated@@23)) (not true)) (and ($generated@@24 $generated@@25 $generated@@126 $generated@@26) ($generated@@34 $generated@@25 $generated@@126 $generated@@26 $generated@@134))) (= 1 $generated@@19)) (and (<= ($generated@@27 0) $generated@@127) (= (ControlFlow 0 9) 8))) $generated@@138))))
$generated@@140))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
