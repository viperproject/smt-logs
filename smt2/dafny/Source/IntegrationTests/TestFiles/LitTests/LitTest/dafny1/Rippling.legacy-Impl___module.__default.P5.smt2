(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 () Int)
(declare-fun $generated@@35 (T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 (T@U T@U) Bool)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (T@U T@U) Bool)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@U) Bool)
(declare-fun $generated@@65 (T@U) Bool)
(declare-fun $generated@@68 (T@U) Bool)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@81 (T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@U T@U) Bool)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@124 (T@U) Int)
(declare-fun $generated@@130 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@131 () T@T)
(declare-fun $generated@@132 () T@T)
(declare-fun $generated@@133 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@134 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@135 () T@T)
(declare-fun $generated@@136 (T@T T@T) T@T)
(declare-fun $generated@@137 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@138 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@139 (T@T) T@T)
(declare-fun $generated@@140 (T@T) T@T)
(declare-fun $generated@@189 (T@U) T@U)
(declare-fun $generated@@190 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@8 $generated@@25) 3))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@26 $generated@@29 $generated@@30) $generated@@27)  (and ($generated@@24 $generated@@25 $generated@@29 $generated@@28) ($generated@@24 $generated@@25 $generated@@30 $generated@@27)))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@26 $generated@@29 $generated@@30) $generated@@27))
)))
(assert (= ($generated@@31 $generated@@32) $generated@@2))
(assert (= ($generated@@31 $generated@@33) $generated@@4))
(assert ($generated@@24 $generated@@25 $generated@@32 $generated@@28))
(assert ($generated@@24 $generated@@25 $generated@@33 $generated@@27))
(assert  (=> (<= 2 $generated@@34) (forall (($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> (or ($generated@@37 $generated@@45 $generated@@46) (and (< 2 $generated@@34) (and ($generated@@24 $generated@@25 $generated@@45 $generated@@28) ($generated@@24 $generated@@25 $generated@@46 $generated@@27)))) (and (=> (not ($generated@@38 $generated@@46)) (let (($generated@@47 ($generated@@39 $generated@@46)))
(let (($generated@@48 ($generated@@40 $generated@@46)))
 (and (and (and ($generated@@41 $generated@@45) ($generated@@41 $generated@@48)) (=> ($generated@@42 $generated@@45 $generated@@48) ($generated@@37 $generated@@45 $generated@@47))) (=> (not ($generated@@42 $generated@@45 $generated@@48)) ($generated@@37 $generated@@45 $generated@@47)))))) (= ($generated@@35 ($generated@@36 $generated@@44) $generated@@45 $generated@@46) (ite ($generated@@38 $generated@@46) $generated@@32 (let (($generated@@49 ($generated@@39 $generated@@46)))
(let (($generated@@50 ($generated@@40 $generated@@46)))
(ite ($generated@@42 $generated@@45 $generated@@50) ($generated@@43 ($generated@@35 $generated@@44 $generated@@45 $generated@@49)) ($generated@@35 $generated@@44 $generated@@45 $generated@@49))))))))
 :pattern ( ($generated@@35 ($generated@@36 $generated@@44) $generated@@45 $generated@@46))
))))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@42 $generated@@51 $generated@@52) (= $generated@@51 $generated@@52))
 :pattern ( ($generated@@42 $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 $generated@@54) $generated@@54)
 :pattern ( ($generated@@53 $generated@@55 $generated@@54))
)))
(assert  (=> (<= 2 $generated@@34) (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (=> (or ($generated@@37 ($generated@@53 $generated@@25 $generated@@57) ($generated@@53 $generated@@25 $generated@@58)) (and (< 2 $generated@@34) (and ($generated@@24 $generated@@25 $generated@@57 $generated@@28) ($generated@@24 $generated@@25 $generated@@58 $generated@@27)))) (and (=> (not ($generated@@13 ($generated@@53 $generated@@9 ($generated@@12 ($generated@@38 ($generated@@53 $generated@@25 $generated@@58)))))) (let (($generated@@59 ($generated@@53 $generated@@25 ($generated@@39 ($generated@@53 $generated@@25 $generated@@58)))))
(let (($generated@@60 ($generated@@53 $generated@@25 ($generated@@40 ($generated@@53 $generated@@25 $generated@@58)))))
 (and (and (and ($generated@@41 ($generated@@53 $generated@@25 $generated@@57)) ($generated@@41 $generated@@60)) (=> ($generated@@42 $generated@@57 $generated@@60) ($generated@@37 ($generated@@53 $generated@@25 $generated@@57) $generated@@59))) (=> (not ($generated@@42 $generated@@57 $generated@@60)) ($generated@@37 ($generated@@53 $generated@@25 $generated@@57) $generated@@59)))))) (= ($generated@@35 ($generated@@36 $generated@@56) ($generated@@53 $generated@@25 $generated@@57) ($generated@@53 $generated@@25 $generated@@58)) (ite ($generated@@38 ($generated@@53 $generated@@25 $generated@@58)) $generated@@32 (let (($generated@@61 ($generated@@53 $generated@@25 ($generated@@39 ($generated@@53 $generated@@25 $generated@@58)))))
(let (($generated@@62 ($generated@@53 $generated@@25 ($generated@@40 ($generated@@53 $generated@@25 $generated@@58)))))
(ite ($generated@@42 $generated@@57 $generated@@62) ($generated@@43 ($generated@@53 $generated@@25 ($generated@@35 ($generated@@36 $generated@@56) ($generated@@53 $generated@@25 $generated@@57) $generated@@61))) ($generated@@35 ($generated@@36 $generated@@56) ($generated@@53 $generated@@25 $generated@@57) $generated@@61))))))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@36 $generated@@56) ($generated@@53 $generated@@25 $generated@@57) ($generated@@53 $generated@@25 $generated@@58)))
))))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@63 $generated@@64) (= ($generated@@31 $generated@@64) $generated@@2))
 :pattern ( ($generated@@63 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@65 $generated@@66) (= ($generated@@31 $generated@@66) $generated@@3))
 :pattern ( ($generated@@65 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@38 $generated@@67) (= ($generated@@31 $generated@@67) $generated@@4))
 :pattern ( ($generated@@38 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@68 $generated@@69) (= ($generated@@31 $generated@@69) $generated@@5))
 :pattern ( ($generated@@68 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@71 $generated@@73 ($generated@@70 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@70 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@68 $generated@@74) (exists (($generated@@75 T@U) ($generated@@76 T@U) ) (= $generated@@74 ($generated@@26 $generated@@75 $generated@@76))))
 :pattern ( ($generated@@68 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ) (!  (=> ($generated@@63 $generated@@77) (= $generated@@77 $generated@@32))
 :pattern ( ($generated@@63 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@38 $generated@@78) (= $generated@@78 $generated@@33))
 :pattern ( ($generated@@38 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ) (!  (=> ($generated@@65 $generated@@79) (exists (($generated@@80 T@U) ) (= $generated@@79 ($generated@@43 $generated@@80))))
 :pattern ( ($generated@@65 $generated@@79))
)))
(assert  (=> (<= 1 $generated@@34) (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> (or ($generated@@82 ($generated@@53 $generated@@25 $generated@@85) ($generated@@53 $generated@@25 $generated@@86)) (and (< 1 $generated@@34) (and ($generated@@24 $generated@@25 $generated@@85 $generated@@28) ($generated@@24 $generated@@25 $generated@@86 $generated@@28)))) (and (=> (not ($generated@@13 ($generated@@53 $generated@@9 ($generated@@12 ($generated@@63 ($generated@@53 $generated@@25 $generated@@85)))))) (let (($generated@@87 ($generated@@53 $generated@@25 ($generated@@83 ($generated@@53 $generated@@25 $generated@@85)))))
($generated@@82 $generated@@87 ($generated@@53 $generated@@25 $generated@@86)))) (= ($generated@@81 ($generated@@36 $generated@@84) ($generated@@53 $generated@@25 $generated@@85) ($generated@@53 $generated@@25 $generated@@86)) (ite ($generated@@63 ($generated@@53 $generated@@25 $generated@@85)) $generated@@86 (let (($generated@@88 ($generated@@53 $generated@@25 ($generated@@83 ($generated@@53 $generated@@25 $generated@@85)))))
($generated@@53 $generated@@25 ($generated@@43 ($generated@@53 $generated@@25 ($generated@@81 ($generated@@36 $generated@@84) $generated@@88 ($generated@@53 $generated@@25 $generated@@86))))))))))
 :weight 3
 :pattern ( ($generated@@81 ($generated@@36 $generated@@84) ($generated@@53 $generated@@25 $generated@@85) ($generated@@53 $generated@@25 $generated@@86)))
))))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@43 $generated@@89) $generated@@28) ($generated@@24 $generated@@25 $generated@@89 $generated@@28))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@43 $generated@@89) $generated@@28))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> (and ($generated@@65 $generated@@90) ($generated@@65 $generated@@91)) (= ($generated@@42 $generated@@90 $generated@@91) ($generated@@42 ($generated@@83 $generated@@90) ($generated@@83 $generated@@91))))
 :pattern ( ($generated@@42 $generated@@90 $generated@@91) ($generated@@65 $generated@@90))
 :pattern ( ($generated@@42 $generated@@90 $generated@@91) ($generated@@65 $generated@@91))
)))
(assert  (=> (<= 1 $generated@@34) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (=> (or ($generated@@82 $generated@@93 $generated@@94) (and (< 1 $generated@@34) (and ($generated@@24 $generated@@25 $generated@@93 $generated@@28) ($generated@@24 $generated@@25 $generated@@94 $generated@@28)))) ($generated@@24 $generated@@25 ($generated@@81 $generated@@92 $generated@@93 $generated@@94) $generated@@28))
 :pattern ( ($generated@@81 $generated@@92 $generated@@93 $generated@@94))
))))
(assert  (=> (<= 2 $generated@@34) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (=> (or ($generated@@37 $generated@@96 $generated@@97) (and (< 2 $generated@@34) (and ($generated@@24 $generated@@25 $generated@@96 $generated@@28) ($generated@@24 $generated@@25 $generated@@97 $generated@@27)))) ($generated@@24 $generated@@25 ($generated@@35 $generated@@95 $generated@@96 $generated@@97) $generated@@28))
 :pattern ( ($generated@@35 $generated@@95 $generated@@96 $generated@@97))
))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@81 ($generated@@36 $generated@@98) $generated@@99 $generated@@100) ($generated@@81 $generated@@98 $generated@@99 $generated@@100))
 :pattern ( ($generated@@81 ($generated@@36 $generated@@98) $generated@@99 $generated@@100))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@35 ($generated@@36 $generated@@101) $generated@@102 $generated@@103) ($generated@@35 $generated@@101 $generated@@102 $generated@@103))
 :pattern ( ($generated@@35 ($generated@@36 $generated@@101) $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ) (!  (=> ($generated@@41 $generated@@104) (or ($generated@@63 $generated@@104) ($generated@@65 $generated@@104)))
 :pattern ( ($generated@@41 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@105 $generated@@28) (or ($generated@@63 $generated@@105) ($generated@@65 $generated@@105)))
 :pattern ( ($generated@@65 $generated@@105) ($generated@@24 $generated@@25 $generated@@105 $generated@@28))
 :pattern ( ($generated@@63 $generated@@105) ($generated@@24 $generated@@25 $generated@@105 $generated@@28))
)))
(assert (forall (($generated@@106 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@106 $generated@@27) (or ($generated@@38 $generated@@106) ($generated@@68 $generated@@106)))
 :pattern ( ($generated@@68 $generated@@106) ($generated@@24 $generated@@25 $generated@@106 $generated@@27))
 :pattern ( ($generated@@38 $generated@@106) ($generated@@24 $generated@@25 $generated@@106 $generated@@27))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ) (!  (=> (and ($generated@@63 $generated@@107) ($generated@@63 $generated@@108)) ($generated@@42 $generated@@107 $generated@@108))
 :pattern ( ($generated@@42 $generated@@107 $generated@@108) ($generated@@63 $generated@@107))
 :pattern ( ($generated@@42 $generated@@107 $generated@@108) ($generated@@63 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@31 ($generated@@26 $generated@@109 $generated@@110)) $generated@@5)
 :pattern ( ($generated@@26 $generated@@109 $generated@@110))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@40 ($generated@@26 $generated@@111 $generated@@112)) $generated@@111)
 :pattern ( ($generated@@26 $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@39 ($generated@@26 $generated@@113 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@26 $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ) (! (= ($generated@@31 ($generated@@43 $generated@@115)) $generated@@3)
 :pattern ( ($generated@@43 $generated@@115))
)))
(assert (forall (($generated@@116 T@U) ) (! (= ($generated@@83 ($generated@@43 $generated@@116)) $generated@@116)
 :pattern ( ($generated@@43 $generated@@116))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@T) ) (! (= ($generated@@70 $generated@@118 ($generated@@71 $generated@@118 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@71 $generated@@118 $generated@@117))
)))
(assert  (=> (<= 1 $generated@@34) (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (=> (or ($generated@@82 $generated@@120 $generated@@121) (and (< 1 $generated@@34) (and ($generated@@24 $generated@@25 $generated@@120 $generated@@28) ($generated@@24 $generated@@25 $generated@@121 $generated@@28)))) (and (=> (not ($generated@@63 $generated@@120)) (let (($generated@@122 ($generated@@83 $generated@@120)))
($generated@@82 $generated@@122 $generated@@121))) (= ($generated@@81 ($generated@@36 $generated@@119) $generated@@120 $generated@@121) (ite ($generated@@63 $generated@@120) $generated@@121 (let (($generated@@123 ($generated@@83 $generated@@120)))
($generated@@43 ($generated@@81 $generated@@119 $generated@@123 $generated@@121)))))))
 :pattern ( ($generated@@81 ($generated@@36 $generated@@119) $generated@@120 $generated@@121))
))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! (< ($generated@@124 $generated@@125) ($generated@@124 ($generated@@26 $generated@@125 $generated@@126)))
 :pattern ( ($generated@@26 $generated@@125 $generated@@126))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (! (< ($generated@@124 $generated@@128) ($generated@@124 ($generated@@26 $generated@@127 $generated@@128)))
 :pattern ( ($generated@@26 $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ) (! (< ($generated@@124 $generated@@129) ($generated@@124 ($generated@@43 $generated@@129)))
 :pattern ( ($generated@@43 $generated@@129))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@T) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (! (= ($generated@@130 $generated@@141 $generated@@142 $generated@@143 ($generated@@137 $generated@@141 $generated@@142 $generated@@143 $generated@@145 $generated@@146 $generated@@147 $generated@@144) $generated@@146 $generated@@147) $generated@@144)
 :weight 0
)) (and (forall (($generated@@148 T@T) ($generated@@149 T@T) ($generated@@150 T@T) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ) (!  (or (= $generated@@153 $generated@@155) (= ($generated@@130 $generated@@148 $generated@@149 $generated@@150 ($generated@@137 $generated@@148 $generated@@149 $generated@@150 $generated@@152 $generated@@153 $generated@@154 $generated@@151) $generated@@155 $generated@@156) ($generated@@130 $generated@@148 $generated@@149 $generated@@150 $generated@@152 $generated@@155 $generated@@156)))
 :weight 0
)) (forall (($generated@@157 T@T) ($generated@@158 T@T) ($generated@@159 T@T) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ) (!  (or (= $generated@@163 $generated@@165) (= ($generated@@130 $generated@@157 $generated@@158 $generated@@159 ($generated@@137 $generated@@157 $generated@@158 $generated@@159 $generated@@161 $generated@@162 $generated@@163 $generated@@160) $generated@@164 $generated@@165) ($generated@@130 $generated@@157 $generated@@158 $generated@@159 $generated@@161 $generated@@164 $generated@@165)))
 :weight 0
)))) (= ($generated@@8 $generated@@131) 4)) (= ($generated@@8 $generated@@132) 5)) (forall (($generated@@166 T@T) ($generated@@167 T@T) ($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ) (! (= ($generated@@134 $generated@@166 $generated@@167 ($generated@@138 $generated@@166 $generated@@167 $generated@@169 $generated@@170 $generated@@168) $generated@@170) $generated@@168)
 :weight 0
))) (forall (($generated@@171 T@T) ($generated@@172 T@T) ($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 T@U) ($generated@@176 T@U) ) (!  (or (= $generated@@175 $generated@@176) (= ($generated@@134 $generated@@171 $generated@@172 ($generated@@138 $generated@@171 $generated@@172 $generated@@174 $generated@@175 $generated@@173) $generated@@176) ($generated@@134 $generated@@171 $generated@@172 $generated@@174 $generated@@176)))
 :weight 0
))) (= ($generated@@8 $generated@@135) 6)) (forall (($generated@@177 T@T) ($generated@@178 T@T) ) (= ($generated@@8 ($generated@@136 $generated@@177 $generated@@178)) 7))) (forall (($generated@@179 T@T) ($generated@@180 T@T) ) (! (= ($generated@@139 ($generated@@136 $generated@@179 $generated@@180)) $generated@@179)
 :pattern ( ($generated@@136 $generated@@179 $generated@@180))
))) (forall (($generated@@181 T@T) ($generated@@182 T@T) ) (! (= ($generated@@140 ($generated@@136 $generated@@181 $generated@@182)) $generated@@182)
 :pattern ( ($generated@@136 $generated@@181 $generated@@182))
))))
(assert (forall (($generated@@183 T@U) ($generated@@184 T@U) ($generated@@185 T@U) ($generated@@186 Bool) ($generated@@187 T@U) ($generated@@188 T@U) ) (! (= ($generated@@13 ($generated@@130 $generated@@131 $generated@@132 $generated@@9 ($generated@@133 $generated@@183 $generated@@184 $generated@@185 $generated@@186) $generated@@187 $generated@@188))  (=> (and (or (not (= $generated@@187 $generated@@183)) (not true)) ($generated@@13 ($generated@@70 $generated@@9 ($generated@@134 $generated@@132 $generated@@135 ($generated@@134 $generated@@131 ($generated@@136 $generated@@132 $generated@@135) $generated@@184 $generated@@187) $generated@@185)))) $generated@@186))
 :pattern ( ($generated@@130 $generated@@131 $generated@@132 $generated@@9 ($generated@@133 $generated@@183 $generated@@184 $generated@@185 $generated@@186) $generated@@187 $generated@@188))
)))
(assert (= ($generated@@189 $generated@@28) $generated@@0))
(assert (= ($generated@@190 $generated@@28) $generated@@6))
(assert (= ($generated@@189 $generated@@27) $generated@@1))
(assert (= ($generated@@190 $generated@@27) $generated@@7))
(assert (= $generated@@32 ($generated@@53 $generated@@25 $generated@@32)))
(assert (= $generated@@33 ($generated@@53 $generated@@25 $generated@@33)))
(assert (forall (($generated@@191 T@U) ($generated@@192 T@U) ) (! (= ($generated@@26 ($generated@@53 $generated@@25 $generated@@191) ($generated@@53 $generated@@25 $generated@@192)) ($generated@@53 $generated@@25 ($generated@@26 $generated@@191 $generated@@192)))
 :pattern ( ($generated@@26 ($generated@@53 $generated@@25 $generated@@191) ($generated@@53 $generated@@25 $generated@@192)))
)))
(assert (forall (($generated@@193 T@U) ) (! (= ($generated@@43 ($generated@@53 $generated@@25 $generated@@193)) ($generated@@53 $generated@@25 ($generated@@43 $generated@@193)))
 :pattern ( ($generated@@43 ($generated@@53 $generated@@25 $generated@@193)))
)))
(assert (forall (($generated@@194 T@U) ($generated@@195 T@T) ) (! (= ($generated@@71 $generated@@195 ($generated@@53 $generated@@195 $generated@@194)) ($generated@@53 $generated@@135 ($generated@@71 $generated@@195 $generated@@194)))
 :pattern ( ($generated@@71 $generated@@195 ($generated@@53 $generated@@195 $generated@@194)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@196 () T@U)
(declare-fun $generated@@197 () T@U)
(declare-fun $generated@@198 () T@U)
(declare-fun $generated@@199 () T@U)
(declare-fun $generated@@200 (T@U) Bool)
(declare-fun $generated@@201 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@202  (=> (and (= $generated@@196 ($generated@@133 $generated@@197 $generated@@198 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@203 T@U) ($generated@@204 T@U) ($generated@@205 T@U) ) (!  (=> (and (and ($generated@@24 $generated@@25 $generated@@203 $generated@@28) ($generated@@24 $generated@@25 $generated@@204 $generated@@27)) ($generated@@24 $generated@@25 $generated@@205 $generated@@28)) (=> ($generated@@42 ($generated@@81 ($generated@@36 ($generated@@36 $generated@@199)) ($generated@@53 $generated@@25 ($generated@@43 ($generated@@53 $generated@@25 $generated@@32))) ($generated@@35 ($generated@@36 ($generated@@36 $generated@@199)) $generated@@203 $generated@@204)) ($generated@@35 ($generated@@36 ($generated@@36 $generated@@199)) $generated@@203 ($generated@@26 $generated@@205 $generated@@204))) ($generated@@42 $generated@@203 $generated@@205)))
 :pattern ( ($generated@@26 $generated@@205 $generated@@204) ($generated@@81 ($generated@@36 ($generated@@36 $generated@@199)) ($generated@@43 $generated@@32) ($generated@@35 ($generated@@36 ($generated@@36 $generated@@199)) $generated@@203 $generated@@204)))
)))))
(let (($generated@@206  (=> (and (and ($generated@@200 $generated@@198) ($generated@@201 $generated@@198)) (and (= 3 $generated@@34) (= (ControlFlow 0 3) 2))) $generated@@202)))
$generated@@206)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
