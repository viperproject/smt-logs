(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 () T@U)
(declare-fun $generated@@12 (T@T) Int)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 () T@T)
(declare-fun $generated@@16 (Bool) T@U)
(declare-fun $generated@@17 (T@U) Bool)
(declare-fun $generated@@18 (Int) T@U)
(declare-fun $generated@@19 (T@U) Int)
(declare-fun $generated@@20 (Real) T@U)
(declare-fun $generated@@21 (T@U) Real)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@U T@U) T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@U) Bool)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@56 (T@U) Bool)
(declare-fun $generated@@58 (T@U) Bool)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@76 () Int)
(declare-fun $generated@@77 (T@U T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@79 (T@U) Bool)
(declare-fun $generated@@80 (T@U) T@U)
(declare-fun $generated@@86 (T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@U T@U) Bool)
(declare-fun $generated@@94 (T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@U T@U) Bool)
(declare-fun $generated@@105 (T@U) Bool)
(declare-fun $generated@@138 (T@U) T@U)
(declare-fun $generated@@147 (T@U) Int)
(declare-fun $generated@@155 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@156 () T@T)
(declare-fun $generated@@157 () T@T)
(declare-fun $generated@@158 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@159 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@160 () T@T)
(declare-fun $generated@@161 (T@T T@T) T@T)
(declare-fun $generated@@162 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@163 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@164 (T@T) T@T)
(declare-fun $generated@@165 (T@T) T@T)
(declare-fun $generated@@214 () T@U)
(declare-fun $generated@@222 (T@U) T@U)
(declare-fun $generated@@223 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@12 $generated@@13) 0) (= ($generated@@12 $generated@@14) 1)) (= ($generated@@12 $generated@@15) 2)) (forall (($generated@@22 Bool) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 Int) ) (! (= ($generated@@19 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@18 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 Real) ) (! (= ($generated@@21 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))) (forall (($generated@@27 T@U) ) (! (= ($generated@@20 ($generated@@21 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@21 $generated@@27))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10 $generated@@11)
)
(assert (= ($generated@@12 $generated@@29) 3))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@28 $generated@@29 ($generated@@30 $generated@@33 $generated@@34) $generated@@31)  (and ($generated@@28 $generated@@29 $generated@@33 $generated@@32) ($generated@@28 $generated@@29 $generated@@34 $generated@@31)))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@30 $generated@@33 $generated@@34) $generated@@31))
)))
(assert (= ($generated@@35 $generated@@36) $generated@@3))
(assert (= ($generated@@35 $generated@@37) $generated@@4))
(assert (= ($generated@@35 $generated@@38) $generated@@5))
(assert (= ($generated@@35 $generated@@39) $generated@@7))
(assert ($generated@@28 $generated@@29 $generated@@36 $generated@@40))
(assert ($generated@@28 $generated@@29 $generated@@37 $generated@@40))
(assert ($generated@@28 $generated@@29 $generated@@38 $generated@@32))
(assert ($generated@@28 $generated@@29 $generated@@39 $generated@@31))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@41 $generated@@42 $generated@@43) (= $generated@@42 $generated@@43))
 :pattern ( ($generated@@41 $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@44 $generated@@45 $generated@@46) (= $generated@@45 $generated@@46))
 :pattern ( ($generated@@44 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@47 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@50 $generated@@51) (= ($generated@@35 $generated@@51) $generated@@3))
 :pattern ( ($generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@52 $generated@@53) (= ($generated@@35 $generated@@53) $generated@@4))
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@54 $generated@@55) (= ($generated@@35 $generated@@55) $generated@@5))
 :pattern ( ($generated@@54 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@56 $generated@@57) (= ($generated@@35 $generated@@57) $generated@@6))
 :pattern ( ($generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@58 $generated@@59) (= ($generated@@35 $generated@@59) $generated@@7))
 :pattern ( ($generated@@58 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@60 $generated@@61) (= ($generated@@35 $generated@@61) $generated@@8))
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 ($generated@@62 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@62 $generated@@65 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@60 $generated@@66) (exists (($generated@@67 T@U) ($generated@@68 T@U) ) (= $generated@@66 ($generated@@30 $generated@@67 $generated@@68))))
 :pattern ( ($generated@@60 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@50 $generated@@69) (= $generated@@69 $generated@@36))
 :pattern ( ($generated@@50 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@52 $generated@@70) (= $generated@@70 $generated@@37))
 :pattern ( ($generated@@52 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@54 $generated@@71) (= $generated@@71 $generated@@38))
 :pattern ( ($generated@@54 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> ($generated@@58 $generated@@72) (= $generated@@72 $generated@@39))
 :pattern ( ($generated@@58 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@56 $generated@@74) (exists (($generated@@75 T@U) ) (= $generated@@74 ($generated@@73 $generated@@75))))
 :pattern ( ($generated@@56 $generated@@74))
)))
(assert  (=> (<= 2 $generated@@76) (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> (or ($generated@@79 $generated@@82) (and (< 2 $generated@@76) ($generated@@28 $generated@@29 $generated@@82 $generated@@31))) (and (=> (not ($generated@@58 $generated@@82)) (let (($generated@@83 ($generated@@80 $generated@@82)))
($generated@@79 $generated@@83))) (= ($generated@@77 ($generated@@78 $generated@@81) $generated@@82) (ite ($generated@@58 $generated@@82) $generated@@38 (let (($generated@@84 ($generated@@80 $generated@@82)))
($generated@@73 ($generated@@77 $generated@@81 $generated@@84)))))))
 :pattern ( ($generated@@77 ($generated@@78 $generated@@81) $generated@@82))
))))
(assert (forall (($generated@@85 T@U) ) (! (= ($generated@@28 $generated@@29 ($generated@@73 $generated@@85) $generated@@32) ($generated@@28 $generated@@29 $generated@@85 $generated@@32))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@73 $generated@@85) $generated@@32))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (and ($generated@@56 $generated@@87) ($generated@@56 $generated@@88)) (= ($generated@@44 $generated@@87 $generated@@88) ($generated@@44 ($generated@@86 $generated@@87) ($generated@@86 $generated@@88))))
 :pattern ( ($generated@@44 $generated@@87 $generated@@88) ($generated@@56 $generated@@87))
 :pattern ( ($generated@@44 $generated@@87 $generated@@88) ($generated@@56 $generated@@88))
)))
(assert  (=> (<= 1 $generated@@76) (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (=> (or ($generated@@90 $generated@@92 $generated@@93) (and (< 1 $generated@@76) (and ($generated@@28 $generated@@29 $generated@@92 $generated@@32) ($generated@@28 $generated@@29 $generated@@93 $generated@@32)))) ($generated@@28 $generated@@29 ($generated@@89 $generated@@91 $generated@@92 $generated@@93) $generated@@40))
 :pattern ( ($generated@@89 $generated@@91 $generated@@92 $generated@@93))
))))
(assert  (=> (<= 2 $generated@@76) (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (=> (or ($generated@@95 $generated@@97 $generated@@98) (and (< 2 $generated@@76) (and ($generated@@28 $generated@@29 $generated@@97 $generated@@32) ($generated@@28 $generated@@29 $generated@@98 $generated@@31)))) ($generated@@28 $generated@@29 ($generated@@94 $generated@@96 $generated@@97 $generated@@98) $generated@@31))
 :pattern ( ($generated@@94 $generated@@96 $generated@@97 $generated@@98))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@89 ($generated@@78 $generated@@99) $generated@@100 $generated@@101) ($generated@@89 $generated@@99 $generated@@100 $generated@@101))
 :pattern ( ($generated@@89 ($generated@@78 $generated@@99) $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@94 ($generated@@78 $generated@@102) $generated@@103 $generated@@104) ($generated@@94 $generated@@102 $generated@@103 $generated@@104))
 :pattern ( ($generated@@94 ($generated@@78 $generated@@102) $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@106 T@U) ) (!  (=> ($generated@@105 $generated@@106) (or ($generated@@50 $generated@@106) ($generated@@52 $generated@@106)))
 :pattern ( ($generated@@105 $generated@@106))
)))
(assert  (=> (<= 2 $generated@@76) (forall (($generated@@107 T@U) ($generated@@108 T@U) ) (!  (=> (or ($generated@@79 $generated@@108) (and (< 2 $generated@@76) ($generated@@28 $generated@@29 $generated@@108 $generated@@31))) ($generated@@28 $generated@@29 ($generated@@77 $generated@@107 $generated@@108) $generated@@32))
 :pattern ( ($generated@@77 $generated@@107 $generated@@108))
))))
(assert  (=> (<= 1 $generated@@76) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (=> (or ($generated@@90 ($generated@@47 $generated@@29 $generated@@110) ($generated@@47 $generated@@29 $generated@@111)) (and (< 1 $generated@@76) (and ($generated@@28 $generated@@29 $generated@@110 $generated@@32) ($generated@@28 $generated@@29 $generated@@111 $generated@@32)))) (and (=> (not ($generated@@17 ($generated@@47 $generated@@13 ($generated@@16 ($generated@@54 ($generated@@47 $generated@@29 $generated@@111)))))) (let (($generated@@112 ($generated@@47 $generated@@29 ($generated@@86 ($generated@@47 $generated@@29 $generated@@111)))))
 (=> (not ($generated@@17 ($generated@@47 $generated@@13 ($generated@@16 ($generated@@54 ($generated@@47 $generated@@29 $generated@@110)))))) (let (($generated@@113 ($generated@@47 $generated@@29 ($generated@@86 ($generated@@47 $generated@@29 $generated@@110)))))
($generated@@90 $generated@@113 $generated@@112))))) (= ($generated@@89 ($generated@@78 $generated@@109) ($generated@@47 $generated@@29 $generated@@110) ($generated@@47 $generated@@29 $generated@@111)) (ite ($generated@@54 ($generated@@47 $generated@@29 $generated@@111)) $generated@@36 (let (($generated@@114 ($generated@@47 $generated@@29 ($generated@@86 ($generated@@47 $generated@@29 $generated@@111)))))
(ite ($generated@@54 ($generated@@47 $generated@@29 $generated@@110)) $generated@@37 (let (($generated@@115 ($generated@@47 $generated@@29 ($generated@@86 ($generated@@47 $generated@@29 $generated@@110)))))
($generated@@47 $generated@@29 ($generated@@89 ($generated@@78 $generated@@109) $generated@@115 $generated@@114)))))))))
 :weight 3
 :pattern ( ($generated@@89 ($generated@@78 $generated@@109) ($generated@@47 $generated@@29 $generated@@110) ($generated@@47 $generated@@29 $generated@@111)))
))))
(assert  (=> (<= 1 $generated@@76) (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (=> (or ($generated@@90 $generated@@117 $generated@@118) (and (< 1 $generated@@76) (and ($generated@@28 $generated@@29 $generated@@117 $generated@@32) ($generated@@28 $generated@@29 $generated@@118 $generated@@32)))) (and (=> (not ($generated@@54 $generated@@118)) (let (($generated@@119 ($generated@@86 $generated@@118)))
 (=> (not ($generated@@54 $generated@@117)) (let (($generated@@120 ($generated@@86 $generated@@117)))
($generated@@90 $generated@@120 $generated@@119))))) (= ($generated@@89 ($generated@@78 $generated@@116) $generated@@117 $generated@@118) (ite ($generated@@54 $generated@@118) $generated@@36 (let (($generated@@121 ($generated@@86 $generated@@118)))
(ite ($generated@@54 $generated@@117) $generated@@37 (let (($generated@@122 ($generated@@86 $generated@@117)))
($generated@@89 $generated@@116 $generated@@122 $generated@@121))))))))
 :pattern ( ($generated@@89 ($generated@@78 $generated@@116) $generated@@117 $generated@@118))
))))
(assert (forall (($generated@@123 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@123 $generated@@40) (or ($generated@@50 $generated@@123) ($generated@@52 $generated@@123)))
 :pattern ( ($generated@@52 $generated@@123) ($generated@@28 $generated@@29 $generated@@123 $generated@@40))
 :pattern ( ($generated@@50 $generated@@123) ($generated@@28 $generated@@29 $generated@@123 $generated@@40))
)))
(assert (forall (($generated@@124 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@124 $generated@@32) (or ($generated@@54 $generated@@124) ($generated@@56 $generated@@124)))
 :pattern ( ($generated@@56 $generated@@124) ($generated@@28 $generated@@29 $generated@@124 $generated@@32))
 :pattern ( ($generated@@54 $generated@@124) ($generated@@28 $generated@@29 $generated@@124 $generated@@32))
)))
(assert (forall (($generated@@125 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@125 $generated@@31) (or ($generated@@58 $generated@@125) ($generated@@60 $generated@@125)))
 :pattern ( ($generated@@60 $generated@@125) ($generated@@28 $generated@@29 $generated@@125 $generated@@31))
 :pattern ( ($generated@@58 $generated@@125) ($generated@@28 $generated@@29 $generated@@125 $generated@@31))
)))
(assert  (=> (<= 2 $generated@@76) (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (=> (or ($generated@@79 ($generated@@47 $generated@@29 $generated@@127)) (and (< 2 $generated@@76) ($generated@@28 $generated@@29 $generated@@127 $generated@@31))) (and (=> (not ($generated@@17 ($generated@@47 $generated@@13 ($generated@@16 ($generated@@58 ($generated@@47 $generated@@29 $generated@@127)))))) (let (($generated@@128 ($generated@@47 $generated@@29 ($generated@@80 ($generated@@47 $generated@@29 $generated@@127)))))
($generated@@79 $generated@@128))) (= ($generated@@77 ($generated@@78 $generated@@126) ($generated@@47 $generated@@29 $generated@@127)) (ite ($generated@@58 ($generated@@47 $generated@@29 $generated@@127)) $generated@@38 (let (($generated@@129 ($generated@@47 $generated@@29 ($generated@@80 ($generated@@47 $generated@@29 $generated@@127)))))
($generated@@47 $generated@@29 ($generated@@73 ($generated@@47 $generated@@29 ($generated@@77 ($generated@@78 $generated@@126) $generated@@129)))))))))
 :weight 3
 :pattern ( ($generated@@77 ($generated@@78 $generated@@126) ($generated@@47 $generated@@29 $generated@@127)))
))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (and ($generated@@50 $generated@@130) ($generated@@50 $generated@@131)) ($generated@@41 $generated@@130 $generated@@131))
 :pattern ( ($generated@@41 $generated@@130 $generated@@131) ($generated@@50 $generated@@130))
 :pattern ( ($generated@@41 $generated@@130 $generated@@131) ($generated@@50 $generated@@131))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> (and ($generated@@52 $generated@@132) ($generated@@52 $generated@@133)) ($generated@@41 $generated@@132 $generated@@133))
 :pattern ( ($generated@@41 $generated@@132 $generated@@133) ($generated@@52 $generated@@132))
 :pattern ( ($generated@@41 $generated@@132 $generated@@133) ($generated@@52 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> (and ($generated@@54 $generated@@134) ($generated@@54 $generated@@135)) ($generated@@44 $generated@@134 $generated@@135))
 :pattern ( ($generated@@44 $generated@@134 $generated@@135) ($generated@@54 $generated@@134))
 :pattern ( ($generated@@44 $generated@@134 $generated@@135) ($generated@@54 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@35 ($generated@@30 $generated@@136 $generated@@137)) $generated@@8)
 :pattern ( ($generated@@30 $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@138 ($generated@@30 $generated@@139 $generated@@140)) $generated@@139)
 :pattern ( ($generated@@30 $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (! (= ($generated@@80 ($generated@@30 $generated@@141 $generated@@142)) $generated@@142)
 :pattern ( ($generated@@30 $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ) (! (= ($generated@@35 ($generated@@73 $generated@@143)) $generated@@6)
 :pattern ( ($generated@@73 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ) (! (= ($generated@@86 ($generated@@73 $generated@@144)) $generated@@144)
 :pattern ( ($generated@@73 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@T) ) (! (= ($generated@@62 $generated@@146 ($generated@@63 $generated@@146 $generated@@145)) $generated@@145)
 :pattern ( ($generated@@63 $generated@@146 $generated@@145))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (! (< ($generated@@147 $generated@@148) ($generated@@147 ($generated@@30 $generated@@148 $generated@@149)))
 :pattern ( ($generated@@30 $generated@@148 $generated@@149))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (! (< ($generated@@147 $generated@@151) ($generated@@147 ($generated@@30 $generated@@150 $generated@@151)))
 :pattern ( ($generated@@30 $generated@@150 $generated@@151))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (! (= ($generated@@77 ($generated@@78 $generated@@152) $generated@@153) ($generated@@77 $generated@@152 $generated@@153))
 :pattern ( ($generated@@77 ($generated@@78 $generated@@152) $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ) (! (< ($generated@@147 $generated@@154) ($generated@@147 ($generated@@73 $generated@@154)))
 :pattern ( ($generated@@73 $generated@@154))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@166 T@T) ($generated@@167 T@T) ($generated@@168 T@T) ($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ($generated@@172 T@U) ) (! (= ($generated@@155 $generated@@166 $generated@@167 $generated@@168 ($generated@@162 $generated@@166 $generated@@167 $generated@@168 $generated@@170 $generated@@171 $generated@@172 $generated@@169) $generated@@171 $generated@@172) $generated@@169)
 :weight 0
)) (and (forall (($generated@@173 T@T) ($generated@@174 T@T) ($generated@@175 T@T) ($generated@@176 T@U) ($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 T@U) ($generated@@180 T@U) ($generated@@181 T@U) ) (!  (or (= $generated@@178 $generated@@180) (= ($generated@@155 $generated@@173 $generated@@174 $generated@@175 ($generated@@162 $generated@@173 $generated@@174 $generated@@175 $generated@@177 $generated@@178 $generated@@179 $generated@@176) $generated@@180 $generated@@181) ($generated@@155 $generated@@173 $generated@@174 $generated@@175 $generated@@177 $generated@@180 $generated@@181)))
 :weight 0
)) (forall (($generated@@182 T@T) ($generated@@183 T@T) ($generated@@184 T@T) ($generated@@185 T@U) ($generated@@186 T@U) ($generated@@187 T@U) ($generated@@188 T@U) ($generated@@189 T@U) ($generated@@190 T@U) ) (!  (or (= $generated@@188 $generated@@190) (= ($generated@@155 $generated@@182 $generated@@183 $generated@@184 ($generated@@162 $generated@@182 $generated@@183 $generated@@184 $generated@@186 $generated@@187 $generated@@188 $generated@@185) $generated@@189 $generated@@190) ($generated@@155 $generated@@182 $generated@@183 $generated@@184 $generated@@186 $generated@@189 $generated@@190)))
 :weight 0
)))) (= ($generated@@12 $generated@@156) 4)) (= ($generated@@12 $generated@@157) 5)) (forall (($generated@@191 T@T) ($generated@@192 T@T) ($generated@@193 T@U) ($generated@@194 T@U) ($generated@@195 T@U) ) (! (= ($generated@@159 $generated@@191 $generated@@192 ($generated@@163 $generated@@191 $generated@@192 $generated@@194 $generated@@195 $generated@@193) $generated@@195) $generated@@193)
 :weight 0
))) (forall (($generated@@196 T@T) ($generated@@197 T@T) ($generated@@198 T@U) ($generated@@199 T@U) ($generated@@200 T@U) ($generated@@201 T@U) ) (!  (or (= $generated@@200 $generated@@201) (= ($generated@@159 $generated@@196 $generated@@197 ($generated@@163 $generated@@196 $generated@@197 $generated@@199 $generated@@200 $generated@@198) $generated@@201) ($generated@@159 $generated@@196 $generated@@197 $generated@@199 $generated@@201)))
 :weight 0
))) (= ($generated@@12 $generated@@160) 6)) (forall (($generated@@202 T@T) ($generated@@203 T@T) ) (= ($generated@@12 ($generated@@161 $generated@@202 $generated@@203)) 7))) (forall (($generated@@204 T@T) ($generated@@205 T@T) ) (! (= ($generated@@164 ($generated@@161 $generated@@204 $generated@@205)) $generated@@204)
 :pattern ( ($generated@@161 $generated@@204 $generated@@205))
))) (forall (($generated@@206 T@T) ($generated@@207 T@T) ) (! (= ($generated@@165 ($generated@@161 $generated@@206 $generated@@207)) $generated@@207)
 :pattern ( ($generated@@161 $generated@@206 $generated@@207))
))))
(assert (forall (($generated@@208 T@U) ($generated@@209 T@U) ($generated@@210 T@U) ($generated@@211 Bool) ($generated@@212 T@U) ($generated@@213 T@U) ) (! (= ($generated@@17 ($generated@@155 $generated@@156 $generated@@157 $generated@@13 ($generated@@158 $generated@@208 $generated@@209 $generated@@210 $generated@@211) $generated@@212 $generated@@213))  (=> (and (or (not (= $generated@@212 $generated@@208)) (not true)) ($generated@@17 ($generated@@62 $generated@@13 ($generated@@159 $generated@@157 $generated@@160 ($generated@@159 $generated@@156 ($generated@@161 $generated@@157 $generated@@160) $generated@@209 $generated@@212) $generated@@210)))) $generated@@211))
 :pattern ( ($generated@@155 $generated@@156 $generated@@157 $generated@@13 ($generated@@158 $generated@@208 $generated@@209 $generated@@210 $generated@@211) $generated@@212 $generated@@213))
)))
(assert  (=> (<= 2 $generated@@76) (forall (($generated@@215 T@U) ($generated@@216 T@U) ($generated@@217 T@U) ) (!  (=> (or ($generated@@95 ($generated@@47 $generated@@29 $generated@@216) ($generated@@47 $generated@@29 $generated@@217)) (and (< 2 $generated@@76) (and ($generated@@28 $generated@@29 $generated@@216 $generated@@32) ($generated@@28 $generated@@29 $generated@@217 $generated@@31)))) (and (=> (not ($generated@@17 ($generated@@47 $generated@@13 ($generated@@16 ($generated@@58 ($generated@@47 $generated@@29 $generated@@217)))))) (let (($generated@@218 ($generated@@47 $generated@@29 ($generated@@80 ($generated@@47 $generated@@29 $generated@@217)))))
(let (($generated@@219 ($generated@@47 $generated@@29 ($generated@@138 ($generated@@47 $generated@@29 $generated@@217)))))
 (and (and ($generated@@105 ($generated@@89 ($generated@@78 $generated@@214) ($generated@@47 $generated@@29 $generated@@216) $generated@@219)) ($generated@@90 ($generated@@47 $generated@@29 $generated@@216) $generated@@219)) (=> (not ($generated@@41 ($generated@@89 ($generated@@78 $generated@@214) ($generated@@47 $generated@@29 $generated@@216) $generated@@219) $generated@@37)) ($generated@@95 ($generated@@47 $generated@@29 $generated@@216) $generated@@218)))))) (= ($generated@@94 ($generated@@78 $generated@@215) ($generated@@47 $generated@@29 $generated@@216) ($generated@@47 $generated@@29 $generated@@217)) (ite ($generated@@58 ($generated@@47 $generated@@29 $generated@@217)) ($generated@@30 ($generated@@47 $generated@@29 $generated@@216) ($generated@@47 $generated@@29 $generated@@39)) (let (($generated@@220 ($generated@@47 $generated@@29 ($generated@@80 ($generated@@47 $generated@@29 $generated@@217)))))
(let (($generated@@221 ($generated@@47 $generated@@29 ($generated@@138 ($generated@@47 $generated@@29 $generated@@217)))))
(ite ($generated@@41 ($generated@@89 ($generated@@78 $generated@@214) ($generated@@47 $generated@@29 $generated@@216) $generated@@221) $generated@@37) ($generated@@30 ($generated@@47 $generated@@29 $generated@@216) ($generated@@47 $generated@@29 ($generated@@30 $generated@@221 $generated@@220))) ($generated@@30 $generated@@221 ($generated@@47 $generated@@29 ($generated@@94 ($generated@@78 $generated@@215) ($generated@@47 $generated@@29 $generated@@216) $generated@@220))))))))))
 :weight 3
 :pattern ( ($generated@@94 ($generated@@78 $generated@@215) ($generated@@47 $generated@@29 $generated@@216) ($generated@@47 $generated@@29 $generated@@217)))
))))
(assert (= ($generated@@222 $generated@@40) $generated@@0))
(assert (= ($generated@@223 $generated@@40) $generated@@9))
(assert (= ($generated@@222 $generated@@32) $generated@@1))
(assert (= ($generated@@223 $generated@@32) $generated@@10))
(assert (= ($generated@@222 $generated@@31) $generated@@2))
(assert (= ($generated@@223 $generated@@31) $generated@@11))
(assert (= $generated@@36 ($generated@@47 $generated@@29 $generated@@36)))
(assert (= $generated@@37 ($generated@@47 $generated@@29 $generated@@37)))
(assert (= $generated@@38 ($generated@@47 $generated@@29 $generated@@38)))
(assert (= $generated@@39 ($generated@@47 $generated@@29 $generated@@39)))
(assert (forall (($generated@@224 T@U) ($generated@@225 T@U) ) (! (= ($generated@@30 ($generated@@47 $generated@@29 $generated@@224) ($generated@@47 $generated@@29 $generated@@225)) ($generated@@47 $generated@@29 ($generated@@30 $generated@@224 $generated@@225)))
 :pattern ( ($generated@@30 ($generated@@47 $generated@@29 $generated@@224) ($generated@@47 $generated@@29 $generated@@225)))
)))
(assert  (=> (<= 2 $generated@@76) (forall (($generated@@226 T@U) ($generated@@227 T@U) ($generated@@228 T@U) ) (!  (=> (or ($generated@@95 $generated@@227 $generated@@228) (and (< 2 $generated@@76) (and ($generated@@28 $generated@@29 $generated@@227 $generated@@32) ($generated@@28 $generated@@29 $generated@@228 $generated@@31)))) (and (=> (not ($generated@@58 $generated@@228)) (let (($generated@@229 ($generated@@80 $generated@@228)))
(let (($generated@@230 ($generated@@138 $generated@@228)))
 (and (and ($generated@@105 ($generated@@89 ($generated@@78 $generated@@214) $generated@@227 $generated@@230)) ($generated@@90 $generated@@227 $generated@@230)) (=> (not ($generated@@41 ($generated@@89 ($generated@@78 $generated@@214) $generated@@227 $generated@@230) $generated@@37)) ($generated@@95 $generated@@227 $generated@@229)))))) (= ($generated@@94 ($generated@@78 $generated@@226) $generated@@227 $generated@@228) (ite ($generated@@58 $generated@@228) ($generated@@30 $generated@@227 ($generated@@47 $generated@@29 $generated@@39)) (let (($generated@@231 ($generated@@80 $generated@@228)))
(let (($generated@@232 ($generated@@138 $generated@@228)))
(ite ($generated@@41 ($generated@@89 ($generated@@78 $generated@@214) $generated@@227 $generated@@232) $generated@@37) ($generated@@30 $generated@@227 ($generated@@30 $generated@@232 $generated@@231)) ($generated@@30 $generated@@232 ($generated@@94 $generated@@226 $generated@@227 $generated@@231)))))))))
 :pattern ( ($generated@@94 ($generated@@78 $generated@@226) $generated@@227 $generated@@228))
))))
(assert (forall (($generated@@233 T@U) ) (! (= ($generated@@73 ($generated@@47 $generated@@29 $generated@@233)) ($generated@@47 $generated@@29 ($generated@@73 $generated@@233)))
 :pattern ( ($generated@@73 ($generated@@47 $generated@@29 $generated@@233)))
)))
(assert (forall (($generated@@234 T@U) ($generated@@235 T@T) ) (! (= ($generated@@63 $generated@@235 ($generated@@47 $generated@@235 $generated@@234)) ($generated@@47 $generated@@160 ($generated@@63 $generated@@235 $generated@@234)))
 :pattern ( ($generated@@63 $generated@@235 ($generated@@47 $generated@@235 $generated@@234)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@236 () T@U)
(declare-fun $generated@@237 () T@U)
(declare-fun $generated@@238 () T@U)
(declare-fun $generated@@239 (T@U) Bool)
(declare-fun $generated@@240 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@241  (=> (and (= $generated@@236 ($generated@@158 $generated@@237 $generated@@238 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@242 T@U) ($generated@@243 T@U) ) (!  (=> (and ($generated@@28 $generated@@29 $generated@@242 $generated@@32) ($generated@@28 $generated@@29 $generated@@243 $generated@@31)) ($generated@@44 ($generated@@77 ($generated@@78 ($generated@@78 $generated@@214)) ($generated@@94 ($generated@@78 ($generated@@78 $generated@@214)) $generated@@242 $generated@@243)) ($generated@@73 ($generated@@77 ($generated@@78 ($generated@@78 $generated@@214)) $generated@@243))))
 :pattern ( ($generated@@94 ($generated@@78 ($generated@@78 $generated@@214)) $generated@@242 $generated@@243))
)))))
(let (($generated@@244  (=> (and (and ($generated@@239 $generated@@238) ($generated@@240 $generated@@238)) (and (= 3 $generated@@76) (= (ControlFlow 0 3) 2))) $generated@@241)))
$generated@@244)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
