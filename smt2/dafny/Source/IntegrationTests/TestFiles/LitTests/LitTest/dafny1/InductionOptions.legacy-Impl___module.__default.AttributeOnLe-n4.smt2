(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U T@U T@U) T@U)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@34 (T@U) Int)
(declare-fun $generated@@35 (Int T@U) T@U)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@47 (T@U) Bool)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@U) Bool)
(declare-fun $generated@@88 (T@U) Int)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 () T@T)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@95 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@T T@T) T@T)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@100 (T@T) T@T)
(declare-fun $generated@@101 (T@T) T@T)
(declare-fun $generated@@150 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@156 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@6 $generated@@27) 3))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (=> (or ($generated@@28 ($generated@@26 $generated@@27 $generated@@37) ($generated@@26 $generated@@27 $generated@@38)) (and (< 1 $generated@@23) (and ($generated@@29 $generated@@27 $generated@@37 $generated@@30) ($generated@@29 $generated@@27 $generated@@38 $generated@@30)))) (and (=> (not ($generated@@11 ($generated@@26 $generated@@7 ($generated@@10 ($generated@@31 ($generated@@26 $generated@@27 $generated@@37)))))) (let (($generated@@39 ($generated@@26 $generated@@27 ($generated@@32 ($generated@@26 $generated@@27 $generated@@37)))))
($generated@@28 $generated@@39 ($generated@@26 $generated@@27 $generated@@38)))) (= ($generated@@24 ($generated@@25 $generated@@36) ($generated@@26 $generated@@27 $generated@@37) ($generated@@26 $generated@@27 $generated@@38)) (ite ($generated@@31 ($generated@@26 $generated@@27 $generated@@37)) $generated@@38 (let (($generated@@40 ($generated@@26 $generated@@27 ($generated@@32 ($generated@@26 $generated@@27 $generated@@37)))))
(let (($generated@@41 ($generated@@33 ($generated@@34 ($generated@@26 $generated@@27 $generated@@37)))))
($generated@@26 $generated@@27 ($generated@@35 $generated@@41 ($generated@@26 $generated@@27 ($generated@@24 ($generated@@25 $generated@@36) $generated@@40 ($generated@@26 $generated@@27 $generated@@38)))))))))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@25 $generated@@36) ($generated@@26 $generated@@27 $generated@@37) ($generated@@26 $generated@@27 $generated@@38)))
))))
(assert (= ($generated@@42 $generated@@43) $generated@@3))
(assert ($generated@@29 $generated@@27 $generated@@43 $generated@@30))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@44 $generated@@45 $generated@@46) (= $generated@@45 $generated@@46))
 :pattern ( ($generated@@44 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (!  (=> (and ($generated@@47 $generated@@48) ($generated@@47 $generated@@49)) (= ($generated@@44 $generated@@48 $generated@@49)  (and (= ($generated@@34 $generated@@48) ($generated@@34 $generated@@49)) ($generated@@44 ($generated@@32 $generated@@48) ($generated@@32 $generated@@49)))))
 :pattern ( ($generated@@44 $generated@@48 $generated@@49) ($generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@48 $generated@@49) ($generated@@47 $generated@@49))
)))
(assert (forall (($generated@@50 Int) ) (! (= ($generated@@33 $generated@@50) $generated@@50)
 :pattern ( ($generated@@33 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@26 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@26 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@31 $generated@@53) (= ($generated@@42 $generated@@53) $generated@@3))
 :pattern ( ($generated@@31 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@47 $generated@@54) (= ($generated@@42 $generated@@54) $generated@@4))
 :pattern ( ($generated@@47 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 ($generated@@55 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@55 $generated@@58 $generated@@57))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (=> (or ($generated@@28 $generated@@60 $generated@@61) (and (< 1 $generated@@23) (and ($generated@@29 $generated@@27 $generated@@60 $generated@@30) ($generated@@29 $generated@@27 $generated@@61 $generated@@30)))) (and (=> (not ($generated@@31 $generated@@60)) (let (($generated@@62 ($generated@@32 $generated@@60)))
($generated@@28 $generated@@62 $generated@@61))) (= ($generated@@24 ($generated@@25 $generated@@59) $generated@@60 $generated@@61) (ite ($generated@@31 $generated@@60) $generated@@61 (let (($generated@@63 ($generated@@32 $generated@@60)))
(let (($generated@@64 ($generated@@34 $generated@@60)))
($generated@@35 $generated@@64 ($generated@@24 $generated@@59 $generated@@63 $generated@@61))))))))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@59) $generated@@60 $generated@@61))
))))
(assert (forall (($generated@@65 T@U) ) (!  (=> ($generated@@47 $generated@@65) (exists (($generated@@66 Int) ($generated@@67 T@U) ) (= $generated@@65 ($generated@@35 $generated@@66 $generated@@67))))
 :pattern ( ($generated@@47 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ) (!  (=> ($generated@@31 $generated@@68) (= $generated@@68 $generated@@43))
 :pattern ( ($generated@@31 $generated@@68))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> (or ($generated@@28 $generated@@70 $generated@@71) (and (< 1 $generated@@23) (and ($generated@@29 $generated@@27 $generated@@70 $generated@@30) ($generated@@29 $generated@@27 $generated@@71 $generated@@30)))) ($generated@@29 $generated@@27 ($generated@@24 $generated@@69 $generated@@70 $generated@@71) $generated@@30))
 :pattern ( ($generated@@24 $generated@@69 $generated@@70 $generated@@71))
))))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@24 ($generated@@25 $generated@@72) $generated@@73 $generated@@74) ($generated@@24 $generated@@72 $generated@@73 $generated@@74))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@72) $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@75 $generated@@76) (or ($generated@@31 $generated@@76) ($generated@@47 $generated@@76)))
 :pattern ( ($generated@@75 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ) (!  (=> ($generated@@29 $generated@@27 $generated@@77 $generated@@30) (or ($generated@@31 $generated@@77) ($generated@@47 $generated@@77)))
 :pattern ( ($generated@@47 $generated@@77) ($generated@@29 $generated@@27 $generated@@77 $generated@@30))
 :pattern ( ($generated@@31 $generated@@77) ($generated@@29 $generated@@27 $generated@@77 $generated@@30))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> (and ($generated@@31 $generated@@78) ($generated@@31 $generated@@79)) ($generated@@44 $generated@@78 $generated@@79))
 :pattern ( ($generated@@44 $generated@@78 $generated@@79) ($generated@@31 $generated@@78))
 :pattern ( ($generated@@44 $generated@@78 $generated@@79) ($generated@@31 $generated@@79))
)))
(assert (forall (($generated@@80 Int) ($generated@@81 T@U) ) (! (= ($generated@@42 ($generated@@35 $generated@@80 $generated@@81)) $generated@@4)
 :pattern ( ($generated@@35 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 Int) ($generated@@83 T@U) ) (! (= ($generated@@34 ($generated@@35 $generated@@82 $generated@@83)) $generated@@82)
 :pattern ( ($generated@@35 $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@84 Int) ($generated@@85 T@U) ) (! (= ($generated@@32 ($generated@@35 $generated@@84 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@35 $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@55 $generated@@87 ($generated@@56 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@56 $generated@@87 $generated@@86))
)))
(assert (forall (($generated@@89 Int) ($generated@@90 T@U) ) (! (< ($generated@@88 $generated@@90) ($generated@@88 ($generated@@35 $generated@@89 $generated@@90)))
 :pattern ( ($generated@@35 $generated@@89 $generated@@90))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@91 $generated@@102 $generated@@103 $generated@@104 ($generated@@98 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@107 $generated@@108) $generated@@105)
 :weight 0
)) (and (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@91 $generated@@109 $generated@@110 $generated@@111 ($generated@@98 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@91 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@124 $generated@@126) (= ($generated@@91 $generated@@118 $generated@@119 $generated@@120 ($generated@@98 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@124 $generated@@121) $generated@@125 $generated@@126) ($generated@@91 $generated@@118 $generated@@119 $generated@@120 $generated@@122 $generated@@125 $generated@@126)))
 :weight 0
)))) (= ($generated@@6 $generated@@92) 4)) (= ($generated@@6 $generated@@93) 5)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@95 $generated@@127 $generated@@128 ($generated@@99 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@129) $generated@@131) $generated@@129)
 :weight 0
))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (!  (or (= $generated@@136 $generated@@137) (= ($generated@@95 $generated@@132 $generated@@133 ($generated@@99 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@134) $generated@@137) ($generated@@95 $generated@@132 $generated@@133 $generated@@135 $generated@@137)))
 :weight 0
))) (= ($generated@@6 $generated@@96) 6)) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (= ($generated@@6 ($generated@@97 $generated@@138 $generated@@139)) 7))) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (! (= ($generated@@100 ($generated@@97 $generated@@140 $generated@@141)) $generated@@140)
 :pattern ( ($generated@@97 $generated@@140 $generated@@141))
))) (forall (($generated@@142 T@T) ($generated@@143 T@T) ) (! (= ($generated@@101 ($generated@@97 $generated@@142 $generated@@143)) $generated@@143)
 :pattern ( ($generated@@97 $generated@@142 $generated@@143))
))))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 Bool) ($generated@@148 T@U) ($generated@@149 T@U) ) (! (= ($generated@@11 ($generated@@91 $generated@@92 $generated@@93 $generated@@7 ($generated@@94 $generated@@144 $generated@@145 $generated@@146 $generated@@147) $generated@@148 $generated@@149))  (=> (and (or (not (= $generated@@148 $generated@@144)) (not true)) ($generated@@11 ($generated@@55 $generated@@7 ($generated@@95 $generated@@93 $generated@@96 ($generated@@95 $generated@@92 ($generated@@97 $generated@@93 $generated@@96) $generated@@145 $generated@@148) $generated@@146)))) $generated@@147))
 :pattern ( ($generated@@91 $generated@@92 $generated@@93 $generated@@7 ($generated@@94 $generated@@144 $generated@@145 $generated@@146 $generated@@147) $generated@@148 $generated@@149))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> (and ($generated@@151 $generated@@153) (and ($generated@@47 $generated@@152) ($generated@@150 $generated@@27 $generated@@152 $generated@@30 $generated@@153))) ($generated@@150 $generated@@8 ($generated@@12 ($generated@@34 $generated@@152)) $generated $generated@@153))
 :pattern ( ($generated@@150 $generated@@8 ($generated@@12 ($generated@@34 $generated@@152)) $generated $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> (and ($generated@@151 $generated@@155) ($generated@@29 $generated@@27 $generated@@154 $generated@@30)) ($generated@@150 $generated@@27 $generated@@154 $generated@@30 $generated@@155))
 :pattern ( ($generated@@150 $generated@@27 $generated@@154 $generated@@30 $generated@@155))
)))
(assert (= ($generated@@22 $generated@@30) $generated@@2))
(assert (= ($generated@@156 $generated@@30) $generated@@5))
(assert (= $generated@@43 ($generated@@26 $generated@@27 $generated@@43)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (!  (=> (and ($generated@@151 $generated@@158) (and ($generated@@47 $generated@@157) ($generated@@150 $generated@@27 $generated@@157 $generated@@30 $generated@@158))) ($generated@@150 $generated@@27 ($generated@@32 $generated@@157) $generated@@30 $generated@@158))
 :pattern ( ($generated@@150 $generated@@27 ($generated@@32 $generated@@157) $generated@@30 $generated@@158))
)))
(assert (forall (($generated@@159 Int) ($generated@@160 T@U) ) (! (= ($generated@@35 ($generated@@33 $generated@@159) ($generated@@26 $generated@@27 $generated@@160)) ($generated@@26 $generated@@27 ($generated@@35 $generated@@159 $generated@@160)))
 :pattern ( ($generated@@35 ($generated@@33 $generated@@159) ($generated@@26 $generated@@27 $generated@@160)))
)))
(assert (forall (($generated@@161 Int) ) (! (= ($generated@@56 $generated@@8 ($generated@@12 ($generated@@33 $generated@@161))) ($generated@@26 $generated@@96 ($generated@@56 $generated@@8 ($generated@@12 $generated@@161))))
 :pattern ( ($generated@@56 $generated@@8 ($generated@@12 ($generated@@33 $generated@@161))))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@T) ) (! (= ($generated@@56 $generated@@163 ($generated@@26 $generated@@163 $generated@@162)) ($generated@@26 $generated@@96 ($generated@@56 $generated@@163 $generated@@162)))
 :pattern ( ($generated@@56 $generated@@163 ($generated@@26 $generated@@163 $generated@@162)))
)))
(assert (forall (($generated@@164 Int) ($generated@@165 T@U) ) (! (= ($generated@@29 $generated@@27 ($generated@@35 $generated@@164 $generated@@165) $generated@@30)  (and ($generated@@29 $generated@@8 ($generated@@12 $generated@@164) $generated) ($generated@@29 $generated@@27 $generated@@165 $generated@@30)))
 :pattern ( ($generated@@29 $generated@@27 ($generated@@35 $generated@@164 $generated@@165) $generated@@30))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (! ($generated@@150 $generated@@8 $generated@@167 $generated $generated@@166)
 :pattern ( ($generated@@150 $generated@@8 $generated@@167 $generated $generated@@166))
)))
(assert (forall (($generated@@168 T@U) ) (! ($generated@@29 $generated@@8 $generated@@168 $generated)
 :pattern ( ($generated@@29 $generated@@8 $generated@@168 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@176  (=> (and (= $generated@@169 ($generated@@94 $generated@@170 $generated@@171 $generated@@1 false)) ($generated@@75 $generated@@172)) (=> (and (and (and ($generated@@151 $generated@@173) ($generated@@174 $generated@@173)) (= $generated@@171 $generated@@173)) (and (forall (($generated@@177 T@U) ) (!  (=> (and (and ($generated@@29 $generated@@27 $generated@@177 $generated@@30) ($generated@@11 ($generated@@26 $generated@@7 ($generated@@10 true)))) (< ($generated@@88 $generated@@177) ($generated@@88 $generated@@172))) ($generated@@44 ($generated@@24 ($generated@@25 $generated@@175) $generated@@177 ($generated@@26 $generated@@27 $generated@@43)) $generated@@177))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@175) $generated@@177 ($generated@@26 $generated@@27 $generated@@43)))
)) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@44 ($generated@@24 ($generated@@25 ($generated@@25 $generated@@175)) $generated@@172 ($generated@@26 $generated@@27 $generated@@43)) $generated@@172)))))
(let (($generated@@178  (=> (and ($generated@@151 $generated@@171) ($generated@@174 $generated@@171)) (=> (and (and (and ($generated@@29 $generated@@27 $generated@@172 $generated@@30) ($generated@@150 $generated@@27 $generated@@172 $generated@@30 $generated@@171)) ($generated@@75 $generated@@172)) (and (= 2 $generated@@23) (= (ControlFlow 0 3) 2))) $generated@@176))))
$generated@@178)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
