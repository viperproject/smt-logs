(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U Int) Int)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@23 (Int) Bool)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@T T@T) T@T)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@U) Bool)
(declare-fun $generated@@64 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@70 (T@U T@U) Bool)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@86 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@118 (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@24 T@U) ($generated@@25 Int) ) (!  (=> (or ($generated@@23 ($generated@@22 $generated@@25)) (and (< 0 $generated@@19) (<= ($generated@@22 0) ($generated@@22 $generated@@25)))) (and (=> (or (not (= ($generated@@22 $generated@@25) ($generated@@22 0))) (not true)) ($generated@@23 ($generated@@22 (- $generated@@25 1)))) (= ($generated@@20 ($generated@@21 $generated@@24) ($generated@@22 $generated@@25)) (ite (= ($generated@@22 $generated@@25) ($generated@@22 0)) 0 (- (+ ($generated@@20 ($generated@@21 $generated@@24) ($generated@@22 (- $generated@@25 1))) $generated@@25) 1)))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@24) ($generated@@22 $generated@@25)))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@27 $generated@@36 $generated@@37 ($generated@@33 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@38) $generated@@40) $generated@@38)
 :weight 0
)) (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (!  (or (= $generated@@45 $generated@@46) (= ($generated@@27 $generated@@41 $generated@@42 ($generated@@33 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@43) $generated@@46) ($generated@@27 $generated@@41 $generated@@42 $generated@@44 $generated@@46)))
 :weight 0
))) (= ($generated@@2 $generated@@28) 3)) (= ($generated@@2 $generated@@29) 4)) (= ($generated@@2 $generated@@30) 5)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (= ($generated@@2 ($generated@@31 $generated@@47 $generated@@48)) 6))) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (! (= ($generated@@34 ($generated@@31 $generated@@49 $generated@@50)) $generated@@49)
 :pattern ( ($generated@@31 $generated@@49 $generated@@50))
))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@35 ($generated@@31 $generated@@51 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@31 $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> ($generated@@26 $generated@@53 $generated@@54) (forall (($generated@@55 T@U) ) (!  (=> ($generated@@7 ($generated@@32 $generated@@3 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@53 $generated@@55) $generated@@1))) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated@@1))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated@@1))
)))
 :pattern ( ($generated@@26 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@22 $generated@@56) $generated@@56)
 :pattern ( ($generated@@22 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 $generated@@58) $generated@@58)
 :pattern ( ($generated@@57 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 ($generated@@32 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@32 $generated@@62 $generated@@61))
)))
(assert ($generated@@63 $generated@@1))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (!  (=> ($generated@@26 $generated@@65 $generated@@66) (=> ($generated@@64 $generated@@69 $generated@@67 $generated@@68 $generated@@65) ($generated@@64 $generated@@69 $generated@@67 $generated@@68 $generated@@66)))
 :pattern ( ($generated@@26 $generated@@65 $generated@@66) ($generated@@64 $generated@@69 $generated@@67 $generated@@68 $generated@@65))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> ($generated@@70 $generated@@71 $generated@@72) (and ($generated@@26 $generated@@71 $generated@@72) (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> (not ($generated@@63 $generated@@74)) (= ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@71 $generated@@73) $generated@@74) ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@72 $generated@@73) $generated@@74)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@72 $generated@@73) $generated@@74))
))))
 :pattern ( ($generated@@70 $generated@@71 $generated@@72))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@75 T@U) ($generated@@76 Int) ) (!  (=> (or ($generated@@23 $generated@@76) (and (< 0 $generated@@19) (<= ($generated@@22 0) $generated@@76))) (and (=> (or (not (= $generated@@76 ($generated@@22 0))) (not true)) ($generated@@23 (- $generated@@76 1))) (= ($generated@@20 ($generated@@21 $generated@@75) $generated@@76) (ite (= $generated@@76 ($generated@@22 0)) 0 (- (+ ($generated@@20 $generated@@75 (- $generated@@76 1)) $generated@@76) 1)))))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@75) $generated@@76))
))))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> (or (not (= $generated@@77 $generated@@79)) (not true)) (=> (and ($generated@@26 $generated@@77 $generated@@78) ($generated@@26 $generated@@78 $generated@@79)) ($generated@@26 $generated@@77 $generated@@79)))
 :pattern ( ($generated@@26 $generated@@77 $generated@@78) ($generated@@26 $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@32 $generated@@81 ($generated@@60 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@60 $generated@@81 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 Int) ) (! (= ($generated@@20 ($generated@@21 $generated@@82) $generated@@83) ($generated@@20 $generated@@82 $generated@@83))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@82) $generated@@83))
)))
(assert  (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@84 $generated@@87 $generated@@88 $generated@@89 ($generated@@86 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@92 $generated@@93) $generated@@90)
 :weight 0
)) (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@84 $generated@@94 $generated@@95 $generated@@96 ($generated@@86 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@84 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@84 $generated@@103 $generated@@104 $generated@@105 ($generated@@86 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@84 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)))))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 Bool) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@7 ($generated@@84 $generated@@30 $generated@@28 $generated@@3 ($generated@@85 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))  (=> (and (or (not (= $generated@@116 $generated@@112)) (not true)) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@113 $generated@@116) $generated@@114)))) $generated@@115))
 :pattern ( ($generated@@84 $generated@@30 $generated@@28 $generated@@3 ($generated@@85 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))
)))
(assert (forall (($generated@@119 Int) ($generated@@120 Int) ) (! (= ($generated@@118 $generated@@119 $generated@@120) (* $generated@@119 $generated@@120))
 :pattern ( ($generated@@118 $generated@@119 $generated@@120))
)))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@60 $generated@@4 ($generated@@8 ($generated@@22 $generated@@121))) ($generated@@57 $generated@@29 ($generated@@60 $generated@@4 ($generated@@8 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@4 ($generated@@8 ($generated@@22 $generated@@121))))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@T) ) (! (= ($generated@@60 $generated@@123 ($generated@@57 $generated@@123 $generated@@122)) ($generated@@57 $generated@@29 ($generated@@60 $generated@@123 $generated@@122)))
 :pattern ( ($generated@@60 $generated@@123 ($generated@@57 $generated@@123 $generated@@122)))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (! ($generated@@64 $generated@@4 $generated@@125 $generated $generated@@124)
 :pattern ( ($generated@@64 $generated@@4 $generated@@125 $generated $generated@@124))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@133  (=> (and (and (and (= $generated@@126 ($generated@@85 $generated@@127 $generated@@128 $generated@@1 false)) (<= ($generated@@22 0) $generated@@129)) (and ($generated@@130 $generated@@131) ($generated@@132 $generated@@131))) (and (and (forall (($generated@@134 T@U) ) (!  (=> (and (or (not (= $generated@@134 $generated@@127)) (not true)) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@128 $generated@@134) $generated@@1)))) (= ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@131 $generated@@134) ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@128 $generated@@134)))
 :pattern ( ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@131 $generated@@134))
)) ($generated@@70 $generated@@128 $generated@@131)) (and ($generated@@64 $generated@@4 ($generated@@8 $generated@@129) $generated $generated@@131) (= (ControlFlow 0 2) (- 0 1))))) (<= ($generated@@22 0) $generated@@129))))
(let (($generated@@135  (=> (and (and ($generated@@130 $generated@@128) ($generated@@132 $generated@@128)) (and (= 1 $generated@@19) (= (ControlFlow 0 3) 2))) $generated@@133)))
$generated@@135)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
