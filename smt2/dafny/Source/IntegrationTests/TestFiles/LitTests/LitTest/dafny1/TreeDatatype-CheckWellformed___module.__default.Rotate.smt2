(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Append (T@U T@U T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |_module.__default.Append#canCall| (T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List._h1 (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun _module.List._h0 (T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun _module.__default.len (T@U T@U T@U) Int)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.List#Equal| (T@U T@U) Bool)
(declare-fun _module.__default.SingletonList (T@U T@U) T@U)
(declare-fun |_module.__default.SingletonList#canCall| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun _module.__default.Rotate (T@U T@U Int T@U) T@U)
(declare-fun |_module.__default.Rotate#canCall| (T@U Int T@U) Bool)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun |_module.__default.len#canCall| (T@U T@U) Bool)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._module.List |##_module.List.Nil| |##_module.List.Cons| tytagFamily$List)
)
(assert (= (Tag TInt) TagInt))
(assert  (and (= (Ctor DatatypeTypeType) 3) (= (Ctor BoxType) 4)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Append$T T@U) ($ly T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (or (|_module.__default.Append#canCall| _module._default.Append$T (Lit DatatypeTypeType |a#0|) (Lit DatatypeTypeType |b#0|)) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |a#0| (Tclass._module.List _module._default.Append$T)) ($Is DatatypeTypeType |b#0| (Tclass._module.List _module._default.Append$T))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |a#0|)))))) (let ((|t#3| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |a#0|)))))
(|_module.__default.Append#canCall| _module._default.Append$T |t#3| (Lit DatatypeTypeType |b#0|)))) (= (_module.__default.Append _module._default.Append$T ($LS $ly) (Lit DatatypeTypeType |a#0|) (Lit DatatypeTypeType |b#0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |a#0|)) |b#0| (let ((|t#2| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |a#0|)))))
(let ((|h#2| (Lit BoxType (_module.List._h0 (Lit DatatypeTypeType |a#0|)))))
(Lit DatatypeTypeType (|#_module.List.Cons| |h#2| (Lit DatatypeTypeType (_module.__default.Append _module._default.Append$T ($LS $ly) |t#2| (Lit DatatypeTypeType |b#0|)))))))))))
 :weight 3
 :pattern ( (_module.__default.Append _module._default.Append$T ($LS $ly) (Lit DatatypeTypeType |a#0|) (Lit DatatypeTypeType |b#0|)))
))))
(assert (forall ((_module._default.len$T T@U) ($ly@@0 T@U) (|l#0| T@U) ) (! (= (_module.__default.len _module._default.len$T ($LS $ly@@0) |l#0|) (_module.__default.len _module._default.len$T $ly@@0 |l#0|))
 :pattern ( (_module.__default.len _module._default.len$T ($LS $ly@@0) |l#0|))
)))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (forall ((_module.List$T T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h))
)))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.List#Equal| a b) (= a b))
 :pattern ( (|_module.List#Equal| a b))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.SingletonList$T T@U) (|h#0| T@U) ) (!  (=> (or (|_module.__default.SingletonList#canCall| _module._default.SingletonList$T |h#0|) (and (< 2 $FunctionContextHeight) ($IsBox |h#0| _module._default.SingletonList$T))) (and (= (_module.__default.len _module._default.SingletonList$T ($LS $LZ) (_module.__default.SingletonList _module._default.SingletonList$T |h#0|)) (LitInt 1)) ($Is DatatypeTypeType (_module.__default.SingletonList _module._default.SingletonList$T |h#0|) (Tclass._module.List _module._default.SingletonList$T))))
 :pattern ( (_module.__default.SingletonList _module._default.SingletonList$T |h#0|))
))))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.List.Cons_q a@@0) (_module.List.Cons_q b@@0)) (= (|_module.List#Equal| a@@0 b@@0)  (and (= (_module.List._h0 a@@0) (_module.List._h0 b@@0)) (|_module.List#Equal| (_module.List._h1 a@@0) (_module.List._h1 b@@0)))))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q a@@0))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q b@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Append$T@@0 T@U) ($ly@@1 T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (or (|_module.__default.Append#canCall| _module._default.Append$T@@0 |a#0@@0| |b#0@@0|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |a#0@@0| (Tclass._module.List _module._default.Append$T@@0)) ($Is DatatypeTypeType |b#0@@0| (Tclass._module.List _module._default.Append$T@@0))))) (and (= (_module.__default.len _module._default.Append$T@@0 ($LS $LZ) (_module.__default.Append _module._default.Append$T@@0 $ly@@1 |a#0@@0| |b#0@@0|)) (+ (_module.__default.len _module._default.Append$T@@0 ($LS $LZ) |a#0@@0|) (_module.__default.len _module._default.Append$T@@0 ($LS $LZ) |b#0@@0|))) ($Is DatatypeTypeType (_module.__default.Append _module._default.Append$T@@0 $ly@@1 |a#0@@0| |b#0@@0|) (Tclass._module.List _module._default.Append$T@@0))))
 :pattern ( (_module.__default.Append _module._default.Append$T@@0 $ly@@1 |a#0@@0| |b#0@@0|))
))))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.Append$T@@1 T@U) ($ly@@2 T@U) (|a#0@@1| T@U) (|b#0@@1| T@U) ) (!  (=> (or (|_module.__default.Append#canCall| _module._default.Append$T@@1 |a#0@@1| |b#0@@1|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |a#0@@1| (Tclass._module.List _module._default.Append$T@@1)) ($Is DatatypeTypeType |b#0@@1| (Tclass._module.List _module._default.Append$T@@1))))) (and (=> (not (_module.List.Nil_q |a#0@@1|)) (let ((|t#1| (_module.List._h1 |a#0@@1|)))
(|_module.__default.Append#canCall| _module._default.Append$T@@1 |t#1| |b#0@@1|))) (= (_module.__default.Append _module._default.Append$T@@1 ($LS $ly@@2) |a#0@@1| |b#0@@1|) (ite (_module.List.Nil_q |a#0@@1|) |b#0@@1| (let ((|t#0| (_module.List._h1 |a#0@@1|)))
(let ((|h#0@@0| (_module.List._h0 |a#0@@1|)))
(|#_module.List.Cons| |h#0@@0| (_module.__default.Append _module._default.Append$T@@1 $ly@@2 |t#0| |b#0@@1|))))))))
 :pattern ( (_module.__default.Append _module._default.Append$T@@1 ($LS $ly@@2) |a#0@@1| |b#0@@1|))
))))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.List.Cons_q d@@1) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@1 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.List.Nil_q d@@2) (= d@@2 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@2))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.Rotate$T T@U) ($ly@@3 T@U) (|n#0| Int) (|l#0@@0| T@U) ) (!  (=> (and (or (|_module.__default.Rotate#canCall| _module._default.Rotate$T |n#0| |l#0@@0|) (and (< 3 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |l#0@@0| (Tclass._module.List _module._default.Rotate$T)) ($IsAlloc DatatypeTypeType |l#0@@0| (Tclass._module.List _module._default.Rotate$T) $Heap)) (<= (LitInt 0) |n#0|)))) ($IsGoodHeap $Heap)) ($IsAlloc DatatypeTypeType (_module.__default.Rotate _module._default.Rotate$T $ly@@3 |n#0| |l#0@@0|) (Tclass._module.List _module._default.Rotate$T) $Heap))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.Rotate _module._default.Rotate$T $ly@@3 |n#0| |l#0@@0|) (Tclass._module.List _module._default.Rotate$T) $Heap))
))))
(assert (forall ((_module.List$T@@3 T@U) (d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@3) (_module.List.Cons_q d@@3)))
 :pattern ( (_module.List.Cons_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.List _module.List$T@@3)))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TInt) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) TInt)))
 :pattern ( ($IsBox bx TInt))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.SingletonList$T@@0 T@U) (|h#0@@1| T@U) ) (!  (=> (or (|_module.__default.SingletonList#canCall| _module._default.SingletonList$T@@0 |h#0@@1|) (and (< 2 $FunctionContextHeight) ($IsBox |h#0@@1| _module._default.SingletonList$T@@0))) (= (_module.__default.SingletonList _module._default.SingletonList$T@@0 |h#0@@1|) (|#_module.List.Cons| |h#0@@1| (Lit DatatypeTypeType |#_module.List.Nil|))))
 :pattern ( (_module.__default.SingletonList _module._default.SingletonList$T@@0 |h#0@@1|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((_module._default.Rotate$T@@0 T@U) ($ly@@4 T@U) (|n#0@@0| Int) (|l#0@@1| T@U) ) (!  (=> (or (|_module.__default.Rotate#canCall| _module._default.Rotate$T@@0 (LitInt |n#0@@0|) (Lit DatatypeTypeType |l#0@@1|)) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |l#0@@1| (Tclass._module.List _module._default.Rotate$T@@0)) (<= (LitInt 0) (LitInt |n#0@@0|))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@1|)))))) (let ((|t#3@@0| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |l#0@@1|)))))
(let ((|h#3| (Lit BoxType (_module.List._h0 (Lit DatatypeTypeType |l#0@@1|)))))
 (=> (or (not (= (LitInt |n#0@@0|) (LitInt 0))) (not true)) (and (and (|_module.__default.SingletonList#canCall| _module._default.Rotate$T@@0 |h#3|) (|_module.__default.Append#canCall| _module._default.Rotate$T@@0 |t#3@@0| (_module.__default.SingletonList _module._default.Rotate$T@@0 |h#3|))) (|_module.__default.Rotate#canCall| _module._default.Rotate$T@@0 (LitInt (- |n#0@@0| 1)) (_module.__default.Append _module._default.Rotate$T@@0 ($LS $LZ) |t#3@@0| (_module.__default.SingletonList _module._default.Rotate$T@@0 |h#3|)))))))) (= (_module.__default.Rotate _module._default.Rotate$T@@0 ($LS $ly@@4) (LitInt |n#0@@0|) (Lit DatatypeTypeType |l#0@@1|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@1|)) |l#0@@1| (let ((|t#2@@0| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |l#0@@1|)))))
(let ((|h#2@@0| (Lit BoxType (_module.List._h0 (Lit DatatypeTypeType |l#0@@1|)))))
(ite (= (LitInt |n#0@@0|) (LitInt 0)) |l#0@@1| (_module.__default.Rotate _module._default.Rotate$T@@0 ($LS $ly@@4) (LitInt (- |n#0@@0| 1)) (Lit DatatypeTypeType (_module.__default.Append _module._default.Rotate$T@@0 ($LS $LZ) |t#2@@0| (Lit DatatypeTypeType (_module.__default.SingletonList _module._default.Rotate$T@@0 |h#2@@0|))))))))))))
 :weight 3
 :pattern ( (_module.__default.Rotate _module._default.Rotate$T@@0 ($LS $ly@@4) (LitInt |n#0@@0|) (Lit DatatypeTypeType |l#0@@1|)))
))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.List.Nil_q a@@1) (_module.List.Nil_q b@@1)) (|_module.List#Equal| a@@1 b@@1))
 :pattern ( (|_module.List#Equal| a@@1 b@@1) (_module.List.Nil_q a@@1))
 :pattern ( (|_module.List#Equal| a@@1 b@@1) (_module.List.Nil_q b@@1))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List._h0 (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List._h1 (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((_module._default.Rotate$T@@1 T@U) ($ly@@5 T@U) (|n#0@@1| Int) (|l#0@@2| T@U) ) (!  (=> (or (|_module.__default.Rotate#canCall| _module._default.Rotate$T@@1 |n#0@@1| |l#0@@2|) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |l#0@@2| (Tclass._module.List _module._default.Rotate$T@@1)) (<= (LitInt 0) |n#0@@1|)))) (and (= (_module.__default.len _module._default.Rotate$T@@1 ($LS $LZ) (_module.__default.Rotate _module._default.Rotate$T@@1 $ly@@5 |n#0@@1| |l#0@@2|)) (_module.__default.len _module._default.Rotate$T@@1 ($LS $LZ) |l#0@@2|)) ($Is DatatypeTypeType (_module.__default.Rotate _module._default.Rotate$T@@1 $ly@@5 |n#0@@1| |l#0@@2|) (Tclass._module.List _module._default.Rotate$T@@1))))
 :pattern ( (_module.__default.Rotate _module._default.Rotate$T@@1 $ly@@5 |n#0@@1| |l#0@@2|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.len$T@@0 T@U) ($ly@@6 T@U) (|l#0@@3| T@U) ) (!  (=> (or (|_module.__default.len#canCall| _module._default.len$T@@0 |l#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@3| (Tclass._module.List _module._default.len$T@@0)))) (and (=> (not (_module.List.Nil_q |l#0@@3|)) (let ((|t#1@@0| (_module.List._h1 |l#0@@3|)))
(|_module.__default.len#canCall| _module._default.len$T@@0 |t#1@@0|))) (= (_module.__default.len _module._default.len$T@@0 ($LS $ly@@6) |l#0@@3|) (ite (_module.List.Nil_q |l#0@@3|) 0 (let ((|t#0@@0| (_module.List._h1 |l#0@@3|)))
(+ 1 (_module.__default.len _module._default.len$T@@0 $ly@@6 |t#0@@0|)))))))
 :pattern ( (_module.__default.len _module._default.len$T@@0 ($LS $ly@@6) |l#0@@3|))
))))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((d@@4 T@U) (_module.List$T@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.List.Cons_q d@@4) ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@5) $h@@0))) ($IsAllocBox (_module.List._h0 d@@4) _module.List$T@@5 $h@@0))
 :pattern ( ($IsAllocBox (_module.List._h0 d@@4) _module.List$T@@5 $h@@0))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@4| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@4| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@4|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@4| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@0 T@U) (_module._default.Append$T@@2 T@U) ($ly@@7 T@U) (|a#0@@2| T@U) (|b#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.Append#canCall| _module._default.Append$T@@2 |a#0@@2| |b#0@@2|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |a#0@@2| (Tclass._module.List _module._default.Append$T@@2)) ($IsAlloc DatatypeTypeType |a#0@@2| (Tclass._module.List _module._default.Append$T@@2) $Heap@@0)) (and ($Is DatatypeTypeType |b#0@@2| (Tclass._module.List _module._default.Append$T@@2)) ($IsAlloc DatatypeTypeType |b#0@@2| (Tclass._module.List _module._default.Append$T@@2) $Heap@@0))))) ($IsGoodHeap $Heap@@0)) ($IsAlloc DatatypeTypeType (_module.__default.Append _module._default.Append$T@@2 $ly@@7 |a#0@@2| |b#0@@2|) (Tclass._module.List _module._default.Append$T@@2) $Heap@@0))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.Append _module._default.Append$T@@2 $ly@@7 |a#0@@2| |b#0@@2|) (Tclass._module.List _module._default.Append$T@@2) $Heap@@0))
))))
(assert (forall ((d@@5 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@5)) (DtRank d@@5))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@5)))
)))
(assert (forall ((_module._default.Append$T@@3 T@U) ($ly@@8 T@U) (|a#0@@3| T@U) (|b#0@@3| T@U) ) (! (= (_module.__default.Append _module._default.Append$T@@3 ($LS $ly@@8) |a#0@@3| |b#0@@3|) (_module.__default.Append _module._default.Append$T@@3 $ly@@8 |a#0@@3| |b#0@@3|))
 :pattern ( (_module.__default.Append _module._default.Append$T@@3 ($LS $ly@@8) |a#0@@3| |b#0@@3|))
)))
(assert (forall ((_module._default.Rotate$T@@2 T@U) ($ly@@9 T@U) (|n#0@@2| Int) (|l#0@@5| T@U) ) (! (= (_module.__default.Rotate _module._default.Rotate$T@@2 ($LS $ly@@9) |n#0@@2| |l#0@@5|) (_module.__default.Rotate _module._default.Rotate$T@@2 $ly@@9 |n#0@@2| |l#0@@5|))
 :pattern ( (_module.__default.Rotate _module._default.Rotate$T@@2 ($LS $ly@@9) |n#0@@2| |l#0@@5|))
)))
(assert (forall ((_module.List$T@@6 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@0 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((d@@6 T@U) (_module.List$T@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.List.Cons_q d@@6) ($IsAlloc DatatypeTypeType d@@6 (Tclass._module.List _module.List$T@@7) $h@@1))) ($IsAlloc DatatypeTypeType (_module.List._h1 d@@6) (Tclass._module.List _module.List$T@@7) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List._h1 d@@6) (Tclass._module.List _module.List$T@@7) $h@@1))
)))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@1 T@U) (_module._default.SingletonList$T@@1 T@U) (|h#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.SingletonList#canCall| _module._default.SingletonList$T@@1 |h#0@@2|) (and (< 2 $FunctionContextHeight) (and ($IsBox |h#0@@2| _module._default.SingletonList$T@@1) ($IsAllocBox |h#0@@2| _module._default.SingletonList$T@@1 $Heap@@1)))) ($IsGoodHeap $Heap@@1)) ($IsAlloc DatatypeTypeType (_module.__default.SingletonList _module._default.SingletonList$T@@1 |h#0@@2|) (Tclass._module.List _module._default.SingletonList$T@@1) $Heap@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.__default.SingletonList _module._default.SingletonList$T@@1 |h#0@@2|) (Tclass._module.List _module._default.SingletonList$T@@1) $Heap@@1))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((_module._default.Rotate$T@@3 T@U) ($ly@@10 T@U) (|n#0@@3| Int) (|l#0@@6| T@U) ) (!  (=> (or (|_module.__default.Rotate#canCall| _module._default.Rotate$T@@3 |n#0@@3| |l#0@@6|) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |l#0@@6| (Tclass._module.List _module._default.Rotate$T@@3)) (<= (LitInt 0) |n#0@@3|)))) (and (=> (not (_module.List.Nil_q |l#0@@6|)) (let ((|t#1@@1| (_module.List._h1 |l#0@@6|)))
(let ((|h#1| (_module.List._h0 |l#0@@6|)))
 (=> (or (not (= |n#0@@3| (LitInt 0))) (not true)) (and (and (|_module.__default.SingletonList#canCall| _module._default.Rotate$T@@3 |h#1|) (|_module.__default.Append#canCall| _module._default.Rotate$T@@3 |t#1@@1| (_module.__default.SingletonList _module._default.Rotate$T@@3 |h#1|))) (|_module.__default.Rotate#canCall| _module._default.Rotate$T@@3 (- |n#0@@3| 1) (_module.__default.Append _module._default.Rotate$T@@3 ($LS $LZ) |t#1@@1| (_module.__default.SingletonList _module._default.Rotate$T@@3 |h#1|)))))))) (= (_module.__default.Rotate _module._default.Rotate$T@@3 ($LS $ly@@10) |n#0@@3| |l#0@@6|) (ite (_module.List.Nil_q |l#0@@6|) |l#0@@6| (let ((|t#0@@1| (_module.List._h1 |l#0@@6|)))
(let ((|h#0@@3| (_module.List._h0 |l#0@@6|)))
(ite (= |n#0@@3| (LitInt 0)) |l#0@@6| (_module.__default.Rotate _module._default.Rotate$T@@3 $ly@@10 (- |n#0@@3| 1) (_module.__default.Append _module._default.Rotate$T@@3 ($LS $LZ) |t#0@@1| (_module.__default.SingletonList _module._default.Rotate$T@@3 |h#0@@3|))))))))))
 :pattern ( (_module.__default.Rotate _module._default.Rotate$T@@3 ($LS $ly@@10) |n#0@@3| |l#0@@6|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.len$T@@1 T@U) ($ly@@11 T@U) (|l#0@@7| T@U) ) (!  (=> (or (|_module.__default.len#canCall| _module._default.len$T@@1 (Lit DatatypeTypeType |l#0@@7|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@7| (Tclass._module.List _module._default.len$T@@1)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@7|)))))) (let ((|t#3@@1| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |l#0@@7|)))))
(|_module.__default.len#canCall| _module._default.len$T@@1 |t#3@@1|))) (= (_module.__default.len _module._default.len$T@@1 ($LS $ly@@11) (Lit DatatypeTypeType |l#0@@7|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@7|)) 0 (let ((|t#2@@1| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |l#0@@7|)))))
(LitInt (+ 1 (_module.__default.len _module._default.len$T@@1 ($LS $ly@@11) |t#2@@1|))))))))
 :weight 3
 :pattern ( (_module.__default.len _module._default.len$T@@1 ($LS $ly@@11) (Lit DatatypeTypeType |l#0@@7|)))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.SingletonList$T@@2 T@U) (|h#0@@4| T@U) ) (!  (=> (or (|_module.__default.SingletonList#canCall| _module._default.SingletonList$T@@2 (Lit BoxType |h#0@@4|)) (and (< 2 $FunctionContextHeight) ($IsBox |h#0@@4| _module._default.SingletonList$T@@2))) (= (_module.__default.SingletonList _module._default.SingletonList$T@@2 (Lit BoxType |h#0@@4|)) (Lit DatatypeTypeType (|#_module.List.Cons| (Lit BoxType |h#0@@4|) (Lit DatatypeTypeType |#_module.List.Nil|)))))
 :weight 3
 :pattern ( (_module.__default.SingletonList _module._default.SingletonList$T@@2 (Lit BoxType |h#0@@4|)))
))))
(assert (forall ((h@@0 T@U) (v@@1 T@U) ) (! ($IsAlloc intType v@@1 TInt h@@0)
 :pattern ( ($IsAlloc intType v@@1 TInt h@@0))
)))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@2)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$T@@8 $h@@2) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$T@@8) $h@@2))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@2))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 TInt)
 :pattern ( ($Is intType v@@2 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module._default.Rotate$T@@4 () T@U)
(declare-fun |n#0@@4| () Int)
(declare-fun |l#0@@8| () T@U)
(declare-fun |##n#1@0| () Int)
(declare-fun $Heap@@2 () T@U)
(declare-fun |t#Z#0@0| () T@U)
(declare-fun |h#Z#0@0| () T@U)
(declare-fun |##b#0@0| () T@U)
(declare-fun |##l#3@0| () T@U)
(declare-fun |_mcc#0#0| () T@U)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 7) (- 0 6)) (= (_module.__default.len _module._default.Rotate$T@@4 ($LS ($LS $LZ)) (_module.__default.Rotate _module._default.Rotate$T@@4 ($LS ($LS $LZ)) |n#0@@4| |l#0@@8|)) (_module.__default.len _module._default.Rotate$T@@4 ($LS ($LS $LZ)) |l#0@@8|)))))
(let ((anon13_Else_correct  (=> (or (not (= |n#0@@4| (LitInt 0))) (not true)) (=> (and (= |##n#1@0| (- |n#0@@4| 1)) ($IsAlloc intType (int_2_U |##n#1@0|) TInt $Heap@@2)) (=> (and (and (and ($IsAlloc DatatypeTypeType |t#Z#0@0| (Tclass._module.List _module._default.Rotate$T@@4) $Heap@@2) ($IsAllocBox |h#Z#0@0| _module._default.Rotate$T@@4 $Heap@@2)) (and (|_module.__default.SingletonList#canCall| _module._default.Rotate$T@@4 |h#Z#0@0|) (= |##b#0@0| (_module.__default.SingletonList _module._default.Rotate$T@@4 |h#Z#0@0|)))) (and (and ($IsAlloc DatatypeTypeType |##b#0@0| (Tclass._module.List _module._default.Rotate$T@@4) $Heap@@2) (|_module.__default.Append#canCall| _module._default.Rotate$T@@4 |t#Z#0@0| (_module.__default.SingletonList _module._default.Rotate$T@@4 |h#Z#0@0|))) (and (= |##l#3@0| (_module.__default.Append _module._default.Rotate$T@@4 ($LS $LZ) |t#Z#0@0| (_module.__default.SingletonList _module._default.Rotate$T@@4 |h#Z#0@0|))) ($IsAlloc DatatypeTypeType |##l#3@0| (Tclass._module.List _module._default.Rotate$T@@4) $Heap@@2)))) (and (=> (= (ControlFlow 0 10) (- 0 13)) (<= (LitInt 0) |##n#1@0|)) (=> (<= (LitInt 0) |##n#1@0|) (and (=> (= (ControlFlow 0 10) (- 0 12)) (or (<= 0 |n#0@@4|) (= |##n#1@0| |n#0@@4|))) (=> (or (<= 0 |n#0@@4|) (= |##n#1@0| |n#0@@4|)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (or (< |##n#1@0| |n#0@@4|) (and (= |##n#1@0| |n#0@@4|) (< (DtRank |##l#3@0|) (DtRank |l#0@@8|))))) (=> (or (< |##n#1@0| |n#0@@4|) (and (= |##n#1@0| |n#0@@4|) (< (DtRank |##l#3@0|) (DtRank |l#0@@8|)))) (=> (and (|_module.__default.Rotate#canCall| _module._default.Rotate$T@@4 (- |n#0@@4| 1) (_module.__default.Append _module._default.Rotate$T@@4 ($LS $LZ) |t#Z#0@0| (_module.__default.SingletonList _module._default.Rotate$T@@4 |h#Z#0@0|))) (= (_module.__default.Rotate _module._default.Rotate$T@@4 ($LS $LZ) |n#0@@4| |l#0@@8|) (_module.__default.Rotate _module._default.Rotate$T@@4 ($LS $LZ) (- |n#0@@4| 1) (_module.__default.Append _module._default.Rotate$T@@4 ($LS $LZ) |t#Z#0@0| (_module.__default.SingletonList _module._default.Rotate$T@@4 |h#Z#0@0|))))) (=> (and (and (and (|_module.__default.SingletonList#canCall| _module._default.Rotate$T@@4 |h#Z#0@0|) (|_module.__default.Append#canCall| _module._default.Rotate$T@@4 |t#Z#0@0| (_module.__default.SingletonList _module._default.Rotate$T@@4 |h#Z#0@0|))) (|_module.__default.Rotate#canCall| _module._default.Rotate$T@@4 (- |n#0@@4| 1) (_module.__default.Append _module._default.Rotate$T@@4 ($LS $LZ) |t#Z#0@0| (_module.__default.SingletonList _module._default.Rotate$T@@4 |h#Z#0@0|)))) (and ($Is DatatypeTypeType (_module.__default.Rotate _module._default.Rotate$T@@4 ($LS $LZ) |n#0@@4| |l#0@@8|) (Tclass._module.List _module._default.Rotate$T@@4)) (= (ControlFlow 0 10) 7))) GeneratedUnifiedExit_correct)))))))))))))
(let ((anon13_Then_correct  (=> (and (and (= |n#0@@4| (LitInt 0)) (= (_module.__default.Rotate _module._default.Rotate$T@@4 ($LS $LZ) |n#0@@4| |l#0@@8|) |l#0@@8|)) (and ($Is DatatypeTypeType (_module.__default.Rotate _module._default.Rotate$T@@4 ($LS $LZ) |n#0@@4| |l#0@@8|) (Tclass._module.List _module._default.Rotate$T@@4)) (= (ControlFlow 0 9) 7))) GeneratedUnifiedExit_correct)))
(let ((anon12_Then_correct  (=> (= |l#0@@8| (|#_module.List.Cons| |_mcc#0#0| |_mcc#1#0|)) (=> (and (and (and ($IsBox |_mcc#0#0| _module._default.Rotate$T@@4) ($Is DatatypeTypeType |_mcc#1#0| (Tclass._module.List _module._default.Rotate$T@@4))) (and (= |let#0#0#0| |_mcc#1#0|) ($Is DatatypeTypeType |let#0#0#0| (Tclass._module.List _module._default.Rotate$T@@4)))) (and (and (= |t#Z#0@0| |let#0#0#0|) (= |let#1#0#0| |_mcc#0#0|)) (and ($IsBox |let#1#0#0| _module._default.Rotate$T@@4) (= |h#Z#0@0| |let#1#0#0|)))) (and (=> (= (ControlFlow 0 14) 9) anon13_Then_correct) (=> (= (ControlFlow 0 14) 10) anon13_Else_correct))))))
(let ((anon11_Then_correct  (=> (and (and (= |l#0@@8| |#_module.List.Nil|) (= (_module.__default.Rotate _module._default.Rotate$T@@4 ($LS $LZ) |n#0@@4| |l#0@@8|) |l#0@@8|)) (and ($Is DatatypeTypeType (_module.__default.Rotate _module._default.Rotate$T@@4 ($LS $LZ) |n#0@@4| |l#0@@8|) (Tclass._module.List _module._default.Rotate$T@@4)) (= (ControlFlow 0 8) 7))) GeneratedUnifiedExit_correct)))
(let ((anon12_Else_correct true))
(let ((anon11_Else_correct  (=> (or (not (= |l#0@@8| |#_module.List.Nil|)) (not true)) (and (=> (= (ControlFlow 0 15) 14) anon12_Then_correct) (=> (= (ControlFlow 0 15) 5) anon12_Else_correct)))))
(let ((anon10_Then_correct  (=> ($Is DatatypeTypeType (_module.__default.Rotate _module._default.Rotate$T@@4 ($LS $LZ) |n#0@@4| |l#0@@8|) (Tclass._module.List _module._default.Rotate$T@@4)) (=> (and ($IsAlloc intType (int_2_U |n#0@@4|) TInt $Heap@@2) ($IsAlloc DatatypeTypeType |l#0@@8| (Tclass._module.List _module._default.Rotate$T@@4) $Heap@@2)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= (LitInt 0) |n#0@@4|)) (=> (<= (LitInt 0) |n#0@@4|) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 |n#0@@4|) (= |n#0@@4| |n#0@@4|))) (=> (or (<= 0 |n#0@@4|) (= |n#0@@4| |n#0@@4|)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= |n#0@@4| |n#0@@4|) (|_module.List#Equal| |l#0@@8| |l#0@@8|)) (or (< |n#0@@4| |n#0@@4|) (and (= |n#0@@4| |n#0@@4|) (< (DtRank |l#0@@8|) (DtRank |l#0@@8|))))))))))))))
(let ((anon0_correct  (=> (and (= $_ReadsFrame@0 (|lambda#0| null $Heap@@2 alloc false)) (<= (LitInt 0) |n#0@@4|)) (and (and (=> (= (ControlFlow 0 16) 2) anon10_Then_correct) (=> (= (ControlFlow 0 16) 8) anon11_Then_correct)) (=> (= (ControlFlow 0 16) 15) anon11_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) ($Is DatatypeTypeType |l#0@@8| (Tclass._module.List _module._default.Rotate$T@@4))) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 17) 16))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
