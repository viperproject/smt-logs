(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U Int) Int)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@26 (T@U Int) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (Int Int) Int)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@38 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 (T@T T@T) T@T)
(declare-fun $generated@@46 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@78 (T@U T@U T@U) Bool)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@29) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 Int) ) (!  (=> (or ($generated@@26 $generated@@33 ($generated@@25 $generated@@34)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@33 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@33 $generated@@30)) (<= ($generated@@25 0) ($generated@@25 $generated@@34))))) (and (=> (or (not (= ($generated@@25 $generated@@34) ($generated@@25 0))) (not true)) ($generated@@26 $generated@@33 ($generated@@25 (- $generated@@34 1)))) (= ($generated@@23 ($generated@@24 $generated@@32) $generated@@33 ($generated@@25 $generated@@34)) (ite (= ($generated@@25 $generated@@34) ($generated@@25 0)) 0 (+ ($generated@@23 ($generated@@24 $generated@@32) $generated@@33 ($generated@@25 (- $generated@@34 1))) ($generated@@31 ($generated@@25 ($generated@@31 ($generated@@25 $generated@@34) ($generated@@25 $generated@@34))) ($generated@@25 $generated@@34)))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@32) $generated@@33 ($generated@@25 $generated@@34)))
))))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@37 $generated@@35)  (or (= $generated@@37 $generated@@27) (= ($generated@@36 $generated@@37) $generated@@35)))
 :pattern ( ($generated@@28 $generated@@29 $generated@@37 $generated@@35))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@38 $generated@@29 $generated@@39 $generated@@30 $generated@@40) ($generated@@38 $generated@@29 $generated@@39 $generated@@35 $generated@@40))
 :pattern ( ($generated@@38 $generated@@29 $generated@@39 $generated@@30 $generated@@40))
 :pattern ( ($generated@@38 $generated@@29 $generated@@39 $generated@@35 $generated@@40))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@42 $generated@@49 $generated@@50 ($generated@@46 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@51) $generated@@53) $generated@@51)
 :weight 0
)) (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (!  (or (= $generated@@58 $generated@@59) (= ($generated@@42 $generated@@54 $generated@@55 ($generated@@46 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@56) $generated@@59) ($generated@@42 $generated@@54 $generated@@55 $generated@@57 $generated@@59)))
 :weight 0
))) (= ($generated@@5 $generated@@43) 4)) (= ($generated@@5 $generated@@44) 5)) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (= ($generated@@5 ($generated@@45 $generated@@60 $generated@@61)) 6))) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (! (= ($generated@@47 ($generated@@45 $generated@@62 $generated@@63)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@62 $generated@@63))
))) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (! (= ($generated@@48 ($generated@@45 $generated@@64 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@45 $generated@@64 $generated@@65))
))))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@38 $generated@@29 $generated@@66 $generated@@35 $generated@@67)  (or (= $generated@@66 $generated@@27) ($generated@@10 ($generated@@41 $generated@@6 ($generated@@42 $generated@@43 $generated@@44 ($generated@@42 $generated@@29 ($generated@@45 $generated@@43 $generated@@44) $generated@@67 $generated@@66) $generated@@1)))))
 :pattern ( ($generated@@38 $generated@@29 $generated@@66 $generated@@35 $generated@@67))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 Int) ) (!  (=> (or ($generated@@26 $generated@@69 $generated@@70) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@69 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@69 $generated@@30)) (<= ($generated@@25 0) $generated@@70)))) (and (=> (or (not (= $generated@@70 ($generated@@25 0))) (not true)) ($generated@@26 $generated@@69 (- $generated@@70 1))) (= ($generated@@23 ($generated@@24 $generated@@68) $generated@@69 $generated@@70) (ite (= $generated@@70 ($generated@@25 0)) 0 (+ ($generated@@23 $generated@@68 $generated@@69 (- $generated@@70 1)) ($generated@@31 ($generated@@31 $generated@@70 $generated@@70) $generated@@70))))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@68) $generated@@69 $generated@@70))
))))
(assert (forall (($generated@@71 Int) ) (! (= ($generated@@25 $generated@@71) $generated@@71)
 :pattern ( ($generated@@25 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 $generated@@73) $generated@@73)
 :pattern ( ($generated@@72 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 ($generated@@41 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@41 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@78 ($generated@@75 $generated@@82 $generated@@79) $generated@@80 $generated@@81) ($generated@@38 $generated@@82 $generated@@79 $generated@@80 $generated@@81))
 :pattern ( ($generated@@78 ($generated@@75 $generated@@82 $generated@@79) $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@83 $generated@@30)  (and ($generated@@28 $generated@@29 $generated@@83 $generated@@35) (or (not (= $generated@@83 $generated@@27)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@83 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 $generated@@83 $generated@@35))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 Int) ) (! (= ($generated@@23 ($generated@@24 $generated@@84) $generated@@85 $generated@@86) ($generated@@23 $generated@@84 $generated@@85 $generated@@86))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@84) $generated@@85 $generated@@86))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 Int) ) (!  (=> (or ($generated@@26 ($generated@@72 $generated@@29 $generated@@88) ($generated@@25 $generated@@89)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@88 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@88 $generated@@30)) (<= ($generated@@25 0) ($generated@@25 $generated@@89))))) (and (=> (or (not (= ($generated@@25 $generated@@89) ($generated@@25 0))) (not true)) ($generated@@26 ($generated@@72 $generated@@29 $generated@@88) ($generated@@25 (- $generated@@89 1)))) (= ($generated@@23 ($generated@@24 $generated@@87) ($generated@@72 $generated@@29 $generated@@88) ($generated@@25 $generated@@89)) (ite (= ($generated@@25 $generated@@89) ($generated@@25 0)) 0 (+ ($generated@@23 ($generated@@24 $generated@@87) ($generated@@72 $generated@@29 $generated@@88) ($generated@@25 (- $generated@@89 1))) ($generated@@31 ($generated@@25 ($generated@@31 ($generated@@25 $generated@@89) ($generated@@25 $generated@@89))) ($generated@@25 $generated@@89)))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@87) ($generated@@72 $generated@@29 $generated@@88) ($generated@@25 $generated@@89)))
))))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@T) ) (! (= ($generated@@41 $generated@@91 ($generated@@75 $generated@@91 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@75 $generated@@91 $generated@@90))
)))
(assert  (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@92 $generated@@95 $generated@@96 $generated@@97 ($generated@@94 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@100 $generated@@101) $generated@@98)
 :weight 0
)) (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@92 $generated@@102 $generated@@103 $generated@@104 ($generated@@94 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@92 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@92 $generated@@111 $generated@@112 $generated@@113 ($generated@@94 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@92 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@10 ($generated@@92 $generated@@29 $generated@@43 $generated@@6 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@10 ($generated@@41 $generated@@6 ($generated@@42 $generated@@43 $generated@@44 ($generated@@42 $generated@@29 ($generated@@45 $generated@@43 $generated@@44) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@92 $generated@@29 $generated@@43 $generated@@6 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@126 Int) ($generated@@127 Int) ) (! (= ($generated@@31 $generated@@126 $generated@@127) (* $generated@@126 $generated@@127))
 :pattern ( ($generated@@31 $generated@@126 $generated@@127))
)))
(assert (= ($generated@@21 $generated@@35) $generated@@2))
(assert (= ($generated@@128 $generated@@35) $generated@@4))
(assert (= ($generated@@21 $generated@@30) $generated@@3))
(assert (= ($generated@@128 $generated@@30) $generated@@4))
(assert (forall (($generated@@129 Int) ) (! (= ($generated@@75 $generated@@7 ($generated@@11 ($generated@@25 $generated@@129))) ($generated@@72 $generated@@44 ($generated@@75 $generated@@7 ($generated@@11 $generated@@129))))
 :pattern ( ($generated@@75 $generated@@7 ($generated@@11 ($generated@@25 $generated@@129))))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@T) ) (! (= ($generated@@75 $generated@@131 ($generated@@72 $generated@@131 $generated@@130)) ($generated@@72 $generated@@44 ($generated@@75 $generated@@131 $generated@@130)))
 :pattern ( ($generated@@75 $generated@@131 ($generated@@72 $generated@@131 $generated@@130)))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (! ($generated@@38 $generated@@7 $generated@@133 $generated $generated@@132)
 :pattern ( ($generated@@38 $generated@@7 $generated@@133 $generated $generated@@132))
)))
(assert (forall (($generated@@134 T@U) ) (! ($generated@@28 $generated@@7 $generated@@134 $generated)
 :pattern ( ($generated@@28 $generated@@7 $generated@@134 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@142  (=> (and (and (or (not (= $generated@@135 ($generated@@25 0))) (not true)) ($generated@@78 ($generated@@75 $generated@@29 $generated@@136) $generated@@35 $generated@@137)) (and (= $generated@@138 (- $generated@@135 1)) ($generated@@38 $generated@@7 ($generated@@11 $generated@@138) $generated $generated@@137))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (<= ($generated@@25 0) $generated@@138)) (=> (<= ($generated@@25 0) $generated@@138) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (<= 0 $generated@@135) (= $generated@@138 $generated@@135))) (=> (or (<= 0 $generated@@135) (= $generated@@138 $generated@@135)) (=> (= (ControlFlow 0 4) (- 0 3)) (< $generated@@138 $generated@@135)))))))))
(let (($generated@@143 true))
(let (($generated@@144 true))
(let (($generated@@145  (=> (and (= $generated@@139 ($generated@@93 $generated@@27 $generated@@137 $generated@@1 false)) (<= ($generated@@25 0) $generated@@135)) (and (and (=> (= (ControlFlow 0 7) 1) $generated@@144) (=> (= (ControlFlow 0 7) 2) $generated@@143)) (=> (= (ControlFlow 0 7) 4) $generated@@142)))))
(let (($generated@@146  (=> (and ($generated@@140 $generated@@137) ($generated@@141 $generated@@137)) (=> (and (and (or (not (= $generated@@136 $generated@@27)) (not true)) (and ($generated@@28 $generated@@29 $generated@@136 $generated@@30) ($generated@@38 $generated@@29 $generated@@136 $generated@@30 $generated@@137))) (and (= 0 $generated@@22) (= (ControlFlow 0 8) 7))) $generated@@145))))
$generated@@146))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
