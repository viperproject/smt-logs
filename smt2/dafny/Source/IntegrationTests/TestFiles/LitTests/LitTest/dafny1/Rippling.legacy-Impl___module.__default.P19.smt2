(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@31 () Int)
(declare-fun $generated@@32 (T@U T@U T@U) T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 (T@U T@U) Bool)
(declare-fun $generated@@56 (T@U) Bool)
(declare-fun $generated@@59 (T@U) Bool)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@U) T@U)
(declare-fun $generated@@80 (T@U T@U) T@U)
(declare-fun $generated@@81 (T@U) Bool)
(declare-fun $generated@@89 (T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@U T@U) Bool)
(declare-fun $generated@@129 (T@U) T@U)
(declare-fun $generated@@138 (T@U) Int)
(declare-fun $generated@@146 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@147 () T@T)
(declare-fun $generated@@148 () T@T)
(declare-fun $generated@@149 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@150 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@151 () T@T)
(declare-fun $generated@@152 (T@T T@T) T@T)
(declare-fun $generated@@153 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@154 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@155 (T@T) T@T)
(declare-fun $generated@@156 (T@T) T@T)
(declare-fun $generated@@205 (T@U) T@U)
(declare-fun $generated@@206 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@8 $generated@@25) 3))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@26 $generated@@29 $generated@@30) $generated@@27)  (and ($generated@@24 $generated@@25 $generated@@29 $generated@@28) ($generated@@24 $generated@@25 $generated@@30 $generated@@27)))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@26 $generated@@29 $generated@@30) $generated@@27))
)))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (=> (or ($generated@@35 ($generated@@34 $generated@@25 $generated@@42) ($generated@@34 $generated@@25 $generated@@43)) (and (< 2 $generated@@31) (and ($generated@@24 $generated@@25 $generated@@42 $generated@@28) ($generated@@24 $generated@@25 $generated@@43 $generated@@27)))) (and (=> (not ($generated@@13 ($generated@@34 $generated@@9 ($generated@@12 ($generated@@36 ($generated@@34 $generated@@25 $generated@@42)))))) (let (($generated@@44 ($generated@@34 $generated@@25 ($generated@@37 ($generated@@34 $generated@@25 $generated@@42)))))
 (=> (not ($generated@@13 ($generated@@34 $generated@@9 ($generated@@12 ($generated@@38 ($generated@@34 $generated@@25 $generated@@43)))))) (let (($generated@@45 ($generated@@34 $generated@@25 ($generated@@39 ($generated@@34 $generated@@25 $generated@@43)))))
($generated@@35 $generated@@44 $generated@@45))))) (= ($generated@@32 ($generated@@33 $generated@@41) ($generated@@34 $generated@@25 $generated@@42) ($generated@@34 $generated@@25 $generated@@43)) (ite ($generated@@36 ($generated@@34 $generated@@25 $generated@@42)) $generated@@43 (let (($generated@@46 ($generated@@34 $generated@@25 ($generated@@37 ($generated@@34 $generated@@25 $generated@@42)))))
(ite ($generated@@38 ($generated@@34 $generated@@25 $generated@@43)) $generated@@40 (let (($generated@@47 ($generated@@34 $generated@@25 ($generated@@39 ($generated@@34 $generated@@25 $generated@@43)))))
($generated@@34 $generated@@25 ($generated@@32 ($generated@@33 $generated@@41) $generated@@46 $generated@@47)))))))))
 :weight 3
 :pattern ( ($generated@@32 ($generated@@33 $generated@@41) ($generated@@34 $generated@@25 $generated@@42) ($generated@@34 $generated@@25 $generated@@43)))
))))
(assert (= ($generated@@48 $generated@@49) $generated@@2))
(assert (= ($generated@@48 $generated@@40) $generated@@4))
(assert ($generated@@24 $generated@@25 $generated@@49 $generated@@28))
(assert ($generated@@24 $generated@@25 $generated@@40 $generated@@27))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@50 $generated@@51 $generated@@52) (= $generated@@51 $generated@@52))
 :pattern ( ($generated@@50 $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@34 $generated@@54 $generated@@53) $generated@@53)
 :pattern ( ($generated@@34 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@36 $generated@@55) (= ($generated@@48 $generated@@55) $generated@@2))
 :pattern ( ($generated@@36 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@56 $generated@@57) (= ($generated@@48 $generated@@57) $generated@@3))
 :pattern ( ($generated@@56 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@38 $generated@@58) (= ($generated@@48 $generated@@58) $generated@@4))
 :pattern ( ($generated@@38 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@59 $generated@@60) (= ($generated@@48 $generated@@60) $generated@@5))
 :pattern ( ($generated@@59 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 ($generated@@61 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@61 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ) (!  (=> ($generated@@59 $generated@@65) (exists (($generated@@66 T@U) ($generated@@67 T@U) ) (= $generated@@65 ($generated@@26 $generated@@66 $generated@@67))))
 :pattern ( ($generated@@59 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ) (!  (=> ($generated@@36 $generated@@68) (= $generated@@68 $generated@@49))
 :pattern ( ($generated@@36 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@38 $generated@@69) (= $generated@@69 $generated@@40))
 :pattern ( ($generated@@38 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@56 $generated@@71) (exists (($generated@@72 T@U) ) (= $generated@@71 ($generated@@70 $generated@@72))))
 :pattern ( ($generated@@56 $generated@@71))
)))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> (or ($generated@@35 $generated@@74 $generated@@75) (and (< 2 $generated@@31) (and ($generated@@24 $generated@@25 $generated@@74 $generated@@28) ($generated@@24 $generated@@25 $generated@@75 $generated@@27)))) (and (=> (not ($generated@@36 $generated@@74)) (let (($generated@@76 ($generated@@37 $generated@@74)))
 (=> (not ($generated@@38 $generated@@75)) (let (($generated@@77 ($generated@@39 $generated@@75)))
($generated@@35 $generated@@76 $generated@@77))))) (= ($generated@@32 ($generated@@33 $generated@@73) $generated@@74 $generated@@75) (ite ($generated@@36 $generated@@74) $generated@@75 (let (($generated@@78 ($generated@@37 $generated@@74)))
(ite ($generated@@38 $generated@@75) $generated@@40 (let (($generated@@79 ($generated@@39 $generated@@75)))
($generated@@32 $generated@@73 $generated@@78 $generated@@79))))))))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@73) $generated@@74 $generated@@75))
))))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> (or ($generated@@81 $generated@@83) (and (< 2 $generated@@31) ($generated@@24 $generated@@25 $generated@@83 $generated@@27))) (and (=> (not ($generated@@38 $generated@@83)) (let (($generated@@84 ($generated@@39 $generated@@83)))
($generated@@81 $generated@@84))) (= ($generated@@80 ($generated@@33 $generated@@82) $generated@@83) (ite ($generated@@38 $generated@@83) $generated@@49 (let (($generated@@85 ($generated@@39 $generated@@83)))
($generated@@70 ($generated@@80 $generated@@82 $generated@@85)))))))
 :pattern ( ($generated@@80 ($generated@@33 $generated@@82) $generated@@83))
))))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@24 $generated@@25 ($generated@@70 $generated@@86) $generated@@28) ($generated@@24 $generated@@25 $generated@@86 $generated@@28))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@70 $generated@@86) $generated@@28))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> (and ($generated@@56 $generated@@87) ($generated@@56 $generated@@88)) (= ($generated@@50 $generated@@87 $generated@@88) ($generated@@50 ($generated@@37 $generated@@87) ($generated@@37 $generated@@88))))
 :pattern ( ($generated@@50 $generated@@87 $generated@@88) ($generated@@56 $generated@@87))
 :pattern ( ($generated@@50 $generated@@87 $generated@@88) ($generated@@56 $generated@@88))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (=> (or ($generated@@90 $generated@@92 $generated@@93) (and (< 1 $generated@@31) (and ($generated@@24 $generated@@25 $generated@@92 $generated@@28) ($generated@@24 $generated@@25 $generated@@93 $generated@@28)))) ($generated@@24 $generated@@25 ($generated@@89 $generated@@91 $generated@@92 $generated@@93) $generated@@28))
 :pattern ( ($generated@@89 $generated@@91 $generated@@92 $generated@@93))
))))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (=> (or ($generated@@35 $generated@@95 $generated@@96) (and (< 2 $generated@@31) (and ($generated@@24 $generated@@25 $generated@@95 $generated@@28) ($generated@@24 $generated@@25 $generated@@96 $generated@@27)))) ($generated@@24 $generated@@25 ($generated@@32 $generated@@94 $generated@@95 $generated@@96) $generated@@27))
 :pattern ( ($generated@@32 $generated@@94 $generated@@95 $generated@@96))
))))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@89 ($generated@@33 $generated@@97) $generated@@98 $generated@@99) ($generated@@89 $generated@@97 $generated@@98 $generated@@99))
 :pattern ( ($generated@@89 ($generated@@33 $generated@@97) $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@32 ($generated@@33 $generated@@100) $generated@@101 $generated@@102) ($generated@@32 $generated@@100 $generated@@101 $generated@@102))
 :pattern ( ($generated@@32 ($generated@@33 $generated@@100) $generated@@101 $generated@@102))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (=> (or ($generated@@90 ($generated@@34 $generated@@25 $generated@@104) ($generated@@34 $generated@@25 $generated@@105)) (and (< 1 $generated@@31) (and ($generated@@24 $generated@@25 $generated@@104 $generated@@28) ($generated@@24 $generated@@25 $generated@@105 $generated@@28)))) (and (=> (not ($generated@@13 ($generated@@34 $generated@@9 ($generated@@12 ($generated@@36 ($generated@@34 $generated@@25 $generated@@104)))))) (let (($generated@@106 ($generated@@34 $generated@@25 ($generated@@37 ($generated@@34 $generated@@25 $generated@@104)))))
 (=> (not ($generated@@13 ($generated@@34 $generated@@9 ($generated@@12 ($generated@@36 ($generated@@34 $generated@@25 $generated@@105)))))) (let (($generated@@107 ($generated@@34 $generated@@25 ($generated@@37 ($generated@@34 $generated@@25 $generated@@105)))))
($generated@@90 $generated@@106 $generated@@107))))) (= ($generated@@89 ($generated@@33 $generated@@103) ($generated@@34 $generated@@25 $generated@@104) ($generated@@34 $generated@@25 $generated@@105)) (ite ($generated@@36 ($generated@@34 $generated@@25 $generated@@104)) $generated@@49 (let (($generated@@108 ($generated@@34 $generated@@25 ($generated@@37 ($generated@@34 $generated@@25 $generated@@104)))))
(ite ($generated@@36 ($generated@@34 $generated@@25 $generated@@105)) $generated@@104 (let (($generated@@109 ($generated@@34 $generated@@25 ($generated@@37 ($generated@@34 $generated@@25 $generated@@105)))))
($generated@@34 $generated@@25 ($generated@@89 ($generated@@33 $generated@@103) $generated@@108 $generated@@109)))))))))
 :weight 3
 :pattern ( ($generated@@89 ($generated@@33 $generated@@103) ($generated@@34 $generated@@25 $generated@@104) ($generated@@34 $generated@@25 $generated@@105)))
))))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (=> (or ($generated@@90 $generated@@111 $generated@@112) (and (< 1 $generated@@31) (and ($generated@@24 $generated@@25 $generated@@111 $generated@@28) ($generated@@24 $generated@@25 $generated@@112 $generated@@28)))) (and (=> (not ($generated@@36 $generated@@111)) (let (($generated@@113 ($generated@@37 $generated@@111)))
 (=> (not ($generated@@36 $generated@@112)) (let (($generated@@114 ($generated@@37 $generated@@112)))
($generated@@90 $generated@@113 $generated@@114))))) (= ($generated@@89 ($generated@@33 $generated@@110) $generated@@111 $generated@@112) (ite ($generated@@36 $generated@@111) $generated@@49 (let (($generated@@115 ($generated@@37 $generated@@111)))
(ite ($generated@@36 $generated@@112) $generated@@111 (let (($generated@@116 ($generated@@37 $generated@@112)))
($generated@@89 $generated@@110 $generated@@115 $generated@@116))))))))
 :pattern ( ($generated@@89 ($generated@@33 $generated@@110) $generated@@111 $generated@@112))
))))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (!  (=> (or ($generated@@81 $generated@@118) (and (< 2 $generated@@31) ($generated@@24 $generated@@25 $generated@@118 $generated@@27))) ($generated@@24 $generated@@25 ($generated@@80 $generated@@117 $generated@@118) $generated@@28))
 :pattern ( ($generated@@80 $generated@@117 $generated@@118))
))))
(assert (forall (($generated@@119 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@119 $generated@@28) (or ($generated@@36 $generated@@119) ($generated@@56 $generated@@119)))
 :pattern ( ($generated@@56 $generated@@119) ($generated@@24 $generated@@25 $generated@@119 $generated@@28))
 :pattern ( ($generated@@36 $generated@@119) ($generated@@24 $generated@@25 $generated@@119 $generated@@28))
)))
(assert (forall (($generated@@120 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@120 $generated@@27) (or ($generated@@38 $generated@@120) ($generated@@59 $generated@@120)))
 :pattern ( ($generated@@59 $generated@@120) ($generated@@24 $generated@@25 $generated@@120 $generated@@27))
 :pattern ( ($generated@@38 $generated@@120) ($generated@@24 $generated@@25 $generated@@120 $generated@@27))
)))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> (or ($generated@@81 ($generated@@34 $generated@@25 $generated@@122)) (and (< 2 $generated@@31) ($generated@@24 $generated@@25 $generated@@122 $generated@@27))) (and (=> (not ($generated@@13 ($generated@@34 $generated@@9 ($generated@@12 ($generated@@38 ($generated@@34 $generated@@25 $generated@@122)))))) (let (($generated@@123 ($generated@@34 $generated@@25 ($generated@@39 ($generated@@34 $generated@@25 $generated@@122)))))
($generated@@81 $generated@@123))) (= ($generated@@80 ($generated@@33 $generated@@121) ($generated@@34 $generated@@25 $generated@@122)) (ite ($generated@@38 ($generated@@34 $generated@@25 $generated@@122)) $generated@@49 (let (($generated@@124 ($generated@@34 $generated@@25 ($generated@@39 ($generated@@34 $generated@@25 $generated@@122)))))
($generated@@34 $generated@@25 ($generated@@70 ($generated@@34 $generated@@25 ($generated@@80 ($generated@@33 $generated@@121) $generated@@124)))))))))
 :weight 3
 :pattern ( ($generated@@80 ($generated@@33 $generated@@121) ($generated@@34 $generated@@25 $generated@@122)))
))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (and ($generated@@36 $generated@@125) ($generated@@36 $generated@@126)) ($generated@@50 $generated@@125 $generated@@126))
 :pattern ( ($generated@@50 $generated@@125 $generated@@126) ($generated@@36 $generated@@125))
 :pattern ( ($generated@@50 $generated@@125 $generated@@126) ($generated@@36 $generated@@126))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@48 ($generated@@26 $generated@@127 $generated@@128)) $generated@@5)
 :pattern ( ($generated@@26 $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@129 ($generated@@26 $generated@@130 $generated@@131)) $generated@@130)
 :pattern ( ($generated@@26 $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@39 ($generated@@26 $generated@@132 $generated@@133)) $generated@@133)
 :pattern ( ($generated@@26 $generated@@132 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ) (! (= ($generated@@48 ($generated@@70 $generated@@134)) $generated@@3)
 :pattern ( ($generated@@70 $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ) (! (= ($generated@@37 ($generated@@70 $generated@@135)) $generated@@135)
 :pattern ( ($generated@@70 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@T) ) (! (= ($generated@@61 $generated@@137 ($generated@@62 $generated@@137 $generated@@136)) $generated@@136)
 :pattern ( ($generated@@62 $generated@@137 $generated@@136))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (! (< ($generated@@138 $generated@@139) ($generated@@138 ($generated@@26 $generated@@139 $generated@@140)))
 :pattern ( ($generated@@26 $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (! (< ($generated@@138 $generated@@142) ($generated@@138 ($generated@@26 $generated@@141 $generated@@142)))
 :pattern ( ($generated@@26 $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (! (= ($generated@@80 ($generated@@33 $generated@@143) $generated@@144) ($generated@@80 $generated@@143 $generated@@144))
 :pattern ( ($generated@@80 ($generated@@33 $generated@@143) $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ) (! (< ($generated@@138 $generated@@145) ($generated@@138 ($generated@@70 $generated@@145)))
 :pattern ( ($generated@@70 $generated@@145))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@157 T@T) ($generated@@158 T@T) ($generated@@159 T@T) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ) (! (= ($generated@@146 $generated@@157 $generated@@158 $generated@@159 ($generated@@153 $generated@@157 $generated@@158 $generated@@159 $generated@@161 $generated@@162 $generated@@163 $generated@@160) $generated@@162 $generated@@163) $generated@@160)
 :weight 0
)) (and (forall (($generated@@164 T@T) ($generated@@165 T@T) ($generated@@166 T@T) ($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ($generated@@172 T@U) ) (!  (or (= $generated@@169 $generated@@171) (= ($generated@@146 $generated@@164 $generated@@165 $generated@@166 ($generated@@153 $generated@@164 $generated@@165 $generated@@166 $generated@@168 $generated@@169 $generated@@170 $generated@@167) $generated@@171 $generated@@172) ($generated@@146 $generated@@164 $generated@@165 $generated@@166 $generated@@168 $generated@@171 $generated@@172)))
 :weight 0
)) (forall (($generated@@173 T@T) ($generated@@174 T@T) ($generated@@175 T@T) ($generated@@176 T@U) ($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 T@U) ($generated@@180 T@U) ($generated@@181 T@U) ) (!  (or (= $generated@@179 $generated@@181) (= ($generated@@146 $generated@@173 $generated@@174 $generated@@175 ($generated@@153 $generated@@173 $generated@@174 $generated@@175 $generated@@177 $generated@@178 $generated@@179 $generated@@176) $generated@@180 $generated@@181) ($generated@@146 $generated@@173 $generated@@174 $generated@@175 $generated@@177 $generated@@180 $generated@@181)))
 :weight 0
)))) (= ($generated@@8 $generated@@147) 4)) (= ($generated@@8 $generated@@148) 5)) (forall (($generated@@182 T@T) ($generated@@183 T@T) ($generated@@184 T@U) ($generated@@185 T@U) ($generated@@186 T@U) ) (! (= ($generated@@150 $generated@@182 $generated@@183 ($generated@@154 $generated@@182 $generated@@183 $generated@@185 $generated@@186 $generated@@184) $generated@@186) $generated@@184)
 :weight 0
))) (forall (($generated@@187 T@T) ($generated@@188 T@T) ($generated@@189 T@U) ($generated@@190 T@U) ($generated@@191 T@U) ($generated@@192 T@U) ) (!  (or (= $generated@@191 $generated@@192) (= ($generated@@150 $generated@@187 $generated@@188 ($generated@@154 $generated@@187 $generated@@188 $generated@@190 $generated@@191 $generated@@189) $generated@@192) ($generated@@150 $generated@@187 $generated@@188 $generated@@190 $generated@@192)))
 :weight 0
))) (= ($generated@@8 $generated@@151) 6)) (forall (($generated@@193 T@T) ($generated@@194 T@T) ) (= ($generated@@8 ($generated@@152 $generated@@193 $generated@@194)) 7))) (forall (($generated@@195 T@T) ($generated@@196 T@T) ) (! (= ($generated@@155 ($generated@@152 $generated@@195 $generated@@196)) $generated@@195)
 :pattern ( ($generated@@152 $generated@@195 $generated@@196))
))) (forall (($generated@@197 T@T) ($generated@@198 T@T) ) (! (= ($generated@@156 ($generated@@152 $generated@@197 $generated@@198)) $generated@@198)
 :pattern ( ($generated@@152 $generated@@197 $generated@@198))
))))
(assert (forall (($generated@@199 T@U) ($generated@@200 T@U) ($generated@@201 T@U) ($generated@@202 Bool) ($generated@@203 T@U) ($generated@@204 T@U) ) (! (= ($generated@@13 ($generated@@146 $generated@@147 $generated@@148 $generated@@9 ($generated@@149 $generated@@199 $generated@@200 $generated@@201 $generated@@202) $generated@@203 $generated@@204))  (=> (and (or (not (= $generated@@203 $generated@@199)) (not true)) ($generated@@13 ($generated@@61 $generated@@9 ($generated@@150 $generated@@148 $generated@@151 ($generated@@150 $generated@@147 ($generated@@152 $generated@@148 $generated@@151) $generated@@200 $generated@@203) $generated@@201)))) $generated@@202))
 :pattern ( ($generated@@146 $generated@@147 $generated@@148 $generated@@9 ($generated@@149 $generated@@199 $generated@@200 $generated@@201 $generated@@202) $generated@@203 $generated@@204))
)))
(assert (= ($generated@@205 $generated@@28) $generated@@0))
(assert (= ($generated@@206 $generated@@28) $generated@@6))
(assert (= ($generated@@205 $generated@@27) $generated@@1))
(assert (= ($generated@@206 $generated@@27) $generated@@7))
(assert (= $generated@@49 ($generated@@34 $generated@@25 $generated@@49)))
(assert (= $generated@@40 ($generated@@34 $generated@@25 $generated@@40)))
(assert (forall (($generated@@207 T@U) ($generated@@208 T@U) ) (! (= ($generated@@26 ($generated@@34 $generated@@25 $generated@@207) ($generated@@34 $generated@@25 $generated@@208)) ($generated@@34 $generated@@25 ($generated@@26 $generated@@207 $generated@@208)))
 :pattern ( ($generated@@26 ($generated@@34 $generated@@25 $generated@@207) ($generated@@34 $generated@@25 $generated@@208)))
)))
(assert (forall (($generated@@209 T@U) ) (! (= ($generated@@70 ($generated@@34 $generated@@25 $generated@@209)) ($generated@@34 $generated@@25 ($generated@@70 $generated@@209)))
 :pattern ( ($generated@@70 ($generated@@34 $generated@@25 $generated@@209)))
)))
(assert (forall (($generated@@210 T@U) ($generated@@211 T@T) ) (! (= ($generated@@62 $generated@@211 ($generated@@34 $generated@@211 $generated@@210)) ($generated@@34 $generated@@151 ($generated@@62 $generated@@211 $generated@@210)))
 :pattern ( ($generated@@62 $generated@@211 ($generated@@34 $generated@@211 $generated@@210)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@212 () T@U)
(declare-fun $generated@@213 () T@U)
(declare-fun $generated@@214 () T@U)
(declare-fun $generated@@215 () T@U)
(declare-fun $generated@@216 (T@U) Bool)
(declare-fun $generated@@217 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@218  (=> (and (= $generated@@212 ($generated@@149 $generated@@213 $generated@@214 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@219 T@U) ($generated@@220 T@U) ) (!  (=> (and ($generated@@24 $generated@@25 $generated@@219 $generated@@28) ($generated@@24 $generated@@25 $generated@@220 $generated@@27)) ($generated@@50 ($generated@@80 ($generated@@33 ($generated@@33 $generated@@215)) ($generated@@32 ($generated@@33 ($generated@@33 $generated@@215)) $generated@@219 $generated@@220)) ($generated@@89 ($generated@@33 ($generated@@33 $generated@@215)) ($generated@@80 ($generated@@33 ($generated@@33 $generated@@215)) $generated@@220) $generated@@219)))
 :pattern ( ($generated@@89 ($generated@@33 ($generated@@33 $generated@@215)) ($generated@@80 ($generated@@33 ($generated@@33 $generated@@215)) $generated@@220) $generated@@219))
 :pattern ( ($generated@@32 ($generated@@33 ($generated@@33 $generated@@215)) $generated@@219 $generated@@220))
)))))
(let (($generated@@221  (=> (and (and ($generated@@216 $generated@@214) ($generated@@217 $generated@@214)) (and (= 3 $generated@@31) (= (ControlFlow 0 3) 2))) $generated@@218)))
$generated@@221)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
