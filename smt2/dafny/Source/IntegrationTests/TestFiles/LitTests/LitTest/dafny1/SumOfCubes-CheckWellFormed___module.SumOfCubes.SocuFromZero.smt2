(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U Int Int) Int)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (Int Int) Bool)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@24 (Int Int) Int)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@T T@T) T@T)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@25 T@U) ($generated@@26 Int) ($generated@@27 Int) ) (!  (=> (or ($generated@@22 $generated@@26 $generated@@27) (and (< 0 $generated@@19) (and (<= ($generated@@23 0) $generated@@26) (<= $generated@@26 $generated@@27)))) (and (=> (or (not (= $generated@@27 $generated@@26)) (not true)) ($generated@@22 (+ $generated@@26 1) $generated@@27)) (= ($generated@@20 ($generated@@21 $generated@@25) $generated@@26 $generated@@27) (ite (= $generated@@27 $generated@@26) 0 (+ ($generated@@24 ($generated@@24 $generated@@26 $generated@@26) $generated@@26) ($generated@@20 $generated@@25 (+ $generated@@26 1) $generated@@27))))))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@25) $generated@@26 $generated@@27))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@29 $generated@@38 $generated@@39 ($generated@@35 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@42) $generated@@40)
 :weight 0
)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (or (= $generated@@47 $generated@@48) (= ($generated@@29 $generated@@43 $generated@@44 ($generated@@35 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@45) $generated@@48) ($generated@@29 $generated@@43 $generated@@44 $generated@@46 $generated@@48)))
 :weight 0
))) (= ($generated@@2 $generated@@30) 3)) (= ($generated@@2 $generated@@31) 4)) (= ($generated@@2 $generated@@32) 5)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (= ($generated@@2 ($generated@@33 $generated@@49 $generated@@50)) 6))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@36 ($generated@@33 $generated@@51 $generated@@52)) $generated@@51)
 :pattern ( ($generated@@33 $generated@@51 $generated@@52))
))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@37 ($generated@@33 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@33 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> ($generated@@28 $generated@@55 $generated@@56) (forall (($generated@@57 T@U) ) (!  (=> ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@55 $generated@@57) $generated@@1))) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@56 $generated@@57) $generated@@1))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@56 $generated@@57) $generated@@1))
)))
 :pattern ( ($generated@@28 $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@58 Int) ) (! (= ($generated@@23 $generated@@58) $generated@@58)
 :pattern ( ($generated@@23 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 $generated@@60) $generated@@60)
 :pattern ( ($generated@@59 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 ($generated@@34 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@34 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (!  (=> ($generated@@28 $generated@@66 $generated@@67) (=> ($generated@@65 $generated@@70 $generated@@68 $generated@@69 $generated@@66) ($generated@@65 $generated@@70 $generated@@68 $generated@@69 $generated@@67)))
 :pattern ( ($generated@@28 $generated@@66 $generated@@67) ($generated@@65 $generated@@70 $generated@@68 $generated@@69 $generated@@66))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 Int) ($generated@@73 Int) ) (! (= ($generated@@20 ($generated@@21 $generated@@71) $generated@@72 $generated@@73) ($generated@@20 $generated@@71 $generated@@72 $generated@@73))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@71) $generated@@72 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> (or (not (= $generated@@74 $generated@@76)) (not true)) (=> (and ($generated@@28 $generated@@74 $generated@@75) ($generated@@28 $generated@@75 $generated@@76)) ($generated@@28 $generated@@74 $generated@@76)))
 :pattern ( ($generated@@28 $generated@@74 $generated@@75) ($generated@@28 $generated@@75 $generated@@76))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@77 T@U) ($generated@@78 Int) ($generated@@79 Int) ) (!  (=> (or ($generated@@22 ($generated@@23 $generated@@78) ($generated@@23 $generated@@79)) (and (< 0 $generated@@19) (and (<= ($generated@@23 0) ($generated@@23 $generated@@78)) (<= ($generated@@23 $generated@@78) ($generated@@23 $generated@@79))))) (and (=> (or (not (= ($generated@@23 $generated@@79) ($generated@@23 $generated@@78))) (not true)) ($generated@@22 ($generated@@23 (+ $generated@@78 1)) ($generated@@23 $generated@@79))) (= ($generated@@20 ($generated@@21 $generated@@77) ($generated@@23 $generated@@78) ($generated@@23 $generated@@79)) (ite (= ($generated@@23 $generated@@79) ($generated@@23 $generated@@78)) 0 (+ ($generated@@24 ($generated@@23 ($generated@@24 ($generated@@23 $generated@@78) ($generated@@23 $generated@@78))) ($generated@@23 $generated@@78)) ($generated@@20 ($generated@@21 $generated@@77) ($generated@@23 (+ $generated@@78 1)) ($generated@@23 $generated@@79)))))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@77) ($generated@@23 $generated@@78) ($generated@@23 $generated@@79)))
))))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@34 $generated@@81 ($generated@@62 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@62 $generated@@81 $generated@@80))
)))
(assert  (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@82 $generated@@85 $generated@@86 $generated@@87 ($generated@@84 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@90 $generated@@91) $generated@@88)
 :weight 0
)) (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@82 $generated@@92 $generated@@93 $generated@@94 ($generated@@84 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@82 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@82 $generated@@101 $generated@@102 $generated@@103 ($generated@@84 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@82 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)))))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 Bool) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@7 ($generated@@82 $generated@@32 $generated@@30 $generated@@3 ($generated@@83 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))  (=> (and (or (not (= $generated@@114 $generated@@110)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@111 $generated@@114) $generated@@112)))) $generated@@113))
 :pattern ( ($generated@@82 $generated@@32 $generated@@30 $generated@@3 ($generated@@83 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))
)))
(assert (forall (($generated@@116 Int) ($generated@@117 Int) ) (! (= ($generated@@24 $generated@@116 $generated@@117) (* $generated@@116 $generated@@117))
 :pattern ( ($generated@@24 $generated@@116 $generated@@117))
)))
(assert (forall (($generated@@118 Int) ) (! (= ($generated@@62 $generated@@4 ($generated@@8 ($generated@@23 $generated@@118))) ($generated@@59 $generated@@31 ($generated@@62 $generated@@4 ($generated@@8 $generated@@118))))
 :pattern ( ($generated@@62 $generated@@4 ($generated@@8 ($generated@@23 $generated@@118))))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@T) ) (! (= ($generated@@62 $generated@@120 ($generated@@59 $generated@@120 $generated@@119)) ($generated@@59 $generated@@31 ($generated@@62 $generated@@120 $generated@@119)))
 :pattern ( ($generated@@62 $generated@@120 ($generated@@59 $generated@@120 $generated@@119)))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (! ($generated@@65 $generated@@4 $generated@@122 $generated $generated@@121)
 :pattern ( ($generated@@65 $generated@@4 $generated@@122 $generated $generated@@121))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 (T@U) Bool)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@130 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@131  (=> (and (= $generated@@123 ($generated@@83 $generated@@124 $generated@@125 $generated@@1 false)) (<= ($generated@@23 0) $generated@@126)) (=> (and (and (and ($generated@@127 $generated@@128) ($generated@@129 $generated@@128)) (forall (($generated@@132 T@U) ) (!  (=> (and (or (not (= $generated@@132 $generated@@124)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@125 $generated@@132) $generated@@1)))) (= ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@128 $generated@@132) ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@125 $generated@@132)))
 :pattern ( ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@128 $generated@@132))
))) (and (and ($generated@@28 $generated@@125 $generated@@128) (= $generated@@130 ($generated@@23 0))) (and ($generated@@65 $generated@@4 ($generated@@8 $generated@@130) $generated $generated@@128) ($generated@@65 $generated@@4 ($generated@@8 $generated@@126) $generated $generated@@128)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@23 0) $generated@@130)) (=> (= (ControlFlow 0 2) (- 0 1)) (<= $generated@@130 $generated@@126)))))))
(let (($generated@@133  (=> (and (and ($generated@@127 $generated@@125) ($generated@@129 $generated@@125)) (and (= 3 $generated@@19) (= (ControlFlow 0 4) 2))) $generated@@131)))
$generated@@133)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
