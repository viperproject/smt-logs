(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@28 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T) T@T)
(declare-fun $generated@@37 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@59 (Int) Int)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@64 (T@T T@U) T@U)
(declare-fun $generated@@67 (T@U T@U T@U) Bool)
(declare-fun $generated@@73 () Int)
(declare-fun $generated@@74 (T@U T@U Int Int) Int)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@76 (T@U Int Int) Bool)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@129 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@23) 3))
(assert (forall (($generated@@27 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@27 $generated@@24)  (or (= $generated@@27 $generated@@25) (= ($generated@@26 $generated@@27) $generated@@24)))
 :pattern ( ($generated@@22 $generated@@23 $generated@@27 $generated@@24))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@28 $generated@@23 $generated@@30 $generated@@29 $generated@@31) ($generated@@28 $generated@@23 $generated@@30 $generated@@24 $generated@@31))
 :pattern ( ($generated@@28 $generated@@23 $generated@@30 $generated@@29 $generated@@31))
 :pattern ( ($generated@@28 $generated@@23 $generated@@30 $generated@@24 $generated@@31))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@33 $generated@@40 $generated@@41 ($generated@@37 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@44) $generated@@42)
 :weight 0
)) (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (or (= $generated@@49 $generated@@50) (= ($generated@@33 $generated@@45 $generated@@46 ($generated@@37 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@50) ($generated@@33 $generated@@45 $generated@@46 $generated@@48 $generated@@50)))
 :weight 0
))) (= ($generated@@5 $generated@@34) 4)) (= ($generated@@5 $generated@@35) 5)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (= ($generated@@5 ($generated@@36 $generated@@51 $generated@@52)) 6))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@38 ($generated@@36 $generated@@53 $generated@@54)) $generated@@53)
 :pattern ( ($generated@@36 $generated@@53 $generated@@54))
))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@55 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@36 $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@28 $generated@@23 $generated@@57 $generated@@24 $generated@@58)  (or (= $generated@@57 $generated@@25) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@23 ($generated@@36 $generated@@34 $generated@@35) $generated@@58 $generated@@57) $generated@@1)))))
 :pattern ( ($generated@@28 $generated@@23 $generated@@57 $generated@@24 $generated@@58))
)))
(assert (forall (($generated@@60 Int) ) (! (= ($generated@@59 $generated@@60) $generated@@60)
 :pattern ( ($generated@@59 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@61 $generated@@63 $generated@@62) $generated@@62)
 :pattern ( ($generated@@61 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@64 $generated@@66 ($generated@@32 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@32 $generated@@66 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@67 ($generated@@64 $generated@@71 $generated@@68) $generated@@69 $generated@@70) ($generated@@28 $generated@@71 $generated@@68 $generated@@69 $generated@@70))
 :pattern ( ($generated@@67 ($generated@@64 $generated@@71 $generated@@68) $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@72 $generated@@29)  (and ($generated@@22 $generated@@23 $generated@@72 $generated@@24) (or (not (= $generated@@72 $generated@@25)) (not true))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@72 $generated@@29))
 :pattern ( ($generated@@22 $generated@@23 $generated@@72 $generated@@24))
)))
(assert  (=> (<= 0 $generated@@73) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 Int) ($generated@@80 Int) ) (!  (=> (or ($generated@@76 $generated@@78 ($generated@@59 $generated@@79) ($generated@@59 $generated@@80)) (and (< 0 $generated@@73) (and (or (not (= $generated@@78 $generated@@25)) (not true)) ($generated@@22 $generated@@23 $generated@@78 $generated@@29)))) (and (=> (< ($generated@@59 0) ($generated@@59 $generated@@79)) (and (=> (<= ($generated@@59 $generated@@80) ($generated@@59 0)) ($generated@@76 $generated@@78 ($generated@@59 (- $generated@@79 1)) ($generated@@59 1))) (=> (< ($generated@@59 0) ($generated@@59 $generated@@80)) (and ($generated@@76 $generated@@78 ($generated@@59 $generated@@79) ($generated@@59 (- $generated@@80 1))) ($generated@@76 $generated@@78 ($generated@@59 (- $generated@@79 1)) ($generated@@74 ($generated@@75 $generated@@77) $generated@@78 ($generated@@59 $generated@@79) ($generated@@59 (- $generated@@80 1)))))))) (= ($generated@@74 ($generated@@75 $generated@@77) $generated@@78 ($generated@@59 $generated@@79) ($generated@@59 $generated@@80)) (ite (<= ($generated@@59 $generated@@79) ($generated@@59 0)) (+ $generated@@80 1) (ite (<= ($generated@@59 $generated@@80) ($generated@@59 0)) ($generated@@74 ($generated@@75 $generated@@77) $generated@@78 ($generated@@59 (- $generated@@79 1)) ($generated@@59 1)) ($generated@@74 ($generated@@75 $generated@@77) $generated@@78 ($generated@@59 (- $generated@@79 1)) ($generated@@74 ($generated@@75 $generated@@77) $generated@@78 ($generated@@59 $generated@@79) ($generated@@59 (- $generated@@80 1)))))))))
 :weight 3
 :pattern ( ($generated@@74 ($generated@@75 $generated@@77) $generated@@78 ($generated@@59 $generated@@79) ($generated@@59 $generated@@80)))
))))
(assert  (=> (<= 0 $generated@@73) (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 Int) ($generated@@84 Int) ) (!  (=> (or ($generated@@76 ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 $generated@@83) ($generated@@59 $generated@@84)) (and (< 0 $generated@@73) (and (or (not (= $generated@@82 $generated@@25)) (not true)) ($generated@@22 $generated@@23 $generated@@82 $generated@@29)))) (and (=> (< ($generated@@59 0) ($generated@@59 $generated@@83)) (and (=> (<= ($generated@@59 $generated@@84) ($generated@@59 0)) ($generated@@76 ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 (- $generated@@83 1)) ($generated@@59 1))) (=> (< ($generated@@59 0) ($generated@@59 $generated@@84)) (and ($generated@@76 ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 $generated@@83) ($generated@@59 (- $generated@@84 1))) ($generated@@76 ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 (- $generated@@83 1)) ($generated@@59 ($generated@@74 ($generated@@75 $generated@@81) ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 $generated@@83) ($generated@@59 (- $generated@@84 1))))))))) (= ($generated@@74 ($generated@@75 $generated@@81) ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 $generated@@83) ($generated@@59 $generated@@84)) (ite (<= ($generated@@59 $generated@@83) ($generated@@59 0)) (+ $generated@@84 1) (ite (<= ($generated@@59 $generated@@84) ($generated@@59 0)) ($generated@@74 ($generated@@75 $generated@@81) ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 (- $generated@@83 1)) ($generated@@59 1)) ($generated@@74 ($generated@@75 $generated@@81) ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 (- $generated@@83 1)) ($generated@@59 ($generated@@74 ($generated@@75 $generated@@81) ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 $generated@@83) ($generated@@59 (- $generated@@84 1))))))))))
 :weight 3
 :pattern ( ($generated@@74 ($generated@@75 $generated@@81) ($generated@@61 $generated@@23 $generated@@82) ($generated@@59 $generated@@83) ($generated@@59 $generated@@84)))
))))
(assert  (=> (<= 0 $generated@@73) (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 Int) ($generated@@88 Int) ) (!  (=> (or ($generated@@76 $generated@@86 $generated@@87 $generated@@88) (and (< 0 $generated@@73) (and (or (not (= $generated@@86 $generated@@25)) (not true)) ($generated@@22 $generated@@23 $generated@@86 $generated@@29)))) (and (=> (< ($generated@@59 0) $generated@@87) (and (=> (<= $generated@@88 ($generated@@59 0)) ($generated@@76 $generated@@86 (- $generated@@87 1) ($generated@@59 1))) (=> (< ($generated@@59 0) $generated@@88) (and ($generated@@76 $generated@@86 $generated@@87 (- $generated@@88 1)) ($generated@@76 $generated@@86 (- $generated@@87 1) ($generated@@74 $generated@@85 $generated@@86 $generated@@87 (- $generated@@88 1))))))) (= ($generated@@74 ($generated@@75 $generated@@85) $generated@@86 $generated@@87 $generated@@88) (ite (<= $generated@@87 ($generated@@59 0)) (+ $generated@@88 1) (ite (<= $generated@@88 ($generated@@59 0)) ($generated@@74 $generated@@85 $generated@@86 (- $generated@@87 1) ($generated@@59 1)) ($generated@@74 $generated@@85 $generated@@86 (- $generated@@87 1) ($generated@@74 $generated@@85 $generated@@86 $generated@@87 (- $generated@@88 1))))))))
 :pattern ( ($generated@@74 ($generated@@75 $generated@@85) $generated@@86 $generated@@87 $generated@@88))
))))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@32 $generated@@90 ($generated@@64 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@64 $generated@@90 $generated@@89))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 Int) ($generated@@94 Int) ) (! (= ($generated@@74 ($generated@@75 $generated@@91) $generated@@92 $generated@@93 $generated@@94) ($generated@@74 $generated@@91 $generated@@92 $generated@@93 $generated@@94))
 :pattern ( ($generated@@74 ($generated@@75 $generated@@91) $generated@@92 $generated@@93 $generated@@94))
)))
(assert  (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@95 $generated@@98 $generated@@99 $generated@@100 ($generated@@97 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@103 $generated@@104) $generated@@101)
 :weight 0
)) (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@95 $generated@@105 $generated@@106 $generated@@107 ($generated@@97 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@112 $generated@@113) ($generated@@95 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@112 $generated@@113)))
 :weight 0
)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@95 $generated@@114 $generated@@115 $generated@@116 ($generated@@97 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@121 $generated@@122) ($generated@@95 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@121 $generated@@122)))
 :weight 0
)))))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 Bool) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@10 ($generated@@95 $generated@@23 $generated@@34 $generated@@6 ($generated@@96 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))  (=> (and (or (not (= $generated@@127 $generated@@123)) (not true)) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@23 ($generated@@36 $generated@@34 $generated@@35) $generated@@124 $generated@@127) $generated@@125)))) $generated@@126))
 :pattern ( ($generated@@95 $generated@@23 $generated@@34 $generated@@6 ($generated@@96 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))
)))
(assert (= ($generated@@21 $generated@@24) $generated@@2))
(assert (= ($generated@@129 $generated@@24) $generated@@4))
(assert (= ($generated@@21 $generated@@29) $generated@@3))
(assert (= ($generated@@129 $generated@@29) $generated@@4))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@64 $generated@@7 ($generated@@11 ($generated@@59 $generated@@130))) ($generated@@61 $generated@@35 ($generated@@64 $generated@@7 ($generated@@11 $generated@@130))))
 :pattern ( ($generated@@64 $generated@@7 ($generated@@11 ($generated@@59 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@64 $generated@@132 ($generated@@61 $generated@@132 $generated@@131)) ($generated@@61 $generated@@35 ($generated@@64 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@64 $generated@@132 ($generated@@61 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (! ($generated@@28 $generated@@7 $generated@@134 $generated $generated@@133)
 :pattern ( ($generated@@28 $generated@@7 $generated@@134 $generated $generated@@133))
)))
(assert (forall (($generated@@135 T@U) ) (! ($generated@@22 $generated@@7 $generated@@135 $generated)
 :pattern ( ($generated@@22 $generated@@7 $generated@@135 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 (T@U) Bool)
(declare-fun $generated@@148 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@149  (=> (and (and (and (< ($generated@@59 0) $generated@@136) ($generated@@67 ($generated@@64 $generated@@23 $generated@@137) $generated@@24 $generated@@138)) (and (= $generated@@139 (- $generated@@140 1)) ($generated@@28 $generated@@7 ($generated@@11 $generated@@139) $generated $generated@@138))) (and (and ($generated@@67 ($generated@@64 $generated@@23 $generated@@137) $generated@@24 $generated@@138) ($generated@@28 $generated@@7 ($generated@@11 $generated@@140) $generated $generated@@138)) (and (= $generated@@141 (- $generated@@136 1)) ($generated@@28 $generated@@7 ($generated@@11 $generated@@141) $generated $generated@@138)))) (and (=> (= (ControlFlow 0 8) (- 0 13)) (or (<= 0 $generated@@140) (= $generated@@140 $generated@@140))) (=> (or (<= 0 $generated@@140) (= $generated@@140 $generated@@140)) (and (=> (= (ControlFlow 0 8) (- 0 12)) (or (or (<= 0 $generated@@136) (< $generated@@140 $generated@@140)) (= $generated@@141 $generated@@136))) (=> (or (or (<= 0 $generated@@136) (< $generated@@140 $generated@@140)) (= $generated@@141 $generated@@136)) (and (=> (= (ControlFlow 0 8) (- 0 11)) (or (< $generated@@140 $generated@@140) (and (= $generated@@140 $generated@@140) (< $generated@@141 $generated@@136)))) (=> (or (< $generated@@140 $generated@@140) (and (= $generated@@140 $generated@@140) (< $generated@@141 $generated@@136))) (=> ($generated@@76 $generated@@137 $generated@@140 (- $generated@@136 1)) (=> (and (= $generated@@142 ($generated@@74 ($generated@@75 $generated@@143) $generated@@137 $generated@@140 (- $generated@@136 1))) ($generated@@28 $generated@@7 ($generated@@11 $generated@@142) $generated $generated@@138)) (and (=> (= (ControlFlow 0 8) (- 0 10)) (or (<= 0 $generated@@140) (= $generated@@139 $generated@@140))) (=> (or (<= 0 $generated@@140) (= $generated@@139 $generated@@140)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (or (<= 0 $generated@@136) (< $generated@@139 $generated@@140)) (= $generated@@142 $generated@@136))) (=> (or (or (<= 0 $generated@@136) (< $generated@@139 $generated@@140)) (= $generated@@142 $generated@@136)) (=> (= (ControlFlow 0 8) (- 0 7)) (or (< $generated@@139 $generated@@140) (and (= $generated@@139 $generated@@140) (< $generated@@142 $generated@@136)))))))))))))))))))
(let (($generated@@150  (=> (and (<= $generated@@136 ($generated@@59 0)) ($generated@@67 ($generated@@64 $generated@@23 $generated@@137) $generated@@24 $generated@@138)) (=> (and (and (= $generated@@144 (- $generated@@140 1)) ($generated@@28 $generated@@7 ($generated@@11 $generated@@144) $generated $generated@@138)) (and (= $generated@@145 ($generated@@59 1)) ($generated@@28 $generated@@7 ($generated@@11 $generated@@145) $generated $generated@@138))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (<= 0 $generated@@140) (= $generated@@144 $generated@@140))) (=> (or (<= 0 $generated@@140) (= $generated@@144 $generated@@140)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (or (<= 0 $generated@@136) (< $generated@@144 $generated@@140)) (= $generated@@145 $generated@@136))) (=> (or (or (<= 0 $generated@@136) (< $generated@@144 $generated@@140)) (= $generated@@145 $generated@@136)) (=> (= (ControlFlow 0 4) (- 0 3)) (or (< $generated@@144 $generated@@140) (and (= $generated@@144 $generated@@140) (< $generated@@145 $generated@@136))))))))))))
(let (($generated@@151  (=> (< ($generated@@59 0) $generated@@140) (and (=> (= (ControlFlow 0 14) 4) $generated@@150) (=> (= (ControlFlow 0 14) 8) $generated@@149)))))
(let (($generated@@152 true))
(let (($generated@@153 true))
(let (($generated@@154  (=> (= $generated@@146 ($generated@@96 $generated@@25 $generated@@138 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 15) 1) $generated@@153) (=> (= (ControlFlow 0 15) 2) $generated@@152)) (=> (= (ControlFlow 0 15) 14) $generated@@151)))))
(let (($generated@@155  (=> (and ($generated@@147 $generated@@138) ($generated@@148 $generated@@138)) (=> (and (and (or (not (= $generated@@137 $generated@@25)) (not true)) (and ($generated@@22 $generated@@23 $generated@@137 $generated@@29) ($generated@@28 $generated@@23 $generated@@137 $generated@@29 $generated@@138))) (and (= 0 $generated@@73) (= (ControlFlow 0 16) 15))) $generated@@154))))
$generated@@155))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
