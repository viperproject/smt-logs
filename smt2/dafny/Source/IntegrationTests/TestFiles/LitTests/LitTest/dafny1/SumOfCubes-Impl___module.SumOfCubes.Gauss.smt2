(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U Int) Int)
(declare-fun $generated@@1 (T@U) T@U)
(declare-fun $generated@@2 (Int) Int)
(declare-fun $generated@@3 (Int) Bool)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@23 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@T T@T) T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@32 (T@T) T@T)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@61 (T@U T@U) Bool)
(declare-fun $generated@@68 (Int Int) Int)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@112 (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@20 T@U) ($generated@@21 Int) ) (!  (=> (or ($generated@@3 ($generated@@2 $generated@@21)) (and (< 0 $generated) (<= ($generated@@2 0) ($generated@@2 $generated@@21)))) (and (=> (or (not (= ($generated@@2 $generated@@21) ($generated@@2 0))) (not true)) ($generated@@3 ($generated@@2 (- $generated@@21 1)))) (= ($generated@@0 ($generated@@1 $generated@@20) ($generated@@2 $generated@@21)) (ite (= ($generated@@2 $generated@@21) ($generated@@2 0)) 0 (- (+ ($generated@@0 ($generated@@1 $generated@@20) ($generated@@2 (- $generated@@21 1))) $generated@@21) 1)))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@20) ($generated@@2 $generated@@21)))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@23 $generated@@33 $generated@@34 ($generated@@30 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@37) $generated@@35)
 :weight 0
)) (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (or (= $generated@@42 $generated@@43) (= ($generated@@23 $generated@@38 $generated@@39 ($generated@@30 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@43) ($generated@@23 $generated@@38 $generated@@39 $generated@@41 $generated@@43)))
 :weight 0
))) (= ($generated@@4 $generated@@24) 3)) (= ($generated@@4 $generated@@25) 4)) (= ($generated@@4 $generated@@26) 5)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (= ($generated@@4 ($generated@@27 $generated@@44 $generated@@45)) 6))) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (! (= ($generated@@31 ($generated@@27 $generated@@46 $generated@@47)) $generated@@46)
 :pattern ( ($generated@@27 $generated@@46 $generated@@47))
))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@32 ($generated@@27 $generated@@48 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@27 $generated@@48 $generated@@49))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (!  (=> ($generated@@22 $generated@@50 $generated@@51) (forall (($generated@@52 T@U) ) (!  (=> ($generated@@9 ($generated@@29 $generated@@5 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@52) $generated@@28))) ($generated@@9 ($generated@@29 $generated@@5 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@51 $generated@@52) $generated@@28))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@51 $generated@@52) $generated@@28))
)))
 :pattern ( ($generated@@22 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@2 $generated@@53) $generated@@53)
 :pattern ( ($generated@@2 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@29 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@29 $generated@@59 $generated@@58))
)))
(assert ($generated@@60 $generated@@28))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> ($generated@@61 $generated@@62 $generated@@63) (and ($generated@@22 $generated@@62 $generated@@63) (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> (not ($generated@@60 $generated@@65)) (= ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@62 $generated@@64) $generated@@65) ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@63 $generated@@64) $generated@@65)))
 :pattern ( ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@63 $generated@@64) $generated@@65))
))))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@66 T@U) ($generated@@67 Int) ) (!  (=> (or ($generated@@3 $generated@@67) (and (< 0 $generated) (<= ($generated@@2 0) $generated@@67))) (and (=> (or (not (= $generated@@67 ($generated@@2 0))) (not true)) ($generated@@3 (- $generated@@67 1))) (= ($generated@@0 ($generated@@1 $generated@@66) $generated@@67) (ite (= $generated@@67 ($generated@@2 0)) 0 (- (+ ($generated@@0 $generated@@66 (- $generated@@67 1)) $generated@@67) 1)))))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@66) $generated@@67))
))))
(assert (forall (($generated@@69 Int) ($generated@@70 Int) ) (! (= ($generated@@68 $generated@@69 $generated@@70) (div $generated@@69 $generated@@70))
 :pattern ( ($generated@@68 $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (=> (or (not (= $generated@@71 $generated@@73)) (not true)) (=> (and ($generated@@22 $generated@@71 $generated@@72) ($generated@@22 $generated@@72 $generated@@73)) ($generated@@22 $generated@@71 $generated@@73)))
 :pattern ( ($generated@@22 $generated@@71 $generated@@72) ($generated@@22 $generated@@72 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@29 $generated@@75 ($generated@@57 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@57 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ) (! (= ($generated@@0 ($generated@@1 $generated@@76) $generated@@77) ($generated@@0 $generated@@76 $generated@@77))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@76) $generated@@77))
)))
(assert  (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@78 $generated@@81 $generated@@82 $generated@@83 ($generated@@80 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@86 $generated@@87) $generated@@84)
 :weight 0
)) (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@78 $generated@@88 $generated@@89 $generated@@90 ($generated@@80 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@78 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@78 $generated@@97 $generated@@98 $generated@@99 ($generated@@80 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@78 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)))))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 Bool) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@9 ($generated@@78 $generated@@26 $generated@@24 $generated@@5 ($generated@@79 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))  (=> (and (or (not (= $generated@@110 $generated@@106)) (not true)) ($generated@@9 ($generated@@29 $generated@@5 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@107 $generated@@110) $generated@@108)))) $generated@@109))
 :pattern ( ($generated@@78 $generated@@26 $generated@@24 $generated@@5 ($generated@@79 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))
)))
(assert (forall (($generated@@113 Int) ($generated@@114 Int) ) (! (= ($generated@@112 $generated@@113 $generated@@114) (* $generated@@113 $generated@@114))
 :pattern ( ($generated@@112 $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 Int) ) (! (= ($generated@@57 $generated@@6 ($generated@@10 ($generated@@2 $generated@@115))) ($generated@@54 $generated@@25 ($generated@@57 $generated@@6 ($generated@@10 $generated@@115))))
 :pattern ( ($generated@@57 $generated@@6 ($generated@@10 ($generated@@2 $generated@@115))))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@57 $generated@@117 ($generated@@54 $generated@@117 $generated@@116)) ($generated@@54 $generated@@25 ($generated@@57 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@57 $generated@@117 ($generated@@54 $generated@@117 $generated@@116)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@127  (=> (= $generated@@118 ($generated@@79 $generated@@119 $generated@@120 $generated@@28 false)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= ($generated@@2 2) 0)) (not true))) (=> (or (not (= ($generated@@2 2) 0)) (not true)) (=> (= $generated@@121 ($generated@@68 ($generated@@112 $generated@@122 (- $generated@@122 1)) ($generated@@2 2))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@2 0) $generated@@122)) (=> (<= ($generated@@2 0) $generated@@122) (=> (and (and (and ($generated@@123 $generated@@124) ($generated@@125 $generated@@124)) ($generated@@3 $generated@@122)) (and (and (= ($generated@@112 ($generated@@2 2) ($generated@@0 ($generated@@1 ($generated@@1 $generated@@126)) $generated@@122)) ($generated@@112 $generated@@122 (- $generated@@122 1))) (forall (($generated@@128 T@U) ) (!  (=> (and (or (not (= $generated@@128 $generated@@119)) (not true)) ($generated@@9 ($generated@@29 $generated@@5 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@120 $generated@@128) $generated@@28)))) (= ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@124 $generated@@128) ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@120 $generated@@128)))
 :pattern ( ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@124 $generated@@128))
))) (and ($generated@@61 $generated@@120 $generated@@124) (= (ControlFlow 0 2) (- 0 1))))) (= $generated@@121 ($generated@@0 ($generated@@1 ($generated@@1 $generated@@126)) $generated@@122)))))))))))
(let (($generated@@129  (=> (and (and (and ($generated@@123 $generated@@120) ($generated@@125 $generated@@120)) (= 2 $generated)) (and (<= ($generated@@2 0) $generated@@122) (= (ControlFlow 0 5) 2))) $generated@@127)))
$generated@@129)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
