(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun Tagclass._module.Node () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun |##_module.Node.Element| () T@U)
(declare-fun |##_module.Node.Nary| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.Node (T@U) T@U)
(declare-fun _module.__default.ToSeq (T@U T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun _module.Node.Element_q (T@U) Bool)
(declare-fun _module.Node.Nary_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.Node.Element| (T@U) T@U)
(declare-fun |#_module.Node.Nary| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |_module.__default.ToSeq#canCall| (T@U T@U) Bool)
(declare-fun _module.List._h1 (T@U) T@U)
(declare-fun _module.List._h0 (T@U) T@U)
(declare-fun _module.Node._h3 (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun _module.Node._h2 (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun Tclass._module.Node_0 (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun BoxRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSeq alloc Tagclass._module.List Tagclass._module.Node |##_module.List.Nil| |##_module.List.Cons| |##_module.Node.Element| |##_module.Node.Nary| tytagFamily$List tytagFamily$Node)
)
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.List$X T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$X) $h)  (and ($IsAlloc DatatypeTypeType |a#6#0#0| (Tclass._module.Node _module.List$X) $h) ($IsAlloc DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$X) $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$X) $h))
)))
(assert (forall ((_module._default.ToSeq$X T@U) ($ly T@U) (|list#0| T@U) ) (! (= (_module.__default.ToSeq _module._default.ToSeq$X ($LS $ly) |list#0|) (_module.__default.ToSeq _module._default.ToSeq$X $ly |list#0|))
 :pattern ( (_module.__default.ToSeq _module._default.ToSeq$X ($LS $ly) |list#0|))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (forall ((_module.List$X@@0 T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$X@@0) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$X@@0) $h@@0))
)))
(assert (forall ((_module.List$X@@1 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$X@@1))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$X@@1)))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (= (Ctor SeqType) 4))
(assert (forall ((s T@U) (bx T@U) (t T@U) ) (!  (=> (and ($Is SeqType s (TSeq t)) ($IsBox bx t)) ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
)))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Node.Element_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Node.Element|))
 :pattern ( (_module.Node.Element_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Node.Nary_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Node.Nary|))
 :pattern ( (_module.Node.Nary_q d@@2))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.List.Cons_q d@@3) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@3 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@3))
)))
(assert (forall ((_module.List$X@@2 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$X@@2))  (and ($Is DatatypeTypeType |a#6#0#0@@0| (Tclass._module.Node _module.List$X@@2)) ($Is DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$X@@2))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$X@@2)))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.List.Nil_q d@@4) (= d@@4 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.Node.Element_q d@@5) (exists ((|a#13#0#0| T@U) ) (= d@@5 (|#_module.Node.Element| |a#13#0#0|))))
 :pattern ( (_module.Node.Element_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (_module.Node.Nary_q d@@6) (exists ((|a#19#0#0| T@U) ) (= d@@6 (|#_module.Node.Nary| |a#19#0#0|))))
 :pattern ( (_module.Node.Nary_q d@@6))
)))
(assert (forall ((s@@0 T@U) (v T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@0 v)) (+ 1 (|Seq#Length| s@@0)))
 :pattern ( (|Seq#Build| s@@0 v))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@0 h) ($IsAlloc T@@1 v@@0 t@@0 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@0 h))
)))
(assert (forall ((_module.List$X@@3 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$X@@3)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$X@@3)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$X@@3))
)))
(assert (forall ((_module.Node$X T@U) ) (!  (and (= (Tag (Tclass._module.Node _module.Node$X)) Tagclass._module.Node) (= (TagFamily (Tclass._module.Node _module.Node$X)) tytagFamily$Node))
 :pattern ( (Tclass._module.Node _module.Node$X))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0 s1)))
)))
(assert (forall ((s@@1 T@U) (i Int) (v@@1 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@1)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@1) i) v@@1)) (=> (or (not (= i (|Seq#Length| s@@1))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@1) i) (|Seq#Index| s@@1 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@1 v@@1) i))
)))
(assert (forall ((_module.Node$X@@0 T@U) (|a#14#0#0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_module.Node.Element| |a#14#0#0|) (Tclass._module.Node _module.Node$X@@0) $h@@1) ($IsAllocBox |a#14#0#0| _module.Node$X@@0 $h@@1)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Node.Element| |a#14#0#0|) (Tclass._module.Node _module.Node$X@@0) $h@@1))
)))
(assert (= (Ctor BoxType) 5))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.ToSeq$X@@0 T@U) ($ly@@0 T@U) (|list#0@@0| T@U) ) (!  (=> (or (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@0 (Lit DatatypeTypeType |list#0@@0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |list#0@@0| (Tclass._module.List _module._default.ToSeq$X@@0)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |list#0@@0|)))))) (let ((|rest#3| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |list#0@@0|)))))
(let ((|n#3| (Lit DatatypeTypeType (_module.List._h0 (Lit DatatypeTypeType |list#0@@0|)))))
 (and (=> (_module.Node.Element_q |n#3|) (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@0 |rest#3|)) (=> (not (_module.Node.Element_q |n#3|)) (let ((|nn#3| (_module.Node._h3 |n#3|)))
 (and (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@0 |nn#3|) (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@0 |rest#3|)))))))) (= (_module.__default.ToSeq _module._default.ToSeq$X@@0 ($LS $ly@@0) (Lit DatatypeTypeType |list#0@@0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |list#0@@0|)) |Seq#Empty| (let ((|rest#2| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |list#0@@0|)))))
(let ((|n#2| (Lit DatatypeTypeType (_module.List._h0 (Lit DatatypeTypeType |list#0@@0|)))))
(ite (_module.Node.Element_q |n#2|) (let ((|x#2| (Lit BoxType (_module.Node._h2 |n#2|))))
(|Seq#Append| (|Seq#Build| |Seq#Empty| |x#2|) (_module.__default.ToSeq _module._default.ToSeq$X@@0 ($LS $ly@@0) |rest#2|))) (let ((|nn#2| (Lit DatatypeTypeType (_module.Node._h3 |n#2|))))
(|Seq#Append| (_module.__default.ToSeq _module._default.ToSeq$X@@0 ($LS $ly@@0) |nn#2|) (_module.__default.ToSeq _module._default.ToSeq$X@@0 ($LS $ly@@0) |rest#2|))))))))))
 :weight 3
 :pattern ( (_module.__default.ToSeq _module._default.ToSeq$X@@0 ($LS $ly@@0) (Lit DatatypeTypeType |list#0@@0|)))
))))
(assert (forall ((_module.Node$X@@1 T@U) (|a#20#0#0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_module.Node.Nary| |a#20#0#0|) (Tclass._module.Node _module.Node$X@@1) $h@@2) ($IsAlloc DatatypeTypeType |a#20#0#0| (Tclass._module.List _module.Node$X@@1) $h@@2)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Node.Nary| |a#20#0#0|) (Tclass._module.Node _module.Node$X@@1) $h@@2))
)))
(assert (forall ((_module.List$X@@4 T@U) (d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 (Tclass._module.List _module.List$X@@4)) (or (_module.List.Nil_q d@@7) (_module.List.Cons_q d@@7)))
 :pattern ( (_module.List.Cons_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass._module.List _module.List$X@@4)))
 :pattern ( (_module.List.Nil_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass._module.List _module.List$X@@4)))
)))
(assert (forall ((_module.Node$X@@2 T@U) (d@@8 T@U) ) (!  (=> ($Is DatatypeTypeType d@@8 (Tclass._module.Node _module.Node$X@@2)) (or (_module.Node.Element_q d@@8) (_module.Node.Nary_q d@@8)))
 :pattern ( (_module.Node.Nary_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass._module.Node _module.Node$X@@2)))
 :pattern ( (_module.Node.Element_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass._module.Node _module.Node$X@@2)))
)))
(assert (forall ((v@@2 T@U) (t@@1 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@2) t@@1) ($Is T@@2 v@@2 t@@1))
 :pattern ( ($IsBox ($Box T@@2 v@@2) t@@1))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List._h0 (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List._h1 (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((v@@3 T@U) (t0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0) h@@0) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i@@0) t0 h@@0))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0) h@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.ToSeq$X@@1 T@U) ($ly@@1 T@U) (|list#0@@1| T@U) ) (!  (=> (and (or (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@1 |list#0@@1|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |list#0@@1| (Tclass._module.List _module._default.ToSeq$X@@1)) ($IsAlloc DatatypeTypeType |list#0@@1| (Tclass._module.List _module._default.ToSeq$X@@1) $Heap)))) ($IsGoodHeap $Heap)) ($IsAlloc SeqType (_module.__default.ToSeq _module._default.ToSeq$X@@1 $ly@@1 |list#0@@1|) (TSeq _module._default.ToSeq$X@@1) $Heap))
 :pattern ( ($IsAlloc SeqType (_module.__default.ToSeq _module._default.ToSeq$X@@1 $ly@@1 |list#0@@1|) (TSeq _module._default.ToSeq$X@@1) $Heap))
))))
(assert (forall ((t@@2 T@U) ) (! (= (Inv0_TSeq (TSeq t@@2)) t@@2)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Tag (TSeq t@@3)) TagSeq)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((_module.List$X@@5 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$X@@5)) _module.List$X@@5)
 :pattern ( (Tclass._module.List _module.List$X@@5))
)))
(assert (forall ((_module.Node$X@@3 T@U) ) (! (= (Tclass._module.Node_0 (Tclass._module.Node _module.Node$X@@3)) _module.Node$X@@3)
 :pattern ( (Tclass._module.Node _module.Node$X@@3))
)))
(assert (forall ((|a#12#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Node.Element| |a#12#0#0|)) |##_module.Node.Element|)
 :pattern ( (|#_module.Node.Element| |a#12#0#0|))
)))
(assert (forall ((|a#16#0#0| T@U) ) (! (= (_module.Node._h2 (|#_module.Node.Element| |a#16#0#0|)) |a#16#0#0|)
 :pattern ( (|#_module.Node.Element| |a#16#0#0|))
)))
(assert (forall ((|a#18#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Node.Nary| |a#18#0#0|)) |##_module.Node.Nary|)
 :pattern ( (|#_module.Node.Nary| |a#18#0#0|))
)))
(assert (forall ((|a#22#0#0| T@U) ) (! (= (_module.Node._h3 (|#_module.Node.Nary| |a#22#0#0|)) |a#22#0#0|)
 :pattern ( (|#_module.Node.Nary| |a#22#0#0|))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((_module.Node$X@@4 T@U) (|a#14#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Node.Element| |a#14#0#0@@0|) (Tclass._module.Node _module.Node$X@@4)) ($IsBox |a#14#0#0@@0| _module.Node$X@@4))
 :pattern ( ($Is DatatypeTypeType (|#_module.Node.Element| |a#14#0#0@@0|) (Tclass._module.Node _module.Node$X@@4)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.ToSeq$X@@2 T@U) ($ly@@2 T@U) (|list#0@@2| T@U) ) (!  (=> (or (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@2 |list#0@@2|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |list#0@@2| (Tclass._module.List _module._default.ToSeq$X@@2)))) (and (=> (not (_module.List.Nil_q |list#0@@2|)) (let ((|rest#1| (_module.List._h1 |list#0@@2|)))
(let ((|n#1| (_module.List._h0 |list#0@@2|)))
 (and (=> (_module.Node.Element_q |n#1|) (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@2 |rest#1|)) (=> (not (_module.Node.Element_q |n#1|)) (let ((|nn#1| (_module.Node._h3 |n#1|)))
 (and (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@2 |nn#1|) (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@2 |rest#1|)))))))) (= (_module.__default.ToSeq _module._default.ToSeq$X@@2 ($LS $ly@@2) |list#0@@2|) (ite (_module.List.Nil_q |list#0@@2|) |Seq#Empty| (let ((|rest#0| (_module.List._h1 |list#0@@2|)))
(let ((|n#0| (_module.List._h0 |list#0@@2|)))
(ite (_module.Node.Element_q |n#0|) (let ((|x#0| (_module.Node._h2 |n#0|)))
(|Seq#Append| (|Seq#Build| |Seq#Empty| |x#0|) (_module.__default.ToSeq _module._default.ToSeq$X@@2 $ly@@2 |rest#0|))) (let ((|nn#0| (_module.Node._h3 |n#0|)))
(|Seq#Append| (_module.__default.ToSeq _module._default.ToSeq$X@@2 $ly@@2 |nn#0|) (_module.__default.ToSeq _module._default.ToSeq$X@@2 $ly@@2 |rest#0|))))))))))
 :pattern ( (_module.__default.ToSeq _module._default.ToSeq$X@@2 ($LS $ly@@2) |list#0@@2|))
))))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (DtRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.ToSeq$X@@3 T@U) ($ly@@3 T@U) (|list#0@@3| T@U) ) (!  (=> (or (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@3 |list#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |list#0@@3| (Tclass._module.List _module._default.ToSeq$X@@3)))) ($Is SeqType (_module.__default.ToSeq _module._default.ToSeq$X@@3 $ly@@3 |list#0@@3|) (TSeq _module._default.ToSeq$X@@3)))
 :pattern ( (_module.__default.ToSeq _module._default.ToSeq$X@@3 $ly@@3 |list#0@@3|))
))))
(assert (forall ((|a#17#0#0| T@U) ) (! (< (BoxRank |a#17#0#0|) (DtRank (|#_module.Node.Element| |a#17#0#0|)))
 :pattern ( (|#_module.Node.Element| |a#17#0#0|))
)))
(assert (forall ((|a#23#0#0| T@U) ) (! (< (DtRank |a#23#0#0|) (DtRank (|#_module.Node.Nary| |a#23#0#0|)))
 :pattern ( (|#_module.Node.Nary| |a#23#0#0|))
)))
(assert (forall ((d@@9 T@U) (_module.Node$X@@5 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Node.Element_q d@@9) ($IsAlloc DatatypeTypeType d@@9 (Tclass._module.Node _module.Node$X@@5) $h@@3))) ($IsAllocBox (_module.Node._h2 d@@9) _module.Node$X@@5 $h@@3))
 :pattern ( ($IsAllocBox (_module.Node._h2 d@@9) _module.Node$X@@5 $h@@3))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 6)) (= (Ctor FieldType) 7)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((s@@3 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@3 val@@4)) s@@3) (= (|Seq#Build_inv1| (|Seq#Build| s@@3 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@3 val@@4))
)))
(assert (forall ((d@@10 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@10)) (DtRank d@@10))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@10)))
)))
(assert (forall ((bx@@0 T@U) (t@@4 T@U) ) (!  (=> ($IsBox bx@@0 (TSeq t@@4)) (and (= ($Box SeqType ($Unbox SeqType bx@@0)) bx@@0) ($Is SeqType ($Unbox SeqType bx@@0) (TSeq t@@4))))
 :pattern ( ($IsBox bx@@0 (TSeq t@@4)))
)))
(assert (forall ((_module.List$X@@6 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._module.List _module.List$X@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) (Tclass._module.List _module.List$X@@6))))
 :pattern ( ($IsBox bx@@1 (Tclass._module.List _module.List$X@@6)))
)))
(assert (forall ((_module.Node$X@@6 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._module.Node _module.Node$X@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass._module.Node _module.Node$X@@6))))
 :pattern ( ($IsBox bx@@2 (Tclass._module.Node _module.Node$X@@6)))
)))
(assert (forall ((_module.Node$X@@7 T@U) (|a#20#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Node.Nary| |a#20#0#0@@0|) (Tclass._module.Node _module.Node$X@@7)) ($Is DatatypeTypeType |a#20#0#0@@0| (Tclass._module.List _module.Node$X@@7)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Node.Nary| |a#20#0#0@@0|) (Tclass._module.Node _module.Node$X@@7)))
)))
(assert (forall ((d@@11 T@U) (_module.List$X@@7 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.List.Cons_q d@@11) ($IsAlloc DatatypeTypeType d@@11 (Tclass._module.List _module.List$X@@7) $h@@4))) ($IsAlloc DatatypeTypeType (_module.List._h0 d@@11) (Tclass._module.Node _module.List$X@@7) $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List._h0 d@@11) (Tclass._module.Node _module.List$X@@7) $h@@4))
)))
(assert (forall ((d@@12 T@U) (_module.List$X@@8 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.List.Cons_q d@@12) ($IsAlloc DatatypeTypeType d@@12 (Tclass._module.List _module.List$X@@8) $h@@5))) ($IsAlloc DatatypeTypeType (_module.List._h1 d@@12) (Tclass._module.List _module.List$X@@8) $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List._h1 d@@12) (Tclass._module.List _module.List$X@@8) $h@@5))
)))
(assert (forall ((d@@13 T@U) (_module.Node$X@@8 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_module.Node.Nary_q d@@13) ($IsAlloc DatatypeTypeType d@@13 (Tclass._module.Node _module.Node$X@@8) $h@@6))) ($IsAlloc DatatypeTypeType (_module.Node._h3 d@@13) (Tclass._module.List _module.Node$X@@8) $h@@6))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Node._h3 d@@13) (Tclass._module.List _module.Node$X@@8) $h@@6))
)))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n Int) ) (!  (and (=> (< n (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n) (|Seq#Index| s0@@0 n))) (=> (<= (|Seq#Length| s0@@0) n) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n) (|Seq#Index| s1@@0 (- n (|Seq#Length| s0@@0))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit DatatypeTypeType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit DatatypeTypeType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((|a#15#0#0| T@U) ) (! (= (|#_module.Node.Element| (Lit BoxType |a#15#0#0|)) (Lit DatatypeTypeType (|#_module.Node.Element| |a#15#0#0|)))
 :pattern ( (|#_module.Node.Element| (Lit BoxType |a#15#0#0|)))
)))
(assert (forall ((|a#21#0#0| T@U) ) (! (= (|#_module.Node.Nary| (Lit DatatypeTypeType |a#21#0#0|)) (Lit DatatypeTypeType (|#_module.Node.Nary| |a#21#0#0|)))
 :pattern ( (|#_module.Node.Nary| (Lit DatatypeTypeType |a#21#0#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((s@@4 T@U) ) (!  (=> (= (|Seq#Length| s@@4) 0) (= s@@4 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@4 (TSeq t0@@2)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@4))) ($IsBox (|Seq#Index| v@@4 i@@1) t0@@2))
 :pattern ( (|Seq#Index| v@@4 i@@1))
)))
 :pattern ( ($Is SeqType v@@4 (TSeq t0@@2)))
)))
(assert (forall ((s@@5 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@5))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))) (|Seq#Rank| s@@5)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |n#Z#0@0| () T@U)
(declare-fun |_mcc#3#0| () T@U)
(declare-fun _module._default.ToSeq$X@@4 () T@U)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |nn#Z#0@0| () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |list#0@@4| () T@U)
(declare-fun |rest#Z#0@0| () T@U)
(declare-fun |_mcc#2#0| () T@U)
(declare-fun |let#3#0#0| () T@U)
(declare-fun |x#Z#0@0| () T@U)
(declare-fun |_mcc#0#0| () T@U)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let ((anon15_Else_correct true))
(let ((anon15_Then_correct  (=> (and (= |n#Z#0@0| (|#_module.Node.Nary| |_mcc#3#0|)) ($Is DatatypeTypeType |_mcc#3#0| (Tclass._module.List _module._default.ToSeq$X@@4))) (=> (and (and (= |let#2#0#0| |_mcc#3#0|) ($Is DatatypeTypeType |let#2#0#0| (Tclass._module.List _module._default.ToSeq$X@@4))) (and (= |nn#Z#0@0| |let#2#0#0|) ($IsAlloc DatatypeTypeType |nn#Z#0@0| (Tclass._module.List _module._default.ToSeq$X@@4) $Heap@@0))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (< (DtRank |nn#Z#0@0|) (DtRank |list#0@@4|))) (=> (< (DtRank |nn#Z#0@0|) (DtRank |list#0@@4|)) (=> (|_module.__default.ToSeq#canCall| _module._default.ToSeq$X@@4 |nn#Z#0@0|) (=> (and ($IsAlloc DatatypeTypeType |rest#Z#0@0| (Tclass._module.List _module._default.ToSeq$X@@4) $Heap@@0) (= (ControlFlow 0 7) (- 0 6))) (< (DtRank |rest#Z#0@0|) (DtRank |list#0@@4|))))))))))
(let ((anon14_Else_correct  (=> (or (not (= |n#Z#0@0| (|#_module.Node.Element| |_mcc#2#0|))) (not true)) (and (=> (= (ControlFlow 0 10) 7) anon15_Then_correct) (=> (= (ControlFlow 0 10) 9) anon15_Else_correct)))))
(let ((anon14_Then_correct  (=> (= |n#Z#0@0| (|#_module.Node.Element| |_mcc#2#0|)) (=> (and ($IsBox |_mcc#2#0| _module._default.ToSeq$X@@4) (= |let#3#0#0| |_mcc#2#0|)) (=> (and (and ($IsBox |let#3#0#0| _module._default.ToSeq$X@@4) (= |x#Z#0@0| |let#3#0#0|)) (and ($IsAlloc DatatypeTypeType |rest#Z#0@0| (Tclass._module.List _module._default.ToSeq$X@@4) $Heap@@0) (= (ControlFlow 0 5) (- 0 4)))) (< (DtRank |rest#Z#0@0|) (DtRank |list#0@@4|)))))))
(let ((anon13_Then_correct  (=> (= |list#0@@4| (|#_module.List.Cons| |_mcc#0#0| |_mcc#1#0|)) (=> (and (and (and ($Is DatatypeTypeType |_mcc#0#0| (Tclass._module.Node _module._default.ToSeq$X@@4)) ($Is DatatypeTypeType |_mcc#1#0| (Tclass._module.List _module._default.ToSeq$X@@4))) (and (= |let#0#0#0| |_mcc#1#0|) ($Is DatatypeTypeType |let#0#0#0| (Tclass._module.List _module._default.ToSeq$X@@4)))) (and (and (= |rest#Z#0@0| |let#0#0#0|) (= |let#1#0#0| |_mcc#0#0|)) (and ($Is DatatypeTypeType |let#1#0#0| (Tclass._module.Node _module._default.ToSeq$X@@4)) (= |n#Z#0@0| |let#1#0#0|)))) (and (=> (= (ControlFlow 0 11) 5) anon14_Then_correct) (=> (= (ControlFlow 0 11) 10) anon14_Else_correct))))))
(let ((anon13_Else_correct true))
(let ((anon12_Else_correct  (=> (or (not (= |list#0@@4| |#_module.List.Nil|)) (not true)) (and (=> (= (ControlFlow 0 12) 11) anon13_Then_correct) (=> (= (ControlFlow 0 12) 3) anon13_Else_correct)))))
(let ((anon12_Then_correct true))
(let ((anon11_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (and (and (=> (= (ControlFlow 0 13) 1) anon11_Then_correct) (=> (= (ControlFlow 0 13) 2) anon12_Then_correct)) (=> (= (ControlFlow 0 13) 12) anon12_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) ($Is DatatypeTypeType |list#0@@4| (Tclass._module.List _module._default.ToSeq$X@@4))) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 14) 13))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
