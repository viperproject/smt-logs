(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@20 (Int) Bool)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@38 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@42 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T) T@T)
(declare-fun $generated@@45 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@97 (T@U) T@U)
(declare-fun $generated@@98 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@22 Int) ) (!  (=> (or ($generated@@20 $generated@@22) (and (< 0 $generated@@18) (and (<= ($generated@@21 0) $generated@@22) (< $generated@@22 10)))) (= ($generated@@19 $generated@@22) (ite (> $generated@@22 5) (+ $generated@@22 2) (+ $generated@@22 1))))
 :pattern ( ($generated@@19 $generated@@22))
))))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@24 Int) ) (!  (=> (or ($generated@@20 ($generated@@21 $generated@@24)) (and (< 0 $generated@@18) (and (<= ($generated@@21 0) $generated@@24) ($generated@@7 ($generated@@23 $generated@@3 ($generated@@6 (< $generated@@24 10))))))) (= ($generated@@19 ($generated@@21 $generated@@24)) (ite (> $generated@@24 5) (+ $generated@@24 2) (+ $generated@@24 1))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@21 $generated@@24)))
))))
(assert (forall (($generated@@25 Int) ) (! (= ($generated@@21 $generated@@25) $generated@@25)
 :pattern ( ($generated@@21 $generated@@25))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@23 $generated@@27 $generated@@26) $generated@@26)
 :pattern ( ($generated@@23 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 ($generated@@28 $generated@@31 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@28 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@32 $generated@@4 $generated@@34 $generated@@33) (<= ($generated@@21 0) ($generated@@9 $generated@@34)))
 :pattern ( ($generated@@32 $generated@@4 $generated@@34 $generated@@33))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@35 Int) ) (!  (=> (or ($generated@@20 $generated@@35) (and (< 0 $generated@@18) (and (<= ($generated@@21 0) $generated@@35) (< $generated@@35 10)))) (<= ($generated@@21 0) ($generated@@19 $generated@@35)))
 :pattern ( ($generated@@19 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@28 $generated@@37 ($generated@@29 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@29 $generated@@37 $generated@@36))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@38 $generated@@49 $generated@@50 $generated@@51 ($generated@@45 $generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@55 $generated@@52) $generated@@54 $generated@@55) $generated@@52)
 :weight 0
)) (and (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (or (= $generated@@61 $generated@@63) (= ($generated@@38 $generated@@56 $generated@@57 $generated@@58 ($generated@@45 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@59) $generated@@63 $generated@@64) ($generated@@38 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@63 $generated@@64)))
 :weight 0
)) (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@71 $generated@@73) (= ($generated@@38 $generated@@65 $generated@@66 $generated@@67 ($generated@@45 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@72 $generated@@73) ($generated@@38 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@72 $generated@@73)))
 :weight 0
)))) (= ($generated@@2 $generated@@39) 3)) (= ($generated@@2 $generated@@40) 4)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@42 $generated@@74 $generated@@75 ($generated@@46 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@76) $generated@@78) $generated@@76)
 :weight 0
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@83 $generated@@84) (= ($generated@@42 $generated@@79 $generated@@80 ($generated@@46 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@81) $generated@@84) ($generated@@42 $generated@@79 $generated@@80 $generated@@82 $generated@@84)))
 :weight 0
))) (= ($generated@@2 $generated@@43) 5)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ) (= ($generated@@2 ($generated@@44 $generated@@85 $generated@@86)) 6))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@87 $generated@@88)) $generated@@87)
 :pattern ( ($generated@@44 $generated@@87 $generated@@88))
))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@48 ($generated@@44 $generated@@89 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@44 $generated@@89 $generated@@90))
))))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 Bool) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@7 ($generated@@38 $generated@@39 $generated@@40 $generated@@3 ($generated@@41 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))  (=> (and (or (not (= $generated@@95 $generated@@91)) (not true)) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@42 $generated@@40 $generated@@43 ($generated@@42 $generated@@39 ($generated@@44 $generated@@40 $generated@@43) $generated@@92 $generated@@95) $generated@@93)))) $generated@@94))
 :pattern ( ($generated@@38 $generated@@39 $generated@@40 $generated@@3 ($generated@@41 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))
)))
(assert (= ($generated@@97 $generated@@33) $generated@@0))
(assert (= ($generated@@98 $generated@@33) $generated@@1))
(assert (forall (($generated@@99 Int) ) (! (= ($generated@@29 $generated@@4 ($generated@@8 ($generated@@21 $generated@@99))) ($generated@@23 $generated@@43 ($generated@@29 $generated@@4 ($generated@@8 $generated@@99))))
 :pattern ( ($generated@@29 $generated@@4 ($generated@@8 ($generated@@21 $generated@@99))))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@T) ) (! (= ($generated@@29 $generated@@101 ($generated@@23 $generated@@101 $generated@@100)) ($generated@@23 $generated@@43 ($generated@@29 $generated@@101 $generated@@100)))
 :pattern ( ($generated@@29 $generated@@101 ($generated@@23 $generated@@101 $generated@@100)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () T@U)
(declare-fun $generated@@104 () T@U)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 (T@U) Bool)
(declare-fun $generated@@107 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@108  (=> (and (>= 5 $generated@@102) (= (ControlFlow 0 5) (- 0 4))) ($generated@@32 $generated@@4 ($generated@@8 (+ $generated@@102 1)) $generated@@33))))
(let (($generated@@109  (=> (and (> $generated@@102 5) (= (ControlFlow 0 3) (- 0 2))) ($generated@@32 $generated@@4 ($generated@@8 (+ $generated@@102 2)) $generated@@33))))
(let (($generated@@110 true))
(let (($generated@@111  (=> (and (= $generated@@103 ($generated@@41 $generated@@104 $generated@@105 $generated false)) (< $generated@@102 10)) (and (and (=> (= (ControlFlow 0 6) 1) $generated@@110) (=> (= (ControlFlow 0 6) 3) $generated@@109)) (=> (= (ControlFlow 0 6) 5) $generated@@108)))))
(let (($generated@@112  (=> (and (and (and ($generated@@106 $generated@@105) ($generated@@107 $generated@@105)) (<= ($generated@@21 0) $generated@@102)) (and (= 0 $generated@@18) (= (ControlFlow 0 7) 6))) $generated@@111)))
$generated@@112))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
