(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () Int)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@36 (Int) Int)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@63 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@T T@T) T@T)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@118 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@23 $generated@@24) $generated@@3))
(assert (= ($generated@@23 $generated@@25) $generated@@4))
(assert (= ($generated@@6 $generated@@30) 3))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@33 T@U) ) (!  (=> (or ($generated@@28 $generated@@33) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@33 $generated@@31) (not ($generated@@32 $generated@@33 $generated@@24))))) (> ($generated@@27 $generated@@33) 1))
 :pattern ( ($generated@@27 $generated@@33))
))))
(assert ($generated@@29 $generated@@30 $generated@@24 $generated@@31))
(assert ($generated@@29 $generated@@30 $generated@@25 $generated@@31))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@32 $generated@@34 $generated@@35) (= $generated@@34 $generated@@35))
 :pattern ( ($generated@@32 $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 Int) ) (! (= ($generated@@36 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 $generated@@39) $generated@@39)
 :pattern ( ($generated@@38 $generated@@40 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@41 $generated@@42) (= ($generated@@23 $generated@@42) $generated@@3))
 :pattern ( ($generated@@41 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@43 $generated@@44) (= ($generated@@23 $generated@@44) $generated@@4))
 :pattern ( ($generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 ($generated@@45 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@45 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@41 $generated@@49) (= $generated@@49 $generated@@24))
 :pattern ( ($generated@@41 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@43 $generated@@50) (= $generated@@50 $generated@@25))
 :pattern ( ($generated@@43 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@51 $generated@@31) (or ($generated@@41 $generated@@51) ($generated@@43 $generated@@51)))
 :pattern ( ($generated@@43 $generated@@51) ($generated@@29 $generated@@30 $generated@@51 $generated@@31))
 :pattern ( ($generated@@41 $generated@@51) ($generated@@29 $generated@@30 $generated@@51 $generated@@31))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> (and ($generated@@41 $generated@@52) ($generated@@41 $generated@@53)) ($generated@@32 $generated@@52 $generated@@53))
 :pattern ( ($generated@@32 $generated@@52 $generated@@53) ($generated@@41 $generated@@52))
 :pattern ( ($generated@@32 $generated@@52 $generated@@53) ($generated@@41 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (and ($generated@@43 $generated@@54) ($generated@@43 $generated@@55)) ($generated@@32 $generated@@54 $generated@@55))
 :pattern ( ($generated@@32 $generated@@54 $generated@@55) ($generated@@43 $generated@@54))
 :pattern ( ($generated@@32 $generated@@54 $generated@@55) ($generated@@43 $generated@@55))
)))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@56 T@U) ) (!  (=> (or ($generated@@28 $generated@@56) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@56 $generated@@31) (not ($generated@@32 $generated@@56 $generated@@24))))) (= ($generated@@27 $generated@@56) (ite ($generated@@41 $generated@@56) 1 2)))
 :pattern ( ($generated@@27 $generated@@56))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@45 $generated@@58 ($generated@@46 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@46 $generated@@58 $generated@@57))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@59 $generated@@70 $generated@@71 $generated@@72 ($generated@@66 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@75 $generated@@76) $generated@@73)
 :weight 0
)) (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@59 $generated@@77 $generated@@78 $generated@@79 ($generated@@66 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@84 $generated@@85) ($generated@@59 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@84 $generated@@85)))
 :weight 0
)) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@59 $generated@@86 $generated@@87 $generated@@88 ($generated@@66 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@59 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)))) (= ($generated@@6 $generated@@60) 4)) (= ($generated@@6 $generated@@61) 5)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@63 $generated@@95 $generated@@96 ($generated@@67 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@99) $generated@@97)
 :weight 0
))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@104 $generated@@105) (= ($generated@@63 $generated@@100 $generated@@101 ($generated@@67 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@102) $generated@@105) ($generated@@63 $generated@@100 $generated@@101 $generated@@103 $generated@@105)))
 :weight 0
))) (= ($generated@@6 $generated@@64) 6)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (= ($generated@@6 ($generated@@65 $generated@@106 $generated@@107)) 7))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@68 ($generated@@65 $generated@@108 $generated@@109)) $generated@@108)
 :pattern ( ($generated@@65 $generated@@108 $generated@@109))
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@69 ($generated@@65 $generated@@110 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@65 $generated@@110 $generated@@111))
))))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 Bool) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@11 ($generated@@59 $generated@@60 $generated@@61 $generated@@7 ($generated@@62 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))  (=> (and (or (not (= $generated@@116 $generated@@112)) (not true)) ($generated@@11 ($generated@@45 $generated@@7 ($generated@@63 $generated@@61 $generated@@64 ($generated@@63 $generated@@60 ($generated@@65 $generated@@61 $generated@@64) $generated@@113 $generated@@116) $generated@@114)))) $generated@@115))
 :pattern ( ($generated@@59 $generated@@60 $generated@@61 $generated@@7 ($generated@@62 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))
)))
(assert (= ($generated@@22 $generated@@31) $generated@@2))
(assert (= ($generated@@118 $generated@@31) $generated@@5))
(assert (= $generated@@24 ($generated@@38 $generated@@30 $generated@@24)))
(assert (= $generated@@25 ($generated@@38 $generated@@30 $generated@@25)))
(assert  (=> (<= 1 $generated@@26) (forall (($generated@@119 T@U) ) (!  (=> (or ($generated@@28 ($generated@@38 $generated@@30 $generated@@119)) (and (< 1 $generated@@26) (and ($generated@@29 $generated@@30 $generated@@119 $generated@@31) (not ($generated@@32 $generated@@119 $generated@@24))))) (= ($generated@@27 ($generated@@38 $generated@@30 $generated@@119)) (ite ($generated@@41 ($generated@@38 $generated@@30 $generated@@119)) 1 2)))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@38 $generated@@30 $generated@@119)))
))))
(assert (forall (($generated@@120 Int) ) (! (= ($generated@@46 $generated@@8 ($generated@@12 ($generated@@36 $generated@@120))) ($generated@@38 $generated@@64 ($generated@@46 $generated@@8 ($generated@@12 $generated@@120))))
 :pattern ( ($generated@@46 $generated@@8 ($generated@@12 ($generated@@36 $generated@@120))))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@T) ) (! (= ($generated@@46 $generated@@122 ($generated@@38 $generated@@122 $generated@@121)) ($generated@@38 $generated@@64 ($generated@@46 $generated@@122 $generated@@121)))
 :pattern ( ($generated@@46 $generated@@122 ($generated@@38 $generated@@122 $generated@@121)))
)))
(assert (forall (($generated@@123 T@U) ) (! ($generated@@29 $generated@@8 $generated@@123 $generated)
 :pattern ( ($generated@@29 $generated@@8 $generated@@123 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@130 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@131  (=> (= (ControlFlow 0 4) (- 0 3)) (> $generated@@124 1))))
(let (($generated@@132  (=> (= $generated@@125 $generated@@25) (=> (and (and (= ($generated@@27 $generated@@125) ($generated@@36 2)) ($generated@@29 $generated@@8 ($generated@@12 ($generated@@27 $generated@@125)) $generated)) (and (= ($generated@@27 $generated@@125) $generated@@124) (= (ControlFlow 0 6) 4))) $generated@@131))))
(let (($generated@@133  (=> (= $generated@@125 $generated@@24) (=> (and (and (= ($generated@@27 $generated@@125) ($generated@@36 1)) ($generated@@29 $generated@@8 ($generated@@12 ($generated@@27 $generated@@125)) $generated)) (and (= ($generated@@27 $generated@@125) $generated@@124) (= (ControlFlow 0 5) 4))) $generated@@131))))
(let (($generated@@134 true))
(let (($generated@@135  (=> (or (not (= $generated@@125 $generated@@24)) (not true)) (and (=> (= (ControlFlow 0 7) 6) $generated@@132) (=> (= (ControlFlow 0 7) 2) $generated@@134)))))
(let (($generated@@136 true))
(let (($generated@@137  (=> (and (= $generated@@126 ($generated@@62 $generated@@127 $generated@@128 $generated@@1 false)) (not ($generated@@32 $generated@@125 $generated@@24))) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@136) (=> (= (ControlFlow 0 8) 5) $generated@@133)) (=> (= (ControlFlow 0 8) 7) $generated@@135)))))
(let (($generated@@138  (=> (and (and (and ($generated@@129 $generated@@128) ($generated@@130 $generated@@128)) ($generated@@29 $generated@@30 $generated@@125 $generated@@31)) (and (= 1 $generated@@26) (= (ControlFlow 0 9) 8))) $generated@@137)))
$generated@@138)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
