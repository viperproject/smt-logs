// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination-@PROC@.smt2 /normalizeNames:0 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

const unique class._module.__default: ClassName;

procedure {:verboseName "BumpVersion (well-formedness)"} CheckWellFormed$$_module.__default.BumpVersion(last#0: int) returns (res#0: int);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "BumpVersion (call)"} Call$$_module.__default.BumpVersion(last#0: int) returns (res#0: int);
  modifies $Heap;
  // user-defined postconditions
  free ensures true;
  ensures {:id "id1"} res#0 > last#0;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



function Tclass._module.Universe() : Ty
uses {
// Tclass._module.Universe Tag
axiom Tag(Tclass._module.Universe()) == Tagclass._module.Universe
   && TagFamily(Tclass._module.Universe()) == tytagFamily$Universe;
}

const unique Tagclass._module.Universe: TyTag;

// Box/unbox axiom for Tclass._module.Universe
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Universe()) } 
  $IsBox(bx, Tclass._module.Universe())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Universe()));

procedure {:verboseName "TypingAxiom1 (well-formedness)"} CheckWellFormed$$_module.__default.TypingAxiom1(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



function Tclass._module.NonOwnedObject() : Ty
uses {
// Tclass._module.NonOwnedObject Tag
axiom Tag(Tclass._module.NonOwnedObject()) == Tagclass._module.NonOwnedObject
   && TagFamily(Tclass._module.NonOwnedObject()) == tytagFamily$NonOwnedObject;
}

const unique Tagclass._module.NonOwnedObject: TyTag;

// Box/unbox axiom for Tclass._module.NonOwnedObject
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.NonOwnedObject()) } 
  $IsBox(bx, Tclass._module.NonOwnedObject())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.NonOwnedObject()));

function Tclass._module.OwnedObject() : Ty
uses {
// Tclass._module.OwnedObject Tag
axiom Tag(Tclass._module.OwnedObject()) == Tagclass._module.OwnedObject
   && TagFamily(Tclass._module.OwnedObject()) == tytagFamily$OwnedObject;
}

const unique Tagclass._module.OwnedObject: TyTag;

// Box/unbox axiom for Tclass._module.OwnedObject
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedObject()) } 
  $IsBox(bx, Tclass._module.OwnedObject())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.OwnedObject()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "TypingAxiom1 (well-formedness)"} CheckWellFormed$$_module.__default.TypingAxiom1(universe#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var a#0: ref;
  var b#0: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;


    // AddMethodImpl: TypingAxiom1, CheckWellFormed$$_module.__default.TypingAxiom1
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc a#0;
    havoc b#0;
    assume $Is(a#0, Tclass._module.NonOwnedObject())
       && $IsAlloc(a#0, Tclass._module.NonOwnedObject(), $Heap)
       && 
      $Is(b#0, Tclass._module.OwnedObject())
       && $IsAlloc(b#0, Tclass._module.OwnedObject(), $Heap);
    if (*)
    {
        assert {:id "id2"} universe#0 != null;
        assume {:id "id3"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(a#0));
        assert {:id "id4"} universe#0 != null;
        assume {:id "id5"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#0));
        newtype$check#0 := a#0;
        newtype$check#1 := a#0;
        assume {:id "id6"} a#0 != b#0;
    }
    else
    {
        assume {:id "id7"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(a#0))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#0))
           ==> a#0 != b#0;
    }

    assume {:id "id8"} (forall a#1: ref, b#1: ref :: 
      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(a#1)) } 
      $Is(a#1, Tclass._module.NonOwnedObject())
           && $Is(b#1, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(a#1))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#1))
         ==> a#1 != b#1);
}



procedure {:verboseName "TypingAxiom1 (call)"} Call$$_module.__default.TypingAxiom1(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures true;
  ensures {:id "id9"} (forall a#1: ref, b#1: ref :: 
    { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(a#1)) } 
    $Is(a#1, Tclass._module.NonOwnedObject())
         && $Is(b#1, Tclass._module.OwnedObject())
         && 
        Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#1))
       ==> a#1 != b#1);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "TypingAxiom2 (well-formedness)"} CheckWellFormed$$_module.__default.TypingAxiom2(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    a#0: ref
       where $Is(a#0, Tclass._module.NonOwnedObject())
         && $IsAlloc(a#0, Tclass._module.NonOwnedObject(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "TypingAxiom2 (well-formedness)"} CheckWellFormed$$_module.__default.TypingAxiom2(universe#0: ref, a#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var b#0: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;


    // AddMethodImpl: TypingAxiom2, CheckWellFormed$$_module.__default.TypingAxiom2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc b#0;
    assume $Is(b#0, Tclass._module.OwnedObject())
       && $IsAlloc(b#0, Tclass._module.OwnedObject(), $Heap);
    if (*)
    {
        assert {:id "id10"} universe#0 != null;
        assume {:id "id11"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#0));
        newtype$check#0 := a#0;
        newtype$check#1 := a#0;
        assume {:id "id12"} a#0 != b#0;
    }
    else
    {
        assume {:id "id13"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#0))
           ==> a#0 != b#0;
    }

    assume {:id "id14"} (forall b#1: ref :: 
      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#1)) } 
      $Is(b#1, Tclass._module.OwnedObject())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#1))
         ==> a#0 != b#1);
}



procedure {:verboseName "TypingAxiom2 (call)"} Call$$_module.__default.TypingAxiom2(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    a#0: ref
       where $Is(a#0, Tclass._module.NonOwnedObject())
         && $IsAlloc(a#0, Tclass._module.NonOwnedObject(), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures true;
  ensures {:id "id15"} (forall b#1: ref :: 
    { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#1)) } 
    $Is(b#1, Tclass._module.OwnedObject())
         && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(b#1))
       ==> a#0 != b#1);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "TypingAxiom3 (well-formedness)"} CheckWellFormed$$_module.__default.TypingAxiom3(a#0: ref
       where $Is(a#0, Tclass._module.NonOwnedObject())
         && $IsAlloc(a#0, Tclass._module.NonOwnedObject(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "TypingAxiom3 (call)"} Call$$_module.__default.TypingAxiom3(a#0: ref
       where $Is(a#0, Tclass._module.NonOwnedObject())
         && $IsAlloc(a#0, Tclass._module.NonOwnedObject(), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures true;
  ensures {:id "id17"} !$Is(a#0, Tclass._module.OwnedObject());
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "TypingAxiom4 (well-formedness)"} CheckWellFormed$$_module.__default.TypingAxiom4(b#0: ref
       where $Is(b#0, Tclass._module.OwnedObject())
         && $IsAlloc(b#0, Tclass._module.OwnedObject(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "TypingAxiom4 (call)"} Call$$_module.__default.TypingAxiom4(b#0: ref
       where $Is(b#0, Tclass._module.OwnedObject())
         && $IsAlloc(b#0, Tclass._module.OwnedObject(), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures true;
  ensures {:id "id19"} !$Is(b#0, Tclass._module.NonOwnedObject());
  // frame condition
  free ensures old($Heap) == $Heap;



const unique class._module.Universe?: ClassName;

function Tclass._module.Universe?() : Ty
uses {
// Tclass._module.Universe? Tag
axiom Tag(Tclass._module.Universe?()) == Tagclass._module.Universe?
   && TagFamily(Tclass._module.Universe?()) == tytagFamily$Universe;
}

const unique Tagclass._module.Universe?: TyTag;

// Box/unbox axiom for Tclass._module.Universe?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Universe?()) } 
  $IsBox(bx, Tclass._module.Universe?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Universe?()));

// $Is axiom for trait Universe
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Universe?()) } 
  $Is($o, Tclass._module.Universe?())
     <==> $o == null || implements$_module.Universe(dtype($o)));

// $IsAlloc axiom for trait Universe
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Universe?(), $h) } 
  $IsAlloc($o, Tclass._module.Universe?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.Universe(ty: Ty) : bool;

const _module.Universe.content: Field
uses {
axiom FDim(_module.Universe.content) == 0
   && FieldOfDecl(class._module.Universe?, field$content) == _module.Universe.content
   && $IsGhostField(_module.Universe.content);
}

function Tclass._module.Object() : Ty
uses {
// Tclass._module.Object Tag
axiom Tag(Tclass._module.Object()) == Tagclass._module.Object
   && TagFamily(Tclass._module.Object()) == tytagFamily$Object;
}

const unique Tagclass._module.Object: TyTag;

// Box/unbox axiom for Tclass._module.Object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Object()) } 
  $IsBox(bx, Tclass._module.Object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Object()));

// Universe.content: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Universe.content)): Set } 
  $IsGoodHeap($h) && $o != null && $Is($o, Tclass._module.Universe?())
     ==> $Is($Unbox(read($h, $o, _module.Universe.content)): Set, 
      TSet(Tclass._module.Object())));

// Universe.content: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Universe.content)): Set } 
  $IsGoodHeap($h)
       && 
      $o != null
       && $Is($o, Tclass._module.Universe?())
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Universe.content)): Set, 
      TSet(Tclass._module.Object()), 
      $h));

// function declaration for _module.Universe.globalBaseInv
function _module.Universe.globalBaseInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalBaseInv (revealed)
axiom {:id "id20"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Universe.globalBaseInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalBaseInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap))
       ==> _module.Universe.globalBaseInv($Heap, this)
         == (forall o#0: ref :: 
          { _module.Object.universe(o#0) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
          $Is(o#0, Tclass._module.Object())
               && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
             ==> _module.Object.universe(o#0) == this && o#0 != this));
}

function _module.Universe.globalBaseInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalBaseInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalBaseInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Universe())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null
           && ($o == this
             || Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o)))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalBaseInv($h0, this)
       == _module.Universe.globalBaseInv($h1, this));

function _module.Universe.globalBaseInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Universe.globalBaseInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Universe.globalBaseInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
     ==> _module.Universe.globalBaseInv#requires($Heap, this) == true);

function _module.Object.universe(this: ref) : ref
uses {
// Object.universe: Type axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $o: ref :: 
    { _module.Object.universe($o) } 
    $o != null && $Is($o, Tclass._module.Object?())
       ==> $Is(_module.Object.universe($o), Tclass._module.Universe()));
// Object.universe: Allocation axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $h: Heap, $o: ref :: 
    { _module.Object.universe($o), $Unbox(read($h, $o, alloc)): bool } 
    $IsGoodHeap($h)
         && 
        $o != null
         && $Is($o, Tclass._module.Object?())
         && $Unbox(read($h, $o, alloc)): bool
       ==> $IsAlloc(_module.Object.universe($o), Tclass._module.Universe(), $h));
}

procedure {:verboseName "Universe.globalBaseInv (well-formedness)"} CheckWellformed$$_module.Universe.globalBaseInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalBaseInv (well-formedness)"} CheckWellformed$$_module.Universe.globalBaseInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var o#1: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
    assert {:id "id21"} b$reqreads#0;
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc o#1;
        if ($Is(o#1, Tclass._module.Object())
           && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
            if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
            {
                assert {:id "id22"} o#1 != null;
                if (_module.Object.universe(o#1) == this)
                {
                    newtype$check#0 := o#1;
                    newtype$check#1 := o#1;
                }
            }
        }

        // End Comprehension WF check
        assume {:id "id23"} _module.Universe.globalBaseInv($Heap, this)
           == (forall o#2: ref :: 
            { _module.Object.universe(o#2) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
               ==> _module.Object.universe(o#2) == this && o#2 != this);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalBaseInv($Heap, this), TBool);
        assert {:id "id24"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.globalInv
function _module.Universe.globalInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalInv (revealed)
axiom {:id "id25"} 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Universe.globalInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap))
       ==> _module.Universe.globalBaseInv#canCall($Heap, this)
         && (_module.Universe.globalBaseInv($Heap, this)
           ==> (forall o#0: ref :: 
            { _module.Object.inv($Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.inv#canCall($Heap, o#0)))
         && _module.Universe.globalInv($Heap, this)
           == (_module.Universe.globalBaseInv($Heap, this)
             && (forall o#0: ref :: 
              { _module.Object.inv($Heap, o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> _module.Object.inv($Heap, o#0))));
}

function _module.Universe.globalInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalInv($h0, this) == _module.Universe.globalInv($h1, this));

function _module.Universe.globalInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Universe.globalInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Universe.globalInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
     ==> _module.Universe.globalInv#requires($Heap, this) == true);

procedure {:verboseName "Universe.globalInv (well-formedness)"} CheckWellformed$$_module.Universe.globalInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



function Tclass._module.Object?() : Ty
uses {
// Tclass._module.Object? Tag
axiom Tag(Tclass._module.Object?()) == Tagclass._module.Object?
   && TagFamily(Tclass._module.Object?()) == tytagFamily$Object;
}

const unique Tagclass._module.Object?: TyTag;

// Box/unbox axiom for Tclass._module.Object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Object?()) } 
  $IsBox(bx, Tclass._module.Object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Object?()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalInv (well-formedness)"} CheckWellformed$$_module.Universe.globalInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && ($o == this
                 || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Universe.globalBaseInv#canCall($Heap, this);
        if (_module.Universe.globalBaseInv($Heap, this))
        {
            // Begin Comprehension WF check
            havoc o#1;
            if ($Is(o#1, Tclass._module.Object())
               && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
            {
                b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    assert {:id "id26"} o#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                    b$reqreads#2 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.inv#canCall($Heap, o#1);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id27"} _module.Universe.globalInv($Heap, this)
           == (_module.Universe.globalBaseInv($Heap, this)
             && (forall o#2: ref :: 
              { _module.Object.inv($Heap, o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> _module.Object.inv($Heap, o#2)));
        assume _module.Universe.globalBaseInv#canCall($Heap, this)
           && (_module.Universe.globalBaseInv($Heap, this)
             ==> (forall o#2: ref :: 
              { _module.Object.inv($Heap, o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                 ==> 
                Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> _module.Object.inv#canCall($Heap, o#2)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalInv($Heap, this), TBool);
        assert {:id "id28"} b$reqreads#0;
        assert {:id "id29"} b$reqreads#1;
        assert {:id "id30"} b$reqreads#2;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.globalInv2
function _module.Universe.globalInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalInv2 (revealed)
axiom {:id "id31"} 8 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Universe.globalInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalInv2#canCall($prevHeap, $Heap, this)
         || (8 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap))
       ==> (Lit(true)
           ==> (forall o#0: ref :: 
            { _module.Object.inv2($prevHeap, $Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.inv2#canCall($prevHeap, $Heap, o#0)))
         && _module.Universe.globalInv2($prevHeap, $Heap, this)
           == (true
             && (forall o#0: ref :: 
              { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                   && _module.Object.inv2($prevHeap, $Heap, o#0))));
}

function _module.Universe.globalInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalInv2($prevHeap, $h0, this)
       == _module.Universe.globalInv2($prevHeap, $h1, this));

function _module.Universe.globalInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Universe.globalInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Universe.globalInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
     ==> _module.Universe.globalInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Universe.globalInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 8 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // Begin Comprehension WF check
            havoc o#1;
            if ($Is(o#1, Tclass._module.Object())
               && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
            {
                assert {:id "id32"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
                    if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                    {
                        assert {:id "id33"} o#1 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                        assert {:id "id34"} $IsAlloc(o#1, Tclass._module.Object(), old($Heap));
                        b$reqreads#1 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && $Unbox(read($Heap, $o, alloc)): bool
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.inv2#canCall(old($Heap), $Heap, o#1);
                    }
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id35"} _module.Universe.globalInv2(old($Heap), $Heap, this)
           == (true
             && (forall o#2: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
                 ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                   && _module.Object.inv2(old($Heap), $Heap, o#2)));
        assume Lit(true)
           ==> (forall o#2: ref :: 
            { _module.Object.inv2(old($Heap), $Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
               ==> _module.Object.inv2#canCall(old($Heap), $Heap, o#2));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id36"} b$reqreads#0;
        assert {:id "id37"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.legalTransition
function _module.Universe.legalTransition($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool
uses {
// definition axiom for _module.Universe.legalTransition (revealed)
axiom {:id "id38"} 10 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
    { _module.Universe.legalTransition($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Universe.legalTransition#canCall($prevHeap, $Heap, this, running#0)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
           && $Is(running#0, TSet(Tclass._module.Thread())))
       ==> _module.Universe.globalInv#canCall($prevHeap, this)
         && (_module.Universe.globalInv($prevHeap, this)
           ==> _module.Universe.globalBaseInv#canCall($Heap, this)
             && (_module.Universe.globalBaseInv($Heap, this)
               ==> 
              Set#Subset($Unbox(read($prevHeap, this, _module.Universe.content)): Set, 
                $Unbox(read($Heap, this, _module.Universe.content)): Set)
               ==> (forall o#0: ref :: 
                  { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                    { _module.Object.inv($Heap, o#0) } 
                    { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                  $Is(o#0, Tclass._module.Object())
                     ==> 
                    Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                     ==> (!(forall $o: ref, $f: Field :: 
                          { read($Heap, $o, $f) } 
                          $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                         ==> _module.Object.inv#canCall($Heap, o#0))
                       && ((forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                           || _module.Object.inv($Heap, o#0)
                         ==> 
                        !(forall $o: ref, $f: Field :: 
                          { read($Heap, $o, $f) } 
                          $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                         ==> _module.Object.inv2#canCall($prevHeap, $Heap, o#0)))
                 && ((forall o#0: ref :: 
                    { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                      { _module.Object.inv($Heap, o#0) } 
                      { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                    $Is(o#0, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                       ==> ((forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                           || _module.Object.inv($Heap, o#0))
                         && ((forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                           || _module.Object.inv2($prevHeap, $Heap, o#0)))
                   ==> (forall o#1: ref :: 
                    { _module.Object.inv($Heap, o#1) } 
                      { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                      { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                    $Is(o#1, Tclass._module.Object())
                       ==> 
                      Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
                         && !Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1))
                       ==> _module.Object.inv#canCall($Heap, o#1)))))
         && _module.Universe.legalTransition($prevHeap, $Heap, this, running#0)
           == (
            _module.Universe.globalInv($prevHeap, this)
             && _module.Universe.globalBaseInv($Heap, this)
             && Set#Subset($Unbox(read($prevHeap, this, _module.Universe.content)): Set, 
              $Unbox(read($Heap, this, _module.Universe.content)): Set)
             && (forall o#0: ref :: 
              { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                { _module.Object.inv($Heap, o#0) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                     || _module.Object.inv($Heap, o#0))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                     || _module.Object.inv2($prevHeap, $Heap, o#0)))
             && (forall o#1: ref :: 
              { _module.Object.inv($Heap, o#1) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
              $Is(o#1, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
                   && !Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1))
                 ==> _module.Object.inv($Heap, o#1))
             && (forall o#2: ref :: 
              { $Unbox(read($Heap, o#2, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read($prevHeap, o#2, _module.OwnedObject.nonvolatileVersion)): int } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> $Unbox(read($prevHeap, o#2, _module.OwnedObject.nonvolatileVersion)): int
                   <= $Unbox(read($Heap, o#2, _module.OwnedObject.nonvolatileVersion)): int)
             && (forall t#0: ref :: 
              { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(t#0)) } 
                { _module.Object.universe(t#0) } 
                { Set#IsMember(running#0, $Box(t#0)) } 
              $Is(t#0, Tclass._module.Thread()) && Set#IsMember(running#0, $Box(t#0))
                 ==> _module.Object.universe(t#0) == this
                   && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(t#0)))
             && (forall o#3: ref :: 
              { $Unbox(read($Heap, o#3, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read($prevHeap, o#3, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read($prevHeap, o#3, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#3)) } 
              $Is(o#3, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#3))
                   && $Is($Unbox(read($prevHeap, o#3, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read($prevHeap, o#3, _module.OwnedObject.owner))
                 ==> $Unbox(read($prevHeap, o#3, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#3, _module.OwnedObject.nonvolatileVersion)): int)));
}

function _module.Universe.legalTransition#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool;

function Tclass._module.Thread() : Ty
uses {
// Tclass._module.Thread Tag
axiom Tag(Tclass._module.Thread()) == Tagclass._module.Thread
   && TagFamily(Tclass._module.Thread()) == tytagFamily$Thread;
}

const unique Tagclass._module.Thread: TyTag;

// Box/unbox axiom for Tclass._module.Thread
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Thread()) } 
  $IsBox(bx, Tclass._module.Thread())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Thread()));

// frame axiom for _module.Universe.legalTransition
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: Set :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.legalTransition($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && (_module.Universe.legalTransition#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, TSet(Tclass._module.Thread()))
           && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.legalTransition($prevHeap, $h0, this, running#0)
       == _module.Universe.legalTransition($prevHeap, $h1, this, running#0));

function _module.Universe.legalTransition#requires(Heap, Heap, ref, Set) : bool;

// #requires axiom for _module.Universe.legalTransition
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
  { _module.Universe.legalTransition#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
       && $Is(running#0, TSet(Tclass._module.Thread()))
     ==> _module.Universe.legalTransition#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, TSet(Tclass._module.Thread()), $prevHeap));

procedure {:verboseName "Universe.legalTransition (well-formedness)"} CheckWellformed$$_module.Universe.legalTransition(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.legalTransition (well-formedness)"} CheckWellformed$$_module.Universe.legalTransition(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#4: ref;
  var o#5: ref;
  var o#7: ref;
  var t#1: ref;
  var o#10: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id39"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume _module.Universe.globalInv#canCall(old($Heap), this);
        if (_module.Universe.globalInv(old($Heap), this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == this
                     || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalBaseInv#canCall($Heap, this);
        }

        if (_module.Universe.globalInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this))
        {
            assert {:id "id40"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
        }

        if (_module.Universe.globalInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set))
        {
            // Begin Comprehension WF check
            havoc o#4;
            if ($Is(o#4, Tclass._module.Object())
               && $IsAlloc(o#4, Tclass._module.Object(), $Heap))
            {
                assert {:id "id41"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)))
                {
                    assert {:id "id42"} $IsAlloc(o#4, Tclass._module.Object(), old($Heap));
                    b$reqreads#2 := (forall $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == o#4
                         ==> $_ReadsFrame[$o, $f]);
                    if (!(forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
                    {
                        assert {:id "id43"} o#4 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#4), Tclass._module.Object?(), $Heap);
                        b$reqreads#3 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && $Unbox(read($Heap, $o, alloc)): bool
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.inv#canCall($Heap, o#4);
                        if (_module.Object.inv($Heap, o#4))
                        {
                            assert {:id "id44"} o#4 != null;
                            // assume allocatedness for receiver argument to function
                            assume $IsAllocBox($Box(o#4), Tclass._module.Object?(), $Heap);
                            assert {:id "id45"} $IsAlloc(o#4, Tclass._module.Object(), old($Heap));
                            b$reqreads#4 := (forall $o: ref, $f: Field :: 
                              $o != null
                                   && $Unbox(read($Heap, $o, alloc)): bool
                                   && $Unbox(read($Heap, $o, alloc)): bool
                                 ==> $_ReadsFrame[$o, $f]);
                            assume _module.Object.inv2#canCall(old($Heap), $Heap, o#4);
                        }
                    }
                }
            }

            // End Comprehension WF check
        }

        if (_module.Universe.globalInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set)
           && (forall o#6: ref :: 
            { _module.Object.inv2(old($Heap), $Heap, o#6) } 
              { _module.Object.inv($Heap, o#6) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6))
               ==> ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv($Heap, o#6))
                 && ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv2(old($Heap), $Heap, o#6))))
        {
            // Begin Comprehension WF check
            havoc o#5;
            if ($Is(o#5, Tclass._module.Object())
               && $IsAlloc(o#5, Tclass._module.Object(), $Heap))
            {
                b$reqreads#5 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5)))
                {
                    assert {:id "id46"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                }

                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5))
                   && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)))
                {
                    assert {:id "id47"} o#5 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#5), Tclass._module.Object?(), $Heap);
                    b$reqreads#6 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.inv#canCall($Heap, o#5);
                }
            }

            // End Comprehension WF check
        }

        if (_module.Universe.globalInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set)
           && (forall o#6: ref :: 
            { _module.Object.inv2(old($Heap), $Heap, o#6) } 
              { _module.Object.inv($Heap, o#6) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6))
               ==> ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv($Heap, o#6))
                 && ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv2(old($Heap), $Heap, o#6)))
           && (forall o#8: ref :: 
            { _module.Object.inv($Heap, o#8) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8)) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8))
                 && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8))
               ==> _module.Object.inv($Heap, o#8)))
        {
            // Begin Comprehension WF check
            havoc o#7;
            if ($Is(o#7, Tclass._module.OwnedObject())
               && $IsAlloc(o#7, Tclass._module.OwnedObject(), $Heap))
            {
                assert {:id "id48"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#7)))
                {
                    assert {:id "id49"} o#7 != null;
                    assert {:id "id50"} $IsAlloc(o#7, Tclass._module.OwnedObject(), old($Heap));
                    assert {:id "id51"} o#7 != null;
                    b$reqreads#7 := $_ReadsFrame[o#7, _module.OwnedObject.nonvolatileVersion];
                }
            }

            // End Comprehension WF check
        }

        if (_module.Universe.globalInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set)
           && (forall o#6: ref :: 
            { _module.Object.inv2(old($Heap), $Heap, o#6) } 
              { _module.Object.inv($Heap, o#6) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6))
               ==> ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv($Heap, o#6))
                 && ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv2(old($Heap), $Heap, o#6)))
           && (forall o#8: ref :: 
            { _module.Object.inv($Heap, o#8) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8)) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8))
                 && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8))
               ==> _module.Object.inv($Heap, o#8))
           && (forall o#9: ref :: 
            { $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9))
               ==> $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int
                 <= $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int))
        {
            // Begin Comprehension WF check
            havoc t#1;
            if ($Is(t#1, Tclass._module.Thread())
               && $IsAlloc(t#1, Tclass._module.Thread(), $Heap))
            {
                if (Set#IsMember(running#0, $Box(t#1)))
                {
                    assert {:id "id52"} t#1 != null;
                    if (_module.Object.universe(t#1) == this)
                    {
                        assert {:id "id53"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                    }
                }
            }

            // End Comprehension WF check
        }

        if (_module.Universe.globalInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set)
           && (forall o#6: ref :: 
            { _module.Object.inv2(old($Heap), $Heap, o#6) } 
              { _module.Object.inv($Heap, o#6) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6))
               ==> ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv($Heap, o#6))
                 && ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv2(old($Heap), $Heap, o#6)))
           && (forall o#8: ref :: 
            { _module.Object.inv($Heap, o#8) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8)) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8))
                 && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8))
               ==> _module.Object.inv($Heap, o#8))
           && (forall o#9: ref :: 
            { $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9))
               ==> $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int
                 <= $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int)
           && (forall t#2: ref :: 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#2)) } 
              { _module.Object.universe(t#2) } 
              { Set#IsMember(running#0, $Box(t#2)) } 
            $Is(t#2, Tclass._module.Thread()) && Set#IsMember(running#0, $Box(t#2))
               ==> _module.Object.universe(t#2) == this
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#2))))
        {
            // Begin Comprehension WF check
            havoc o#10;
            if ($Is(o#10, Tclass._module.OwnedObject())
               && $IsAlloc(o#10, Tclass._module.OwnedObject(), $Heap))
            {
                assert {:id "id54"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#10)))
                {
                    assert {:id "id55"} o#10 != null;
                    assert {:id "id56"} $IsAlloc(o#10, Tclass._module.OwnedObject(), old($Heap));
                }

                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#10))
                   && $Is($Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread()))
                {
                    assert {:id "id57"} o#10 != null;
                    assert {:id "id58"} $IsAlloc(o#10, Tclass._module.OwnedObject(), old($Heap));
                    newtype$check#0 := $Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref;
                    assert {:id "id59"} $Is(newtype$check#0, Tclass._module.Thread());
                    newtype$check#1 := $Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref;
                    if (!Set#IsMember(running#0, read(old($Heap), o#10, _module.OwnedObject.owner)))
                    {
                        assert {:id "id60"} o#10 != null;
                        assert {:id "id61"} $IsAlloc(o#10, Tclass._module.OwnedObject(), old($Heap));
                        assert {:id "id62"} o#10 != null;
                        b$reqreads#8 := $_ReadsFrame[o#10, _module.OwnedObject.nonvolatileVersion];
                    }
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id63"} _module.Universe.legalTransition(old($Heap), $Heap, this, running#0)
           == (
            _module.Universe.globalInv(old($Heap), this)
             && _module.Universe.globalBaseInv($Heap, this)
             && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
              $Unbox(read($Heap, this, _module.Universe.content)): Set)
             && (forall o#6: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#6) } 
                { _module.Object.inv($Heap, o#6) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6)) } 
              $Is(o#6, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#6))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#6)))
             && (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8))
             && (forall o#9: ref :: 
              { $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9)) } 
              $Is(o#9, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9))
                 ==> $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int
                   <= $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int)
             && (forall t#2: ref :: 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#2)) } 
                { _module.Object.universe(t#2) } 
                { Set#IsMember(running#0, $Box(t#2)) } 
              $Is(t#2, Tclass._module.Thread()) && Set#IsMember(running#0, $Box(t#2))
                 ==> _module.Object.universe(t#2) == this
                   && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#2)))
             && (forall o#11: ref :: 
              { $Unbox(read($Heap, o#11, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#11, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#11, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#11)) } 
              $Is(o#11, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#11))
                   && $Is($Unbox(read(old($Heap), o#11, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#11, _module.OwnedObject.owner))
                 ==> $Unbox(read(old($Heap), o#11, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#11, _module.OwnedObject.nonvolatileVersion)): int));
        assume _module.Universe.globalInv#canCall(old($Heap), this)
           && (_module.Universe.globalInv(old($Heap), this)
             ==> _module.Universe.globalBaseInv#canCall($Heap, this)
               && (_module.Universe.globalBaseInv($Heap, this)
                 ==> 
                Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
                  $Unbox(read($Heap, this, _module.Universe.content)): Set)
                 ==> (forall o#6: ref :: 
                    { _module.Object.inv2(old($Heap), $Heap, o#6) } 
                      { _module.Object.inv($Heap, o#6) } 
                      { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                       ==> 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6))
                       ==> (!(forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                           ==> _module.Object.inv#canCall($Heap, o#6))
                         && ((forall $o: ref, $f: Field :: 
                              { read($Heap, $o, $f) } 
                              $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                             || _module.Object.inv($Heap, o#6)
                           ==> 
                          !(forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                           ==> _module.Object.inv2#canCall(old($Heap), $Heap, o#6)))
                   && ((forall o#6: ref :: 
                      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
                        { _module.Object.inv($Heap, o#6) } 
                        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6)) } 
                      $Is(o#6, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6))
                         ==> ((forall $o: ref, $f: Field :: 
                              { read($Heap, $o, $f) } 
                              $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                             || _module.Object.inv($Heap, o#6))
                           && ((forall $o: ref, $f: Field :: 
                              { read($Heap, $o, $f) } 
                              $o != null ==> $o == o#6 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                             || _module.Object.inv2(old($Heap), $Heap, o#6)))
                     ==> (forall o#8: ref :: 
                      { _module.Object.inv($Heap, o#8) } 
                        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8)) } 
                        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
                      $Is(o#8, Tclass._module.Object())
                         ==> 
                        Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8))
                           && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8))
                         ==> _module.Object.inv#canCall($Heap, o#8)))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.legalTransition(old($Heap), $Heap, this, running#0), TBool);
        assert {:id "id64"} b$reqreads#0;
        assert {:id "id65"} b$reqreads#1;
        assert {:id "id66"} b$reqreads#2;
        assert {:id "id67"} b$reqreads#3;
        assert {:id "id68"} b$reqreads#4;
        assert {:id "id69"} b$reqreads#5;
        assert {:id "id70"} b$reqreads#6;
        assert {:id "id71"} b$reqreads#7;
        assert {:id "id72"} b$reqreads#8;
        return;

        assume false;
    }
}



procedure {:verboseName "Universe.proveUnchangedNonvolatileFields (well-formedness)"} CheckWellFormed$$_module.Universe.proveUnchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



function Tclass._module.OwnedObject?() : Ty
uses {
// Tclass._module.OwnedObject? Tag
axiom Tag(Tclass._module.OwnedObject?()) == Tagclass._module.OwnedObject?
   && TagFamily(Tclass._module.OwnedObject?()) == tytagFamily$OwnedObject;
}

const unique Tagclass._module.OwnedObject?: TyTag;

// Box/unbox axiom for Tclass._module.OwnedObject?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedObject?()) } 
  $IsBox(bx, Tclass._module.OwnedObject?())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.OwnedObject?()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.proveUnchangedNonvolatileFields (well-formedness)"} CheckWellFormed$$_module.Universe.proveUnchangedNonvolatileFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var o#0: ref;


    // AddMethodImpl: proveUnchangedNonvolatileFields, CheckWellFormed$$_module.Universe.proveUnchangedNonvolatileFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    havoc o#0;
    assume $Is(o#0, Tclass._module.OwnedObject())
       && $IsAlloc(o#0, Tclass._module.OwnedObject(), $Heap);
    if (*)
    {
        assert {:id "id73"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume {:id "id74"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0));
        assert {:id "id75"} $IsAlloc(o#0, Tclass._module.OwnedObject(), old($Heap));
        assume {:id "id76"} (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
        assert {:id "id77"} o#0 != null;
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(o#0), Tclass._module.OwnedObject?(), $Heap);
        assert {:id "id78"} $IsAlloc(o#0, Tclass._module.OwnedObject(), old($Heap));
        assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, o#0);
        assume {:id "id79"} _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, o#0);
    }
    else
    {
        assume {:id "id80"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0))
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, o#0);
    }

    assume {:id "id81"} (forall o#1: ref :: 
      { _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, o#1) } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1)) } 
      $Is(o#1, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1))
           && (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#1 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
         ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, o#1));
}



procedure {:verboseName "Universe.proveUnchangedNonvolatileFields (call)"} Call$$_module.Universe.proveUnchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall o#1: ref :: 
    { _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, o#1) } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
    $Is(o#1, Tclass._module.OwnedObject())
       ==> 
      Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1))
         && (forall $o: ref, $f: Field :: 
          { read(current$Heap, $o, $f) } 
          $o != null
             ==> 
            $o == o#1
             ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
       ==> _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, o#1));
  ensures {:id "id82"} (forall o#1: ref :: 
    { _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, o#1) } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
    $Is(o#1, Tclass._module.OwnedObject())
         && 
        Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1))
         && (forall $o: ref, $f: Field :: 
          { read(current$Heap, $o, $f) } 
          $o != null
             ==> 
            $o == o#1
             ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
       ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, o#1));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.proveUnchangedNonvolatileFields (correctness)"} Impl$$_module.Universe.proveUnchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall o#1: ref :: 
    { _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, o#1) } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
    $Is(o#1, Tclass._module.OwnedObject())
       ==> 
      Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1))
         && (forall $o: ref, $f: Field :: 
          { read(current$Heap, $o, $f) } 
          $o != null
             ==> 
            $o == o#1
             ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
       ==> _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, o#1));
  ensures {:id "id83"} (forall o#1: ref :: 
    { _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, o#1) } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
    $Is(o#1, Tclass._module.OwnedObject())
         && 
        Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1))
         && (forall $o: ref, $f: Field :: 
          { read(current$Heap, $o, $f) } 
          $o != null
             ==> 
            $o == o#1
             ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
       ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, o#1));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.proveUnchangedNonvolatileFields (correctness)"} Impl$$_module.Universe.proveUnchangedNonvolatileFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var o#0_0: ref;

    // AddMethodImpl: proveUnchangedNonvolatileFields, Impl$$_module.Universe.proveUnchangedNonvolatileFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(67,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc o#0_0;
        assume $Is(o#0_0, Tclass._module.OwnedObject());
        assert {:id "id84"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0)))
        {
            assert {:id "id85"} $IsAlloc(o#0_0, Tclass._module.OwnedObject(), old($Heap));
        }

        assume true;
        assume {:id "id86"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           && (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#0_0 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
        if (*)
        {
            assert {:id "id87"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id88"} $IsAlloc(o#0_0, Tclass._module.OwnedObject(), old($Heap));
            assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, o#0_0);
            assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, o#0_0);
            assume {:id "id89"} _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, o#0_0);
            assume false;
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(68,40)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id90"} o#0_0 != null;
        assert {:id "id91"} $IsAlloc(o#0_0, Tclass._module.OwnedObject(), old($Heap));
        call {:id "id92"} Call$$_module.OwnedObject.proveUnchangedNonvolatileFields(old($Heap), $Heap, o#0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id93"} _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, o#0_0)
           ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, o#0_0)
             || $Unbox(read(old($Heap), o#0_0, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, o#0_0, _module.OwnedObject.owner)): ref;
        assert {:id "id94"} _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, o#0_0)
           ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, o#0_0)
             || _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, o#0_0);
        assume false;
    }
    else
    {
        assume (forall o#0_1: ref :: 
          { _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, o#0_1) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1)) } 
          $Is(o#0_1, Tclass._module.OwnedObject())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1))
               && (forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#0_1 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, o#0_1));
    }
}



procedure {:verboseName "Universe.lci (well-formedness)"} CheckWellFormed$$_module.Universe.lci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 14 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.lci (well-formedness)"} CheckWellFormed$$_module.Universe.lci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: lci, CheckWellFormed$$_module.Universe.lci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#0 := Set#UnionOne(Set#Empty(): Set, $Box(running#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id95"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id96"} $IsAlloc(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
      TSet(Tclass._module.Thread()), 
      old($Heap));
    assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
    assume {:id "id97"} _module.Universe.legalTransition(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, this);
    assume {:id "id98"} _module.Universe.globalInv($Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id99"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id100"} _module.Universe.globalInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.lci (call)"} Call$$_module.Universe.lci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id101"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransition(previous$Heap, 
        current$Heap, 
        this, 
        Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.globalInv#canCall(previous$Heap, this)
         ==> _module.Universe.globalInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this)
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0))
                   ==> _module.Object.universe(o#0) == this && o#0 != this)));
  requires {:id "id102"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransition(previous$Heap, 
        current$Heap, 
        this, 
        Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.globalInv#canCall(previous$Heap, this)
         ==> _module.Universe.globalInv(previous$Heap, this)
           || (forall o#1: ref :: 
            { _module.Object.inv(previous$Heap, o#1) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
            $Is(o#1, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#1))
               ==> _module.Object.inv(previous$Heap, o#1)));
  requires {:id "id103"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransition(previous$Heap, 
        current$Heap, 
        this, 
        Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
         ==> _module.Universe.globalBaseInv(current$Heap, this)
           || (forall o#2: ref :: 
            { _module.Object.universe(o#2) } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2))
               ==> _module.Object.universe(o#2) == this && o#2 != this));
  requires {:id "id104"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransition(previous$Heap, 
        current$Heap, 
        this, 
        Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
        $Unbox(read(current$Heap, this, _module.Universe.content)): Set);
  requires {:id "id105"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransition(previous$Heap, 
        current$Heap, 
        this, 
        Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#3: ref :: 
        { _module.Object.inv2(previous$Heap, current$Heap, o#3) } 
          { _module.Object.inv(current$Heap, o#3) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
        $Is(o#3, Tclass._module.Object())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3))
           ==> ((forall $o: ref, $f: Field :: 
                { read(current$Heap, $o, $f) } 
                $o != null
                   ==> 
                  $o == o#3
                   ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
               || _module.Object.inv(current$Heap, o#3))
             && ((forall $o: ref, $f: Field :: 
                { read(current$Heap, $o, $f) } 
                $o != null
                   ==> 
                  $o == o#3
                   ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
               || _module.Object.inv2(previous$Heap, current$Heap, o#3)));
  requires {:id "id106"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransition(previous$Heap, 
        current$Heap, 
        this, 
        Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#4: ref :: 
        { _module.Object.inv(current$Heap, o#4) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
        $Is(o#4, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#4))
             && !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4))
           ==> _module.Object.inv(current$Heap, o#4));
  requires {:id "id107"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransition(previous$Heap, 
        current$Heap, 
        this, 
        Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#5: ref :: 
        { $Unbox(read(current$Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
        $Is(o#5, Tclass._module.OwnedObject())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5))
           ==> $Unbox(read(previous$Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read(current$Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int);
  requires {:id "id108"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransition(previous$Heap, 
        current$Heap, 
        this, 
        Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall t#0: ref :: 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(t#0)) } 
          { _module.Object.universe(t#0) } 
          { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0)) } 
        $Is(t#0, Tclass._module.Thread())
             && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0))
           ==> _module.Object.universe(t#0) == this
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(t#0)));
  requires {:id "id109"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransition(previous$Heap, 
        current$Heap, 
        this, 
        Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#6: ref :: 
        { $Unbox(read(current$Heap, o#6, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#6, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#6, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#6)) } 
        $Is(o#6, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#6))
             && $Is($Unbox(read(previous$Heap, o#6, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            read(previous$Heap, o#6, _module.OwnedObject.owner))
           ==> $Unbox(read(previous$Heap, o#6, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, o#6, _module.OwnedObject.nonvolatileVersion)): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall(current$Heap, this)
     && (_module.Universe.globalInv(current$Heap, this)
       ==> _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this));
  free ensures {:id "id110"} _module.Universe.globalInv#canCall(current$Heap, this)
     && 
    _module.Universe.globalInv(current$Heap, this)
     && 
    _module.Universe.globalBaseInv(current$Heap, this)
     && (forall o#8: ref :: 
      { _module.Object.inv(current$Heap, o#8) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv(current$Heap, o#8));
  free ensures {:id "id111"} _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Universe.globalInv2(previous$Heap, current$Heap, this)
     && 
    true
     && (forall o#9: ref :: 
      { _module.Object.inv2(previous$Heap, current$Heap, o#9) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
      $Is(o#9, Tclass._module.Object())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9))
         ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#9))
           && _module.Object.inv2(previous$Heap, current$Heap, o#9));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.lci (correctness)"} Impl$$_module.Universe.lci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 14 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id112"} _module.Universe.legalTransition#canCall(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && 
    _module.Universe.legalTransition(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && 
    _module.Universe.globalInv(previous$Heap, this)
     && _module.Universe.globalBaseInv(current$Heap, this)
     && Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
      $Unbox(read(current$Heap, this, _module.Universe.content)): Set)
     && (forall o#13: ref :: 
      { _module.Object.inv2(previous$Heap, current$Heap, o#13) } 
        { _module.Object.inv(current$Heap, o#13) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#13)) } 
      $Is(o#13, Tclass._module.Object())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#13))
         ==> ((forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#13
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.inv(current$Heap, o#13))
           && ((forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#13
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.inv2(previous$Heap, current$Heap, o#13)))
     && (forall o#14: ref :: 
      { _module.Object.inv(current$Heap, o#14) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#14)) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#14)) } 
      $Is(o#14, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#14))
           && !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#14))
         ==> _module.Object.inv(current$Heap, o#14))
     && (forall o#15: ref :: 
      { $Unbox(read(current$Heap, o#15, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#15, _module.OwnedObject.nonvolatileVersion)): int } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#15)) } 
      $Is(o#15, Tclass._module.OwnedObject())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#15))
         ==> $Unbox(read(previous$Heap, o#15, _module.OwnedObject.nonvolatileVersion)): int
           <= $Unbox(read(current$Heap, o#15, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall t#1: ref :: 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(t#1)) } 
        { _module.Object.universe(t#1) } 
        { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1)) } 
      $Is(t#1, Tclass._module.Thread())
           && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1))
         ==> _module.Object.universe(t#1) == this
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(t#1)))
     && (forall o#16: ref :: 
      { $Unbox(read(current$Heap, o#16, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#16, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#16, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#16)) } 
      $Is(o#16, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#16))
           && $Is($Unbox(read(previous$Heap, o#16, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
          read(previous$Heap, o#16, _module.OwnedObject.owner))
         ==> $Unbox(read(previous$Heap, o#16, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, o#16, _module.OwnedObject.nonvolatileVersion)): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall(current$Heap, this)
     && (_module.Universe.globalInv(current$Heap, this)
       ==> _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this));
  ensures {:id "id113"} _module.Universe.globalInv#canCall(current$Heap, this)
     ==> _module.Universe.globalInv(current$Heap, this)
       || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
         ==> _module.Universe.globalBaseInv(current$Heap, this)
           || (forall o#17: ref :: 
            { _module.Object.universe(o#17) } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#17))
               ==> _module.Object.universe(o#17) == this && o#17 != this));
  ensures {:id "id114"} _module.Universe.globalInv#canCall(current$Heap, this)
     ==> _module.Universe.globalInv(current$Heap, this)
       || (forall o#18: ref :: 
        { _module.Object.inv(current$Heap, o#18) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#18)) } 
        $Is(o#18, Tclass._module.Object())
             && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#18))
           ==> _module.Object.inv(current$Heap, o#18));
  ensures {:id "id115"} _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.globalInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id116"} _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.globalInv2(previous$Heap, current$Heap, this)
       || (forall o#19: ref :: 
        { _module.Object.inv2(previous$Heap, current$Heap, o#19) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#19)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19)) } 
        $Is(o#19, Tclass._module.Object())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19))
           ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#19))
             && _module.Object.inv2(previous$Heap, current$Heap, o#19));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.lci (correctness)"} Impl$$_module.Universe.lci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var o#0_0: ref;
  var ##running#0_0: ref;
  var running##0_0: ref;

    // AddMethodImpl: lci, Impl$$_module.Universe.lci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(78,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc o#0_0;
        assume $Is(o#0_0, Tclass._module.Object());
        assert {:id "id117"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0)))
        {
            assert {:id "id118"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            ##running#0_0 := running#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0_0, Tclass._module.Thread(), $Heap);
            assert {:id "id119"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assert {:id "id120"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
            assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, o#0_0, running#0);
        }

        assume Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           ==> _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, o#0_0, running#0);
        assume {:id "id121"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           && _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, o#0_0, running#0);
        if (*)
        {
            assert {:id "id122"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            assert {:id "id123"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assume _module.Object.inv2#canCall(old($Heap), $Heap, o#0_0);
            if (_module.Object.inv2(old($Heap), $Heap, o#0_0))
            {
                assert {:id "id124"} {:subsumption 0} o#0_0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
                assume _module.Object.inv#canCall($Heap, o#0_0);
            }

            assume _module.Object.inv2#canCall(old($Heap), $Heap, o#0_0)
               && (_module.Object.inv2(old($Heap), $Heap, o#0_0)
                 ==> _module.Object.inv#canCall($Heap, o#0_0));
            assume {:id "id125"} _module.Object.inv2(old($Heap), $Heap, o#0_0)
               && _module.Object.inv($Heap, o#0_0);
            assume false;
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(78,124)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id126"} o#0_0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        running##0_0 := running#0;
        assert {:id "id127"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
        assert {:id "id128"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
        call {:id "id129"} Call$$_module.Object.admissibility(old($Heap), $Heap, o#0_0, running##0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id130"} _module.Object.inv2(old($Heap), $Heap, o#0_0);
        assert {:id "id131"} _module.Object.inv($Heap, o#0_0);
        assume false;
    }
    else
    {
        assume (forall o#0_1: ref :: 
          { _module.Object.inv($Heap, o#0_1) } 
            { _module.Object.inv2(old($Heap), $Heap, o#0_1) } 
            { _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, o#0_1, running#0) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1)) } 
          $Is(o#0_1, Tclass._module.Object())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1))
               && _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, o#0_1, running#0)
             ==> _module.Object.inv2(old($Heap), $Heap, o#0_1)
               && _module.Object.inv($Heap, o#0_1));
    }
}



// $Is axiom for non-null type _module.Universe
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Universe()) } 
    { $Is(c#0, Tclass._module.Universe?()) } 
  $Is(c#0, Tclass._module.Universe())
     <==> $Is(c#0, Tclass._module.Universe?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Universe
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Universe(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Universe?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Universe(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Universe?(), $h));

const unique class._module.Object?: ClassName;

// $Is axiom for trait Object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Object?()) } 
  $Is($o, Tclass._module.Object?())
     <==> $o == null || implements$_module.Object(dtype($o)));

// $IsAlloc axiom for trait Object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Object?(), $h) } 
  $IsAlloc($o, Tclass._module.Object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.Object(ty: Ty) : bool;

// function declaration for _module.Object.baseInv
function _module.Object.baseInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.baseInv (revealed)
axiom {:id "id132"} 3 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.baseInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.baseInv#canCall($Heap, this)
         || (3 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this)))
         && _module.Object.baseInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))));
}

function _module.Object.baseInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.baseInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.baseInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.baseInv($h0, this) == _module.Object.baseInv($h1, this));

function _module.Object.baseInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.baseInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.baseInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.baseInv#requires($Heap, this) == true);

procedure {:verboseName "Object.baseInv (well-formedness)"} CheckWellformed$$_module.Object.baseInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.baseInv (well-formedness)"} CheckWellformed$$_module.Object.baseInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id133"} _module.Object.universe(this) != null;
        b$reqreads#0 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this)))
        {
            assert {:id "id134"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == _module.Object.universe(this)
                     || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box($o)))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this));
        }

        assume {:id "id135"} _module.Object.baseInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Universe.globalBaseInv($Heap, _module.Object.universe(this)));
        assume Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.baseInv($Heap, this), TBool);
        assert {:id "id136"} b$reqreads#0;
        assert {:id "id137"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "Object.join (well-formedness)"} CheckWellFormed$$_module.Object.join(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.join (well-formedness)"} CheckWellFormed$$_module.Object.join(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var $unchanged#x0: ref;


    // AddMethodImpl: join, CheckWellFormed$$_module.Object.join
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this));
    assert {:id "id138"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this));
    assume {:id "id139"} _module.Universe.globalBaseInv($Heap, _module.Object.universe(this));
    newtype$check#0 := this;
    newtype$check#1 := this;
    assume {:id "id140"} this != _module.Object.universe(this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == _module.Object.universe(this));
    assume $HeapSuccGhost(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.baseInv#canCall($Heap, this);
    assume {:id "id141"} _module.Object.baseInv($Heap, this);
    assert {:id "id142"} _module.Object.universe(this) != null;
    assert {:id "id143"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id144"} _module.Object.universe(this) != null;
    assert {:id "id145"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume {:id "id146"} Set#Equal($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
    assert {:id "id147"} _module.Object.universe(this) != null;
    havoc $unchanged#x0;
    assert {:id "id148"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box($unchanged#x0))
       ==> $IsAlloc($unchanged#x0, Tclass._module.Object(), old($Heap));
    assume {:id "id149"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null
         ==> 
        Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box($o))
         ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
}



procedure {:verboseName "Object.join (call)"} Call$$_module.Object.join(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  // user-defined preconditions
  requires {:id "id150"} _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
     ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
       || (forall o#0: ref :: 
        { _module.Object.universe(o#0) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#0)) } 
        $Is(o#0, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#0))
           ==> _module.Object.universe(o#0) == _module.Object.universe(this)
             && o#0 != _module.Object.universe(this));
  requires {:id "id151"} this != _module.Object.universe(this);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.baseInv#canCall($Heap, this);
  free ensures {:id "id152"} _module.Object.baseInv#canCall($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalBaseInv($Heap, _module.Object.universe(this));
  ensures {:id "id153"} Set#Equal($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  free ensures true;
  ensures {:id "id154"} (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null
       ==> 
      Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == _module.Object.universe(this));
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



procedure {:verboseName "Object.join (correctness)"} Impl$$_module.Object.join(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id155"} _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
     && (forall o#2: ref :: 
      { _module.Object.universe(o#2) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#2)) } 
      $Is(o#2, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#2))
         ==> _module.Object.universe(o#2) == _module.Object.universe(this)
           && o#2 != _module.Object.universe(this));
  requires {:id "id156"} this != _module.Object.universe(this);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.baseInv#canCall($Heap, this);
  ensures {:id "id157"} _module.Object.baseInv#canCall($Heap, this)
     ==> _module.Object.baseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id158"} _module.Object.baseInv#canCall($Heap, this)
     ==> _module.Object.baseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#3: ref :: 
            { _module.Object.universe(o#3) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#3)) } 
            $Is(o#3, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3))
               ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                 && o#3 != _module.Object.universe(this)));
  ensures {:id "id159"} Set#Equal($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  free ensures true;
  ensures {:id "id160"} (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null
       ==> 
      Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == _module.Object.universe(this));
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.join (correctness)"} Impl$$_module.Object.join(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: Set;

    // AddMethodImpl: join, Impl$$_module.Object.join
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(99,22)
    assert {:id "id161"} _module.Object.universe(this) != null;
    assume true;
    assert {:id "id162"} $_ModifiesFrame[_module.Object.universe(this), _module.Universe.content];
    assert {:id "id163"} _module.Object.universe(this) != null;
    assume true;
    $rhs#0 := Set#Union($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    $Heap := update($Heap, _module.Object.universe(this), _module.Universe.content, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
}



// function declaration for _module.Object.goodPreAndLegalChanges
function _module.Object.goodPreAndLegalChanges($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool
uses {
// definition axiom for _module.Object.goodPreAndLegalChanges (revealed)
axiom {:id "id166"} 11 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
    { _module.Object.goodPreAndLegalChanges($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Object.goodPreAndLegalChanges#canCall($prevHeap, $Heap, this, running#0)
         || (11 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
           && $Is(running#0, Tclass._module.Thread()))
       ==> _module.Object.baseInv#canCall($prevHeap, this)
         && (_module.Object.baseInv($prevHeap, this)
           ==> _module.Universe.globalInv#canCall($prevHeap, _module.Object.universe(this)))
         && (_module.Object.baseInv($prevHeap, this)
             && _module.Universe.globalInv($prevHeap, _module.Object.universe(this))
           ==> _module.Object.baseInv#canCall($Heap, this)
             && (_module.Object.baseInv($Heap, this)
               ==> 
              (forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
               ==> _module.Universe.legalTransition#canCall($prevHeap, 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))))
         && _module.Object.goodPreAndLegalChanges($prevHeap, $Heap, this, running#0)
           == (
            _module.Object.baseInv($prevHeap, this)
             && _module.Universe.globalInv($prevHeap, _module.Object.universe(this))
             && _module.Object.baseInv($Heap, this)
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
             && _module.Universe.legalTransition($prevHeap, 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))));
}

function _module.Object.goodPreAndLegalChanges#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool;

// frame axiom for _module.Object.goodPreAndLegalChanges
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.goodPreAndLegalChanges($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && (_module.Object.goodPreAndLegalChanges#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, Tclass._module.Thread())
           && $IsAlloc(running#0, Tclass._module.Thread(), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.goodPreAndLegalChanges($prevHeap, $h0, this, running#0)
       == _module.Object.goodPreAndLegalChanges($prevHeap, $h1, this, running#0));

function _module.Object.goodPreAndLegalChanges#requires(Heap, Heap, ref, ref) : bool;

// #requires axiom for _module.Object.goodPreAndLegalChanges
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
  { _module.Object.goodPreAndLegalChanges#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
       && $Is(running#0, Tclass._module.Thread())
     ==> _module.Object.goodPreAndLegalChanges#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, Tclass._module.Thread(), $prevHeap));

procedure {:verboseName "Object.goodPreAndLegalChanges (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChanges(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.goodPreAndLegalChanges (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChanges(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##running#0: Set;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id167"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
        assume _module.Object.baseInv#canCall(old($Heap), this);
        if (_module.Object.baseInv(old($Heap), this))
        {
            assert {:id "id168"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            assert {:id "id169"} _module.Object.universe(this) != null;
            assert {:id "id170"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            assume _module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this));
        }

        if (_module.Object.baseInv(old($Heap), this)
           && _module.Universe.globalInv(old($Heap), _module.Object.universe(this)))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Object.baseInv#canCall($Heap, this);
        }

        if (_module.Object.baseInv(old($Heap), this)
           && _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
           && _module.Object.baseInv($Heap, this))
        {
            assert {:id "id171"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                 ==> $_ReadsFrame[$o, $f]);
        }

        if (_module.Object.baseInv(old($Heap), this)
           && _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
           && _module.Object.baseInv($Heap, this)
           && (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
        {
            assert {:id "id172"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            ##running#0 := Set#UnionOne(Set#Empty(): Set, $Box(running#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
            assert {:id "id173"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            assert {:id "id174"} $IsAlloc(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
              TSet(Tclass._module.Thread()), 
              old($Heap));
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.legalTransition#canCall(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
        }

        assume {:id "id175"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
           == (
            _module.Object.baseInv(old($Heap), this)
             && _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             && _module.Object.baseInv($Heap, this)
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             && _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0))));
        assume _module.Object.baseInv#canCall(old($Heap), this)
           && (_module.Object.baseInv(old($Heap), this)
             ==> _module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this)))
           && (_module.Object.baseInv(old($Heap), this)
               && _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             ==> _module.Object.baseInv#canCall($Heap, this)
               && (_module.Object.baseInv($Heap, this)
                 ==> 
                (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 ==> _module.Universe.legalTransition#canCall(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0), TBool);
        assert {:id "id176"} b$reqreads#0;
        assert {:id "id177"} b$reqreads#1;
        assert {:id "id178"} b$reqreads#2;
        return;

        assume false;
    }
}



// function declaration for _module.Object.objectGlobalInv
function _module.Object.objectGlobalInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.objectGlobalInv (revealed)
axiom {:id "id179"} 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.objectGlobalInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.objectGlobalInv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> _module.Object.baseInv#canCall($Heap, this)
         && (_module.Object.baseInv($Heap, this)
           ==> _module.Universe.globalInv#canCall($Heap, _module.Object.universe(this)))
         && _module.Object.objectGlobalInv($Heap, this)
           == (_module.Object.baseInv($Heap, this)
             && _module.Universe.globalInv($Heap, _module.Object.universe(this))));
}

function _module.Object.objectGlobalInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.objectGlobalInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.objectGlobalInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.objectGlobalInv($h0, this)
       == _module.Object.objectGlobalInv($h1, this));

function _module.Object.objectGlobalInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.objectGlobalInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.objectGlobalInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.objectGlobalInv#requires($Heap, this) == true);

procedure {:verboseName "Object.objectGlobalInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.objectGlobalInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.baseInv#canCall($Heap, this);
        if (_module.Object.baseInv($Heap, this))
        {
            assert {:id "id180"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalInv#canCall($Heap, _module.Object.universe(this));
        }

        assume {:id "id181"} _module.Object.objectGlobalInv($Heap, this)
           == (_module.Object.baseInv($Heap, this)
             && _module.Universe.globalInv($Heap, _module.Object.universe(this)));
        assume _module.Object.baseInv#canCall($Heap, this)
           && (_module.Object.baseInv($Heap, this)
             ==> _module.Universe.globalInv#canCall($Heap, _module.Object.universe(this)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.objectGlobalInv($Heap, this), TBool);
        assert {:id "id182"} b$reqreads#0;
        assert {:id "id183"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.objectGlobalInv2
function _module.Object.objectGlobalInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.objectGlobalInv2 (revealed)
axiom {:id "id184"} 11 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.objectGlobalInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.objectGlobalInv2#canCall($prevHeap, $Heap, this)
         || (11 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
           && _module.Object.objectGlobalInv($prevHeap, this))
       ==> _module.Object.baseInv#canCall($Heap, this)
         && (_module.Object.baseInv($Heap, this)
           ==> _module.Universe.globalInv2#canCall($prevHeap, $Heap, _module.Object.universe(this)))
         && _module.Object.objectGlobalInv2($prevHeap, $Heap, this)
           == (_module.Object.baseInv($Heap, this)
             && _module.Universe.globalInv2($prevHeap, $Heap, _module.Object.universe(this))));
}

function _module.Object.objectGlobalInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.objectGlobalInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.objectGlobalInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.objectGlobalInv2($prevHeap, $h0, this)
       == _module.Object.objectGlobalInv2($prevHeap, $h1, this));

function _module.Object.objectGlobalInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.objectGlobalInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.objectGlobalInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.objectGlobalInv2#requires($prevHeap, $Heap, this)
       == _module.Object.objectGlobalInv($prevHeap, this));

procedure {:verboseName "Object.objectGlobalInv2 (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.objectGlobalInv2 (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    assert {:id "id185"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.objectGlobalInv#canCall(old($Heap), this);
    assume {:id "id186"} _module.Object.objectGlobalInv(old($Heap), this);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.baseInv#canCall($Heap, this);
        if (_module.Object.baseInv($Heap, this))
        {
            assert {:id "id187"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            assert {:id "id188"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
        }

        assume {:id "id189"} _module.Object.objectGlobalInv2(old($Heap), $Heap, this)
           == (_module.Object.baseInv($Heap, this)
             && _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this)));
        assume _module.Object.baseInv#canCall($Heap, this)
           && (_module.Object.baseInv($Heap, this)
             ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.objectGlobalInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id190"} b$reqreads#0;
        assert {:id "id191"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.localInv
function _module.Object.localInv($heap: Heap, this: ref) : bool;

function _module.Object.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.localInv($h0, this) == _module.Object.localInv($h1, this));

function _module.Object.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.localInv#requires($Heap, this) == true);

procedure {:verboseName "Object.localInv (well-formedness)"} CheckWellformed$$_module.Object.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.Object.localInv2
function _module.Object.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.Object.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.localInv2($prevHeap, $h0, this)
       == _module.Object.localInv2($prevHeap, $h1, this));

function _module.Object.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.localInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Object.localInv2 (well-formedness)"} CheckWellformed$$_module.Object.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.Object.inv
function _module.Object.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.inv
axiom 8 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this) } 
    _module.Object.inv#canCall($Heap, this)
         || (8 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> 
      _module.Object.inv($Heap, this)
       ==> _module.Object.localInv($Heap, this));
}

function _module.Object.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.inv($h0, this) == _module.Object.inv($h1, this));

function _module.Object.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.inv#requires($Heap, this) == true);

procedure {:verboseName "Object.inv (well-formedness)"} CheckWellformed$$_module.Object.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id192"} _module.Object.inv($Heap, this) ==> _module.Object.localInv($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.inv (well-formedness)"} CheckWellformed$$_module.Object.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id193"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Object.inv#canCall($Heap, this);
            assume {:id "id194"} _module.Object.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.localInv#canCall($Heap, this);
            assume {:id "id195"} _module.Object.localInv($Heap, this);
        }
        else
        {
            assume {:id "id196"} _module.Object.inv($Heap, this) ==> _module.Object.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module.Object.inv2
function _module.Object.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.inv2
axiom 7 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this) } 
    _module.Object.inv2#canCall($prevHeap, $Heap, this)
         || (7 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap))
       ==> 
      _module.Object.inv2($prevHeap, $Heap, this)
       ==> _module.Object.localInv2($prevHeap, $Heap, this));
}

function _module.Object.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.inv2($prevHeap, $h0, this)
       == _module.Object.inv2($prevHeap, $h1, this));

function _module.Object.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.inv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Object.inv2 (well-formedness)"} CheckWellformed$$_module.Object.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 7 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id197"} _module.Object.inv2(previous$Heap, current$Heap, this)
     ==> _module.Object.localInv2(previous$Heap, current$Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.inv2 (well-formedness)"} CheckWellformed$$_module.Object.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id198"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            assert {:id "id199"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Object.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id200"} _module.Object.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id201"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            assume _module.Object.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id202"} _module.Object.localInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id203"} _module.Object.inv2(old($Heap), $Heap, this)
               ==> _module.Object.localInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



procedure {:verboseName "Object.admissibility (well-formedness)"} CheckWellFormed$$_module.Object.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 13 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.admissibility (well-formedness)"} CheckWellFormed$$_module.Object.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Object.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id204"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id205"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id206"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assert {:id "id207"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id208"} _module.Object.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.inv#canCall($Heap, this);
    assume {:id "id209"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "Object.admissibility (call)"} Call$$_module.Object.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id210"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id211"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id212"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id213"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv(previous$Heap, o#2) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv(previous$Heap, o#2)));
  requires {:id "id214"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id215"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#3: ref :: 
                { _module.Object.universe(o#3) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3)) } 
                $Is(o#3, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3))
                   ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                     && o#3 != _module.Object.universe(this))));
  requires {:id "id216"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id217"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#4: ref :: 
                    { _module.Object.universe(o#4) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4)) } 
                    $Is(o#4, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#4))
                       ==> _module.Object.universe(o#4) == _module.Object.universe(this)
                         && o#4 != _module.Object.universe(this)))));
  requires {:id "id218"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#5: ref :: 
                { _module.Object.inv(previous$Heap, o#5) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#5)) } 
                $Is(o#5, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#5))
                   ==> _module.Object.inv(previous$Heap, o#5))));
  requires {:id "id219"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#6: ref :: 
                { _module.Object.universe(o#6) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#6)) } 
                $Is(o#6, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6))
                   ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                     && o#6 != _module.Object.universe(this))));
  requires {:id "id220"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id221"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#7: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#7) } 
              { _module.Object.inv(current$Heap, o#7) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#7)) } 
            $Is(o#7, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#7
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#7))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#7
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#7))));
  requires {:id "id222"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#8: ref :: 
            { _module.Object.inv(current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> _module.Object.inv(current$Heap, o#8)));
  requires {:id "id223"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 <= $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id224"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall t#0: ref :: 
            { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(t#0)) } 
              { _module.Object.universe(t#0) } 
              { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0)) } 
            $Is(t#0, Tclass._module.Thread())
                 && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0))
               ==> _module.Object.universe(t#0) == _module.Object.universe(this)
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#0))));
  requires {:id "id225"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#10: ref :: 
            { $Unbox(read(current$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#10, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#10)) } 
            $Is(o#10, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#10))
                 && $Is($Unbox(read(previous$Heap, o#10, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                read(previous$Heap, o#10, _module.OwnedObject.owner))
               ==> $Unbox(read(previous$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Object.inv2(previous$Heap, current$Heap, this)
       ==> _module.Object.inv#canCall(current$Heap, this));
  ensures {:id "id226"} _module.Object.inv2(previous$Heap, current$Heap, this);
  ensures {:id "id227"} _module.Object.inv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for _module.Object.isOwnedObject
function _module.Object.isOwnedObject(this: ref) : bool;

function _module.Object.isOwnedObject#canCall(this: ref) : bool;

function _module.Object.isOwnedObject#requires(ref) : bool;

// #requires axiom for _module.Object.isOwnedObject
axiom (forall this: ref :: 
  { _module.Object.isOwnedObject#requires(this) } 
  this != null && $Is(this, Tclass._module.Object())
     ==> _module.Object.isOwnedObject#requires(this) == true);

procedure {:verboseName "Object.isOwnedObject (well-formedness)"} CheckWellformed$$_module.Object.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// $Is axiom for non-null type _module.Object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Object()) } { $Is(c#0, Tclass._module.Object?()) } 
  $Is(c#0, Tclass._module.Object())
     <==> $Is(c#0, Tclass._module.Object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Object(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Object?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Object(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Object?(), $h));

const unique class._module.NonOwnedObject?: ClassName;

function Tclass._module.NonOwnedObject?() : Ty
uses {
// Tclass._module.NonOwnedObject? Tag
axiom Tag(Tclass._module.NonOwnedObject?()) == Tagclass._module.NonOwnedObject?
   && TagFamily(Tclass._module.NonOwnedObject?()) == tytagFamily$NonOwnedObject;
}

const unique Tagclass._module.NonOwnedObject?: TyTag;

// Box/unbox axiom for Tclass._module.NonOwnedObject?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.NonOwnedObject?()) } 
  $IsBox(bx, Tclass._module.NonOwnedObject?())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.NonOwnedObject?()));

// $Is axiom for trait NonOwnedObject
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.NonOwnedObject?()) } 
  $Is($o, Tclass._module.NonOwnedObject?())
     <==> $o == null || implements$_module.NonOwnedObject(dtype($o)));

// $IsAlloc axiom for trait NonOwnedObject
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.NonOwnedObject?(), $h) } 
  $IsAlloc($o, Tclass._module.NonOwnedObject?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.NonOwnedObject(ty: Ty) : bool;

// function declaration for _module.NonOwnedObject.isOwnedObject
function _module.NonOwnedObject.isOwnedObject(this: ref) : bool
uses {
// definition axiom for _module.NonOwnedObject.isOwnedObject (revealed)
axiom {:id "id228"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.NonOwnedObject.isOwnedObject(this) } 
    _module.NonOwnedObject.isOwnedObject#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.NonOwnedObject()))
       ==> _module.NonOwnedObject.isOwnedObject(this) == Lit(false));
// definition axiom for _module.NonOwnedObject.isOwnedObject for all literals (revealed)
axiom {:id "id229"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.NonOwnedObject.isOwnedObject(Lit(this)) } 
    _module.NonOwnedObject.isOwnedObject#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.NonOwnedObject()))
       ==> _module.NonOwnedObject.isOwnedObject(Lit(this)) == Lit(false));
}

function _module.NonOwnedObject.isOwnedObject#canCall(this: ref) : bool;

function _module.NonOwnedObject.isOwnedObject#requires(ref) : bool;

// #requires axiom for _module.NonOwnedObject.isOwnedObject
axiom (forall this: ref :: 
  { _module.NonOwnedObject.isOwnedObject#requires(this) } 
  this != null && $Is(this, Tclass._module.NonOwnedObject())
     ==> _module.NonOwnedObject.isOwnedObject#requires(this) == true);

// override axiom for _module.Object.isOwnedObject in class _module.NonOwnedObject
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Object.isOwnedObject(this), $Is(this, Tclass._module.NonOwnedObject()) } 
      { _module.Object.isOwnedObject(this), _module.NonOwnedObject.isOwnedObject(this) } 
    _module.NonOwnedObject.isOwnedObject#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.NonOwnedObject()))
       ==> _module.Object.isOwnedObject(this) == _module.NonOwnedObject.isOwnedObject(this));

procedure {:verboseName "NonOwnedObject.isOwnedObject (well-formedness)"} CheckWellformed$$_module.NonOwnedObject.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.NonOwnedObject())
         && $IsAlloc(this, Tclass._module.NonOwnedObject(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "NonOwnedObject.isOwnedObject (override check)"} OverrideCheck$$_module.NonOwnedObject.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.NonOwnedObject())
         && $IsAlloc(this, Tclass._module.NonOwnedObject(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "NonOwnedObject.isOwnedObject (override check)"} OverrideCheck$$_module.NonOwnedObject.isOwnedObject(this: ref)
{
  var NonOwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id231"} true;
    NonOwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id232"} (forall $o: ref, $f: Field :: true);
}



// $Is axiom for non-null type _module.NonOwnedObject
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.NonOwnedObject()) } 
    { $Is(c#0, Tclass._module.NonOwnedObject?()) } 
  $Is(c#0, Tclass._module.NonOwnedObject())
     <==> $Is(c#0, Tclass._module.NonOwnedObject?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.NonOwnedObject
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.NonOwnedObject(), $h) } 
    { $IsAlloc(c#0, Tclass._module.NonOwnedObject?(), $h) } 
  $IsAlloc(c#0, Tclass._module.NonOwnedObject(), $h)
     <==> $IsAlloc(c#0, Tclass._module.NonOwnedObject?(), $h));

const unique class._module.Thread?: ClassName;

function Tclass._module.Thread?() : Ty
uses {
// Tclass._module.Thread? Tag
axiom Tag(Tclass._module.Thread?()) == Tagclass._module.Thread?
   && TagFamily(Tclass._module.Thread?()) == tytagFamily$Thread;
axiom implements$_module.NonOwnedObject(Tclass._module.Thread?());
}

const unique Tagclass._module.Thread?: TyTag;

// Box/unbox axiom for Tclass._module.Thread?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Thread?()) } 
  $IsBox(bx, Tclass._module.Thread?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Thread?()));

// $Is axiom for class Thread
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Thread?()) } 
  $Is($o, Tclass._module.Thread?())
     <==> $o == null || dtype($o) == Tclass._module.Thread?());

// $IsAlloc axiom for class Thread
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Thread?(), $h) } 
  $IsAlloc($o, Tclass._module.Thread?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// function declaration for _module.Thread.localInv
function _module.Thread.localInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Thread.localInv (revealed)
axiom {:id "id233"} 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> (Lit(true) ==> _module.Object.baseInv#canCall($Heap, this))
         && _module.Thread.localInv($Heap, this)
           == (true && _module.Object.baseInv($Heap, this)));
}

function _module.Thread.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.localInv($h0, this) == _module.Thread.localInv($h1, this));

function _module.Thread.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Thread.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Thread.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap)
     ==> _module.Thread.localInv#requires($Heap, this) == true);

// override axiom for _module.Object.localInv in class _module.Thread
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.localInv($Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv($Heap, this), _module.Thread.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.localInv($Heap, this) == _module.Thread.localInv($Heap, this));

procedure {:verboseName "Thread.localInv (well-formedness)"} CheckWellformed$$_module.Thread.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.localInv (well-formedness)"} CheckWellformed$$_module.Thread.localInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Object.baseInv#canCall($Heap, this);
        }

        assume {:id "id234"} _module.Thread.localInv($Heap, this)
           == (true && _module.Object.baseInv($Heap, this));
        assume Lit(true) ==> _module.Object.baseInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Thread.localInv($Heap, this), TBool);
        assert {:id "id235"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Thread.localInv (override check)"} OverrideCheck$$_module.Thread.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.localInv (override check)"} OverrideCheck$$_module.Thread.localInv(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id236"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id237"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Thread.inv
function _module.Thread.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Thread.inv
axiom 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.inv($Heap, this) } 
    _module.Thread.inv#canCall($Heap, this)
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> 
      _module.Thread.inv($Heap, this)
       ==> _module.Thread.localInv($Heap, this));
// definition axiom for _module.Thread.inv (revealed)
axiom {:id "id238"} 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv#canCall($Heap, this)
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> (Lit(true) ==> _module.Thread.localInv#canCall($Heap, this))
         && _module.Thread.inv($Heap, this)
           == (true && _module.Thread.localInv($Heap, this)));
}

function _module.Thread.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.inv($h0, this) == _module.Thread.inv($h1, this));

function _module.Thread.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.Thread.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Thread.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap)
     ==> _module.Thread.inv#requires($Heap, this) == true);

// override axiom for _module.Object.inv in class _module.Thread
axiom 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.inv($Heap, this), _module.Thread.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv#canCall($Heap, this)
         || (5 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.inv($Heap, this) == _module.Thread.inv($Heap, this));

procedure {:verboseName "Thread.inv (well-formedness)"} CheckWellformed$$_module.Thread.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id239"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this) || Lit(true);
  ensures {:id "id240"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id241"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv (well-formedness)"} CheckWellformed$$_module.Thread.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id242"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Thread.inv#canCall($Heap, this);
            assume {:id "id243"} _module.Thread.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assume _module.Thread.localInv#canCall($Heap, this);
            assume {:id "id244"} _module.Thread.localInv($Heap, this);
        }
        else
        {
            assume {:id "id245"} _module.Thread.inv($Heap, this) ==> _module.Thread.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Thread.localInv#canCall($Heap, this);
        }

        assume {:id "id246"} _module.Thread.inv($Heap, this)
           == (true && _module.Thread.localInv($Heap, this));
        assume Lit(true) ==> _module.Thread.localInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Thread.inv($Heap, this), TBool);
        assert {:id "id247"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Thread.inv (override check)"} OverrideCheck$$_module.Thread.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv (override check)"} OverrideCheck$$_module.Thread.inv(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id248"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id249"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id250"} _module.Thread.inv($Heap, this) ==> _module.Thread.localInv($Heap, this);
    assert {:id "id251"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this) || Lit(true);
    assert {:id "id252"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id253"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this))));
}



// function declaration for _module.Thread.localInv2
function _module.Thread.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Thread.localInv2 (revealed)
axiom {:id "id254"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> _module.Thread.localInv2($prevHeap, $Heap, this) == Lit(true));
}

function _module.Thread.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.localInv2($prevHeap, $h0, this)
       == _module.Thread.localInv2($prevHeap, $h1, this));

function _module.Thread.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Thread.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Thread.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $prevHeap)
     ==> _module.Thread.localInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.localInv2 in class _module.Thread
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.localInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv2($prevHeap, $Heap, this), _module.Thread.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.localInv2($prevHeap, $Heap, this)
         == _module.Thread.localInv2($prevHeap, $Heap, this));

procedure {:verboseName "Thread.localInv2 (well-formedness)"} CheckWellformed$$_module.Thread.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "Thread.localInv2 (override check)"} OverrideCheck$$_module.Thread.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.localInv2 (override check)"} OverrideCheck$$_module.Thread.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id256"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id257"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Thread.inv2
function _module.Thread.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Thread.inv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.inv2($prevHeap, $Heap, this) } 
    _module.Thread.inv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> 
      _module.Thread.inv2($prevHeap, $Heap, this)
       ==> _module.Thread.localInv2($prevHeap, $Heap, this));
// definition axiom for _module.Thread.inv2 (revealed)
axiom {:id "id258"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> _module.Thread.localInv2#canCall($prevHeap, $Heap, this)
         && _module.Thread.inv2($prevHeap, $Heap, this)
           == _module.Thread.localInv2($prevHeap, $Heap, this));
}

function _module.Thread.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.inv2($prevHeap, $h0, this)
       == _module.Thread.inv2($prevHeap, $h1, this));

function _module.Thread.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Thread.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Thread.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $prevHeap)
     ==> _module.Thread.inv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.inv2 in class _module.Thread
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.inv2($prevHeap, $Heap, this), _module.Thread.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.inv2($prevHeap, $Heap, this)
         == _module.Thread.inv2($prevHeap, $Heap, this));

procedure {:verboseName "Thread.inv2 (well-formedness)"} CheckWellformed$$_module.Thread.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id259"} _module.Thread.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Thread.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.localInv2(previous$Heap, current$Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv2 (well-formedness)"} CheckWellformed$$_module.Thread.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id260"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assert {:id "id261"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Thread.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id262"} _module.Thread.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id263"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assume _module.Thread.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id264"} _module.Thread.localInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id265"} _module.Thread.inv2(old($Heap), $Heap, this)
               ==> _module.Thread.localInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
        assert {:id "id266"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Thread.localInv2#canCall(old($Heap), $Heap, this);
        assume {:id "id267"} _module.Thread.inv2(old($Heap), $Heap, this)
           == _module.Thread.localInv2(old($Heap), $Heap, this);
        assume _module.Thread.localInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Thread.inv2(old($Heap), $Heap, this), TBool);
        assert {:id "id268"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Thread.inv2 (override check)"} OverrideCheck$$_module.Thread.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv2 (override check)"} OverrideCheck$$_module.Thread.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id269"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id270"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id271"} _module.Thread.inv2(old($Heap), $Heap, this)
       ==> _module.Thread.localInv2(old($Heap), $Heap, this);
    assert {:id "id272"} _module.Thread.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Thread.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.localInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "Thread.admissibility (well-formedness)"} CheckWellFormed$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.admissibility (well-formedness)"} CheckWellFormed$$_module.Thread.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Thread.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id273"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assert {:id "id274"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id275"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assert {:id "id276"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume _module.Thread.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id277"} _module.Thread.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.inv#canCall($Heap, this);
    assume {:id "id278"} _module.Thread.inv($Heap, this);
}



procedure {:verboseName "Thread.admissibility (override check)"} OverrideCheck$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.admissibility (override check)"} OverrideCheck$$_module.Thread.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id279"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id280"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id281"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#0: ref :: 
                  { _module.Object.universe(o#0) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0)) } 
                  $Is(o#0, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#0))
                     ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                       && o#0 != _module.Object.universe(this))));
    assert {:id "id282"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this))));
    assert {:id "id283"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (forall o#2: ref :: 
              { _module.Object.inv(old($Heap), o#2) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2))
                 ==> _module.Object.inv(old($Heap), o#2)));
    assert {:id "id284"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id285"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#3: ref :: 
                  { _module.Object.universe(o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                       && o#3 != _module.Object.universe(this))));
    assert {:id "id286"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id287"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#4: ref :: 
                      { _module.Object.universe(o#4) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#4)) } 
                      $Is(o#4, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#4))
                         ==> _module.Object.universe(o#4) == _module.Object.universe(this)
                           && o#4 != _module.Object.universe(this)))));
    assert {:id "id288"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#5: ref :: 
                  { _module.Object.inv(old($Heap), o#5) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#5)) } 
                  $Is(o#5, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5))
                     ==> _module.Object.inv(old($Heap), o#5))));
    assert {:id "id289"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.universe(o#6) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                       && o#6 != _module.Object.universe(this))));
    assert {:id "id290"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id291"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id292"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id293"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#9: ref :: 
              { $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9)) } 
              $Is(o#9, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#9))
                 ==> $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int
                   <= $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id294"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall t#0: ref :: 
              { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#0)) } 
                { _module.Object.universe(t#0) } 
                { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0)) } 
              $Is(t#0, Tclass._module.Thread())
                   && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0))
                 ==> _module.Object.universe(t#0) == _module.Object.universe(this)
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(t#0))));
    assert {:id "id295"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#10: ref :: 
              { $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#10)) } 
              $Is(o#10, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10))
                   && $Is($Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#10, _module.OwnedObject.owner))
                 ==> $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id296"} running#0 != null ==> running#0 != null;
    assert {:id "id297"} (forall $o: ref, $f: Field :: true);
    assert {:id "id298"} (forall $o: ref, $f: Field :: true);
    assume {:id "id299"} _module.Thread.inv2(old($Heap), $Heap, this) && _module.Thread.inv($Heap, this);
    assert {:id "id300"} _module.Thread.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.inv2(old($Heap), $Heap, this)
         || (_module.Thread.localInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Thread.localInv2(old($Heap), $Heap, this) || Lit(true));
    assert {:id "id301"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this) || Lit(true);
    assert {:id "id302"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this) || Lit(true));
    assert {:id "id303"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.baseInv#canCall($Heap, this)
               ==> _module.Object.baseInv($Heap, this)
                 || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(this))));
    assert {:id "id304"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.baseInv#canCall($Heap, this)
               ==> _module.Object.baseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#11: ref :: 
                      { _module.Object.universe(o#11) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11)) } 
                      $Is(o#11, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#11))
                         ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                           && o#11 != _module.Object.universe(this)))));
}



procedure {:verboseName "Thread.admissibility (call)"} Call$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id305"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id306"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#12: ref :: 
                { _module.Object.universe(o#12) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> _module.Object.universe(o#12) == _module.Object.universe(this)
                     && o#12 != _module.Object.universe(this))));
  requires {:id "id307"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#13: ref :: 
                { _module.Object.universe(o#13) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                   ==> _module.Object.universe(o#13) == _module.Object.universe(this)
                     && o#13 != _module.Object.universe(this))));
  requires {:id "id308"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (forall o#14: ref :: 
            { _module.Object.inv(previous$Heap, o#14) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#14)) } 
            $Is(o#14, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#14))
               ==> _module.Object.inv(previous$Heap, o#14)));
  requires {:id "id309"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id310"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                     && o#15 != _module.Object.universe(this))));
  requires {:id "id311"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id312"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#16: ref :: 
                    { _module.Object.universe(o#16) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#16)) } 
                    $Is(o#16, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#16))
                       ==> _module.Object.universe(o#16) == _module.Object.universe(this)
                         && o#16 != _module.Object.universe(this)))));
  requires {:id "id313"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#17: ref :: 
                { _module.Object.inv(previous$Heap, o#17) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#17)) } 
                $Is(o#17, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#17))
                   ==> _module.Object.inv(previous$Heap, o#17))));
  requires {:id "id314"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#18: ref :: 
                { _module.Object.universe(o#18) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#18)) } 
                $Is(o#18, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#18))
                   ==> _module.Object.universe(o#18) == _module.Object.universe(this)
                     && o#18 != _module.Object.universe(this))));
  requires {:id "id315"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id316"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#19: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#19) } 
              { _module.Object.inv(current$Heap, o#19) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
            $Is(o#19, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#19
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#19))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#19
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#19))));
  requires {:id "id317"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { _module.Object.inv(current$Heap, o#20) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#20)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#20)) } 
            $Is(o#20, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#20))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#20))
               ==> _module.Object.inv(current$Heap, o#20)));
  requires {:id "id318"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#21))
               ==> $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int
                 <= $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id319"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall t#1: ref :: 
            { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(t#1)) } 
              { _module.Object.universe(t#1) } 
              { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1)) } 
            $Is(t#1, Tclass._module.Thread())
                 && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1))
               ==> _module.Object.universe(t#1) == _module.Object.universe(this)
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#1))));
  requires {:id "id320"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#22: ref :: 
            { $Unbox(read(current$Heap, o#22, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#22, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#22, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#22)) } 
            $Is(o#22, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#22))
                 && $Is($Unbox(read(previous$Heap, o#22, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                read(previous$Heap, o#22, _module.OwnedObject.owner))
               ==> $Unbox(read(previous$Heap, o#22, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#22, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Thread.inv2(previous$Heap, current$Heap, this)
       ==> _module.Thread.inv#canCall(current$Heap, this));
  free ensures {:id "id321"} _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Thread.inv2(previous$Heap, current$Heap, this)
     && _module.Thread.localInv2(previous$Heap, current$Heap, this);
  free ensures {:id "id322"} _module.Thread.inv#canCall(current$Heap, this)
     && 
    _module.Thread.inv(current$Heap, this)
     && 
    true
     && _module.Thread.localInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Thread.admissibility (correctness)"} Impl$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id323"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.baseInv(previous$Heap, this)
     && _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
     && _module.Object.baseInv(current$Heap, this)
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, 
      current$Heap, 
      _module.Object.universe(this), 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Thread.inv2(previous$Heap, current$Heap, this)
       ==> _module.Thread.inv#canCall(current$Heap, this));
  ensures {:id "id324"} _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.inv2(previous$Heap, current$Heap, this)
       || (_module.Thread.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Thread.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id325"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this) || Lit(true);
  ensures {:id "id326"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this) || Lit(true));
  ensures {:id "id327"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id328"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#35: ref :: 
                    { _module.Object.universe(o#35) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#35)) } 
                    $Is(o#35, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#35))
                       ==> _module.Object.universe(o#35) == _module.Object.universe(this)
                         && o#35 != _module.Object.universe(this)))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.admissibility (correctness)"} Impl$$_module.Thread.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.Thread.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Thread._ctor (well-formedness)"} CheckWellFormed$$_module.Thread.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref);
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread._ctor (well-formedness)"} CheckWellFormed$$_module.Thread.__ctor(universe#0: ref, running#0: ref) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.Thread.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    assert {:id "id329"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id330"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id331"} running#0 != null;
    assume {:id "id332"} _module.Object.universe(running#0) == universe#0;
    assert {:id "id333"} running#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(running#0), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.inv#canCall($Heap, running#0);
    assume {:id "id334"} _module.Thread.inv($Heap, running#0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id335"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id336"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id337"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id338"} _module.Universe.globalInv2(old($Heap), $Heap, universe#0);
}



procedure {:verboseName "Thread._ctor (call)"} Call$$_module.Thread.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id339"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0 && o#0 != universe#0));
  requires {:id "id340"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id341"} _module.Object.universe(running#0) == universe#0;
  requires {:id "id342"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0) || Lit(true);
  requires {:id "id343"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0) || Lit(true));
  requires {:id "id344"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                $Box(running#0))));
  requires {:id "id345"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(running#0))
                 ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(running#0))
                   || (forall o#2: ref :: 
                    { _module.Object.universe(o#2) } 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                        $Box(o#2)) } 
                    $Is(o#2, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                          $Box(o#2))
                       ==> _module.Object.universe(o#2) == _module.Object.universe(running#0)
                         && o#2 != _module.Object.universe(running#0)))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id346"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id347"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Thread._ctor (correctness)"} Impl$$_module.Thread.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id348"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#8: ref :: 
      { _module.Object.inv($Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv($Heap, o#8));
  requires {:id "id349"} _module.Object.universe(running#0) == universe#0;
  free requires {:id "id350"} _module.Thread.inv#canCall($Heap, running#0)
     && 
    _module.Thread.inv($Heap, running#0)
     && 
    true
     && _module.Thread.localInv($Heap, running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id351"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id352"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id353"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id354"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id355"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0) || Lit(true);
  ensures {:id "id356"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread._ctor (correctness)"} Impl$$_module.Thread.__ctor(universe#0: ref, running#0: ref) returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.universe: ref;
  var defass#this.universe: bool;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.Thread.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(155,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(156,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(155,3)
    assert {:id "id358"} defass#this.universe;
    assume this != null && $Is(this, Tclass._module.Thread?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume _module.Object.universe(this) == this.universe;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(155,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(158,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := this;
    call {:id "id359"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(159,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id360"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id361"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(160,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id362"} universe#0 != null;
    assert {:id "id363"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    call {:id "id364"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(161,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id365"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id366"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id367"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id368"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.Thread
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Thread()) } { $Is(c#0, Tclass._module.Thread?()) } 
  $Is(c#0, Tclass._module.Thread())
     <==> $Is(c#0, Tclass._module.Thread?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Thread
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Thread(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Thread?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Thread(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Thread?(), $h));

const unique class._module.OwnedObject?: ClassName;

// $Is axiom for trait OwnedObject
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedObject?()) } 
  $Is($o, Tclass._module.OwnedObject?())
     <==> $o == null || implements$_module.OwnedObject(dtype($o)));

// $IsAlloc axiom for trait OwnedObject
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedObject?(), $h) } 
  $IsAlloc($o, Tclass._module.OwnedObject?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.OwnedObject(ty: Ty) : bool;

const _module.OwnedObject.nonvolatileVersion: Field
uses {
axiom FDim(_module.OwnedObject.nonvolatileVersion) == 0
   && FieldOfDecl(class._module.OwnedObject?, field$nonvolatileVersion)
     == _module.OwnedObject.nonvolatileVersion
   && $IsGhostField(_module.OwnedObject.nonvolatileVersion);
}

// OwnedObject.nonvolatileVersion: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int } 
  $IsGoodHeap($h) && $o != null && $Is($o, Tclass._module.OwnedObject?())
     ==> $Is($Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int, TInt));

// OwnedObject.nonvolatileVersion: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && $Is($o, Tclass._module.OwnedObject?())
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int, TInt, $h));

const _module.OwnedObject.owner: Field
uses {
axiom FDim(_module.OwnedObject.owner) == 0
   && FieldOfDecl(class._module.OwnedObject?, field$owner)
     == _module.OwnedObject.owner
   && $IsGhostField(_module.OwnedObject.owner);
}

// OwnedObject.owner: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.owner)): ref } 
  $IsGoodHeap($h) && $o != null && $Is($o, Tclass._module.OwnedObject?())
     ==> $Is($Unbox(read($h, $o, _module.OwnedObject.owner)): ref, Tclass._module.Object()));

// OwnedObject.owner: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.owner)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && $Is($o, Tclass._module.OwnedObject?())
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.OwnedObject.owner)): ref, 
      Tclass._module.Object(), 
      $h));

// function declaration for _module.OwnedObject.localInv
function _module.OwnedObject.localInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.localInv (revealed)
axiom {:id "id369"} 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> _module.Object.baseInv#canCall($Heap, this)
         && (_module.Object.baseInv($Heap, this)
           ==> 
          _module.Object.universe($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(this)
           ==> 
          Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.OwnedObject.owner))
           ==> _module.OwnedObject.baseUserInv#canCall($Heap, this)
             && (_module.OwnedObject.baseUserInv($Heap, this)
               ==> _module.OwnedObject.localUserInv#canCall($Heap, this)))
         && _module.OwnedObject.localInv($Heap, this)
           == (
            _module.Object.baseInv($Heap, this)
             && _module.Object.universe($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
               == _module.Object.universe(this)
             && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.OwnedObject.owner))
             && _module.OwnedObject.baseUserInv($Heap, this)
             && _module.OwnedObject.localUserInv($Heap, this)));
}

function _module.OwnedObject.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localInv($h0, this)
       == _module.OwnedObject.localInv($h1, this));

function _module.OwnedObject.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.localInv#requires($Heap, this) == true);

// override axiom for _module.Object.localInv in class _module.OwnedObject
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.localInv($Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv($Heap, this), _module.OwnedObject.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.localInv($Heap, this)
         == _module.OwnedObject.localInv($Heap, this));

procedure {:verboseName "OwnedObject.localInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.baseInv#canCall($Heap, this);
        if (_module.Object.baseInv($Heap, this))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.OwnedObject.owner];
            assert {:id "id370"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
        }

        if (_module.Object.baseInv($Heap, this)
           && _module.Object.universe($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(this))
        {
            b$reqreads#2 := $_ReadsFrame[this, _module.OwnedObject.owner];
            assert {:id "id371"} _module.Object.universe(this) != null;
            b$reqreads#3 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        }

        if (_module.Object.baseInv($Heap, this)
           && _module.Object.universe($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(this)
           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.OwnedObject.owner)))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            b$reqreads#4 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.baseUserInv#canCall($Heap, this);
        }

        if (_module.Object.baseInv($Heap, this)
           && _module.Object.universe($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(this)
           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.OwnedObject.owner))
           && _module.OwnedObject.baseUserInv($Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            b$reqreads#5 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localUserInv#canCall($Heap, this);
        }

        assume {:id "id372"} _module.OwnedObject.localInv($Heap, this)
           == (
            _module.Object.baseInv($Heap, this)
             && _module.Object.universe($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
               == _module.Object.universe(this)
             && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.OwnedObject.owner))
             && _module.OwnedObject.baseUserInv($Heap, this)
             && _module.OwnedObject.localUserInv($Heap, this));
        assume _module.Object.baseInv#canCall($Heap, this)
           && (_module.Object.baseInv($Heap, this)
             ==> 
            _module.Object.universe($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
               == _module.Object.universe(this)
             ==> 
            Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.OwnedObject.owner))
             ==> _module.OwnedObject.baseUserInv#canCall($Heap, this)
               && (_module.OwnedObject.baseUserInv($Heap, this)
                 ==> _module.OwnedObject.localUserInv#canCall($Heap, this)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.localInv($Heap, this), TBool);
        assert {:id "id373"} b$reqreads#0;
        assert {:id "id374"} b$reqreads#1;
        assert {:id "id375"} b$reqreads#2;
        assert {:id "id376"} b$reqreads#3;
        assert {:id "id377"} b$reqreads#4;
        assert {:id "id378"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.localInv (override check)"} OverrideCheck$$_module.OwnedObject.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv (override check)"} OverrideCheck$$_module.OwnedObject.localInv(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id379"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id380"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedObject.inv
function _module.OwnedObject.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.inv
axiom 7 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv($Heap, this) } 
    _module.OwnedObject.inv#canCall($Heap, this)
         || (7 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> 
      _module.OwnedObject.inv($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this));
// definition axiom for _module.OwnedObject.inv (revealed)
axiom {:id "id381"} 7 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv#canCall($Heap, this)
         || (7 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> _module.OwnedObject.localInv#canCall($Heap, this)
         && (_module.OwnedObject.localInv($Heap, this)
           ==> _module.OwnedObject.userInv#canCall($Heap, this))
         && _module.OwnedObject.inv($Heap, this)
           == (_module.OwnedObject.localInv($Heap, this)
             && _module.OwnedObject.userInv($Heap, this)));
}

function _module.OwnedObject.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.inv($h0, this) == _module.OwnedObject.inv($h1, this));

function _module.OwnedObject.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.inv#requires($Heap, this) == true);

// override axiom for _module.Object.inv in class _module.OwnedObject
axiom 7 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.inv($Heap, this), _module.OwnedObject.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv#canCall($Heap, this)
         || (7 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.inv($Heap, this) == _module.OwnedObject.inv($Heap, this));

procedure {:verboseName "OwnedObject.inv (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id382"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id383"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  ensures {:id "id384"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || _module.Object.universe($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
         == _module.Object.universe(this);
  ensures {:id "id385"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read($Heap, this, _module.OwnedObject.owner));
  ensures {:id "id386"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || _module.OwnedObject.baseUserInv($Heap, this);
  ensures {:id "id387"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || _module.OwnedObject.localUserInv($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id388"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.inv#canCall($Heap, this);
            assume {:id "id389"} _module.OwnedObject.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assume _module.OwnedObject.localInv#canCall($Heap, this);
            assume {:id "id390"} _module.OwnedObject.localInv($Heap, this);
        }
        else
        {
            assume {:id "id391"} _module.OwnedObject.inv($Heap, this)
               ==> _module.OwnedObject.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedObject.localInv#canCall($Heap, this);
        if (_module.OwnedObject.localInv($Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.userInv#canCall($Heap, this);
        }

        assume {:id "id392"} _module.OwnedObject.inv($Heap, this)
           == (_module.OwnedObject.localInv($Heap, this)
             && _module.OwnedObject.userInv($Heap, this));
        assume _module.OwnedObject.localInv#canCall($Heap, this)
           && (_module.OwnedObject.localInv($Heap, this)
             ==> _module.OwnedObject.userInv#canCall($Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.inv($Heap, this), TBool);
        assert {:id "id393"} b$reqreads#0;
        assert {:id "id394"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.inv (override check)"} OverrideCheck$$_module.OwnedObject.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv (override check)"} OverrideCheck$$_module.OwnedObject.inv(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id395"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id396"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id397"} _module.OwnedObject.inv($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this);
    assert {:id "id398"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id399"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this))));
    assert {:id "id400"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || _module.Object.universe($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
           == _module.Object.universe(this);
    assert {:id "id401"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read($Heap, this, _module.OwnedObject.owner));
    assert {:id "id402"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || _module.OwnedObject.baseUserInv($Heap, this);
    assert {:id "id403"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || _module.OwnedObject.localUserInv($Heap, this);
}



// function declaration for _module.OwnedObject.localInv2
function _module.OwnedObject.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.localInv2 (revealed)
axiom {:id "id404"} 3 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, this)
         || (3 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> _module.OwnedObject.localUserInv2#canCall($prevHeap, $Heap, this)
         && (_module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
           ==> 
          $Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> _module.OwnedObject.unchangedNonvolatileFields#canCall($prevHeap, $Heap, this))
         && _module.OwnedObject.localInv2($prevHeap, $Heap, this)
           == (
            _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
             && ($Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this)
                 && (forall o#0: ref :: 
                  { $Unbox(read($Heap, o#0, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read($prevHeap, o#0, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read($prevHeap, o#0, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0)) } 
                  $Is(o#0, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#0))
                       && $Unbox(read($prevHeap, o#0, _module.OwnedObject.owner)): ref == this
                     ==> $Unbox(read($prevHeap, o#0, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#0, _module.OwnedObject.nonvolatileVersion)): int))
             && ($Is($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#0 := $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref; 
                $Unbox(read($prevHeap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
                   ==> $Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int))));
}

function _module.OwnedObject.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localInv2($prevHeap, $h0, this)
       == _module.OwnedObject.localInv2($prevHeap, $h1, this));

function _module.OwnedObject.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.localInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.localInv2 in class _module.OwnedObject
axiom 3 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.localInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv2($prevHeap, $Heap, this), _module.OwnedObject.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, this)
         || (3 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.localInv2($prevHeap, $Heap, this)
         == _module.OwnedObject.localInv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedObject.localInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var oldOwner#Z#0: ref;
  var let#0#0#0: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        assert {:id "id405"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedObject.localUserInv2#canCall(old($Heap), $Heap, this);
        if (_module.OwnedObject.localUserInv2(old($Heap), $Heap, this))
        {
            assert {:id "id406"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.OwnedObject.nonvolatileVersion];
            if ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int)
            {
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
                assert {:id "id407"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                b$reqreads#2 := (forall $o: ref, $f: Field :: 
                  $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
                if (_module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this))
                {
                    // Begin Comprehension WF check
                    havoc o#1;
                    if ($Is(o#1, Tclass._module.OwnedObject())
                       && $IsAlloc(o#1, Tclass._module.OwnedObject(), $Heap))
                    {
                        assert {:id "id408"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                        assert {:id "id409"} _module.Object.universe(this) != null;
                        assert {:id "id410"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
                        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)))
                        {
                            assert {:id "id411"} o#1 != null;
                            assert {:id "id412"} $IsAlloc(o#1, Tclass._module.OwnedObject(), old($Heap));
                        }

                        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                           && $Unbox(read(old($Heap), o#1, _module.OwnedObject.owner)): ref == this)
                        {
                            assert {:id "id413"} o#1 != null;
                            assert {:id "id414"} $IsAlloc(o#1, Tclass._module.OwnedObject(), old($Heap));
                            assert {:id "id415"} o#1 != null;
                            b$reqreads#3 := $_ReadsFrame[o#1, _module.OwnedObject.nonvolatileVersion];
                        }
                    }

                    // End Comprehension WF check
                }
            }
        }

        if (_module.OwnedObject.localUserInv2(old($Heap), $Heap, this)
           && ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
               && (forall o#2: ref :: 
                { $Unbox(read($Heap, o#2, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(old($Heap), o#2, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(old($Heap), o#2, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2)) } 
                $Is(o#2, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2))
                     && $Unbox(read(old($Heap), o#2, _module.OwnedObject.owner)): ref == this
                   ==> $Unbox(read(old($Heap), o#2, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, o#2, _module.OwnedObject.nonvolatileVersion)): int)))
        {
            assert {:id "id416"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            if ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject()))
            {
                havoc oldOwner#Z#0;
                assert {:id "id417"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                newtype$check#0 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref;
                assert {:id "id418"} $Is(newtype$check#0, Tclass._module.OwnedObject());
                newtype$check#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref;
                assume {:id "id419"} let#0#0#0 == $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(let#0#0#0, Tclass._module.OwnedObject());
                assume {:id "id420"} oldOwner#Z#0 == let#0#0#0;
                assert {:id "id421"} oldOwner#Z#0 != null;
                assert {:id "id422"} $IsAlloc(oldOwner#Z#0, Tclass._module.OwnedObject(), old($Heap));
                assert {:id "id423"} oldOwner#Z#0 != null;
                b$reqreads#4 := $_ReadsFrame[oldOwner#Z#0, _module.OwnedObject.nonvolatileVersion];
                if ($Unbox(read(old($Heap), oldOwner#Z#0, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, oldOwner#Z#0, _module.OwnedObject.nonvolatileVersion)): int)
                {
                    assert {:id "id424"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                    b$reqreads#5 := $_ReadsFrame[this, _module.OwnedObject.nonvolatileVersion];
                }
            }
        }

        assume {:id "id425"} _module.OwnedObject.localInv2(old($Heap), $Heap, this)
           == (
            _module.OwnedObject.localUserInv2(old($Heap), $Heap, this)
             && ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
                 && (forall o#2: ref :: 
                  { $Unbox(read($Heap, o#2, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#2, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#2, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && $Unbox(read(old($Heap), o#2, _module.OwnedObject.owner)): ref == this
                     ==> $Unbox(read(old($Heap), o#2, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#2, _module.OwnedObject.nonvolatileVersion)): int))
             && ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
                $Unbox(read(old($Heap), oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                   ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
        assume _module.OwnedObject.localUserInv2#canCall(old($Heap), $Heap, this)
           && (_module.OwnedObject.localUserInv2(old($Heap), $Heap, this)
             ==> 
            $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.localInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id426"} b$reqreads#0;
        assert {:id "id427"} b$reqreads#1;
        assert {:id "id428"} b$reqreads#2;
        assert {:id "id429"} b$reqreads#3;
        assert {:id "id430"} b$reqreads#4;
        assert {:id "id431"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.localInv2 (override check)"} OverrideCheck$$_module.OwnedObject.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), current$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv2 (override check)"} OverrideCheck$$_module.OwnedObject.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id432"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id433"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedObject.inv2
function _module.OwnedObject.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.inv2
axiom 6 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv2($prevHeap, $Heap, this) } 
    _module.OwnedObject.inv2#canCall($prevHeap, $Heap, this)
         || (6 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> 
      _module.OwnedObject.inv2($prevHeap, $Heap, this)
       ==> _module.OwnedObject.localInv2($prevHeap, $Heap, this));
// definition axiom for _module.OwnedObject.inv2 (revealed)
axiom {:id "id434"} 6 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv2#canCall($prevHeap, $Heap, this)
         || (6 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, this)
         && (_module.OwnedObject.localInv2($prevHeap, $Heap, this)
           ==> _module.OwnedObject.userInv2#canCall($prevHeap, $Heap, this)
             && (_module.OwnedObject.userInv2($prevHeap, $Heap, this)
               ==> 
              $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
                 != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
               ==> _module.Object.localInv#canCall($Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                 && (_module.Object.localInv($Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                   ==> _module.Object.localInv2#canCall($prevHeap, $Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                     && (_module.Object.localInv2($prevHeap, $Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                       ==> _module.Object.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                         && (_module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                           ==> (var currOwner#0 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                            $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), $prevHeap)
                               ==> _module.Object.localInv2#canCall($prevHeap, $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)))))))
         && _module.OwnedObject.inv2($prevHeap, $Heap, this)
           == (
            _module.OwnedObject.localInv2($prevHeap, $Heap, this)
             && _module.OwnedObject.userInv2($prevHeap, $Heap, this)
             && ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
                 != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
               ==> _module.Object.localInv($Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv2($prevHeap, $Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                 && (var currOwner#0 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                  $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), $prevHeap)
                     ==> _module.Object.localInv2($prevHeap, $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)))));
}

function _module.OwnedObject.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.inv2($prevHeap, $h0, this)
       == _module.OwnedObject.inv2($prevHeap, $h1, this));

function _module.OwnedObject.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.inv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.inv2 in class _module.OwnedObject
axiom 6 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.inv2($prevHeap, $Heap, this), _module.OwnedObject.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv2#canCall($prevHeap, $Heap, this)
         || (6 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.inv2($prevHeap, $Heap, this)
         == _module.OwnedObject.inv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedObject.inv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 6 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id435"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
       || _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this);
  ensures {:id "id436"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id437"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id438"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> (forall o#0: ref :: 
          { $Unbox(read(current$Heap, o#0, _module.OwnedObject.nonvolatileVersion)): int } 
            { $Unbox(read(previous$Heap, o#0, _module.OwnedObject.nonvolatileVersion)): int } 
            { $Unbox(read(previous$Heap, o#0, _module.OwnedObject.owner)): ref } 
            { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#0)) } 
          $Is(o#0, Tclass._module.OwnedObject())
               && 
              Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#0))
               && $Unbox(read(previous$Heap, o#0, _module.OwnedObject.owner)): ref == this
             ==> $Unbox(read(previous$Heap, o#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, o#0, _module.OwnedObject.nonvolatileVersion)): int));
  ensures {:id "id439"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var currOwner#Z#0: ref;
  var let#0#0#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id440"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assert {:id "id441"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id442"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id443"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id444"} _module.OwnedObject.localInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id445"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
               ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        assert {:id "id446"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this);
        if (_module.OwnedObject.localInv2(old($Heap), $Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id447"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.userInv2#canCall(old($Heap), $Heap, this);
        }

        if (_module.OwnedObject.localInv2(old($Heap), $Heap, this)
           && _module.OwnedObject.userInv2(old($Heap), $Heap, this))
        {
            assert {:id "id448"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#2 := $_ReadsFrame[this, _module.OwnedObject.owner];
            if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
            {
                assert {:id "id449"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                assert {:id "id450"} $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox(read(old($Heap), this, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  $Heap);
                b$reqreads#3 := (forall $o: ref, $f: Field :: 
                  $o != null
                       && $Unbox(read($Heap, $o, alloc)): bool
                       && $Unbox(read($Heap, $o, alloc)): bool
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.Object.localInv#canCall($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref);
                if (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref))
                {
                    assert {:id "id451"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                    assert {:id "id452"} $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox(read(old($Heap), this, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      $Heap);
                    assert {:id "id453"} $IsAlloc($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Object(), 
                      old($Heap));
                    b$reqreads#4 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.localInv2#canCall(old($Heap), 
                      $Heap, 
                      $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref);
                }

                if (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                   && _module.Object.localInv2(old($Heap), 
                    $Heap, 
                    $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref))
                {
                    b$reqreads#5 := $_ReadsFrame[this, _module.OwnedObject.owner];
                    assert {:id "id454"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox(read($Heap, this, _module.OwnedObject.owner), Tclass._module.Object?(), $Heap);
                    b$reqreads#6 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
                }

                if (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                   && _module.Object.localInv2(old($Heap), 
                    $Heap, 
                    $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                   && _module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))
                {
                    havoc currOwner#Z#0;
                    b$reqreads#7 := $_ReadsFrame[this, _module.OwnedObject.owner];
                    assume {:id "id455"} let#0#0#0 == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0#0#0, Tclass._module.Object());
                    assume {:id "id456"} currOwner#Z#0 == let#0#0#0;
                    if ($IsAllocBox($Box(currOwner#Z#0), Tclass._module.Object(), old($Heap)))
                    {
                        b$reqreads#8 := $_ReadsFrame[this, _module.OwnedObject.owner];
                        assert {:id "id457"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox(read($Heap, this, _module.OwnedObject.owner), Tclass._module.Object?(), $Heap);
                        assert {:id "id458"} $IsAlloc($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref, 
                          Tclass._module.Object(), 
                          old($Heap));
                        b$reqreads#9 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && $Unbox(read($Heap, $o, alloc)): bool
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
                    }
                }
            }
        }

        assume {:id "id459"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
           == (
            _module.OwnedObject.localInv2(old($Heap), $Heap, this)
             && _module.OwnedObject.userInv2(old($Heap), $Heap, this)
             && ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
                 != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
               ==> _module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv2(old($Heap), 
                  $Heap, 
                  $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                 && (var currOwner#1 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                  $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), old($Heap))
                     ==> _module.Object.localInv2(old($Heap), $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))));
        assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
           && (_module.OwnedObject.localInv2(old($Heap), $Heap, this)
             ==> _module.OwnedObject.userInv2#canCall(old($Heap), $Heap, this)
               && (_module.OwnedObject.userInv2(old($Heap), $Heap, this)
                 ==> 
                $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
                   != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
                 ==> _module.Object.localInv#canCall($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                   && (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                     ==> _module.Object.localInv2#canCall(old($Heap), 
                        $Heap, 
                        $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                       && (_module.Object.localInv2(old($Heap), 
                          $Heap, 
                          $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                         ==> _module.Object.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                           && (_module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                             ==> (var currOwner#1 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                              $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), old($Heap))
                                 ==> _module.Object.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)))))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.inv2(old($Heap), $Heap, this), TBool);
        assert {:id "id460"} b$reqreads#0;
        assert {:id "id461"} b$reqreads#1;
        assert {:id "id462"} b$reqreads#2;
        assert {:id "id463"} b$reqreads#3;
        assert {:id "id464"} b$reqreads#4;
        assert {:id "id465"} b$reqreads#5;
        assert {:id "id466"} b$reqreads#6;
        assert {:id "id467"} b$reqreads#7;
        assert {:id "id468"} b$reqreads#8;
        assert {:id "id469"} b$reqreads#9;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.inv2 (override check)"} OverrideCheck$$_module.OwnedObject.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), current$Heap));
  free requires 6 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv2 (override check)"} OverrideCheck$$_module.OwnedObject.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id470"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id471"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id472"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this);
    assert {:id "id473"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
         || _module.OwnedObject.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id474"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> 
          _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
           ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
             || $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
    assert {:id "id475"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> 
          _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
           ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
             || _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, this));
    assert {:id "id476"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> (forall o#1: ref :: 
            { $Unbox(read($Heap, o#1, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#1, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#1, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#1)) } 
            $Is(o#1, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1))
                 && $Unbox(read(old($Heap), o#1, _module.OwnedObject.owner)): ref == this
               ==> $Unbox(read(old($Heap), o#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#1, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id477"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
         || ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
            Tclass._module.OwnedObject())
           ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
            $Unbox(read(old($Heap), oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
               ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
}



// function declaration for _module.OwnedObject.isOwnedObject
function _module.OwnedObject.isOwnedObject(this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.isOwnedObject (revealed)
axiom {:id "id478"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.isOwnedObject(this) } 
    _module.OwnedObject.isOwnedObject#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.OwnedObject.isOwnedObject(this) == Lit(true));
// definition axiom for _module.OwnedObject.isOwnedObject for all literals (revealed)
axiom {:id "id479"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.OwnedObject.isOwnedObject(Lit(this)) } 
    _module.OwnedObject.isOwnedObject#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.OwnedObject.isOwnedObject(Lit(this)) == Lit(true));
}

function _module.OwnedObject.isOwnedObject#canCall(this: ref) : bool;

function _module.OwnedObject.isOwnedObject#requires(ref) : bool;

// #requires axiom for _module.OwnedObject.isOwnedObject
axiom (forall this: ref :: 
  { _module.OwnedObject.isOwnedObject#requires(this) } 
  this != null && $Is(this, Tclass._module.OwnedObject())
     ==> _module.OwnedObject.isOwnedObject#requires(this) == true);

// override axiom for _module.Object.isOwnedObject in class _module.OwnedObject
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Object.isOwnedObject(this), $Is(this, Tclass._module.OwnedObject()) } 
      { _module.Object.isOwnedObject(this), _module.OwnedObject.isOwnedObject(this) } 
    _module.OwnedObject.isOwnedObject#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.isOwnedObject(this) == _module.OwnedObject.isOwnedObject(this));

procedure {:verboseName "OwnedObject.isOwnedObject (well-formedness)"} CheckWellformed$$_module.OwnedObject.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedObject.isOwnedObject (override check)"} OverrideCheck$$_module.OwnedObject.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.isOwnedObject (override check)"} OverrideCheck$$_module.OwnedObject.isOwnedObject(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id481"} true;
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id482"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.OwnedObject.unchangedNonvolatileFields
function _module.OwnedObject.unchangedNonvolatileFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.unchangedNonvolatileFields (revealed)
axiom {:id "id483"} 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.unchangedNonvolatileFields#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           ==> _module.OwnedObject.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this))
         && _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this)
           == ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
             && _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)));
}

function _module.OwnedObject.unchangedNonvolatileFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.unchangedNonvolatileFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $h0, this)
       == _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $h1, this));

function _module.OwnedObject.unchangedNonvolatileFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.unchangedNonvolatileFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.unchangedNonvolatileFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.unchangedNonvolatileFields#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "OwnedObject.unchangedNonvolatileFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.unchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.unchangedNonvolatileFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.unchangedNonvolatileFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id484"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.OwnedObject.owner];
        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
           == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id485"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id486"} _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
           == ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
             && _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, this));
        assume $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           ==> _module.OwnedObject.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this), TBool);
        assert {:id "id487"} b$reqreads#0;
        assert {:id "id488"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.proveUnchangedNonvolatileFields (well-formedness)"} CheckWellFormed$$_module.OwnedObject.proveUnchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.proveUnchangedNonvolatileFields (well-formedness)"} CheckWellFormed$$_module.OwnedObject.proveUnchangedNonvolatileFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: proveUnchangedNonvolatileFields, CheckWellFormed$$_module.OwnedObject.proveUnchangedNonvolatileFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id489"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume {:id "id490"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id491"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
    assume {:id "id492"} _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this);
}



procedure {:verboseName "OwnedObject.proveUnchangedNonvolatileFields (call)"} Call$$_module.OwnedObject.proveUnchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  // user-defined preconditions
  requires {:id "id493"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id494"} _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
     && 
    $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
       == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
     && _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OwnedObject.proveUnchangedNonvolatileFields (correctness)"} Impl$$_module.OwnedObject.proveUnchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  requires {:id "id495"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id496"} _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref;
  ensures {:id "id497"} _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
       || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.proveUnchangedNonvolatileFields (correctness)"} Impl$$_module.OwnedObject.proveUnchangedNonvolatileFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: proveUnchangedNonvolatileFields, Impl$$_module.OwnedObject.proveUnchangedNonvolatileFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(215,40)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id498"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    call {:id "id499"} Call$$_module.OwnedObject.proveUnchangedNonvolatileUserFields(old($Heap), $Heap, this);
    // TrCallStmt: After ProcessCallStmt
}



// function declaration for _module.OwnedObject.unchangedNonvolatileUserFields
function _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.OwnedObject.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.OwnedObject.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "OwnedObject.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "OwnedObject.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.OwnedObject.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.OwnedObject.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: proveUnchangedNonvolatileUserFields, CheckWellFormed$$_module.OwnedObject.proveUnchangedNonvolatileUserFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id500"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume {:id "id501"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id502"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume _module.OwnedObject.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
    assume {:id "id503"} _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, this);
}



procedure {:verboseName "OwnedObject.proveUnchangedNonvolatileUserFields (call)"} Call$$_module.OwnedObject.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  // user-defined preconditions
  requires {:id "id504"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id505"} _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for _module.OwnedObject.baseUserInv
function _module.OwnedObject.baseUserInv($heap: Heap, this: ref) : bool;

function _module.OwnedObject.baseUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.baseUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.baseUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.baseUserInv($h0, this)
       == _module.OwnedObject.baseUserInv($h1, this));

function _module.OwnedObject.baseUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.baseUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.baseUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.baseUserInv#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.baseUserInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.baseUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.OwnedObject.localUserInv
function _module.OwnedObject.localUserInv($heap: Heap, this: ref) : bool;

function _module.OwnedObject.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localUserInv($h0, this)
       == _module.OwnedObject.localUserInv($h1, this));

function _module.OwnedObject.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.localUserInv#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.localUserInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.OwnedObject.localUserInv2
function _module.OwnedObject.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.OwnedObject.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localUserInv2($prevHeap, $h0, this)
       == _module.OwnedObject.localUserInv2($prevHeap, $h1, this));

function _module.OwnedObject.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.localUserInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "OwnedObject.localUserInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.OwnedObject.userInv
function _module.OwnedObject.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.userInv
axiom 6 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this) } 
    _module.OwnedObject.userInv#canCall($Heap, this)
         || (6 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> 
      _module.OwnedObject.userInv($Heap, this)
       ==> _module.OwnedObject.localUserInv($Heap, this));
}

function _module.OwnedObject.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.userInv($h0, this) == _module.OwnedObject.userInv($h1, this));

function _module.OwnedObject.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.userInv#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.userInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id506"} _module.OwnedObject.userInv($Heap, this)
     ==> _module.OwnedObject.localUserInv($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.userInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id507"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.userInv#canCall($Heap, this);
            assume {:id "id508"} _module.OwnedObject.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assume _module.OwnedObject.localUserInv#canCall($Heap, this);
            assume {:id "id509"} _module.OwnedObject.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id510"} _module.OwnedObject.userInv($Heap, this)
               ==> _module.OwnedObject.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module.OwnedObject.userInv2
function _module.OwnedObject.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.userInv2
axiom 5 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this) } 
    _module.OwnedObject.userInv2#canCall($prevHeap, $Heap, this)
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> 
      _module.OwnedObject.userInv2($prevHeap, $Heap, this)
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this));
}

function _module.OwnedObject.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.userInv2($prevHeap, $h0, this)
       == _module.OwnedObject.userInv2($prevHeap, $h1, this));

function _module.OwnedObject.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.userInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "OwnedObject.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 5 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id511"} _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id512"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assert {:id "id513"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id514"} _module.OwnedObject.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id515"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assume _module.OwnedObject.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id516"} _module.OwnedObject.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id517"} _module.OwnedObject.userInv2(old($Heap), $Heap, this)
               ==> _module.OwnedObject.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// $Is axiom for non-null type _module.OwnedObject
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.OwnedObject()) } 
    { $Is(c#0, Tclass._module.OwnedObject?()) } 
  $Is(c#0, Tclass._module.OwnedObject())
     <==> $Is(c#0, Tclass._module.OwnedObject?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.OwnedObject
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.OwnedObject(), $h) } 
    { $IsAlloc(c#0, Tclass._module.OwnedObject?(), $h) } 
  $IsAlloc(c#0, Tclass._module.OwnedObject(), $h)
     <==> $IsAlloc(c#0, Tclass._module.OwnedObject?(), $h));

const unique class._module.EmptyType?: ClassName;

function Tclass._module.EmptyType?() : Ty
uses {
// Tclass._module.EmptyType? Tag
axiom Tag(Tclass._module.EmptyType?()) == Tagclass._module.EmptyType?
   && TagFamily(Tclass._module.EmptyType?()) == tytagFamily$EmptyType;
axiom implements$_module.OwnedObject(Tclass._module.EmptyType?());
}

const unique Tagclass._module.EmptyType?: TyTag;

// Box/unbox axiom for Tclass._module.EmptyType?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.EmptyType?()) } 
  $IsBox(bx, Tclass._module.EmptyType?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.EmptyType?()));

// $Is axiom for class EmptyType
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.EmptyType?()) } 
  $Is($o, Tclass._module.EmptyType?())
     <==> $o == null || dtype($o) == Tclass._module.EmptyType?());

// $IsAlloc axiom for class EmptyType
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.EmptyType?(), $h) } 
  $IsAlloc($o, Tclass._module.EmptyType?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// function declaration for _module.EmptyType.unchangedNonvolatileUserFields
function _module.EmptyType.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.EmptyType.unchangedNonvolatileUserFields (revealed)
axiom {:id "id518"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.EmptyType.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.EmptyType())
           && $IsAlloc(this, Tclass._module.EmptyType(), $prevHeap))
       ==> _module.EmptyType.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == Lit(true));
}

function _module.EmptyType.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function Tclass._module.EmptyType() : Ty
uses {
// Tclass._module.EmptyType Tag
axiom Tag(Tclass._module.EmptyType()) == Tagclass._module.EmptyType
   && TagFamily(Tclass._module.EmptyType()) == tytagFamily$EmptyType;
}

const unique Tagclass._module.EmptyType: TyTag;

// Box/unbox axiom for Tclass._module.EmptyType
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.EmptyType()) } 
  $IsBox(bx, Tclass._module.EmptyType())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.EmptyType()));

// frame axiom for _module.EmptyType.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.EmptyType.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.EmptyType())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.EmptyType.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.EmptyType.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.EmptyType.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.EmptyType.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.EmptyType.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $prevHeap)
     ==> _module.EmptyType.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.EmptyType
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.EmptyType()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.EmptyType.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.EmptyType()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.EmptyType.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "EmptyType.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.EmptyType.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "EmptyType.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.EmptyType.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.EmptyType.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var EmptyType_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id520"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    EmptyType_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id521"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



procedure {:verboseName "EmptyType.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.EmptyType.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.EmptyType.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: proveUnchangedNonvolatileUserFields, CheckWellFormed$$_module.EmptyType.proveUnchangedNonvolatileUserFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id522"} $IsAlloc(this, Tclass._module.EmptyType(), old($Heap));
    assume {:id "id523"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.EmptyType?(), $Heap);
    assert {:id "id524"} $IsAlloc(this, Tclass._module.EmptyType(), old($Heap));
    assume _module.EmptyType.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
    assume {:id "id525"} _module.EmptyType.unchangedNonvolatileUserFields(old($Heap), $Heap, this);
}



procedure {:verboseName "EmptyType.proveUnchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.EmptyType.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.proveUnchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.EmptyType.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id526"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id527"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id528"} true;
    assert {:id "id529"} (forall $o: ref, $f: Field :: true);
    assert {:id "id530"} (forall $o: ref, $f: Field :: true);
    assume {:id "id531"} _module.EmptyType.unchangedNonvolatileUserFields(old($Heap), $Heap, this);
    assert {:id "id532"} _module.EmptyType.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.EmptyType.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || Lit(true);
}



procedure {:verboseName "EmptyType.proveUnchangedNonvolatileUserFields (call)"} Call$$_module.EmptyType.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap));
  // user-defined preconditions
  requires {:id "id533"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.EmptyType.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id534"} _module.EmptyType.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     && 
    _module.EmptyType.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
     && Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "EmptyType.proveUnchangedNonvolatileUserFields (correctness)"} Impl$$_module.EmptyType.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  requires {:id "id535"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.EmptyType.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id536"} _module.EmptyType.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.EmptyType.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.proveUnchangedNonvolatileUserFields (correctness)"} Impl$$_module.EmptyType.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: proveUnchangedNonvolatileUserFields, Impl$$_module.EmptyType.proveUnchangedNonvolatileUserFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.EmptyType.baseUserInv
function _module.EmptyType.baseUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.EmptyType.baseUserInv (revealed)
axiom {:id "id537"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.EmptyType.baseUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.baseUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.EmptyType())
           && $IsAlloc(this, Tclass._module.EmptyType(), $Heap))
       ==> _module.EmptyType.baseUserInv($Heap, this) == Lit(true && true));
}

function _module.EmptyType.baseUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.EmptyType.baseUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.EmptyType.baseUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.EmptyType.baseUserInv($h0, this)
       == _module.EmptyType.baseUserInv($h1, this));

function _module.EmptyType.baseUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.EmptyType.baseUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.EmptyType.baseUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $Heap)
     ==> _module.EmptyType.baseUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.baseUserInv in class _module.EmptyType
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.baseUserInv($Heap, this), $Is(this, Tclass._module.EmptyType()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.baseUserInv($Heap, this), _module.EmptyType.baseUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.baseUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.EmptyType()))
       ==> _module.OwnedObject.baseUserInv($Heap, this)
         == _module.EmptyType.baseUserInv($Heap, this));

procedure {:verboseName "EmptyType.baseUserInv (well-formedness)"} CheckWellformed$$_module.EmptyType.baseUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "EmptyType.baseUserInv (override check)"} OverrideCheck$$_module.EmptyType.baseUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.baseUserInv (override check)"} OverrideCheck$$_module.EmptyType.baseUserInv(this: ref)
{
  var EmptyType_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id539"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    EmptyType_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id540"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.EmptyType.localUserInv
function _module.EmptyType.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.EmptyType.localUserInv (revealed)
axiom {:id "id541"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.EmptyType.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.EmptyType())
           && $IsAlloc(this, Tclass._module.EmptyType(), $Heap))
       ==> _module.EmptyType.localUserInv($Heap, this) == Lit(true && true));
}

function _module.EmptyType.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.EmptyType.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.EmptyType.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.EmptyType.localUserInv($h0, this)
       == _module.EmptyType.localUserInv($h1, this));

function _module.EmptyType.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.EmptyType.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.EmptyType.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $Heap)
     ==> _module.EmptyType.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.EmptyType
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.EmptyType()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.EmptyType.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.EmptyType()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.EmptyType.localUserInv($Heap, this));

procedure {:verboseName "EmptyType.localUserInv (well-formedness)"} CheckWellformed$$_module.EmptyType.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "EmptyType.localUserInv (override check)"} OverrideCheck$$_module.EmptyType.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.localUserInv (override check)"} OverrideCheck$$_module.EmptyType.localUserInv(this: ref)
{
  var EmptyType_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id543"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    EmptyType_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id544"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.EmptyType.userInv
function _module.EmptyType.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.EmptyType.userInv
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.EmptyType.userInv($Heap, this) } 
    _module.EmptyType.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.EmptyType())
           && $IsAlloc(this, Tclass._module.EmptyType(), $Heap))
       ==> 
      _module.EmptyType.userInv($Heap, this)
       ==> _module.EmptyType.localUserInv($Heap, this));
// definition axiom for _module.EmptyType.userInv (revealed)
axiom {:id "id545"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.EmptyType.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.EmptyType())
           && $IsAlloc(this, Tclass._module.EmptyType(), $Heap))
       ==> (Lit(true) ==> _module.EmptyType.localUserInv#canCall($Heap, this))
         && _module.EmptyType.userInv($Heap, this)
           == (true && _module.EmptyType.localUserInv($Heap, this)));
}

function _module.EmptyType.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.EmptyType.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.EmptyType.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.EmptyType.userInv($h0, this) == _module.EmptyType.userInv($h1, this));

function _module.EmptyType.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.EmptyType.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.EmptyType.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $Heap)
     ==> _module.EmptyType.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.EmptyType
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.EmptyType()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.EmptyType.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.EmptyType()))
       ==> _module.OwnedObject.userInv($Heap, this)
         == _module.EmptyType.userInv($Heap, this));

procedure {:verboseName "EmptyType.userInv (well-formedness)"} CheckWellformed$$_module.EmptyType.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id546"} _module.EmptyType.userInv($Heap, this)
     ==> 
    _module.EmptyType.localUserInv#canCall($Heap, this)
     ==> _module.EmptyType.localUserInv($Heap, this) || Lit(true);
  ensures {:id "id547"} _module.EmptyType.userInv($Heap, this)
     ==> 
    _module.EmptyType.localUserInv#canCall($Heap, this)
     ==> _module.EmptyType.localUserInv($Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.userInv (well-formedness)"} CheckWellformed$$_module.EmptyType.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.EmptyType?(), $Heap);
            assert {:id "id548"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.EmptyType.userInv#canCall($Heap, this);
            assume {:id "id549"} _module.EmptyType.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.EmptyType?(), $Heap);
            assume _module.EmptyType.localUserInv#canCall($Heap, this);
            assume {:id "id550"} _module.EmptyType.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id551"} _module.EmptyType.userInv($Heap, this)
               ==> _module.EmptyType.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.EmptyType?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.EmptyType.localUserInv#canCall($Heap, this);
        }

        assume {:id "id552"} _module.EmptyType.userInv($Heap, this)
           == (true && _module.EmptyType.localUserInv($Heap, this));
        assume Lit(true) ==> _module.EmptyType.localUserInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.EmptyType.userInv($Heap, this), TBool);
        assert {:id "id553"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "EmptyType.userInv (override check)"} OverrideCheck$$_module.EmptyType.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.userInv (override check)"} OverrideCheck$$_module.EmptyType.userInv(this: ref)
{
  var EmptyType_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id554"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    EmptyType_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id555"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id556"} _module.EmptyType.userInv($Heap, this)
       ==> _module.EmptyType.localUserInv($Heap, this);
    assert {:id "id557"} _module.EmptyType.userInv($Heap, this)
       ==> 
      _module.EmptyType.localUserInv#canCall($Heap, this)
       ==> _module.EmptyType.localUserInv($Heap, this) || Lit(true);
    assert {:id "id558"} _module.EmptyType.userInv($Heap, this)
       ==> 
      _module.EmptyType.localUserInv#canCall($Heap, this)
       ==> _module.EmptyType.localUserInv($Heap, this) || Lit(true);
}



// function declaration for _module.EmptyType.localUserInv2
function _module.EmptyType.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.EmptyType.localUserInv2 (revealed)
axiom {:id "id559"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.EmptyType.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.EmptyType())
           && $IsAlloc(this, Tclass._module.EmptyType(), $prevHeap))
       ==> _module.EmptyType.localUserInv2($prevHeap, $Heap, this) == Lit(true && true));
}

function _module.EmptyType.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.EmptyType.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.EmptyType.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.EmptyType.localUserInv2($prevHeap, $h0, this)
       == _module.EmptyType.localUserInv2($prevHeap, $h1, this));

function _module.EmptyType.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.EmptyType.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.EmptyType.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $prevHeap)
     ==> _module.EmptyType.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.EmptyType
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.EmptyType()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.EmptyType.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.EmptyType()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.EmptyType.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "EmptyType.localUserInv2 (well-formedness)"} CheckWellformed$$_module.EmptyType.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "EmptyType.localUserInv2 (override check)"} OverrideCheck$$_module.EmptyType.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.localUserInv2 (override check)"} OverrideCheck$$_module.EmptyType.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var EmptyType_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id561"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    EmptyType_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id562"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.EmptyType.userInv2
function _module.EmptyType.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.EmptyType.userInv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.EmptyType.userInv2($prevHeap, $Heap, this) } 
    _module.EmptyType.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.EmptyType())
           && $IsAlloc(this, Tclass._module.EmptyType(), $prevHeap))
       ==> 
      _module.EmptyType.userInv2($prevHeap, $Heap, this)
       ==> _module.EmptyType.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.EmptyType.userInv2 (revealed)
axiom {:id "id563"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.EmptyType.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.EmptyType())
           && $IsAlloc(this, Tclass._module.EmptyType(), $prevHeap))
       ==> (Lit(true) ==> _module.EmptyType.localUserInv2#canCall($prevHeap, $Heap, this))
         && _module.EmptyType.userInv2($prevHeap, $Heap, this)
           == (true && _module.EmptyType.localUserInv2($prevHeap, $Heap, this)));
}

function _module.EmptyType.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.EmptyType.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.EmptyType.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.EmptyType.userInv2($prevHeap, $h0, this)
       == _module.EmptyType.userInv2($prevHeap, $h1, this));

function _module.EmptyType.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.EmptyType.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.EmptyType.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $prevHeap)
     ==> _module.EmptyType.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.EmptyType
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.EmptyType()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.EmptyType.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.EmptyType.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.EmptyType()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.EmptyType.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "EmptyType.userInv2 (well-formedness)"} CheckWellformed$$_module.EmptyType.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id564"} _module.EmptyType.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.EmptyType.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.EmptyType.localUserInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id565"} _module.EmptyType.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.EmptyType.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.EmptyType.localUserInv2(previous$Heap, current$Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.userInv2 (well-formedness)"} CheckWellformed$$_module.EmptyType.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.EmptyType?(), $Heap);
            assert {:id "id566"} $IsAlloc(this, Tclass._module.EmptyType(), old($Heap));
            assert {:id "id567"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.EmptyType.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id568"} _module.EmptyType.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.EmptyType?(), $Heap);
            assert {:id "id569"} $IsAlloc(this, Tclass._module.EmptyType(), old($Heap));
            assume _module.EmptyType.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id570"} _module.EmptyType.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id571"} _module.EmptyType.userInv2(old($Heap), $Heap, this)
               ==> _module.EmptyType.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.EmptyType?(), $Heap);
            assert {:id "id572"} $IsAlloc(this, Tclass._module.EmptyType(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.EmptyType.localUserInv2#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id573"} _module.EmptyType.userInv2(old($Heap), $Heap, this)
           == (true && _module.EmptyType.localUserInv2(old($Heap), $Heap, this));
        assume Lit(true) ==> _module.EmptyType.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.EmptyType.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id574"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "EmptyType.userInv2 (override check)"} OverrideCheck$$_module.EmptyType.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.userInv2 (override check)"} OverrideCheck$$_module.EmptyType.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var EmptyType_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id575"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    EmptyType_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id576"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id577"} _module.EmptyType.userInv2(old($Heap), $Heap, this)
       ==> _module.EmptyType.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id578"} _module.EmptyType.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.EmptyType.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.EmptyType.localUserInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id579"} _module.EmptyType.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.EmptyType.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.EmptyType.localUserInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "EmptyType.admissibility (well-formedness)"} CheckWellFormed$$_module.EmptyType.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.admissibility (well-formedness)"} CheckWellFormed$$_module.EmptyType.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.EmptyType.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id580"} $IsAlloc(this, Tclass._module.EmptyType(), old($Heap));
    assert {:id "id581"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id582"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id583"} $IsAlloc(this, Tclass._module.EmptyType(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id584"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id585"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "EmptyType.admissibility (override check)"} OverrideCheck$$_module.EmptyType.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.admissibility (override check)"} OverrideCheck$$_module.EmptyType.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id586"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id587"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id588"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#0: ref :: 
                  { _module.Object.universe(o#0) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0)) } 
                  $Is(o#0, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#0))
                     ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                       && o#0 != _module.Object.universe(this))));
    assert {:id "id589"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this))));
    assert {:id "id590"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (forall o#2: ref :: 
              { _module.Object.inv(old($Heap), o#2) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2))
                 ==> _module.Object.inv(old($Heap), o#2)));
    assert {:id "id591"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id592"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#3: ref :: 
                  { _module.Object.universe(o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                       && o#3 != _module.Object.universe(this))));
    assert {:id "id593"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id594"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#4: ref :: 
                      { _module.Object.universe(o#4) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#4)) } 
                      $Is(o#4, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#4))
                         ==> _module.Object.universe(o#4) == _module.Object.universe(this)
                           && o#4 != _module.Object.universe(this)))));
    assert {:id "id595"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#5: ref :: 
                  { _module.Object.inv(old($Heap), o#5) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#5)) } 
                  $Is(o#5, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5))
                     ==> _module.Object.inv(old($Heap), o#5))));
    assert {:id "id596"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.universe(o#6) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                       && o#6 != _module.Object.universe(this))));
    assert {:id "id597"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id598"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id599"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id600"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#9: ref :: 
              { $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9)) } 
              $Is(o#9, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#9))
                 ==> $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int
                   <= $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id601"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall t#0: ref :: 
              { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#0)) } 
                { _module.Object.universe(t#0) } 
                { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0)) } 
              $Is(t#0, Tclass._module.Thread())
                   && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0))
                 ==> _module.Object.universe(t#0) == _module.Object.universe(this)
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(t#0))));
    assert {:id "id602"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#10: ref :: 
              { $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#10)) } 
              $Is(o#10, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10))
                   && $Is($Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#10, _module.OwnedObject.owner))
                 ==> $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id603"} running#0 != null ==> running#0 != null;
    assert {:id "id604"} (forall $o: ref, $f: Field :: true);
    assert {:id "id605"} (forall $o: ref, $f: Field :: true);
    assume {:id "id606"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id607"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id608"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "EmptyType.admissibility (call)"} Call$$_module.EmptyType.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id609"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id610"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  requires {:id "id611"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#12: ref :: 
                { _module.Object.universe(o#12) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> _module.Object.universe(o#12) == _module.Object.universe(this)
                     && o#12 != _module.Object.universe(this))));
  requires {:id "id612"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (forall o#13: ref :: 
            { _module.Object.inv(previous$Heap, o#13) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#13)) } 
            $Is(o#13, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#13))
               ==> _module.Object.inv(previous$Heap, o#13)));
  requires {:id "id613"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id614"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#14: ref :: 
                { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#14))
                   ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                     && o#14 != _module.Object.universe(this))));
  requires {:id "id615"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id616"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#15: ref :: 
                    { _module.Object.universe(o#15) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#15)) } 
                    $Is(o#15, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#15))
                       ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                         && o#15 != _module.Object.universe(this)))));
  requires {:id "id617"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#16: ref :: 
                { _module.Object.inv(previous$Heap, o#16) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#16)) } 
                $Is(o#16, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#16))
                   ==> _module.Object.inv(previous$Heap, o#16))));
  requires {:id "id618"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#17: ref :: 
                { _module.Object.universe(o#17) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#17)) } 
                $Is(o#17, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#17))
                   ==> _module.Object.universe(o#17) == _module.Object.universe(this)
                     && o#17 != _module.Object.universe(this))));
  requires {:id "id619"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id620"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#18: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#18) } 
              { _module.Object.inv(current$Heap, o#18) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#18)) } 
            $Is(o#18, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#18))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#18
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#18))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#18
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#18))));
  requires {:id "id621"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#19: ref :: 
            { _module.Object.inv(current$Heap, o#19) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
            $Is(o#19, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
               ==> _module.Object.inv(current$Heap, o#19)));
  requires {:id "id622"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { $Unbox(read(current$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#20)) } 
            $Is(o#20, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#20))
               ==> $Unbox(read(previous$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int
                 <= $Unbox(read(current$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id623"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall t#1: ref :: 
            { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(t#1)) } 
              { _module.Object.universe(t#1) } 
              { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1)) } 
            $Is(t#1, Tclass._module.Thread())
                 && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1))
               ==> _module.Object.universe(t#1) == _module.Object.universe(this)
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#1))));
  requires {:id "id624"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#21))
                 && $Is($Unbox(read(previous$Heap, o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                read(previous$Heap, o#21, _module.OwnedObject.owner))
               ==> $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id625"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
         && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  free ensures {:id "id626"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "EmptyType.admissibility (correctness)"} Impl$$_module.EmptyType.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id627"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.baseInv(previous$Heap, this)
     && _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
     && _module.Object.baseInv(current$Heap, this)
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, 
      current$Heap, 
      _module.Object.universe(this), 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id628"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this));
  ensures {:id "id629"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id630"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id631"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> (forall o#35: ref :: 
              { $Unbox(read(current$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(previous$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(previous$Heap, o#35, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#35)) } 
              $Is(o#35, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#35))
                   && $Unbox(read(previous$Heap, o#35, _module.OwnedObject.owner)): ref == this
                 ==> $Unbox(read(previous$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id632"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id633"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || _module.OwnedObject.userInv2(previous$Heap, current$Heap, this);
  ensures {:id "id634"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id635"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id636"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id637"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id638"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id639"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#36: ref :: 
                    { _module.Object.universe(o#36) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#36)) } 
                    $Is(o#36, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#36))
                       ==> _module.Object.universe(o#36) == _module.Object.universe(this)
                         && o#36 != _module.Object.universe(this)))));
  ensures {:id "id640"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.Object.universe($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(this));
  ensures {:id "id641"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read(current$Heap, this, _module.OwnedObject.owner)));
  ensures {:id "id642"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.baseUserInv(current$Heap, this));
  ensures {:id "id643"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.localUserInv(current$Heap, this));
  ensures {:id "id644"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType.admissibility (correctness)"} Impl$$_module.EmptyType.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.EmptyType.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "EmptyType._ctor (well-formedness)"} CheckWellFormed$$_module.EmptyType.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref);
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType._ctor (well-formedness)"} CheckWellFormed$$_module.EmptyType.__ctor(universe#0: ref, running#0: ref) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.EmptyType.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    assert {:id "id645"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id646"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id647"} running#0 != null;
    assume {:id "id648"} _module.Object.universe(running#0) == universe#0;
    assert {:id "id649"} running#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(running#0), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.inv#canCall($Heap, running#0);
    assume {:id "id650"} _module.Thread.inv($Heap, running#0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.EmptyType())
       && $IsAlloc(this, Tclass._module.EmptyType(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id651"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id652"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id653"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id654"} _module.Universe.globalInv2(old($Heap), $Heap, universe#0);
    assume {:id "id655"} _module.Object.universe(this) == universe#0;
    assume {:id "id656"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assert {:id "id657"} universe#0 != null;
    assert {:id "id658"} universe#0 != null;
    assert {:id "id659"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id660"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "EmptyType._ctor (call)"} Call$$_module.EmptyType.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.EmptyType())
         && $IsAlloc(this, Tclass._module.EmptyType(), $Heap));
  // user-defined preconditions
  requires {:id "id661"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0 && o#0 != universe#0));
  requires {:id "id662"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id663"} _module.Object.universe(running#0) == universe#0;
  requires {:id "id664"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0) || Lit(true);
  requires {:id "id665"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0) || Lit(true));
  requires {:id "id666"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                $Box(running#0))));
  requires {:id "id667"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(running#0))
                 ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(running#0))
                   || (forall o#2: ref :: 
                    { _module.Object.universe(o#2) } 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                        $Box(o#2)) } 
                    $Is(o#2, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                          $Box(o#2))
                       ==> _module.Object.universe(o#2) == _module.Object.universe(running#0)
                         && o#2 != _module.Object.universe(running#0)))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id668"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id669"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  free ensures true;
  ensures {:id "id670"} _module.Object.universe(this) == universe#0;
  ensures {:id "id671"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id672"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "EmptyType._ctor (correctness)"} Impl$$_module.EmptyType.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id673"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#8: ref :: 
      { _module.Object.inv($Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv($Heap, o#8));
  requires {:id "id674"} _module.Object.universe(running#0) == universe#0;
  free requires {:id "id675"} _module.Thread.inv#canCall($Heap, running#0)
     && 
    _module.Thread.inv($Heap, running#0)
     && 
    true
     && _module.Thread.localInv($Heap, running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id676"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id677"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id678"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id679"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id680"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0) || Lit(true);
  ensures {:id "id681"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  free ensures true;
  ensures {:id "id682"} _module.Object.universe(this) == universe#0;
  ensures {:id "id683"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id684"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyType._ctor (correctness)"} Impl$$_module.EmptyType.__ctor(universe#0: ref, running#0: ref) returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var defass#this.owner: bool;
  var defass#this.universe: bool;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.EmptyType.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(275,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(276,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(277,16)
    assume true;
    assume true;
    this.owner := running#0;
    defass#this.owner := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(275,3)
    assert {:id "id687"} defass#this.owner;
    assert {:id "id688"} defass#this.universe;
    assume this != null && $Is(this, Tclass._module.EmptyType?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(275,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(279,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id689"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id690"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(280,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id691"} universe#0 != null;
    assert {:id "id692"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    call {:id "id693"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(281,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id694"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(282,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id695"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id696"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id697"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id698"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.EmptyType
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.EmptyType()) } 
    { $Is(c#0, Tclass._module.EmptyType?()) } 
  $Is(c#0, Tclass._module.EmptyType())
     <==> $Is(c#0, Tclass._module.EmptyType?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.EmptyType
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.EmptyType(), $h) } 
    { $IsAlloc(c#0, Tclass._module.EmptyType?(), $h) } 
  $IsAlloc(c#0, Tclass._module.EmptyType(), $h)
     <==> $IsAlloc(c#0, Tclass._module.EmptyType?(), $h));

const unique class._module.AtomicCounter?: ClassName;

function Tclass._module.AtomicCounter?() : Ty
uses {
// Tclass._module.AtomicCounter? Tag
axiom Tag(Tclass._module.AtomicCounter?()) == Tagclass._module.AtomicCounter?
   && TagFamily(Tclass._module.AtomicCounter?()) == tytagFamily$AtomicCounter;
axiom implements$_module.OwnedObject(Tclass._module.AtomicCounter?());
}

const unique Tagclass._module.AtomicCounter?: TyTag;

// Box/unbox axiom for Tclass._module.AtomicCounter?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.AtomicCounter?()) } 
  $IsBox(bx, Tclass._module.AtomicCounter?())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.AtomicCounter?()));

// $Is axiom for class AtomicCounter
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.AtomicCounter?()) } 
  $Is($o, Tclass._module.AtomicCounter?())
     <==> $o == null || dtype($o) == Tclass._module.AtomicCounter?());

// $IsAlloc axiom for class AtomicCounter
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.AtomicCounter?(), $h) } 
  $IsAlloc($o, Tclass._module.AtomicCounter?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.AtomicCounter.value: Field
uses {
axiom FDim(_module.AtomicCounter.value) == 0
   && FieldOfDecl(class._module.AtomicCounter?, field$value)
     == _module.AtomicCounter.value
   && !$IsGhostField(_module.AtomicCounter.value);
}

// AtomicCounter.value: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.AtomicCounter.value)): int } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.AtomicCounter?()
     ==> $Is($Unbox(read($h, $o, _module.AtomicCounter.value)): int, TInt));

// AtomicCounter.value: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.AtomicCounter.value)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.AtomicCounter?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.AtomicCounter.value)): int, TInt, $h));

// function declaration for _module.AtomicCounter.unchangedNonvolatileUserFields
function _module.AtomicCounter.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.AtomicCounter.unchangedNonvolatileUserFields (revealed)
axiom {:id "id699"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.AtomicCounter.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AtomicCounter())
           && $IsAlloc(this, Tclass._module.AtomicCounter(), $prevHeap))
       ==> _module.AtomicCounter.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == Lit(true));
}

function _module.AtomicCounter.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function Tclass._module.AtomicCounter() : Ty
uses {
// Tclass._module.AtomicCounter Tag
axiom Tag(Tclass._module.AtomicCounter()) == Tagclass._module.AtomicCounter
   && TagFamily(Tclass._module.AtomicCounter()) == tytagFamily$AtomicCounter;
}

const unique Tagclass._module.AtomicCounter: TyTag;

// Box/unbox axiom for Tclass._module.AtomicCounter
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.AtomicCounter()) } 
  $IsBox(bx, Tclass._module.AtomicCounter())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.AtomicCounter()));

// frame axiom for _module.AtomicCounter.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.AtomicCounter.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.AtomicCounter())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.AtomicCounter.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.AtomicCounter.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.AtomicCounter.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.AtomicCounter.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.AtomicCounter.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $prevHeap)
     ==> _module.AtomicCounter.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.AtomicCounter
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.AtomicCounter()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.AtomicCounter.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.AtomicCounter()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.AtomicCounter.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "AtomicCounter.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.AtomicCounter.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "AtomicCounter.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.AtomicCounter.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.AtomicCounter.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var AtomicCounter_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id701"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    AtomicCounter_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id702"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



procedure {:verboseName "AtomicCounter.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.AtomicCounter.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.AtomicCounter.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: proveUnchangedNonvolatileUserFields, CheckWellFormed$$_module.AtomicCounter.proveUnchangedNonvolatileUserFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id703"} $IsAlloc(this, Tclass._module.AtomicCounter(), old($Heap));
    assume {:id "id704"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.AtomicCounter?(), $Heap);
    assert {:id "id705"} $IsAlloc(this, Tclass._module.AtomicCounter(), old($Heap));
    assume _module.AtomicCounter.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
    assume {:id "id706"} _module.AtomicCounter.unchangedNonvolatileUserFields(old($Heap), $Heap, this);
}



procedure {:verboseName "AtomicCounter.proveUnchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.AtomicCounter.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.proveUnchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.AtomicCounter.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id707"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id708"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id709"} true;
    assert {:id "id710"} (forall $o: ref, $f: Field :: true);
    assert {:id "id711"} (forall $o: ref, $f: Field :: true);
    assume {:id "id712"} _module.AtomicCounter.unchangedNonvolatileUserFields(old($Heap), $Heap, this);
    assert {:id "id713"} _module.AtomicCounter.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.AtomicCounter.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || Lit(true);
}



procedure {:verboseName "AtomicCounter.proveUnchangedNonvolatileUserFields (call)"} Call$$_module.AtomicCounter.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap));
  // user-defined preconditions
  requires {:id "id714"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.AtomicCounter.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id715"} _module.AtomicCounter.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     && 
    _module.AtomicCounter.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
     && Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "AtomicCounter.proveUnchangedNonvolatileUserFields (correctness)"} Impl$$_module.AtomicCounter.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  requires {:id "id716"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.AtomicCounter.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id717"} _module.AtomicCounter.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.AtomicCounter.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.proveUnchangedNonvolatileUserFields (correctness)"} Impl$$_module.AtomicCounter.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: proveUnchangedNonvolatileUserFields, Impl$$_module.AtomicCounter.proveUnchangedNonvolatileUserFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.AtomicCounter.baseUserInv
function _module.AtomicCounter.baseUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.AtomicCounter.baseUserInv (revealed)
axiom {:id "id718"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.AtomicCounter.baseUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.baseUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AtomicCounter())
           && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap))
       ==> _module.AtomicCounter.baseUserInv($Heap, this) == Lit(true && true));
}

function _module.AtomicCounter.baseUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.AtomicCounter.baseUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.AtomicCounter.baseUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.AtomicCounter.baseUserInv($h0, this)
       == _module.AtomicCounter.baseUserInv($h1, this));

function _module.AtomicCounter.baseUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.AtomicCounter.baseUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.AtomicCounter.baseUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap)
     ==> _module.AtomicCounter.baseUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.baseUserInv in class _module.AtomicCounter
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.baseUserInv($Heap, this), $Is(this, Tclass._module.AtomicCounter()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.baseUserInv($Heap, this), _module.AtomicCounter.baseUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.baseUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.AtomicCounter()))
       ==> _module.OwnedObject.baseUserInv($Heap, this)
         == _module.AtomicCounter.baseUserInv($Heap, this));

procedure {:verboseName "AtomicCounter.baseUserInv (well-formedness)"} CheckWellformed$$_module.AtomicCounter.baseUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "AtomicCounter.baseUserInv (override check)"} OverrideCheck$$_module.AtomicCounter.baseUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.baseUserInv (override check)"} OverrideCheck$$_module.AtomicCounter.baseUserInv(this: ref)
{
  var AtomicCounter_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id720"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    AtomicCounter_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id721"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.AtomicCounter.localUserInv
function _module.AtomicCounter.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.AtomicCounter.localUserInv (revealed)
axiom {:id "id722"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.AtomicCounter.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AtomicCounter())
           && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap))
       ==> _module.AtomicCounter.localUserInv($Heap, this) == Lit(true && true));
}

function _module.AtomicCounter.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.AtomicCounter.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.AtomicCounter.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.AtomicCounter.localUserInv($h0, this)
       == _module.AtomicCounter.localUserInv($h1, this));

function _module.AtomicCounter.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.AtomicCounter.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.AtomicCounter.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap)
     ==> _module.AtomicCounter.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.AtomicCounter
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.AtomicCounter()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.AtomicCounter.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.AtomicCounter()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.AtomicCounter.localUserInv($Heap, this));

procedure {:verboseName "AtomicCounter.localUserInv (well-formedness)"} CheckWellformed$$_module.AtomicCounter.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "AtomicCounter.localUserInv (override check)"} OverrideCheck$$_module.AtomicCounter.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.localUserInv (override check)"} OverrideCheck$$_module.AtomicCounter.localUserInv(this: ref)
{
  var AtomicCounter_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id724"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    AtomicCounter_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id725"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.AtomicCounter.userInv
function _module.AtomicCounter.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.AtomicCounter.userInv
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.AtomicCounter.userInv($Heap, this) } 
    _module.AtomicCounter.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AtomicCounter())
           && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap))
       ==> 
      _module.AtomicCounter.userInv($Heap, this)
       ==> _module.AtomicCounter.localUserInv($Heap, this));
// definition axiom for _module.AtomicCounter.userInv (revealed)
axiom {:id "id726"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.AtomicCounter.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AtomicCounter())
           && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap))
       ==> (Lit(true) ==> _module.AtomicCounter.localUserInv#canCall($Heap, this))
         && _module.AtomicCounter.userInv($Heap, this)
           == (true && _module.AtomicCounter.localUserInv($Heap, this)));
}

function _module.AtomicCounter.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.AtomicCounter.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.AtomicCounter.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.AtomicCounter.userInv($h0, this)
       == _module.AtomicCounter.userInv($h1, this));

function _module.AtomicCounter.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.AtomicCounter.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.AtomicCounter.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap)
     ==> _module.AtomicCounter.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.AtomicCounter
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.AtomicCounter()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.AtomicCounter.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.AtomicCounter()))
       ==> _module.OwnedObject.userInv($Heap, this)
         == _module.AtomicCounter.userInv($Heap, this));

procedure {:verboseName "AtomicCounter.userInv (well-formedness)"} CheckWellformed$$_module.AtomicCounter.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id727"} _module.AtomicCounter.userInv($Heap, this)
     ==> 
    _module.AtomicCounter.localUserInv#canCall($Heap, this)
     ==> _module.AtomicCounter.localUserInv($Heap, this) || Lit(true);
  ensures {:id "id728"} _module.AtomicCounter.userInv($Heap, this)
     ==> 
    _module.AtomicCounter.localUserInv#canCall($Heap, this)
     ==> _module.AtomicCounter.localUserInv($Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.userInv (well-formedness)"} CheckWellformed$$_module.AtomicCounter.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.AtomicCounter?(), $Heap);
            assert {:id "id729"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.AtomicCounter.userInv#canCall($Heap, this);
            assume {:id "id730"} _module.AtomicCounter.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.AtomicCounter?(), $Heap);
            assume _module.AtomicCounter.localUserInv#canCall($Heap, this);
            assume {:id "id731"} _module.AtomicCounter.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id732"} _module.AtomicCounter.userInv($Heap, this)
               ==> _module.AtomicCounter.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.AtomicCounter?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.AtomicCounter.localUserInv#canCall($Heap, this);
        }

        assume {:id "id733"} _module.AtomicCounter.userInv($Heap, this)
           == (true && _module.AtomicCounter.localUserInv($Heap, this));
        assume Lit(true) ==> _module.AtomicCounter.localUserInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.AtomicCounter.userInv($Heap, this), TBool);
        assert {:id "id734"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "AtomicCounter.userInv (override check)"} OverrideCheck$$_module.AtomicCounter.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.userInv (override check)"} OverrideCheck$$_module.AtomicCounter.userInv(this: ref)
{
  var AtomicCounter_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id735"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    AtomicCounter_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id736"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id737"} _module.AtomicCounter.userInv($Heap, this)
       ==> _module.AtomicCounter.localUserInv($Heap, this);
    assert {:id "id738"} _module.AtomicCounter.userInv($Heap, this)
       ==> 
      _module.AtomicCounter.localUserInv#canCall($Heap, this)
       ==> _module.AtomicCounter.localUserInv($Heap, this) || Lit(true);
    assert {:id "id739"} _module.AtomicCounter.userInv($Heap, this)
       ==> 
      _module.AtomicCounter.localUserInv#canCall($Heap, this)
       ==> _module.AtomicCounter.localUserInv($Heap, this) || Lit(true);
}



// function declaration for _module.AtomicCounter.localUserInv2
function _module.AtomicCounter.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.AtomicCounter.localUserInv2 (revealed)
axiom {:id "id740"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.AtomicCounter.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AtomicCounter())
           && $IsAlloc(this, Tclass._module.AtomicCounter(), $prevHeap))
       ==> _module.AtomicCounter.localUserInv2($prevHeap, $Heap, this)
         == ($Unbox(read($prevHeap, this, _module.AtomicCounter.value)): int
           <= $Unbox(read($Heap, this, _module.AtomicCounter.value)): int));
}

function _module.AtomicCounter.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.AtomicCounter.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.AtomicCounter.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.AtomicCounter.localUserInv2($prevHeap, $h0, this)
       == _module.AtomicCounter.localUserInv2($prevHeap, $h1, this));

function _module.AtomicCounter.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.AtomicCounter.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.AtomicCounter.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $prevHeap)
     ==> _module.AtomicCounter.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.AtomicCounter
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.AtomicCounter()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.AtomicCounter.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.AtomicCounter()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.AtomicCounter.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "AtomicCounter.localUserInv2 (well-formedness)"} CheckWellformed$$_module.AtomicCounter.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.localUserInv2 (well-formedness)"} CheckWellformed$$_module.AtomicCounter.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id741"} $IsAlloc(this, Tclass._module.AtomicCounter(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.AtomicCounter.value];
        assume {:id "id742"} _module.AtomicCounter.localUserInv2(old($Heap), $Heap, this)
           == ($Unbox(read(old($Heap), this, _module.AtomicCounter.value)): int
             <= $Unbox(read($Heap, this, _module.AtomicCounter.value)): int);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.AtomicCounter.localUserInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id743"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "AtomicCounter.localUserInv2 (override check)"} OverrideCheck$$_module.AtomicCounter.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.localUserInv2 (override check)"} OverrideCheck$$_module.AtomicCounter.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var AtomicCounter_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id744"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    AtomicCounter_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id745"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.AtomicCounter.userInv2
function _module.AtomicCounter.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.AtomicCounter.userInv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.AtomicCounter.userInv2($prevHeap, $Heap, this) } 
    _module.AtomicCounter.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AtomicCounter())
           && $IsAlloc(this, Tclass._module.AtomicCounter(), $prevHeap))
       ==> 
      _module.AtomicCounter.userInv2($prevHeap, $Heap, this)
       ==> _module.AtomicCounter.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.AtomicCounter.userInv2 (revealed)
axiom {:id "id746"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.AtomicCounter.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AtomicCounter())
           && $IsAlloc(this, Tclass._module.AtomicCounter(), $prevHeap))
       ==> (Lit(true)
           ==> _module.AtomicCounter.localUserInv2#canCall($prevHeap, $Heap, this))
         && _module.AtomicCounter.userInv2($prevHeap, $Heap, this)
           == (true && _module.AtomicCounter.localUserInv2($prevHeap, $Heap, this)));
}

function _module.AtomicCounter.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.AtomicCounter.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.AtomicCounter.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.AtomicCounter.userInv2($prevHeap, $h0, this)
       == _module.AtomicCounter.userInv2($prevHeap, $h1, this));

function _module.AtomicCounter.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.AtomicCounter.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.AtomicCounter.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $prevHeap)
     ==> _module.AtomicCounter.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.AtomicCounter
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.AtomicCounter()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.AtomicCounter.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.AtomicCounter.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.AtomicCounter()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.AtomicCounter.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "AtomicCounter.userInv2 (well-formedness)"} CheckWellformed$$_module.AtomicCounter.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id747"} _module.AtomicCounter.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.AtomicCounter.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.AtomicCounter.localUserInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.AtomicCounter.value)): int
         <= $Unbox(read(current$Heap, this, _module.AtomicCounter.value)): int;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.userInv2 (well-formedness)"} CheckWellformed$$_module.AtomicCounter.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.AtomicCounter?(), $Heap);
            assert {:id "id748"} $IsAlloc(this, Tclass._module.AtomicCounter(), old($Heap));
            assert {:id "id749"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.AtomicCounter.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id750"} _module.AtomicCounter.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.AtomicCounter?(), $Heap);
            assert {:id "id751"} $IsAlloc(this, Tclass._module.AtomicCounter(), old($Heap));
            assume _module.AtomicCounter.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id752"} _module.AtomicCounter.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id753"} _module.AtomicCounter.userInv2(old($Heap), $Heap, this)
               ==> _module.AtomicCounter.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.AtomicCounter?(), $Heap);
            assert {:id "id754"} $IsAlloc(this, Tclass._module.AtomicCounter(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.AtomicCounter.localUserInv2#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id755"} _module.AtomicCounter.userInv2(old($Heap), $Heap, this)
           == (true && _module.AtomicCounter.localUserInv2(old($Heap), $Heap, this));
        assume Lit(true)
           ==> _module.AtomicCounter.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.AtomicCounter.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id756"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "AtomicCounter.userInv2 (override check)"} OverrideCheck$$_module.AtomicCounter.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.userInv2 (override check)"} OverrideCheck$$_module.AtomicCounter.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var AtomicCounter_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id757"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    AtomicCounter_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id758"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id759"} _module.AtomicCounter.userInv2(old($Heap), $Heap, this)
       ==> _module.AtomicCounter.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id760"} _module.AtomicCounter.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.AtomicCounter.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.AtomicCounter.localUserInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.AtomicCounter.value)): int
           <= $Unbox(read($Heap, this, _module.AtomicCounter.value)): int;
}



procedure {:verboseName "AtomicCounter.admissibility (well-formedness)"} CheckWellFormed$$_module.AtomicCounter.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.admissibility (well-formedness)"} CheckWellFormed$$_module.AtomicCounter.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.AtomicCounter.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id761"} $IsAlloc(this, Tclass._module.AtomicCounter(), old($Heap));
    assert {:id "id762"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id763"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id764"} $IsAlloc(this, Tclass._module.AtomicCounter(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id765"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id766"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "AtomicCounter.admissibility (override check)"} OverrideCheck$$_module.AtomicCounter.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.admissibility (override check)"} OverrideCheck$$_module.AtomicCounter.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id767"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id768"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id769"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#0: ref :: 
                  { _module.Object.universe(o#0) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0)) } 
                  $Is(o#0, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#0))
                     ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                       && o#0 != _module.Object.universe(this))));
    assert {:id "id770"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this))));
    assert {:id "id771"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (forall o#2: ref :: 
              { _module.Object.inv(old($Heap), o#2) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2))
                 ==> _module.Object.inv(old($Heap), o#2)));
    assert {:id "id772"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id773"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#3: ref :: 
                  { _module.Object.universe(o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                       && o#3 != _module.Object.universe(this))));
    assert {:id "id774"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id775"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#4: ref :: 
                      { _module.Object.universe(o#4) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#4)) } 
                      $Is(o#4, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#4))
                         ==> _module.Object.universe(o#4) == _module.Object.universe(this)
                           && o#4 != _module.Object.universe(this)))));
    assert {:id "id776"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#5: ref :: 
                  { _module.Object.inv(old($Heap), o#5) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#5)) } 
                  $Is(o#5, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5))
                     ==> _module.Object.inv(old($Heap), o#5))));
    assert {:id "id777"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.universe(o#6) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                       && o#6 != _module.Object.universe(this))));
    assert {:id "id778"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id779"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id780"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id781"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#9: ref :: 
              { $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9)) } 
              $Is(o#9, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#9))
                 ==> $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int
                   <= $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id782"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall t#0: ref :: 
              { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#0)) } 
                { _module.Object.universe(t#0) } 
                { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0)) } 
              $Is(t#0, Tclass._module.Thread())
                   && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0))
                 ==> _module.Object.universe(t#0) == _module.Object.universe(this)
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(t#0))));
    assert {:id "id783"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#10: ref :: 
              { $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#10)) } 
              $Is(o#10, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10))
                   && $Is($Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#10, _module.OwnedObject.owner))
                 ==> $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id784"} running#0 != null ==> running#0 != null;
    assert {:id "id785"} (forall $o: ref, $f: Field :: true);
    assert {:id "id786"} (forall $o: ref, $f: Field :: true);
    assume {:id "id787"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id788"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id789"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "AtomicCounter.admissibility (call)"} Call$$_module.AtomicCounter.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id790"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id791"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  requires {:id "id792"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#12: ref :: 
                { _module.Object.universe(o#12) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> _module.Object.universe(o#12) == _module.Object.universe(this)
                     && o#12 != _module.Object.universe(this))));
  requires {:id "id793"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (forall o#13: ref :: 
            { _module.Object.inv(previous$Heap, o#13) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#13)) } 
            $Is(o#13, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#13))
               ==> _module.Object.inv(previous$Heap, o#13)));
  requires {:id "id794"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id795"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#14: ref :: 
                { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#14))
                   ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                     && o#14 != _module.Object.universe(this))));
  requires {:id "id796"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id797"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#15: ref :: 
                    { _module.Object.universe(o#15) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#15)) } 
                    $Is(o#15, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#15))
                       ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                         && o#15 != _module.Object.universe(this)))));
  requires {:id "id798"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#16: ref :: 
                { _module.Object.inv(previous$Heap, o#16) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#16)) } 
                $Is(o#16, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#16))
                   ==> _module.Object.inv(previous$Heap, o#16))));
  requires {:id "id799"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#17: ref :: 
                { _module.Object.universe(o#17) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#17)) } 
                $Is(o#17, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#17))
                   ==> _module.Object.universe(o#17) == _module.Object.universe(this)
                     && o#17 != _module.Object.universe(this))));
  requires {:id "id800"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id801"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#18: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#18) } 
              { _module.Object.inv(current$Heap, o#18) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#18)) } 
            $Is(o#18, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#18))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#18
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#18))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#18
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#18))));
  requires {:id "id802"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#19: ref :: 
            { _module.Object.inv(current$Heap, o#19) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
            $Is(o#19, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
               ==> _module.Object.inv(current$Heap, o#19)));
  requires {:id "id803"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { $Unbox(read(current$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#20)) } 
            $Is(o#20, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#20))
               ==> $Unbox(read(previous$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int
                 <= $Unbox(read(current$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id804"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall t#1: ref :: 
            { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(t#1)) } 
              { _module.Object.universe(t#1) } 
              { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1)) } 
            $Is(t#1, Tclass._module.Thread())
                 && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1))
               ==> _module.Object.universe(t#1) == _module.Object.universe(this)
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#1))));
  requires {:id "id805"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#21))
                 && $Is($Unbox(read(previous$Heap, o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                read(previous$Heap, o#21, _module.OwnedObject.owner))
               ==> $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id806"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
         && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  free ensures {:id "id807"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "AtomicCounter.admissibility (correctness)"} Impl$$_module.AtomicCounter.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id808"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.baseInv(previous$Heap, this)
     && _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
     && _module.Object.baseInv(current$Heap, this)
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, 
      current$Heap, 
      _module.Object.universe(this), 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id809"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this));
  ensures {:id "id810"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id811"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id812"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> (forall o#35: ref :: 
              { $Unbox(read(current$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(previous$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(previous$Heap, o#35, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#35)) } 
              $Is(o#35, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#35))
                   && $Unbox(read(previous$Heap, o#35, _module.OwnedObject.owner)): ref == this
                 ==> $Unbox(read(previous$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id813"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id814"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || _module.OwnedObject.userInv2(previous$Heap, current$Heap, this);
  ensures {:id "id815"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id816"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id817"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id818"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id819"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id820"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#36: ref :: 
                    { _module.Object.universe(o#36) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#36)) } 
                    $Is(o#36, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#36))
                       ==> _module.Object.universe(o#36) == _module.Object.universe(this)
                         && o#36 != _module.Object.universe(this)))));
  ensures {:id "id821"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.Object.universe($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(this));
  ensures {:id "id822"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read(current$Heap, this, _module.OwnedObject.owner)));
  ensures {:id "id823"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.baseUserInv(current$Heap, this));
  ensures {:id "id824"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.localUserInv(current$Heap, this));
  ensures {:id "id825"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter.admissibility (correctness)"} Impl$$_module.AtomicCounter.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.AtomicCounter.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "AtomicCounter._ctor (well-formedness)"} CheckWellFormed$$_module.AtomicCounter.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    initialValue#0: int)
   returns (this: ref);
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter._ctor (well-formedness)"} CheckWellFormed$$_module.AtomicCounter.__ctor(universe#0: ref, running#0: ref, initialValue#0: int) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.AtomicCounter.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    assert {:id "id826"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id827"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id828"} running#0 != null;
    assume {:id "id829"} _module.Object.universe(running#0) == universe#0;
    assert {:id "id830"} running#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(running#0), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.inv#canCall($Heap, running#0);
    assume {:id "id831"} _module.Thread.inv($Heap, running#0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.AtomicCounter())
       && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id832"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id833"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id834"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id835"} _module.Universe.globalInv2(old($Heap), $Heap, universe#0);
    assume {:id "id836"} _module.Object.universe(this) == universe#0;
    assume {:id "id837"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id838"} $Unbox(read($Heap, this, _module.AtomicCounter.value)): int == initialValue#0;
    assert {:id "id839"} universe#0 != null;
    assert {:id "id840"} universe#0 != null;
    assert {:id "id841"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id842"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "AtomicCounter._ctor (call)"} Call$$_module.AtomicCounter.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    initialValue#0: int)
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AtomicCounter())
         && $IsAlloc(this, Tclass._module.AtomicCounter(), $Heap));
  // user-defined preconditions
  requires {:id "id843"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0 && o#0 != universe#0));
  requires {:id "id844"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id845"} _module.Object.universe(running#0) == universe#0;
  requires {:id "id846"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0) || Lit(true);
  requires {:id "id847"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0) || Lit(true));
  requires {:id "id848"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                $Box(running#0))));
  requires {:id "id849"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(running#0))
                 ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(running#0))
                   || (forall o#2: ref :: 
                    { _module.Object.universe(o#2) } 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                        $Box(o#2)) } 
                    $Is(o#2, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                          $Box(o#2))
                       ==> _module.Object.universe(o#2) == _module.Object.universe(running#0)
                         && o#2 != _module.Object.universe(running#0)))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id850"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id851"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  free ensures true;
  ensures {:id "id852"} _module.Object.universe(this) == universe#0;
  ensures {:id "id853"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id854"} $Unbox(read($Heap, this, _module.AtomicCounter.value)): int == initialValue#0;
  free ensures true;
  ensures {:id "id855"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "AtomicCounter._ctor (correctness)"} Impl$$_module.AtomicCounter.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    initialValue#0: int)
   returns (this: ref, $_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id856"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#8: ref :: 
      { _module.Object.inv($Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv($Heap, o#8));
  requires {:id "id857"} _module.Object.universe(running#0) == universe#0;
  free requires {:id "id858"} _module.Thread.inv#canCall($Heap, running#0)
     && 
    _module.Thread.inv($Heap, running#0)
     && 
    true
     && _module.Thread.localInv($Heap, running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id859"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id860"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id861"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id862"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id863"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0) || Lit(true);
  ensures {:id "id864"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  free ensures true;
  ensures {:id "id865"} _module.Object.universe(this) == universe#0;
  ensures {:id "id866"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id867"} $Unbox(read($Heap, this, _module.AtomicCounter.value)): int == initialValue#0;
  free ensures true;
  ensures {:id "id868"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "AtomicCounter._ctor (correctness)"} Impl$$_module.AtomicCounter.__ctor(universe#0: ref, running#0: ref, initialValue#0: int)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.value: int;
  var defass#this.owner: bool;
  var defass#this.universe: bool;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.AtomicCounter.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(321,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(322,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(323,16)
    assume true;
    assume true;
    this.value := initialValue#0;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(324,16)
    assume true;
    assume true;
    this.owner := running#0;
    defass#this.owner := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(321,3)
    assert {:id "id872"} defass#this.owner;
    assert {:id "id873"} defass#this.universe;
    assume this != null && $Is(this, Tclass._module.AtomicCounter?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.AtomicCounter.value)): int == this.value;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(321,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(326,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id874"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id875"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(327,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id876"} universe#0 != null;
    assert {:id "id877"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    call {:id "id878"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(328,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id879"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(329,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id880"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id881"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id882"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id883"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.AtomicCounter
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.AtomicCounter()) } 
    { $Is(c#0, Tclass._module.AtomicCounter?()) } 
  $Is(c#0, Tclass._module.AtomicCounter())
     <==> $Is(c#0, Tclass._module.AtomicCounter?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.AtomicCounter
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.AtomicCounter(), $h) } 
    { $IsAlloc(c#0, Tclass._module.AtomicCounter?(), $h) } 
  $IsAlloc(c#0, Tclass._module.AtomicCounter(), $h)
     <==> $IsAlloc(c#0, Tclass._module.AtomicCounter?(), $h));

const unique class._module.Remaining?: ClassName;

function Tclass._module.Remaining?() : Ty
uses {
// Tclass._module.Remaining? Tag
axiom Tag(Tclass._module.Remaining?()) == Tagclass._module.Remaining?
   && TagFamily(Tclass._module.Remaining?()) == tytagFamily$Remaining;
axiom implements$_module.OwnedObject(Tclass._module.Remaining?());
}

const unique Tagclass._module.Remaining?: TyTag;

// Box/unbox axiom for Tclass._module.Remaining?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Remaining?()) } 
  $IsBox(bx, Tclass._module.Remaining?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Remaining?()));

// $Is axiom for class Remaining
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Remaining?()) } 
  $Is($o, Tclass._module.Remaining?())
     <==> $o == null || dtype($o) == Tclass._module.Remaining?());

// $IsAlloc axiom for class Remaining
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Remaining?(), $h) } 
  $IsAlloc($o, Tclass._module.Remaining?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.Remaining.value: Field
uses {
axiom FDim(_module.Remaining.value) == 0
   && FieldOfDecl(class._module.Remaining?, field$value) == _module.Remaining.value
   && !$IsGhostField(_module.Remaining.value);
}

// Remaining.value: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Remaining.value)): int } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Remaining?()
     ==> $Is($Unbox(read($h, $o, _module.Remaining.value)): int, TInt));

// Remaining.value: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Remaining.value)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Remaining?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Remaining.value)): int, TInt, $h));

// function declaration for _module.Remaining.unchangedNonvolatileUserFields
function _module.Remaining.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Remaining.unchangedNonvolatileUserFields (revealed)
axiom {:id "id884"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Remaining.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Remaining())
           && $IsAlloc(this, Tclass._module.Remaining(), $prevHeap))
       ==> _module.Remaining.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == (true
           && $Unbox(read($prevHeap, this, _module.Remaining.value)): int
             == $Unbox(read($Heap, this, _module.Remaining.value)): int));
}

function _module.Remaining.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function Tclass._module.Remaining() : Ty
uses {
// Tclass._module.Remaining Tag
axiom Tag(Tclass._module.Remaining()) == Tagclass._module.Remaining
   && TagFamily(Tclass._module.Remaining()) == tytagFamily$Remaining;
}

const unique Tagclass._module.Remaining: TyTag;

// Box/unbox axiom for Tclass._module.Remaining
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Remaining()) } 
  $IsBox(bx, Tclass._module.Remaining())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Remaining()));

// frame axiom for _module.Remaining.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Remaining.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Remaining())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Remaining.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.Remaining.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.Remaining.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Remaining.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Remaining.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $prevHeap)
     ==> _module.Remaining.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.Remaining
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.Remaining()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.Remaining.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Remaining()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.Remaining.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "Remaining.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.Remaining.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.Remaining.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            assert {:id "id885"} $IsAlloc(this, Tclass._module.Remaining(), old($Heap));
            b$reqreads#0 := $_ReadsFrame[this, _module.Remaining.value];
        }

        assume {:id "id886"} _module.Remaining.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
           == (true
             && $Unbox(read(old($Heap), this, _module.Remaining.value)): int
               == $Unbox(read($Heap, this, _module.Remaining.value)): int);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Remaining.unchangedNonvolatileUserFields(old($Heap), $Heap, this), TBool);
        assert {:id "id887"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Remaining.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.Remaining.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.Remaining.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Remaining_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id888"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    Remaining_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id889"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



procedure {:verboseName "Remaining.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.Remaining.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.Remaining.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: proveUnchangedNonvolatileUserFields, CheckWellFormed$$_module.Remaining.proveUnchangedNonvolatileUserFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id890"} $IsAlloc(this, Tclass._module.Remaining(), old($Heap));
    assume {:id "id891"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Remaining?(), $Heap);
    assert {:id "id892"} $IsAlloc(this, Tclass._module.Remaining(), old($Heap));
    assume _module.Remaining.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
    assume {:id "id893"} _module.Remaining.unchangedNonvolatileUserFields(old($Heap), $Heap, this);
}



procedure {:verboseName "Remaining.proveUnchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.Remaining.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.proveUnchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.Remaining.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id894"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id895"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id896"} true;
    assert {:id "id897"} (forall $o: ref, $f: Field :: true);
    assert {:id "id898"} (forall $o: ref, $f: Field :: true);
    assume {:id "id899"} _module.Remaining.unchangedNonvolatileUserFields(old($Heap), $Heap, this);
    assert {:id "id900"} _module.Remaining.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.Remaining.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || Lit(true);
    assert {:id "id901"} _module.Remaining.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.Remaining.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.Remaining.value)): int
           == $Unbox(read($Heap, this, _module.Remaining.value)): int;
}



procedure {:verboseName "Remaining.proveUnchangedNonvolatileUserFields (call)"} Call$$_module.Remaining.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap));
  // user-defined preconditions
  requires {:id "id902"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Remaining.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id903"} _module.Remaining.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Remaining.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
     && 
    true
     && $Unbox(read(previous$Heap, this, _module.Remaining.value)): int
       == $Unbox(read(current$Heap, this, _module.Remaining.value)): int;
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Remaining.proveUnchangedNonvolatileUserFields (correctness)"} Impl$$_module.Remaining.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  requires {:id "id904"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Remaining.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id905"} _module.Remaining.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.Remaining.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || Lit(true);
  ensures {:id "id906"} _module.Remaining.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.Remaining.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.Remaining.value)): int
         == $Unbox(read(current$Heap, this, _module.Remaining.value)): int;
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.proveUnchangedNonvolatileUserFields (correctness)"} Impl$$_module.Remaining.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: proveUnchangedNonvolatileUserFields, Impl$$_module.Remaining.proveUnchangedNonvolatileUserFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.Remaining.baseUserInv
function _module.Remaining.baseUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Remaining.baseUserInv (revealed)
axiom {:id "id907"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Remaining.baseUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.baseUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Remaining())
           && $IsAlloc(this, Tclass._module.Remaining(), $Heap))
       ==> _module.Remaining.baseUserInv($Heap, this) == Lit(true && true));
}

function _module.Remaining.baseUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Remaining.baseUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Remaining.baseUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Remaining.baseUserInv($h0, this)
       == _module.Remaining.baseUserInv($h1, this));

function _module.Remaining.baseUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Remaining.baseUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Remaining.baseUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $Heap)
     ==> _module.Remaining.baseUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.baseUserInv in class _module.Remaining
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.baseUserInv($Heap, this), $Is(this, Tclass._module.Remaining()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.baseUserInv($Heap, this), _module.Remaining.baseUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.baseUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Remaining()))
       ==> _module.OwnedObject.baseUserInv($Heap, this)
         == _module.Remaining.baseUserInv($Heap, this));

procedure {:verboseName "Remaining.baseUserInv (well-formedness)"} CheckWellformed$$_module.Remaining.baseUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Remaining.baseUserInv (override check)"} OverrideCheck$$_module.Remaining.baseUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.baseUserInv (override check)"} OverrideCheck$$_module.Remaining.baseUserInv(this: ref)
{
  var Remaining_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id909"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Remaining_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id910"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Remaining.localUserInv
function _module.Remaining.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Remaining.localUserInv (revealed)
axiom {:id "id911"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Remaining.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Remaining())
           && $IsAlloc(this, Tclass._module.Remaining(), $Heap))
       ==> _module.Remaining.localUserInv($Heap, this) == Lit(true && true));
}

function _module.Remaining.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Remaining.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Remaining.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Remaining.localUserInv($h0, this)
       == _module.Remaining.localUserInv($h1, this));

function _module.Remaining.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Remaining.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Remaining.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $Heap)
     ==> _module.Remaining.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.Remaining
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.Remaining()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.Remaining.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Remaining()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.Remaining.localUserInv($Heap, this));

procedure {:verboseName "Remaining.localUserInv (well-formedness)"} CheckWellformed$$_module.Remaining.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Remaining.localUserInv (override check)"} OverrideCheck$$_module.Remaining.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.localUserInv (override check)"} OverrideCheck$$_module.Remaining.localUserInv(this: ref)
{
  var Remaining_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id913"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Remaining_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id914"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Remaining.userInv
function _module.Remaining.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Remaining.userInv
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Remaining.userInv($Heap, this) } 
    _module.Remaining.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Remaining())
           && $IsAlloc(this, Tclass._module.Remaining(), $Heap))
       ==> 
      _module.Remaining.userInv($Heap, this)
       ==> _module.Remaining.localUserInv($Heap, this));
// definition axiom for _module.Remaining.userInv (revealed)
axiom {:id "id915"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Remaining.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Remaining())
           && $IsAlloc(this, Tclass._module.Remaining(), $Heap))
       ==> (Lit(true) ==> _module.Remaining.localUserInv#canCall($Heap, this))
         && _module.Remaining.userInv($Heap, this)
           == (true && _module.Remaining.localUserInv($Heap, this)));
}

function _module.Remaining.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Remaining.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Remaining.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Remaining.userInv($h0, this) == _module.Remaining.userInv($h1, this));

function _module.Remaining.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Remaining.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Remaining.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $Heap)
     ==> _module.Remaining.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.Remaining
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.Remaining()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.Remaining.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Remaining()))
       ==> _module.OwnedObject.userInv($Heap, this)
         == _module.Remaining.userInv($Heap, this));

procedure {:verboseName "Remaining.userInv (well-formedness)"} CheckWellformed$$_module.Remaining.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id916"} _module.Remaining.userInv($Heap, this)
     ==> 
    _module.Remaining.localUserInv#canCall($Heap, this)
     ==> _module.Remaining.localUserInv($Heap, this) || Lit(true);
  ensures {:id "id917"} _module.Remaining.userInv($Heap, this)
     ==> 
    _module.Remaining.localUserInv#canCall($Heap, this)
     ==> _module.Remaining.localUserInv($Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.userInv (well-formedness)"} CheckWellformed$$_module.Remaining.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Remaining?(), $Heap);
            assert {:id "id918"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Remaining.userInv#canCall($Heap, this);
            assume {:id "id919"} _module.Remaining.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Remaining?(), $Heap);
            assume _module.Remaining.localUserInv#canCall($Heap, this);
            assume {:id "id920"} _module.Remaining.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id921"} _module.Remaining.userInv($Heap, this)
               ==> _module.Remaining.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Remaining?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Remaining.localUserInv#canCall($Heap, this);
        }

        assume {:id "id922"} _module.Remaining.userInv($Heap, this)
           == (true && _module.Remaining.localUserInv($Heap, this));
        assume Lit(true) ==> _module.Remaining.localUserInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Remaining.userInv($Heap, this), TBool);
        assert {:id "id923"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Remaining.userInv (override check)"} OverrideCheck$$_module.Remaining.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.userInv (override check)"} OverrideCheck$$_module.Remaining.userInv(this: ref)
{
  var Remaining_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id924"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Remaining_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id925"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id926"} _module.Remaining.userInv($Heap, this)
       ==> _module.Remaining.localUserInv($Heap, this);
    assert {:id "id927"} _module.Remaining.userInv($Heap, this)
       ==> 
      _module.Remaining.localUserInv#canCall($Heap, this)
       ==> _module.Remaining.localUserInv($Heap, this) || Lit(true);
    assert {:id "id928"} _module.Remaining.userInv($Heap, this)
       ==> 
      _module.Remaining.localUserInv#canCall($Heap, this)
       ==> _module.Remaining.localUserInv($Heap, this) || Lit(true);
}



// function declaration for _module.Remaining.localUserInv2
function _module.Remaining.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Remaining.localUserInv2 (revealed)
axiom {:id "id929"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Remaining.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Remaining())
           && $IsAlloc(this, Tclass._module.Remaining(), $prevHeap))
       ==> _module.Remaining.localUserInv2($prevHeap, $Heap, this) == Lit(true && true));
}

function _module.Remaining.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Remaining.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Remaining.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Remaining.localUserInv2($prevHeap, $h0, this)
       == _module.Remaining.localUserInv2($prevHeap, $h1, this));

function _module.Remaining.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Remaining.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Remaining.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $prevHeap)
     ==> _module.Remaining.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.Remaining
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Remaining()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.Remaining.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Remaining()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.Remaining.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "Remaining.localUserInv2 (well-formedness)"} CheckWellformed$$_module.Remaining.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "Remaining.localUserInv2 (override check)"} OverrideCheck$$_module.Remaining.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.localUserInv2 (override check)"} OverrideCheck$$_module.Remaining.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Remaining_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id931"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Remaining_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id932"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Remaining.userInv2
function _module.Remaining.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Remaining.userInv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Remaining.userInv2($prevHeap, $Heap, this) } 
    _module.Remaining.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Remaining())
           && $IsAlloc(this, Tclass._module.Remaining(), $prevHeap))
       ==> 
      _module.Remaining.userInv2($prevHeap, $Heap, this)
       ==> _module.Remaining.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.Remaining.userInv2 (revealed)
axiom {:id "id933"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Remaining.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Remaining())
           && $IsAlloc(this, Tclass._module.Remaining(), $prevHeap))
       ==> (Lit(true) ==> _module.Remaining.localUserInv2#canCall($prevHeap, $Heap, this))
         && _module.Remaining.userInv2($prevHeap, $Heap, this)
           == (true && _module.Remaining.localUserInv2($prevHeap, $Heap, this)));
}

function _module.Remaining.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Remaining.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Remaining.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Remaining.userInv2($prevHeap, $h0, this)
       == _module.Remaining.userInv2($prevHeap, $h1, this));

function _module.Remaining.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Remaining.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Remaining.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $prevHeap)
     ==> _module.Remaining.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.Remaining
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Remaining()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.Remaining.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Remaining.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Remaining()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.Remaining.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "Remaining.userInv2 (well-formedness)"} CheckWellformed$$_module.Remaining.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id934"} _module.Remaining.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Remaining.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Remaining.localUserInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id935"} _module.Remaining.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Remaining.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Remaining.localUserInv2(previous$Heap, current$Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.userInv2 (well-formedness)"} CheckWellformed$$_module.Remaining.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Remaining?(), $Heap);
            assert {:id "id936"} $IsAlloc(this, Tclass._module.Remaining(), old($Heap));
            assert {:id "id937"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Remaining.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id938"} _module.Remaining.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Remaining?(), $Heap);
            assert {:id "id939"} $IsAlloc(this, Tclass._module.Remaining(), old($Heap));
            assume _module.Remaining.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id940"} _module.Remaining.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id941"} _module.Remaining.userInv2(old($Heap), $Heap, this)
               ==> _module.Remaining.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Remaining?(), $Heap);
            assert {:id "id942"} $IsAlloc(this, Tclass._module.Remaining(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Remaining.localUserInv2#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id943"} _module.Remaining.userInv2(old($Heap), $Heap, this)
           == (true && _module.Remaining.localUserInv2(old($Heap), $Heap, this));
        assume Lit(true) ==> _module.Remaining.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Remaining.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id944"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Remaining.userInv2 (override check)"} OverrideCheck$$_module.Remaining.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.userInv2 (override check)"} OverrideCheck$$_module.Remaining.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Remaining_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id945"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Remaining_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id946"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id947"} _module.Remaining.userInv2(old($Heap), $Heap, this)
       ==> _module.Remaining.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id948"} _module.Remaining.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.Remaining.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Remaining.localUserInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id949"} _module.Remaining.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.Remaining.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Remaining.localUserInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "Remaining.admissibility (well-formedness)"} CheckWellFormed$$_module.Remaining.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.admissibility (well-formedness)"} CheckWellFormed$$_module.Remaining.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Remaining.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id950"} $IsAlloc(this, Tclass._module.Remaining(), old($Heap));
    assert {:id "id951"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id952"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id953"} $IsAlloc(this, Tclass._module.Remaining(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id954"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id955"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "Remaining.admissibility (override check)"} OverrideCheck$$_module.Remaining.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.admissibility (override check)"} OverrideCheck$$_module.Remaining.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id956"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id957"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id958"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#0: ref :: 
                  { _module.Object.universe(o#0) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0)) } 
                  $Is(o#0, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#0))
                     ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                       && o#0 != _module.Object.universe(this))));
    assert {:id "id959"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this))));
    assert {:id "id960"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (forall o#2: ref :: 
              { _module.Object.inv(old($Heap), o#2) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2))
                 ==> _module.Object.inv(old($Heap), o#2)));
    assert {:id "id961"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id962"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#3: ref :: 
                  { _module.Object.universe(o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                       && o#3 != _module.Object.universe(this))));
    assert {:id "id963"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id964"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#4: ref :: 
                      { _module.Object.universe(o#4) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#4)) } 
                      $Is(o#4, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#4))
                         ==> _module.Object.universe(o#4) == _module.Object.universe(this)
                           && o#4 != _module.Object.universe(this)))));
    assert {:id "id965"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#5: ref :: 
                  { _module.Object.inv(old($Heap), o#5) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#5)) } 
                  $Is(o#5, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5))
                     ==> _module.Object.inv(old($Heap), o#5))));
    assert {:id "id966"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.universe(o#6) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                       && o#6 != _module.Object.universe(this))));
    assert {:id "id967"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id968"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id969"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id970"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#9: ref :: 
              { $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9)) } 
              $Is(o#9, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#9))
                 ==> $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int
                   <= $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id971"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall t#0: ref :: 
              { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#0)) } 
                { _module.Object.universe(t#0) } 
                { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0)) } 
              $Is(t#0, Tclass._module.Thread())
                   && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0))
                 ==> _module.Object.universe(t#0) == _module.Object.universe(this)
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(t#0))));
    assert {:id "id972"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#10: ref :: 
              { $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#10)) } 
              $Is(o#10, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10))
                   && $Is($Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#10, _module.OwnedObject.owner))
                 ==> $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id973"} running#0 != null ==> running#0 != null;
    assert {:id "id974"} (forall $o: ref, $f: Field :: true);
    assert {:id "id975"} (forall $o: ref, $f: Field :: true);
    assume {:id "id976"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id977"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id978"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "Remaining.admissibility (call)"} Call$$_module.Remaining.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id979"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id980"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  requires {:id "id981"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#12: ref :: 
                { _module.Object.universe(o#12) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> _module.Object.universe(o#12) == _module.Object.universe(this)
                     && o#12 != _module.Object.universe(this))));
  requires {:id "id982"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (forall o#13: ref :: 
            { _module.Object.inv(previous$Heap, o#13) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#13)) } 
            $Is(o#13, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#13))
               ==> _module.Object.inv(previous$Heap, o#13)));
  requires {:id "id983"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id984"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#14: ref :: 
                { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#14))
                   ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                     && o#14 != _module.Object.universe(this))));
  requires {:id "id985"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id986"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#15: ref :: 
                    { _module.Object.universe(o#15) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#15)) } 
                    $Is(o#15, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#15))
                       ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                         && o#15 != _module.Object.universe(this)))));
  requires {:id "id987"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#16: ref :: 
                { _module.Object.inv(previous$Heap, o#16) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#16)) } 
                $Is(o#16, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#16))
                   ==> _module.Object.inv(previous$Heap, o#16))));
  requires {:id "id988"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#17: ref :: 
                { _module.Object.universe(o#17) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#17)) } 
                $Is(o#17, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#17))
                   ==> _module.Object.universe(o#17) == _module.Object.universe(this)
                     && o#17 != _module.Object.universe(this))));
  requires {:id "id989"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id990"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#18: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#18) } 
              { _module.Object.inv(current$Heap, o#18) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#18)) } 
            $Is(o#18, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#18))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#18
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#18))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#18
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#18))));
  requires {:id "id991"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#19: ref :: 
            { _module.Object.inv(current$Heap, o#19) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
            $Is(o#19, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
               ==> _module.Object.inv(current$Heap, o#19)));
  requires {:id "id992"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { $Unbox(read(current$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#20)) } 
            $Is(o#20, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#20))
               ==> $Unbox(read(previous$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int
                 <= $Unbox(read(current$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id993"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall t#1: ref :: 
            { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(t#1)) } 
              { _module.Object.universe(t#1) } 
              { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1)) } 
            $Is(t#1, Tclass._module.Thread())
                 && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1))
               ==> _module.Object.universe(t#1) == _module.Object.universe(this)
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#1))));
  requires {:id "id994"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#21))
                 && $Is($Unbox(read(previous$Heap, o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                read(previous$Heap, o#21, _module.OwnedObject.owner))
               ==> $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id995"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
         && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  free ensures {:id "id996"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Remaining.admissibility (correctness)"} Impl$$_module.Remaining.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id997"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.baseInv(previous$Heap, this)
     && _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
     && _module.Object.baseInv(current$Heap, this)
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, 
      current$Heap, 
      _module.Object.universe(this), 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id998"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this));
  ensures {:id "id999"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1000"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id1001"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> (forall o#35: ref :: 
              { $Unbox(read(current$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(previous$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(previous$Heap, o#35, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#35)) } 
              $Is(o#35, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#35))
                   && $Unbox(read(previous$Heap, o#35, _module.OwnedObject.owner)): ref == this
                 ==> $Unbox(read(previous$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id1002"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id1003"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || _module.OwnedObject.userInv2(previous$Heap, current$Heap, this);
  ensures {:id "id1004"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1005"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1006"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1007"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id1008"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id1009"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#36: ref :: 
                    { _module.Object.universe(o#36) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#36)) } 
                    $Is(o#36, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#36))
                       ==> _module.Object.universe(o#36) == _module.Object.universe(this)
                         && o#36 != _module.Object.universe(this)))));
  ensures {:id "id1010"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.Object.universe($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(this));
  ensures {:id "id1011"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read(current$Heap, this, _module.OwnedObject.owner)));
  ensures {:id "id1012"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.baseUserInv(current$Heap, this));
  ensures {:id "id1013"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.localUserInv(current$Heap, this));
  ensures {:id "id1014"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining.admissibility (correctness)"} Impl$$_module.Remaining.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.Remaining.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Remaining._ctor (well-formedness)"} CheckWellFormed$$_module.Remaining.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    initialValue#0: int)
   returns (this: ref);
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining._ctor (well-formedness)"} CheckWellFormed$$_module.Remaining.__ctor(universe#0: ref, running#0: ref, initialValue#0: int) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.Remaining.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    assert {:id "id1015"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id1016"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id1017"} running#0 != null;
    assume {:id "id1018"} _module.Object.universe(running#0) == universe#0;
    assert {:id "id1019"} running#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(running#0), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.inv#canCall($Heap, running#0);
    assume {:id "id1020"} _module.Thread.inv($Heap, running#0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.Remaining())
       && $IsAlloc(this, Tclass._module.Remaining(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1021"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1022"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id1023"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id1024"} _module.Universe.globalInv2(old($Heap), $Heap, universe#0);
    assume {:id "id1025"} _module.Object.universe(this) == universe#0;
    assume {:id "id1026"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1027"} $Unbox(read($Heap, this, _module.Remaining.value)): int == initialValue#0;
    assert {:id "id1028"} universe#0 != null;
    assert {:id "id1029"} universe#0 != null;
    assert {:id "id1030"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id1031"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "Remaining._ctor (call)"} Call$$_module.Remaining.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    initialValue#0: int)
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Remaining())
         && $IsAlloc(this, Tclass._module.Remaining(), $Heap));
  // user-defined preconditions
  requires {:id "id1032"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0 && o#0 != universe#0));
  requires {:id "id1033"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id1034"} _module.Object.universe(running#0) == universe#0;
  requires {:id "id1035"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0) || Lit(true);
  requires {:id "id1036"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0) || Lit(true));
  requires {:id "id1037"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                $Box(running#0))));
  requires {:id "id1038"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(running#0))
                 ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(running#0))
                   || (forall o#2: ref :: 
                    { _module.Object.universe(o#2) } 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                        $Box(o#2)) } 
                    $Is(o#2, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                          $Box(o#2))
                       ==> _module.Object.universe(o#2) == _module.Object.universe(running#0)
                         && o#2 != _module.Object.universe(running#0)))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id1039"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1040"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  free ensures true;
  ensures {:id "id1041"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1042"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id1043"} $Unbox(read($Heap, this, _module.Remaining.value)): int == initialValue#0;
  free ensures true;
  ensures {:id "id1044"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Remaining._ctor (correctness)"} Impl$$_module.Remaining.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    initialValue#0: int)
   returns (this: ref, $_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1045"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#8: ref :: 
      { _module.Object.inv($Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv($Heap, o#8));
  requires {:id "id1046"} _module.Object.universe(running#0) == universe#0;
  free requires {:id "id1047"} _module.Thread.inv#canCall($Heap, running#0)
     && 
    _module.Thread.inv($Heap, running#0)
     && 
    true
     && _module.Thread.localInv($Heap, running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id1048"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1049"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id1050"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id1051"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id1052"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0) || Lit(true);
  ensures {:id "id1053"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  free ensures true;
  ensures {:id "id1054"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1055"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id1056"} $Unbox(read($Heap, this, _module.Remaining.value)): int == initialValue#0;
  free ensures true;
  ensures {:id "id1057"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Remaining._ctor (correctness)"} Impl$$_module.Remaining.__ctor(universe#0: ref, running#0: ref, initialValue#0: int)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.value: int;
  var defass#this.owner: bool;
  var defass#this.universe: bool;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.Remaining.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(367,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(368,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(369,16)
    assume true;
    assume true;
    this.value := initialValue#0;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(370,16)
    assume true;
    assume true;
    this.owner := running#0;
    defass#this.owner := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(367,3)
    assert {:id "id1061"} defass#this.owner;
    assert {:id "id1062"} defass#this.universe;
    assume this != null && $Is(this, Tclass._module.Remaining?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.Remaining.value)): int == this.value;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(367,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(372,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1063"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1064"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(373,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1065"} universe#0 != null;
    assert {:id "id1066"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    call {:id "id1067"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(374,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1068"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(375,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1069"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1070"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1071"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1072"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.Remaining
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Remaining()) } 
    { $Is(c#0, Tclass._module.Remaining?()) } 
  $Is(c#0, Tclass._module.Remaining())
     <==> $Is(c#0, Tclass._module.Remaining?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Remaining
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Remaining(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Remaining?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Remaining(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Remaining?(), $h));

const unique class._module.IncrementerMethod?: ClassName;

function Tclass._module.IncrementerMethod?() : Ty
uses {
// Tclass._module.IncrementerMethod? Tag
axiom Tag(Tclass._module.IncrementerMethod?()) == Tagclass._module.IncrementerMethod?
   && TagFamily(Tclass._module.IncrementerMethod?()) == tytagFamily$IncrementerMethod;
axiom implements$_module.OwnedObject(Tclass._module.IncrementerMethod?());
}

const unique Tagclass._module.IncrementerMethod?: TyTag;

// Box/unbox axiom for Tclass._module.IncrementerMethod?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.IncrementerMethod?()) } 
  $IsBox(bx, Tclass._module.IncrementerMethod?())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.IncrementerMethod?()));

// $Is axiom for class IncrementerMethod
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.IncrementerMethod?()) } 
  $Is($o, Tclass._module.IncrementerMethod?())
     <==> $o == null || dtype($o) == Tclass._module.IncrementerMethod?());

// $IsAlloc axiom for class IncrementerMethod
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.IncrementerMethod?(), $h) } 
  $IsAlloc($o, Tclass._module.IncrementerMethod?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.IncrementerMethod.programCounter: Field
uses {
axiom FDim(_module.IncrementerMethod.programCounter) == 0
   && FieldOfDecl(class._module.IncrementerMethod?, field$programCounter)
     == _module.IncrementerMethod.programCounter
   && !$IsGhostField(_module.IncrementerMethod.programCounter);
}

// IncrementerMethod.programCounter: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.programCounter)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
     ==> $Is($Unbox(read($h, $o, _module.IncrementerMethod.programCounter)): int, TInt));

// IncrementerMethod.programCounter: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.programCounter)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.IncrementerMethod.programCounter)): int, TInt, $h));

const _module.IncrementerMethod.counter: Field
uses {
axiom FDim(_module.IncrementerMethod.counter) == 0
   && FieldOfDecl(class._module.IncrementerMethod?, field$counter)
     == _module.IncrementerMethod.counter
   && !$IsGhostField(_module.IncrementerMethod.counter);
}

// IncrementerMethod.counter: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.counter)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
     ==> $Is($Unbox(read($h, $o, _module.IncrementerMethod.counter)): ref, 
      Tclass._module.AtomicCounter()));

// IncrementerMethod.counter: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.counter)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.IncrementerMethod.counter)): ref, 
      Tclass._module.AtomicCounter(), 
      $h));

const _module.IncrementerMethod.remaining: Field
uses {
axiom FDim(_module.IncrementerMethod.remaining) == 0
   && FieldOfDecl(class._module.IncrementerMethod?, field$remaining)
     == _module.IncrementerMethod.remaining
   && !$IsGhostField(_module.IncrementerMethod.remaining);
}

// IncrementerMethod.remaining: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.remaining)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
     ==> $Is($Unbox(read($h, $o, _module.IncrementerMethod.remaining)): ref, 
      Tclass._module.Remaining()));

// IncrementerMethod.remaining: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.remaining)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.IncrementerMethod.remaining)): ref, 
      Tclass._module.Remaining(), 
      $h));

const _module.IncrementerMethod.initial__value: Field
uses {
axiom FDim(_module.IncrementerMethod.initial__value) == 0
   && FieldOfDecl(class._module.IncrementerMethod?, field$initial_value)
     == _module.IncrementerMethod.initial__value
   && !$IsGhostField(_module.IncrementerMethod.initial__value);
}

// IncrementerMethod.initial_value: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.initial__value)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
     ==> $Is($Unbox(read($h, $o, _module.IncrementerMethod.initial__value)): int, TInt));

// IncrementerMethod.initial_value: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.initial__value)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.IncrementerMethod.initial__value)): int, TInt, $h));

const _module.IncrementerMethod.final__value: Field
uses {
axiom FDim(_module.IncrementerMethod.final__value) == 0
   && FieldOfDecl(class._module.IncrementerMethod?, field$final_value)
     == _module.IncrementerMethod.final__value
   && !$IsGhostField(_module.IncrementerMethod.final__value);
}

// IncrementerMethod.final_value: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.final__value)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
     ==> $Is($Unbox(read($h, $o, _module.IncrementerMethod.final__value)): int, TInt));

// IncrementerMethod.final_value: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.final__value)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.IncrementerMethod.final__value)): int, TInt, $h));

const _module.IncrementerMethod.i: Field
uses {
axiom FDim(_module.IncrementerMethod.i) == 0
   && FieldOfDecl(class._module.IncrementerMethod?, field$i)
     == _module.IncrementerMethod.i
   && !$IsGhostField(_module.IncrementerMethod.i);
}

// IncrementerMethod.i: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.i)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
     ==> $Is($Unbox(read($h, $o, _module.IncrementerMethod.i)): int, TInt));

// IncrementerMethod.i: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.IncrementerMethod.i)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.IncrementerMethod?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.IncrementerMethod.i)): int, TInt, $h));

// function declaration for _module.IncrementerMethod.unchangedNonvolatileUserFields
function _module.IncrementerMethod.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.IncrementerMethod.unchangedNonvolatileUserFields (revealed)
axiom {:id "id1073"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.IncrementerMethod.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.IncrementerMethod())
           && $IsAlloc(this, Tclass._module.IncrementerMethod(), $prevHeap))
       ==> _module.IncrementerMethod.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == (
          $Unbox(read($prevHeap, this, _module.IncrementerMethod.programCounter)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($prevHeap, this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read($prevHeap, this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && $Unbox(read($prevHeap, this, _module.IncrementerMethod.initial__value)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
           && $Unbox(read($prevHeap, this, _module.IncrementerMethod.final__value)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
           && $Unbox(read($prevHeap, this, _module.IncrementerMethod.i)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int));
}

function _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function Tclass._module.IncrementerMethod() : Ty
uses {
// Tclass._module.IncrementerMethod Tag
axiom Tag(Tclass._module.IncrementerMethod()) == Tagclass._module.IncrementerMethod
   && TagFamily(Tclass._module.IncrementerMethod()) == tytagFamily$IncrementerMethod;
}

const unique Tagclass._module.IncrementerMethod: TyTag;

// Box/unbox axiom for Tclass._module.IncrementerMethod
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.IncrementerMethod()) } 
  $IsBox(bx, Tclass._module.IncrementerMethod())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.IncrementerMethod()));

// frame axiom for _module.IncrementerMethod.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.IncrementerMethod.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.IncrementerMethod())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.IncrementerMethod.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.IncrementerMethod.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.IncrementerMethod.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.IncrementerMethod.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.IncrementerMethod.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $prevHeap)
     ==> _module.IncrementerMethod.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.IncrementerMethod
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.IncrementerMethod()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.IncrementerMethod.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.IncrementerMethod()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.IncrementerMethod.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "IncrementerMethod.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id1074"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
        if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
           == $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int)
        {
            assert {:id "id1075"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.IncrementerMethod.counter];
        }

        if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
        {
            assert {:id "id1076"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            b$reqreads#2 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
        }

        if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)
        {
            assert {:id "id1077"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            b$reqreads#3 := $_ReadsFrame[this, _module.IncrementerMethod.initial__value];
        }

        if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.initial__value)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int)
        {
            assert {:id "id1078"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            b$reqreads#4 := $_ReadsFrame[this, _module.IncrementerMethod.final__value];
        }

        if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.initial__value)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.final__value)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int)
        {
            assert {:id "id1079"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            b$reqreads#5 := $_ReadsFrame[this, _module.IncrementerMethod.i];
        }

        assume {:id "id1080"} _module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
           == (
            $Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
               == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
             && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
               == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
             && $Unbox(read(old($Heap), this, _module.IncrementerMethod.initial__value)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
             && $Unbox(read(old($Heap), this, _module.IncrementerMethod.final__value)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
             && $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this), 
          TBool);
        assert {:id "id1081"} b$reqreads#0;
        assert {:id "id1082"} b$reqreads#1;
        assert {:id "id1083"} b$reqreads#2;
        assert {:id "id1084"} b$reqreads#3;
        assert {:id "id1085"} b$reqreads#4;
        assert {:id "id1086"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "IncrementerMethod.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var IncrementerMethod_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1087"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    IncrementerMethod_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id1088"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



procedure {:verboseName "IncrementerMethod.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.proveUnchangedNonvolatileUserFields (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: proveUnchangedNonvolatileUserFields, CheckWellFormed$$_module.IncrementerMethod.proveUnchangedNonvolatileUserFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1089"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
    assume {:id "id1090"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.IncrementerMethod?(), $Heap);
    assert {:id "id1091"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
    assume _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
    assume {:id "id1092"} _module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this);
}



procedure {:verboseName "IncrementerMethod.proveUnchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.IncrementerMethod.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.proveUnchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.IncrementerMethod.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id1093"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1094"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1095"} true;
    assert {:id "id1096"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1097"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1098"} _module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this);
    assert {:id "id1099"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
           == $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int;
    assert {:id "id1100"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
           == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref;
    assert {:id "id1101"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
           == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref;
    assert {:id "id1102"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.IncrementerMethod.initial__value)): int
           == $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int;
    assert {:id "id1103"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.IncrementerMethod.final__value)): int
           == $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int;
    assert {:id "id1104"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
           == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int;
}



procedure {:verboseName "IncrementerMethod.proveUnchangedNonvolatileUserFields (call)"} Call$$_module.IncrementerMethod.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap));
  // user-defined preconditions
  requires {:id "id1105"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id1106"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     && 
    _module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
     && 
    $Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
       == $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int
     && $Unbox(read(previous$Heap, this, _module.IncrementerMethod.counter)): ref
       == $Unbox(read(current$Heap, this, _module.IncrementerMethod.counter)): ref
     && $Unbox(read(previous$Heap, this, _module.IncrementerMethod.remaining)): ref
       == $Unbox(read(current$Heap, this, _module.IncrementerMethod.remaining)): ref
     && $Unbox(read(previous$Heap, this, _module.IncrementerMethod.initial__value)): int
       == $Unbox(read(current$Heap, this, _module.IncrementerMethod.initial__value)): int
     && $Unbox(read(previous$Heap, this, _module.IncrementerMethod.final__value)): int
       == $Unbox(read(current$Heap, this, _module.IncrementerMethod.final__value)): int
     && $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
       == $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int;
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "IncrementerMethod.proveUnchangedNonvolatileUserFields (correctness)"} Impl$$_module.IncrementerMethod.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  requires {:id "id1107"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id1108"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
         == $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int;
  ensures {:id "id1109"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.IncrementerMethod.counter)): ref
         == $Unbox(read(current$Heap, this, _module.IncrementerMethod.counter)): ref;
  ensures {:id "id1110"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.IncrementerMethod.remaining)): ref
         == $Unbox(read(current$Heap, this, _module.IncrementerMethod.remaining)): ref;
  ensures {:id "id1111"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.IncrementerMethod.initial__value)): int
         == $Unbox(read(current$Heap, this, _module.IncrementerMethod.initial__value)): int;
  ensures {:id "id1112"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.IncrementerMethod.final__value)): int
         == $Unbox(read(current$Heap, this, _module.IncrementerMethod.final__value)): int;
  ensures {:id "id1113"} _module.IncrementerMethod.unchangedNonvolatileUserFields#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
         == $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int;
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.proveUnchangedNonvolatileUserFields (correctness)"} Impl$$_module.IncrementerMethod.proveUnchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: proveUnchangedNonvolatileUserFields, Impl$$_module.IncrementerMethod.proveUnchangedNonvolatileUserFields
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.IncrementerMethod.baseUserInv
function _module.IncrementerMethod.baseUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.IncrementerMethod.baseUserInv (revealed)
axiom {:id "id1114"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.IncrementerMethod.baseUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.baseUserInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.IncrementerMethod())
           && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap))
       ==> _module.IncrementerMethod.baseUserInv($Heap, this)
         == (
          Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.IncrementerMethod.counter))
           && _module.Object.universe($Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
             == _module.Object.universe(this)
           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.IncrementerMethod.remaining))
           && _module.Object.universe($Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)
             == _module.Object.universe(this)));
}

function _module.IncrementerMethod.baseUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.IncrementerMethod.baseUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.IncrementerMethod.baseUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.IncrementerMethod.baseUserInv($h0, this)
       == _module.IncrementerMethod.baseUserInv($h1, this));

function _module.IncrementerMethod.baseUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.IncrementerMethod.baseUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.IncrementerMethod.baseUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap)
     ==> _module.IncrementerMethod.baseUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.baseUserInv in class _module.IncrementerMethod
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.baseUserInv($Heap, this), $Is(this, Tclass._module.IncrementerMethod()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.baseUserInv($Heap, this), _module.IncrementerMethod.baseUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.baseUserInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.IncrementerMethod()))
       ==> _module.OwnedObject.baseUserInv($Heap, this)
         == _module.IncrementerMethod.baseUserInv($Heap, this));

procedure {:verboseName "IncrementerMethod.baseUserInv (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.baseUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.baseUserInv (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.baseUserInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.IncrementerMethod.counter];
        assert {:id "id1115"} _module.Object.universe(this) != null;
        b$reqreads#1 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read($Heap, this, _module.IncrementerMethod.counter)))
        {
            b$reqreads#2 := $_ReadsFrame[this, _module.IncrementerMethod.counter];
            assert {:id "id1116"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
        }

        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.IncrementerMethod.counter))
           && _module.Object.universe($Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
             == _module.Object.universe(this))
        {
            b$reqreads#3 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
            assert {:id "id1117"} _module.Object.universe(this) != null;
            b$reqreads#4 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        }

        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.IncrementerMethod.counter))
           && _module.Object.universe($Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
             == _module.Object.universe(this)
           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.IncrementerMethod.remaining)))
        {
            b$reqreads#5 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
            assert {:id "id1118"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
        }

        assume {:id "id1119"} _module.IncrementerMethod.baseUserInv($Heap, this)
           == (
            Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.IncrementerMethod.counter))
             && _module.Object.universe($Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
               == _module.Object.universe(this)
             && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.IncrementerMethod.remaining))
             && _module.Object.universe($Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)
               == _module.Object.universe(this));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.IncrementerMethod.baseUserInv($Heap, this), TBool);
        assert {:id "id1120"} b$reqreads#0;
        assert {:id "id1121"} b$reqreads#1;
        assert {:id "id1122"} b$reqreads#2;
        assert {:id "id1123"} b$reqreads#3;
        assert {:id "id1124"} b$reqreads#4;
        assert {:id "id1125"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "IncrementerMethod.baseUserInv (override check)"} OverrideCheck$$_module.IncrementerMethod.baseUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.baseUserInv (override check)"} OverrideCheck$$_module.IncrementerMethod.baseUserInv(this: ref)
{
  var IncrementerMethod_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1126"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    IncrementerMethod_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1127"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.IncrementerMethod.localUserInv
function _module.IncrementerMethod.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.IncrementerMethod.localUserInv (revealed)
axiom {:id "id1128"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.IncrementerMethod.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.IncrementerMethod())
           && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap))
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         == (
          $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && 
              $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(6)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(7)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(11)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(8)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(9)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(0)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(10)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(0))));
}

function _module.IncrementerMethod.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.IncrementerMethod.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.IncrementerMethod.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.IncrementerMethod.localUserInv($h0, this)
       == _module.IncrementerMethod.localUserInv($h1, this));

function _module.IncrementerMethod.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.IncrementerMethod.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.IncrementerMethod.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap)
     ==> _module.IncrementerMethod.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.IncrementerMethod
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.IncrementerMethod()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.IncrementerMethod.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.IncrementerMethod()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.IncrementerMethod.localUserInv($Heap, this));

procedure {:verboseName "IncrementerMethod.localUserInv (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.localUserInv (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.localUserInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;
  var b$reqreads#13: bool;
  var b$reqreads#14: bool;
  var b$reqreads#15: bool;
  var b$reqreads#16: bool;
  var b$reqreads#17: bool;
  var b$reqreads#18: bool;
  var b$reqreads#19: bool;
  var b$reqreads#20: bool;
  var b$reqreads#21: bool;
  var b$reqreads#22: bool;
  var b$reqreads#23: bool;
  var b$reqreads#24: bool;
  var b$reqreads#25: bool;
  var b$reqreads#26: bool;
  var b$reqreads#27: bool;
  var b$reqreads#28: bool;
  var b$reqreads#29: bool;
  var b$reqreads#30: bool;
  var b$reqreads#31: bool;
  var b$reqreads#32: bool;
  var b$reqreads#33: bool;
  var b$reqreads#34: bool;
  var b$reqreads#35: bool;
  var b$reqreads#36: bool;
  var b$reqreads#37: bool;
  var b$reqreads#38: bool;
  var b$reqreads#39: bool;
  var b$reqreads#40: bool;
  var b$reqreads#41: bool;
  var b$reqreads#42: bool;
  var b$reqreads#43: bool;
  var b$reqreads#44: bool;
  var b$reqreads#45: bool;
  var b$reqreads#46: bool;
  var b$reqreads#47: bool;
  var b$reqreads#48: bool;
  var b$reqreads#49: bool;
  var b$reqreads#50: bool;
  var b$reqreads#51: bool;
  var b$reqreads#52: bool;
  var b$reqreads#53: bool;
  var b$reqreads#54: bool;
  var b$reqreads#55: bool;
  var b$reqreads#56: bool;
  var b$reqreads#57: bool;
  var b$reqreads#58: bool;
  var b$reqreads#59: bool;
  var b$reqreads#60: bool;
  var b$reqreads#61: bool;
  var b$reqreads#62: bool;
  var b$reqreads#63: bool;
  var b$reqreads#64: bool;
  var b$reqreads#65: bool;
  var b$reqreads#66: bool;
  var b$reqreads#67: bool;
  var b$reqreads#68: bool;
  var b$reqreads#69: bool;
  var b$reqreads#70: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;
    b$reqreads#13 := true;
    b$reqreads#14 := true;
    b$reqreads#15 := true;
    b$reqreads#16 := true;
    b$reqreads#17 := true;
    b$reqreads#18 := true;
    b$reqreads#19 := true;
    b$reqreads#20 := true;
    b$reqreads#21 := true;
    b$reqreads#22 := true;
    b$reqreads#23 := true;
    b$reqreads#24 := true;
    b$reqreads#25 := true;
    b$reqreads#26 := true;
    b$reqreads#27 := true;
    b$reqreads#28 := true;
    b$reqreads#29 := true;
    b$reqreads#30 := true;
    b$reqreads#31 := true;
    b$reqreads#32 := true;
    b$reqreads#33 := true;
    b$reqreads#34 := true;
    b$reqreads#35 := true;
    b$reqreads#36 := true;
    b$reqreads#37 := true;
    b$reqreads#38 := true;
    b$reqreads#39 := true;
    b$reqreads#40 := true;
    b$reqreads#41 := true;
    b$reqreads#42 := true;
    b$reqreads#43 := true;
    b$reqreads#44 := true;
    b$reqreads#45 := true;
    b$reqreads#46 := true;
    b$reqreads#47 := true;
    b$reqreads#48 := true;
    b$reqreads#49 := true;
    b$reqreads#50 := true;
    b$reqreads#51 := true;
    b$reqreads#52 := true;
    b$reqreads#53 := true;
    b$reqreads#54 := true;
    b$reqreads#55 := true;
    b$reqreads#56 := true;
    b$reqreads#57 := true;
    b$reqreads#58 := true;
    b$reqreads#59 := true;
    b$reqreads#60 := true;
    b$reqreads#61 := true;
    b$reqreads#62 := true;
    b$reqreads#63 := true;
    b$reqreads#64 := true;
    b$reqreads#65 := true;
    b$reqreads#66 := true;
    b$reqreads#67 := true;
    b$reqreads#68 := true;
    b$reqreads#69 := true;
    b$reqreads#70 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
        assert {:id "id1129"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
        b$reqreads#1 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.OwnedObject.owner];
        if ($Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
              _module.OwnedObject.owner)): ref
           == this)
        {
            b$reqreads#2 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if (LitInt(0)
               <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int)
            {
                b$reqreads#3 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10))
        {
            b$reqreads#4 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0))
            {
                b$reqreads#5 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1130"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#6 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10)))
        {
            b$reqreads#7 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1))
            {
                b$reqreads#8 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1131"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#9 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
                if ($Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   == LitInt(10))
                {
                    b$reqreads#10 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                }
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0)))
        {
            b$reqreads#11 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2))
            {
                b$reqreads#12 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1132"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#13 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
                b$reqreads#14 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                if ($Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10))
                {
                    b$reqreads#15 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    if (LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
                    {
                        b$reqreads#16 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    }
                }
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)))
        {
            b$reqreads#17 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3))
            {
                b$reqreads#18 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1133"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#19 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
                b$reqreads#20 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                if ($Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10))
                {
                    b$reqreads#21 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    if (LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
                    {
                        b$reqreads#22 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    }
                }

                if ($Unbox(read($Heap, 
                          $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                          _module.Remaining.value)): int
                       + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                     == LitInt(10)
                   && 
                  LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
                {
                    b$reqreads#23 := $_ReadsFrame[this, _module.IncrementerMethod.initial__value];
                    b$reqreads#24 := $_ReadsFrame[this, _module.IncrementerMethod.counter];
                    assert {:id "id1134"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
                    b$reqreads#25 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, _module.AtomicCounter.value];
                }
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int))
        {
            b$reqreads#26 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4))
            {
                b$reqreads#27 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1135"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#28 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
                b$reqreads#29 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                if ($Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10))
                {
                    b$reqreads#30 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    if (LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
                    {
                        b$reqreads#31 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    }
                }

                if ($Unbox(read($Heap, 
                          $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                          _module.Remaining.value)): int
                       + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                     == LitInt(10)
                   && 
                  LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
                {
                    b$reqreads#32 := $_ReadsFrame[this, _module.IncrementerMethod.initial__value];
                    b$reqreads#33 := $_ReadsFrame[this, _module.IncrementerMethod.counter];
                    assert {:id "id1136"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
                    b$reqreads#34 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, _module.AtomicCounter.value];
                }
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int))
        {
            b$reqreads#35 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5))
            {
                b$reqreads#36 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1137"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#37 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
                b$reqreads#38 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                if ($Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10))
                {
                    b$reqreads#39 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    if (LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
                    {
                        b$reqreads#40 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    }
                }

                if ($Unbox(read($Heap, 
                          $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                          _module.Remaining.value)): int
                       + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                     == LitInt(10)
                   && 
                  LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
                {
                    b$reqreads#41 := $_ReadsFrame[this, _module.IncrementerMethod.initial__value];
                    b$reqreads#42 := $_ReadsFrame[this, _module.IncrementerMethod.final__value];
                    if ($Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                       <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int)
                    {
                        b$reqreads#43 := $_ReadsFrame[this, _module.IncrementerMethod.final__value];
                        b$reqreads#44 := $_ReadsFrame[this, _module.IncrementerMethod.counter];
                        assert {:id "id1138"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
                        b$reqreads#45 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, _module.AtomicCounter.value];
                    }
                }
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && 
              $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int))
        {
            b$reqreads#46 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(6))
            {
                b$reqreads#47 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1139"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#48 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
                b$reqreads#49 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                if ($Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10))
                {
                    b$reqreads#50 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    if (LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
                    {
                        b$reqreads#51 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    }
                }
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && 
              $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(6)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)))
        {
            b$reqreads#52 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(7))
            {
                b$reqreads#53 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1140"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#54 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
                b$reqreads#55 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                if ($Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(11))
                {
                    b$reqreads#56 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    if (LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
                    {
                        b$reqreads#57 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    }
                }
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && 
              $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(6)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(7)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(11)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10)))
        {
            b$reqreads#58 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(8))
            {
                b$reqreads#59 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1141"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#60 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
                b$reqreads#61 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                if ($Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10))
                {
                    b$reqreads#62 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    if (LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
                    {
                        b$reqreads#63 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                    }
                }
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && 
              $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(6)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(7)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(11)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(8)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10)))
        {
            b$reqreads#64 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(9))
            {
                b$reqreads#65 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1142"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#66 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
                if ($Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   == LitInt(0))
                {
                    b$reqreads#67 := $_ReadsFrame[this, _module.IncrementerMethod.i];
                }
            }
        }

        if ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && 
          LitInt(0)
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             <= LitInt(10)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(0)
             ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               == LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(1)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
               && 
              $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                 <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
                 <= $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                    _module.AtomicCounter.value)): int)
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(6)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(7)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(11)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(8)
             ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 == LitInt(10)
               && 
              LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10))
           && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(9)
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(0)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(10)))
        {
            b$reqreads#68 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(10))
            {
                b$reqreads#69 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
                assert {:id "id1143"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
                b$reqreads#70 := $_ReadsFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
            }
        }

        assume {:id "id1144"} _module.IncrementerMethod.localUserInv($Heap, this)
           == (
            $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.OwnedObject.owner)): ref
               == this
             && 
            LitInt(0)
               <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               <= LitInt(10)
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(0)
               ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(10))
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(1)
               ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   == LitInt(10)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0))
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               ==> $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10)
                 && 
                LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
               ==> $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10)
                 && 
                LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
                   <= $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                      _module.AtomicCounter.value)): int)
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
               ==> $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10)
                 && 
                LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                   <= $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                      _module.AtomicCounter.value)): int)
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
               ==> $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10)
                 && 
                LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9)
                 && 
                $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
                   <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
                   <= $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                      _module.AtomicCounter.value)): int)
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
               ==> $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10)
                 && 
                LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9))
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7)
               ==> $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(11)
                 && 
                LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10))
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8)
               ==> $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                        _module.Remaining.value)): int
                     + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                   == LitInt(10)
                 && 
                LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10))
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(9)
               ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                      _module.Remaining.value)): int
                   == LitInt(0)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(10))
             && ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(10)
               ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                    _module.Remaining.value)): int
                 == LitInt(0)));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.IncrementerMethod.localUserInv($Heap, this), TBool);
        assert {:id "id1145"} b$reqreads#0;
        assert {:id "id1146"} b$reqreads#1;
        assert {:id "id1147"} b$reqreads#2;
        assert {:id "id1148"} b$reqreads#3;
        assert {:id "id1149"} b$reqreads#4;
        assert {:id "id1150"} b$reqreads#5;
        assert {:id "id1151"} b$reqreads#6;
        assert {:id "id1152"} b$reqreads#7;
        assert {:id "id1153"} b$reqreads#8;
        assert {:id "id1154"} b$reqreads#9;
        assert {:id "id1155"} b$reqreads#10;
        assert {:id "id1156"} b$reqreads#11;
        assert {:id "id1157"} b$reqreads#12;
        assert {:id "id1158"} b$reqreads#13;
        assert {:id "id1159"} b$reqreads#14;
        assert {:id "id1160"} b$reqreads#15;
        assert {:id "id1161"} b$reqreads#16;
        assert {:id "id1162"} b$reqreads#17;
        assert {:id "id1163"} b$reqreads#18;
        assert {:id "id1164"} b$reqreads#19;
        assert {:id "id1165"} b$reqreads#20;
        assert {:id "id1166"} b$reqreads#21;
        assert {:id "id1167"} b$reqreads#22;
        assert {:id "id1168"} b$reqreads#23;
        assert {:id "id1169"} b$reqreads#24;
        assert {:id "id1170"} b$reqreads#25;
        assert {:id "id1171"} b$reqreads#26;
        assert {:id "id1172"} b$reqreads#27;
        assert {:id "id1173"} b$reqreads#28;
        assert {:id "id1174"} b$reqreads#29;
        assert {:id "id1175"} b$reqreads#30;
        assert {:id "id1176"} b$reqreads#31;
        assert {:id "id1177"} b$reqreads#32;
        assert {:id "id1178"} b$reqreads#33;
        assert {:id "id1179"} b$reqreads#34;
        assert {:id "id1180"} b$reqreads#35;
        assert {:id "id1181"} b$reqreads#36;
        assert {:id "id1182"} b$reqreads#37;
        assert {:id "id1183"} b$reqreads#38;
        assert {:id "id1184"} b$reqreads#39;
        assert {:id "id1185"} b$reqreads#40;
        assert {:id "id1186"} b$reqreads#41;
        assert {:id "id1187"} b$reqreads#42;
        assert {:id "id1188"} b$reqreads#43;
        assert {:id "id1189"} b$reqreads#44;
        assert {:id "id1190"} b$reqreads#45;
        assert {:id "id1191"} b$reqreads#46;
        assert {:id "id1192"} b$reqreads#47;
        assert {:id "id1193"} b$reqreads#48;
        assert {:id "id1194"} b$reqreads#49;
        assert {:id "id1195"} b$reqreads#50;
        assert {:id "id1196"} b$reqreads#51;
        assert {:id "id1197"} b$reqreads#52;
        assert {:id "id1198"} b$reqreads#53;
        assert {:id "id1199"} b$reqreads#54;
        assert {:id "id1200"} b$reqreads#55;
        assert {:id "id1201"} b$reqreads#56;
        assert {:id "id1202"} b$reqreads#57;
        assert {:id "id1203"} b$reqreads#58;
        assert {:id "id1204"} b$reqreads#59;
        assert {:id "id1205"} b$reqreads#60;
        assert {:id "id1206"} b$reqreads#61;
        assert {:id "id1207"} b$reqreads#62;
        assert {:id "id1208"} b$reqreads#63;
        assert {:id "id1209"} b$reqreads#64;
        assert {:id "id1210"} b$reqreads#65;
        assert {:id "id1211"} b$reqreads#66;
        assert {:id "id1212"} b$reqreads#67;
        assert {:id "id1213"} b$reqreads#68;
        assert {:id "id1214"} b$reqreads#69;
        assert {:id "id1215"} b$reqreads#70;
        return;

        assume false;
    }
}



procedure {:verboseName "IncrementerMethod.localUserInv (override check)"} OverrideCheck$$_module.IncrementerMethod.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.localUserInv (override check)"} OverrideCheck$$_module.IncrementerMethod.localUserInv(this: ref)
{
  var IncrementerMethod_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1216"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    IncrementerMethod_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1217"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.IncrementerMethod.userInv
function _module.IncrementerMethod.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.IncrementerMethod.userInv
axiom 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.IncrementerMethod.userInv($Heap, this) } 
    _module.IncrementerMethod.userInv#canCall($Heap, this)
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.IncrementerMethod())
           && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap))
       ==> 
      _module.IncrementerMethod.userInv($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this));
// definition axiom for _module.IncrementerMethod.userInv (revealed)
axiom {:id "id1218"} 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.IncrementerMethod.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.userInv#canCall($Heap, this)
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.IncrementerMethod())
           && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap))
       ==> _module.IncrementerMethod.localUserInv#canCall($Heap, this)
         && (_module.IncrementerMethod.localUserInv($Heap, this)
           ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
             && (_module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
               ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)))
         && _module.IncrementerMethod.userInv($Heap, this)
           == (
            _module.IncrementerMethod.localUserInv($Heap, this)
             && _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
             && _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)));
}

function _module.IncrementerMethod.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.IncrementerMethod.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.IncrementerMethod.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.IncrementerMethod.userInv($h0, this)
       == _module.IncrementerMethod.userInv($h1, this));

function _module.IncrementerMethod.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.IncrementerMethod.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.IncrementerMethod.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap)
     ==> _module.IncrementerMethod.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.IncrementerMethod
axiom 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.IncrementerMethod()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.IncrementerMethod.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.userInv#canCall($Heap, this)
         || (5 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.IncrementerMethod()))
       ==> _module.OwnedObject.userInv($Heap, this)
         == _module.IncrementerMethod.userInv($Heap, this));

procedure {:verboseName "IncrementerMethod.userInv (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1219"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
            _module.OwnedObject.owner)): ref
         == this;
  ensures {:id "id1220"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || LitInt(0)
         <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int;
  ensures {:id "id1221"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
         <= LitInt(10);
  ensures {:id "id1222"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(0)
         ==> $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
              _module.Remaining.value)): int
           == LitInt(10));
  ensures {:id "id1223"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(1)
         ==> $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
              _module.Remaining.value)): int
           == LitInt(10));
  ensures {:id "id1224"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(1)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0));
  ensures {:id "id1225"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(2)
         ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
           == LitInt(10));
  ensures {:id "id1226"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(2)
         ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1227"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(2)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
  ensures {:id "id1228"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(3)
         ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
           == LitInt(10));
  ensures {:id "id1229"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(3)
         ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1230"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(3)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
  ensures {:id "id1231"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(3)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
           <= $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
              _module.AtomicCounter.value)): int);
  ensures {:id "id1232"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(4)
         ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
           == LitInt(10));
  ensures {:id "id1233"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(4)
         ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1234"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(4)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
  ensures {:id "id1235"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(4)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
           <= $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
              _module.AtomicCounter.value)): int);
  ensures {:id "id1236"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(5)
         ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
           == LitInt(10));
  ensures {:id "id1237"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(5)
         ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1238"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(5)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
  ensures {:id "id1239"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(5)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
           <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int);
  ensures {:id "id1240"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(5)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
           <= $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
              _module.AtomicCounter.value)): int);
  ensures {:id "id1241"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(6)
         ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
           == LitInt(10));
  ensures {:id "id1242"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(6)
         ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1243"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(6)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
  ensures {:id "id1244"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(7)
         ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
           == LitInt(11));
  ensures {:id "id1245"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(7)
         ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1246"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(7)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10));
  ensures {:id "id1247"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(8)
         ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
           == LitInt(10));
  ensures {:id "id1248"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(8)
         ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1249"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(8)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10));
  ensures {:id "id1250"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(9)
         ==> $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
              _module.Remaining.value)): int
           == LitInt(0));
  ensures {:id "id1251"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(9)
         ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(10));
  ensures {:id "id1252"} _module.IncrementerMethod.userInv($Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv#canCall($Heap, this)
     ==> _module.IncrementerMethod.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           == LitInt(10)
         ==> $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
              _module.Remaining.value)): int
           == LitInt(0));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.userInv (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.IncrementerMethod?(), $Heap);
            assert {:id "id1253"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.IncrementerMethod.userInv#canCall($Heap, this);
            assume {:id "id1254"} _module.IncrementerMethod.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.IncrementerMethod?(), $Heap);
            assume _module.IncrementerMethod.localUserInv#canCall($Heap, this);
            assume {:id "id1255"} _module.IncrementerMethod.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id1256"} _module.IncrementerMethod.userInv($Heap, this)
               ==> _module.IncrementerMethod.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.IncrementerMethod?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.IncrementerMethod.localUserInv#canCall($Heap, this);
        if (_module.IncrementerMethod.localUserInv($Heap, this))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.IncrementerMethod.counter];
            assert {:id "id1257"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox(read($Heap, this, _module.IncrementerMethod.counter), 
              Tclass._module.OwnedObject?(), 
              $Heap);
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref);
        }

        if (_module.IncrementerMethod.localUserInv($Heap, this)
           && _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref))
        {
            b$reqreads#3 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
            assert {:id "id1258"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox(read($Heap, this, _module.IncrementerMethod.remaining), 
              Tclass._module.OwnedObject?(), 
              $Heap);
            b$reqreads#4 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref);
        }

        assume {:id "id1259"} _module.IncrementerMethod.userInv($Heap, this)
           == (
            _module.IncrementerMethod.localUserInv($Heap, this)
             && _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
             && _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref));
        assume _module.IncrementerMethod.localUserInv#canCall($Heap, this)
           && (_module.IncrementerMethod.localUserInv($Heap, this)
             ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
               && (_module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
                 ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.IncrementerMethod.userInv($Heap, this), TBool);
        assert {:id "id1260"} b$reqreads#0;
        assert {:id "id1261"} b$reqreads#1;
        assert {:id "id1262"} b$reqreads#2;
        assert {:id "id1263"} b$reqreads#3;
        assert {:id "id1264"} b$reqreads#4;
        return;

        assume false;
    }
}



procedure {:verboseName "IncrementerMethod.userInv (override check)"} OverrideCheck$$_module.IncrementerMethod.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.userInv (override check)"} OverrideCheck$$_module.IncrementerMethod.userInv(this: ref)
{
  var IncrementerMethod_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1265"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    IncrementerMethod_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1266"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1267"} _module.IncrementerMethod.userInv($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this);
    assert {:id "id1268"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
              _module.OwnedObject.owner)): ref
           == this;
    assert {:id "id1269"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || LitInt(0)
           <= $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int;
    assert {:id "id1270"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
           <= LitInt(10);
    assert {:id "id1271"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(0)
           ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             == LitInt(10));
    assert {:id "id1272"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(1)
           ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             == LitInt(10));
    assert {:id "id1273"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(1)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(0));
    assert {:id "id1274"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(2)
           ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
             == LitInt(10));
    assert {:id "id1275"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(2)
           ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1276"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(2)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
    assert {:id "id1277"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(3)
           ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
             == LitInt(10));
    assert {:id "id1278"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(3)
           ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1279"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(3)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
    assert {:id "id1280"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(3)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
             <= $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                _module.AtomicCounter.value)): int);
    assert {:id "id1281"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(4)
           ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
             == LitInt(10));
    assert {:id "id1282"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(4)
           ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1283"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(4)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
    assert {:id "id1284"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(4)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
             <= $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                _module.AtomicCounter.value)): int);
    assert {:id "id1285"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(5)
           ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
             == LitInt(10));
    assert {:id "id1286"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(5)
           ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1287"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(5)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
    assert {:id "id1288"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(5)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
             <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int);
    assert {:id "id1289"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(5)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
             <= $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
                _module.AtomicCounter.value)): int);
    assert {:id "id1290"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(6)
           ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
             == LitInt(10));
    assert {:id "id1291"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(6)
           ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1292"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(6)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(9));
    assert {:id "id1293"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(7)
           ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
             == LitInt(11));
    assert {:id "id1294"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(7)
           ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1295"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(7)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10));
    assert {:id "id1296"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(8)
           ==> $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                  _module.Remaining.value)): int
               + $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int
             == LitInt(10));
    assert {:id "id1297"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(8)
           ==> LitInt(0) <= $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1298"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(8)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int <= LitInt(10));
    assert {:id "id1299"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(9)
           ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             == LitInt(0));
    assert {:id "id1300"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(9)
           ==> $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(10));
    assert {:id "id1301"} _module.IncrementerMethod.userInv($Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv#canCall($Heap, this)
       ==> _module.IncrementerMethod.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(10)
           ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
                _module.Remaining.value)): int
             == LitInt(0));
}



// function declaration for _module.IncrementerMethod.localUserInv2
function _module.IncrementerMethod.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.IncrementerMethod.localUserInv2 (revealed)
axiom {:id "id1302"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.IncrementerMethod.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.IncrementerMethod())
           && $IsAlloc(this, Tclass._module.IncrementerMethod(), $prevHeap))
       ==> _module.IncrementerMethod.localUserInv2($prevHeap, $Heap, this)
         == (
          $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read($prevHeap, this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read($prevHeap, this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && ($Unbox(read($prevHeap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
             ==> $Unbox(read($prevHeap, this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read($prevHeap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
             ==> $Unbox(read($prevHeap, this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read($prevHeap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
             ==> $Unbox(read($prevHeap, this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read($prevHeap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
             ==> $Unbox(read($prevHeap, this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read($prevHeap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7)
             ==> $Unbox(read($prevHeap, this, _module.IncrementerMethod.i)): int
               < $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read($prevHeap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8)
             ==> $Unbox(read($prevHeap, this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read($prevHeap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
             ==> $Unbox(read($prevHeap, this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read($prevHeap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(9)
             ==> $Unbox(read($prevHeap, this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)));
}

function _module.IncrementerMethod.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.IncrementerMethod.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.IncrementerMethod.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.IncrementerMethod.localUserInv2($prevHeap, $h0, this)
       == _module.IncrementerMethod.localUserInv2($prevHeap, $h1, this));

function _module.IncrementerMethod.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.IncrementerMethod.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.IncrementerMethod.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $prevHeap)
     ==> _module.IncrementerMethod.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.IncrementerMethod
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.IncrementerMethod()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.IncrementerMethod.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.IncrementerMethod()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.IncrementerMethod.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "IncrementerMethod.localUserInv2 (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.localUserInv2 (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;
  var b$reqreads#13: bool;
  var b$reqreads#14: bool;
  var b$reqreads#15: bool;
  var b$reqreads#16: bool;
  var b$reqreads#17: bool;
  var b$reqreads#18: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;
    b$reqreads#13 := true;
    b$reqreads#14 := true;
    b$reqreads#15 := true;
    b$reqreads#16 := true;
    b$reqreads#17 := true;
    b$reqreads#18 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id1303"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.OwnedObject.owner];
        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
           == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
        {
            assert {:id "id1304"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.IncrementerMethod.counter];
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
        {
            assert {:id "id1305"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            b$reqreads#2 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)
        {
            assert {:id "id1306"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2))
            {
                b$reqreads#3 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            }

            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3))
            {
                assert {:id "id1307"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
                b$reqreads#4 := $_ReadsFrame[this, _module.IncrementerMethod.i];
            }
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int))
        {
            assert {:id "id1308"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3))
            {
                b$reqreads#5 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            }

            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4))
            {
                assert {:id "id1309"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
                b$reqreads#6 := $_ReadsFrame[this, _module.IncrementerMethod.i];
            }
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int))
        {
            assert {:id "id1310"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4))
            {
                b$reqreads#7 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            }

            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5))
            {
                assert {:id "id1311"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
                b$reqreads#8 := $_ReadsFrame[this, _module.IncrementerMethod.i];
            }
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int))
        {
            assert {:id "id1312"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5))
            {
                b$reqreads#9 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            }

            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6))
            {
                assert {:id "id1313"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
                b$reqreads#10 := $_ReadsFrame[this, _module.IncrementerMethod.i];
            }
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int))
        {
            assert {:id "id1314"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(6))
            {
                b$reqreads#11 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            }

            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7))
            {
                assert {:id "id1315"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
                b$reqreads#12 := $_ReadsFrame[this, _module.IncrementerMethod.i];
            }
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               < $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int))
        {
            assert {:id "id1316"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(7))
            {
                b$reqreads#13 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            }

            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8))
            {
                assert {:id "id1317"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
                b$reqreads#14 := $_ReadsFrame[this, _module.IncrementerMethod.i];
            }
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               < $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int))
        {
            assert {:id "id1318"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(8))
            {
                b$reqreads#15 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            }

            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2))
            {
                assert {:id "id1319"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
                b$reqreads#16 := $_ReadsFrame[this, _module.IncrementerMethod.i];
            }
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
           && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
             == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(3)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(4)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(5)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(6)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               < $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(7)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
           && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(2)
             ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
               == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int))
        {
            assert {:id "id1320"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(8))
            {
                b$reqreads#17 := $_ReadsFrame[this, _module.IncrementerMethod.programCounter];
            }

            if ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(8)
               && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                 == LitInt(9))
            {
                assert {:id "id1321"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
                b$reqreads#18 := $_ReadsFrame[this, _module.IncrementerMethod.i];
            }
        }

        assume {:id "id1322"} _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
           == (
            $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
             && $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
               == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
             && $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
               == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
             && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(2)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(3)
               ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
                 == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
             && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(3)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(4)
               ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
                 == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
             && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(4)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(5)
               ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
                 == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
             && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(5)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(6)
               ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
                 == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
             && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(6)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(7)
               ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
                 < $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
             && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(7)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(8)
               ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
                 == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
             && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(8)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(2)
               ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
                 == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int)
             && ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(8)
                 && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
                   == LitInt(9)
               ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
                 == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1323"} b$reqreads#0;
        assert {:id "id1324"} b$reqreads#1;
        assert {:id "id1325"} b$reqreads#2;
        assert {:id "id1326"} b$reqreads#3;
        assert {:id "id1327"} b$reqreads#4;
        assert {:id "id1328"} b$reqreads#5;
        assert {:id "id1329"} b$reqreads#6;
        assert {:id "id1330"} b$reqreads#7;
        assert {:id "id1331"} b$reqreads#8;
        assert {:id "id1332"} b$reqreads#9;
        assert {:id "id1333"} b$reqreads#10;
        assert {:id "id1334"} b$reqreads#11;
        assert {:id "id1335"} b$reqreads#12;
        assert {:id "id1336"} b$reqreads#13;
        assert {:id "id1337"} b$reqreads#14;
        assert {:id "id1338"} b$reqreads#15;
        assert {:id "id1339"} b$reqreads#16;
        assert {:id "id1340"} b$reqreads#17;
        assert {:id "id1341"} b$reqreads#18;
        return;

        assume false;
    }
}



procedure {:verboseName "IncrementerMethod.localUserInv2 (override check)"} OverrideCheck$$_module.IncrementerMethod.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.localUserInv2 (override check)"} OverrideCheck$$_module.IncrementerMethod.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var IncrementerMethod_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1342"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    IncrementerMethod_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1343"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.IncrementerMethod.userInv2
function _module.IncrementerMethod.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.IncrementerMethod.userInv2
axiom 4 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.IncrementerMethod.userInv2($prevHeap, $Heap, this) } 
    _module.IncrementerMethod.userInv2#canCall($prevHeap, $Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.IncrementerMethod())
           && $IsAlloc(this, Tclass._module.IncrementerMethod(), $prevHeap))
       ==> 
      _module.IncrementerMethod.userInv2($prevHeap, $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.IncrementerMethod.userInv2 (revealed)
axiom {:id "id1344"} 4 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.IncrementerMethod.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.userInv2#canCall($prevHeap, $Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.IncrementerMethod())
           && $IsAlloc(this, Tclass._module.IncrementerMethod(), $prevHeap))
       ==> _module.IncrementerMethod.localUserInv2#canCall($prevHeap, $Heap, this)
         && (_module.IncrementerMethod.localUserInv2($prevHeap, $Heap, this)
           ==> _module.OwnedObject.localInv2#canCall($prevHeap, 
              $Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
             && (_module.OwnedObject.localInv2($prevHeap, 
                $Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
               ==> _module.OwnedObject.localInv2#canCall($prevHeap, 
                $Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)))
         && _module.IncrementerMethod.userInv2($prevHeap, $Heap, this)
           == (
            _module.IncrementerMethod.localUserInv2($prevHeap, $Heap, this)
             && _module.OwnedObject.localInv2($prevHeap, 
              $Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
             && _module.OwnedObject.localInv2($prevHeap, 
              $Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)));
}

function _module.IncrementerMethod.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.IncrementerMethod.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.IncrementerMethod.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.IncrementerMethod.userInv2($prevHeap, $h0, this)
       == _module.IncrementerMethod.userInv2($prevHeap, $h1, this));

function _module.IncrementerMethod.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.IncrementerMethod.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.IncrementerMethod.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $prevHeap)
     ==> _module.IncrementerMethod.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.IncrementerMethod
axiom 4 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.IncrementerMethod()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.IncrementerMethod.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.IncrementerMethod.userInv2#canCall($prevHeap, $Heap, this)
         || (4 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.IncrementerMethod()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.IncrementerMethod.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "IncrementerMethod.userInv2 (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap));
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1345"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref;
  ensures {:id "id1346"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.IncrementerMethod.counter)): ref
         == $Unbox(read(current$Heap, this, _module.IncrementerMethod.counter)): ref;
  ensures {:id "id1347"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.IncrementerMethod.remaining)): ref
         == $Unbox(read(current$Heap, this, _module.IncrementerMethod.remaining)): ref;
  ensures {:id "id1348"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(2)
           && $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(3)
         ==> $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
           == $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1349"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(3)
           && $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(4)
         ==> $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
           == $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1350"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(4)
           && $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(5)
         ==> $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
           == $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1351"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(5)
           && $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(6)
         ==> $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
           == $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1352"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(6)
           && $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(7)
         ==> $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
           < $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1353"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(7)
           && $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(8)
         ==> $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
           == $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1354"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(8)
           && $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(2)
         ==> $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
           == $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int);
  ensures {:id "id1355"} _module.IncrementerMethod.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.IncrementerMethod.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.IncrementerMethod.localUserInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(8)
           && $Unbox(read(current$Heap, this, _module.IncrementerMethod.programCounter)): int
             == LitInt(9)
         ==> $Unbox(read(previous$Heap, this, _module.IncrementerMethod.i)): int
           == $Unbox(read(current$Heap, this, _module.IncrementerMethod.i)): int);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.userInv2 (well-formedness)"} CheckWellformed$$_module.IncrementerMethod.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.IncrementerMethod?(), $Heap);
            assert {:id "id1356"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            assert {:id "id1357"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this
               || _module.IncrementerMethod.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1358"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.IncrementerMethod?(), $Heap);
            assert {:id "id1359"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
            assume _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1360"} _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1361"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
               ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.IncrementerMethod?(), $Heap);
        assert {:id "id1362"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this);
        if (_module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.IncrementerMethod.counter];
            assert {:id "id1363"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox(read($Heap, this, _module.IncrementerMethod.counter), 
              Tclass._module.OwnedObject?(), 
              $Heap);
            assert {:id "id1364"} $IsAlloc($Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
              Tclass._module.AtomicCounter(), 
              old($Heap));
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localInv2#canCall(old($Heap), 
              $Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref);
        }

        if (_module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
           && _module.OwnedObject.localInv2(old($Heap), 
            $Heap, 
            $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref))
        {
            b$reqreads#3 := $_ReadsFrame[this, _module.IncrementerMethod.remaining];
            assert {:id "id1365"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox(read($Heap, this, _module.IncrementerMethod.remaining), 
              Tclass._module.OwnedObject?(), 
              $Heap);
            assert {:id "id1366"} $IsAlloc($Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
              Tclass._module.Remaining(), 
              old($Heap));
            b$reqreads#4 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localInv2#canCall(old($Heap), 
              $Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref);
        }

        assume {:id "id1367"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
           == (
            _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
             && _module.OwnedObject.localInv2(old($Heap), 
              $Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
             && _module.OwnedObject.localInv2(old($Heap), 
              $Heap, 
              $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref));
        assume _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
           && (_module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
             ==> _module.OwnedObject.localInv2#canCall(old($Heap), 
                $Heap, 
                $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
               && (_module.OwnedObject.localInv2(old($Heap), 
                  $Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref)
                 ==> _module.OwnedObject.localInv2#canCall(old($Heap), 
                  $Heap, 
                  $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.IncrementerMethod.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1368"} b$reqreads#0;
        assert {:id "id1369"} b$reqreads#1;
        assert {:id "id1370"} b$reqreads#2;
        assert {:id "id1371"} b$reqreads#3;
        assert {:id "id1372"} b$reqreads#4;
        return;

        assume false;
    }
}



procedure {:verboseName "IncrementerMethod.userInv2 (override check)"} OverrideCheck$$_module.IncrementerMethod.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), current$Heap));
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.userInv2 (override check)"} OverrideCheck$$_module.IncrementerMethod.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var IncrementerMethod_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1373"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    IncrementerMethod_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1374"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1375"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id1376"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
           == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref;
    assert {:id "id1377"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref
           == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref;
    assert {:id "id1378"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref
           == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref;
    assert {:id "id1379"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
             && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
           ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1380"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(3)
             && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4)
           ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1381"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(4)
             && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5)
           ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1382"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(5)
             && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(6)
           ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1383"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(6)
             && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(7)
           ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
             < $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1384"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(7)
             && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(8)
           ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1385"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(8)
             && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(2)
           ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
    assert {:id "id1386"} _module.IncrementerMethod.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.IncrementerMethod.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.IncrementerMethod.localUserInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.IncrementerMethod.programCounter)): int
               == LitInt(8)
             && $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
               == LitInt(9)
           ==> $Unbox(read(old($Heap), this, _module.IncrementerMethod.i)): int
             == $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int);
}



procedure {:verboseName "IncrementerMethod.admissibility (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.admissibility (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.IncrementerMethod.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1387"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
    assert {:id "id1388"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1389"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1390"} $IsAlloc(this, Tclass._module.IncrementerMethod(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1391"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id1392"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "IncrementerMethod.admissibility (override check)"} OverrideCheck$$_module.IncrementerMethod.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.admissibility (override check)"} OverrideCheck$$_module.IncrementerMethod.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id1393"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id1394"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id1395"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall(old($Heap), this)
           ==> _module.Object.baseInv(old($Heap), this)
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#0: ref :: 
                  { _module.Object.universe(o#0) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0)) } 
                  $Is(o#0, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#0))
                     ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                       && o#0 != _module.Object.universe(this))));
    assert {:id "id1396"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this))));
    assert {:id "id1397"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
           ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
             || (forall o#2: ref :: 
              { _module.Object.inv(old($Heap), o#2) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2))
                 ==> _module.Object.inv(old($Heap), o#2)));
    assert {:id "id1398"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id1399"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Object.baseInv#canCall($Heap, this)
           ==> _module.Object.baseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#3: ref :: 
                  { _module.Object.universe(o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                       && o#3 != _module.Object.universe(this))));
    assert {:id "id1400"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1401"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#4: ref :: 
                      { _module.Object.universe(o#4) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#4)) } 
                      $Is(o#4, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#4))
                         ==> _module.Object.universe(o#4) == _module.Object.universe(this)
                           && o#4 != _module.Object.universe(this)))));
    assert {:id "id1402"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#5: ref :: 
                  { _module.Object.inv(old($Heap), o#5) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#5)) } 
                  $Is(o#5, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5))
                     ==> _module.Object.inv(old($Heap), o#5))));
    assert {:id "id1403"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.universe(o#6) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                       && o#6 != _module.Object.universe(this))));
    assert {:id "id1404"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id1405"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id1406"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id1407"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#9: ref :: 
              { $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9)) } 
              $Is(o#9, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#9))
                 ==> $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int
                   <= $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id1408"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall t#0: ref :: 
              { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#0)) } 
                { _module.Object.universe(t#0) } 
                { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0)) } 
              $Is(t#0, Tclass._module.Thread())
                   && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#0))
                 ==> _module.Object.universe(t#0) == _module.Object.universe(this)
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(t#0))));
    assert {:id "id1409"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), 
            $Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.legalTransition(old($Heap), 
              $Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             || (forall o#10: ref :: 
              { $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#10)) } 
              $Is(o#10, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10))
                   && $Is($Unbox(read(old($Heap), o#10, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#10, _module.OwnedObject.owner))
                 ==> $Unbox(read(old($Heap), o#10, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id1410"} running#0 != null ==> running#0 != null;
    assert {:id "id1411"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1412"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1413"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id1414"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id1415"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "IncrementerMethod.admissibility (call)"} Call$$_module.IncrementerMethod.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id1416"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1417"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(previous$Heap, this)
         ==> _module.Object.baseInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  requires {:id "id1418"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
               || (forall o#12: ref :: 
                { _module.Object.universe(o#12) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> _module.Object.universe(o#12) == _module.Object.universe(this)
                     && o#12 != _module.Object.universe(this))));
  requires {:id "id1419"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
           || (forall o#13: ref :: 
            { _module.Object.inv(previous$Heap, o#13) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#13)) } 
            $Is(o#13, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#13))
               ==> _module.Object.inv(previous$Heap, o#13)));
  requires {:id "id1420"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1421"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Object.baseInv#canCall(current$Heap, this)
         ==> _module.Object.baseInv(current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#14: ref :: 
                { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#14))
                   ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                     && o#14 != _module.Object.universe(this))));
  requires {:id "id1422"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1423"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#15: ref :: 
                    { _module.Object.universe(o#15) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#15)) } 
                    $Is(o#15, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#15))
                       ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                         && o#15 != _module.Object.universe(this)))));
  requires {:id "id1424"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#16: ref :: 
                { _module.Object.inv(previous$Heap, o#16) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#16)) } 
                $Is(o#16, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#16))
                   ==> _module.Object.inv(previous$Heap, o#16))));
  requires {:id "id1425"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
               || (forall o#17: ref :: 
                { _module.Object.universe(o#17) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#17)) } 
                $Is(o#17, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#17))
                   ==> _module.Object.universe(o#17) == _module.Object.universe(this)
                     && o#17 != _module.Object.universe(this))));
  requires {:id "id1426"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id1427"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#18: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#18) } 
              { _module.Object.inv(current$Heap, o#18) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#18)) } 
            $Is(o#18, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#18))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#18
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#18))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#18
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#18))));
  requires {:id "id1428"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#19: ref :: 
            { _module.Object.inv(current$Heap, o#19) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
            $Is(o#19, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
               ==> _module.Object.inv(current$Heap, o#19)));
  requires {:id "id1429"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { $Unbox(read(current$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#20)) } 
            $Is(o#20, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#20))
               ==> $Unbox(read(previous$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int
                 <= $Unbox(read(current$Heap, o#20, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id1430"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall t#1: ref :: 
            { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(t#1)) } 
              { _module.Object.universe(t#1) } 
              { Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1)) } 
            $Is(t#1, Tclass._module.Thread())
                 && Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(t#1))
               ==> _module.Object.universe(t#1) == _module.Object.universe(this)
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(t#1))));
  requires {:id "id1431"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, 
          current$Heap, 
          _module.Object.universe(this), 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransition(previous$Heap, 
            current$Heap, 
            _module.Object.universe(this), 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#21))
                 && $Is($Unbox(read(previous$Heap, o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                read(previous$Heap, o#21, _module.OwnedObject.owner))
               ==> $Unbox(read(previous$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id1432"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
         && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  free ensures {:id "id1433"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "IncrementerMethod.admissibility (correctness)"} Impl$$_module.IncrementerMethod.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1434"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.baseInv(previous$Heap, this)
     && _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
     && _module.Object.baseInv(current$Heap, this)
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, 
      current$Heap, 
      _module.Object.universe(this), 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id1435"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this));
  ensures {:id "id1436"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1437"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id1438"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> (forall o#35: ref :: 
              { $Unbox(read(current$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(previous$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(previous$Heap, o#35, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#35)) } 
              $Is(o#35, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#35))
                   && $Unbox(read(previous$Heap, o#35, _module.OwnedObject.owner)): ref == this
                 ==> $Unbox(read(previous$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, o#35, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id1439"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id1440"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || _module.OwnedObject.userInv2(previous$Heap, current$Heap, this);
  ensures {:id "id1441"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1442"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1443"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1444"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id1445"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id1446"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.baseInv#canCall(current$Heap, this)
             ==> _module.Object.baseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#36: ref :: 
                    { _module.Object.universe(o#36) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#36)) } 
                    $Is(o#36, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#36))
                       ==> _module.Object.universe(o#36) == _module.Object.universe(this)
                         && o#36 != _module.Object.universe(this)))));
  ensures {:id "id1447"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.Object.universe($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(this));
  ensures {:id "id1448"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read(current$Heap, this, _module.OwnedObject.owner)));
  ensures {:id "id1449"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.baseUserInv(current$Heap, this));
  ensures {:id "id1450"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.localUserInv(current$Heap, this));
  ensures {:id "id1451"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.admissibility (correctness)"} Impl$$_module.IncrementerMethod.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.IncrementerMethod.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "IncrementerMethod._ctor (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    counter#0: ref
       where $Is(counter#0, Tclass._module.AtomicCounter())
         && $IsAlloc(counter#0, Tclass._module.AtomicCounter(), $Heap), 
    remaining#0: ref
       where $Is(remaining#0, Tclass._module.Remaining())
         && $IsAlloc(remaining#0, Tclass._module.Remaining(), $Heap))
   returns (this: ref);
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod._ctor (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.__ctor(universe#0: ref, running#0: ref, counter#0: ref, remaining#0: ref)
   returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.IncrementerMethod.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0 || $o == remaining#0);
    assert {:id "id1452"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id1453"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id1454"} running#0 != null;
    assume {:id "id1455"} _module.Object.universe(running#0) == universe#0;
    assert {:id "id1456"} running#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(running#0), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.inv#canCall($Heap, running#0);
    assume {:id "id1457"} _module.Thread.inv($Heap, running#0);
    assert {:id "id1458"} counter#0 != null;
    assume {:id "id1459"} _module.Object.universe(counter#0) == universe#0;
    assert {:id "id1460"} counter#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(counter#0), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, counter#0);
    assume {:id "id1461"} _module.OwnedObject.inv($Heap, counter#0);
    assert {:id "id1462"} remaining#0 != null;
    assume {:id "id1463"} _module.Object.universe(remaining#0) == universe#0;
    assert {:id "id1464"} remaining#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(remaining#0), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, remaining#0);
    assume {:id "id1465"} _module.OwnedObject.inv($Heap, remaining#0);
    assert {:id "id1466"} remaining#0 != null;
    assume {:id "id1467"} $Unbox(read($Heap, remaining#0, _module.OwnedObject.owner)): ref == running#0;
    assert {:id "id1468"} remaining#0 != null;
    assume {:id "id1469"} $Unbox(read($Heap, remaining#0, _module.Remaining.value)): int == LitInt(10);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0 || $o == remaining#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.IncrementerMethod())
       && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1470"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1471"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id1472"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id1473"} _module.Universe.globalInv2(old($Heap), $Heap, universe#0);
    assume {:id "id1474"} _module.Object.universe(this) == universe#0;
    assume {:id "id1475"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref == counter#0;
    assume {:id "id1476"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
       == remaining#0;
    assert {:id "id1477"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
    assume {:id "id1478"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
          _module.OwnedObject.owner)): ref
       == this;
    assume {:id "id1479"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(0);
    assume {:id "id1480"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assert {:id "id1481"} universe#0 != null;
    assert {:id "id1482"} universe#0 != null;
    assert {:id "id1483"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id1484"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "IncrementerMethod._ctor (call)"} Call$$_module.IncrementerMethod.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    counter#0: ref
       where $Is(counter#0, Tclass._module.AtomicCounter())
         && $IsAlloc(counter#0, Tclass._module.AtomicCounter(), $Heap), 
    remaining#0: ref
       where $Is(remaining#0, Tclass._module.Remaining())
         && $IsAlloc(remaining#0, Tclass._module.Remaining(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap));
  // user-defined preconditions
  requires {:id "id1485"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0 && o#0 != universe#0));
  requires {:id "id1486"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id1487"} _module.Object.universe(running#0) == universe#0;
  requires {:id "id1488"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0) || Lit(true);
  requires {:id "id1489"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0) || Lit(true));
  requires {:id "id1490"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                $Box(running#0))));
  requires {:id "id1491"} _module.Thread.inv#canCall($Heap, running#0)
     ==> _module.Thread.inv($Heap, running#0)
       || (_module.Thread.localInv#canCall($Heap, running#0)
         ==> _module.Thread.localInv($Heap, running#0)
           || (_module.Object.baseInv#canCall($Heap, running#0)
             ==> _module.Object.baseInv($Heap, running#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(running#0))
                 ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(running#0))
                   || (forall o#2: ref :: 
                    { _module.Object.universe(o#2) } 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                        $Box(o#2)) } 
                    $Is(o#2, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, _module.Object.universe(running#0), _module.Universe.content)): Set, 
                          $Box(o#2))
                       ==> _module.Object.universe(o#2) == _module.Object.universe(running#0)
                         && o#2 != _module.Object.universe(running#0)))));
  requires {:id "id1492"} _module.Object.universe(counter#0) == universe#0;
  requires {:id "id1493"} _module.OwnedObject.inv#canCall($Heap, counter#0)
     ==> _module.OwnedObject.inv($Heap, counter#0)
       || (_module.OwnedObject.localInv#canCall($Heap, counter#0)
         ==> _module.OwnedObject.localInv($Heap, counter#0)
           || (_module.Object.baseInv#canCall($Heap, counter#0)
             ==> _module.Object.baseInv($Heap, counter#0)
               || Set#IsMember($Unbox(read($Heap, _module.Object.universe(counter#0), _module.Universe.content)): Set, 
                $Box(counter#0))));
  requires {:id "id1494"} _module.OwnedObject.inv#canCall($Heap, counter#0)
     ==> _module.OwnedObject.inv($Heap, counter#0)
       || (_module.OwnedObject.localInv#canCall($Heap, counter#0)
         ==> _module.OwnedObject.localInv($Heap, counter#0)
           || (_module.Object.baseInv#canCall($Heap, counter#0)
             ==> _module.Object.baseInv($Heap, counter#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(counter#0))
                 ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(counter#0))
                   || (forall o#3: ref :: 
                    { _module.Object.universe(o#3) } 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(counter#0), _module.Universe.content)): Set, 
                        $Box(o#3)) } 
                    $Is(o#3, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, _module.Object.universe(counter#0), _module.Universe.content)): Set, 
                          $Box(o#3))
                       ==> _module.Object.universe(o#3) == _module.Object.universe(counter#0)
                         && o#3 != _module.Object.universe(counter#0)))));
  requires {:id "id1495"} _module.OwnedObject.inv#canCall($Heap, counter#0)
     ==> _module.OwnedObject.inv($Heap, counter#0)
       || (_module.OwnedObject.localInv#canCall($Heap, counter#0)
         ==> _module.OwnedObject.localInv($Heap, counter#0)
           || _module.Object.universe($Unbox(read($Heap, counter#0, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(counter#0));
  requires {:id "id1496"} _module.OwnedObject.inv#canCall($Heap, counter#0)
     ==> _module.OwnedObject.inv($Heap, counter#0)
       || (_module.OwnedObject.localInv#canCall($Heap, counter#0)
         ==> _module.OwnedObject.localInv($Heap, counter#0)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(counter#0), _module.Universe.content)): Set, 
            read($Heap, counter#0, _module.OwnedObject.owner)));
  requires {:id "id1497"} _module.OwnedObject.inv#canCall($Heap, counter#0)
     ==> _module.OwnedObject.inv($Heap, counter#0)
       || (_module.OwnedObject.localInv#canCall($Heap, counter#0)
         ==> _module.OwnedObject.localInv($Heap, counter#0)
           || _module.OwnedObject.baseUserInv($Heap, counter#0));
  requires {:id "id1498"} _module.OwnedObject.inv#canCall($Heap, counter#0)
     ==> _module.OwnedObject.inv($Heap, counter#0)
       || (_module.OwnedObject.localInv#canCall($Heap, counter#0)
         ==> _module.OwnedObject.localInv($Heap, counter#0)
           || _module.OwnedObject.localUserInv($Heap, counter#0));
  requires {:id "id1499"} _module.OwnedObject.inv#canCall($Heap, counter#0)
     ==> _module.OwnedObject.inv($Heap, counter#0)
       || _module.OwnedObject.userInv($Heap, counter#0);
  requires {:id "id1500"} _module.Object.universe(remaining#0) == universe#0;
  requires {:id "id1501"} _module.OwnedObject.inv#canCall($Heap, remaining#0)
     ==> _module.OwnedObject.inv($Heap, remaining#0)
       || (_module.OwnedObject.localInv#canCall($Heap, remaining#0)
         ==> _module.OwnedObject.localInv($Heap, remaining#0)
           || (_module.Object.baseInv#canCall($Heap, remaining#0)
             ==> _module.Object.baseInv($Heap, remaining#0)
               || Set#IsMember($Unbox(read($Heap, _module.Object.universe(remaining#0), _module.Universe.content)): Set, 
                $Box(remaining#0))));
  requires {:id "id1502"} _module.OwnedObject.inv#canCall($Heap, remaining#0)
     ==> _module.OwnedObject.inv($Heap, remaining#0)
       || (_module.OwnedObject.localInv#canCall($Heap, remaining#0)
         ==> _module.OwnedObject.localInv($Heap, remaining#0)
           || (_module.Object.baseInv#canCall($Heap, remaining#0)
             ==> _module.Object.baseInv($Heap, remaining#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(remaining#0))
                 ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(remaining#0))
                   || (forall o#4: ref :: 
                    { _module.Object.universe(o#4) } 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(remaining#0), _module.Universe.content)): Set, 
                        $Box(o#4)) } 
                    $Is(o#4, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, _module.Object.universe(remaining#0), _module.Universe.content)): Set, 
                          $Box(o#4))
                       ==> _module.Object.universe(o#4) == _module.Object.universe(remaining#0)
                         && o#4 != _module.Object.universe(remaining#0)))));
  requires {:id "id1503"} _module.OwnedObject.inv#canCall($Heap, remaining#0)
     ==> _module.OwnedObject.inv($Heap, remaining#0)
       || (_module.OwnedObject.localInv#canCall($Heap, remaining#0)
         ==> _module.OwnedObject.localInv($Heap, remaining#0)
           || _module.Object.universe($Unbox(read($Heap, remaining#0, _module.OwnedObject.owner)): ref)
             == _module.Object.universe(remaining#0));
  requires {:id "id1504"} _module.OwnedObject.inv#canCall($Heap, remaining#0)
     ==> _module.OwnedObject.inv($Heap, remaining#0)
       || (_module.OwnedObject.localInv#canCall($Heap, remaining#0)
         ==> _module.OwnedObject.localInv($Heap, remaining#0)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(remaining#0), _module.Universe.content)): Set, 
            read($Heap, remaining#0, _module.OwnedObject.owner)));
  requires {:id "id1505"} _module.OwnedObject.inv#canCall($Heap, remaining#0)
     ==> _module.OwnedObject.inv($Heap, remaining#0)
       || (_module.OwnedObject.localInv#canCall($Heap, remaining#0)
         ==> _module.OwnedObject.localInv($Heap, remaining#0)
           || _module.OwnedObject.baseUserInv($Heap, remaining#0));
  requires {:id "id1506"} _module.OwnedObject.inv#canCall($Heap, remaining#0)
     ==> _module.OwnedObject.inv($Heap, remaining#0)
       || (_module.OwnedObject.localInv#canCall($Heap, remaining#0)
         ==> _module.OwnedObject.localInv($Heap, remaining#0)
           || _module.OwnedObject.localUserInv($Heap, remaining#0));
  requires {:id "id1507"} _module.OwnedObject.inv#canCall($Heap, remaining#0)
     ==> _module.OwnedObject.inv($Heap, remaining#0)
       || _module.OwnedObject.userInv($Heap, remaining#0);
  requires {:id "id1508"} $Unbox(read($Heap, remaining#0, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1509"} $Unbox(read($Heap, remaining#0, _module.Remaining.value)): int == LitInt(10);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id1510"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1511"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
     && 
    true
     && (forall o#8: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8))
         ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
           && _module.Object.inv2(old($Heap), $Heap, o#8));
  free ensures true;
  ensures {:id "id1512"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1513"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref == counter#0;
  ensures {:id "id1514"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
     == remaining#0;
  ensures {:id "id1515"} $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
        _module.OwnedObject.owner)): ref
     == this;
  ensures {:id "id1516"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(0);
  ensures {:id "id1517"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id1518"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0 || $o == remaining#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod._ctor (correctness)"} Impl$$_module.IncrementerMethod.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    counter#0: ref
       where $Is(counter#0, Tclass._module.AtomicCounter())
         && $IsAlloc(counter#0, Tclass._module.AtomicCounter(), $Heap), 
    remaining#0: ref
       where $Is(remaining#0, Tclass._module.Remaining())
         && $IsAlloc(remaining#0, Tclass._module.Remaining(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1519"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#10: ref :: 
      { _module.Object.inv($Heap, o#10) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10)) } 
      $Is(o#10, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10))
         ==> _module.Object.inv($Heap, o#10));
  requires {:id "id1520"} _module.Object.universe(running#0) == universe#0;
  free requires {:id "id1521"} _module.Thread.inv#canCall($Heap, running#0)
     && 
    _module.Thread.inv($Heap, running#0)
     && 
    true
     && _module.Thread.localInv($Heap, running#0);
  requires {:id "id1522"} _module.Object.universe(counter#0) == universe#0;
  free requires {:id "id1523"} _module.OwnedObject.inv#canCall($Heap, counter#0)
     && 
    _module.OwnedObject.inv($Heap, counter#0)
     && 
    _module.OwnedObject.localInv($Heap, counter#0)
     && _module.OwnedObject.userInv($Heap, counter#0);
  requires {:id "id1524"} _module.Object.universe(remaining#0) == universe#0;
  free requires {:id "id1525"} _module.OwnedObject.inv#canCall($Heap, remaining#0)
     && 
    _module.OwnedObject.inv($Heap, remaining#0)
     && 
    _module.OwnedObject.localInv($Heap, remaining#0)
     && _module.OwnedObject.userInv($Heap, remaining#0);
  requires {:id "id1526"} $Unbox(read($Heap, remaining#0, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1527"} $Unbox(read($Heap, remaining#0, _module.Remaining.value)): int == LitInt(10);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id1528"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1529"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#14: ref :: 
                { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#14))
                   ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                     && o#14 != _module.Object.universe(this))));
  ensures {:id "id1530"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                     && o#15 != _module.Object.universe(this))));
  ensures {:id "id1531"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#16: ref :: 
            { _module.Object.inv($Heap, o#16) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> _module.Object.inv($Heap, o#16)));
  ensures {:id "id1532"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0) || Lit(true);
  ensures {:id "id1533"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
       || (forall o#17: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#17) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
        $Is(o#17, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
           ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#17))
             && _module.Object.inv2(old($Heap), $Heap, o#17));
  free ensures true;
  ensures {:id "id1534"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1535"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref == counter#0;
  ensures {:id "id1536"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
     == remaining#0;
  ensures {:id "id1537"} $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
        _module.OwnedObject.owner)): ref
     == this;
  ensures {:id "id1538"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(0);
  ensures {:id "id1539"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id1540"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0 || $o == remaining#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod._ctor (correctness)"} Impl$$_module.IncrementerMethod.__ctor(universe#0: ref, running#0: ref, counter#0: ref, remaining#0: ref)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.programCounter: int;
  var this.counter: ref;
  var this.remaining: ref;
  var this.initial_value: int;
  var this.final_value: int;
  var this.i: int;
  var defass#this.owner: bool;
  var defass#this.universe: bool;
  var defass#this.counter: bool;
  var defass#this.remaining: bool;
  var $rhs#0: ref;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.IncrementerMethod.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0 || $o == remaining#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(480,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(481,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(482,25)
    assume true;
    assume true;
    this.programCounter := LitInt(0);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(483,18)
    assume true;
    assume true;
    this.counter := counter#0;
    defass#this.counter := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(484,20)
    assume true;
    assume true;
    this.remaining := remaining#0;
    defass#this.remaining := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(485,16)
    assume true;
    assume true;
    this.owner := running#0;
    defass#this.owner := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(480,3)
    assert {:id "id1546"} defass#this.owner;
    assert {:id "id1547"} defass#this.universe;
    assert {:id "id1548"} defass#this.counter;
    assert {:id "id1549"} defass#this.remaining;
    assume this != null && $Is(this, Tclass._module.IncrementerMethod?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == this.programCounter;
    assume $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref
       == this.counter;
    assume $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref
       == this.remaining;
    assume $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int
       == this.initial_value;
    assume $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int
       == this.final_value;
    assume $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == this.i;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(480,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(487,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1550"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1551"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(488,21)
    assert {:id "id1552"} remaining#0 != null;
    assume true;
    assert {:id "id1553"} $_ModifiesFrame[remaining#0, _module.OwnedObject.owner];
    assume true;
    $rhs#0 := this;
    $Heap := update($Heap, remaining#0, _module.OwnedObject.owner, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(489,48)
    assert {:id "id1556"} remaining#0 != null;
    assume true;
    $obj0 := remaining#0;
    assert {:id "id1557"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assert {:id "id1558"} remaining#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, remaining#0, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1559"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(490,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1561"} universe#0 != null;
    assert {:id "id1562"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    call {:id "id1563"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(491,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1564"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(492,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1565"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1566"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1567"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1568"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement0 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement0(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement0 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement0(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement0, CheckWellFormed$$_module.IncrementerMethod.Statement0
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1569"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1570"} running#0 != null;
    assume {:id "id1571"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id1572"} _module.Object.universe(this) != null;
    assume {:id "id1573"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id1574"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1575"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1576"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1577"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1578"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1579"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1580"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(1);
}



procedure {:verboseName "IncrementerMethod.Statement0 (call)"} Call$$_module.IncrementerMethod.Statement0(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1581"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1582"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id1583"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id1584"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id1585"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1586"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1587"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1588"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id1589"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1590"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id1591"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(1);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement0 (correctness)"} Impl$$_module.IncrementerMethod.Statement0(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1592"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id1593"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1594"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1595"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1596"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id1597"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1598"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id1599"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id1600"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id1601"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id1602"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id1603"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(1);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement0 (correctness)"} Impl$$_module.IncrementerMethod.Statement0(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: int;
  var $rhs#1: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement0, Impl$$_module.IncrementerMethod.Statement0
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(500,7)
    assume true;
    assert {:id "id1604"} $_ModifiesFrame[this, _module.IncrementerMethod.i];
    assume true;
    $rhs#0 := LitInt(0);
    $Heap := update($Heap, this, _module.IncrementerMethod.i, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(501,20)
    assume true;
    assert {:id "id1607"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
    assume true;
    $rhs#1 := LitInt(1);
    $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(502,38)
    assume true;
    $obj0 := this;
    assert {:id "id1610"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1611"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(503,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1613"} _module.Object.universe(this) != null;
    assert {:id "id1614"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id1615"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(504,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1616"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(505,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1617"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1618"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1619"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1620"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement1 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement1(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement1 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement1(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement1, CheckWellFormed$$_module.IncrementerMethod.Statement1
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1621"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1622"} running#0 != null;
    assume {:id "id1623"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id1624"} _module.Object.universe(this) != null;
    assume {:id "id1625"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id1626"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1627"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(1);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1628"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1629"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1630"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1631"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       != LitInt(2))
    {
    }

    assume {:id "id1632"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
         == LitInt(2)
       || $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
         == LitInt(9);
}



procedure {:verboseName "IncrementerMethod.Statement1 (call)"} Call$$_module.IncrementerMethod.Statement1(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1633"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1634"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id1635"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id1636"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id1637"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1638"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1639"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1640"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(1);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id1641"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1642"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id1643"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(2)
     || $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(9);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement1 (correctness)"} Impl$$_module.IncrementerMethod.Statement1(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1644"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id1645"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1646"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1647"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1648"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(1);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id1649"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1650"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id1651"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id1652"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id1653"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id1654"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id1655"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(2)
     || $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(9);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement1 (correctness)"} Impl$$_module.IncrementerMethod.Statement1(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0_0: int;
  var $rhs#1_0: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement1, Impl$$_module.IncrementerMethod.Statement1
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(513,5)
    assume true;
    if ($Unbox(read($Heap, this, _module.IncrementerMethod.i)): int < 10)
    {
        push;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(513,34)
        assume true;
        assert {:id "id1656"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
        assume true;
        $rhs#0_0 := LitInt(2);
        $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#0_0));
        assume $IsGoodHeap($Heap);
        pop;
    }
    else
    {
        push;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(513,64)
        assume true;
        assert {:id "id1659"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
        assume true;
        $rhs#1_0 := LitInt(9);
        $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#1_0));
        assume $IsGoodHeap($Heap);
        pop;
    }

    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(514,38)
    assume true;
    $obj0 := this;
    assert {:id "id1662"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1663"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(515,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1665"} _module.Object.universe(this) != null;
    assert {:id "id1666"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id1667"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(516,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1668"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(517,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1669"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1670"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1671"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1672"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement2 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement2 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement2(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement2, CheckWellFormed$$_module.IncrementerMethod.Statement2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1673"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1674"} running#0 != null;
    assume {:id "id1675"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id1676"} _module.Object.universe(this) != null;
    assume {:id "id1677"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id1678"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1679"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(2);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1680"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1681"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1682"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1683"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1684"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(3);
}



procedure {:verboseName "IncrementerMethod.Statement2 (call)"} Call$$_module.IncrementerMethod.Statement2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1685"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1686"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id1687"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id1688"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id1689"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1690"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1691"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1692"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(2);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id1693"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1694"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id1695"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(3);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement2 (correctness)"} Impl$$_module.IncrementerMethod.Statement2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1696"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id1697"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1698"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1699"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1700"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(2);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id1701"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1702"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id1703"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id1704"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id1705"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id1706"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id1707"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(3);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement2 (correctness)"} Impl$$_module.IncrementerMethod.Statement2(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: int;
  var $rhs#1: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement2, Impl$$_module.IncrementerMethod.Statement2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(525,19)
    assume true;
    assert {:id "id1708"} $_ModifiesFrame[this, _module.IncrementerMethod.initial__value];
    assert {:id "id1709"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
    assume true;
    $rhs#0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
        _module.AtomicCounter.value)): int;
    $Heap := update($Heap, this, _module.IncrementerMethod.initial__value, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(526,20)
    assume true;
    assert {:id "id1712"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
    assume true;
    $rhs#1 := LitInt(3);
    $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(527,38)
    assume true;
    $obj0 := this;
    assert {:id "id1715"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1716"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(528,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1718"} _module.Object.universe(this) != null;
    assert {:id "id1719"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id1720"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(529,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1721"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(530,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1722"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1723"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1724"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1725"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement3 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement3(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement3 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement3(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement3, CheckWellFormed$$_module.IncrementerMethod.Statement3
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || $o == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1726"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1727"} running#0 != null;
    assume {:id "id1728"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id1729"} _module.Object.universe(this) != null;
    assume {:id "id1730"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id1731"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1732"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(3);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == this
           || $o == $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1733"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1734"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1735"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1736"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1737"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(4);
}



procedure {:verboseName "IncrementerMethod.Statement3 (call)"} Call$$_module.IncrementerMethod.Statement3(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1738"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1739"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id1740"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id1741"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id1742"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1743"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1744"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1745"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(3);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id1746"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1747"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id1748"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(4);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || $o == $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement3 (correctness)"} Impl$$_module.IncrementerMethod.Statement3(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1749"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id1750"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1751"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1752"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1753"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(3);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id1754"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1755"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id1756"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id1757"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id1758"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id1759"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id1760"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(4);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || $o == $Unbox(read(old($Heap), this, _module.IncrementerMethod.counter)): ref);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement3 (correctness)"} Impl$$_module.IncrementerMethod.Statement3(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: int;
  var $rhs#1: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement3, Impl$$_module.IncrementerMethod.Statement3
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || $o == $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(538,19)
    assert {:id "id1761"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
    assume true;
    assert {:id "id1762"} $_ModifiesFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, _module.AtomicCounter.value];
    assert {:id "id1763"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
    assume true;
    $rhs#0 := $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
          _module.AtomicCounter.value)): int
       + 1;
    $Heap := update($Heap, 
      $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
      _module.AtomicCounter.value, 
      $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(539,20)
    assume true;
    assert {:id "id1766"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
    assume true;
    $rhs#1 := LitInt(4);
    $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(540,38)
    assume true;
    $obj0 := this;
    assert {:id "id1769"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1770"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(541,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1772"} _module.Object.universe(this) != null;
    assert {:id "id1773"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id1774"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(542,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1775"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(543,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1776"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1777"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1778"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1779"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement4 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement4(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement4 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement4(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement4, CheckWellFormed$$_module.IncrementerMethod.Statement4
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1780"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1781"} running#0 != null;
    assume {:id "id1782"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id1783"} _module.Object.universe(this) != null;
    assume {:id "id1784"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id1785"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1786"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(4);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1787"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1788"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1789"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1790"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1791"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(5);
}



procedure {:verboseName "IncrementerMethod.Statement4 (call)"} Call$$_module.IncrementerMethod.Statement4(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1792"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1793"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id1794"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id1795"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id1796"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1797"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1798"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1799"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(4);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id1800"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1801"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id1802"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(5);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement4 (correctness)"} Impl$$_module.IncrementerMethod.Statement4(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1803"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id1804"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1805"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1806"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1807"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(4);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id1808"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1809"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id1810"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id1811"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id1812"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id1813"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id1814"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(5);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement4 (correctness)"} Impl$$_module.IncrementerMethod.Statement4(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: int;
  var $rhs#1: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement4, Impl$$_module.IncrementerMethod.Statement4
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(551,17)
    assume true;
    assert {:id "id1815"} $_ModifiesFrame[this, _module.IncrementerMethod.final__value];
    assert {:id "id1816"} $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref != null;
    assume true;
    $rhs#0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.IncrementerMethod.counter)): ref, 
        _module.AtomicCounter.value)): int;
    $Heap := update($Heap, this, _module.IncrementerMethod.final__value, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(552,20)
    assume true;
    assert {:id "id1819"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
    assume true;
    $rhs#1 := LitInt(5);
    $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(553,38)
    assume true;
    $obj0 := this;
    assert {:id "id1822"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1823"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(554,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1825"} _module.Object.universe(this) != null;
    assert {:id "id1826"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id1827"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(555,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1828"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(556,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1829"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1830"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1831"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1832"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement5 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement5(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement5 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement5(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement5, CheckWellFormed$$_module.IncrementerMethod.Statement5
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1833"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1834"} running#0 != null;
    assume {:id "id1835"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id1836"} _module.Object.universe(this) != null;
    assume {:id "id1837"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id1838"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1839"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(5);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1840"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1841"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1842"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1843"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1844"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(6);
}



procedure {:verboseName "IncrementerMethod.Statement5 (call)"} Call$$_module.IncrementerMethod.Statement5(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1845"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1846"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id1847"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id1848"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id1849"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1850"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1851"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1852"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(5);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id1853"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1854"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id1855"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(6);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement5 (correctness)"} Impl$$_module.IncrementerMethod.Statement5(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1856"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id1857"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1858"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1859"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1860"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(5);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id1861"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1862"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id1863"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id1864"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id1865"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id1866"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id1867"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(6);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement5 (correctness)"} Impl$$_module.IncrementerMethod.Statement5(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement5, Impl$$_module.IncrementerMethod.Statement5
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    $_reverifyPost := false;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(564,5)
    assume true;
    assert {:id "id1868"} $Unbox(read($Heap, this, _module.IncrementerMethod.initial__value)): int + 1
       <= $Unbox(read($Heap, this, _module.IncrementerMethod.final__value)): int;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(565,20)
    assume true;
    assert {:id "id1869"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
    assume true;
    $rhs#0 := LitInt(6);
    $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(566,38)
    assume true;
    $obj0 := this;
    assert {:id "id1872"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1873"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(567,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1875"} _module.Object.universe(this) != null;
    assert {:id "id1876"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id1877"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(568,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1878"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(569,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1879"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1880"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1881"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1882"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement6 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement6(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement6 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement6(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement6, CheckWellFormed$$_module.IncrementerMethod.Statement6
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1883"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1884"} running#0 != null;
    assume {:id "id1885"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id1886"} _module.Object.universe(this) != null;
    assume {:id "id1887"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id1888"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1889"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(6);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1890"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1891"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1892"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1893"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1894"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(7);
}



procedure {:verboseName "IncrementerMethod.Statement6 (call)"} Call$$_module.IncrementerMethod.Statement6(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1895"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1896"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id1897"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id1898"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id1899"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1900"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1901"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1902"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(6);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id1903"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1904"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id1905"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(7);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement6 (correctness)"} Impl$$_module.IncrementerMethod.Statement6(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1906"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id1907"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1908"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1909"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1910"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(6);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id1911"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1912"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id1913"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id1914"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id1915"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id1916"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id1917"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(7);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement6 (correctness)"} Impl$$_module.IncrementerMethod.Statement6(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: int;
  var $rhs#1: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement6, Impl$$_module.IncrementerMethod.Statement6
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(577,7)
    assume true;
    assert {:id "id1918"} $_ModifiesFrame[this, _module.IncrementerMethod.i];
    assume true;
    $rhs#0 := $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int + 1;
    $Heap := update($Heap, this, _module.IncrementerMethod.i, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(578,20)
    assume true;
    assert {:id "id1921"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
    assume true;
    $rhs#1 := LitInt(7);
    $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(579,38)
    assume true;
    $obj0 := this;
    assert {:id "id1924"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1925"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(580,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1927"} _module.Object.universe(this) != null;
    assert {:id "id1928"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id1929"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(581,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1930"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(582,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1931"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1932"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1933"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1934"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement7 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement7(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement7 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement7(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement7, CheckWellFormed$$_module.IncrementerMethod.Statement7
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || $o == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1935"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1936"} running#0 != null;
    assume {:id "id1937"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id1938"} _module.Object.universe(this) != null;
    assume {:id "id1939"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id1940"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1941"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(7);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == this
           || $o == $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1942"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1943"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1944"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1945"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id1946"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(8);
}



procedure {:verboseName "IncrementerMethod.Statement7 (call)"} Call$$_module.IncrementerMethod.Statement7(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1947"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id1948"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id1949"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id1950"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id1951"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1952"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1953"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1954"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(7);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id1955"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1956"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id1957"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(8);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || $o == $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement7 (correctness)"} Impl$$_module.IncrementerMethod.Statement7(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1958"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id1959"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id1960"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id1961"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id1962"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(7);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id1963"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1964"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id1965"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id1966"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id1967"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id1968"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id1969"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(8);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || $o == $Unbox(read(old($Heap), this, _module.IncrementerMethod.remaining)): ref);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement7 (correctness)"} Impl$$_module.IncrementerMethod.Statement7(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var $rhs#1: int;
  var $rhs##1: int;
  var last##1: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement7, Impl$$_module.IncrementerMethod.Statement7
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || $o == $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(590,21)
    assert {:id "id1970"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
    assume true;
    assert {:id "id1971"} $_ModifiesFrame[$Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, _module.Remaining.value];
    assert {:id "id1972"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
    assume true;
    $rhs#0 := $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
          _module.Remaining.value)): int
       - 1;
    $Heap := update($Heap, 
      $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
      _module.Remaining.value, 
      $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(591,48)
    assert {:id "id1975"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
    assume true;
    $obj0 := $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref;
    assert {:id "id1976"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assert {:id "id1977"} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
        _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1978"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(592,20)
    assume true;
    assert {:id "id1980"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
    assume true;
    $rhs#1 := LitInt(8);
    $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(593,38)
    assume true;
    $obj0 := this;
    assert {:id "id1983"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##1 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1984"} $rhs##1 := Call$$_module.__default.BumpVersion(last##1);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(594,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1986"} _module.Object.universe(this) != null;
    assert {:id "id1987"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id1988"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(595,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id1989"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(596,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1990"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1991"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1992"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1993"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement8 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement8(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement8 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement8(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement8, CheckWellFormed$$_module.IncrementerMethod.Statement8
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1994"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1995"} running#0 != null;
    assume {:id "id1996"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id1997"} _module.Object.universe(this) != null;
    assume {:id "id1998"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id1999"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id2000"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(8);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2001"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id2002"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id2003"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id2004"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    if ($Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       != LitInt(2))
    {
    }

    assume {:id "id2005"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
         == LitInt(2)
       || $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
         == LitInt(9);
}



procedure {:verboseName "IncrementerMethod.Statement8 (call)"} Call$$_module.IncrementerMethod.Statement8(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id2006"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id2007"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id2008"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id2009"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id2010"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id2011"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id2012"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id2013"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(8);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id2014"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id2015"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id2016"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(2)
     || $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(9);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement8 (correctness)"} Impl$$_module.IncrementerMethod.Statement8(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2017"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id2018"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id2019"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id2020"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id2021"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(8);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id2022"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id2023"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id2024"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id2025"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id2026"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id2027"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id2028"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(2)
     || $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(9);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement8 (correctness)"} Impl$$_module.IncrementerMethod.Statement8(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0_0: int;
  var $rhs#1_0: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement8, Impl$$_module.IncrementerMethod.Statement8
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(604,5)
    assume true;
    if ($Unbox(read($Heap, this, _module.IncrementerMethod.i)): int < 10)
    {
        push;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(604,34)
        assume true;
        assert {:id "id2029"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
        assume true;
        $rhs#0_0 := LitInt(2);
        $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#0_0));
        assume $IsGoodHeap($Heap);
        pop;
    }
    else
    {
        push;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(604,64)
        assume true;
        assert {:id "id2032"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
        assume true;
        $rhs#1_0 := LitInt(9);
        $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#1_0));
        assume $IsGoodHeap($Heap);
        pop;
    }

    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(605,38)
    assume true;
    $obj0 := this;
    assert {:id "id2035"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id2036"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(606,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2038"} _module.Object.universe(this) != null;
    assert {:id "id2039"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id2040"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(607,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id2041"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(608,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2042"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id2043"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id2044"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id2045"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement9 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement9(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement9 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement9(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement9, CheckWellFormed$$_module.IncrementerMethod.Statement9
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2046"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id2047"} running#0 != null;
    assume {:id "id2048"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id2049"} _module.Object.universe(this) != null;
    assume {:id "id2050"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id2051"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id2052"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(9);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2053"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id2054"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id2055"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id2056"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id2057"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(10);
}



procedure {:verboseName "IncrementerMethod.Statement9 (call)"} Call$$_module.IncrementerMethod.Statement9(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id2058"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id2059"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id2060"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id2061"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id2062"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id2063"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id2064"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id2065"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(9);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id2066"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id2067"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id2068"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(10);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement9 (correctness)"} Impl$$_module.IncrementerMethod.Statement9(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2069"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id2070"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id2071"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id2072"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id2073"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(9);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id2074"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id2075"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id2076"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id2077"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id2078"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id2079"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id2080"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(10);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement9 (correctness)"} Impl$$_module.IncrementerMethod.Statement9(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: int;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement9, Impl$$_module.IncrementerMethod.Statement9
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    $_reverifyPost := false;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(616,5)
    assume true;
    assert {:id "id2081"} $Unbox(read($Heap, this, _module.IncrementerMethod.i)): int == LitInt(10);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(617,20)
    assume true;
    assert {:id "id2082"} $_ModifiesFrame[this, _module.IncrementerMethod.programCounter];
    assume true;
    $rhs#0 := LitInt(10);
    $Heap := update($Heap, this, _module.IncrementerMethod.programCounter, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(618,38)
    assume true;
    $obj0 := this;
    assert {:id "id2085"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id2086"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(619,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2088"} _module.Object.universe(this) != null;
    assert {:id "id2089"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id2090"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(620,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id2091"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(621,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2092"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id2093"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id2094"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id2095"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "IncrementerMethod.Statement10 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement10(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement10 (well-formedness)"} CheckWellFormed$$_module.IncrementerMethod.Statement10(this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Statement10, CheckWellFormed$$_module.IncrementerMethod.Statement10
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2096"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id2097"} running#0 != null;
    assume {:id "id2098"} _module.Object.universe(running#0) == _module.Object.universe(this);
    assert {:id "id2099"} _module.Object.universe(this) != null;
    assume {:id "id2100"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(running#0));
    assume {:id "id2101"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id2102"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(10);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]);
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2103"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id2104"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id2105"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id2106"} _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this));
    assume {:id "id2107"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
       == LitInt(10);
}



procedure {:verboseName "IncrementerMethod.Statement10 (call)"} Call$$_module.IncrementerMethod.Statement10(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id2108"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  requires {:id "id2109"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this))));
  requires {:id "id2110"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#1: ref :: 
                { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1))
                   ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                     && o#1 != _module.Object.universe(this))));
  requires {:id "id2111"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.inv($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.inv($Heap, o#2)));
  requires {:id "id2112"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id2113"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id2114"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id2115"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(10);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  free ensures {:id "id2116"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id2117"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#6: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
         ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#6))
           && _module.Object.inv2(old($Heap), $Heap, o#6));
  ensures {:id "id2118"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(10);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "IncrementerMethod.Statement10 (correctness)"} Impl$$_module.IncrementerMethod.Statement10(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.IncrementerMethod())
         && $IsAlloc(this, Tclass._module.IncrementerMethod(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2119"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    _module.Object.baseInv($Heap, this)
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id2120"} _module.Object.universe(running#0) == _module.Object.universe(this);
  requires {:id "id2121"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Box(running#0));
  requires {:id "id2122"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id2123"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(10);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
  ensures {:id "id2124"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id2125"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Object.baseInv#canCall($Heap, this)
         ==> _module.Object.baseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#10: ref :: 
                { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#10))
                   ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                     && o#10 != _module.Object.universe(this))));
  ensures {:id "id2126"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this))));
  ensures {:id "id2127"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id2128"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || Lit(true);
  ensures {:id "id2129"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this))
     ==> _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this))
       || (forall o#13: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#13))
             && _module.Object.inv2(old($Heap), $Heap, o#13));
  ensures {:id "id2130"} $Unbox(read($Heap, this, _module.IncrementerMethod.programCounter)): int
     == LitInt(10);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "IncrementerMethod.Statement10 (correctness)"} Impl$$_module.IncrementerMethod.Statement10(this: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var a##0: ref;
  var running##0: ref;

    // AddMethodImpl: Statement10, Impl$$_module.IncrementerMethod.Statement10
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(628,5)
    assert {:id "id2131"} {:subsumption 0} $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref != null;
    assume true;
    assert {:id "id2132"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.IncrementerMethod.remaining)): ref, 
          _module.Remaining.value)): int
       == LitInt(0);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(629,45)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2133"} _module.Object.universe(this) != null;
    assert {:id "id2134"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id2135"} Call$$_module.Universe.proveUnchangedNonvolatileFields(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(630,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    a##0 := running#0;
    call {:id "id2136"} Call$$_module.__default.TypingAxiom3(a##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/08-CounterNoTermination.dfy(631,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2137"} _module.Object.universe(this) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id2138"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id2139"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id2140"} Call$$_module.Universe.lci(old($Heap), $Heap, _module.Object.universe(this), running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.IncrementerMethod
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.IncrementerMethod()) } 
    { $Is(c#0, Tclass._module.IncrementerMethod?()) } 
  $Is(c#0, Tclass._module.IncrementerMethod())
     <==> $Is(c#0, Tclass._module.IncrementerMethod?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.IncrementerMethod
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.IncrementerMethod(), $h) } 
    { $IsAlloc(c#0, Tclass._module.IncrementerMethod?(), $h) } 
  $IsAlloc(c#0, Tclass._module.IncrementerMethod(), $h)
     <==> $IsAlloc(c#0, Tclass._module.IncrementerMethod?(), $h));

// type axiom for trait parent: NonOwnedObject? extends Object?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.NonOwnedObject?()) } 
  $Is($o, Tclass._module.NonOwnedObject?()) ==> $Is($o, Tclass._module.Object?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.NonOwnedObject?()) } 
  $IsBox(bx, Tclass._module.NonOwnedObject?())
     ==> $IsBox(bx, Tclass._module.Object?()));

// allocation axiom for trait parent: NonOwnedObject? extends Object?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.NonOwnedObject?(), $heap) } 
  $IsAlloc($o, Tclass._module.NonOwnedObject?(), $heap)
     ==> $IsAlloc($o, Tclass._module.Object?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.NonOwnedObject?(), $h) } 
  $IsAllocBox(bx, Tclass._module.NonOwnedObject?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.Object?(), $h));

// type axiom for trait parent: Thread? extends NonOwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Thread?()) } 
  $Is($o, Tclass._module.Thread?()) ==> $Is($o, Tclass._module.NonOwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Thread?()) } 
  $IsBox(bx, Tclass._module.Thread?())
     ==> $IsBox(bx, Tclass._module.NonOwnedObject?()));

// allocation axiom for trait parent: Thread? extends NonOwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.Thread?(), $heap) } 
  $IsAlloc($o, Tclass._module.Thread?(), $heap)
     ==> $IsAlloc($o, Tclass._module.NonOwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.Thread?(), $h) } 
  $IsAllocBox(bx, Tclass._module.Thread?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.NonOwnedObject?(), $h));

// type axiom for trait parent: OwnedObject? extends Object?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedObject?()) } 
  $Is($o, Tclass._module.OwnedObject?()) ==> $Is($o, Tclass._module.Object?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedObject?()) } 
  $IsBox(bx, Tclass._module.OwnedObject?())
     ==> $IsBox(bx, Tclass._module.Object?()));

// allocation axiom for trait parent: OwnedObject? extends Object?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedObject?(), $heap) } 
  $IsAlloc($o, Tclass._module.OwnedObject?(), $heap)
     ==> $IsAlloc($o, Tclass._module.Object?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h) } 
  $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.Object?(), $h));

// type axiom for trait parent: EmptyType? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.EmptyType?()) } 
  $Is($o, Tclass._module.EmptyType?()) ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.EmptyType?()) } 
  $IsBox(bx, Tclass._module.EmptyType?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: EmptyType? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.EmptyType?(), $heap) } 
  $IsAlloc($o, Tclass._module.EmptyType?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.EmptyType?(), $h) } 
  $IsAllocBox(bx, Tclass._module.EmptyType?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

// type axiom for trait parent: AtomicCounter? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.AtomicCounter?()) } 
  $Is($o, Tclass._module.AtomicCounter?())
     ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.AtomicCounter?()) } 
  $IsBox(bx, Tclass._module.AtomicCounter?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: AtomicCounter? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.AtomicCounter?(), $heap) } 
  $IsAlloc($o, Tclass._module.AtomicCounter?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.AtomicCounter?(), $h) } 
  $IsAllocBox(bx, Tclass._module.AtomicCounter?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

// type axiom for trait parent: Remaining? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Remaining?()) } 
  $Is($o, Tclass._module.Remaining?()) ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Remaining?()) } 
  $IsBox(bx, Tclass._module.Remaining?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: Remaining? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.Remaining?(), $heap) } 
  $IsAlloc($o, Tclass._module.Remaining?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.Remaining?(), $h) } 
  $IsAllocBox(bx, Tclass._module.Remaining?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

// type axiom for trait parent: IncrementerMethod? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.IncrementerMethod?()) } 
  $Is($o, Tclass._module.IncrementerMethod?())
     ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.IncrementerMethod?()) } 
  $IsBox(bx, Tclass._module.IncrementerMethod?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: IncrementerMethod? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.IncrementerMethod?(), $heap) } 
  $IsAlloc($o, Tclass._module.IncrementerMethod?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.IncrementerMethod?(), $h) } 
  $IsAllocBox(bx, Tclass._module.IncrementerMethod?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$Universe: TyTagFamily;

const unique tytagFamily$NonOwnedObject: TyTagFamily;

const unique tytagFamily$OwnedObject: TyTagFamily;

const unique tytagFamily$Object: TyTagFamily;

const unique tytagFamily$Thread: TyTagFamily;

const unique tytagFamily$EmptyType: TyTagFamily;

const unique tytagFamily$AtomicCounter: TyTagFamily;

const unique tytagFamily$Remaining: TyTagFamily;

const unique tytagFamily$IncrementerMethod: TyTagFamily;

const unique field$content: NameFamily;

const unique field$nonvolatileVersion: NameFamily;

const unique field$owner: NameFamily;

const unique field$value: NameFamily;

const unique field$programCounter: NameFamily;

const unique field$counter: NameFamily;

const unique field$remaining: NameFamily;

const unique field$initial_value: NameFamily;

const unique field$final_value: NameFamily;

const unique field$i: NameFamily;
