(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._module.Universe () T@U)
(declare-fun Tagclass._module.Universe? () T@U)
(declare-fun Tagclass._module.Object () T@U)
(declare-fun Tagclass._module.Thread () T@U)
(declare-fun Tagclass._module.OwnedObject () T@U)
(declare-fun Tagclass._module.Object? () T@U)
(declare-fun Tagclass._module.Lifetime () T@U)
(declare-fun Tagclass._module.Thread? () T@U)
(declare-fun class._module.Universe? () T@U)
(declare-fun Tagclass._module.Lifetime? () T@U)
(declare-fun |##_module.ObjectClassKind.Thread| () T@U)
(declare-fun Tagclass._module.ObjectClassKind () T@U)
(declare-fun |##_module.ObjectClassKind.OwnedObject| () T@U)
(declare-fun |##_module.ObjectClassKind.Lifetime| () T@U)
(declare-fun class._module.OwnedObject? () T@U)
(declare-fun Tagclass._module.OwnedObject? () T@U)
(declare-fun class._module.Lifetime? () T@U)
(declare-fun tytagFamily$Universe () T@U)
(declare-fun tytagFamily$Object () T@U)
(declare-fun tytagFamily$Thread () T@U)
(declare-fun tytagFamily$OwnedObject () T@U)
(declare-fun tytagFamily$Lifetime () T@U)
(declare-fun tytagFamily$ObjectClassKind () T@U)
(declare-fun field$content () T@U)
(declare-fun field$owner () T@U)
(declare-fun field$nonvolatileVersion () T@U)
(declare-fun field$mightPointTo () T@U)
(declare-fun field$mightPointFrom () T@U)
(declare-fun field$elements () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun _module.Universe.legalTransitionsSequence (T@U T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Universe () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |_module.Universe.legalTransitionsSequence#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Tclass._module.Thread () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Universe.baseLegalTransitionsSequence (T@U T@U T@U) Bool)
(declare-fun |_module.Universe.baseLegalTransitionsSequence#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.Universe.globalBaseInv#canCall| (T@U T@U) Bool)
(declare-fun _module.Universe.globalBaseInv (T@U T@U) Bool)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun _module.Universe.content () T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tclass._module.Object () T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Object.triggerAxioms (T@U T@U) Bool)
(declare-fun _module.Object.baseFieldsInv (T@U T@U) Bool)
(declare-fun _module.Object.universe (T@U) T@U)
(declare-fun |_module.Object.baseFieldsInv#canCall| (T@U T@U) Bool)
(declare-fun |_module.Object.triggerAxioms#canCall| (T@U T@U) Bool)
(declare-fun _module.OwnedObject.unchangedNonvolatileFields (T@U T@U T@U) Bool)
(declare-fun Tclass._module.OwnedObject () T@U)
(declare-fun _module.OwnedObject.unchangedNonvolatileUserFields (T@U T@U T@U) Bool)
(declare-fun _module.Lifetime.unchangedNonvolatileFields (T@U T@U T@U) Bool)
(declare-fun Tclass._module.Lifetime () T@U)
(declare-fun implements$_module.Object (T@U) Bool)
(declare-fun Tclass._module.Thread? () T@U)
(declare-fun Tclass._module.Lifetime? () T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.ObjectClassKind.Thread| () T@U)
(declare-fun |#_module.ObjectClassKind.OwnedObject| () T@U)
(declare-fun |#_module.ObjectClassKind.Lifetime| () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun _module.OwnedObject.nonvolatileVersion () T@U)
(declare-fun Tclass._module.OwnedObject? () T@U)
(declare-fun Tclass._module.Object? () T@U)
(declare-fun |_module.Lifetime.unchangedNonvolatileFields#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.Lifetime.owner () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun _module.Lifetime.elements () T@U)
(declare-fun _module.Lifetime.mightPointTo () T@U)
(declare-fun _module.Lifetime.mightPointFrom () T@U)
(declare-fun Tclass._module.Universe? () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.OwnedObject.owner () T@U)
(declare-fun _module.Thread.baseFieldsInv (T@U T@U) Bool)
(declare-fun |_module.Thread.baseFieldsInv#canCall| (T@U T@U) Bool)
(declare-fun _module.Lifetime.baseFieldsInv (T@U T@U) Bool)
(declare-fun |_module.Lifetime.baseFieldsInv#canCall| (T@U T@U) Bool)
(declare-fun _module.OwnedObject.baseFieldsInv (T@U T@U) Bool)
(declare-fun |_module.OwnedObject.baseFieldsInv#canCall| (T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.ObjectClassKind () T@U)
(declare-fun _module.Object.sequenceInv2 (T@U T@U T@U) Bool)
(declare-fun _module.Thread.sequenceInv2 (T@U T@U T@U) Bool)
(declare-fun _module.OwnedObject.sequenceInv2 (T@U T@U T@U) Bool)
(declare-fun _module.Lifetime.sequenceInv2 (T@U T@U T@U) Bool)
(declare-fun |_module.ObjectClassKind#Equal| (T@U T@U) Bool)
(declare-fun _module.ObjectClassKind.Thread_q (T@U) Bool)
(declare-fun _module.ObjectClassKind.OwnedObject_q (T@U) Bool)
(declare-fun _module.ObjectClassKind.Lifetime_q (T@U) Bool)
(declare-fun |_module.Object.nonAliasing#canCall| (T@U T@U) Bool)
(declare-fun _module.Object.nonAliasing (T@U T@U) Bool)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |_module.Lifetime.sequenceInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.Lifetime.alive#canCall| (T@U T@U) Bool)
(declare-fun _module.Lifetime.alive (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#59| (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun _module.OwnedObject.objectFields (T@U T@U) T@U)
(declare-fun |_module.OwnedObject.objectFields#canCall| (T@U T@U) Bool)
(declare-fun |_module.OwnedObject.objectUserFields#canCall| (T@U T@U) Bool)
(declare-fun _module.OwnedObject.objectUserFields (T@U T@U) T@U)
(declare-fun _module.OwnedObject.lifetime (T@U) T@U)
(declare-fun |_module.Thread.sequenceInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.OwnedObject.sequenceInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.Object.sequenceInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |$IsA#_module.ObjectClassKind| (T@U) Bool)
(declare-fun _module.Object.objectClassKind (T@U) T@U)
(declare-fun |_module.Object.objectClassKind#canCall| (T@U) Bool)
(declare-fun _module.Thread.objectClassKind (T@U) T@U)
(declare-fun |_module.Thread.objectClassKind#canCall| (T@U) Bool)
(declare-fun _module.OwnedObject.objectClassKind (T@U) T@U)
(declare-fun |_module.OwnedObject.objectClassKind#canCall| (T@U) Bool)
(declare-fun _module.Lifetime.objectClassKind (T@U) T@U)
(declare-fun |_module.Lifetime.objectClassKind#canCall| (T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun |_module.OwnedObject.unchangedNonvolatileFields#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.OwnedObject.unchangedNonvolatileUserFields#canCall| (T@U T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun implements$_module.Universe (T@U) Bool)
(declare-fun implements$_module.OwnedObject (T@U) Bool)
(declare-fun |_module.OwnedObject.volatileOwns#canCall| (T@U) Bool)
(declare-fun _module.OwnedObject.volatileOwns (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSet alloc allocName Tagclass._module.Universe Tagclass._module.Universe? Tagclass._module.Object Tagclass._module.Thread Tagclass._module.OwnedObject Tagclass._module.Object? Tagclass._module.Lifetime Tagclass._module.Thread? class._module.Universe? Tagclass._module.Lifetime? |##_module.ObjectClassKind.Thread| Tagclass._module.ObjectClassKind |##_module.ObjectClassKind.OwnedObject| |##_module.ObjectClassKind.Lifetime| class._module.OwnedObject? Tagclass._module.OwnedObject? class._module.Lifetime? tytagFamily$Universe tytagFamily$Object tytagFamily$Thread tytagFamily$OwnedObject tytagFamily$Lifetime tytagFamily$ObjectClassKind field$content field$owner field$nonvolatileVersion field$mightPointTo field$mightPointFrom field$elements)
)
(assert  (and (and (and (and (and (and (and (and (= (Ctor refType) 3) (= (Ctor SetType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($prevHeap T@U) ($h0 T@U) ($h1 T@U) (this T@U) (|running#0| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.Universe) ($IsAlloc refType this Tclass._module.Universe $h0)))) (or (|_module.Universe.legalTransitionsSequence#canCall| $prevHeap $h0 this |running#0|) (and ($Is SetType |running#0| (TSet Tclass._module.Thread)) ($IsAlloc SetType |running#0| (TSet Tclass._module.Thread) $h0)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o T@U) ($f T@U) )  (=> (and (or (not (= $o null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o) $f)))) (= (_module.Universe.legalTransitionsSequence $prevHeap $h0 this |running#0|) (_module.Universe.legalTransitionsSequence $prevHeap $h1 this |running#0|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.Universe.legalTransitionsSequence $prevHeap $h1 this |running#0|))
)))
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert  (=> (<= 8 $FunctionContextHeight) (forall (($prevHeap@@0 T@U) ($Heap T@U) (this@@0 T@U) ) (!  (=> (or (|_module.Universe.baseLegalTransitionsSequence#canCall| $prevHeap@@0 $Heap this@@0) (and (< 8 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@0) ($IsGoodHeap $Heap)) ($HeapSucc $prevHeap@@0 $Heap)) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass._module.Universe) ($IsAlloc refType this@@0 Tclass._module.Universe $prevHeap@@0)))))) (and (and (|_module.Universe.globalBaseInv#canCall| $prevHeap@@0 this@@0) (=> (_module.Universe.globalBaseInv $prevHeap@@0 this@@0) (|_module.Universe.globalBaseInv#canCall| $Heap this@@0))) (= (_module.Universe.baseLegalTransitionsSequence $prevHeap@@0 $Heap this@@0)  (and (and (and (_module.Universe.globalBaseInv $prevHeap@@0 this@@0) (_module.Universe.globalBaseInv $Heap this@@0)) (|Set#Subset| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@0 this@@0) _module.Universe.content)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.Universe.content)))) (forall ((|o#0| T@U) ) (!  (=> (and ($Is refType |o#0| Tclass._module.Object) (and (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@0 this@@0) _module.Universe.content)) ($Box refType |o#0|))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.Universe.content)) ($Box refType |o#0|)))) (not ($IsAllocBox ($Box refType |o#0|) Tclass._module.Object $prevHeap@@0)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.Universe.content)) ($Box refType |o#0|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@0 this@@0) _module.Universe.content)) ($Box refType |o#0|)))
))))))
 :pattern ( (_module.Universe.baseLegalTransitionsSequence $prevHeap@@0 $Heap this@@0) ($IsGoodHeap $Heap))
))))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($Heap@@0 T@U) (this@@1 T@U) ) (!  (=> (or (|_module.Universe.globalBaseInv#canCall| $Heap@@0 this@@1) (and (< 7 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 Tclass._module.Universe) ($IsAlloc refType this@@1 Tclass._module.Universe $Heap@@0)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U true))) (forall ((|o#0@@0| T@U) ) (!  (=> ($Is refType |o#0@@0| Tclass._module.Object) (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.Universe.content)) ($Box refType |o#0@@0|)) (=> (= (_module.Object.universe |o#0@@0|) this@@1) (=> (or (not (= |o#0@@0| this@@1)) (not true)) (and (|_module.Object.baseFieldsInv#canCall| $Heap@@0 |o#0@@0|) (=> (_module.Object.baseFieldsInv $Heap@@0 |o#0@@0|) (|_module.Object.triggerAxioms#canCall| $Heap@@0 |o#0@@0|)))))))
 :pattern ( (_module.Object.triggerAxioms $Heap@@0 |o#0@@0|))
 :pattern ( (_module.Object.baseFieldsInv $Heap@@0 |o#0@@0|))
 :pattern ( (_module.Object.universe |o#0@@0|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.Universe.content)) ($Box refType |o#0@@0|)))
))) (= (_module.Universe.globalBaseInv $Heap@@0 this@@1)  (and true (forall ((|o#0@@1| T@U) ) (!  (=> (and ($Is refType |o#0@@1| Tclass._module.Object) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.Universe.content)) ($Box refType |o#0@@1|))) (and (and (and (= (_module.Object.universe |o#0@@1|) this@@1) (or (not (= |o#0@@1| this@@1)) (not true))) (_module.Object.baseFieldsInv $Heap@@0 |o#0@@1|)) (_module.Object.triggerAxioms $Heap@@0 |o#0@@1|)))
 :pattern ( (_module.Object.triggerAxioms $Heap@@0 |o#0@@1|))
 :pattern ( (_module.Object.baseFieldsInv $Heap@@0 |o#0@@1|))
 :pattern ( (_module.Object.universe |o#0@@1|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.Universe.content)) ($Box refType |o#0@@1|)))
))))))
 :pattern ( (_module.Universe.globalBaseInv $Heap@@0 this@@1) ($IsGoodHeap $Heap@@0))
))))
(assert (forall (($prevHeap@@1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (this@@2 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 Tclass._module.OwnedObject))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0))) (=> (forall (($o@@0 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@0 null)) (not true)) (= $o@@0 this@@2)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@0 $o@@0) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@0 $o@@0) $f@@0)))) (= (_module.OwnedObject.unchangedNonvolatileFields $prevHeap@@1 $h0@@0 this@@2) (_module.OwnedObject.unchangedNonvolatileFields $prevHeap@@1 $h1@@0 this@@2))))
 :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (_module.OwnedObject.unchangedNonvolatileFields $prevHeap@@1 $h1@@0 this@@2))
)))
(assert (forall (($prevHeap@@2 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (this@@3 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass._module.OwnedObject))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1))) (=> (forall (($o@@1 T@U) ($f@@1 T@U) )  (=> (and (or (not (= $o@@1 null)) (not true)) (= $o@@1 this@@3)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@1 $o@@1) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@1 $o@@1) $f@@1)))) (= (_module.OwnedObject.unchangedNonvolatileUserFields $prevHeap@@2 $h0@@1 this@@3) (_module.OwnedObject.unchangedNonvolatileUserFields $prevHeap@@2 $h1@@1 this@@3))))
 :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (_module.OwnedObject.unchangedNonvolatileUserFields $prevHeap@@2 $h1@@1 this@@3))
)))
(assert (forall (($prevHeap@@3 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (this@@4 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (and (or (not (= this@@4 null)) (not true)) ($Is refType this@@4 Tclass._module.Lifetime))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2))) (=> (forall (($o@@2 T@U) ($f@@2 T@U) )  (=> (and (or (not (= $o@@2 null)) (not true)) (= $o@@2 this@@4)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@2 $o@@2) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@2 $o@@2) $f@@2)))) (= (_module.Lifetime.unchangedNonvolatileFields $prevHeap@@3 $h0@@2 this@@4) (_module.Lifetime.unchangedNonvolatileFields $prevHeap@@3 $h1@@2 this@@4))))
 :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (_module.Lifetime.unchangedNonvolatileFields $prevHeap@@3 $h1@@2 this@@4))
)))
(assert (implements$_module.Object Tclass._module.Thread?))
(assert (implements$_module.Object Tclass._module.Lifetime?))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (DatatypeCtorId |#_module.ObjectClassKind.Thread|) |##_module.ObjectClassKind.Thread|))
(assert (= (DatatypeCtorId |#_module.ObjectClassKind.OwnedObject|) |##_module.ObjectClassKind.OwnedObject|))
(assert (= (DatatypeCtorId |#_module.ObjectClassKind.Lifetime|) |##_module.ObjectClassKind.Lifetime|))
(assert (forall (($o@@3 T@U) ) (! (= ($Is refType $o@@3 Tclass._module.Thread?)  (or (= $o@@3 null) (= (dtype $o@@3) Tclass._module.Thread?)))
 :pattern ( ($Is refType $o@@3 Tclass._module.Thread?))
)))
(assert (forall (($o@@4 T@U) ) (! (= ($Is refType $o@@4 Tclass._module.Lifetime?)  (or (= $o@@4 null) (= (dtype $o@@4) Tclass._module.Lifetime?)))
 :pattern ( ($Is refType $o@@4 Tclass._module.Lifetime?))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert (forall (($h T@U) ($o@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (or (not (= $o@@5 null)) (not true)) ($Is refType $o@@5 Tclass._module.OwnedObject?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@5) _module.OwnedObject.nonvolatileVersion)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@5) _module.OwnedObject.nonvolatileVersion)))
)))
(assert (forall ((bx T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.Thread? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx Tclass._module.Object? $h@@0))
 :pattern ( ($IsAllocBox bx Tclass._module.Thread? $h@@0))
)))
(assert (forall ((bx@@0 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass._module.OwnedObject? $h@@1) ($IsGoodHeap $h@@1)) ($IsAllocBox bx@@0 Tclass._module.Object? $h@@1))
 :pattern ( ($IsAllocBox bx@@0 Tclass._module.OwnedObject? $h@@1))
)))
(assert (forall ((bx@@1 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsAllocBox bx@@1 Tclass._module.Lifetime? $h@@2) ($IsGoodHeap $h@@2)) ($IsAllocBox bx@@1 Tclass._module.Object? $h@@2))
 :pattern ( ($IsAllocBox bx@@1 Tclass._module.Lifetime? $h@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@4 T@U) ($Heap@@1 T@U) (this@@5 T@U) ) (!  (=> (or (|_module.Lifetime.unchangedNonvolatileFields#canCall| $prevHeap@@4 $Heap@@1 this@@5) (and (< 0 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@4) ($IsGoodHeap $Heap@@1)) ($HeapSucc $prevHeap@@4 $Heap@@1)) (and (or (not (= this@@5 null)) (not true)) (and ($Is refType this@@5 Tclass._module.Lifetime) ($IsAlloc refType this@@5 Tclass._module.Lifetime $prevHeap@@4)))))) (= (_module.Lifetime.unchangedNonvolatileFields $prevHeap@@4 $Heap@@1 this@@5)  (and (and (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@4 this@@5) _module.Lifetime.owner)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@5) _module.Lifetime.owner))) (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@4 this@@5) _module.Lifetime.elements)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@5) _module.Lifetime.elements)))) (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@4 this@@5) _module.Lifetime.mightPointTo)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@5) _module.Lifetime.mightPointTo)))) (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@4 this@@5) _module.Lifetime.mightPointFrom)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@5) _module.Lifetime.mightPointFrom))))))
 :pattern ( (_module.Lifetime.unchangedNonvolatileFields $prevHeap@@4 $Heap@@1 this@@5) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((|c#0| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Universe $h@@3) ($IsAlloc refType |c#0| Tclass._module.Universe? $h@@3))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Universe $h@@3))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Universe? $h@@3))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Object $h@@4) ($IsAlloc refType |c#0@@0| Tclass._module.Object? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Object $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Object? $h@@4))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.Thread $h@@5) ($IsAlloc refType |c#0@@1| Tclass._module.Thread? $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.Thread $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.Thread? $h@@5))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass._module.OwnedObject $h@@6) ($IsAlloc refType |c#0@@2| Tclass._module.OwnedObject? $h@@6))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.OwnedObject $h@@6))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.OwnedObject? $h@@6))
)))
(assert (forall ((|c#0@@3| T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType |c#0@@3| Tclass._module.Lifetime $h@@7) ($IsAlloc refType |c#0@@3| Tclass._module.Lifetime? $h@@7))
 :pattern ( ($IsAlloc refType |c#0@@3| Tclass._module.Lifetime $h@@7))
 :pattern ( ($IsAlloc refType |c#0@@3| Tclass._module.Lifetime? $h@@7))
)))
(assert (= (FDim _module.Universe.content) 0))
(assert (= (FieldOfDecl class._module.Universe? field$content) _module.Universe.content))
(assert ($IsGhostField _module.Universe.content))
(assert (= (FDim _module.OwnedObject.owner) 0))
(assert (= (FieldOfDecl class._module.OwnedObject? field$owner) _module.OwnedObject.owner))
(assert ($IsGhostField _module.OwnedObject.owner))
(assert (= (FDim _module.OwnedObject.nonvolatileVersion) 0))
(assert (= (FieldOfDecl class._module.OwnedObject? field$nonvolatileVersion) _module.OwnedObject.nonvolatileVersion))
(assert ($IsGhostField _module.OwnedObject.nonvolatileVersion))
(assert (= (FDim _module.Lifetime.owner) 0))
(assert (= (FieldOfDecl class._module.Lifetime? field$owner) _module.Lifetime.owner))
(assert ($IsGhostField _module.Lifetime.owner))
(assert (= (FDim _module.Lifetime.mightPointTo) 0))
(assert (= (FieldOfDecl class._module.Lifetime? field$mightPointTo) _module.Lifetime.mightPointTo))
(assert ($IsGhostField _module.Lifetime.mightPointTo))
(assert (= (FDim _module.Lifetime.mightPointFrom) 0))
(assert (= (FieldOfDecl class._module.Lifetime? field$mightPointFrom) _module.Lifetime.mightPointFrom))
(assert ($IsGhostField _module.Lifetime.mightPointFrom))
(assert (= (FDim _module.Lifetime.elements) 0))
(assert (= (FieldOfDecl class._module.Lifetime? field$elements) _module.Lifetime.elements))
(assert ($IsGhostField _module.Lifetime.elements))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@2 T@U) (this@@6 T@U) ) (!  (=> (or (|_module.Thread.baseFieldsInv#canCall| $Heap@@2 this@@6) (and (< 2 $FunctionContextHeight) (and (or (not (= this@@6 null)) (not true)) ($Is refType this@@6 Tclass._module.Thread)))) (= (_module.Object.baseFieldsInv $Heap@@2 this@@6) (_module.Thread.baseFieldsInv $Heap@@2 this@@6)))
 :pattern ( (_module.Object.baseFieldsInv $Heap@@2 this@@6) ($Is refType this@@6 Tclass._module.Thread) ($IsGoodHeap $Heap@@2))
 :pattern ( (_module.Object.baseFieldsInv $Heap@@2 this@@6) (_module.Thread.baseFieldsInv $Heap@@2 this@@6) ($IsGoodHeap $Heap@@2))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@3 T@U) (this@@7 T@U) ) (!  (=> (or (|_module.Lifetime.baseFieldsInv#canCall| $Heap@@3 this@@7) (and (< 2 $FunctionContextHeight) (and (or (not (= this@@7 null)) (not true)) ($Is refType this@@7 Tclass._module.Lifetime)))) (= (_module.Object.baseFieldsInv $Heap@@3 this@@7) (_module.Lifetime.baseFieldsInv $Heap@@3 this@@7)))
 :pattern ( (_module.Object.baseFieldsInv $Heap@@3 this@@7) ($Is refType this@@7 Tclass._module.Lifetime) ($IsGoodHeap $Heap@@3))
 :pattern ( (_module.Object.baseFieldsInv $Heap@@3 this@@7) (_module.Lifetime.baseFieldsInv $Heap@@3 this@@7) ($IsGoodHeap $Heap@@3))
))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@4 T@U) (this@@8 T@U) ) (!  (=> (or (|_module.OwnedObject.baseFieldsInv#canCall| $Heap@@4 this@@8) (and (< 5 $FunctionContextHeight) (and (or (not (= this@@8 null)) (not true)) ($Is refType this@@8 Tclass._module.OwnedObject)))) (= (_module.Object.baseFieldsInv $Heap@@4 this@@8) (_module.OwnedObject.baseFieldsInv $Heap@@4 this@@8)))
 :pattern ( (_module.Object.baseFieldsInv $Heap@@4 this@@8) ($Is refType this@@8 Tclass._module.OwnedObject) ($IsGoodHeap $Heap@@4))
 :pattern ( (_module.Object.baseFieldsInv $Heap@@4 this@@8) (_module.OwnedObject.baseFieldsInv $Heap@@4 this@@8) ($IsGoodHeap $Heap@@4))
))))
(assert (= (Ctor DatatypeTypeType) 8))
(assert ($Is DatatypeTypeType |#_module.ObjectClassKind.Thread| Tclass._module.ObjectClassKind))
(assert ($Is DatatypeTypeType |#_module.ObjectClassKind.OwnedObject| Tclass._module.ObjectClassKind))
(assert ($Is DatatypeTypeType |#_module.ObjectClassKind.Lifetime| Tclass._module.ObjectClassKind))
(assert (forall (($prevHeap@@5 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (this@@9 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (and (or (not (= this@@9 null)) (not true)) (and ($Is refType this@@9 Tclass._module.Universe) ($IsAlloc refType this@@9 Tclass._module.Universe $h0@@3)))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3))) (=> (forall (($o@@6 T@U) ($f@@3 T@U) )  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@3 $o@@6) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@3 $o@@6) $f@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@3 $o@@6) $f@@3)))) (= (_module.Universe.baseLegalTransitionsSequence $prevHeap@@5 $h0@@3 this@@9) (_module.Universe.baseLegalTransitionsSequence $prevHeap@@5 $h1@@3 this@@9))))
 :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (_module.Universe.baseLegalTransitionsSequence $prevHeap@@5 $h1@@3 this@@9))
)))
(assert (forall (($prevHeap@@6 T@U) ($h0@@4 T@U) ($h1@@4 T@U) (this@@10 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@4) ($IsGoodHeap $h1@@4)) (and (or (not (= this@@10 null)) (not true)) (and ($Is refType this@@10 Tclass._module.Object) ($IsAlloc refType this@@10 Tclass._module.Object $h0@@4)))) (and ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4))) (=> (forall (($o@@7 T@U) ($f@@4 T@U) )  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@4 $o@@7) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@4 $o@@7) $f@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@4 $o@@7) $f@@4)))) (= (_module.Object.sequenceInv2 $prevHeap@@6 $h0@@4 this@@10) (_module.Object.sequenceInv2 $prevHeap@@6 $h1@@4 this@@10))))
 :pattern ( ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4) (_module.Object.sequenceInv2 $prevHeap@@6 $h1@@4 this@@10))
)))
(assert (forall (($prevHeap@@7 T@U) ($h0@@5 T@U) ($h1@@5 T@U) (this@@11 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@5) ($IsGoodHeap $h1@@5)) (and (or (not (= this@@11 null)) (not true)) (and ($Is refType this@@11 Tclass._module.Thread) ($IsAlloc refType this@@11 Tclass._module.Thread $h0@@5)))) (and ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5))) (=> (forall (($o@@8 T@U) ($f@@5 T@U) )  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@5 $o@@8) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@5 $o@@8) $f@@5) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@5 $o@@8) $f@@5)))) (= (_module.Thread.sequenceInv2 $prevHeap@@7 $h0@@5 this@@11) (_module.Thread.sequenceInv2 $prevHeap@@7 $h1@@5 this@@11))))
 :pattern ( ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5) (_module.Thread.sequenceInv2 $prevHeap@@7 $h1@@5 this@@11))
)))
(assert (forall (($prevHeap@@8 T@U) ($h0@@6 T@U) ($h1@@6 T@U) (this@@12 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@6) ($IsGoodHeap $h1@@6)) (and (or (not (= this@@12 null)) (not true)) (and ($Is refType this@@12 Tclass._module.OwnedObject) ($IsAlloc refType this@@12 Tclass._module.OwnedObject $h0@@6)))) (and ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6))) (=> (forall (($o@@9 T@U) ($f@@6 T@U) )  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@6 $o@@9) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@6 $o@@9) $f@@6) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@6 $o@@9) $f@@6)))) (= (_module.OwnedObject.sequenceInv2 $prevHeap@@8 $h0@@6 this@@12) (_module.OwnedObject.sequenceInv2 $prevHeap@@8 $h1@@6 this@@12))))
 :pattern ( ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6) (_module.OwnedObject.sequenceInv2 $prevHeap@@8 $h1@@6 this@@12))
)))
(assert (forall (($prevHeap@@9 T@U) ($h0@@7 T@U) ($h1@@7 T@U) (this@@13 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@7) ($IsGoodHeap $h1@@7)) (and (or (not (= this@@13 null)) (not true)) (and ($Is refType this@@13 Tclass._module.Lifetime) ($IsAlloc refType this@@13 Tclass._module.Lifetime $h0@@7)))) (and ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7))) (=> (forall (($o@@10 T@U) ($f@@7 T@U) )  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@7 $o@@10) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@7 $o@@10) $f@@7) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@7 $o@@10) $f@@7)))) (= (_module.Lifetime.sequenceInv2 $prevHeap@@9 $h0@@7 this@@13) (_module.Lifetime.sequenceInv2 $prevHeap@@9 $h1@@7 this@@13))))
 :pattern ( ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7) (_module.Lifetime.sequenceInv2 $prevHeap@@9 $h1@@7 this@@13))
)))
(assert (forall (($o@@11 T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType $o@@11 Tclass._module.Universe? $h@@8)  (or (= $o@@11 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@11) alloc)))))
 :pattern ( ($IsAlloc refType $o@@11 Tclass._module.Universe? $h@@8))
)))
(assert (forall (($o@@12 T@U) ($h@@9 T@U) ) (! (= ($IsAlloc refType $o@@12 Tclass._module.Object? $h@@9)  (or (= $o@@12 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@12) alloc)))))
 :pattern ( ($IsAlloc refType $o@@12 Tclass._module.Object? $h@@9))
)))
(assert (forall (($o@@13 T@U) ($h@@10 T@U) ) (! (= ($IsAlloc refType $o@@13 Tclass._module.Thread? $h@@10)  (or (= $o@@13 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@13) alloc)))))
 :pattern ( ($IsAlloc refType $o@@13 Tclass._module.Thread? $h@@10))
)))
(assert (forall (($o@@14 T@U) ($h@@11 T@U) ) (! (= ($IsAlloc refType $o@@14 Tclass._module.OwnedObject? $h@@11)  (or (= $o@@14 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@14) alloc)))))
 :pattern ( ($IsAlloc refType $o@@14 Tclass._module.OwnedObject? $h@@11))
)))
(assert (forall (($o@@15 T@U) ($h@@12 T@U) ) (! (= ($IsAlloc refType $o@@15 Tclass._module.Lifetime? $h@@12)  (or (= $o@@15 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@15) alloc)))))
 :pattern ( ($IsAlloc refType $o@@15 Tclass._module.Lifetime? $h@@12))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|_module.ObjectClassKind#Equal| a@@7 b@@4) (= a@@7 b@@4))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@7 b@@4))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) ) (! (= (|Set#Subset| a@@8 b@@5) (forall ((o@@3 T@U) ) (!  (=> (|Set#IsMember| a@@8 o@@3) (|Set#IsMember| b@@5 o@@3))
 :pattern ( (|Set#IsMember| a@@8 o@@3))
 :pattern ( (|Set#IsMember| b@@5 o@@3))
)))
 :pattern ( (|Set#Subset| a@@8 b@@5))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@5 T@U) (this@@14 T@U) ) (!  (=> (or (|_module.Thread.baseFieldsInv#canCall| $Heap@@5 this@@14) (and (< 2 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@5) (and (or (not (= this@@14 null)) (not true)) (and ($Is refType this@@14 Tclass._module.Thread) ($IsAlloc refType this@@14 Tclass._module.Thread $Heap@@5)))))) (= (_module.Thread.baseFieldsInv $Heap@@5 this@@14) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (_module.Thread.baseFieldsInv $Heap@@5 this@@14) ($IsGoodHeap $Heap@@5))
))))
(assert (forall ((d T@U) ) (! (= (_module.ObjectClassKind.Thread_q d) (= (DatatypeCtorId d) |##_module.ObjectClassKind.Thread|))
 :pattern ( (_module.ObjectClassKind.Thread_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.ObjectClassKind.OwnedObject_q d@@0) (= (DatatypeCtorId d@@0) |##_module.ObjectClassKind.OwnedObject|))
 :pattern ( (_module.ObjectClassKind.OwnedObject_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.ObjectClassKind.Lifetime_q d@@1) (= (DatatypeCtorId d@@1) |##_module.ObjectClassKind.Lifetime|))
 :pattern ( (_module.ObjectClassKind.Lifetime_q d@@1))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@6 T@U) (this@@15 T@U) ) (!  (=> (or (|_module.Object.triggerAxioms#canCall| $Heap@@6 this@@15) (and (< 4 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@6) (and (or (not (= this@@15 null)) (not true)) (and ($Is refType this@@15 Tclass._module.Object) ($IsAlloc refType this@@15 Tclass._module.Object $Heap@@6)))))) (and (|_module.Object.nonAliasing#canCall| $Heap@@6 this@@15) (= (_module.Object.triggerAxioms $Heap@@6 this@@15) (_module.Object.nonAliasing $Heap@@6 this@@15))))
 :pattern ( (_module.Object.triggerAxioms $Heap@@6 this@@15) ($IsGoodHeap $Heap@@6))
))))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (! (= (|Set#Disjoint| a@@9 b@@6) (forall ((o@@4 T@U) ) (!  (or (not (|Set#IsMember| a@@9 o@@4)) (not (|Set#IsMember| b@@6 o@@4)))
 :pattern ( (|Set#IsMember| a@@9 o@@4))
 :pattern ( (|Set#IsMember| b@@6 o@@4))
)))
 :pattern ( (|Set#Disjoint| a@@9 b@@6))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@10 T@U) ($Heap@@7 T@U) (this@@16 T@U) ) (!  (=> (or (|_module.Lifetime.sequenceInv2#canCall| $prevHeap@@10 $Heap@@7 this@@16) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@10) ($IsGoodHeap $Heap@@7)) ($HeapSucc $prevHeap@@10 $Heap@@7)) (and (or (not (= this@@16 null)) (not true)) (and ($Is refType this@@16 Tclass._module.Lifetime) ($IsAlloc refType this@@16 Tclass._module.Lifetime $prevHeap@@10)))))) (and (and (|_module.Lifetime.alive#canCall| $prevHeap@@10 this@@16) (=> (not (_module.Lifetime.alive $prevHeap@@10 this@@16)) (|_module.Lifetime.alive#canCall| $Heap@@7 this@@16))) (= (_module.Lifetime.sequenceInv2 $prevHeap@@10 $Heap@@7 this@@16)  (and (and (and (and (=> (not (_module.Lifetime.alive $prevHeap@@10 this@@16)) (not (_module.Lifetime.alive $Heap@@7 this@@16))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@7 this@@16) _module.Lifetime.owner)) null)) (not true)) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@7 this@@16) _module.Lifetime.owner)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@10 this@@16) _module.Lifetime.owner))))) (|Set#Subset| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@10 this@@16) _module.Lifetime.elements)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@7 this@@16) _module.Lifetime.elements)))) (|Set#Subset| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@10 this@@16) _module.Lifetime.mightPointTo)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@7 this@@16) _module.Lifetime.mightPointTo)))) (|Set#Subset| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@10 this@@16) _module.Lifetime.mightPointFrom)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@7 this@@16) _module.Lifetime.mightPointFrom)))))))
 :pattern ( (_module.Lifetime.sequenceInv2 $prevHeap@@10 $Heap@@7 this@@16) ($IsGoodHeap $Heap@@7))
))))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.ObjectClassKind.Thread_q d@@2) (= d@@2 |#_module.ObjectClassKind.Thread|))
 :pattern ( (_module.ObjectClassKind.Thread_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.ObjectClassKind.OwnedObject_q d@@3) (= d@@3 |#_module.ObjectClassKind.OwnedObject|))
 :pattern ( (_module.ObjectClassKind.OwnedObject_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.ObjectClassKind.Lifetime_q d@@4) (= d@@4 |#_module.ObjectClassKind.Lifetime|))
 :pattern ( (_module.ObjectClassKind.Lifetime_q d@@4))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v bx@@2) ($IsBox bx@@2 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@2))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) ($o@@16 T@U) ($f@@8 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#59| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@16 $f@@8))  (=> (and (or (not (= $o@@16 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@16) |l#2|)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#3| $o@@16) |l#4|)))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#59| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@16 $f@@8))
)))
(assert ($IsGhostField alloc))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@8 T@U) (this@@17 T@U) ) (!  (=> (or (|_module.OwnedObject.objectFields#canCall| $Heap@@8 this@@17) (and (< 4 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@8) (and (or (not (= this@@17 null)) (not true)) (and ($Is refType this@@17 Tclass._module.OwnedObject) ($IsAlloc refType this@@17 Tclass._module.OwnedObject $Heap@@8)))))) (and (|_module.OwnedObject.objectUserFields#canCall| $Heap@@8 this@@17) (= (_module.OwnedObject.objectFields $Heap@@8 this@@17) (|Set#Union| (|Set#Union| (_module.OwnedObject.objectUserFields $Heap@@8 this@@17) (|Set#UnionOne| |Set#Empty| ($Box refType (_module.OwnedObject.lifetime this@@17)))) (ite (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@8 this@@17) _module.OwnedObject.owner)) null) |Set#Empty| (|Set#UnionOne| |Set#Empty| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@8 this@@17) _module.OwnedObject.owner)))))))
 :pattern ( (_module.OwnedObject.objectFields $Heap@@8 this@@17) ($IsGoodHeap $Heap@@8))
))))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@3 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@3 t@@0 h@@1) ($IsAllocBox bx@@3 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@3 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert  (=> (< 1 $FunctionContextHeight) (forall (($h@@13 T@U) ($o@@17 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@13) (and (or (not (= $o@@17 null)) (not true)) ($Is refType $o@@17 Tclass._module.Object?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@17) alloc)))) ($IsAlloc refType (_module.Object.universe $o@@17) Tclass._module.Universe $h@@13))
 :pattern ( (_module.Object.universe $o@@17) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@17) alloc)))
))))
(assert  (=> (< 1 $FunctionContextHeight) (forall (($h@@14 T@U) ($o@@18 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@14) (and (or (not (= $o@@18 null)) (not true)) ($Is refType $o@@18 Tclass._module.OwnedObject?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@18) alloc)))) ($IsAlloc refType (_module.OwnedObject.lifetime $o@@18) Tclass._module.Lifetime $h@@14))
 :pattern ( (_module.OwnedObject.lifetime $o@@18) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@18) alloc)))
))))
(assert  (=> (< 1 $FunctionContextHeight) (forall (($o@@19 T@U) ) (!  (=> (and (or (not (= $o@@19 null)) (not true)) ($Is refType $o@@19 Tclass._module.Object?)) ($Is refType (_module.Object.universe $o@@19) Tclass._module.Universe))
 :pattern ( (_module.Object.universe $o@@19))
))))
(assert  (=> (< 1 $FunctionContextHeight) (forall (($o@@20 T@U) ) (!  (=> (and (or (not (= $o@@20 null)) (not true)) ($Is refType $o@@20 Tclass._module.OwnedObject?)) ($Is refType (_module.OwnedObject.lifetime $o@@20) Tclass._module.Lifetime))
 :pattern ( (_module.OwnedObject.lifetime $o@@20))
))))
(assert (forall (($h@@15 T@U) ($o@@21 T@U) ) (!  (=> (and ($IsGoodHeap $h@@15) (and (or (not (= $o@@21 null)) (not true)) (= (dtype $o@@21) Tclass._module.Lifetime?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@21) _module.Lifetime.owner)) Tclass._module.Thread?))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@21) _module.Lifetime.owner)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@11 T@U) ($Heap@@9 T@U) (this@@18 T@U) ) (!  (=> (or (|_module.Thread.sequenceInv2#canCall| $prevHeap@@11 $Heap@@9 this@@18) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@18 null)) (not true)) ($Is refType this@@18 Tclass._module.Thread)))) (= (_module.Object.sequenceInv2 $prevHeap@@11 $Heap@@9 this@@18) (_module.Thread.sequenceInv2 $prevHeap@@11 $Heap@@9 this@@18)))
 :pattern ( (_module.Object.sequenceInv2 $prevHeap@@11 $Heap@@9 this@@18) ($Is refType this@@18 Tclass._module.Thread) ($IsGoodHeap $Heap@@9))
 :pattern ( (_module.Object.sequenceInv2 $prevHeap@@11 $Heap@@9 this@@18) (_module.Thread.sequenceInv2 $prevHeap@@11 $Heap@@9 this@@18) ($IsGoodHeap $Heap@@9))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@12 T@U) ($Heap@@10 T@U) (this@@19 T@U) ) (!  (=> (or (|_module.Lifetime.sequenceInv2#canCall| $prevHeap@@12 $Heap@@10 this@@19) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@19 null)) (not true)) ($Is refType this@@19 Tclass._module.Lifetime)))) (= (_module.Object.sequenceInv2 $prevHeap@@12 $Heap@@10 this@@19) (_module.Lifetime.sequenceInv2 $prevHeap@@12 $Heap@@10 this@@19)))
 :pattern ( (_module.Object.sequenceInv2 $prevHeap@@12 $Heap@@10 this@@19) ($Is refType this@@19 Tclass._module.Lifetime) ($IsGoodHeap $Heap@@10))
 :pattern ( (_module.Object.sequenceInv2 $prevHeap@@12 $Heap@@10 this@@19) (_module.Lifetime.sequenceInv2 $prevHeap@@12 $Heap@@10 this@@19) ($IsGoodHeap $Heap@@10))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($prevHeap@@13 T@U) ($Heap@@11 T@U) (this@@20 T@U) ) (!  (=> (or (|_module.OwnedObject.sequenceInv2#canCall| $prevHeap@@13 $Heap@@11 this@@20) (and (< 3 $FunctionContextHeight) (and (or (not (= this@@20 null)) (not true)) ($Is refType this@@20 Tclass._module.OwnedObject)))) (= (_module.Object.sequenceInv2 $prevHeap@@13 $Heap@@11 this@@20) (_module.OwnedObject.sequenceInv2 $prevHeap@@13 $Heap@@11 this@@20)))
 :pattern ( (_module.Object.sequenceInv2 $prevHeap@@13 $Heap@@11 this@@20) ($Is refType this@@20 Tclass._module.OwnedObject) ($IsGoodHeap $Heap@@11))
 :pattern ( (_module.Object.sequenceInv2 $prevHeap@@13 $Heap@@11 this@@20) (_module.OwnedObject.sequenceInv2 $prevHeap@@13 $Heap@@11 this@@20) ($IsGoodHeap $Heap@@11))
))))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.Universe) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._module.Universe)))
 :pattern ( ($IsBox bx@@4 Tclass._module.Universe))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._module.Universe?) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._module.Universe?)))
 :pattern ( ($IsBox bx@@5 Tclass._module.Universe?))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._module.Object) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._module.Object)))
 :pattern ( ($IsBox bx@@6 Tclass._module.Object))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._module.Thread) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._module.Thread)))
 :pattern ( ($IsBox bx@@7 Tclass._module.Thread))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.OwnedObject) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._module.OwnedObject)))
 :pattern ( ($IsBox bx@@8 Tclass._module.OwnedObject))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.Object?) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass._module.Object?)))
 :pattern ( ($IsBox bx@@9 Tclass._module.Object?))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass._module.Lifetime) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) Tclass._module.Lifetime)))
 :pattern ( ($IsBox bx@@10 Tclass._module.Lifetime))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 Tclass._module.Thread?) (and (= ($Box refType ($Unbox refType bx@@11)) bx@@11) ($Is refType ($Unbox refType bx@@11) Tclass._module.Thread?)))
 :pattern ( ($IsBox bx@@11 Tclass._module.Thread?))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 Tclass._module.Lifetime?) (and (= ($Box refType ($Unbox refType bx@@12)) bx@@12) ($Is refType ($Unbox refType bx@@12) Tclass._module.Lifetime?)))
 :pattern ( ($IsBox bx@@12 Tclass._module.Lifetime?))
)))
(assert (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 Tclass._module.ObjectClassKind) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@13)) bx@@13) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@13) Tclass._module.ObjectClassKind)))
 :pattern ( ($IsBox bx@@13 Tclass._module.ObjectClassKind))
)))
(assert (forall ((bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 Tclass._module.OwnedObject?) (and (= ($Box refType ($Unbox refType bx@@14)) bx@@14) ($Is refType ($Unbox refType bx@@14) Tclass._module.OwnedObject?)))
 :pattern ( ($IsBox bx@@14 Tclass._module.OwnedObject?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.Universe)  (and ($Is refType |c#0@@4| Tclass._module.Universe?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.Universe))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.Universe?))
)))
(assert (forall ((|c#0@@5| T@U) ) (! (= ($Is refType |c#0@@5| Tclass._module.Object)  (and ($Is refType |c#0@@5| Tclass._module.Object?) (or (not (= |c#0@@5| null)) (not true))))
 :pattern ( ($Is refType |c#0@@5| Tclass._module.Object))
 :pattern ( ($Is refType |c#0@@5| Tclass._module.Object?))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass._module.Thread)  (and ($Is refType |c#0@@6| Tclass._module.Thread?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.Thread))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.Thread?))
)))
(assert (forall ((|c#0@@7| T@U) ) (! (= ($Is refType |c#0@@7| Tclass._module.OwnedObject)  (and ($Is refType |c#0@@7| Tclass._module.OwnedObject?) (or (not (= |c#0@@7| null)) (not true))))
 :pattern ( ($Is refType |c#0@@7| Tclass._module.OwnedObject))
 :pattern ( ($Is refType |c#0@@7| Tclass._module.OwnedObject?))
)))
(assert (forall ((|c#0@@8| T@U) ) (! (= ($Is refType |c#0@@8| Tclass._module.Lifetime)  (and ($Is refType |c#0@@8| Tclass._module.Lifetime?) (or (not (= |c#0@@8| null)) (not true))))
 :pattern ( ($Is refType |c#0@@8| Tclass._module.Lifetime))
 :pattern ( ($Is refType |c#0@@8| Tclass._module.Lifetime?))
)))
(assert  (=> (<= 9 $FunctionContextHeight) (forall (($prevHeap@@14 T@U) ($Heap@@12 T@U) (this@@21 T@U) (|running#0@@0| T@U) ) (!  (=> (or (|_module.Universe.legalTransitionsSequence#canCall| $prevHeap@@14 $Heap@@12 this@@21 |running#0@@0|) (and (< 9 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $prevHeap@@14) ($IsGoodHeap $Heap@@12)) ($HeapSucc $prevHeap@@14 $Heap@@12)) (and (or (not (= this@@21 null)) (not true)) (and ($Is refType this@@21 Tclass._module.Universe) ($IsAlloc refType this@@21 Tclass._module.Universe $prevHeap@@14)))) ($Is SetType |running#0@@0| (TSet Tclass._module.Thread))))) (and (and (|_module.Universe.baseLegalTransitionsSequence#canCall| $prevHeap@@14 $Heap@@12 this@@21) (=> (_module.Universe.baseLegalTransitionsSequence $prevHeap@@14 $Heap@@12 this@@21) (=> (|Set#Subset| |running#0@@0| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content))) (and (forall ((|o#0@@2| T@U) ) (!  (=> ($Is refType |o#0@@2| Tclass._module.Object) (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#0@@2|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 this@@21) _module.Universe.content)) ($Box refType |o#0@@2|))) (=> (not (forall (($o@@22 T@U) ($f@@9 T@U) ) (!  (=> (or (not (= $o@@22 null)) (not true)) (=> (= $o@@22 |o#0@@2|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 $o@@22) $f@@9) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 $o@@22) $f@@9))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 $o@@22) $f@@9))
))) (|_module.Object.sequenceInv2#canCall| $prevHeap@@14 $Heap@@12 |o#0@@2|))))
 :pattern ( (_module.Object.sequenceInv2 $prevHeap@@14 $Heap@@12 |o#0@@2|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 this@@21) _module.Universe.content)) ($Box refType |o#0@@2|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#0@@2|)))
)) (=> (forall ((|o#0@@3| T@U) ) (!  (=> (and ($Is refType |o#0@@3| Tclass._module.Object) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#0@@3|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 this@@21) _module.Universe.content)) ($Box refType |o#0@@3|)))) (or (forall (($o@@23 T@U) ($f@@10 T@U) ) (!  (=> (or (not (= $o@@23 null)) (not true)) (=> (= $o@@23 |o#0@@3|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 $o@@23) $f@@10) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 $o@@23) $f@@10))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 $o@@23) $f@@10))
)) (_module.Object.sequenceInv2 $prevHeap@@14 $Heap@@12 |o#0@@3|)))
 :pattern ( (_module.Object.sequenceInv2 $prevHeap@@14 $Heap@@12 |o#0@@3|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 this@@21) _module.Universe.content)) ($Box refType |o#0@@3|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#0@@3|)))
)) (=> (forall ((|o#1| T@U) ) (!  (=> (and ($Is refType |o#1| Tclass._module.OwnedObject) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#1|)) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1|) _module.OwnedObject.owner)) Tclass._module.Thread))) (=> (and (not (|Set#IsMember| |running#0@@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1|) _module.OwnedObject.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1|) _module.OwnedObject.owner) Tclass._module.Object? $prevHeap@@14)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1|) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 |o#1|) _module.OwnedObject.nonvolatileVersion))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 |o#1|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1|) _module.OwnedObject.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#1|)))
)) (forall ((|l#0@@0| T@U) ) (!  (=> ($Is refType |l#0@@0| Tclass._module.Lifetime) (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |l#0@@0|)) (=> (not (|Set#IsMember| |running#0@@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |l#0@@0|) _module.Lifetime.owner))) (=> ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |l#0@@0|) _module.Lifetime.owner) Tclass._module.Thread? $prevHeap@@14) (|_module.Lifetime.unchangedNonvolatileFields#canCall| $prevHeap@@14 $Heap@@12 |l#0@@0|)))))
 :pattern ( (_module.Lifetime.unchangedNonvolatileFields $prevHeap@@14 $Heap@@12 |l#0@@0|))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |l#0@@0|) _module.Lifetime.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |l#0@@0|)))
)))))))) (= (_module.Universe.legalTransitionsSequence $prevHeap@@14 $Heap@@12 this@@21 |running#0@@0|)  (and (and (and (and (_module.Universe.baseLegalTransitionsSequence $prevHeap@@14 $Heap@@12 this@@21) (|Set#Subset| |running#0@@0| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)))) (forall ((|o#0@@4| T@U) ) (!  (=> (and ($Is refType |o#0@@4| Tclass._module.Object) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#0@@4|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 this@@21) _module.Universe.content)) ($Box refType |o#0@@4|)))) (or (forall (($o@@24 T@U) ($f@@11 T@U) ) (!  (=> (or (not (= $o@@24 null)) (not true)) (=> (= $o@@24 |o#0@@4|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 $o@@24) $f@@11) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 $o@@24) $f@@11))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 $o@@24) $f@@11))
)) (_module.Object.sequenceInv2 $prevHeap@@14 $Heap@@12 |o#0@@4|)))
 :pattern ( (_module.Object.sequenceInv2 $prevHeap@@14 $Heap@@12 |o#0@@4|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 this@@21) _module.Universe.content)) ($Box refType |o#0@@4|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#0@@4|)))
))) (forall ((|o#1@@0| T@U) ) (!  (=> (and ($Is refType |o#1@@0| Tclass._module.OwnedObject) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#1@@0|)) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1@@0|) _module.OwnedObject.owner)) Tclass._module.Thread))) (=> (and (not (|Set#IsMember| |running#0@@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1@@0|) _module.OwnedObject.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1@@0|) _module.OwnedObject.owner) Tclass._module.Object? $prevHeap@@14)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1@@0|) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 |o#1@@0|) _module.OwnedObject.nonvolatileVersion))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@12 |o#1@@0|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1@@0|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |o#1@@0|) _module.OwnedObject.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |o#1@@0|)))
))) (forall ((|l#0@@1| T@U) ) (!  (=> (and ($Is refType |l#0@@1| Tclass._module.Lifetime) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |l#0@@1|))) (=> (and (not (|Set#IsMember| |running#0@@0| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |l#0@@1|) _module.Lifetime.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |l#0@@1|) _module.Lifetime.owner) Tclass._module.Thread? $prevHeap@@14)) (_module.Lifetime.unchangedNonvolatileFields $prevHeap@@14 $Heap@@12 |l#0@@1|)))
 :pattern ( (_module.Lifetime.unchangedNonvolatileFields $prevHeap@@14 $Heap@@12 |l#0@@1|))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 |l#0@@1|) _module.Lifetime.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@14 this@@21) _module.Universe.content)) ($Box refType |l#0@@1|)))
))))))
 :pattern ( (_module.Universe.legalTransitionsSequence $prevHeap@@14 $Heap@@12 this@@21 |running#0@@0|) ($IsGoodHeap $Heap@@12))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@13 T@U) (this@@22 T@U) ) (!  (=> (or (|_module.OwnedObject.objectUserFields#canCall| $Heap@@13 this@@22) (and (< 3 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@13) (and (or (not (= this@@22 null)) (not true)) (and ($Is refType this@@22 Tclass._module.OwnedObject) ($IsAlloc refType this@@22 Tclass._module.OwnedObject $Heap@@13)))))) ($Is SetType (_module.OwnedObject.objectUserFields $Heap@@13 this@@22) (TSet Tclass._module.Object)))
 :pattern ( (_module.OwnedObject.objectUserFields $Heap@@13 this@@22))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@14 T@U) (this@@23 T@U) ) (!  (=> (or (|_module.OwnedObject.objectFields#canCall| $Heap@@14 this@@23) (and (< 4 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@14) (and (or (not (= this@@23 null)) (not true)) (and ($Is refType this@@23 Tclass._module.OwnedObject) ($IsAlloc refType this@@23 Tclass._module.OwnedObject $Heap@@14)))))) ($Is SetType (_module.OwnedObject.objectFields $Heap@@14 this@@23) (TSet Tclass._module.Object)))
 :pattern ( (_module.OwnedObject.objectFields $Heap@@14 this@@23))
))))
(assert (forall (($h@@16 T@U) ($o@@25 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@16) (and (or (not (= $o@@25 null)) (not true)) (= (dtype $o@@25) Tclass._module.Lifetime?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@25) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@25) _module.Lifetime.owner)) Tclass._module.Thread? $h@@16))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@25) _module.Lifetime.owner)))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) (o@@5 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@10 b@@7) o@@5)  (or (|Set#IsMember| a@@10 o@@5) (|Set#IsMember| b@@7 o@@5)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@10 b@@7) o@@5))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) ) (!  (=> (|Set#Disjoint| a@@11 b@@8) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@8) a@@11) b@@8) (= (|Set#Difference| (|Set#Union| a@@11 b@@8) b@@8) a@@11)))
 :pattern ( (|Set#Union| a@@11 b@@8))
)))
(assert (forall (($o@@26 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@26 Tclass._module.Thread? $heap) ($IsAlloc refType $o@@26 Tclass._module.Object? $heap))
 :pattern ( ($IsAlloc refType $o@@26 Tclass._module.Thread? $heap))
)))
(assert (forall (($o@@27 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@27 Tclass._module.OwnedObject? $heap@@0) ($IsAlloc refType $o@@27 Tclass._module.Object? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@27 Tclass._module.OwnedObject? $heap@@0))
)))
(assert (forall (($o@@28 T@U) ($heap@@1 T@U) ) (!  (=> ($IsAlloc refType $o@@28 Tclass._module.Lifetime? $heap@@1) ($IsAlloc refType $o@@28 Tclass._module.Object? $heap@@1))
 :pattern ( ($IsAlloc refType $o@@28 Tclass._module.Lifetime? $heap@@1))
)))
(assert (forall (($h@@17 T@U) ($o@@29 T@U) ) (!  (=> (and ($IsGoodHeap $h@@17) (and (or (not (= $o@@29 null)) (not true)) (= (dtype $o@@29) Tclass._module.Lifetime?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@17 $o@@29) _module.Lifetime.elements)) (TSet Tclass._module.OwnedObject)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@17 $o@@29) _module.Lifetime.elements)))
)))
(assert (forall (($h@@18 T@U) ($o@@30 T@U) ) (!  (=> (and ($IsGoodHeap $h@@18) (and (or (not (= $o@@30 null)) (not true)) (= (dtype $o@@30) Tclass._module.Lifetime?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@18 $o@@30) _module.Lifetime.mightPointTo)) (TSet Tclass._module.Lifetime)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@18 $o@@30) _module.Lifetime.mightPointTo)))
)))
(assert (forall (($h@@19 T@U) ($o@@31 T@U) ) (!  (=> (and ($IsGoodHeap $h@@19) (and (or (not (= $o@@31 null)) (not true)) (= (dtype $o@@31) Tclass._module.Lifetime?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@19 $o@@31) _module.Lifetime.mightPointFrom)) (TSet Tclass._module.Lifetime)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@19 $o@@31) _module.Lifetime.mightPointFrom)))
)))
(assert (forall (($h@@20 T@U) ($o@@32 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@20) (and (or (not (= $o@@32 null)) (not true)) (= (dtype $o@@32) Tclass._module.Lifetime?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@20 $o@@32) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@20 $o@@32) _module.Lifetime.elements)) (TSet Tclass._module.OwnedObject) $h@@20))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@20 $o@@32) _module.Lifetime.elements)))
)))
(assert (forall (($h@@21 T@U) ($o@@33 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@21) (and (or (not (= $o@@33 null)) (not true)) (= (dtype $o@@33) Tclass._module.Lifetime?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@21 $o@@33) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@21 $o@@33) _module.Lifetime.mightPointTo)) (TSet Tclass._module.Lifetime) $h@@21))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@21 $o@@33) _module.Lifetime.mightPointTo)))
)))
(assert (forall (($h@@22 T@U) ($o@@34 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@22) (and (or (not (= $o@@34 null)) (not true)) (= (dtype $o@@34) Tclass._module.Lifetime?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@22 $o@@34) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@22 $o@@34) _module.Lifetime.mightPointFrom)) (TSet Tclass._module.Lifetime) $h@@22))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@22 $o@@34) _module.Lifetime.mightPointFrom)))
)))
(assert (forall (($h0@@8 T@U) ($h1@@8 T@U) (this@@24 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@8) ($IsGoodHeap $h1@@8)) (and (or (not (= this@@24 null)) (not true)) ($Is refType this@@24 Tclass._module.Lifetime))) (and ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8))) (=> (forall (($o@@35 T@U) ($f@@12 T@U) )  (=> (and (or (not (= $o@@35 null)) (not true)) (and (= $o@@35 this@@24) (= $f@@12 _module.Lifetime.owner))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@8 $o@@35) $f@@12) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@8 $o@@35) $f@@12)))) (= (_module.Lifetime.alive $h0@@8 this@@24) (_module.Lifetime.alive $h1@@8 this@@24))))
 :pattern ( ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8) (_module.Lifetime.alive $h1@@8 this@@24))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@15 T@U) ($Heap@@15 T@U) (this@@25 T@U) ) (!  (=> (or (|_module.Thread.sequenceInv2#canCall| $prevHeap@@15 $Heap@@15 this@@25) (and (< 0 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@15) ($IsGoodHeap $Heap@@15)) ($HeapSucc $prevHeap@@15 $Heap@@15)) (and (or (not (= this@@25 null)) (not true)) (and ($Is refType this@@25 Tclass._module.Thread) ($IsAlloc refType this@@25 Tclass._module.Thread $prevHeap@@15)))))) (= (_module.Thread.sequenceInv2 $prevHeap@@15 $Heap@@15 this@@25) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (_module.Thread.sequenceInv2 $prevHeap@@15 $Heap@@15 this@@25) ($IsGoodHeap $Heap@@15))
))))
(assert (forall (($h0@@9 T@U) ($h1@@9 T@U) (this@@26 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@9) ($IsGoodHeap $h1@@9)) (and (or (not (= this@@26 null)) (not true)) ($Is refType this@@26 Tclass._module.Object))) (and ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9))) (=> (forall (($o@@36 T@U) ($f@@13 T@U) )  (=> (and (or (not (= $o@@36 null)) (not true)) (or (= $o@@36 this@@26) (= $o@@36 (_module.Object.universe this@@26)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@9 $o@@36) $f@@13) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@9 $o@@36) $f@@13)))) (= (_module.Object.baseFieldsInv $h0@@9 this@@26) (_module.Object.baseFieldsInv $h1@@9 this@@26))))
 :pattern ( ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9) (_module.Object.baseFieldsInv $h1@@9 this@@26))
)))
(assert (forall (($h0@@10 T@U) ($h1@@10 T@U) (this@@27 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@10) ($IsGoodHeap $h1@@10)) (and (or (not (= this@@27 null)) (not true)) ($Is refType this@@27 Tclass._module.Thread))) (and ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10))) (=> (forall (($o@@37 T@U) ($f@@14 T@U) )  (=> (and (or (not (= $o@@37 null)) (not true)) (or (= $o@@37 this@@27) (= $o@@37 (_module.Object.universe this@@27)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@10 $o@@37) $f@@14) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@10 $o@@37) $f@@14)))) (= (_module.Thread.baseFieldsInv $h0@@10 this@@27) (_module.Thread.baseFieldsInv $h1@@10 this@@27))))
 :pattern ( ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10) (_module.Thread.baseFieldsInv $h1@@10 this@@27))
)))
(assert (forall (($h0@@11 T@U) ($h1@@11 T@U) (this@@28 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@11) ($IsGoodHeap $h1@@11)) (and (or (not (= this@@28 null)) (not true)) ($Is refType this@@28 Tclass._module.OwnedObject))) (and ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11))) (=> (forall (($o@@38 T@U) ($f@@15 T@U) )  (=> (and (or (not (= $o@@38 null)) (not true)) (or (= $o@@38 this@@28) (= $o@@38 (_module.Object.universe this@@28)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@11 $o@@38) $f@@15) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@11 $o@@38) $f@@15)))) (= (_module.OwnedObject.baseFieldsInv $h0@@11 this@@28) (_module.OwnedObject.baseFieldsInv $h1@@11 this@@28))))
 :pattern ( ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11) (_module.OwnedObject.baseFieldsInv $h1@@11 this@@28))
)))
(assert (forall (($h0@@12 T@U) ($h1@@12 T@U) (this@@29 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@12) ($IsGoodHeap $h1@@12)) (and (or (not (= this@@29 null)) (not true)) ($Is refType this@@29 Tclass._module.Lifetime))) (and ($IsHeapAnchor $h0@@12) ($HeapSucc $h0@@12 $h1@@12))) (=> (forall (($o@@39 T@U) ($f@@16 T@U) )  (=> (and (or (not (= $o@@39 null)) (not true)) (or (= $o@@39 this@@29) (= $o@@39 (_module.Object.universe this@@29)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@12 $o@@39) $f@@16) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@12 $o@@39) $f@@16)))) (= (_module.Lifetime.baseFieldsInv $h0@@12 this@@29) (_module.Lifetime.baseFieldsInv $h1@@12 this@@29))))
 :pattern ( ($IsHeapAnchor $h0@@12) ($HeapSucc $h0@@12 $h1@@12) (_module.Lifetime.baseFieldsInv $h1@@12 this@@29))
)))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@16 T@U) (this@@30 T@U) ) (!  (=> (or (|_module.OwnedObject.baseFieldsInv#canCall| $Heap@@16 this@@30) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@16) (and (or (not (= this@@30 null)) (not true)) (and ($Is refType this@@30 Tclass._module.OwnedObject) ($IsAlloc refType this@@30 Tclass._module.OwnedObject $Heap@@16)))))) (and (|_module.OwnedObject.objectFields#canCall| $Heap@@16 this@@30) (= (_module.OwnedObject.baseFieldsInv $Heap@@16 this@@30) (|Set#Subset| (_module.OwnedObject.objectFields $Heap@@16 this@@30) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@16 (_module.Object.universe this@@30)) _module.Universe.content))))))
 :pattern ( (_module.OwnedObject.baseFieldsInv $Heap@@16 this@@30) ($IsGoodHeap $Heap@@16))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@17 T@U) (this@@31 T@U) ) (!  (=> (or (|_module.Object.nonAliasing#canCall| $Heap@@17 this@@31) (and (< 3 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@17) (and (or (not (= this@@31 null)) (not true)) (and ($Is refType this@@31 Tclass._module.Object) ($IsAlloc refType this@@31 Tclass._module.Object $Heap@@17)))))) (and (and (and (|$IsA#_module.ObjectClassKind| (_module.Object.objectClassKind this@@31)) (|_module.Object.objectClassKind#canCall| this@@31)) (=> (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@31) |#_module.ObjectClassKind.Thread|) ($Is refType this@@31 Tclass._module.Thread)) (and (and (|$IsA#_module.ObjectClassKind| (_module.Object.objectClassKind this@@31)) (|_module.Object.objectClassKind#canCall| this@@31)) (=> (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@31) |#_module.ObjectClassKind.OwnedObject|) ($Is refType this@@31 Tclass._module.OwnedObject)) (and (|$IsA#_module.ObjectClassKind| (_module.Object.objectClassKind this@@31)) (|_module.Object.objectClassKind#canCall| this@@31)))))) (= (_module.Object.nonAliasing $Heap@@17 this@@31)  (and (and (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@31) |#_module.ObjectClassKind.Thread|) ($Is refType this@@31 Tclass._module.Thread)) (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@31) |#_module.ObjectClassKind.OwnedObject|) ($Is refType this@@31 Tclass._module.OwnedObject))) (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@31) |#_module.ObjectClassKind.Lifetime|) ($Is refType this@@31 Tclass._module.Lifetime))))))
 :pattern ( (_module.Object.nonAliasing $Heap@@17 this@@31) ($IsGoodHeap $Heap@@17))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@32 T@U) ) (!  (=> (or (|_module.Thread.objectClassKind#canCall| this@@32) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@32 null)) (not true)) ($Is refType this@@32 Tclass._module.Thread)))) (= (_module.Thread.objectClassKind this@@32) (Lit DatatypeTypeType |#_module.ObjectClassKind.Thread|)))
 :pattern ( (_module.Thread.objectClassKind this@@32))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@33 T@U) ) (!  (=> (or (|_module.OwnedObject.objectClassKind#canCall| this@@33) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@33 null)) (not true)) ($Is refType this@@33 Tclass._module.OwnedObject)))) (= (_module.OwnedObject.objectClassKind this@@33) (Lit DatatypeTypeType |#_module.ObjectClassKind.OwnedObject|)))
 :pattern ( (_module.OwnedObject.objectClassKind this@@33))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@34 T@U) ) (!  (=> (or (|_module.Lifetime.objectClassKind#canCall| this@@34) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@34 null)) (not true)) ($Is refType this@@34 Tclass._module.Lifetime)))) (= (_module.Lifetime.objectClassKind this@@34) (Lit DatatypeTypeType |#_module.ObjectClassKind.Lifetime|)))
 :pattern ( (_module.Lifetime.objectClassKind this@@34))
))))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (!  (=> (|Set#Equal| a@@12 b@@9) (= a@@12 b@@9))
 :pattern ( (|Set#Equal| a@@12 b@@9))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@18 T@U) (this@@35 T@U) ) (!  (=> (or (|_module.OwnedObject.objectUserFields#canCall| $Heap@@18 this@@35) (and (< 3 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@18) (or (not (= this@@35 null)) (not true))) ($IsAlloc refType this@@35 Tclass._module.OwnedObject $Heap@@18)))) ($IsAlloc SetType (_module.OwnedObject.objectUserFields $Heap@@18 this@@35) (TSet Tclass._module.Object) $Heap@@18))
 :pattern ( ($IsAlloc SetType (_module.OwnedObject.objectUserFields $Heap@@18 this@@35) (TSet Tclass._module.Object) $Heap@@18))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@19 T@U) (this@@36 T@U) ) (!  (=> (or (|_module.OwnedObject.objectFields#canCall| $Heap@@19 this@@36) (and (< 4 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@19) (or (not (= this@@36 null)) (not true))) ($IsAlloc refType this@@36 Tclass._module.OwnedObject $Heap@@19)))) ($IsAlloc SetType (_module.OwnedObject.objectFields $Heap@@19 this@@36) (TSet Tclass._module.Object) $Heap@@19))
 :pattern ( ($IsAlloc SetType (_module.OwnedObject.objectFields $Heap@@19 this@@36) (TSet Tclass._module.Object) $Heap@@19))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@20 T@U) (this@@37 T@U) ) (!  (=> (or (|_module.Object.triggerAxioms#canCall| $Heap@@20 this@@37) (and (< 4 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@20) (and (or (not (= this@@37 null)) (not true)) (and ($Is refType this@@37 Tclass._module.Object) ($IsAlloc refType this@@37 Tclass._module.Object $Heap@@20)))))) (_module.Object.triggerAxioms $Heap@@20 this@@37))
 :pattern ( (_module.Object.triggerAxioms $Heap@@20 this@@37))
))))
(assert (forall ((a@@13 T@U) (b@@10 T@U) (c T@U) ) (!  (=> (or (not (= a@@13 c)) (not true)) (=> (and ($HeapSucc a@@13 b@@10) ($HeapSucc b@@10 c)) ($HeapSucc a@@13 c)))
 :pattern ( ($HeapSucc a@@13 b@@10) ($HeapSucc b@@10 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 TInt) (and (= ($Box intType ($Unbox intType bx@@15)) bx@@15) ($Is intType ($Unbox intType bx@@15) TInt)))
 :pattern ( ($IsBox bx@@15 TInt))
)))
(assert (forall ((bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 TBool) (and (= ($Box boolType ($Unbox boolType bx@@16)) bx@@16) ($Is boolType ($Unbox boolType bx@@16) TBool)))
 :pattern ( ($IsBox bx@@16 TBool))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($prevHeap@@16 T@U) ($Heap@@21 T@U) (this@@38 T@U) ) (!  (=> (or (|_module.OwnedObject.unchangedNonvolatileFields#canCall| $prevHeap@@16 $Heap@@21 this@@38) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@16) ($IsGoodHeap $Heap@@21)) ($HeapSucc $prevHeap@@16 $Heap@@21)) (and (or (not (= this@@38 null)) (not true)) (and ($Is refType this@@38 Tclass._module.OwnedObject) ($IsAlloc refType this@@38 Tclass._module.OwnedObject $prevHeap@@16)))))) (and (=> (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@16 this@@38) _module.OwnedObject.owner)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@21 this@@38) _module.OwnedObject.owner))) (|_module.OwnedObject.unchangedNonvolatileUserFields#canCall| $prevHeap@@16 $Heap@@21 this@@38)) (= (_module.OwnedObject.unchangedNonvolatileFields $prevHeap@@16 $Heap@@21 this@@38)  (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@16 this@@38) _module.OwnedObject.owner)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@21 this@@38) _module.OwnedObject.owner))) (_module.OwnedObject.unchangedNonvolatileUserFields $prevHeap@@16 $Heap@@21 this@@38)))))
 :pattern ( (_module.OwnedObject.unchangedNonvolatileFields $prevHeap@@16 $Heap@@21 this@@38) ($IsGoodHeap $Heap@@21))
))))
(assert (forall ((a@@14 T@U) (b@@11 T@U) ) (!  (=> (and (_module.ObjectClassKind.Thread_q a@@14) (_module.ObjectClassKind.Thread_q b@@11)) (|_module.ObjectClassKind#Equal| a@@14 b@@11))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@14 b@@11) (_module.ObjectClassKind.Thread_q a@@14))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@14 b@@11) (_module.ObjectClassKind.Thread_q b@@11))
)))
(assert (forall ((a@@15 T@U) (b@@12 T@U) ) (!  (=> (and (_module.ObjectClassKind.OwnedObject_q a@@15) (_module.ObjectClassKind.OwnedObject_q b@@12)) (|_module.ObjectClassKind#Equal| a@@15 b@@12))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@15 b@@12) (_module.ObjectClassKind.OwnedObject_q a@@15))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@15 b@@12) (_module.ObjectClassKind.OwnedObject_q b@@12))
)))
(assert (forall ((a@@16 T@U) (b@@13 T@U) ) (!  (=> (and (_module.ObjectClassKind.Lifetime_q a@@16) (_module.ObjectClassKind.Lifetime_q b@@13)) (|_module.ObjectClassKind#Equal| a@@16 b@@13))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@16 b@@13) (_module.ObjectClassKind.Lifetime_q a@@16))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@16 b@@13) (_module.ObjectClassKind.Lifetime_q b@@13))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@2) h@@3) (forall ((bx@@17 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@17) ($IsAllocBox bx@@17 t0@@2 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@17))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@2) h@@3))
)))
(assert (forall (($h@@23 T@U) ($o@@40 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@23) (and (or (not (= $o@@40 null)) (not true)) ($Is refType $o@@40 Tclass._module.OwnedObject?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@23 $o@@40) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@23 $o@@40) _module.OwnedObject.nonvolatileVersion)) TInt $h@@23))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@23 $o@@40) _module.OwnedObject.nonvolatileVersion)))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@7)) x@@7)
 :pattern ( ($Box T@@4 x@@7))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (|$IsA#_module.ObjectClassKind| d@@5) (or (or (_module.ObjectClassKind.Thread_q d@@5) (_module.ObjectClassKind.OwnedObject_q d@@5)) (_module.ObjectClassKind.Lifetime_q d@@5)))
 :pattern ( (|$IsA#_module.ObjectClassKind| d@@5))
)))
(assert (forall (($h0@@13 T@U) ($h1@@13 T@U) (this@@39 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@13) ($IsGoodHeap $h1@@13)) (and (or (not (= this@@39 null)) (not true)) ($Is refType this@@39 Tclass._module.Object))) (and ($IsHeapAnchor $h0@@13) ($HeapSucc $h0@@13 $h1@@13))) (=> (forall (($o@@41 T@U) ($f@@17 T@U) )  (=> (and (or (not (= $o@@41 null)) (not true)) (= $o@@41 this@@39)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@13 $o@@41) $f@@17) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@13 $o@@41) $f@@17)))) (= (_module.Object.nonAliasing $h0@@13 this@@39) (_module.Object.nonAliasing $h1@@13 this@@39))))
 :pattern ( ($IsHeapAnchor $h0@@13) ($HeapSucc $h0@@13 $h1@@13) (_module.Object.nonAliasing $h1@@13 this@@39))
)))
(assert (forall (($h0@@14 T@U) ($h1@@14 T@U) (this@@40 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@14) ($IsGoodHeap $h1@@14)) (and (or (not (= this@@40 null)) (not true)) ($Is refType this@@40 Tclass._module.Object))) (and ($IsHeapAnchor $h0@@14) ($HeapSucc $h0@@14 $h1@@14))) (=> (forall (($o@@42 T@U) ($f@@18 T@U) )  (=> (and (or (not (= $o@@42 null)) (not true)) (= $o@@42 this@@40)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@14 $o@@42) $f@@18) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@14 $o@@42) $f@@18)))) (= (_module.Object.triggerAxioms $h0@@14 this@@40) (_module.Object.triggerAxioms $h1@@14 this@@40))))
 :pattern ( ($IsHeapAnchor $h0@@14) ($HeapSucc $h0@@14 $h1@@14) (_module.Object.triggerAxioms $h1@@14 this@@40))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@41 T@U) ) (!  (=> (or (|_module.Thread.objectClassKind#canCall| (Lit refType this@@41)) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@41 null)) (not true)) ($Is refType this@@41 Tclass._module.Thread)))) (= (_module.Thread.objectClassKind (Lit refType this@@41)) (Lit DatatypeTypeType |#_module.ObjectClassKind.Thread|)))
 :weight 3
 :pattern ( (_module.Thread.objectClassKind (Lit refType this@@41)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@42 T@U) ) (!  (=> (or (|_module.OwnedObject.objectClassKind#canCall| (Lit refType this@@42)) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@42 null)) (not true)) ($Is refType this@@42 Tclass._module.OwnedObject)))) (= (_module.OwnedObject.objectClassKind (Lit refType this@@42)) (Lit DatatypeTypeType |#_module.ObjectClassKind.OwnedObject|)))
 :weight 3
 :pattern ( (_module.OwnedObject.objectClassKind (Lit refType this@@42)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@43 T@U) ) (!  (=> (or (|_module.Lifetime.objectClassKind#canCall| (Lit refType this@@43)) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@43 null)) (not true)) ($Is refType this@@43 Tclass._module.Lifetime)))) (= (_module.Lifetime.objectClassKind (Lit refType this@@43)) (Lit DatatypeTypeType |#_module.ObjectClassKind.Lifetime|)))
 :weight 3
 :pattern ( (_module.Lifetime.objectClassKind (Lit refType this@@43)))
))))
(assert (forall (($h0@@15 T@U) ($h1@@15 T@U) (this@@44 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@15) ($IsGoodHeap $h1@@15)) (and (or (not (= this@@44 null)) (not true)) ($Is refType this@@44 Tclass._module.Universe))) (and ($IsHeapAnchor $h0@@15) ($HeapSucc $h0@@15 $h1@@15))) (=> (forall (($o@@43 T@U) ($f@@19 T@U) )  (=> (and (or (not (= $o@@43 null)) (not true)) (or (= $o@@43 this@@44) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@15 this@@44) _module.Universe.content)) ($Box refType $o@@43)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@15 $o@@43) $f@@19) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@15 $o@@43) $f@@19)))) (= (_module.Universe.globalBaseInv $h0@@15 this@@44) (_module.Universe.globalBaseInv $h1@@15 this@@44))))
 :pattern ( ($IsHeapAnchor $h0@@15) ($HeapSucc $h0@@15 $h1@@15) (_module.Universe.globalBaseInv $h1@@15 this@@44))
)))
(assert (forall ((a@@17 T@U) (b@@14 T@U) ) (! (= (|Set#Union| a@@17 (|Set#Union| a@@17 b@@14)) (|Set#Union| a@@17 b@@14))
 :pattern ( (|Set#Union| a@@17 (|Set#Union| a@@17 b@@14)))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 Tclass._module.ObjectClassKind) (or (or (_module.ObjectClassKind.Thread_q d@@6) (_module.ObjectClassKind.OwnedObject_q d@@6)) (_module.ObjectClassKind.Lifetime_q d@@6)))
 :pattern ( (_module.ObjectClassKind.Lifetime_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.ObjectClassKind))
 :pattern ( (_module.ObjectClassKind.OwnedObject_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.ObjectClassKind))
 :pattern ( (_module.ObjectClassKind.Thread_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.ObjectClassKind))
)))
(assert (forall (($h0@@16 T@U) ($h1@@16 T@U) (this@@45 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@16) ($IsGoodHeap $h1@@16)) (and (or (not (= this@@45 null)) (not true)) ($Is refType this@@45 Tclass._module.OwnedObject))) (and ($IsHeapAnchor $h0@@16) ($HeapSucc $h0@@16 $h1@@16))) (=> (forall (($o@@44 T@U) ($f@@20 T@U) )  (=> (and (or (not (= $o@@44 null)) (not true)) (= $o@@44 this@@45)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@16 $o@@44) $f@@20) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@16 $o@@44) $f@@20)))) (= (_module.OwnedObject.objectFields $h0@@16 this@@45) (_module.OwnedObject.objectFields $h1@@16 this@@45))))
 :pattern ( ($IsHeapAnchor $h0@@16) ($HeapSucc $h0@@16 $h1@@16) (_module.OwnedObject.objectFields $h1@@16 this@@45))
)))
(assert (forall (($h0@@17 T@U) ($h1@@17 T@U) (this@@46 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@17) ($IsGoodHeap $h1@@17)) (and (or (not (= this@@46 null)) (not true)) ($Is refType this@@46 Tclass._module.OwnedObject))) (and ($IsHeapAnchor $h0@@17) ($HeapSucc $h0@@17 $h1@@17))) (=> (forall (($o@@45 T@U) ($f@@21 T@U) )  (=> (and (or (not (= $o@@45 null)) (not true)) (= $o@@45 this@@46)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@17 $o@@45) $f@@21) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@17 $o@@45) $f@@21)))) (= (_module.OwnedObject.objectUserFields $h0@@17 this@@46) (_module.OwnedObject.objectUserFields $h1@@17 this@@46))))
 :pattern ( ($IsHeapAnchor $h0@@17) ($HeapSucc $h0@@17 $h1@@17) (_module.OwnedObject.objectUserFields $h1@@17 this@@46))
)))
(assert (forall (($h@@24 T@U) ($o@@46 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@24) (and (or (not (= $o@@46 null)) (not true)) ($Is refType $o@@46 Tclass._module.OwnedObject?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@24 $o@@46) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@24 $o@@46) _module.OwnedObject.owner)) Tclass._module.Object? $h@@24))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@24 $o@@46) _module.OwnedObject.owner)))
)))
(assert (forall ((bx@@18 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@18 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@18)) bx@@18) ($Is SetType ($Unbox SetType bx@@18) (TSet t@@5))))
 :pattern ( ($IsBox bx@@18 (TSet t@@5)))
)))
(assert (forall (($o@@47 T@U) ) (!  (=> ($Is refType $o@@47 Tclass._module.Thread?) ($Is refType $o@@47 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@47 Tclass._module.Thread?))
)))
(assert (forall ((bx@@19 T@U) ) (!  (=> ($IsBox bx@@19 Tclass._module.Thread?) ($IsBox bx@@19 Tclass._module.Object?))
 :pattern ( ($IsBox bx@@19 Tclass._module.Thread?))
)))
(assert (forall (($o@@48 T@U) ) (!  (=> ($Is refType $o@@48 Tclass._module.OwnedObject?) ($Is refType $o@@48 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@48 Tclass._module.OwnedObject?))
)))
(assert (forall ((bx@@20 T@U) ) (!  (=> ($IsBox bx@@20 Tclass._module.OwnedObject?) ($IsBox bx@@20 Tclass._module.Object?))
 :pattern ( ($IsBox bx@@20 Tclass._module.OwnedObject?))
)))
(assert (forall (($o@@49 T@U) ) (!  (=> ($Is refType $o@@49 Tclass._module.Lifetime?) ($Is refType $o@@49 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@49 Tclass._module.Lifetime?))
)))
(assert (forall ((bx@@21 T@U) ) (!  (=> ($IsBox bx@@21 Tclass._module.Lifetime?) ($IsBox bx@@21 Tclass._module.Object?))
 :pattern ( ($IsBox bx@@21 Tclass._module.Lifetime?))
)))
(assert (forall ((d@@7 T@U) ($h@@25 T@U) ) (!  (=> (and ($IsGoodHeap $h@@25) ($Is DatatypeTypeType d@@7 Tclass._module.ObjectClassKind)) ($IsAlloc DatatypeTypeType d@@7 Tclass._module.ObjectClassKind $h@@25))
 :pattern ( ($IsAlloc DatatypeTypeType d@@7 Tclass._module.ObjectClassKind $h@@25))
)))
(assert (= (Tag Tclass._module.Universe) Tagclass._module.Universe))
(assert (= (TagFamily Tclass._module.Universe) tytagFamily$Universe))
(assert (= (Tag Tclass._module.Universe?) Tagclass._module.Universe?))
(assert (= (TagFamily Tclass._module.Universe?) tytagFamily$Universe))
(assert (= (Tag Tclass._module.Object) Tagclass._module.Object))
(assert (= (TagFamily Tclass._module.Object) tytagFamily$Object))
(assert (= (Tag Tclass._module.Thread) Tagclass._module.Thread))
(assert (= (TagFamily Tclass._module.Thread) tytagFamily$Thread))
(assert (= (Tag Tclass._module.OwnedObject) Tagclass._module.OwnedObject))
(assert (= (TagFamily Tclass._module.OwnedObject) tytagFamily$OwnedObject))
(assert (= (Tag Tclass._module.Object?) Tagclass._module.Object?))
(assert (= (TagFamily Tclass._module.Object?) tytagFamily$Object))
(assert (= (Tag Tclass._module.Lifetime) Tagclass._module.Lifetime))
(assert (= (TagFamily Tclass._module.Lifetime) tytagFamily$Lifetime))
(assert (= (Tag Tclass._module.Thread?) Tagclass._module.Thread?))
(assert (= (TagFamily Tclass._module.Thread?) tytagFamily$Thread))
(assert (= (Tag Tclass._module.Lifetime?) Tagclass._module.Lifetime?))
(assert (= (TagFamily Tclass._module.Lifetime?) tytagFamily$Lifetime))
(assert (= (Tag Tclass._module.ObjectClassKind) Tagclass._module.ObjectClassKind))
(assert (= (TagFamily Tclass._module.ObjectClassKind) tytagFamily$ObjectClassKind))
(assert (= (Tag Tclass._module.OwnedObject?) Tagclass._module.OwnedObject?))
(assert (= (TagFamily Tclass._module.OwnedObject?) tytagFamily$OwnedObject))
(assert (forall (($h@@26 T@U) ($o@@50 T@U) ) (!  (=> (and ($IsGoodHeap $h@@26) (and (or (not (= $o@@50 null)) (not true)) ($Is refType $o@@50 Tclass._module.OwnedObject?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@26 $o@@50) _module.OwnedObject.owner)) Tclass._module.Object?))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@26 $o@@50) _module.OwnedObject.owner)))
)))
(assert (= |#_module.ObjectClassKind.Thread| (Lit DatatypeTypeType |#_module.ObjectClassKind.Thread|)))
(assert (= |#_module.ObjectClassKind.OwnedObject| (Lit DatatypeTypeType |#_module.ObjectClassKind.OwnedObject|)))
(assert (= |#_module.ObjectClassKind.Lifetime| (Lit DatatypeTypeType |#_module.ObjectClassKind.Lifetime|)))
(assert (forall (($o@@51 T@U) ) (! (= ($Is refType $o@@51 Tclass._module.Universe?)  (or (= $o@@51 null) (implements$_module.Universe (dtype $o@@51))))
 :pattern ( ($Is refType $o@@51 Tclass._module.Universe?))
)))
(assert (forall (($o@@52 T@U) ) (! (= ($Is refType $o@@52 Tclass._module.Object?)  (or (= $o@@52 null) (implements$_module.Object (dtype $o@@52))))
 :pattern ( ($Is refType $o@@52 Tclass._module.Object?))
)))
(assert (forall (($o@@53 T@U) ) (! (= ($Is refType $o@@53 Tclass._module.OwnedObject?)  (or (= $o@@53 null) (implements$_module.OwnedObject (dtype $o@@53))))
 :pattern ( ($Is refType $o@@53 Tclass._module.OwnedObject?))
)))
(assert (forall (($h@@27 T@U) ($o@@54 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@27) (and (or (not (= $o@@54 null)) (not true)) ($Is refType $o@@54 Tclass._module.Universe?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@27 $o@@54) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@27 $o@@54) _module.Universe.content)) (TSet Tclass._module.Object) $h@@27))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@27 $o@@54) _module.Universe.content)))
)))
(assert (forall ((a@@18 T@U) (b@@15 T@U) ) (! (= (|Set#Equal| a@@18 b@@15) (forall ((o@@6 T@U) ) (! (= (|Set#IsMember| a@@18 o@@6) (|Set#IsMember| b@@15 o@@6))
 :pattern ( (|Set#IsMember| a@@18 o@@6))
 :pattern ( (|Set#IsMember| b@@15 o@@6))
)))
 :pattern ( (|Set#Equal| a@@18 b@@15))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@47 T@U) ) (!  (=> (or (|_module.Thread.objectClassKind#canCall| this@@47) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@47 null)) (not true)) ($Is refType this@@47 Tclass._module.Thread)))) (= (_module.Object.objectClassKind this@@47) (_module.Thread.objectClassKind this@@47)))
 :pattern ( (_module.Object.objectClassKind this@@47) ($Is refType this@@47 Tclass._module.Thread))
 :pattern ( (_module.Object.objectClassKind this@@47) (_module.Thread.objectClassKind this@@47))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@48 T@U) ) (!  (=> (or (|_module.OwnedObject.objectClassKind#canCall| this@@48) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@48 null)) (not true)) ($Is refType this@@48 Tclass._module.OwnedObject)))) (= (_module.Object.objectClassKind this@@48) (_module.OwnedObject.objectClassKind this@@48)))
 :pattern ( (_module.Object.objectClassKind this@@48) ($Is refType this@@48 Tclass._module.OwnedObject))
 :pattern ( (_module.Object.objectClassKind this@@48) (_module.OwnedObject.objectClassKind this@@48))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@49 T@U) ) (!  (=> (or (|_module.Lifetime.objectClassKind#canCall| this@@49) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@49 null)) (not true)) ($Is refType this@@49 Tclass._module.Lifetime)))) (= (_module.Object.objectClassKind this@@49) (_module.Lifetime.objectClassKind this@@49)))
 :pattern ( (_module.Object.objectClassKind this@@49) ($Is refType this@@49 Tclass._module.Lifetime))
 :pattern ( (_module.Object.objectClassKind this@@49) (_module.Lifetime.objectClassKind this@@49))
))))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@50 T@U) ) (!  (=> (or (|_module.Thread.objectClassKind#canCall| this@@50) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@50 null)) (not true)) ($Is refType this@@50 Tclass._module.Thread)))) ($Is DatatypeTypeType (_module.Thread.objectClassKind this@@50) Tclass._module.ObjectClassKind))
 :pattern ( (_module.Thread.objectClassKind this@@50))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@51 T@U) ) (!  (=> (or (|_module.OwnedObject.objectClassKind#canCall| this@@51) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@51 null)) (not true)) ($Is refType this@@51 Tclass._module.OwnedObject)))) ($Is DatatypeTypeType (_module.OwnedObject.objectClassKind this@@51) Tclass._module.ObjectClassKind))
 :pattern ( (_module.OwnedObject.objectClassKind this@@51))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@52 T@U) ) (!  (=> (or (|_module.Lifetime.objectClassKind#canCall| this@@52) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@52 null)) (not true)) ($Is refType this@@52 Tclass._module.Lifetime)))) ($Is DatatypeTypeType (_module.Lifetime.objectClassKind this@@52) Tclass._module.ObjectClassKind))
 :pattern ( (_module.Lifetime.objectClassKind this@@52))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((this@@53 T@U) ) (!  (=> (or (|_module.Object.objectClassKind#canCall| this@@53) (and (< 2 $FunctionContextHeight) (and (or (not (= this@@53 null)) (not true)) ($Is refType this@@53 Tclass._module.Object)))) ($Is DatatypeTypeType (_module.Object.objectClassKind this@@53) Tclass._module.ObjectClassKind))
 :pattern ( (_module.Object.objectClassKind this@@53))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@22 T@U) (this@@54 T@U) ) (!  (=> (or (|_module.Lifetime.alive#canCall| $Heap@@22 this@@54) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@22) (and (or (not (= this@@54 null)) (not true)) (and ($Is refType this@@54 Tclass._module.Lifetime) ($IsAlloc refType this@@54 Tclass._module.Lifetime $Heap@@22)))))) (= (_module.Lifetime.alive $Heap@@22 this@@54)  (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@22 this@@54) _module.Lifetime.owner)) null)) (not true))))
 :pattern ( (_module.Lifetime.alive $Heap@@22 this@@54) ($IsGoodHeap $Heap@@22))
))))
(assert (forall (($h@@28 T@U) ($o@@55 T@U) ) (!  (=> (and ($IsGoodHeap $h@@28) (and (or (not (= $o@@55 null)) (not true)) ($Is refType $o@@55 Tclass._module.Universe?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@28 $o@@55) _module.Universe.content)) (TSet Tclass._module.Object)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@28 $o@@55) _module.Universe.content)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@23 T@U) (this@@55 T@U) ) (!  (=> (or (|_module.Lifetime.baseFieldsInv#canCall| $Heap@@23 this@@55) (and (< 2 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@23) (and (or (not (= this@@55 null)) (not true)) (and ($Is refType this@@55 Tclass._module.Lifetime) ($IsAlloc refType this@@55 Tclass._module.Lifetime $Heap@@23)))))) (= (_module.Lifetime.baseFieldsInv $Heap@@23 this@@55)  (and (and (and (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@23 this@@55) _module.Lifetime.owner)) null)) (not true)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@23 (_module.Object.universe this@@55)) _module.Universe.content)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@23 this@@55) _module.Lifetime.owner))) (|Set#Subset| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@23 this@@55) _module.Lifetime.elements)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@23 (_module.Object.universe this@@55)) _module.Universe.content)))) (|Set#Subset| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@23 this@@55) _module.Lifetime.mightPointTo)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@23 (_module.Object.universe this@@55)) _module.Universe.content)))) (|Set#Subset| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@23 this@@55) _module.Lifetime.mightPointFrom)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@23 (_module.Object.universe this@@55)) _module.Universe.content))))))
 :pattern ( (_module.Lifetime.baseFieldsInv $Heap@@23 this@@55) ($IsGoodHeap $Heap@@23))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($prevHeap@@17 T@U) ($Heap@@24 T@U) (this@@56 T@U) ) (!  (=> (or (|_module.OwnedObject.sequenceInv2#canCall| $prevHeap@@17 $Heap@@24 this@@56) (and (< 3 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@17) ($IsGoodHeap $Heap@@24)) ($HeapSucc $prevHeap@@17 $Heap@@24)) (and (or (not (= this@@56 null)) (not true)) (and ($Is refType this@@56 Tclass._module.OwnedObject) ($IsAlloc refType this@@56 Tclass._module.OwnedObject $prevHeap@@17)))))) (and (=> (=> (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.owner)) null) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@24 this@@56) _module.OwnedObject.owner)) null)) (=> (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@24 this@@56) _module.OwnedObject.nonvolatileVersion)))) (and (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@24 this@@56) _module.OwnedObject.nonvolatileVersion)))) (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.OwnedObject.unchangedNonvolatileFields#canCall| $prevHeap@@17 $Heap@@24 this@@56))) (=> (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@24 this@@56) _module.OwnedObject.nonvolatileVersion)))) (and true (_module.OwnedObject.unchangedNonvolatileFields $prevHeap@@17 $Heap@@24 this@@56))) (=> ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.owner)) Tclass._module.OwnedObject) (let ((|oldOwner#0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.owner))))
(|_module.OwnedObject.volatileOwns#canCall| |oldOwner#0|))))))) (= (_module.OwnedObject.sequenceInv2 $prevHeap@@17 $Heap@@24 this@@56)  (and (and (and (=> (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.owner)) null) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@24 this@@56) _module.OwnedObject.owner)) null)) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@24 this@@56) _module.OwnedObject.nonvolatileVersion))))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@24 this@@56) _module.OwnedObject.nonvolatileVersion)))) (and true (_module.OwnedObject.unchangedNonvolatileFields $prevHeap@@17 $Heap@@24 this@@56)))) (=> ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.owner)) Tclass._module.OwnedObject) (let ((|oldOwner#0@@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.owner))))
 (=> (and (not (_module.OwnedObject.volatileOwns |oldOwner#0@@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 |oldOwner#0@@0|) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@24 |oldOwner#0@@0|) _module.OwnedObject.nonvolatileVersion))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@56) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@24 this@@56) _module.OwnedObject.nonvolatileVersion)))))))))))
 :pattern ( (_module.OwnedObject.sequenceInv2 $prevHeap@@17 $Heap@@24 this@@56) ($IsGoodHeap $Heap@@24))
))))
(assert (forall ((h@@4 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@4))
)))
(assert (forall ((h@@5 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@5)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@5))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is intType v@@6 TInt)
 :pattern ( ($Is intType v@@6 TInt))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@@25 () T@U)
(declare-fun current$Heap () T@U)
(declare-fun this@@57 () T@U)
(declare-fun |running#0@@1| () T@U)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun |b$reqreads#1@3| () Bool)
(declare-fun |b$reqreads#2@2| () Bool)
(declare-fun |b$reqreads#3@2| () Bool)
(declare-fun |b$reqreads#4@2| () Bool)
(declare-fun |b$reqreads#5@2| () Bool)
(declare-fun |b$reqreads#5@1| () Bool)
(declare-fun |l#1@0| () T@U)
(declare-fun |b$reqreads#5@0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun |b$reqreads#4@1| () Bool)
(declare-fun |o#3@0| () T@U)
(declare-fun |b$reqreads#4@0| () Bool)
(declare-fun |newtype$check#0@0| () T@U)
(declare-fun |newtype$check#1@0| () T@U)
(declare-fun |b$reqreads#3@1| () Bool)
(declare-fun |b$reqreads#2@1| () Bool)
(declare-fun |b$reqreads#1@2| () Bool)
(declare-fun |o#2@0| () T@U)
(declare-fun |b$reqreads#1@1| () Bool)
(declare-fun |b$reqreads#2@0| () Bool)
(declare-fun |b$reqreads#3@0| () Bool)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun previous$Heap () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 72) (let ((anon31_correct  (=> (= (_module.Universe.legalTransitionsSequence $Heap@@25 current$Heap this@@57 |running#0@@1|)  (and (and (and (and (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57) (|Set#Subset| |running#0@@1| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)))) (forall ((|o#4| T@U) ) (!  (=> (and ($Is refType |o#4| Tclass._module.Object) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4|)))) (or (forall (($o@@56 T@U) ($f@@22 T@U) ) (!  (=> (or (not (= $o@@56 null)) (not true)) (=> (= $o@@56 |o#4|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@56) $f@@22) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 $o@@56) $f@@22))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@56) $f@@22))
)) (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4|)))
 :pattern ( (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4|)))
))) (forall ((|o#5| T@U) ) (!  (=> (and ($Is refType |o#5| Tclass._module.OwnedObject) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#5|)) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5|) _module.OwnedObject.owner)) Tclass._module.Thread))) (=> (and (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5|) _module.OwnedObject.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5|) _module.OwnedObject.owner) Tclass._module.Object? $Heap@@25)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5|) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap |o#5|) _module.OwnedObject.nonvolatileVersion))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap |o#5|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5|) _module.OwnedObject.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#5|)))
))) (forall ((|l#2@@0| T@U) ) (!  (=> (and ($Is refType |l#2@@0| Tclass._module.Lifetime) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |l#2@@0|))) (=> (and (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#2@@0|) _module.Lifetime.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#2@@0|) _module.Lifetime.owner) Tclass._module.Thread? $Heap@@25)) (_module.Lifetime.unchangedNonvolatileFields $Heap@@25 current$Heap |l#2@@0|)))
 :pattern ( (_module.Lifetime.unchangedNonvolatileFields $Heap@@25 current$Heap |l#2@@0|))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#2@@0|) _module.Lifetime.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |l#2@@0|)))
)))) (=> (and (and (|_module.Universe.baseLegalTransitionsSequence#canCall| $Heap@@25 current$Heap this@@57) (=> (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57) (=> (|Set#Subset| |running#0@@1| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content))) (and (forall ((|o#4@@0| T@U) ) (!  (=> ($Is refType |o#4@@0| Tclass._module.Object) (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@0|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@0|))) (=> (not (forall (($o@@57 T@U) ($f@@23 T@U) ) (!  (=> (or (not (= $o@@57 null)) (not true)) (=> (= $o@@57 |o#4@@0|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@57) $f@@23) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 $o@@57) $f@@23))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@57) $f@@23))
))) (|_module.Object.sequenceInv2#canCall| $Heap@@25 current$Heap |o#4@@0|))))
 :pattern ( (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@0|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@0|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@0|)))
)) (=> (forall ((|o#4@@1| T@U) ) (!  (=> (and ($Is refType |o#4@@1| Tclass._module.Object) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@1|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@1|)))) (or (forall (($o@@58 T@U) ($f@@24 T@U) ) (!  (=> (or (not (= $o@@58 null)) (not true)) (=> (= $o@@58 |o#4@@1|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@58) $f@@24) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 $o@@58) $f@@24))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@58) $f@@24))
)) (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@1|)))
 :pattern ( (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@1|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@1|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@1|)))
)) (=> (forall ((|o#5@@0| T@U) ) (!  (=> (and ($Is refType |o#5@@0| Tclass._module.OwnedObject) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#5@@0|)) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@0|) _module.OwnedObject.owner)) Tclass._module.Thread))) (=> (and (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@0|) _module.OwnedObject.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@0|) _module.OwnedObject.owner) Tclass._module.Object? $Heap@@25)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@0|) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap |o#5@@0|) _module.OwnedObject.nonvolatileVersion))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap |o#5@@0|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@0|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@0|) _module.OwnedObject.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#5@@0|)))
)) (forall ((|l#2@@1| T@U) ) (!  (=> ($Is refType |l#2@@1| Tclass._module.Lifetime) (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |l#2@@1|)) (=> (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#2@@1|) _module.Lifetime.owner))) (=> ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#2@@1|) _module.Lifetime.owner) Tclass._module.Thread? $Heap@@25) (|_module.Lifetime.unchangedNonvolatileFields#canCall| $Heap@@25 current$Heap |l#2@@1|)))))
 :pattern ( (_module.Lifetime.unchangedNonvolatileFields $Heap@@25 current$Heap |l#2@@1|))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#2@@1|) _module.Lifetime.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |l#2@@1|)))
)))))))) ($Is boolType (bool_2_U (_module.Universe.legalTransitionsSequence $Heap@@25 current$Heap this@@57 |running#0@@1|)) TBool)) (and (=> (= (ControlFlow 0 3) (- 0 8)) |b$reqreads#0@0|) (=> |b$reqreads#0@0| (and (=> (= (ControlFlow 0 3) (- 0 7)) |b$reqreads#1@3|) (=> |b$reqreads#1@3| (and (=> (= (ControlFlow 0 3) (- 0 6)) |b$reqreads#2@2|) (=> |b$reqreads#2@2| (and (=> (= (ControlFlow 0 3) (- 0 5)) |b$reqreads#3@2|) (=> |b$reqreads#3@2| (and (=> (= (ControlFlow 0 3) (- 0 4)) |b$reqreads#4@2|) (=> |b$reqreads#4@2| (=> (= (ControlFlow 0 3) (- 0 2)) |b$reqreads#5@2|)))))))))))))))
(let ((anon30_correct  (=> (and (= |b$reqreads#5@2| |b$reqreads#5@1|) (= (ControlFlow 0 10) 3)) anon31_correct)))
(let ((anon50_Else_correct  (=> (not (and (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#1@0|) _module.Lifetime.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#1@0|) _module.Lifetime.owner) Tclass._module.Thread? $Heap@@25))) (=> (and (= |b$reqreads#5@1| true) (= (ControlFlow 0 16) 10)) anon30_correct))))
(let ((anon50_Then_correct  (=> (and (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#1@0|) _module.Lifetime.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#1@0|) _module.Lifetime.owner) Tclass._module.Thread? $Heap@@25)) (and (=> (= (ControlFlow 0 13) (- 0 15)) (or (not (= |l#1@0| null)) (not true))) (=> (or (not (= |l#1@0| null)) (not true)) (=> ($IsAllocBox ($Box refType |l#1@0|) Tclass._module.Lifetime? current$Heap) (and (=> (= (ControlFlow 0 13) (- 0 14)) ($IsAlloc refType |l#1@0| Tclass._module.Lifetime $Heap@@25)) (=> ($IsAlloc refType |l#1@0| Tclass._module.Lifetime $Heap@@25) (=> (and (and (= |b$reqreads#5@0| (forall (($o@@59 T@U) ($f@@25 T@U) )  (=> (and (and (or (not (= $o@@59 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@59) alloc)))) (= $o@@59 |l#1@0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@59 $f@@25))))) (|_module.Lifetime.unchangedNonvolatileFields#canCall| $Heap@@25 current$Heap |l#1@0|)) (and (= |b$reqreads#5@1| |b$reqreads#5@0|) (= (ControlFlow 0 13) 10))) anon30_correct)))))))))
(let ((anon49_Else_correct  (=> (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#1@0|) _module.Lifetime.owner)) (and (=> (= (ControlFlow 0 20) 13) anon50_Then_correct) (=> (= (ControlFlow 0 20) 16) anon50_Else_correct)))))
(let ((anon49_Then_correct  (=> (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |l#1@0|) _module.Lifetime.owner))) (and (=> (= (ControlFlow 0 17) (- 0 19)) (or (not (= |l#1@0| null)) (not true))) (=> (or (not (= |l#1@0| null)) (not true)) (and (=> (= (ControlFlow 0 17) (- 0 18)) ($IsAlloc refType |l#1@0| Tclass._module.Lifetime $Heap@@25)) (=> ($IsAlloc refType |l#1@0| Tclass._module.Lifetime $Heap@@25) (and (=> (= (ControlFlow 0 17) 13) anon50_Then_correct) (=> (= (ControlFlow 0 17) 16) anon50_Else_correct)))))))))
(let ((anon48_Then_correct  (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |l#1@0|)) (and (=> (= (ControlFlow 0 21) (- 0 23)) (or (not (= |l#1@0| null)) (not true))) (=> (or (not (= |l#1@0| null)) (not true)) (and (=> (= (ControlFlow 0 21) (- 0 22)) ($IsAlloc refType |l#1@0| Tclass._module.Lifetime $Heap@@25)) (=> ($IsAlloc refType |l#1@0| Tclass._module.Lifetime $Heap@@25) (and (=> (= (ControlFlow 0 21) 17) anon49_Then_correct) (=> (= (ControlFlow 0 21) 20) anon49_Else_correct)))))))))
(let ((anon48_Else_correct  (=> (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |l#1@0|))) (=> (and (= |b$reqreads#5@1| true) (= (ControlFlow 0 12) 10)) anon30_correct))))
(let ((anon47_Then_correct  (=> (and ($Is refType |l#1@0| Tclass._module.Lifetime) ($IsAlloc refType |l#1@0| Tclass._module.Lifetime current$Heap)) (and (=> (= (ControlFlow 0 24) (- 0 25)) ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25)) (=> ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25) (and (=> (= (ControlFlow 0 24) 21) anon48_Then_correct) (=> (= (ControlFlow 0 24) 12) anon48_Else_correct)))))))
(let ((anon47_Else_correct  (=> (not (and ($Is refType |l#1@0| Tclass._module.Lifetime) ($IsAlloc refType |l#1@0| Tclass._module.Lifetime current$Heap))) (=> (and (= |b$reqreads#5@1| true) (= (ControlFlow 0 11) 10)) anon30_correct))))
(let ((anon46_Then_correct  (=> (and (and (and (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57) (|Set#Subset| |running#0@@1| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)))) (forall ((|o#4@@2| T@U) ) (!  (=> (and ($Is refType |o#4@@2| Tclass._module.Object) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@2|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@2|)))) (or (forall (($o@@60 T@U) ($f@@26 T@U) ) (!  (=> (or (not (= $o@@60 null)) (not true)) (=> (= $o@@60 |o#4@@2|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@60) $f@@26) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 $o@@60) $f@@26))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@60) $f@@26))
)) (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@2|)))
 :pattern ( (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@2|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@2|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@2|)))
))) (forall ((|o#5@@1| T@U) ) (!  (=> (and ($Is refType |o#5@@1| Tclass._module.OwnedObject) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#5@@1|)) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@1|) _module.OwnedObject.owner)) Tclass._module.Thread))) (=> (and (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@1|) _module.OwnedObject.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@1|) _module.OwnedObject.owner) Tclass._module.Object? $Heap@@25)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@1|) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap |o#5@@1|) _module.OwnedObject.nonvolatileVersion))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap |o#5@@1|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@1|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@1|) _module.OwnedObject.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#5@@1|)))
))) (and (=> (= (ControlFlow 0 26) 24) anon47_Then_correct) (=> (= (ControlFlow 0 26) 11) anon47_Else_correct)))))
(let ((anon46_Else_correct  (=> (not (and (and (and (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57) (|Set#Subset| |running#0@@1| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)))) (forall ((|o#4@@3| T@U) ) (!  (=> (and ($Is refType |o#4@@3| Tclass._module.Object) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@3|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@3|)))) (or (forall (($o@@61 T@U) ($f@@27 T@U) ) (!  (=> (or (not (= $o@@61 null)) (not true)) (=> (= $o@@61 |o#4@@3|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@61) $f@@27) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 $o@@61) $f@@27))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@61) $f@@27))
)) (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@3|)))
 :pattern ( (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@3|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@3|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@3|)))
))) (forall ((|o#5@@2| T@U) ) (!  (=> (and ($Is refType |o#5@@2| Tclass._module.OwnedObject) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#5@@2|)) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@2|) _module.OwnedObject.owner)) Tclass._module.Thread))) (=> (and (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@2|) _module.OwnedObject.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@2|) _module.OwnedObject.owner) Tclass._module.Object? $Heap@@25)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@2|) _module.OwnedObject.nonvolatileVersion))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap |o#5@@2|) _module.OwnedObject.nonvolatileVersion))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap |o#5@@2|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@2|) _module.OwnedObject.nonvolatileVersion)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#5@@2|) _module.OwnedObject.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#5@@2|)))
)))) (=> (and (= |b$reqreads#5@2| true) (= (ControlFlow 0 9) 3)) anon31_correct))))
(let ((anon22_correct  (=> (= |b$reqreads#4@2| |b$reqreads#4@1|) (and (=> (= (ControlFlow 0 28) 26) anon46_Then_correct) (=> (= (ControlFlow 0 28) 9) anon46_Else_correct)))))
(let ((anon45_Else_correct  (=> (not (and (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner) Tclass._module.Object? $Heap@@25))) (=> (and (= |b$reqreads#4@1| true) (= (ControlFlow 0 35) 28)) anon22_correct))))
(let ((anon45_Then_correct  (=> (and (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner) Tclass._module.Object? $Heap@@25)) (and (=> (= (ControlFlow 0 31) (- 0 34)) (or (not (= |o#3@0| null)) (not true))) (=> (or (not (= |o#3@0| null)) (not true)) (and (=> (= (ControlFlow 0 31) (- 0 33)) ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject $Heap@@25)) (=> ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject $Heap@@25) (and (=> (= (ControlFlow 0 31) (- 0 32)) (or (not (= |o#3@0| null)) (not true))) (=> (or (not (= |o#3@0| null)) (not true)) (=> (= |b$reqreads#4@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 |o#3@0| _module.OwnedObject.nonvolatileVersion))) (=> (and (= |b$reqreads#4@1| |b$reqreads#4@0|) (= (ControlFlow 0 31) 28)) anon22_correct)))))))))))
(let ((anon44_Else_correct  (=> (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner)) (and (=> (= (ControlFlow 0 39) 31) anon45_Then_correct) (=> (= (ControlFlow 0 39) 35) anon45_Else_correct)))))
(let ((anon44_Then_correct  (=> (not (|Set#IsMember| |running#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner))) (and (=> (= (ControlFlow 0 36) (- 0 38)) (or (not (= |o#3@0| null)) (not true))) (=> (or (not (= |o#3@0| null)) (not true)) (and (=> (= (ControlFlow 0 36) (- 0 37)) ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject $Heap@@25)) (=> ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject $Heap@@25) (and (=> (= (ControlFlow 0 36) 31) anon45_Then_correct) (=> (= (ControlFlow 0 36) 35) anon45_Else_correct)))))))))
(let ((anon43_Then_correct  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#3@0|)) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner)) Tclass._module.Thread)) (and (=> (= (ControlFlow 0 40) (- 0 43)) (or (not (= |o#3@0| null)) (not true))) (=> (or (not (= |o#3@0| null)) (not true)) (and (=> (= (ControlFlow 0 40) (- 0 42)) ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject $Heap@@25)) (=> ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject $Heap@@25) (=> (= |newtype$check#0@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner))) (and (=> (= (ControlFlow 0 40) (- 0 41)) ($Is refType |newtype$check#0@0| Tclass._module.Thread)) (=> ($Is refType |newtype$check#0@0| Tclass._module.Thread) (=> (= |newtype$check#1@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner))) (and (=> (= (ControlFlow 0 40) 36) anon44_Then_correct) (=> (= (ControlFlow 0 40) 39) anon44_Else_correct)))))))))))))
(let ((anon43_Else_correct  (=> (not (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#3@0|)) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 |o#3@0|) _module.OwnedObject.owner)) Tclass._module.Thread))) (=> (and (= |b$reqreads#4@1| true) (= (ControlFlow 0 30) 28)) anon22_correct))))
(let ((anon42_Else_correct  (=> (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#3@0|))) (and (=> (= (ControlFlow 0 47) 40) anon43_Then_correct) (=> (= (ControlFlow 0 47) 30) anon43_Else_correct)))))
(let ((anon42_Then_correct  (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#3@0|)) (and (=> (= (ControlFlow 0 44) (- 0 46)) (or (not (= |o#3@0| null)) (not true))) (=> (or (not (= |o#3@0| null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 45)) ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject $Heap@@25)) (=> ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject $Heap@@25) (and (=> (= (ControlFlow 0 44) 40) anon43_Then_correct) (=> (= (ControlFlow 0 44) 30) anon43_Else_correct)))))))))
(let ((anon41_Then_correct  (=> (and ($Is refType |o#3@0| Tclass._module.OwnedObject) ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject current$Heap)) (and (=> (= (ControlFlow 0 48) (- 0 49)) ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25)) (=> ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25) (and (=> (= (ControlFlow 0 48) 44) anon42_Then_correct) (=> (= (ControlFlow 0 48) 47) anon42_Else_correct)))))))
(let ((anon41_Else_correct  (=> (not (and ($Is refType |o#3@0| Tclass._module.OwnedObject) ($IsAlloc refType |o#3@0| Tclass._module.OwnedObject current$Heap))) (=> (and (= |b$reqreads#4@1| true) (= (ControlFlow 0 29) 28)) anon22_correct))))
(let ((anon40_Then_correct  (=> (and (and (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57) (|Set#Subset| |running#0@@1| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)))) (forall ((|o#4@@4| T@U) ) (!  (=> (and ($Is refType |o#4@@4| Tclass._module.Object) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@4|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@4|)))) (or (forall (($o@@62 T@U) ($f@@28 T@U) ) (!  (=> (or (not (= $o@@62 null)) (not true)) (=> (= $o@@62 |o#4@@4|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@62) $f@@28) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 $o@@62) $f@@28))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@62) $f@@28))
)) (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@4|)))
 :pattern ( (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@4|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@4|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@4|)))
))) (and (=> (= (ControlFlow 0 50) 48) anon41_Then_correct) (=> (= (ControlFlow 0 50) 29) anon41_Else_correct)))))
(let ((anon40_Else_correct  (=> (and (not (and (and (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57) (|Set#Subset| |running#0@@1| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)))) (forall ((|o#4@@5| T@U) ) (!  (=> (and ($Is refType |o#4@@5| Tclass._module.Object) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@5|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@5|)))) (or (forall (($o@@63 T@U) ($f@@29 T@U) ) (!  (=> (or (not (= $o@@63 null)) (not true)) (=> (= $o@@63 |o#4@@5|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@63) $f@@29) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 $o@@63) $f@@29))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@63) $f@@29))
)) (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@5|)))
 :pattern ( (_module.Object.sequenceInv2 $Heap@@25 current$Heap |o#4@@5|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#4@@5|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#4@@5|)))
)))) (= |b$reqreads#4@2| true)) (and (=> (= (ControlFlow 0 27) 26) anon46_Then_correct) (=> (= (ControlFlow 0 27) 9) anon46_Else_correct)))))
(let ((anon12_correct  (=> (= |b$reqreads#3@2| |b$reqreads#3@1|) (=> (and (= |b$reqreads#2@2| |b$reqreads#2@1|) (= |b$reqreads#1@3| |b$reqreads#1@2|)) (and (=> (= (ControlFlow 0 52) 50) anon40_Then_correct) (=> (= (ControlFlow 0 52) 27) anon40_Else_correct))))))
(let ((anon39_Else_correct  (=> (forall (($o@@64 T@U) ($f@@30 T@U) ) (!  (=> (or (not (= $o@@64 null)) (not true)) (=> (= $o@@64 |o#2@0|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@64) $f@@30) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 $o@@64) $f@@30))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@64) $f@@30))
)) (=> (and (and (= |b$reqreads#1@2| |b$reqreads#1@1|) (= |b$reqreads#2@1| |b$reqreads#2@0|)) (and (= |b$reqreads#3@1| true) (= (ControlFlow 0 58) 52))) anon12_correct))))
(let ((anon39_Then_correct  (=> (not (forall (($o@@65 T@U) ($f@@31 T@U) ) (!  (=> (or (not (= $o@@65 null)) (not true)) (=> (= $o@@65 |o#2@0|) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@65) $f@@31) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 $o@@65) $f@@31))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@65) $f@@31))
))) (and (=> (= (ControlFlow 0 55) (- 0 57)) (or (not (= |o#2@0| null)) (not true))) (=> (or (not (= |o#2@0| null)) (not true)) (=> ($IsAllocBox ($Box refType |o#2@0|) Tclass._module.Object? current$Heap) (and (=> (= (ControlFlow 0 55) (- 0 56)) ($IsAlloc refType |o#2@0| Tclass._module.Object $Heap@@25)) (=> ($IsAlloc refType |o#2@0| Tclass._module.Object $Heap@@25) (=> (and (= |b$reqreads#3@0| (forall (($o@@66 T@U) ($f@@32 T@U) )  (=> (and (and (or (not (= $o@@66 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@66) alloc)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@66) alloc)))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@66 $f@@32))))) (|_module.Object.sequenceInv2#canCall| $Heap@@25 current$Heap |o#2@0|)) (=> (and (and (= |b$reqreads#1@2| |b$reqreads#1@1|) (= |b$reqreads#2@1| |b$reqreads#2@0|)) (and (= |b$reqreads#3@1| |b$reqreads#3@0|) (= (ControlFlow 0 55) 52))) anon12_correct))))))))))
(let ((anon38_Then_correct  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#2@0|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#2@0|))) (and (=> (= (ControlFlow 0 59) (- 0 60)) ($IsAlloc refType |o#2@0| Tclass._module.Object $Heap@@25)) (=> ($IsAlloc refType |o#2@0| Tclass._module.Object $Heap@@25) (=> (= |b$reqreads#2@0| (forall (($o@@67 T@U) ($f@@33 T@U) )  (=> (and (and (or (not (= $o@@67 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@67) alloc)))) (= $o@@67 |o#2@0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@67 $f@@33))))) (and (=> (= (ControlFlow 0 59) 55) anon39_Then_correct) (=> (= (ControlFlow 0 59) 58) anon39_Else_correct))))))))
(let ((anon38_Else_correct  (=> (not (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#2@0|)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap this@@57) _module.Universe.content)) ($Box refType |o#2@0|)))) (=> (and (and (= |b$reqreads#1@2| |b$reqreads#1@1|) (= |b$reqreads#2@1| true)) (and (= |b$reqreads#3@1| true) (= (ControlFlow 0 54) 52))) anon12_correct))))
(let ((anon37_Else_correct  (=> (and (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#2@0|))) (= |b$reqreads#1@1| true)) (and (=> (= (ControlFlow 0 62) 59) anon38_Then_correct) (=> (= (ControlFlow 0 62) 54) anon38_Else_correct)))))
(let ((anon37_Then_correct  (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)) ($Box refType |o#2@0|)) (=> (and (= |b$reqreads#1@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@57 _module.Universe.content))) (= |b$reqreads#1@1| |b$reqreads#1@0|)) (and (=> (= (ControlFlow 0 61) 59) anon38_Then_correct) (=> (= (ControlFlow 0 61) 54) anon38_Else_correct))))))
(let ((anon36_Then_correct  (=> (and ($Is refType |o#2@0| Tclass._module.Object) ($IsAlloc refType |o#2@0| Tclass._module.Object current$Heap)) (and (=> (= (ControlFlow 0 63) (- 0 64)) ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25)) (=> ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25) (and (=> (= (ControlFlow 0 63) 61) anon37_Then_correct) (=> (= (ControlFlow 0 63) 62) anon37_Else_correct)))))))
(let ((anon36_Else_correct  (=> (not (and ($Is refType |o#2@0| Tclass._module.Object) ($IsAlloc refType |o#2@0| Tclass._module.Object current$Heap))) (=> (and (and (= |b$reqreads#1@2| true) (= |b$reqreads#2@1| true)) (and (= |b$reqreads#3@1| true) (= (ControlFlow 0 53) 52))) anon12_correct))))
(let ((anon35_Then_correct  (=> (and (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57) (|Set#Subset| |running#0@@1| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content)))) (and (=> (= (ControlFlow 0 65) 63) anon36_Then_correct) (=> (= (ControlFlow 0 65) 53) anon36_Else_correct)))))
(let ((anon35_Else_correct  (=> (and (and (not (and (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57) (|Set#Subset| |running#0@@1| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@25 this@@57) _module.Universe.content))))) (= |b$reqreads#3@2| true)) (and (= |b$reqreads#2@2| true) (= |b$reqreads#1@3| true))) (and (=> (= (ControlFlow 0 51) 50) anon40_Then_correct) (=> (= (ControlFlow 0 51) 27) anon40_Else_correct)))))
(let ((anon34_Else_correct  (=> (not (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57)) (and (=> (= (ControlFlow 0 68) 65) anon35_Then_correct) (=> (= (ControlFlow 0 68) 51) anon35_Else_correct)))))
(let ((anon34_Then_correct  (=> (_module.Universe.baseLegalTransitionsSequence $Heap@@25 current$Heap this@@57) (and (=> (= (ControlFlow 0 66) (- 0 67)) ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25)) (=> ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25) (and (=> (= (ControlFlow 0 66) 65) anon35_Then_correct) (=> (= (ControlFlow 0 66) 51) anon35_Else_correct)))))))
(let ((anon33_Else_correct  (=> ($IsAllocBox ($Box refType this@@57) Tclass._module.Universe? current$Heap) (and (=> (= (ControlFlow 0 69) (- 0 70)) ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25)) (=> ($IsAlloc refType this@@57 Tclass._module.Universe $Heap@@25) (=> (and (= |b$reqreads#0@0| (forall (($o@@68 T@U) ($f@@34 T@U) )  (=> (and (and (or (not (= $o@@68 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@68) alloc)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap $o@@68) alloc)))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@68 $f@@34))))) (|_module.Universe.baseLegalTransitionsSequence#canCall| $Heap@@25 current$Heap this@@57)) (and (=> (= (ControlFlow 0 69) 66) anon34_Then_correct) (=> (= (ControlFlow 0 69) 68) anon34_Else_correct))))))))
(let ((anon33_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#59| null current$Heap alloc current$Heap alloc)) (and (=> (= (ControlFlow 0 71) 1) anon33_Then_correct) (=> (= (ControlFlow 0 71) 69) anon33_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@25) ($IsHeapAnchor $Heap@@25)) (and (or (not (= this@@57 null)) (not true)) (and ($Is refType this@@57 Tclass._module.Universe) ($IsAlloc refType this@@57 Tclass._module.Universe previous$Heap)))) (=> (and (and (and ($Is SetType |running#0@@1| (TSet Tclass._module.Thread)) ($IsAlloc SetType |running#0@@1| (TSet Tclass._module.Thread) previous$Heap)) (= 9 $FunctionContextHeight)) (and (and (= previous$Heap $Heap@@25) (and ($HeapSucc previous$Heap current$Heap) ($IsGoodHeap current$Heap))) (= (ControlFlow 0 72) 71))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
