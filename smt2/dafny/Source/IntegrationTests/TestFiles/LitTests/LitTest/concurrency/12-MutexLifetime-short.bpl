// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short-@PROC@.smt2 /normalizeNames:0 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2
     && TagFamily(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == tytagFamily$_#Func2);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx) } 
  Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx)
     == Set#IsMember(rd[heap, bx0, bx1], bx));

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r)) } 
            r != null && Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hPartialFunc2
     && TagFamily(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#PartialFunc2);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hTotalFunc2
     && TagFamily(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#TotalFunc2);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc3: TyTag;

// Tclass._System.___hFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hFunc3
     && TagFamily(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#Func3);

function Tclass._System.___hFunc3_0(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_0(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hFunc3_1(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_1(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hFunc3_2(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_2(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hFunc3_3(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_3(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)));

function Handle3([Heap,Box,Box,Box]Box, [Heap,Box,Box,Box]bool, [Heap,Box,Box,Box]Set)
   : HandleType;

function Apply3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Box;

function Requires3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : bool;

function Reads3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)
     == h[heap, bx0, bx1, bx2]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  r[heap, bx0, bx1, bx2]
     ==> Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx: Box :: 
  { Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx) } 
  Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2], bx));

function {:inline} Requires3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

function {:inline} Reads3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// empty-reads property for Reads3 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     ==> (Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
       <==> Set#Equal(Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2), Set#Empty(): Set)));

// empty-reads property for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
     ==> Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, u0: Ty, u1: Ty, u2: Ty, u3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)), $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, t3) } { $IsBox(bx, u3) } 
        $IsBox(bx, t3) ==> $IsBox(bx, u3))
     ==> $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box :: 
        { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
          { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r)) } 
            r != null && Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsAllocBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3, h)));

function Tclass._System.___hPartialFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc3: TyTag;

// Tclass._System.___hPartialFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hPartialFunc3
     && TagFamily(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#PartialFunc3);

function Tclass._System.___hPartialFunc3_0(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_0(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc3_1(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_1(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc3_2(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_2(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc3_3(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_3(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Set#Equal(Reads3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hTotalFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc3: TyTag;

// Tclass._System.___hTotalFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hTotalFunc3
     && TagFamily(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#TotalFunc3);

function Tclass._System.___hTotalFunc3_0(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_0(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc3_1(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_1(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc3_2(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_2(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc3_3(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_3(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Requires3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc4: TyTag;

// Tclass._System.___hFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hFunc4
     && TagFamily(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#Func4);

function Tclass._System.___hFunc4_0(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_0(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hFunc4_1(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_1(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hFunc4_2(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_2(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hFunc4_3(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_3(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hFunc4_4(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_4(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

function Handle4([Heap,Box,Box,Box,Box]Box, [Heap,Box,Box,Box,Box]bool, [Heap,Box,Box,Box,Box]Set)
   : HandleType;

function Apply4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Box;

function Requires4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : bool;

function Reads4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)
     == h[heap, bx0, bx1, bx2, bx3]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  r[heap, bx0, bx1, bx2, bx3]
     ==> Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx: Box :: 
  { Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx) } 
  Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3], bx));

function {:inline} Requires4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

function {:inline} Reads4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// empty-reads property for Reads4 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     ==> (Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
       <==> Set#Equal(Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)));

// empty-reads property for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
     ==> Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)), $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, t4) } { $IsBox(bx, u4) } 
        $IsBox(bx, t4) ==> $IsBox(bx, u4))
     ==> $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
        { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
          { Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsAllocBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4, h)));

function Tclass._System.___hPartialFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc4: TyTag;

// Tclass._System.___hPartialFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hPartialFunc4
     && TagFamily(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#PartialFunc4);

function Tclass._System.___hPartialFunc4_0(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_0(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc4_1(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_1(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc4_2(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_2(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc4_3(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_3(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc4_4(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_4(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Set#Equal(Reads4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hTotalFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc4: TyTag;

// Tclass._System.___hTotalFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hTotalFunc4
     && TagFamily(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#TotalFunc4);

function Tclass._System.___hTotalFunc4_0(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_0(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc4_1(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_1(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc4_2(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_2(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc4_3(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_3(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc4_4(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_4(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Requires4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

const unique class._module.__default: ClassName;

function Tclass._module.Universe() : Ty
uses {
// Tclass._module.Universe Tag
axiom Tag(Tclass._module.Universe()) == Tagclass._module.Universe
   && TagFamily(Tclass._module.Universe()) == tytagFamily$Universe;
}

const unique Tagclass._module.Universe: TyTag;

// Box/unbox axiom for Tclass._module.Universe
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Universe()) } 
  $IsBox(bx, Tclass._module.Universe())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Universe()));

procedure {:verboseName "Havoc (well-formedness)"} CheckWellFormed$$_module.__default.Havoc(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



function Tclass._module.Universe?() : Ty
uses {
// Tclass._module.Universe? Tag
axiom Tag(Tclass._module.Universe?()) == Tagclass._module.Universe?
   && TagFamily(Tclass._module.Universe?()) == tytagFamily$Universe;
}

const unique Tagclass._module.Universe?: TyTag;

// Box/unbox axiom for Tclass._module.Universe?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Universe?()) } 
  $IsBox(bx, Tclass._module.Universe?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Universe?()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Havoc (well-formedness)"} CheckWellFormed$$_module.__default.Havoc(universe#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Havoc, CheckWellFormed$$_module.__default.Havoc
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    assert {:id "id0"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalBaseInv#canCall($Heap, universe#0);
    assume {:id "id1"} _module.Universe.globalBaseInv($Heap, universe#0);
    assert {:id "id2"} universe#0 != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    assert {:id "id3"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalBaseInv#canCall($Heap, universe#0);
    assume {:id "id4"} _module.Universe.globalBaseInv($Heap, universe#0);
    assert {:id "id5"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id6"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id7"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0);
}



function Tclass._module.Object() : Ty
uses {
// Tclass._module.Object Tag
axiom Tag(Tclass._module.Object()) == Tagclass._module.Object
   && TagFamily(Tclass._module.Object()) == tytagFamily$Object;
}

const unique Tagclass._module.Object: TyTag;

// Box/unbox axiom for Tclass._module.Object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Object()) } 
  $IsBox(bx, Tclass._module.Object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Object()));

function _module.Object.universe(this: ref) : ref
uses {
// Object.universe: Type axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $o: ref :: 
    { _module.Object.universe($o) } 
    $o != null && $Is($o, Tclass._module.Object?())
       ==> $Is(_module.Object.universe($o), Tclass._module.Universe()));
// Object.universe: Allocation axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $h: Heap, $o: ref :: 
    { _module.Object.universe($o), $Unbox(read($h, $o, alloc)): bool } 
    $IsGoodHeap($h)
         && 
        $o != null
         && $Is($o, Tclass._module.Object?())
         && $Unbox(read($h, $o, alloc)): bool
       ==> $IsAlloc(_module.Object.universe($o), Tclass._module.Universe(), $h));
}

procedure {:verboseName "Havoc (call)"} Call$$_module.__default.Havoc(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap));
  // user-defined preconditions
  requires {:id "id8"} _module.Universe.globalBaseInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true);
  requires {:id "id9"} _module.Universe.globalBaseInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalBaseInv($Heap, universe#0)
       || (forall o#0: ref :: 
        { _module.Object.triggerAxioms($Heap, o#0) } 
          { _module.Object.baseFieldsInv($Heap, o#0) } 
          { _module.Object.universe(o#0) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
        $Is(o#0, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
           ==> _module.Object.universe(o#0) == universe#0
             && o#0 != universe#0
             && _module.Object.baseFieldsInv($Heap, o#0)
             && _module.Object.triggerAxioms($Heap, o#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalBaseInv#canCall($Heap, universe#0)
     && (_module.Universe.globalBaseInv($Heap, universe#0)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id10"} _module.Universe.globalBaseInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && 
    true
     && (forall o#1: ref :: 
      { _module.Object.triggerAxioms($Heap, o#1) } 
        { _module.Object.baseFieldsInv($Heap, o#1) } 
        { _module.Object.universe(o#1) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
      $Is(o#1, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
         ==> _module.Object.universe(o#1) == universe#0
           && o#1 != universe#0
           && _module.Object.baseFieldsInv($Heap, o#1)
           && _module.Object.triggerAxioms($Heap, o#1));
  free ensures {:id "id11"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalBaseInv(old($Heap), universe#0)
     && _module.Universe.globalBaseInv($Heap, universe#0)
     && Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)
     && (forall o#4: ref :: 
      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#4)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#4)) } 
      $Is(o#4, Tclass._module.Object())
           && 
          !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#4))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#4))
         ==> !$IsAllocBox($Box(o#4), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Havoc (correctness)"} Impl$$_module.__default.Havoc(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 9 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id12"} _module.Universe.globalBaseInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && 
    true
     && (forall o#5: ref :: 
      { _module.Object.triggerAxioms($Heap, o#5) } 
        { _module.Object.baseFieldsInv($Heap, o#5) } 
        { _module.Object.universe(o#5) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#5)) } 
      $Is(o#5, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#5))
         ==> _module.Object.universe(o#5) == universe#0
           && o#5 != universe#0
           && _module.Object.baseFieldsInv($Heap, o#5)
           && _module.Object.triggerAxioms($Heap, o#5));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalBaseInv#canCall($Heap, universe#0)
     && (_module.Universe.globalBaseInv($Heap, universe#0)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id13"} _module.Universe.globalBaseInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true);
  ensures {:id "id14"} _module.Universe.globalBaseInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalBaseInv($Heap, universe#0)
       || (forall o#6: ref :: 
        { _module.Object.triggerAxioms($Heap, o#6) } 
          { _module.Object.baseFieldsInv($Heap, o#6) } 
          { _module.Object.universe(o#6) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
        $Is(o#6, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6))
           ==> _module.Object.universe(o#6) == universe#0
             && o#6 != universe#0
             && _module.Object.baseFieldsInv($Heap, o#6)
             && _module.Object.triggerAxioms($Heap, o#6));
  ensures {:id "id15"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true));
  ensures {:id "id16"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
           || (forall o#7: ref :: 
            { _module.Object.triggerAxioms(old($Heap), o#7) } 
              { _module.Object.baseFieldsInv(old($Heap), o#7) } 
              { _module.Object.universe(o#7) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7)) } 
            $Is(o#7, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7))
               ==> _module.Object.universe(o#7) == universe#0
                 && o#7 != universe#0
                 && _module.Object.baseFieldsInv(old($Heap), o#7)
                 && _module.Object.triggerAxioms(old($Heap), o#7)));
  ensures {:id "id17"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  ensures {:id "id18"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#8: ref :: 
            { _module.Object.triggerAxioms($Heap, o#8) } 
              { _module.Object.baseFieldsInv($Heap, o#8) } 
              { _module.Object.universe(o#8) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
               ==> _module.Object.universe(o#8) == universe#0
                 && o#8 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#8)
                 && _module.Object.triggerAxioms($Heap, o#8)));
  ensures {:id "id19"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  ensures {:id "id20"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (forall o#9: ref :: 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#9)) } 
        $Is(o#9, Tclass._module.Object())
             && 
            !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#9))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9))
           ==> !$IsAllocBox($Box(o#9), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Havoc (correctness)"} Impl$$_module.__default.Havoc(universe#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: Havoc, Impl$$_module.__default.Havoc
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
}



function Tclass._module.Thread() : Ty
uses {
// Tclass._module.Thread Tag
axiom Tag(Tclass._module.Thread()) == Tagclass._module.Thread
   && TagFamily(Tclass._module.Thread()) == tytagFamily$Thread;
}

const unique Tagclass._module.Thread: TyTag;

// Box/unbox axiom for Tclass._module.Thread
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Thread()) } 
  $IsBox(bx, Tclass._module.Thread())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Thread()));

procedure {:verboseName "Interference (well-formedness)"} CheckWellFormed$$_module.__default.Interference(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    preempting#0: ref
       where $Is(preempting#0, Tclass._module.Thread())
         && $IsAlloc(preempting#0, Tclass._module.Thread(), $Heap));
  free requires 22 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Interference (well-formedness)"} CheckWellFormed$$_module.__default.Interference(universe#0: ref, preempting#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;
  var t#0: ref;


    // AddMethodImpl: Interference, CheckWellFormed$$_module.__default.Interference
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    assert {:id "id21"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id22"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id23"} universe#0 != null;
    assume {:id "id24"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      $Box(preempting#0));
    assert {:id "id25"} universe#0 != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    assert {:id "id26"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id27"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id28"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    // Begin Comprehension WF check
    havoc t#0;
    if ($Is(t#0, Tclass._module.Thread())
       && $IsAlloc(t#0, Tclass._module.Thread(), $Heap))
    {
        assert {:id "id29"} universe#0 != null;
        assert {:id "id30"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(t#0)))
        {
        }

        if (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(t#0))
           && t#0 != preempting#0)
        {
        }
    }

    // End Comprehension WF check
    ##running#0 := Set#FromBoogieMap((lambda $y#1: Box :: 
        $IsBox($y#1, Tclass._module.Thread())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#1)
           && $Unbox($y#1): ref != preempting#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id31"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id32"} $IsAlloc(Set#FromBoogieMap((lambda $y#2: Box :: 
          $IsBox($y#2, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#2)
             && $Unbox($y#2): ref != preempting#0)), 
      TSet(Tclass._module.Thread()), 
      old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#3: Box :: 
          $IsBox($y#3, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#3)
             && $Unbox($y#3): ref != preempting#0)));
    assume {:id "id33"} _module.Universe.legalTransitionsSequence(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#4: Box :: 
          $IsBox($y#4, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#4)
             && $Unbox($y#4): ref != preempting#0)));
}



function Tclass._module.OwnedObject() : Ty
uses {
// Tclass._module.OwnedObject Tag
axiom Tag(Tclass._module.OwnedObject()) == Tagclass._module.OwnedObject
   && TagFamily(Tclass._module.OwnedObject()) == tytagFamily$OwnedObject;
}

const unique Tagclass._module.OwnedObject: TyTag;

// Box/unbox axiom for Tclass._module.OwnedObject
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedObject()) } 
  $IsBox(bx, Tclass._module.OwnedObject())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.OwnedObject()));

function Tclass._module.Object?() : Ty
uses {
// Tclass._module.Object? Tag
axiom Tag(Tclass._module.Object?()) == Tagclass._module.Object?
   && TagFamily(Tclass._module.Object?()) == tytagFamily$Object;
}

const unique Tagclass._module.Object?: TyTag;

// Box/unbox axiom for Tclass._module.Object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Object?()) } 
  $IsBox(bx, Tclass._module.Object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Object?()));

function Tclass._module.Lifetime() : Ty
uses {
// Tclass._module.Lifetime Tag
axiom Tag(Tclass._module.Lifetime()) == Tagclass._module.Lifetime
   && TagFamily(Tclass._module.Lifetime()) == tytagFamily$Lifetime;
}

const unique Tagclass._module.Lifetime: TyTag;

// Box/unbox axiom for Tclass._module.Lifetime
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Lifetime()) } 
  $IsBox(bx, Tclass._module.Lifetime())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Lifetime()));

function Tclass._module.Thread?() : Ty
uses {
// Tclass._module.Thread? Tag
axiom Tag(Tclass._module.Thread?()) == Tagclass._module.Thread?
   && TagFamily(Tclass._module.Thread?()) == tytagFamily$Thread;
axiom implements$_module.Object(Tclass._module.Thread?());
}

const unique Tagclass._module.Thread?: TyTag;

// Box/unbox axiom for Tclass._module.Thread?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Thread?()) } 
  $IsBox(bx, Tclass._module.Thread?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Thread?()));

procedure {:verboseName "Interference (call)"} Call$$_module.__default.Interference(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    preempting#0: ref
       where $Is(preempting#0, Tclass._module.Thread())
         && $IsAlloc(preempting#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id34"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id35"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id36"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id37"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    $Box(preempting#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0);
  free ensures {:id "id38"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#3: ref :: 
      { _module.Object.inv($Heap, o#3) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3))
         ==> _module.Object.inv($Heap, o#3));
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
    $Heap, 
    universe#0, 
    Set#FromBoogieMap((lambda $y#5: Box :: 
        $IsBox($y#5, Tclass._module.Thread())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#5)
           && $Unbox($y#5): ref != preempting#0)));
  free ensures {:id "id39"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#6: Box :: 
          $IsBox($y#6, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#6)
             && $Unbox($y#6): ref != preempting#0)))
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#7: Box :: 
          $IsBox($y#7, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#7)
             && $Unbox($y#7): ref != preempting#0)))
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
     && Set#Subset(Set#FromBoogieMap((lambda $y#11: Box :: 
          $IsBox($y#11, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#11)
             && $Unbox($y#11): ref != preempting#0)), 
      $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set)
     && (forall o#7: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#7) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#7)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7)) } 
      $Is(o#7, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#7))
         ==> (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           || _module.Object.sequenceInv2(old($Heap), $Heap, o#7))
     && (forall o#8: ref :: 
      { $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8))
           && $Is($Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(Set#FromBoogieMap((lambda $y#12: Box :: 
                $IsBox($y#12, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#12)
                   && $Unbox($y#12): ref != preempting#0)), 
            read(old($Heap), o#8, _module.OwnedObject.owner))
           && $IsAllocBox(read(old($Heap), o#8, _module.OwnedObject.owner), 
            Tclass._module.Object?(), 
            old($Heap))
         ==> $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall l#0: ref :: 
      { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
        { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#0)) } 
      $Is(l#0, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#0))
         ==> 
        !Set#IsMember(Set#FromBoogieMap((lambda $y#13: Box :: 
                $IsBox($y#13, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#13)
                   && $Unbox($y#13): ref != preempting#0)), 
            read(old($Heap), l#0, _module.Lifetime.owner))
           && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
            Tclass._module.Thread?(), 
            old($Heap))
         ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Interference (correctness)"} Impl$$_module.__default.Interference(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    preempting#0: ref
       where $Is(preempting#0, Tclass._module.Thread())
         && $IsAlloc(preempting#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 22 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id40"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#10: ref :: 
      { _module.Object.inv($Heap, o#10) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10)) } 
      $Is(o#10, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10))
         ==> _module.Object.inv($Heap, o#10));
  requires {:id "id41"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    $Box(preempting#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0);
  ensures {:id "id42"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  ensures {:id "id43"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#11: ref :: 
            { _module.Object.triggerAxioms($Heap, o#11) } 
              { _module.Object.baseFieldsInv($Heap, o#11) } 
              { _module.Object.universe(o#11) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
            $Is(o#11, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#11))
               ==> _module.Object.universe(o#11) == universe#0
                 && o#11 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#11)
                 && _module.Object.triggerAxioms($Heap, o#11)));
  ensures {:id "id44"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#12: ref :: 
        { _module.Object.inv($Heap, o#12) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
        $Is(o#12, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
           ==> _module.Object.inv($Heap, o#12));
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
    $Heap, 
    universe#0, 
    Set#FromBoogieMap((lambda $y#14: Box :: 
        $IsBox($y#14, Tclass._module.Thread())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#14)
           && $Unbox($y#14): ref != preempting#0)));
  ensures {:id "id45"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id46"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#13: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#13) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#13) } 
                  { _module.Object.universe(o#13) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
                $Is(o#13, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
                   ==> _module.Object.universe(o#13) == universe#0
                     && o#13 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#13)
                     && _module.Object.triggerAxioms(old($Heap), o#13))));
  ensures {:id "id47"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true)));
  ensures {:id "id48"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0)
               || (forall o#14: ref :: 
                { _module.Object.triggerAxioms($Heap, o#14) } 
                  { _module.Object.baseFieldsInv($Heap, o#14) } 
                  { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
                   ==> _module.Object.universe(o#14) == universe#0
                     && o#14 != universe#0
                     && _module.Object.baseFieldsInv($Heap, o#14)
                     && _module.Object.triggerAxioms($Heap, o#14))));
  ensures {:id "id49"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
            $Unbox(read($Heap, universe#0, _module.Universe.content)): Set));
  ensures {:id "id50"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (forall o#15: ref :: 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
            $Is(o#15, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15))
               ==> !$IsAllocBox($Box(o#15), Tclass._module.Object(), old($Heap))));
  ensures {:id "id51"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || Set#Subset(Set#FromBoogieMap((lambda $y#17: Box :: 
            $IsBox($y#17, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#17)
               && $Unbox($y#17): ref != preempting#0)), 
        $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set);
  ensures {:id "id52"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (forall o#16: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#16) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
        $Is(o#16, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#16))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16))
           ==> (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#16 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.sequenceInv2(old($Heap), $Heap, o#16));
  ensures {:id "id53"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (forall o#17: ref :: 
        { $Unbox(read($Heap, o#17, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#17, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#17, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
        $Is(o#17, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
             && $Is($Unbox(read(old($Heap), o#17, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(Set#FromBoogieMap((lambda $y#18: Box :: 
                  $IsBox($y#18, Tclass._module.Thread())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#18)
                     && $Unbox($y#18): ref != preempting#0)), 
              read(old($Heap), o#17, _module.OwnedObject.owner))
             && $IsAllocBox(read(old($Heap), o#17, _module.OwnedObject.owner), 
              Tclass._module.Object?(), 
              old($Heap))
           ==> $Unbox(read(old($Heap), o#17, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, o#17, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id54"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (forall l#1: ref :: 
        { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1) } 
          { $Unbox(read(old($Heap), l#1, _module.Lifetime.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1)) } 
        $Is(l#1, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1))
           ==> 
          !Set#IsMember(Set#FromBoogieMap((lambda $y#19: Box :: 
                  $IsBox($y#19, Tclass._module.Thread())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#19)
                     && $Unbox($y#19): ref != preempting#0)), 
              read(old($Heap), l#1, _module.Lifetime.owner))
             && $IsAllocBox(read(old($Heap), l#1, _module.Lifetime.owner), 
              Tclass._module.Thread?(), 
              old($Heap))
           ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Interference (correctness)"} Impl$$_module.__default.Interference(universe#0: ref, preempting#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var steps#0: int;
  var steps#1: int;
  var running##0: Set;
  var $PreLoopHeap$loop#0: Heap;
  var $decr_init$loop#00: int;
  var $w$loop#0: bool;
  var ##running#1: Set;
  var t#2: ref;
  var $decr$loop#00: int;
  var $Heap_at_0_0: Heap;
  var envThreads#0_0: Set
     where $Is(envThreads#0_0, TSet(Tclass._module.Thread()))
       && $IsAlloc(envThreads#0_0, TSet(Tclass._module.Thread()), $Heap);
  var t#0_0: ref;
  var universe##0_0: ref;
  var defass#running#0_0_0: bool;
  var running#0_0_0: ref
     where defass#running#0_0_0
       ==> $Is(running#0_0_0, Tclass._module.Thread())
         && $IsAlloc(running#0_0_0, Tclass._module.Thread(), $Heap);
  var running#0_0_1: ref;
  var ##running#0_0_0: ref;
  var running##0_0_0: ref;
  var $unchanged#x0_1_0: ref;

    // AddMethodImpl: Interference, Impl$$_module.__default.Interference
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(251,18)
    havoc steps#1;
    if (true)
    {
        assume true;
    }

    assert {:id "id55"} ($Is(LitInt(0), TInt) && LitInt(0) <= LitInt(0))
       || 
      ($Is(LitInt(0), TInt) && LitInt(0) <= LitInt(0))
       || (exists $as#steps0#0: int :: LitInt(0) <= $as#steps0#0);
    havoc steps#0;
    assume {:id "id56"} LitInt(0) <= steps#0;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(252,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id57"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := Lit(Set#Empty(): Set);
    assert {:id "id58"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id59"} $IsAlloc(Lit(Set#Empty(): Set), TSet(Tclass._module.Thread()), old($Heap));
    call {:id "id60"} Call$$_module.Universe.sequenceLci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- while statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(253,3)
    // Assume Fuel Constant
    $PreLoopHeap$loop#0 := $Heap;
    $decr_init$loop#00 := steps#0 - 0;
    havoc $w$loop#0;
    while (true)
      free invariant $w$loop#0 ==> _module.Universe.globalInv#canCall($Heap, universe#0);
      invariant {:id "id63"} $w$loop#0
         ==> 
        _module.Universe.globalInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalInv($Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
      invariant {:id "id64"} $w$loop#0
         ==> 
        _module.Universe.globalInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalInv($Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0)
               || (forall o#18: ref :: 
                { _module.Object.triggerAxioms($Heap, o#18) } 
                  { _module.Object.baseFieldsInv($Heap, o#18) } 
                  { _module.Object.universe(o#18) } 
                  { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
                $Is(o#18, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
                   ==> _module.Object.universe(o#18) == universe#0
                     && o#18 != universe#0
                     && _module.Object.baseFieldsInv($Heap, o#18)
                     && _module.Object.triggerAxioms($Heap, o#18)));
      invariant {:id "id65"} $w$loop#0
         ==> 
        _module.Universe.globalInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalInv($Heap, universe#0)
           || (forall o#19: ref :: 
            { _module.Object.inv($Heap, o#19) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
            $Is(o#19, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19))
               ==> _module.Object.inv($Heap, o#19));
      free invariant {:id "id66"} $w$loop#0
         ==> _module.Universe.globalInv#canCall($Heap, universe#0)
           && 
          _module.Universe.globalInv($Heap, universe#0)
           && 
          _module.Universe.globalBaseInv($Heap, universe#0)
           && (forall o#19: ref :: 
            { _module.Object.inv($Heap, o#19) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
            $Is(o#19, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19))
               ==> _module.Object.inv($Heap, o#19));
      free invariant $w$loop#0
         ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#29: Box :: 
              $IsBox($y#29, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#29)
                 && $Unbox($y#29): ref != preempting#0)));
      invariant {:id "id73"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
      invariant {:id "id74"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
                   || (forall o#20: ref :: 
                    { _module.Object.triggerAxioms(old($Heap), o#20) } 
                      { _module.Object.baseFieldsInv(old($Heap), o#20) } 
                      { _module.Object.universe(o#20) } 
                      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
                    $Is(o#20, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20))
                       ==> _module.Object.universe(o#20) == universe#0
                         && o#20 != universe#0
                         && _module.Object.baseFieldsInv(old($Heap), o#20)
                         && _module.Object.triggerAxioms(old($Heap), o#20))));
      invariant {:id "id75"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true)));
      invariant {:id "id76"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0)
                   || (forall o#21: ref :: 
                    { _module.Object.triggerAxioms($Heap, o#21) } 
                      { _module.Object.baseFieldsInv($Heap, o#21) } 
                      { _module.Object.universe(o#21) } 
                      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#21)) } 
                    $Is(o#21, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#21))
                       ==> _module.Object.universe(o#21) == universe#0
                         && o#21 != universe#0
                         && _module.Object.baseFieldsInv($Heap, o#21)
                         && _module.Object.triggerAxioms($Heap, o#21))));
      invariant {:id "id77"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
                $Unbox(read($Heap, universe#0, _module.Universe.content)): Set));
      invariant {:id "id78"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (forall o#22: ref :: 
                { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#22)) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22)) } 
                $Is(o#22, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22))
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#22))
                   ==> !$IsAllocBox($Box(o#22), Tclass._module.Object(), old($Heap))));
      invariant {:id "id79"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || Set#Subset(Set#FromBoogieMap((lambda $y#32: Box :: 
                $IsBox($y#32, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#32)
                   && $Unbox($y#32): ref != preempting#0)), 
            $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set);
      invariant {:id "id80"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || (forall o#23: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#23) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
            $Is(o#23, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#23))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#23 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#23));
      invariant {:id "id81"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || (forall o#24: ref :: 
            { $Unbox(read($Heap, o#24, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#24, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#24, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24)) } 
            $Is(o#24, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24))
                 && $Is($Unbox(read(old($Heap), o#24, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#FromBoogieMap((lambda $y#33: Box :: 
                      $IsBox($y#33, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#33)
                         && $Unbox($y#33): ref != preempting#0)), 
                  read(old($Heap), o#24, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#24, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#24, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#24, _module.OwnedObject.nonvolatileVersion)): int);
      invariant {:id "id82"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          universe#0, 
          Set#FromBoogieMap((lambda $y#30: Box :: 
              $IsBox($y#30, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                 && $Unbox($y#30): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           || (forall l#2: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#2) } 
              { $Unbox(read(old($Heap), l#2, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#2)) } 
            $Is(l#2, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#2))
               ==> 
              !Set#IsMember(Set#FromBoogieMap((lambda $y#34: Box :: 
                      $IsBox($y#34, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#34)
                         && $Unbox($y#34): ref != preempting#0)), 
                  read(old($Heap), l#2, _module.Lifetime.owner))
                 && $IsAllocBox(read(old($Heap), l#2, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  old($Heap))
               ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#2));
      free invariant {:id "id83"} $w$loop#0
         ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#30: Box :: 
                $IsBox($y#30, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#30)
                   && $Unbox($y#30): ref != preempting#0)))
           && 
          _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            universe#0, 
            Set#FromBoogieMap((lambda $y#31: Box :: 
                $IsBox($y#31, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#31)
                   && $Unbox($y#31): ref != preempting#0)))
           && 
          _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           && Set#Subset(Set#FromBoogieMap((lambda $y#35: Box :: 
                $IsBox($y#35, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#35)
                   && $Unbox($y#35): ref != preempting#0)), 
            $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set)
           && (forall o#23: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#23) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
            $Is(o#23, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#23))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#23 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#23))
           && (forall o#24: ref :: 
            { $Unbox(read($Heap, o#24, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#24, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#24, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24)) } 
            $Is(o#24, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24))
                 && $Is($Unbox(read(old($Heap), o#24, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#FromBoogieMap((lambda $y#36: Box :: 
                      $IsBox($y#36, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#36)
                         && $Unbox($y#36): ref != preempting#0)), 
                  read(old($Heap), o#24, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#24, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#24, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#24, _module.OwnedObject.nonvolatileVersion)): int)
           && (forall l#2: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#2) } 
              { $Unbox(read(old($Heap), l#2, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#2)) } 
            $Is(l#2, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#2))
               ==> 
              !Set#IsMember(Set#FromBoogieMap((lambda $y#37: Box :: 
                      $IsBox($y#37, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#37)
                         && $Unbox($y#37): ref != preempting#0)), 
                  read(old($Heap), l#2, _module.Lifetime.owner))
                 && $IsAllocBox(read(old($Heap), l#2, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  old($Heap))
               ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#2));
      free invariant $w$loop#0
         ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0);
      invariant {:id "id87"} $w$loop#0
         ==> 
        _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, universe#0)
           || (forall o#25: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#25) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
            $Is(o#25, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25))
               ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25))
                 && _module.Object.sequenceInv2(old($Heap), $Heap, o#25));
      free invariant {:id "id88"} $w$loop#0
         ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0)
           && 
          _module.Universe.globalSequenceInv2(old($Heap), $Heap, universe#0)
           && (forall o#25: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#25) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
            $Is(o#25, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25))
               ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25))
                 && _module.Object.sequenceInv2(old($Heap), $Heap, o#25));
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o]
             || 
            $o == universe#0
             || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null && $Unbox(read($PreLoopHeap$loop#0, $o, alloc)): bool
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f)
             || $_ModifiesFrame[$o, $f]);
      free invariant steps#0 - 0 <= $decr_init$loop#00;
    {
        if (!$w$loop#0)
        {
            assert {:id "id61"} {:subsumption 0} universe#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
            assume _module.Universe.globalInv#canCall($Heap, universe#0);
            assume _module.Universe.globalInv#canCall($Heap, universe#0);
            assume {:id "id62"} _module.Universe.globalInv($Heap, universe#0);
            assert {:id "id67"} {:subsumption 0} universe#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
            // Begin Comprehension WF check
            havoc t#2;
            if ($Is(t#2, Tclass._module.Thread())
               && $IsAlloc(t#2, Tclass._module.Thread(), $Heap))
            {
                assert {:id "id68"} {:subsumption 0} universe#0 != null;
                assert {:id "id69"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(t#2)))
                {
                }

                if (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(t#2))
                   && t#2 != preempting#0)
                {
                }
            }

            // End Comprehension WF check
            ##running#1 := Set#FromBoogieMap((lambda $y#24: Box :: 
                $IsBox($y#24, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#24)
                   && $Unbox($y#24): ref != preempting#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#1, TSet(Tclass._module.Thread()), $Heap);
            assert {:id "id70"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
            assert {:id "id71"} $IsAlloc(Set#FromBoogieMap((lambda $y#25: Box :: 
                  $IsBox($y#25, Tclass._module.Thread())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#25)
                     && $Unbox($y#25): ref != preempting#0)), 
              TSet(Tclass._module.Thread()), 
              old($Heap));
            assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
              $Heap, 
              universe#0, 
              Set#FromBoogieMap((lambda $y#26: Box :: 
                  $IsBox($y#26, Tclass._module.Thread())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#26)
                     && $Unbox($y#26): ref != preempting#0)));
            assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
              $Heap, 
              universe#0, 
              Set#FromBoogieMap((lambda $y#27: Box :: 
                  $IsBox($y#27, Tclass._module.Thread())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#27)
                     && $Unbox($y#27): ref != preempting#0)));
            assume {:id "id72"} _module.Universe.legalTransitionsSequence(old($Heap), 
              $Heap, 
              universe#0, 
              Set#FromBoogieMap((lambda $y#28: Box :: 
                  $IsBox($y#28, Tclass._module.Thread())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#28)
                     && $Unbox($y#28): ref != preempting#0)));
            assert {:id "id84"} {:subsumption 0} universe#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
            assert {:id "id85"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
            assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0);
            assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0);
            assume {:id "id86"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, universe#0);
            assume true;
            assume false;
        }

        assume true;
        if (0 >= steps#0)
        {
            break;
        }

        $decr$loop#00 := steps#0 - 0;
        $Heap_at_0_0 := $Heap;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(260,33)
        assume true;
        // Begin Comprehension WF check
        havoc t#0_0;
        if ($Is(t#0_0, Tclass._module.Thread())
           && $IsAlloc(t#0_0, Tclass._module.Thread(), $Heap))
        {
            assert {:id "id89"} universe#0 != null;
            if (Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(t#0_0)))
            {
            }

            if (Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(t#0_0))
               && t#0_0 != preempting#0)
            {
            }
        }

        // End Comprehension WF check
        assume true;
        envThreads#0_0 := Set#FromBoogieMap((lambda $y#0_0: Box :: 
            $IsBox($y#0_0, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $y#0_0)
               && $Unbox($y#0_0): ref != preempting#0));

      after_0_0:
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(261,5)
        assert {:id "id91"} {:subsumption 0} universe#0 != null;
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
        assert {:id "id92"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
        assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0);
        assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0);
        assert {:id "id93"} {:subsumption 0} _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0)
           ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, universe#0)
             || (forall o#0_0: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#0_0) } 
                { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0_0)) } 
                { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#0_0)) } 
              $Is(o#0_0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#0_0))
                 ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0_0))
                   && _module.Object.sequenceInv2(old($Heap), $Heap, o#0_0));
        assume {:id "id94"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, universe#0);
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(262,10)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        universe##0_0 := universe#0;
        assert {:id "id95"} (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && ($o == universe##0_0
                 || Set#IsMember($Unbox(read($Heap, universe##0_0, _module.Universe.content)): Set, $Box($o)))
             ==> $_ModifiesFrame[$o, $f]);
        call {:id "id96"} Call$$_module.__default.Havoc(universe##0_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(263,5)
        assume true;
        if (Set#Card(envThreads#0_0) > 0)
        {
            push;
            // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(264,33)
            havoc running#0_0_1;
            if ($Is(running#0_0_1, Tclass._module.Thread())
               && $IsAlloc(running#0_0_1, Tclass._module.Thread(), $Heap))
            {
                assume true;
            }

            assert {:id "id97"} ($Is(null, Tclass._module.Thread()) && Set#IsMember(envThreads#0_0, $Box(null)))
               || (exists $as#running0_0_0#0_0_0: ref :: 
                $Is($as#running0_0_0#0_0_0, Tclass._module.Thread())
                   && Set#IsMember(envThreads#0_0, $Box($as#running0_0_0#0_0_0)));
            defass#running#0_0_0 := true;
            havoc running#0_0_0;
            assume {:id "id98"} Set#IsMember(envThreads#0_0, $Box(running#0_0_0));
            // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(265,7)
            assert {:id "id99"} {:subsumption 0} universe#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
            assert {:id "id100"} defass#running#0_0_0;
            ##running#0_0_0 := running#0_0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0_0_0, Tclass._module.Thread(), $Heap);
            assert {:id "id101"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0_0);
            assert {:id "id102"} $IsAlloc(running#0_0_0, Tclass._module.Thread(), $Heap_at_0_0);
            assume _module.Universe.legalTransition#canCall($Heap_at_0_0, $Heap, universe#0, running#0_0_0);
            assume _module.Universe.legalTransition#canCall($Heap_at_0_0, $Heap, universe#0, running#0_0_0);
            assume {:id "id103"} _module.Universe.legalTransition($Heap_at_0_0, $Heap, universe#0, running#0_0_0);
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(266,33)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            assert {:id "id104"} universe#0 != null;
            assert {:id "id105"} defass#running#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            running##0_0_0 := running#0_0_0;
            assert {:id "id106"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0_0);
            assert {:id "id107"} $IsAlloc(running#0_0_0, Tclass._module.Thread(), $Heap_at_0_0);
            call {:id "id108"} Call$$_module.Universe.lci($Heap_at_0_0, $Heap, universe#0, running##0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(267,7)
            assert {:id "id109"} {:subsumption 0} universe#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
            assert {:id "id110"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0_0);
            assume _module.Universe.globalSequenceInv2#canCall($Heap_at_0_0, $Heap, universe#0);
            assume _module.Universe.globalSequenceInv2#canCall($Heap_at_0_0, $Heap, universe#0);
            assert {:id "id111"} {:subsumption 0} _module.Universe.globalSequenceInv2#canCall($Heap_at_0_0, $Heap, universe#0)
               ==> _module.Universe.globalSequenceInv2($Heap_at_0_0, $Heap, universe#0)
                 || (forall o#0_0_0: ref :: 
                  { _module.Object.sequenceInv2($Heap_at_0_0, $Heap, o#0_0_0) } 
                    { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0_0_0)) } 
                    { Set#IsMember($Unbox(read($Heap_at_0_0, universe#0, _module.Universe.content)): Set, 
                      $Box(o#0_0_0)) } 
                  $Is(o#0_0_0, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap_at_0_0, universe#0, _module.Universe.content)): Set, 
                        $Box(o#0_0_0))
                     ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0_0_0))
                       && _module.Object.sequenceInv2($Heap_at_0_0, $Heap, o#0_0_0));
            assume {:id "id112"} _module.Universe.globalSequenceInv2($Heap_at_0_0, $Heap, universe#0);
            // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(269,7)
            assert {:id "id113"} {:subsumption 0} universe#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
            assert {:id "id114"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
            assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0);
            if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0))
            {
                assert {:id "id115"} {:subsumption 0} universe#0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
                assert {:id "id116"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
                assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0);
            }

            assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
               && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
                 ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0));
            assume {:id "id117"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, universe#0);
            pop;
        }
        else
        {
            push;
            // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(272,7)
            assert {:id "id118"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
            if ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == universe#0
                 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
            {
                assert {:id "id119"} {:subsumption 0} universe#0 != null;
                havoc $unchanged#x0_1_0;
                assert {:id "id120"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
                    $Box($unchanged#x0_1_0))
                   ==> $IsAlloc($unchanged#x0_1_0, Tclass._module.Object(), old($Heap));
            }

            assume true;
            assume {:id "id121"} (forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null
                   ==> 
                  $o == universe#0
                   ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               && (forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null
                   ==> 
                  Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o))
                   ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
            pop;
        }

        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(274,11)
        assume true;
        assume true;
        steps#0 := steps#0 - 1;
        // ----- loop termination check ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(253,3)
        assert {:id "id123"} 0 <= $decr$loop#00 || steps#0 - 0 == $decr$loop#00;
        assert {:id "id124"} steps#0 - 0 < $decr$loop#00;
        assume _module.Universe.globalInv#canCall($Heap, universe#0)
           && (_module.Universe.globalInv($Heap, universe#0)
             ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                universe#0, 
                Set#FromBoogieMap((lambda $y#38: Box :: 
                    $IsBox($y#38, Tclass._module.Thread())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#38)
                       && $Unbox($y#38): ref != preempting#0)))
               && (_module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  universe#0, 
                  Set#FromBoogieMap((lambda $y#39: Box :: 
                      $IsBox($y#39, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#39)
                         && $Unbox($y#39): ref != preempting#0)))
                 ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0)));
    }
}



procedure {:verboseName "InterferenceWithFraming (well-formedness)"} CheckWellFormed$$_module.__default.InterferenceWithFraming(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    preempting#0: ref
       where $Is(preempting#0, Tclass._module.Thread())
         && $IsAlloc(preempting#0, Tclass._module.Thread(), $Heap));
  free requires 23 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "InterferenceWithFraming (well-formedness)"} CheckWellFormed$$_module.__default.InterferenceWithFraming(universe#0: ref, preempting#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;
  var t#0: ref;
  var a#0: ref;
  var b#0: ref;
  var ##a#0: ref;
  var ##b#0: ref;
  var ##a#1: ref;
  var ##b#1: ref;


    // AddMethodImpl: InterferenceWithFraming, CheckWellFormed$$_module.__default.InterferenceWithFraming
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    assert {:id "id125"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id126"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id127"} universe#0 != null;
    assume {:id "id128"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      $Box(preempting#0));
    assert {:id "id129"} universe#0 != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    assert {:id "id130"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id131"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id132"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id133"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id134"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, universe#0);
    assert {:id "id135"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    // Begin Comprehension WF check
    havoc t#0;
    if ($Is(t#0, Tclass._module.Thread())
       && $IsAlloc(t#0, Tclass._module.Thread(), $Heap))
    {
        assert {:id "id136"} universe#0 != null;
        assert {:id "id137"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(t#0)))
        {
        }

        if (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(t#0))
           && t#0 != preempting#0)
        {
        }
    }

    // End Comprehension WF check
    ##running#0 := Set#FromBoogieMap((lambda $y#1: Box :: 
        $IsBox($y#1, Tclass._module.Thread())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#1)
           && $Unbox($y#1): ref != preempting#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id138"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id139"} $IsAlloc(Set#FromBoogieMap((lambda $y#2: Box :: 
          $IsBox($y#2, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#2)
             && $Unbox($y#2): ref != preempting#0)), 
      TSet(Tclass._module.Thread()), 
      old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#3: Box :: 
          $IsBox($y#3, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#3)
             && $Unbox($y#3): ref != preempting#0)));
    assume {:id "id140"} _module.Universe.legalTransitionsSequence(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#4: Box :: 
          $IsBox($y#4, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#4)
             && $Unbox($y#4): ref != preempting#0)));
    havoc a#0;
    havoc b#0;
    assume $Is(a#0, Tclass._module.Lifetime())
       && $IsAlloc(a#0, Tclass._module.Lifetime(), $Heap)
       && 
      $Is(b#0, Tclass._module.Lifetime())
       && $IsAlloc(b#0, Tclass._module.Lifetime(), $Heap);
    if (*)
    {
        assert {:id "id141"} universe#0 != null;
        assert {:id "id142"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
        assume {:id "id143"} Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#0));
        assert {:id "id144"} universe#0 != null;
        assert {:id "id145"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
        assume {:id "id146"} Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#0));
        if (*)
        {
            assert {:id "id147"} universe#0 != null;
            ##a#0 := a#0;
            ##b#0 := b#0;
            assert {:id "id148"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
            assert {:id "id149"} $IsAlloc(a#0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id150"} $IsAlloc(b#0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id151"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(##a#0));
            assert {:id "id152"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(##b#0));
            assume Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(##a#0))
               && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(##b#0));
            assume _module.Universe.outlives#canCall(old($Heap), universe#0, a#0, b#0);
            assume {:id "id153"} _module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#0, b#0);
            assert {:id "id154"} universe#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
            ##a#1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#1, Tclass._module.Lifetime(), $Heap);
            ##b#1 := b#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#1, Tclass._module.Lifetime(), $Heap);
            assert {:id "id155"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#1));
            assert {:id "id156"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#1));
            assume Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#1))
               && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#1));
            assume _module.Universe.outlives#canCall($Heap, universe#0, a#0, b#0);
            assume {:id "id157"} _module.Universe.outlives($LS($LZ), $Heap, universe#0, a#0, b#0);
        }
        else
        {
            assume {:id "id158"} _module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#0, b#0)
               ==> _module.Universe.outlives($LS($LZ), $Heap, universe#0, a#0, b#0);
        }
    }
    else
    {
        assume {:id "id159"} Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#0))
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#0))
           ==> 
          _module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#0, b#0)
           ==> _module.Universe.outlives($LS($LZ), $Heap, universe#0, a#0, b#0);
    }

    assume {:id "id160"} (forall a#1: ref, b#1: ref :: 
      { _module.Universe.outlives($LS($LZ), $Heap, universe#0, a#1, b#1) } 
        { _module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#1, b#1) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1)) } 
      $Is(a#1, Tclass._module.Lifetime())
           && $Is(b#1, Tclass._module.Lifetime())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1))
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1))
         ==> 
        _module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#1, b#1)
         ==> _module.Universe.outlives($LS($LZ), $Heap, universe#0, a#1, b#1));
}



procedure {:verboseName "InterferenceWithFraming (call)"} Call$$_module.__default.InterferenceWithFraming(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    preempting#0: ref
       where $Is(preempting#0, Tclass._module.Thread())
         && $IsAlloc(preempting#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id161"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id162"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id163"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id164"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    $Box(preempting#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0);
  free ensures {:id "id165"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#3: ref :: 
      { _module.Object.inv($Heap, o#3) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3))
         ==> _module.Object.inv($Heap, o#3));
  free ensures _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0);
  free ensures {:id "id166"} _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalSequenceInv2(old($Heap), $Heap, universe#0)
     && (forall o#4: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#4) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#4)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#4)) } 
      $Is(o#4, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#4))
         ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#4))
           && _module.Object.sequenceInv2(old($Heap), $Heap, o#4));
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
    $Heap, 
    universe#0, 
    Set#FromBoogieMap((lambda $y#5: Box :: 
        $IsBox($y#5, Tclass._module.Thread())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#5)
           && $Unbox($y#5): ref != preempting#0)));
  free ensures {:id "id167"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#6: Box :: 
          $IsBox($y#6, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#6)
             && $Unbox($y#6): ref != preempting#0)))
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#7: Box :: 
          $IsBox($y#7, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#7)
             && $Unbox($y#7): ref != preempting#0)))
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
     && Set#Subset(Set#FromBoogieMap((lambda $y#11: Box :: 
          $IsBox($y#11, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#11)
             && $Unbox($y#11): ref != preempting#0)), 
      $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set)
     && (forall o#8: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
         ==> (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#8 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           || _module.Object.sequenceInv2(old($Heap), $Heap, o#8))
     && (forall o#9: ref :: 
      { $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#9, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#9)) } 
      $Is(o#9, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#9))
           && $Is($Unbox(read(old($Heap), o#9, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(Set#FromBoogieMap((lambda $y#12: Box :: 
                $IsBox($y#12, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#12)
                   && $Unbox($y#12): ref != preempting#0)), 
            read(old($Heap), o#9, _module.OwnedObject.owner))
           && $IsAllocBox(read(old($Heap), o#9, _module.OwnedObject.owner), 
            Tclass._module.Object?(), 
            old($Heap))
         ==> $Unbox(read(old($Heap), o#9, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall l#0: ref :: 
      { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
        { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#0)) } 
      $Is(l#0, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#0))
         ==> 
        !Set#IsMember(Set#FromBoogieMap((lambda $y#13: Box :: 
                $IsBox($y#13, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#13)
                   && $Unbox($y#13): ref != preempting#0)), 
            read(old($Heap), l#0, _module.Lifetime.owner))
           && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
            Tclass._module.Thread?(), 
            old($Heap))
         ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0));
  free ensures (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LZ), $Heap, universe#0, a#1, b#1) } 
      { _module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#1, b#1) } 
      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1)) } 
    $Is(a#1, Tclass._module.Lifetime()) && $Is(b#1, Tclass._module.Lifetime())
       ==> 
      Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1))
       ==> _module.Universe.outlives#canCall(old($Heap), universe#0, a#1, b#1)
         && (_module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#1, b#1)
           ==> _module.Universe.outlives#canCall($Heap, universe#0, a#1, b#1)));
  free ensures {:id "id168"} (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LZ), $Heap, universe#0, a#1, b#1) } 
      { _module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#1, b#1) } 
      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1)) } 
    $Is(a#1, Tclass._module.Lifetime())
         && $Is(b#1, Tclass._module.Lifetime())
         && 
        Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1))
       ==> 
      _module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#1, b#1)
       ==> _module.Universe.outlives($LS($LZ), $Heap, universe#0, a#1, b#1));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "InterferenceWithFraming (correctness)"} Impl$$_module.__default.InterferenceWithFraming(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    preempting#0: ref
       where $Is(preempting#0, Tclass._module.Thread())
         && $IsAlloc(preempting#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 23 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id169"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#11: ref :: 
      { _module.Object.inv($Heap, o#11) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#11))
         ==> _module.Object.inv($Heap, o#11));
  requires {:id "id170"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    $Box(preempting#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0);
  ensures {:id "id171"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  ensures {:id "id172"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#12: ref :: 
            { _module.Object.triggerAxioms($Heap, o#12) } 
              { _module.Object.baseFieldsInv($Heap, o#12) } 
              { _module.Object.universe(o#12) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
               ==> _module.Object.universe(o#12) == universe#0
                 && o#12 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#12)
                 && _module.Object.triggerAxioms($Heap, o#12)));
  ensures {:id "id173"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#13: ref :: 
        { _module.Object.inv($Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13))
           ==> _module.Object.inv($Heap, o#13));
  free ensures _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0);
  ensures {:id "id174"} _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, universe#0)
       || (forall o#14: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#14) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
        $Is(o#14, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#14))
           ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
             && _module.Object.sequenceInv2(old($Heap), $Heap, o#14));
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
    $Heap, 
    universe#0, 
    Set#FromBoogieMap((lambda $y#14: Box :: 
        $IsBox($y#14, Tclass._module.Thread())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#14)
           && $Unbox($y#14): ref != preempting#0)));
  ensures {:id "id175"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id176"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#15: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#15) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#15) } 
                  { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15))
                   ==> _module.Object.universe(o#15) == universe#0
                     && o#15 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#15)
                     && _module.Object.triggerAxioms(old($Heap), o#15))));
  ensures {:id "id177"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true)));
  ensures {:id "id178"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0)
               || (forall o#16: ref :: 
                { _module.Object.triggerAxioms($Heap, o#16) } 
                  { _module.Object.baseFieldsInv($Heap, o#16) } 
                  { _module.Object.universe(o#16) } 
                  { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
                $Is(o#16, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16))
                   ==> _module.Object.universe(o#16) == universe#0
                     && o#16 != universe#0
                     && _module.Object.baseFieldsInv($Heap, o#16)
                     && _module.Object.triggerAxioms($Heap, o#16))));
  ensures {:id "id179"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
            $Unbox(read($Heap, universe#0, _module.Universe.content)): Set));
  ensures {:id "id180"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (forall o#17: ref :: 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#17))
               ==> !$IsAllocBox($Box(o#17), Tclass._module.Object(), old($Heap))));
  ensures {:id "id181"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || Set#Subset(Set#FromBoogieMap((lambda $y#17: Box :: 
            $IsBox($y#17, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#17)
               && $Unbox($y#17): ref != preempting#0)), 
        $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set);
  ensures {:id "id182"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (forall o#18: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#18) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
        $Is(o#18, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#18))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
           ==> (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#18 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.sequenceInv2(old($Heap), $Heap, o#18));
  ensures {:id "id183"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (forall o#19: ref :: 
        { $Unbox(read($Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#19, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#19, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
        $Is(o#19, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19))
             && $Is($Unbox(read(old($Heap), o#19, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(Set#FromBoogieMap((lambda $y#18: Box :: 
                  $IsBox($y#18, Tclass._module.Thread())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#18)
                     && $Unbox($y#18): ref != preempting#0)), 
              read(old($Heap), o#19, _module.OwnedObject.owner))
             && $IsAllocBox(read(old($Heap), o#19, _module.OwnedObject.owner), 
              Tclass._module.Object?(), 
              old($Heap))
           ==> $Unbox(read(old($Heap), o#19, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id184"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      universe#0, 
      Set#FromBoogieMap((lambda $y#15: Box :: 
          $IsBox($y#15, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#15)
             && $Unbox($y#15): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        universe#0, 
        Set#FromBoogieMap((lambda $y#16: Box :: 
            $IsBox($y#16, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#16)
               && $Unbox($y#16): ref != preempting#0)))
       || (forall l#1: ref :: 
        { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1) } 
          { $Unbox(read(old($Heap), l#1, _module.Lifetime.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1)) } 
        $Is(l#1, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1))
           ==> 
          !Set#IsMember(Set#FromBoogieMap((lambda $y#19: Box :: 
                  $IsBox($y#19, Tclass._module.Thread())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#19)
                     && $Unbox($y#19): ref != preempting#0)), 
              read(old($Heap), l#1, _module.Lifetime.owner))
             && $IsAllocBox(read(old($Heap), l#1, _module.Lifetime.owner), 
              Tclass._module.Thread?(), 
              old($Heap))
           ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1));
  free ensures (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LZ), $Heap, universe#0, a#1, b#1) } 
      { _module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#1, b#1) } 
      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1)) } 
    $Is(a#1, Tclass._module.Lifetime()) && $Is(b#1, Tclass._module.Lifetime())
       ==> 
      Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1))
       ==> _module.Universe.outlives#canCall(old($Heap), universe#0, a#1, b#1)
         && (_module.Universe.outlives($LS($LZ), old($Heap), universe#0, a#1, b#1)
           ==> _module.Universe.outlives#canCall($Heap, universe#0, a#1, b#1)));
  ensures {:id "id185"} (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LS($LZ)), $Heap, universe#0, a#1, b#1) } 
      { _module.Universe.outlives($LS($LS($LZ)), old($Heap), universe#0, a#1, b#1) } 
      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1)) } 
    $Is(a#1, Tclass._module.Lifetime())
         && $Is(b#1, Tclass._module.Lifetime())
         && 
        Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(b#1))
       ==> 
      _module.Universe.outlives($LS($LS($LZ)), old($Heap), universe#0, a#1, b#1)
       ==> _module.Universe.outlives($LS($LS($LZ)), $Heap, universe#0, a#1, b#1));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "InterferenceWithFraming (correctness)"} Impl$$_module.__default.InterferenceWithFraming(universe#0: ref, preempting#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var universe##0: ref;
  var preempting##0: ref;
  var running##0: Set;
  var t#2: ref;

    // AddMethodImpl: InterferenceWithFraming, Impl$$_module.__default.InterferenceWithFraming
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(286,15)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := universe#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##0 := preempting#0;
    assert {:id "id186"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##0
             || Set#IsMember($Unbox(read($Heap, universe##0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id187"} Call$$_module.__default.Interference(universe##0, preempting##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(287,25)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id188"} universe#0 != null;
    assert {:id "id189"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    call {:id "id190"} Call$$_module.Universe.FrameOutlives(old($Heap), $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(288,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id191"} universe#0 != null;
    // Begin Comprehension WF check
    havoc t#2;
    if ($Is(t#2, Tclass._module.Thread())
       && $IsAlloc(t#2, Tclass._module.Thread(), $Heap))
    {
        assert {:id "id192"} universe#0 != null;
        assert {:id "id193"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(t#2)))
        {
        }
    }

    // End Comprehension WF check
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := Set#FromBoogieMap((lambda $y#23: Box :: 
        $IsBox($y#23, Tclass._module.Thread())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#23)));
    assert {:id "id194"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id195"} $IsAlloc(Set#FromBoogieMap((lambda $y#24: Box :: 
          $IsBox($y#24, Tclass._module.Thread())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $y#24))), 
      TSet(Tclass._module.Thread()), 
      old($Heap));
    call {:id "id196"} Call$$_module.Universe.sequenceLci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// function declaration for _module._default.Bump
function _module.__default.Bump(last#0: int) : int
uses {
// consequence axiom for _module.__default.Bump
axiom 0 <= $FunctionContextHeight
   ==> (forall last#0: int :: 
    { _module.__default.Bump(last#0) } 
    _module.__default.Bump#canCall(last#0) || 0 < $FunctionContextHeight
       ==> _module.__default.Bump(last#0) > last#0);
}

function _module.__default.Bump#canCall(last#0: int) : bool;

function _module.__default.Bump#requires(int) : bool;

// #requires axiom for _module.__default.Bump
axiom (forall last#0: int :: 
  { _module.__default.Bump#requires(last#0) } 
  _module.__default.Bump#requires(last#0) == true);

procedure {:verboseName "Bump (well-formedness)"} CheckWellformed$$_module.__default.Bump(last#0: int);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id197"} _module.__default.Bump(last#0) > last#0;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Bump (well-formedness)"} CheckWellformed$$_module.__default.Bump(last#0: int)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##last#0: int;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        ##last#0 := last#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##last#0, TInt, $Heap);
        assert {:id "id198"} 0 <= last#0 || ##last#0 == last#0;
        assert {:id "id199"} last#0 == last#0 || ##last#0 < last#0;
        assume last#0 == last#0 || _module.__default.Bump#canCall(last#0);
        assume {:id "id200"} _module.__default.Bump(last#0) > last#0;
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



const unique class._module.Universe?: ClassName;

// $Is axiom for trait Universe
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Universe?()) } 
  $Is($o, Tclass._module.Universe?())
     <==> $o == null || implements$_module.Universe(dtype($o)));

// $IsAlloc axiom for trait Universe
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Universe?(), $h) } 
  $IsAlloc($o, Tclass._module.Universe?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.Universe(ty: Ty) : bool;

const _module.Universe.content: Field
uses {
axiom FDim(_module.Universe.content) == 0
   && FieldOfDecl(class._module.Universe?, field$content) == _module.Universe.content
   && $IsGhostField(_module.Universe.content);
}

// Universe.content: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Universe.content)): Set } 
  $IsGoodHeap($h) && $o != null && $Is($o, Tclass._module.Universe?())
     ==> $Is($Unbox(read($h, $o, _module.Universe.content)): Set, 
      TSet(Tclass._module.Object())));

// Universe.content: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Universe.content)): Set } 
  $IsGoodHeap($h)
       && 
      $o != null
       && $Is($o, Tclass._module.Universe?())
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Universe.content)): Set, 
      TSet(Tclass._module.Object()), 
      $h));

// function declaration for _module.Universe.globalBaseInv
function _module.Universe.globalBaseInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalBaseInv (revealed)
axiom {:id "id201"} 7 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Universe.globalBaseInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalBaseInv#canCall($Heap, this)
         || (7 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap))
       ==> (Lit(true)
           ==> (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> 
              _module.Object.universe(o#0) == this
               ==> 
              o#0 != this
               ==> _module.Object.baseFieldsInv#canCall($Heap, o#0)
                 && (_module.Object.baseFieldsInv($Heap, o#0)
                   ==> _module.Object.triggerAxioms#canCall($Heap, o#0))))
         && _module.Universe.globalBaseInv($Heap, this)
           == (true
             && (forall o#0: ref :: 
              { _module.Object.triggerAxioms($Heap, o#0) } 
                { _module.Object.baseFieldsInv($Heap, o#0) } 
                { _module.Object.universe(o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> _module.Object.universe(o#0) == this
                   && o#0 != this
                   && _module.Object.baseFieldsInv($Heap, o#0)
                   && _module.Object.triggerAxioms($Heap, o#0))));
}

function _module.Universe.globalBaseInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalBaseInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalBaseInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Universe())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null
           && ($o == this
             || Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o)))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalBaseInv($h0, this)
       == _module.Universe.globalBaseInv($h1, this));

function _module.Universe.globalBaseInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Universe.globalBaseInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Universe.globalBaseInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
     ==> _module.Universe.globalBaseInv#requires($Heap, this) == true);

procedure {:verboseName "Universe.globalBaseInv (well-formedness)"} CheckWellformed$$_module.Universe.globalBaseInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalBaseInv (well-formedness)"} CheckWellformed$$_module.Universe.globalBaseInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var o#1: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
    assert {:id "id202"} b$reqreads#0;
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // Begin Comprehension WF check
            havoc o#1;
            if ($Is(o#1, Tclass._module.Object())
               && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
            {
                b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    assert {:id "id203"} o#1 != null;
                    if (_module.Object.universe(o#1) == this)
                    {
                        newtype$check#0 := o#1;
                        newtype$check#1 := o#1;
                    }

                    if (_module.Object.universe(o#1) == this && o#1 != this)
                    {
                        assert {:id "id204"} o#1 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                        b$reqreads#2 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && ($o == o#1 || $o == _module.Object.universe(o#1))
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.baseFieldsInv#canCall($Heap, o#1);
                    }

                    if (_module.Object.universe(o#1) == this
                       && o#1 != this
                       && _module.Object.baseFieldsInv($Heap, o#1))
                    {
                        assert {:id "id205"} o#1 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                        b$reqreads#3 := (forall $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == o#1
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.triggerAxioms#canCall($Heap, o#1);
                    }
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id206"} _module.Universe.globalBaseInv($Heap, this)
           == (true
             && (forall o#2: ref :: 
              { _module.Object.triggerAxioms($Heap, o#2) } 
                { _module.Object.baseFieldsInv($Heap, o#2) } 
                { _module.Object.universe(o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> _module.Object.universe(o#2) == this
                   && o#2 != this
                   && _module.Object.baseFieldsInv($Heap, o#2)
                   && _module.Object.triggerAxioms($Heap, o#2)));
        assume Lit(true)
           ==> (forall o#2: ref :: 
            { _module.Object.triggerAxioms($Heap, o#2) } 
              { _module.Object.baseFieldsInv($Heap, o#2) } 
              { _module.Object.universe(o#2) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
               ==> 
              _module.Object.universe(o#2) == this
               ==> 
              o#2 != this
               ==> _module.Object.baseFieldsInv#canCall($Heap, o#2)
                 && (_module.Object.baseFieldsInv($Heap, o#2)
                   ==> _module.Object.triggerAxioms#canCall($Heap, o#2)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalBaseInv($Heap, this), TBool);
        assert {:id "id207"} b$reqreads#1;
        assert {:id "id208"} b$reqreads#2;
        assert {:id "id209"} b$reqreads#3;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.globalInv
function _module.Universe.globalInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalInv (revealed)
axiom {:id "id210"} 16 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Universe.globalInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalInv#canCall($Heap, this)
         || (16 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap))
       ==> _module.Universe.globalBaseInv#canCall($Heap, this)
         && (_module.Universe.globalBaseInv($Heap, this)
           ==> (forall o#0: ref :: 
            { _module.Object.inv($Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.inv#canCall($Heap, o#0)))
         && _module.Universe.globalInv($Heap, this)
           == (_module.Universe.globalBaseInv($Heap, this)
             && (forall o#0: ref :: 
              { _module.Object.inv($Heap, o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> _module.Object.inv($Heap, o#0))));
}

function _module.Universe.globalInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalInv($h0, this) == _module.Universe.globalInv($h1, this));

function _module.Universe.globalInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Universe.globalInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Universe.globalInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
     ==> _module.Universe.globalInv#requires($Heap, this) == true);

procedure {:verboseName "Universe.globalInv (well-formedness)"} CheckWellformed$$_module.Universe.globalInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 16 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalInv (well-formedness)"} CheckWellformed$$_module.Universe.globalInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && ($o == this
                 || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Universe.globalBaseInv#canCall($Heap, this);
        if (_module.Universe.globalBaseInv($Heap, this))
        {
            // Begin Comprehension WF check
            havoc o#1;
            if ($Is(o#1, Tclass._module.Object())
               && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
            {
                b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    assert {:id "id211"} o#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                    b$reqreads#2 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.inv#canCall($Heap, o#1);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id212"} _module.Universe.globalInv($Heap, this)
           == (_module.Universe.globalBaseInv($Heap, this)
             && (forall o#2: ref :: 
              { _module.Object.inv($Heap, o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> _module.Object.inv($Heap, o#2)));
        assume _module.Universe.globalBaseInv#canCall($Heap, this)
           && (_module.Universe.globalBaseInv($Heap, this)
             ==> (forall o#2: ref :: 
              { _module.Object.inv($Heap, o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                 ==> 
                Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> _module.Object.inv#canCall($Heap, o#2)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalInv($Heap, this), TBool);
        assert {:id "id213"} b$reqreads#0;
        assert {:id "id214"} b$reqreads#1;
        assert {:id "id215"} b$reqreads#2;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.globalSequenceInv2
function _module.Universe.globalSequenceInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalSequenceInv2 (revealed)
axiom {:id "id216"} 5 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Universe.globalSequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalSequenceInv2#canCall($prevHeap, $Heap, this)
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap))
       ==> (forall o#0: ref :: 
          { _module.Object.sequenceInv2($prevHeap, $Heap, o#0) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
          $Is(o#0, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
             ==> 
            Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
             ==> _module.Object.sequenceInv2#canCall($prevHeap, $Heap, o#0))
         && _module.Universe.globalSequenceInv2($prevHeap, $Heap, this)
           == (forall o#0: ref :: 
            { _module.Object.sequenceInv2($prevHeap, $Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 && _module.Object.sequenceInv2($prevHeap, $Heap, o#0)));
}

function _module.Universe.globalSequenceInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalSequenceInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalSequenceInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalSequenceInv2($prevHeap, $h0, this)
       == _module.Universe.globalSequenceInv2($prevHeap, $h1, this));

function _module.Universe.globalSequenceInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Universe.globalSequenceInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Universe.globalSequenceInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
     ==> _module.Universe.globalSequenceInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Universe.globalSequenceInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalSequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 5 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalSequenceInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalSequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc o#1;
        if ($Is(o#1, Tclass._module.Object())
           && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
        {
            assert {:id "id217"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1)))
            {
                b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    assert {:id "id218"} o#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                    assert {:id "id219"} $IsAlloc(o#1, Tclass._module.Object(), old($Heap));
                    b$reqreads#1 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#1);
                }
            }
        }

        // End Comprehension WF check
        assume {:id "id220"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, this)
           == (forall o#2: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 && _module.Object.sequenceInv2(old($Heap), $Heap, o#2));
        assume (forall o#2: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#2) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
          $Is(o#2, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
             ==> 
            Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
             ==> _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#2));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalSequenceInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id221"} b$reqreads#0;
        assert {:id "id222"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.globalInv2
function _module.Universe.globalInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalInv2 (revealed)
axiom {:id "id223"} 16 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Universe.globalInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalInv2#canCall($prevHeap, $Heap, this)
         || (16 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap))
       ==> (forall o#0: ref :: 
          { _module.Object.inv2($prevHeap, $Heap, o#0) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
          $Is(o#0, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
             ==> 
            Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
             ==> _module.Object.inv2#canCall($prevHeap, $Heap, o#0))
         && _module.Universe.globalInv2($prevHeap, $Heap, this)
           == (forall o#0: ref :: 
            { _module.Object.inv2($prevHeap, $Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 && _module.Object.inv2($prevHeap, $Heap, o#0)));
}

function _module.Universe.globalInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalInv2($prevHeap, $h0, this)
       == _module.Universe.globalInv2($prevHeap, $h1, this));

function _module.Universe.globalInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Universe.globalInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Universe.globalInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
     ==> _module.Universe.globalInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Universe.globalInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc o#1;
        if ($Is(o#1, Tclass._module.Object())
           && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
        {
            assert {:id "id224"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1)))
            {
                b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    assert {:id "id225"} o#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                    assert {:id "id226"} $IsAlloc(o#1, Tclass._module.Object(), old($Heap));
                    b$reqreads#1 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.inv2#canCall(old($Heap), $Heap, o#1);
                }
            }
        }

        // End Comprehension WF check
        assume {:id "id227"} _module.Universe.globalInv2(old($Heap), $Heap, this)
           == (forall o#2: ref :: 
            { _module.Object.inv2(old($Heap), $Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 && _module.Object.inv2(old($Heap), $Heap, o#2));
        assume (forall o#2: ref :: 
          { _module.Object.inv2(old($Heap), $Heap, o#2) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
          $Is(o#2, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
             ==> 
            Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
             ==> _module.Object.inv2#canCall(old($Heap), $Heap, o#2));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id228"} b$reqreads#0;
        assert {:id "id229"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.baseLegalTransitionsSequence
function _module.Universe.baseLegalTransitionsSequence($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.baseLegalTransitionsSequence (revealed)
axiom {:id "id230"} 8 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Universe.baseLegalTransitionsSequence($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.baseLegalTransitionsSequence#canCall($prevHeap, $Heap, this)
         || (8 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap))
       ==> _module.Universe.globalBaseInv#canCall($prevHeap, this)
         && (_module.Universe.globalBaseInv($prevHeap, this)
           ==> _module.Universe.globalBaseInv#canCall($Heap, this))
         && _module.Universe.baseLegalTransitionsSequence($prevHeap, $Heap, this)
           == (
            _module.Universe.globalBaseInv($prevHeap, this)
             && _module.Universe.globalBaseInv($Heap, this)
             && Set#Subset($Unbox(read($prevHeap, this, _module.Universe.content)): Set, 
              $Unbox(read($Heap, this, _module.Universe.content)): Set)
             && (forall o#0: ref :: 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && 
                  !Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> !$IsAllocBox($Box(o#0), Tclass._module.Object(), $prevHeap))));
}

function _module.Universe.baseLegalTransitionsSequence#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.baseLegalTransitionsSequence
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.baseLegalTransitionsSequence($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.baseLegalTransitionsSequence($prevHeap, $h0, this)
       == _module.Universe.baseLegalTransitionsSequence($prevHeap, $h1, this));

function _module.Universe.baseLegalTransitionsSequence#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Universe.baseLegalTransitionsSequence
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Universe.baseLegalTransitionsSequence#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
     ==> _module.Universe.baseLegalTransitionsSequence#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "Universe.baseLegalTransitionsSequence (well-formedness)"} CheckWellformed$$_module.Universe.baseLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 8 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.baseLegalTransitionsSequence (well-formedness)"} CheckWellformed$$_module.Universe.baseLegalTransitionsSequence(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id231"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume _module.Universe.globalBaseInv#canCall(old($Heap), this);
        if (_module.Universe.globalBaseInv(old($Heap), this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == this
                     || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalBaseInv#canCall($Heap, this);
        }

        if (_module.Universe.globalBaseInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this))
        {
            assert {:id "id232"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
        }

        if (_module.Universe.globalBaseInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set))
        {
            // Begin Comprehension WF check
            havoc o#1;
            if ($Is(o#1, Tclass._module.Object())
               && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
            {
                assert {:id "id233"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (!Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    b$reqreads#2 := $_ReadsFrame[this, _module.Universe.content];
                }

                if (!Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id234"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           == (
            _module.Universe.globalBaseInv(old($Heap), this)
             && _module.Universe.globalBaseInv($Heap, this)
             && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
              $Unbox(read($Heap, this, _module.Universe.content)): Set)
             && (forall o#2: ref :: 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && 
                  !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))));
        assume _module.Universe.globalBaseInv#canCall(old($Heap), this)
           && (_module.Universe.globalBaseInv(old($Heap), this)
             ==> _module.Universe.globalBaseInv#canCall($Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this), TBool);
        assert {:id "id235"} b$reqreads#0;
        assert {:id "id236"} b$reqreads#1;
        assert {:id "id237"} b$reqreads#2;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.legalTransitionsSequence
function _module.Universe.legalTransitionsSequence($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool
uses {
// definition axiom for _module.Universe.legalTransitionsSequence (revealed)
axiom {:id "id238"} 9 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
    { _module.Universe.legalTransitionsSequence($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Universe.legalTransitionsSequence#canCall($prevHeap, $Heap, this, running#0)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
           && $Is(running#0, TSet(Tclass._module.Thread())))
       ==> _module.Universe.baseLegalTransitionsSequence#canCall($prevHeap, $Heap, this)
         && (_module.Universe.baseLegalTransitionsSequence($prevHeap, $Heap, this)
           ==> 
          Set#Subset(running#0, $Unbox(read($prevHeap, this, _module.Universe.content)): Set)
           ==> (forall o#0: ref :: 
              { _module.Object.sequenceInv2($prevHeap, $Heap, o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                 ==> 
                Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> 
                !(forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                 ==> _module.Object.sequenceInv2#canCall($prevHeap, $Heap, o#0))
             && ((forall o#0: ref :: 
                { _module.Object.sequenceInv2($prevHeap, $Heap, o#0) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                  { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                     && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                   ==> (forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                     || _module.Object.sequenceInv2($prevHeap, $Heap, o#0))
               ==> 
              (forall o#1: ref :: 
                { $Unbox(read($Heap, o#1, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read($prevHeap, o#1, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read($prevHeap, o#1, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                $Is(o#1, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1))
                     && $Is($Unbox(read($prevHeap, o#1, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(running#0, read($prevHeap, o#1, _module.OwnedObject.owner))
                     && $IsAllocBox(read($prevHeap, o#1, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      $prevHeap)
                   ==> $Unbox(read($prevHeap, o#1, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, o#1, _module.OwnedObject.nonvolatileVersion)): int)
               ==> (forall l#0: ref :: 
                { _module.Lifetime.unchangedNonvolatileFields($prevHeap, $Heap, l#0) } 
                  { $Unbox(read($prevHeap, l#0, _module.Lifetime.owner)): ref } 
                  { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(l#0)) } 
                $Is(l#0, Tclass._module.Lifetime())
                   ==> 
                  Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(l#0))
                   ==> 
                  !Set#IsMember(running#0, read($prevHeap, l#0, _module.Lifetime.owner))
                   ==> 
                  $IsAllocBox(read($prevHeap, l#0, _module.Lifetime.owner), 
                    Tclass._module.Thread?(), 
                    $prevHeap)
                   ==> _module.Lifetime.unchangedNonvolatileFields#canCall($prevHeap, $Heap, l#0))))
         && _module.Universe.legalTransitionsSequence($prevHeap, $Heap, this, running#0)
           == (
            _module.Universe.baseLegalTransitionsSequence($prevHeap, $Heap, this)
             && Set#Subset(running#0, $Unbox(read($prevHeap, this, _module.Universe.content)): Set)
             && (forall o#0: ref :: 
              { _module.Object.sequenceInv2($prevHeap, $Heap, o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                   || _module.Object.sequenceInv2($prevHeap, $Heap, o#0))
             && (forall o#1: ref :: 
              { $Unbox(read($Heap, o#1, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read($prevHeap, o#1, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read($prevHeap, o#1, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1)) } 
              $Is(o#1, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1))
                   && $Is($Unbox(read($prevHeap, o#1, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read($prevHeap, o#1, _module.OwnedObject.owner))
                   && $IsAllocBox(read($prevHeap, o#1, _module.OwnedObject.owner), 
                    Tclass._module.Object?(), 
                    $prevHeap)
                 ==> $Unbox(read($prevHeap, o#1, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#1, _module.OwnedObject.nonvolatileVersion)): int)
             && (forall l#0: ref :: 
              { _module.Lifetime.unchangedNonvolatileFields($prevHeap, $Heap, l#0) } 
                { $Unbox(read($prevHeap, l#0, _module.Lifetime.owner)): ref } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(l#0)) } 
              $Is(l#0, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(l#0))
                 ==> 
                !Set#IsMember(running#0, read($prevHeap, l#0, _module.Lifetime.owner))
                   && $IsAllocBox(read($prevHeap, l#0, _module.Lifetime.owner), 
                    Tclass._module.Thread?(), 
                    $prevHeap)
                 ==> _module.Lifetime.unchangedNonvolatileFields($prevHeap, $Heap, l#0))));
}

function _module.Universe.legalTransitionsSequence#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool;

// frame axiom for _module.Universe.legalTransitionsSequence
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: Set :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.legalTransitionsSequence($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && (_module.Universe.legalTransitionsSequence#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, TSet(Tclass._module.Thread()))
           && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.legalTransitionsSequence($prevHeap, $h0, this, running#0)
       == _module.Universe.legalTransitionsSequence($prevHeap, $h1, this, running#0));

function _module.Universe.legalTransitionsSequence#requires(Heap, Heap, ref, Set) : bool;

// #requires axiom for _module.Universe.legalTransitionsSequence
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
  { _module.Universe.legalTransitionsSequence#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
       && $Is(running#0, TSet(Tclass._module.Thread()))
     ==> _module.Universe.legalTransitionsSequence#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, TSet(Tclass._module.Thread()), $prevHeap));

procedure {:verboseName "Universe.legalTransitionsSequence (well-formedness)"} CheckWellformed$$_module.Universe.legalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 9 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



function Tclass._module.Lifetime?() : Ty
uses {
// Tclass._module.Lifetime? Tag
axiom Tag(Tclass._module.Lifetime?()) == Tagclass._module.Lifetime?
   && TagFamily(Tclass._module.Lifetime?()) == tytagFamily$Lifetime;
axiom implements$_module.Object(Tclass._module.Lifetime?());
}

const unique Tagclass._module.Lifetime?: TyTag;

// Box/unbox axiom for Tclass._module.Lifetime?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Lifetime?()) } 
  $IsBox(bx, Tclass._module.Lifetime?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Lifetime?()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.legalTransitionsSequence (well-formedness)"} CheckWellformed$$_module.Universe.legalTransitionsSequence(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#2: ref;
  var o#3: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var l#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        assert {:id "id239"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
        if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this))
        {
            assert {:id "id240"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        }

        if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           && Set#Subset(running#0, $Unbox(read(old($Heap), this, _module.Universe.content)): Set))
        {
            // Begin Comprehension WF check
            havoc o#2;
            if ($Is(o#2, Tclass._module.Object())
               && $IsAlloc(o#2, Tclass._module.Object(), $Heap))
            {
                assert {:id "id241"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)))
                {
                    b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
                }

                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)))
                {
                    assert {:id "id242"} $IsAlloc(o#2, Tclass._module.Object(), old($Heap));
                    b$reqreads#2 := (forall $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == o#2
                         ==> $_ReadsFrame[$o, $f]);
                    if (!(forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#2 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
                    {
                        assert {:id "id243"} o#2 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#2), Tclass._module.Object?(), $Heap);
                        assert {:id "id244"} $IsAlloc(o#2, Tclass._module.Object(), old($Heap));
                        b$reqreads#3 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && $Unbox(read($Heap, $o, alloc)): bool
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#2);
                    }
                }
            }

            // End Comprehension WF check
        }

        if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           && Set#Subset(running#0, $Unbox(read(old($Heap), this, _module.Universe.content)): Set)
           && (forall o#4: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#4) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
            $Is(o#4, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#4)))
        {
            // Begin Comprehension WF check
            havoc o#3;
            if ($Is(o#3, Tclass._module.OwnedObject())
               && $IsAlloc(o#3, Tclass._module.OwnedObject(), $Heap))
            {
                assert {:id "id245"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3)))
                {
                    assert {:id "id246"} o#3 != null;
                    assert {:id "id247"} $IsAlloc(o#3, Tclass._module.OwnedObject(), old($Heap));
                }

                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3))
                   && $Is($Unbox(read(old($Heap), o#3, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread()))
                {
                    assert {:id "id248"} o#3 != null;
                    assert {:id "id249"} $IsAlloc(o#3, Tclass._module.OwnedObject(), old($Heap));
                    newtype$check#0 := $Unbox(read(old($Heap), o#3, _module.OwnedObject.owner)): ref;
                    assert {:id "id250"} $Is(newtype$check#0, Tclass._module.Thread());
                    newtype$check#1 := $Unbox(read(old($Heap), o#3, _module.OwnedObject.owner)): ref;
                    if (!Set#IsMember(running#0, read(old($Heap), o#3, _module.OwnedObject.owner)))
                    {
                        assert {:id "id251"} o#3 != null;
                        assert {:id "id252"} $IsAlloc(o#3, Tclass._module.OwnedObject(), old($Heap));
                    }

                    if (!Set#IsMember(running#0, read(old($Heap), o#3, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#3, _module.OwnedObject.owner), 
                        Tclass._module.Object?(), 
                        old($Heap)))
                    {
                        assert {:id "id253"} o#3 != null;
                        assert {:id "id254"} $IsAlloc(o#3, Tclass._module.OwnedObject(), old($Heap));
                        assert {:id "id255"} o#3 != null;
                        b$reqreads#4 := $_ReadsFrame[o#3, _module.OwnedObject.nonvolatileVersion];
                    }
                }
            }

            // End Comprehension WF check
        }

        if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           && Set#Subset(running#0, $Unbox(read(old($Heap), this, _module.Universe.content)): Set)
           && (forall o#4: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#4) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
            $Is(o#4, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#4))
           && (forall o#5: ref :: 
            { $Unbox(read($Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#5, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#5, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
            $Is(o#5, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
                 && $Is($Unbox(read(old($Heap), o#5, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(old($Heap), o#5, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#5, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#5, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int))
        {
            // Begin Comprehension WF check
            havoc l#1;
            if ($Is(l#1, Tclass._module.Lifetime())
               && $IsAlloc(l#1, Tclass._module.Lifetime(), $Heap))
            {
                assert {:id "id256"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#1)))
                {
                    assert {:id "id257"} l#1 != null;
                    assert {:id "id258"} $IsAlloc(l#1, Tclass._module.Lifetime(), old($Heap));
                    if (!Set#IsMember(running#0, read(old($Heap), l#1, _module.Lifetime.owner)))
                    {
                        assert {:id "id259"} l#1 != null;
                        assert {:id "id260"} $IsAlloc(l#1, Tclass._module.Lifetime(), old($Heap));
                    }

                    if (!Set#IsMember(running#0, read(old($Heap), l#1, _module.Lifetime.owner))
                       && $IsAllocBox(read(old($Heap), l#1, _module.Lifetime.owner), 
                        Tclass._module.Thread?(), 
                        old($Heap)))
                    {
                        assert {:id "id261"} l#1 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(l#1), Tclass._module.Lifetime?(), $Heap);
                        assert {:id "id262"} $IsAlloc(l#1, Tclass._module.Lifetime(), old($Heap));
                        b$reqreads#5 := (forall $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == l#1
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Lifetime.unchangedNonvolatileFields#canCall(old($Heap), $Heap, l#1);
                    }
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id263"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
           == (
            _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
             && Set#Subset(running#0, $Unbox(read(old($Heap), this, _module.Universe.content)): Set)
             && (forall o#4: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#4) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
              $Is(o#4, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#4))
             && (forall o#5: ref :: 
              { $Unbox(read($Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#5, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#5, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
              $Is(o#5, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
                   && $Is($Unbox(read(old($Heap), o#5, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#5, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#5, _module.OwnedObject.owner), 
                    Tclass._module.Object?(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#5, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int)
             && (forall l#2: ref :: 
              { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#2) } 
                { $Unbox(read(old($Heap), l#2, _module.Lifetime.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#2)) } 
              $Is(l#2, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#2))
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), l#2, _module.Lifetime.owner))
                   && $IsAllocBox(read(old($Heap), l#2, _module.Lifetime.owner), 
                    Tclass._module.Thread?(), 
                    old($Heap))
                 ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#2)));
        assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
           && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
             ==> 
            Set#Subset(running#0, $Unbox(read(old($Heap), this, _module.Universe.content)): Set)
             ==> (forall o#4: ref :: 
                { _module.Object.sequenceInv2(old($Heap), $Heap, o#4) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
                  { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
                $Is(o#4, Tclass._module.Object())
                   ==> 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                     && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
                   ==> 
                  !(forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   ==> _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#4))
               && ((forall o#4: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#4) } 
                    { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
                    { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
                  $Is(o#4, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                       && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#4))
                 ==> 
                (forall o#5: ref :: 
                  { $Unbox(read($Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#5, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#5, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
                  $Is(o#5, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
                       && $Is($Unbox(read(old($Heap), o#5, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(running#0, read(old($Heap), o#5, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#5, _module.OwnedObject.owner), 
                        Tclass._module.Object?(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#5, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int)
                 ==> (forall l#2: ref :: 
                  { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#2) } 
                    { $Unbox(read(old($Heap), l#2, _module.Lifetime.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#2)) } 
                  $Is(l#2, Tclass._module.Lifetime())
                     ==> 
                    Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#2))
                     ==> 
                    !Set#IsMember(running#0, read(old($Heap), l#2, _module.Lifetime.owner))
                     ==> 
                    $IsAllocBox(read(old($Heap), l#2, _module.Lifetime.owner), 
                      Tclass._module.Thread?(), 
                      old($Heap))
                     ==> _module.Lifetime.unchangedNonvolatileFields#canCall(old($Heap), $Heap, l#2))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0), 
          TBool);
        assert {:id "id264"} b$reqreads#0;
        assert {:id "id265"} b$reqreads#1;
        assert {:id "id266"} b$reqreads#2;
        assert {:id "id267"} b$reqreads#3;
        assert {:id "id268"} b$reqreads#4;
        assert {:id "id269"} b$reqreads#5;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.legalTransitionsSequenceAnyThread
function _module.Universe.legalTransitionsSequenceAnyThread($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.legalTransitionsSequenceAnyThread (revealed)
axiom {:id "id270"} 10 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.legalTransitionsSequenceAnyThread#canCall($prevHeap, $Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap))
       ==> _module.Universe.legalTransitionsSequence#canCall($prevHeap, 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#1: Box :: 
              $IsBox($y#1, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $y#1))))
         && _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $Heap, this)
           == _module.Universe.legalTransitionsSequence($prevHeap, 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#0: Box :: 
                $IsBox($y#0, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $y#0)))));
}

function _module.Universe.legalTransitionsSequenceAnyThread#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.legalTransitionsSequenceAnyThread
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $h0, this)
       == _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $h1, this));

function _module.Universe.legalTransitionsSequenceAnyThread#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Universe.legalTransitionsSequenceAnyThread
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Universe.legalTransitionsSequenceAnyThread#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
     ==> _module.Universe.legalTransitionsSequenceAnyThread#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "Universe.legalTransitionsSequenceAnyThread (well-formedness)"} CheckWellformed$$_module.Universe.legalTransitionsSequenceAnyThread(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.legalTransitionsSequenceAnyThread (well-formedness)"} CheckWellformed$$_module.Universe.legalTransitionsSequenceAnyThread(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##running#0: Set;
  var t#1: ref;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        // Begin Comprehension WF check
        havoc t#1;
        if ($Is(t#1, Tclass._module.Thread())
           && $IsAlloc(t#1, Tclass._module.Thread(), $Heap))
        {
            assert {:id "id271"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#1)))
            {
            }
        }

        // End Comprehension WF check
        ##running#0 := Set#FromBoogieMap((lambda $y#3: Box :: 
            $IsBox($y#3, Tclass._module.Thread())
               && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#3)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
        assert {:id "id272"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assert {:id "id273"} $IsAlloc(Set#FromBoogieMap((lambda $y#4: Box :: 
              $IsBox($y#4, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#4))), 
          TSet(Tclass._module.Thread()), 
          old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#5: Box :: 
              $IsBox($y#5, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#5))));
        assume {:id "id274"} _module.Universe.legalTransitionsSequenceAnyThread(old($Heap), $Heap, this)
           == _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#7: Box :: 
                $IsBox($y#7, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#7))));
        assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#8: Box :: 
              $IsBox($y#8, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#8))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.legalTransitionsSequenceAnyThread(old($Heap), $Heap, this), 
          TBool);
        assert {:id "id275"} b$reqreads#0;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.legalTransition
function _module.Universe.legalTransition($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool
uses {
// definition axiom for _module.Universe.legalTransition (revealed)
axiom {:id "id276"} 17 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
    { _module.Universe.legalTransition($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Universe.legalTransition#canCall($prevHeap, $Heap, this, running#0)
         || (17 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
           && $Is(running#0, Tclass._module.Thread()))
       ==> _module.Universe.legalTransitionsSequence#canCall($prevHeap, $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         && (_module.Universe.legalTransitionsSequence($prevHeap, $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.globalInv#canCall($prevHeap, this)
             && (_module.Universe.globalInv($prevHeap, this)
               ==> (forall o#0: ref :: 
                  { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                    { _module.Object.inv($Heap, o#0) } 
                    { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                  $Is(o#0, Tclass._module.Object())
                     ==> 
                    Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                     ==> (!(forall $o: ref, $f: Field :: 
                          { read($Heap, $o, $f) } 
                          $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                         ==> _module.Object.inv#canCall($Heap, o#0))
                       && ((forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                           || _module.Object.inv($Heap, o#0)
                         ==> 
                        !(forall $o: ref, $f: Field :: 
                          { read($Heap, $o, $f) } 
                          $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                         ==> _module.Object.inv2#canCall($prevHeap, $Heap, o#0)))
                 && ((forall o#0: ref :: 
                    { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                      { _module.Object.inv($Heap, o#0) } 
                      { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                    $Is(o#0, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                       ==> ((forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                           || _module.Object.inv($Heap, o#0))
                         && ((forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                           || _module.Object.inv2($prevHeap, $Heap, o#0)))
                   ==> (forall o#1: ref :: 
                    { _module.Object.inv($Heap, o#1) } 
                      { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                      { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                    $Is(o#1, Tclass._module.Object())
                       ==> 
                      Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
                         && !Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1))
                       ==> _module.Object.inv#canCall($Heap, o#1)))))
         && _module.Universe.legalTransition($prevHeap, $Heap, this, running#0)
           == (
            _module.Universe.legalTransitionsSequence($prevHeap, $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             && _module.Universe.globalInv($prevHeap, this)
             && (forall o#0: ref :: 
              { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                { _module.Object.inv($Heap, o#0) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                     || _module.Object.inv($Heap, o#0))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                     || _module.Object.inv2($prevHeap, $Heap, o#0)))
             && (forall o#1: ref :: 
              { _module.Object.inv($Heap, o#1) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
              $Is(o#1, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
                   && !Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1))
                 ==> _module.Object.inv($Heap, o#1))));
}

function _module.Universe.legalTransition#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool;

// frame axiom for _module.Universe.legalTransition
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.legalTransition($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && (_module.Universe.legalTransition#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, Tclass._module.Thread())
           && $IsAlloc(running#0, Tclass._module.Thread(), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.legalTransition($prevHeap, $h0, this, running#0)
       == _module.Universe.legalTransition($prevHeap, $h1, this, running#0));

function _module.Universe.legalTransition#requires(Heap, Heap, ref, ref) : bool;

// #requires axiom for _module.Universe.legalTransition
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
  { _module.Universe.legalTransition#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
       && $Is(running#0, Tclass._module.Thread())
     ==> _module.Universe.legalTransition#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, Tclass._module.Thread(), $prevHeap));

procedure {:verboseName "Universe.legalTransition (well-formedness)"} CheckWellformed$$_module.Universe.legalTransition(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 17 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.legalTransition (well-formedness)"} CheckWellformed$$_module.Universe.legalTransition(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##running#0: Set;
  var o#2: ref;
  var o#3: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        ##running#0 := Set#UnionOne(Set#Empty(): Set, $Box(running#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
        assert {:id "id277"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assert {:id "id278"} $IsAlloc(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
          TSet(Tclass._module.Thread()), 
          old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
        if (_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0))))
        {
            assert {:id "id279"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assume _module.Universe.globalInv#canCall(old($Heap), this);
        }

        if (_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           && _module.Universe.globalInv(old($Heap), this))
        {
            // Begin Comprehension WF check
            havoc o#2;
            if ($Is(o#2, Tclass._module.Object())
               && $IsAlloc(o#2, Tclass._module.Object(), $Heap))
            {
                assert {:id "id280"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)))
                {
                    assert {:id "id281"} $IsAlloc(o#2, Tclass._module.Object(), old($Heap));
                    b$reqreads#1 := (forall $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == o#2
                         ==> $_ReadsFrame[$o, $f]);
                    if (!(forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#2 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
                    {
                        assert {:id "id282"} o#2 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#2), Tclass._module.Object?(), $Heap);
                        b$reqreads#2 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && $Unbox(read($Heap, $o, alloc)): bool
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.inv#canCall($Heap, o#2);
                        if (_module.Object.inv($Heap, o#2))
                        {
                            assert {:id "id283"} o#2 != null;
                            // assume allocatedness for receiver argument to function
                            assume $IsAllocBox($Box(o#2), Tclass._module.Object?(), $Heap);
                            assert {:id "id284"} $IsAlloc(o#2, Tclass._module.Object(), old($Heap));
                            b$reqreads#3 := (forall $o: ref, $f: Field :: 
                              $o != null
                                   && $Unbox(read($Heap, $o, alloc)): bool
                                   && $Unbox(read($Heap, $o, alloc)): bool
                                 ==> $_ReadsFrame[$o, $f]);
                            assume _module.Object.inv2#canCall(old($Heap), $Heap, o#2);
                        }
                    }
                }
            }

            // End Comprehension WF check
        }

        if (_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           && _module.Universe.globalInv(old($Heap), this)
           && (forall o#4: ref :: 
            { _module.Object.inv2(old($Heap), $Heap, o#4) } 
              { _module.Object.inv($Heap, o#4) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
            $Is(o#4, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
               ==> ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv($Heap, o#4))
                 && ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv2(old($Heap), $Heap, o#4))))
        {
            // Begin Comprehension WF check
            havoc o#3;
            if ($Is(o#3, Tclass._module.Object())
               && $IsAlloc(o#3, Tclass._module.Object(), $Heap))
            {
                b$reqreads#4 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3)))
                {
                    assert {:id "id285"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                }

                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3))
                   && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3)))
                {
                    assert {:id "id286"} o#3 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#3), Tclass._module.Object?(), $Heap);
                    b$reqreads#5 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.inv#canCall($Heap, o#3);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id287"} _module.Universe.legalTransition(old($Heap), $Heap, this, running#0)
           == (
            _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             && _module.Universe.globalInv(old($Heap), this)
             && (forall o#4: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#4) } 
                { _module.Object.inv($Heap, o#4) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
              $Is(o#4, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#4))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#4)))
             && (forall o#5: ref :: 
              { _module.Object.inv($Heap, o#5) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
              $Is(o#5, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5))
                   && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
                 ==> _module.Object.inv($Heap, o#5)));
        assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           && (_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.globalInv#canCall(old($Heap), this)
               && (_module.Universe.globalInv(old($Heap), this)
                 ==> (forall o#4: ref :: 
                    { _module.Object.inv2(old($Heap), $Heap, o#4) } 
                      { _module.Object.inv($Heap, o#4) } 
                      { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
                    $Is(o#4, Tclass._module.Object())
                       ==> 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                       ==> (!(forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                           ==> _module.Object.inv#canCall($Heap, o#4))
                         && ((forall $o: ref, $f: Field :: 
                              { read($Heap, $o, $f) } 
                              $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                             || _module.Object.inv($Heap, o#4)
                           ==> 
                          !(forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                           ==> _module.Object.inv2#canCall(old($Heap), $Heap, o#4)))
                   && ((forall o#4: ref :: 
                      { _module.Object.inv2(old($Heap), $Heap, o#4) } 
                        { _module.Object.inv($Heap, o#4) } 
                        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
                      $Is(o#4, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                         ==> ((forall $o: ref, $f: Field :: 
                              { read($Heap, $o, $f) } 
                              $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                             || _module.Object.inv($Heap, o#4))
                           && ((forall $o: ref, $f: Field :: 
                              { read($Heap, $o, $f) } 
                              $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                             || _module.Object.inv2(old($Heap), $Heap, o#4)))
                     ==> (forall o#5: ref :: 
                      { _module.Object.inv($Heap, o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
                        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                         ==> 
                        Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5))
                           && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
                         ==> _module.Object.inv#canCall($Heap, o#5)))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.legalTransition(old($Heap), $Heap, this, running#0), TBool);
        assert {:id "id288"} b$reqreads#0;
        assert {:id "id289"} b$reqreads#1;
        assert {:id "id290"} b$reqreads#2;
        assert {:id "id291"} b$reqreads#3;
        assert {:id "id292"} b$reqreads#4;
        assert {:id "id293"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "Universe.sequenceLci (well-formedness)"} CheckWellFormed$$_module.Universe.sequenceLci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 13 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.sequenceLci (well-formedness)"} CheckWellFormed$$_module.Universe.sequenceLci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceLci, CheckWellFormed$$_module.Universe.sequenceLci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id294"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id295"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id296"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id297"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id298"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.sequenceLci (call)"} Call$$_module.Universe.sequenceLci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id299"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true)));
  requires {:id "id300"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this)
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                  { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0))
                   ==> _module.Object.universe(o#0) == this
                     && o#0 != this
                     && _module.Object.baseFieldsInv(previous$Heap, o#0)
                     && _module.Object.triggerAxioms(previous$Heap, o#0))));
  requires {:id "id301"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true)));
  requires {:id "id302"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this)
               || (forall o#1: ref :: 
                { _module.Object.triggerAxioms(current$Heap, o#1) } 
                  { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                  { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1))
                   ==> _module.Object.universe(o#1) == this
                     && o#1 != this
                     && _module.Object.baseFieldsInv(current$Heap, o#1)
                     && _module.Object.triggerAxioms(current$Heap, o#1))));
  requires {:id "id303"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, this, _module.Universe.content)): Set));
  requires {:id "id304"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (forall o#2: ref :: 
            { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2))
               ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap)));
  requires {:id "id305"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || Set#Subset(running#0, $Unbox(read(previous$Heap, this, _module.Universe.content)): Set);
  requires {:id "id306"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall o#3: ref :: 
        { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
        $Is(o#3, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3))
             && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3))
           ==> (forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#3
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3));
  requires {:id "id307"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall o#4: ref :: 
        { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
        $Is(o#4, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4))
             && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(running#0, read(previous$Heap, o#4, _module.OwnedObject.owner))
             && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
              Tclass._module.Object?(), 
              previous$Heap)
           ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int);
  requires {:id "id308"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall l#0: ref :: 
        { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0) } 
          { $Unbox(read(previous$Heap, l#0, _module.Lifetime.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#0)) } 
        $Is(l#0, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#0))
           ==> 
          !Set#IsMember(running#0, read(previous$Heap, l#0, _module.Lifetime.owner))
             && $IsAllocBox(read(previous$Heap, l#0, _module.Lifetime.owner), 
              Tclass._module.Thread?(), 
              previous$Heap)
           ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalSequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id309"} _module.Universe.globalSequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Universe.globalSequenceInv2(previous$Heap, current$Heap, this)
     && (forall o#5: ref :: 
      { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#5) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
      $Is(o#5, Tclass._module.Object())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5))
         ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#5))
           && _module.Object.sequenceInv2(previous$Heap, current$Heap, o#5));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.sequenceLci (correctness)"} Impl$$_module.Universe.sequenceLci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 13 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id310"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
     && Set#Subset(running#0, $Unbox(read(previous$Heap, this, _module.Universe.content)): Set)
     && (forall o#9: ref :: 
      { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#9) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
      $Is(o#9, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9))
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#9))
         ==> (forall $o: ref, $f: Field :: 
            { read(current$Heap, $o, $f) } 
            $o != null
               ==> 
              $o == o#9
               ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
           || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#9))
     && (forall o#10: ref :: 
      { $Unbox(read(current$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#10, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#10)) } 
      $Is(o#10, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#10))
           && $Is($Unbox(read(previous$Heap, o#10, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(running#0, read(previous$Heap, o#10, _module.OwnedObject.owner))
           && $IsAllocBox(read(previous$Heap, o#10, _module.OwnedObject.owner), 
            Tclass._module.Object?(), 
            previous$Heap)
         ==> $Unbox(read(previous$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall l#1: ref :: 
      { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
        { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1)) } 
      $Is(l#1, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1))
         ==> 
        !Set#IsMember(running#0, read(previous$Heap, l#1, _module.Lifetime.owner))
           && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
            Tclass._module.Thread?(), 
            previous$Heap)
         ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalSequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id311"} _module.Universe.globalSequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.globalSequenceInv2(previous$Heap, current$Heap, this)
       || (forall o#11: ref :: 
        { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#11) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
        $Is(o#11, Tclass._module.Object())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#11))
           ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#11))
             && _module.Object.sequenceInv2(previous$Heap, current$Heap, o#11));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.sequenceLci (correctness)"} Impl$$_module.Universe.sequenceLci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var o#0_0: ref;
  var ##running#0_0: Set;
  var running##0_0: Set;

    // AddMethodImpl: sequenceLci, Impl$$_module.Universe.sequenceLci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(92,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc o#0_0;
        assume $Is(o#0_0, Tclass._module.Object());
        assert {:id "id312"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0)))
        {
            assert {:id "id313"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            ##running#0_0 := running#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0_0, TSet(Tclass._module.Thread()), $Heap);
            assert {:id "id314"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assert {:id "id315"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
            assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, o#0_0, running#0);
        }

        assume Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           ==> _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, o#0_0, running#0);
        assume {:id "id316"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           && _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, o#0_0, running#0);
        if (*)
        {
            assert {:id "id317"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            assert {:id "id318"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#0_0);
            assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#0_0);
            assume {:id "id319"} _module.Object.sequenceInv2(old($Heap), $Heap, o#0_0);
            assume false;
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(92,137)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id320"} o#0_0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        running##0_0 := running#0;
        assert {:id "id321"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
        assert {:id "id322"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
        call {:id "id323"} Call$$_module.Object.sequenceAdmissibility(old($Heap), $Heap, o#0_0, running##0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id324"} _module.Object.sequenceInv2(old($Heap), $Heap, o#0_0);
        assume false;
    }
    else
    {
        assume (forall o#0_1: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#0_1) } 
            { _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, o#0_1, running#0) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1)) } 
          $Is(o#0_1, Tclass._module.Object())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1))
               && _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, o#0_1, running#0)
             ==> _module.Object.sequenceInv2(old($Heap), $Heap, o#0_1));
    }
}



procedure {:verboseName "Universe.lci (well-formedness)"} CheckWellFormed$$_module.Universe.lci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 21 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.lci (well-formedness)"} CheckWellFormed$$_module.Universe.lci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: lci, CheckWellFormed$$_module.Universe.lci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id325"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id326"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id327"} _module.Universe.legalTransition(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, this);
    assume {:id "id328"} _module.Universe.globalInv($Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id329"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id330"} _module.Universe.globalInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.lci (call)"} Call$$_module.Universe.lci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id331"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
                 ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true))));
  requires {:id "id332"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
                 ==> _module.Universe.globalBaseInv(previous$Heap, this)
                   || (forall o#0: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                      { _module.Object.universe(o#0) } 
                      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                    $Is(o#0, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0))
                       ==> _module.Object.universe(o#0) == this
                         && o#0 != this
                         && _module.Object.baseFieldsInv(previous$Heap, o#0)
                         && _module.Object.triggerAxioms(previous$Heap, o#0)))));
  requires {:id "id333"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
                 ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true))));
  requires {:id "id334"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
                 ==> _module.Universe.globalBaseInv(current$Heap, this)
                   || (forall o#1: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#1) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                      { _module.Object.universe(o#1) } 
                      { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                    $Is(o#1, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1))
                       ==> _module.Object.universe(o#1) == this
                         && o#1 != this
                         && _module.Object.baseFieldsInv(current$Heap, o#1)
                         && _module.Object.triggerAxioms(current$Heap, o#1)))));
  requires {:id "id335"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, this, _module.Universe.content)): Set)));
  requires {:id "id336"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (forall o#2: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
                $Is(o#2, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2))
                     && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2))
                   ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap))));
  requires {:id "id337"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            $Unbox(read(previous$Heap, this, _module.Universe.content)): Set));
  requires {:id "id338"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#3: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
            $Is(o#3, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3))
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#3
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3)));
  requires {:id "id339"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#4: ref :: 
            { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
            $Is(o#4, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4))
                 && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(previous$Heap, o#4, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id340"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall l#0: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0) } 
              { $Unbox(read(previous$Heap, l#0, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#0)) } 
            $Is(l#0, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#0))
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(previous$Heap, l#0, _module.Lifetime.owner))
                 && $IsAllocBox(read(previous$Heap, l#0, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  previous$Heap)
               ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0)));
  requires {:id "id341"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, this)
         ==> _module.Universe.globalInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true)));
  requires {:id "id342"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, this)
         ==> _module.Universe.globalInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this)
               || (forall o#5: ref :: 
                { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                  { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                  { _module.Object.universe(o#5) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
                $Is(o#5, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5))
                   ==> _module.Object.universe(o#5) == this
                     && o#5 != this
                     && _module.Object.baseFieldsInv(previous$Heap, o#5)
                     && _module.Object.triggerAxioms(previous$Heap, o#5))));
  requires {:id "id343"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, this)
         ==> _module.Universe.globalInv(previous$Heap, this)
           || (forall o#6: ref :: 
            { _module.Object.inv(previous$Heap, o#6) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#6))
               ==> _module.Object.inv(previous$Heap, o#6)));
  requires {:id "id344"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (forall o#7: ref :: 
        { _module.Object.inv2(previous$Heap, current$Heap, o#7) } 
          { _module.Object.inv(current$Heap, o#7) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#7)) } 
        $Is(o#7, Tclass._module.Object())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#7))
           ==> ((forall $o: ref, $f: Field :: 
                { read(current$Heap, $o, $f) } 
                $o != null
                   ==> 
                  $o == o#7
                   ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
               || _module.Object.inv(current$Heap, o#7))
             && ((forall $o: ref, $f: Field :: 
                { read(current$Heap, $o, $f) } 
                $o != null
                   ==> 
                  $o == o#7
                   ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
               || _module.Object.inv2(previous$Heap, current$Heap, o#7)));
  requires {:id "id345"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (forall o#8: ref :: 
        { _module.Object.inv(current$Heap, o#8) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
        $Is(o#8, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8))
             && !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#8))
           ==> _module.Object.inv(current$Heap, o#8));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall(current$Heap, this)
     && (_module.Universe.globalInv(current$Heap, this)
       ==> _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this));
  free ensures {:id "id346"} _module.Universe.globalInv#canCall(current$Heap, this)
     && 
    _module.Universe.globalInv(current$Heap, this)
     && 
    _module.Universe.globalBaseInv(current$Heap, this)
     && (forall o#10: ref :: 
      { _module.Object.inv(current$Heap, o#10) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#10)) } 
      $Is(o#10, Tclass._module.Object())
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#10))
         ==> _module.Object.inv(current$Heap, o#10));
  free ensures {:id "id347"} _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Universe.globalInv2(previous$Heap, current$Heap, this)
     && (forall o#11: ref :: 
      { _module.Object.inv2(previous$Heap, current$Heap, o#11) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#11))
         ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#11))
           && _module.Object.inv2(previous$Heap, current$Heap, o#11));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.lci (correctness)"} Impl$$_module.Universe.lci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 21 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id348"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.legalTransitionsSequence(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && _module.Universe.globalInv(previous$Heap, this)
     && (forall o#19: ref :: 
      { _module.Object.inv2(previous$Heap, current$Heap, o#19) } 
        { _module.Object.inv(current$Heap, o#19) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19)) } 
      $Is(o#19, Tclass._module.Object())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19))
         ==> ((forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#19
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.inv(current$Heap, o#19))
           && ((forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#19
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.inv2(previous$Heap, current$Heap, o#19)))
     && (forall o#20: ref :: 
      { _module.Object.inv(current$Heap, o#20) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#20)) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#20)) } 
      $Is(o#20, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#20))
           && !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#20))
         ==> _module.Object.inv(current$Heap, o#20));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall(current$Heap, this)
     && (_module.Universe.globalInv(current$Heap, this)
       ==> _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this));
  ensures {:id "id349"} _module.Universe.globalInv#canCall(current$Heap, this)
     ==> _module.Universe.globalInv(current$Heap, this)
       || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
         ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true));
  ensures {:id "id350"} _module.Universe.globalInv#canCall(current$Heap, this)
     ==> _module.Universe.globalInv(current$Heap, this)
       || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
         ==> _module.Universe.globalBaseInv(current$Heap, this)
           || (forall o#21: ref :: 
            { _module.Object.triggerAxioms(current$Heap, o#21) } 
              { _module.Object.baseFieldsInv(current$Heap, o#21) } 
              { _module.Object.universe(o#21) } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#21))
               ==> _module.Object.universe(o#21) == this
                 && o#21 != this
                 && _module.Object.baseFieldsInv(current$Heap, o#21)
                 && _module.Object.triggerAxioms(current$Heap, o#21)));
  ensures {:id "id351"} _module.Universe.globalInv#canCall(current$Heap, this)
     ==> _module.Universe.globalInv(current$Heap, this)
       || (forall o#22: ref :: 
        { _module.Object.inv(current$Heap, o#22) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#22)) } 
        $Is(o#22, Tclass._module.Object())
             && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#22))
           ==> _module.Object.inv(current$Heap, o#22));
  ensures {:id "id352"} _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.globalInv2(previous$Heap, current$Heap, this)
       || (forall o#23: ref :: 
        { _module.Object.inv2(previous$Heap, current$Heap, o#23) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#23)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#23)) } 
        $Is(o#23, Tclass._module.Object())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#23))
           ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#23))
             && _module.Object.inv2(previous$Heap, current$Heap, o#23));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.lci (correctness)"} Impl$$_module.Universe.lci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var o#0_0: ref;
  var ##running#0_0: ref;
  var running##0_0: ref;

    // AddMethodImpl: lci, Impl$$_module.Universe.lci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(100,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc o#0_0;
        assume $Is(o#0_0, Tclass._module.Object());
        assert {:id "id353"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0)))
        {
            assert {:id "id354"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            ##running#0_0 := running#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0_0, Tclass._module.Thread(), $Heap);
            assert {:id "id355"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assert {:id "id356"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
            assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, o#0_0, running#0);
        }

        assume Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           ==> _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, o#0_0, running#0);
        assume {:id "id357"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           && _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, o#0_0, running#0);
        if (*)
        {
            assert {:id "id358"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            assert {:id "id359"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assume _module.Object.inv2#canCall(old($Heap), $Heap, o#0_0);
            if (_module.Object.inv2(old($Heap), $Heap, o#0_0))
            {
                assert {:id "id360"} {:subsumption 0} o#0_0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
                assume _module.Object.inv#canCall($Heap, o#0_0);
            }

            assume _module.Object.inv2#canCall(old($Heap), $Heap, o#0_0)
               && (_module.Object.inv2(old($Heap), $Heap, o#0_0)
                 ==> _module.Object.inv#canCall($Heap, o#0_0));
            assume {:id "id361"} _module.Object.inv2(old($Heap), $Heap, o#0_0)
               && _module.Object.inv($Heap, o#0_0);
            assume false;
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(100,124)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id362"} o#0_0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        running##0_0 := running#0;
        assert {:id "id363"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
        assert {:id "id364"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
        call {:id "id365"} Call$$_module.Object.admissibility(old($Heap), $Heap, o#0_0, running##0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id366"} _module.Object.inv2(old($Heap), $Heap, o#0_0);
        assert {:id "id367"} _module.Object.inv($Heap, o#0_0);
        assume false;
    }
    else
    {
        assume (forall o#0_1: ref :: 
          { _module.Object.inv($Heap, o#0_1) } 
            { _module.Object.inv2(old($Heap), $Heap, o#0_1) } 
            { _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, o#0_1, running#0) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1)) } 
          $Is(o#0_1, Tclass._module.Object())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1))
               && _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, o#0_1, running#0)
             ==> _module.Object.inv2(old($Heap), $Heap, o#0_1)
               && _module.Object.inv($Heap, o#0_1));
    }
}



procedure {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: CheckTransitiveBaseLegalTransitionsSequence, CheckWellFormed$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalBaseInv#canCall($Heap, this);
    assume {:id "id368"} _module.Universe.globalBaseInv($Heap, this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == this
           || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id369"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
    assume {:id "id370"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (call)"} Call$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  // user-defined preconditions
  requires {:id "id371"} _module.Universe.globalBaseInv#canCall($Heap, this)
     ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true);
  requires {:id "id372"} _module.Universe.globalBaseInv#canCall($Heap, this)
     ==> _module.Universe.globalBaseInv($Heap, this)
       || (forall o#0: ref :: 
        { _module.Object.triggerAxioms($Heap, o#0) } 
          { _module.Object.baseFieldsInv($Heap, o#0) } 
          { _module.Object.universe(o#0) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
        $Is(o#0, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
           ==> _module.Object.universe(o#0) == this
             && o#0 != this
             && _module.Object.baseFieldsInv($Heap, o#0)
             && _module.Object.triggerAxioms($Heap, o#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
  free ensures {:id "id373"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
     && 
    _module.Universe.globalBaseInv(old($Heap), this)
     && _module.Universe.globalBaseInv($Heap, this)
     && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
      $Unbox(read($Heap, this, _module.Universe.content)): Set)
     && (forall o#3: ref :: 
      { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && 
          !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3))
         ==> !$IsAllocBox($Box(o#3), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 10 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id374"} _module.Universe.globalBaseInv#canCall($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && 
    true
     && (forall o#4: ref :: 
      { _module.Object.triggerAxioms($Heap, o#4) } 
        { _module.Object.baseFieldsInv($Heap, o#4) } 
        { _module.Object.universe(o#4) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
      $Is(o#4, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
         ==> _module.Object.universe(o#4) == this
           && o#4 != this
           && _module.Object.baseFieldsInv($Heap, o#4)
           && _module.Object.triggerAxioms($Heap, o#4));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
  ensures {:id "id375"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
         ==> _module.Universe.globalBaseInv(old($Heap), this) || Lit(true));
  ensures {:id "id376"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
         ==> _module.Universe.globalBaseInv(old($Heap), this)
           || (forall o#5: ref :: 
            { _module.Object.triggerAxioms(old($Heap), o#5) } 
              { _module.Object.baseFieldsInv(old($Heap), o#5) } 
              { _module.Object.universe(o#5) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
            $Is(o#5, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
               ==> _module.Object.universe(o#5) == this
                 && o#5 != this
                 && _module.Object.baseFieldsInv(old($Heap), o#5)
                 && _module.Object.triggerAxioms(old($Heap), o#5)));
  ensures {:id "id377"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
  ensures {:id "id378"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this)
           || (forall o#6: ref :: 
            { _module.Object.triggerAxioms($Heap, o#6) } 
              { _module.Object.baseFieldsInv($Heap, o#6) } 
              { _module.Object.universe(o#6) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#6))
               ==> _module.Object.universe(o#6) == this
                 && o#6 != this
                 && _module.Object.baseFieldsInv($Heap, o#6)
                 && _module.Object.triggerAxioms($Heap, o#6)));
  ensures {:id "id379"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
        $Unbox(read($Heap, this, _module.Universe.content)): Set);
  ensures {:id "id380"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (forall o#7: ref :: 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#7)) } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#7)) } 
        $Is(o#7, Tclass._module.Object())
             && 
            !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#7))
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#7))
           ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var universe##0: ref;
  var universe##1: ref;

    // AddMethodImpl: CheckTransitiveBaseLegalTransitionsSequence, Impl$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(109,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := this;
    assert {:id "id381"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##0
             || Set#IsMember($Unbox(read($Heap, universe##0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id382"} Call$$_module.__default.Havoc(universe##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(110,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##1 := this;
    assert {:id "id383"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##1
             || Set#IsMember($Unbox(read($Heap, universe##1, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id384"} Call$$_module.__default.Havoc(universe##1);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap));
  free requires 17 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: CheckTransitiveLegalTransitionsSequence, CheckWellFormed$$_module.Universe.CheckTransitiveLegalTransitionsSequence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, this);
    assume {:id "id385"} _module.Universe.globalInv($Heap, this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == this
           || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id386"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id387"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id388"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0);
}



procedure {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (call)"} Call$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap));
  // user-defined preconditions
  requires {:id "id389"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
  requires {:id "id390"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == this
                 && o#0 != this
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id391"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
  free ensures {:id "id392"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
     && Set#Subset(running#0, $Unbox(read(old($Heap), this, _module.Universe.content)): Set)
     && (forall o#5: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
      $Is(o#5, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5))
         ==> (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#5 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           || _module.Object.sequenceInv2(old($Heap), $Heap, o#5))
     && (forall o#6: ref :: 
      { $Unbox(read($Heap, o#6, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#6, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#6, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6))
           && $Is($Unbox(read(old($Heap), o#6, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(running#0, read(old($Heap), o#6, _module.OwnedObject.owner))
           && $IsAllocBox(read(old($Heap), o#6, _module.OwnedObject.owner), 
            Tclass._module.Object?(), 
            old($Heap))
         ==> $Unbox(read(old($Heap), o#6, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, o#6, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall l#0: ref :: 
      { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
        { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#0)) } 
      $Is(l#0, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#0))
         ==> 
        !Set#IsMember(running#0, read(old($Heap), l#0, _module.Lifetime.owner))
           && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
            Tclass._module.Thread?(), 
            old($Heap))
         ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 17 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id393"} _module.Universe.globalInv#canCall($Heap, this)
     && 
    _module.Universe.globalInv($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && (forall o#8: ref :: 
      { _module.Object.inv($Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv($Heap, o#8));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
  ensures {:id "id394"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
             ==> _module.Universe.globalBaseInv(old($Heap), this) || Lit(true)));
  ensures {:id "id395"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
             ==> _module.Universe.globalBaseInv(old($Heap), this)
               || (forall o#9: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#9) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#9) } 
                  { _module.Object.universe(o#9) } 
                  { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9)) } 
                $Is(o#9, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9))
                   ==> _module.Object.universe(o#9) == this
                     && o#9 != this
                     && _module.Object.baseFieldsInv(old($Heap), o#9)
                     && _module.Object.triggerAxioms(old($Heap), o#9))));
  ensures {:id "id396"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, this)
             ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true)));
  ensures {:id "id397"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, this)
             ==> _module.Universe.globalBaseInv($Heap, this)
               || (forall o#10: ref :: 
                { _module.Object.triggerAxioms($Heap, o#10) } 
                  { _module.Object.baseFieldsInv($Heap, o#10) } 
                  { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#10))
                   ==> _module.Object.universe(o#10) == this
                     && o#10 != this
                     && _module.Object.baseFieldsInv($Heap, o#10)
                     && _module.Object.triggerAxioms($Heap, o#10))));
  ensures {:id "id398"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set));
  ensures {:id "id399"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (forall o#11: ref :: 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#11)) } 
            $Is(o#11, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#11))
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#11))
               ==> !$IsAllocBox($Box(o#11), Tclass._module.Object(), old($Heap))));
  ensures {:id "id400"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || Set#Subset(running#0, $Unbox(read(old($Heap), this, _module.Universe.content)): Set);
  ensures {:id "id401"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (forall o#12: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#12) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#12)) } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#12)) } 
        $Is(o#12, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#12))
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#12))
           ==> (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#12 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.sequenceInv2(old($Heap), $Heap, o#12));
  ensures {:id "id402"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (forall o#13: ref :: 
        { $Unbox(read($Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#13, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#13, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#13))
             && $Is($Unbox(read(old($Heap), o#13, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(running#0, read(old($Heap), o#13, _module.OwnedObject.owner))
             && $IsAllocBox(read(old($Heap), o#13, _module.OwnedObject.owner), 
              Tclass._module.Object?(), 
              old($Heap))
           ==> $Unbox(read(old($Heap), o#13, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id403"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (forall l#1: ref :: 
        { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1) } 
          { $Unbox(read(old($Heap), l#1, _module.Lifetime.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#1)) } 
        $Is(l#1, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#1))
           ==> 
          !Set#IsMember(running#0, read(old($Heap), l#1, _module.Lifetime.owner))
             && $IsAllocBox(read(old($Heap), l#1, _module.Lifetime.owner), 
              Tclass._module.Thread?(), 
              old($Heap))
           ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref, running#0: Set) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var universe##0: ref;
  var ##running#1: Set;
  var running##0: Set;
  var $Heap_at_0: Heap;
  var universe##1: ref;
  var ##running#2: Set;
  var running##1: Set;

    // AddMethodImpl: CheckTransitiveLegalTransitionsSequence, Impl$$_module.Universe.CheckTransitiveLegalTransitionsSequence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(119,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := this;
    assert {:id "id404"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##0
             || Set#IsMember($Unbox(read($Heap, universe##0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id405"} Call$$_module.__default.Havoc(universe##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(120,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#1 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#1, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id406"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id407"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id408"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(121,16)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id409"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id410"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    call {:id "id411"} Call$$_module.Universe.sequenceLci(old($Heap), $Heap, this, running##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(122,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id412"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
    assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
    assert {:id "id413"} {:subsumption 0} _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, this)
         || (forall o#14: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#14) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#14)) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#14)) } 
          $Is(o#14, Tclass._module.Object())
               && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#14))
             ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#14))
               && _module.Object.sequenceInv2(old($Heap), $Heap, o#14));
    assume {:id "id414"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);
    $Heap_at_0 := $Heap;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(124,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##1 := this;
    assert {:id "id415"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##1
             || Set#IsMember($Unbox(read($Heap, universe##1, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id416"} Call$$_module.__default.Havoc(universe##1);
    // TrCallStmt: After ProcessCallStmt

  after_0:
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(125,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#2 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#2, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id417"} $IsAlloc(this, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id418"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap_at_0);
    assume _module.Universe.legalTransitionsSequence#canCall($Heap_at_0, $Heap, this, running#0);
    assume _module.Universe.legalTransitionsSequence#canCall($Heap_at_0, $Heap, this, running#0);
    assume {:id "id419"} _module.Universe.legalTransitionsSequence($Heap_at_0, $Heap, this, running#0);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(126,20)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##1 := running#0;
    assert {:id "id420"} $IsAlloc(this, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id421"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap_at_0);
    call {:id "id422"} Call$$_module.Universe.sequenceLci($Heap_at_0, $Heap, this, running##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(127,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id423"} $IsAlloc(this, Tclass._module.Universe(), $Heap_at_0);
    assume _module.Universe.globalSequenceInv2#canCall($Heap_at_0, $Heap, this);
    assume _module.Universe.globalSequenceInv2#canCall($Heap_at_0, $Heap, this);
    assert {:id "id424"} {:subsumption 0} _module.Universe.globalSequenceInv2#canCall($Heap_at_0, $Heap, this)
       ==> _module.Universe.globalSequenceInv2($Heap_at_0, $Heap, this)
         || (forall o#15: ref :: 
          { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#15) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#15)) } 
            { Set#IsMember($Unbox(read($Heap_at_0, this, _module.Universe.content)): Set, $Box(o#15)) } 
          $Is(o#15, Tclass._module.Object())
               && Set#IsMember($Unbox(read($Heap_at_0, this, _module.Universe.content)): Set, $Box(o#15))
             ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#15))
               && _module.Object.sequenceInv2($Heap_at_0, $Heap, o#15));
    assume {:id "id425"} _module.Universe.globalSequenceInv2($Heap_at_0, $Heap, this);
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(129,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id426"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
    if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this))
    {
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        assert {:id "id427"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
       && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
         ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this));
    assume {:id "id428"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap), 
    moreRunning#0: Set
       where $Is(moreRunning#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  requires $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref, 
    running#0: Set, 
    moreRunning#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;
  var ##running#1: Set;


    // AddMethodImpl: CheckMonotonicLegalTransitionsSequence, CheckWellFormed$$_module.Universe.CheckMonotonicLegalTransitionsSequence
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    if (Set#Subset(running#0, moreRunning#0))
    {
        assert {:id "id429"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    }

    assume {:id "id430"} Set#Subset(running#0, moreRunning#0)
       && Set#Subset(moreRunning#0, $Unbox(read(old($Heap), this, _module.Universe.content)): Set);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id431"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id432"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id433"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#1 := moreRunning#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#1, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id434"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id435"} $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, moreRunning#0);
    assume {:id "id436"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, moreRunning#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id437"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.legalTransitionsSequenceAnyThread#canCall(old($Heap), $Heap, this);
    assume {:id "id438"} _module.Universe.legalTransitionsSequenceAnyThread(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (call)"} Call$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap), 
    moreRunning#0: Set
       where $Is(moreRunning#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  requires $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id439"} Set#Subset(running#0, moreRunning#0);
  requires {:id "id440"} Set#Subset(moreRunning#0, $Unbox(read(previous$Heap, this, _module.Universe.content)): Set);
  requires {:id "id441"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true)));
  requires {:id "id442"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this)
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                  { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0))
                   ==> _module.Object.universe(o#0) == this
                     && o#0 != this
                     && _module.Object.baseFieldsInv(previous$Heap, o#0)
                     && _module.Object.triggerAxioms(previous$Heap, o#0))));
  requires {:id "id443"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true)));
  requires {:id "id444"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this)
               || (forall o#1: ref :: 
                { _module.Object.triggerAxioms(current$Heap, o#1) } 
                  { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                  { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1))
                   ==> _module.Object.universe(o#1) == this
                     && o#1 != this
                     && _module.Object.baseFieldsInv(current$Heap, o#1)
                     && _module.Object.triggerAxioms(current$Heap, o#1))));
  requires {:id "id445"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, this, _module.Universe.content)): Set));
  requires {:id "id446"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (forall o#2: ref :: 
            { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2))
               ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap)));
  requires {:id "id447"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || Set#Subset(running#0, $Unbox(read(previous$Heap, this, _module.Universe.content)): Set);
  requires {:id "id448"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall o#3: ref :: 
        { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
        $Is(o#3, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3))
             && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3))
           ==> (forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#3
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3));
  requires {:id "id449"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall o#4: ref :: 
        { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
        $Is(o#4, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4))
             && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(running#0, read(previous$Heap, o#4, _module.OwnedObject.owner))
             && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
              Tclass._module.Object?(), 
              previous$Heap)
           ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int);
  requires {:id "id450"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall l#0: ref :: 
        { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0) } 
          { $Unbox(read(previous$Heap, l#0, _module.Lifetime.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#0)) } 
        $Is(l#0, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#0))
           ==> 
          !Set#IsMember(running#0, read(previous$Heap, l#0, _module.Lifetime.owner))
             && $IsAllocBox(read(previous$Heap, l#0, _module.Lifetime.owner), 
              Tclass._module.Thread?(), 
              previous$Heap)
           ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0);
  free ensures {:id "id451"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     && 
    _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
     && Set#Subset(moreRunning#0, $Unbox(read(previous$Heap, this, _module.Universe.content)): Set)
     && (forall o#8: ref :: 
      { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#8))
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8))
         ==> (forall $o: ref, $f: Field :: 
            { read(current$Heap, $o, $f) } 
            $o != null
               ==> 
              $o == o#8
               ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
           || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8))
     && (forall o#9: ref :: 
      { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
      $Is(o#9, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9))
           && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(moreRunning#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
           && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
            Tclass._module.Object?(), 
            previous$Heap)
         ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall l#1: ref :: 
      { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
        { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1)) } 
      $Is(l#1, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1))
         ==> 
        !Set#IsMember(moreRunning#0, read(previous$Heap, l#1, _module.Lifetime.owner))
           && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
            Tclass._module.Thread?(), 
            previous$Heap)
         ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1));
  free ensures _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id452"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
     && _module.Universe.legalTransitionsSequence(previous$Heap, 
      current$Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#8: Box :: 
          $IsBox($y#8, Tclass._module.Thread())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#8))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap), 
    moreRunning#0: Set
       where $Is(moreRunning#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  requires $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id453"} Set#Subset(running#0, moreRunning#0);
  requires {:id "id454"} Set#Subset(moreRunning#0, $Unbox(read(previous$Heap, this, _module.Universe.content)): Set);
  free requires {:id "id455"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
     && Set#Subset(running#0, $Unbox(read(previous$Heap, this, _module.Universe.content)): Set)
     && (forall o#18: ref :: 
      { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#18) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#18)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#18)) } 
      $Is(o#18, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#18))
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#18))
         ==> (forall $o: ref, $f: Field :: 
            { read(current$Heap, $o, $f) } 
            $o != null
               ==> 
              $o == o#18
               ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
           || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#18))
     && (forall o#19: ref :: 
      { $Unbox(read(current$Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#19, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19)) } 
      $Is(o#19, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19))
           && $Is($Unbox(read(previous$Heap, o#19, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(running#0, read(previous$Heap, o#19, _module.OwnedObject.owner))
           && $IsAllocBox(read(previous$Heap, o#19, _module.OwnedObject.owner), 
            Tclass._module.Object?(), 
            previous$Heap)
         ==> $Unbox(read(previous$Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall l#3: ref :: 
      { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#3) } 
        { $Unbox(read(previous$Heap, l#3, _module.Lifetime.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#3)) } 
      $Is(l#3, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#3))
         ==> 
        !Set#IsMember(running#0, read(previous$Heap, l#3, _module.Lifetime.owner))
           && $IsAllocBox(read(previous$Heap, l#3, _module.Lifetime.owner), 
            Tclass._module.Thread?(), 
            previous$Heap)
         ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#3));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0);
  ensures {:id "id456"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true)));
  ensures {:id "id457"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this)
               || (forall o#20: ref :: 
                { _module.Object.triggerAxioms(previous$Heap, o#20) } 
                  { _module.Object.baseFieldsInv(previous$Heap, o#20) } 
                  { _module.Object.universe(o#20) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#20)) } 
                $Is(o#20, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#20))
                   ==> _module.Object.universe(o#20) == this
                     && o#20 != this
                     && _module.Object.baseFieldsInv(previous$Heap, o#20)
                     && _module.Object.triggerAxioms(previous$Heap, o#20))));
  ensures {:id "id458"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true)));
  ensures {:id "id459"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this)
               || (forall o#21: ref :: 
                { _module.Object.triggerAxioms(current$Heap, o#21) } 
                  { _module.Object.baseFieldsInv(current$Heap, o#21) } 
                  { _module.Object.universe(o#21) } 
                  { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#21)) } 
                $Is(o#21, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#21))
                   ==> _module.Object.universe(o#21) == this
                     && o#21 != this
                     && _module.Object.baseFieldsInv(current$Heap, o#21)
                     && _module.Object.triggerAxioms(current$Heap, o#21))));
  ensures {:id "id460"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, this, _module.Universe.content)): Set));
  ensures {:id "id461"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (forall o#22: ref :: 
            { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#22)) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#22)) } 
            $Is(o#22, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#22))
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#22))
               ==> !$IsAllocBox($Box(o#22), Tclass._module.Object(), previous$Heap)));
  ensures {:id "id462"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || Set#Subset(moreRunning#0, $Unbox(read(previous$Heap, this, _module.Universe.content)): Set);
  ensures {:id "id463"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (forall o#23: ref :: 
        { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#23) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#23)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#23)) } 
        $Is(o#23, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#23))
             && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#23))
           ==> (forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#23
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#23));
  ensures {:id "id464"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (forall o#24: ref :: 
        { $Unbox(read(current$Heap, o#24, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#24, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#24, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#24)) } 
        $Is(o#24, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#24))
             && $Is($Unbox(read(previous$Heap, o#24, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(moreRunning#0, read(previous$Heap, o#24, _module.OwnedObject.owner))
             && $IsAllocBox(read(previous$Heap, o#24, _module.OwnedObject.owner), 
              Tclass._module.Object?(), 
              previous$Heap)
           ==> $Unbox(read(previous$Heap, o#24, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, o#24, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id465"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (forall l#4: ref :: 
        { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#4) } 
          { $Unbox(read(previous$Heap, l#4, _module.Lifetime.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#4)) } 
        $Is(l#4, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#4))
           ==> 
          !Set#IsMember(moreRunning#0, read(previous$Heap, l#4, _module.Lifetime.owner))
             && $IsAllocBox(read(previous$Heap, l#4, _module.Lifetime.owner), 
              Tclass._module.Thread?(), 
              previous$Heap)
           ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#4));
  free ensures _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id466"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
                 ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true))));
  ensures {:id "id467"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
                 ==> _module.Universe.globalBaseInv(previous$Heap, this)
                   || (forall o#25: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#25) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#25) } 
                      { _module.Object.universe(o#25) } 
                      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#25)) } 
                    $Is(o#25, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#25))
                       ==> _module.Object.universe(o#25) == this
                         && o#25 != this
                         && _module.Object.baseFieldsInv(previous$Heap, o#25)
                         && _module.Object.triggerAxioms(previous$Heap, o#25)))));
  ensures {:id "id468"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
                 ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true))));
  ensures {:id "id469"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
                 ==> _module.Universe.globalBaseInv(current$Heap, this)
                   || (forall o#26: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#26) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#26) } 
                      { _module.Object.universe(o#26) } 
                      { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#26)) } 
                    $Is(o#26, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#26))
                       ==> _module.Object.universe(o#26) == this
                         && o#26 != this
                         && _module.Object.baseFieldsInv(current$Heap, o#26)
                         && _module.Object.triggerAxioms(current$Heap, o#26)))));
  ensures {:id "id470"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, this, _module.Universe.content)): Set)));
  ensures {:id "id471"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (forall o#27: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#27)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#27)) } 
                $Is(o#27, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#27))
                     && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#27))
                   ==> !$IsAllocBox($Box(o#27), Tclass._module.Object(), previous$Heap))));
  ensures {:id "id472"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || Set#Subset(Set#FromBoogieMap((lambda $y#11: Box :: 
                $IsBox($y#11, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#11))), 
            $Unbox(read(previous$Heap, this, _module.Universe.content)): Set));
  ensures {:id "id473"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || (forall o#28: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#28) } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#28)) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#28)) } 
            $Is(o#28, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#28))
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#28))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#28
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#28)));
  ensures {:id "id474"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || (forall o#29: ref :: 
            { $Unbox(read(current$Heap, o#29, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#29, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#29, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#29)) } 
            $Is(o#29, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#29))
                 && $Is($Unbox(read(previous$Heap, o#29, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#FromBoogieMap((lambda $y#12: Box :: 
                      $IsBox($y#12, Tclass._module.Thread())
                         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#12))), 
                  read(previous$Heap, o#29, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#29, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#29, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#29, _module.OwnedObject.nonvolatileVersion)): int));
  ensures {:id "id475"} _module.Universe.legalTransitionsSequenceAnyThread#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.legalTransitionsSequenceAnyThread(previous$Heap, current$Heap, this)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#9: Box :: 
              $IsBox($y#9, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#9))))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#10))))
           || (forall l#5: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#5) } 
              { $Unbox(read(previous$Heap, l#5, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#5)) } 
            $Is(l#5, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#5))
               ==> 
              !Set#IsMember(Set#FromBoogieMap((lambda $y#13: Box :: 
                      $IsBox($y#13, Tclass._module.Thread())
                         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $y#13))), 
                  read(previous$Heap, l#5, _module.Lifetime.owner))
                 && $IsAllocBox(read(previous$Heap, l#5, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  previous$Heap)
               ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#5)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref, 
    running#0: Set, 
    moreRunning#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: CheckMonotonicLegalTransitionsSequence, Impl$$_module.Universe.CheckMonotonicLegalTransitionsSequence
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.Universe.outlives
function _module.Universe.outlives($ly: LayerType, $heap: Heap, this: ref, a#0: ref, b#0: ref) : bool
uses {
// definition axiom for _module.Universe.outlives (revealed)
axiom {:id "id476"} 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, b#0: ref :: 
    { _module.Universe.outlives($LS($ly), $Heap, this, a#0, b#0), $IsGoodHeap($Heap) } 
    _module.Universe.outlives#canCall($Heap, this, a#0, b#0)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap)
           && $Is(a#0, Tclass._module.Lifetime())
           && $Is(b#0, Tclass._module.Lifetime())
           && 
          Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0)))
       ==> (!Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
           ==> (forall x#0: ref :: 
            { _module.Universe.outlivesThrough($ly, $Heap, this, a#0, x#0, b#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0)) } 
            $Is(x#0, Tclass._module.Lifetime())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0))
               ==> _module.Universe.outlivesThrough#canCall($Heap, this, a#0, x#0, b#0)))
         && _module.Universe.outlives($LS($ly), $Heap, this, a#0, b#0)
           == (Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
             || (exists x#0: ref :: 
              { _module.Universe.outlivesThrough($ly, $Heap, this, a#0, x#0, b#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0)) } 
              $Is(x#0, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0))
                 && _module.Universe.outlivesThrough($ly, $Heap, this, a#0, x#0, b#0))));
}

function _module.Universe.outlives#canCall($heap: Heap, this: ref, a#0: ref, b#0: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, b#0: ref :: 
  { _module.Universe.outlives($LS($ly), $Heap, this, a#0, b#0) } 
  _module.Universe.outlives($LS($ly), $Heap, this, a#0, b#0)
     == _module.Universe.outlives($ly, $Heap, this, a#0, b#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, b#0: ref :: 
  { _module.Universe.outlives(AsFuelBottom($ly), $Heap, this, a#0, b#0) } 
  _module.Universe.outlives($ly, $Heap, this, a#0, b#0)
     == _module.Universe.outlives($LZ, $Heap, this, a#0, b#0));

// frame axiom for _module.Universe.outlives
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, this: ref, a#0: ref, b#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.outlives($ly, $h1, this, a#0, b#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Universe())
       && (_module.Universe.outlives#canCall($h0, this, a#0, b#0)
         || ($Is(a#0, Tclass._module.Lifetime()) && $Is(b#0, Tclass._module.Lifetime())))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null
           && (
            $o == this
             || (
              $Is($o, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o))
               && $f == _module.Lifetime.mightPointTo)
             || (
              $Is($o, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o))
               && $f == _module.Lifetime.mightPointFrom))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.outlives($ly, $h0, this, a#0, b#0)
       == _module.Universe.outlives($ly, $h1, this, a#0, b#0));

function _module.Universe.outlives#requires(LayerType, Heap, ref, ref, ref) : bool;

// #requires axiom for _module.Universe.outlives
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, b#0: ref :: 
  { _module.Universe.outlives#requires($ly, $Heap, this, a#0, b#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
       && $Is(a#0, Tclass._module.Lifetime())
       && $Is(b#0, Tclass._module.Lifetime())
     ==> _module.Universe.outlives#requires($ly, $Heap, this, a#0, b#0)
       == (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0))));

// 1st prefix predicate axiom for _module.Universe.outlives_h
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, b#0: ref :: 
    { _module.Universe.outlives($LS($ly), $Heap, this, a#0, b#0) } 
    $IsGoodHeap($Heap)
         && 
        this != null
         && $Is(this, Tclass._module.Universe())
         && $Is(a#0, Tclass._module.Lifetime())
         && $Is(b#0, Tclass._module.Lifetime())
         && _module.Universe.outlives($LS($ly), $Heap, this, a#0, b#0)
       ==> (exists _k#0: int :: 
        { _module.Universe.outlives_h($LS($ly), $Heap, this, _k#0, a#0, b#0) } 
        LitInt(0) <= _k#0
           && _module.Universe.outlives_h($LS($ly), $Heap, this, _k#0, a#0, b#0)));

// 2nd prefix predicate axiom
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, b#0: ref :: 
    { _module.Universe.outlives($LS($ly), $Heap, this, a#0, b#0) } 
    $IsGoodHeap($Heap)
         && 
        this != null
         && $Is(this, Tclass._module.Universe())
         && $Is(a#0, Tclass._module.Lifetime())
         && $Is(b#0, Tclass._module.Lifetime())
         && (exists _k#0: int :: 
          { _module.Universe.outlives_h($LS($ly), $Heap, this, _k#0, a#0, b#0) } 
          LitInt(0) <= _k#0
             && _module.Universe.outlives_h($LS($ly), $Heap, this, _k#0, a#0, b#0))
       ==> _module.Universe.outlives($LS($ly), $Heap, this, a#0, b#0));

// 3rd prefix predicate axiom
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, b#0: ref, _k#0: int :: 
    { _module.Universe.outlives_h($ly, $Heap, this, _k#0, a#0, b#0) } 
    $IsGoodHeap($Heap)
         && 
        this != null
         && $Is(this, Tclass._module.Universe())
         && $Is(a#0, Tclass._module.Lifetime())
         && $Is(b#0, Tclass._module.Lifetime())
         && _k#0 == 0
       ==> !_module.Universe.outlives_h($ly, $Heap, this, _k#0, a#0, b#0));

procedure {:verboseName "Universe.outlives (well-formedness)"} CheckWellformed$$_module.Universe.outlives(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    a#0: ref where $Is(a#0, Tclass._module.Lifetime()), 
    b#0: ref where $Is(b#0, Tclass._module.Lifetime()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.outlives (well-formedness)"} CheckWellformed$$_module.Universe.outlives(this: ref, a#0: ref, b#0: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var l#0: ref;
  var l#1: ref;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var x#1: ref;
  var ##a#0: ref;
  var ##x#0: ref;
  var ##b#0: ref;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || (
            $Is($o, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
             && $f == _module.Lifetime.mightPointTo)
           || (
            $Is($o, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
             && $f == _module.Lifetime.mightPointFrom));
    // Check well-formedness of preconditions, and then assume them
    b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
    assume {:id "id477"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0));
    b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
    assume {:id "id478"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0));
    assert {:id "id479"} b$reqreads#0;
    assert {:id "id480"} b$reqreads#1;
    // Check well-formedness of the reads clause
    // Begin Comprehension WF check
    havoc l#0;
    if ($Is(l#0, Tclass._module.Lifetime())
       && $IsAlloc(l#0, Tclass._module.Lifetime(), $Heap))
    {
        b$reqreads#2 := $_ReadsFrame[this, _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(l#0)))
        {
        }
    }

    // End Comprehension WF check
    // Begin Comprehension WF check
    havoc l#1;
    if ($Is(l#1, Tclass._module.Lifetime())
       && $IsAlloc(l#1, Tclass._module.Lifetime(), $Heap))
    {
        b$reqreads#3 := $_ReadsFrame[this, _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(l#1)))
        {
        }
    }

    // End Comprehension WF check
    assert {:id "id481"} b$reqreads#2;
    assert {:id "id482"} b$reqreads#3;
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id483"} b#0 != null;
        b$reqreads#4 := $_ReadsFrame[b#0, _module.Lifetime.mightPointTo];
        if (!Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0)))
        {
            // Begin Comprehension WF check
            havoc x#1;
            if ($Is(x#1, Tclass._module.Lifetime())
               && $IsAlloc(x#1, Tclass._module.Lifetime(), $Heap))
            {
                b$reqreads#5 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#1)))
                {
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
                    ##a#0 := a#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##a#0, Tclass._module.Lifetime(), $Heap);
                    ##x#0 := x#1;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0, Tclass._module.Lifetime(), $Heap);
                    ##b#0 := b#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##b#0, Tclass._module.Lifetime(), $Heap);
                    assert {:id "id484"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0));
                    assert {:id "id485"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##x#0));
                    assert {:id "id486"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0));
                    assume Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0))
                       && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##x#0))
                       && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0));
                    b$reqreads#6 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && (
                            $o == this
                             || (
                              $Is($o, Tclass._module.Lifetime())
                               && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
                               && $f == _module.Lifetime.mightPointTo)
                             || (
                              $Is($o, Tclass._module.Lifetime())
                               && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
                               && $f == _module.Lifetime.mightPointFrom))
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Universe.outlivesThrough#canCall($Heap, this, a#0, x#1, b#0);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id487"} _module.Universe.outlives($LS($LZ), $Heap, this, a#0, b#0)
           == (Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
             || (exists x#2: ref :: 
              { _module.Universe.outlivesThrough($LS($LZ), $Heap, this, a#0, x#2, b#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#2)) } 
              $Is(x#2, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#2))
                 && _module.Universe.outlivesThrough($LS($LZ), $Heap, this, a#0, x#2, b#0)));
        assume !Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
           ==> (forall x#2: ref :: 
            { _module.Universe.outlivesThrough($LS($LZ), $Heap, this, a#0, x#2, b#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#2)) } 
            $Is(x#2, Tclass._module.Lifetime())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#2))
               ==> _module.Universe.outlivesThrough#canCall($Heap, this, a#0, x#2, b#0));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.outlives($LS($LZ), $Heap, this, a#0, b#0), TBool);
        assert {:id "id488"} b$reqreads#4;
        assert {:id "id489"} b$reqreads#5;
        assert {:id "id490"} b$reqreads#6;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.outlives#
function _module.Universe.outlives_h($ly: LayerType, $heap: Heap, this: ref, _k#0: int, a#0: ref, b#0: ref) : bool
uses {
// definition axiom for _module.Universe.outlives_h (revealed)
axiom {:id "id491"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, _k#0: int, a#0: ref, b#0: ref :: 
    { _module.Universe.outlives_h($LS($ly), $Heap, this, _k#0, a#0, b#0), $IsGoodHeap($Heap) } 
    _module.Universe.outlives_h#canCall($Heap, this, _k#0, a#0, b#0)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap)
           && LitInt(0) <= _k#0
           && $Is(a#0, Tclass._module.Lifetime())
           && $Is(b#0, Tclass._module.Lifetime())
           && 
          Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0)))
       ==> (0 < _k#0
           ==> 
          !Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
           ==> (forall x#3: ref :: 
            { _module.Universe.outlivesThrough_h($LS($LZ), $Heap, this, _k#0 - 1, a#0, x#3, b#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#3)) } 
            $Is(x#3, Tclass._module.Lifetime())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#3))
               ==> _module.Universe.outlivesThrough_h#canCall($Heap, this, _k#0 - 1, a#0, x#3, b#0)))
         && _module.Universe.outlives_h($LS($ly), $Heap, this, _k#0, a#0, b#0)
           == (0 < _k#0
             && (Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
               || (exists x#3: ref :: 
                { _module.Universe.outlivesThrough_h($LS($LZ), $Heap, this, _k#0 - 1, a#0, x#3, b#0) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#3)) } 
                $Is(x#3, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#3))
                   && _module.Universe.outlivesThrough_h($LS($LZ), $Heap, this, _k#0 - 1, a#0, x#3, b#0)))));
}

function _module.Universe.outlives_h#canCall($heap: Heap, this: ref, _k#0: int, a#0: ref, b#0: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, _k#0: int, a#0: ref, b#0: ref :: 
  { _module.Universe.outlives_h($LS($ly), $Heap, this, _k#0, a#0, b#0) } 
  _module.Universe.outlives_h($LS($ly), $Heap, this, _k#0, a#0, b#0)
     == _module.Universe.outlives_h($ly, $Heap, this, _k#0, a#0, b#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, _k#0: int, a#0: ref, b#0: ref :: 
  { _module.Universe.outlives_h(AsFuelBottom($ly), $Heap, this, _k#0, a#0, b#0) } 
  _module.Universe.outlives_h($ly, $Heap, this, _k#0, a#0, b#0)
     == _module.Universe.outlives_h($LZ, $Heap, this, _k#0, a#0, b#0));

// frame axiom for _module.Universe.outlives_h
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, this: ref, _k#0: int, a#0: ref, b#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.outlives_h($ly, $h1, this, _k#0, a#0, b#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Universe())
       && (_module.Universe.outlives_h#canCall($h0, this, _k#0, a#0, b#0)
         || (
          LitInt(0) <= _k#0
           && $Is(a#0, Tclass._module.Lifetime())
           && $Is(b#0, Tclass._module.Lifetime())))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null
           && (
            $o == this
             || (
              $Is($o, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o))
               && $f == _module.Lifetime.mightPointTo)
             || (
              $Is($o, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o))
               && $f == _module.Lifetime.mightPointFrom))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.outlives_h($ly, $h0, this, _k#0, a#0, b#0)
       == _module.Universe.outlives_h($ly, $h1, this, _k#0, a#0, b#0));

function _module.Universe.outlives_h#requires(LayerType, Heap, ref, int, ref, ref) : bool;

// #requires axiom for _module.Universe.outlives_h
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, _k#0: int, a#0: ref, b#0: ref :: 
  { _module.Universe.outlives_h#requires($ly, $Heap, this, _k#0, a#0, b#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
       && LitInt(0) <= _k#0
       && $Is(a#0, Tclass._module.Lifetime())
       && $Is(b#0, Tclass._module.Lifetime())
     ==> _module.Universe.outlives_h#requires($ly, $Heap, this, _k#0, a#0, b#0)
       == (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0))));

// function declaration for _module.Universe.outlivesThrough
function _module.Universe.outlivesThrough($ly: LayerType, $heap: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref) : bool
uses {
// definition axiom for _module.Universe.outlivesThrough (revealed)
axiom {:id "id492"} 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref :: 
    { _module.Universe.outlivesThrough($LS($ly), $Heap, this, a#0, x#0, b#0), $IsGoodHeap($Heap) } 
    _module.Universe.outlivesThrough#canCall($Heap, this, a#0, x#0, b#0)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap)
           && $Is(a#0, Tclass._module.Lifetime())
           && $Is(x#0, Tclass._module.Lifetime())
           && $Is(b#0, Tclass._module.Lifetime())
           && 
          Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0)))
       ==> (Set#IsMember($Unbox(read($Heap, a#0, _module.Lifetime.mightPointFrom)): Set, $Box(x#0))
             || Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(x#0))
           ==> _module.Universe.outlives#canCall($Heap, this, a#0, x#0)
             && (_module.Universe.outlives($ly, $Heap, this, a#0, x#0)
               ==> _module.Universe.outlives#canCall($Heap, this, x#0, b#0)))
         && _module.Universe.outlivesThrough($LS($ly), $Heap, this, a#0, x#0, b#0)
           == (
            (Set#IsMember($Unbox(read($Heap, a#0, _module.Lifetime.mightPointFrom)): Set, $Box(x#0))
               || Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(x#0)))
             && _module.Universe.outlives($ly, $Heap, this, a#0, x#0)
             && _module.Universe.outlives($ly, $Heap, this, x#0, b#0)));
}

function _module.Universe.outlivesThrough#canCall($heap: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref :: 
  { _module.Universe.outlivesThrough($LS($ly), $Heap, this, a#0, x#0, b#0) } 
  _module.Universe.outlivesThrough($LS($ly), $Heap, this, a#0, x#0, b#0)
     == _module.Universe.outlivesThrough($ly, $Heap, this, a#0, x#0, b#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref :: 
  { _module.Universe.outlivesThrough(AsFuelBottom($ly), $Heap, this, a#0, x#0, b#0) } 
  _module.Universe.outlivesThrough($ly, $Heap, this, a#0, x#0, b#0)
     == _module.Universe.outlivesThrough($LZ, $Heap, this, a#0, x#0, b#0));

// frame axiom for _module.Universe.outlivesThrough
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.outlivesThrough($ly, $h1, this, a#0, x#0, b#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Universe())
       && (_module.Universe.outlivesThrough#canCall($h0, this, a#0, x#0, b#0)
         || (
          $Is(a#0, Tclass._module.Lifetime())
           && $Is(x#0, Tclass._module.Lifetime())
           && $Is(b#0, Tclass._module.Lifetime())))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null
           && (
            $o == this
             || (
              $Is($o, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o))
               && $f == _module.Lifetime.mightPointTo)
             || (
              $Is($o, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o))
               && $f == _module.Lifetime.mightPointFrom))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.outlivesThrough($ly, $h0, this, a#0, x#0, b#0)
       == _module.Universe.outlivesThrough($ly, $h1, this, a#0, x#0, b#0));

function _module.Universe.outlivesThrough#requires(LayerType, Heap, ref, ref, ref, ref) : bool;

// #requires axiom for _module.Universe.outlivesThrough
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref :: 
  { _module.Universe.outlivesThrough#requires($ly, $Heap, this, a#0, x#0, b#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
       && $Is(a#0, Tclass._module.Lifetime())
       && $Is(x#0, Tclass._module.Lifetime())
       && $Is(b#0, Tclass._module.Lifetime())
     ==> _module.Universe.outlivesThrough#requires($ly, $Heap, this, a#0, x#0, b#0)
       == (
        Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0))));

// 1st prefix predicate axiom for _module.Universe.outlivesThrough_h
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref :: 
    { _module.Universe.outlivesThrough($LS($ly), $Heap, this, a#0, x#0, b#0) } 
    $IsGoodHeap($Heap)
         && 
        this != null
         && $Is(this, Tclass._module.Universe())
         && $Is(a#0, Tclass._module.Lifetime())
         && $Is(x#0, Tclass._module.Lifetime())
         && $Is(b#0, Tclass._module.Lifetime())
         && _module.Universe.outlivesThrough($LS($ly), $Heap, this, a#0, x#0, b#0)
       ==> (exists _k#0: int :: 
        { _module.Universe.outlivesThrough_h($LS($ly), $Heap, this, _k#0, a#0, x#0, b#0) } 
        LitInt(0) <= _k#0
           && _module.Universe.outlivesThrough_h($LS($ly), $Heap, this, _k#0, a#0, x#0, b#0)));

// 2nd prefix predicate axiom
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref :: 
    { _module.Universe.outlivesThrough($LS($ly), $Heap, this, a#0, x#0, b#0) } 
    $IsGoodHeap($Heap)
         && 
        this != null
         && $Is(this, Tclass._module.Universe())
         && $Is(a#0, Tclass._module.Lifetime())
         && $Is(x#0, Tclass._module.Lifetime())
         && $Is(b#0, Tclass._module.Lifetime())
         && (exists _k#0: int :: 
          { _module.Universe.outlivesThrough_h($LS($ly), $Heap, this, _k#0, a#0, x#0, b#0) } 
          LitInt(0) <= _k#0
             && _module.Universe.outlivesThrough_h($LS($ly), $Heap, this, _k#0, a#0, x#0, b#0))
       ==> _module.Universe.outlivesThrough($LS($ly), $Heap, this, a#0, x#0, b#0));

// 3rd prefix predicate axiom
axiom 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, a#0: ref, x#0: ref, b#0: ref, _k#0: int :: 
    { _module.Universe.outlivesThrough_h($ly, $Heap, this, _k#0, a#0, x#0, b#0) } 
    $IsGoodHeap($Heap)
         && 
        this != null
         && $Is(this, Tclass._module.Universe())
         && $Is(a#0, Tclass._module.Lifetime())
         && $Is(x#0, Tclass._module.Lifetime())
         && $Is(b#0, Tclass._module.Lifetime())
         && _k#0 == 0
       ==> !_module.Universe.outlivesThrough_h($ly, $Heap, this, _k#0, a#0, x#0, b#0));

procedure {:verboseName "Universe.outlivesThrough (well-formedness)"} CheckWellformed$$_module.Universe.outlivesThrough(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    a#0: ref where $Is(a#0, Tclass._module.Lifetime()), 
    x#0: ref where $Is(x#0, Tclass._module.Lifetime()), 
    b#0: ref where $Is(b#0, Tclass._module.Lifetime()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.outlivesThrough (well-formedness)"} CheckWellformed$$_module.Universe.outlivesThrough(this: ref, a#0: ref, x#0: ref, b#0: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var l#0: ref;
  var l#1: ref;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var ##a#0: ref;
  var ##b#0: ref;
  var ##a#1: ref;
  var ##b#1: ref;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || (
            $Is($o, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
             && $f == _module.Lifetime.mightPointTo)
           || (
            $Is($o, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
             && $f == _module.Lifetime.mightPointFrom));
    // Check well-formedness of preconditions, and then assume them
    b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
    assume {:id "id493"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0));
    b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
    assume {:id "id494"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0));
    b$reqreads#2 := $_ReadsFrame[this, _module.Universe.content];
    assume {:id "id495"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0));
    assert {:id "id496"} b$reqreads#0;
    assert {:id "id497"} b$reqreads#1;
    assert {:id "id498"} b$reqreads#2;
    // Check well-formedness of the reads clause
    // Begin Comprehension WF check
    havoc l#0;
    if ($Is(l#0, Tclass._module.Lifetime())
       && $IsAlloc(l#0, Tclass._module.Lifetime(), $Heap))
    {
        b$reqreads#3 := $_ReadsFrame[this, _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(l#0)))
        {
        }
    }

    // End Comprehension WF check
    // Begin Comprehension WF check
    havoc l#1;
    if ($Is(l#1, Tclass._module.Lifetime())
       && $IsAlloc(l#1, Tclass._module.Lifetime(), $Heap))
    {
        b$reqreads#4 := $_ReadsFrame[this, _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(l#1)))
        {
        }
    }

    // End Comprehension WF check
    assert {:id "id499"} b$reqreads#3;
    assert {:id "id500"} b$reqreads#4;
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id501"} a#0 != null;
        b$reqreads#5 := $_ReadsFrame[a#0, _module.Lifetime.mightPointFrom];
        if (!Set#IsMember($Unbox(read($Heap, a#0, _module.Lifetime.mightPointFrom)): Set, $Box(x#0)))
        {
            assert {:id "id502"} b#0 != null;
            b$reqreads#6 := $_ReadsFrame[b#0, _module.Lifetime.mightPointTo];
        }

        if (Set#IsMember($Unbox(read($Heap, a#0, _module.Lifetime.mightPointFrom)): Set, $Box(x#0))
           || Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(x#0)))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            ##a#0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#0, Tclass._module.Lifetime(), $Heap);
            ##b#0 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0, Tclass._module.Lifetime(), $Heap);
            assert {:id "id503"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0));
            assert {:id "id504"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0));
            assume Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0))
               && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0));
            b$reqreads#7 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && (
                    $o == this
                     || (
                      $Is($o, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
                       && $f == _module.Lifetime.mightPointTo)
                     || (
                      $Is($o, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
                       && $f == _module.Lifetime.mightPointFrom))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.outlives#canCall($Heap, this, a#0, x#0);
        }

        if ((Set#IsMember($Unbox(read($Heap, a#0, _module.Lifetime.mightPointFrom)): Set, $Box(x#0))
             || Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(x#0)))
           && _module.Universe.outlives($LS($LZ), $Heap, this, a#0, x#0))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            ##a#1 := x#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#1, Tclass._module.Lifetime(), $Heap);
            ##b#1 := b#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#1, Tclass._module.Lifetime(), $Heap);
            assert {:id "id505"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#1));
            assert {:id "id506"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#1));
            assume Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#1))
               && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#1));
            b$reqreads#8 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && (
                    $o == this
                     || (
                      $Is($o, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
                       && $f == _module.Lifetime.mightPointTo)
                     || (
                      $Is($o, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o))
                       && $f == _module.Lifetime.mightPointFrom))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.outlives#canCall($Heap, this, x#0, b#0);
        }

        assume {:id "id507"} _module.Universe.outlivesThrough($LS($LZ), $Heap, this, a#0, x#0, b#0)
           == (
            (Set#IsMember($Unbox(read($Heap, a#0, _module.Lifetime.mightPointFrom)): Set, $Box(x#0))
               || Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(x#0)))
             && _module.Universe.outlives($LS($LZ), $Heap, this, a#0, x#0)
             && _module.Universe.outlives($LS($LZ), $Heap, this, x#0, b#0));
        assume Set#IsMember($Unbox(read($Heap, a#0, _module.Lifetime.mightPointFrom)): Set, $Box(x#0))
             || Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(x#0))
           ==> _module.Universe.outlives#canCall($Heap, this, a#0, x#0)
             && (_module.Universe.outlives($LS($LZ), $Heap, this, a#0, x#0)
               ==> _module.Universe.outlives#canCall($Heap, this, x#0, b#0));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.outlivesThrough($LS($LZ), $Heap, this, a#0, x#0, b#0), TBool);
        assert {:id "id508"} b$reqreads#5;
        assert {:id "id509"} b$reqreads#6;
        assert {:id "id510"} b$reqreads#7;
        assert {:id "id511"} b$reqreads#8;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.outlivesThrough#
function _module.Universe.outlivesThrough_h($ly: LayerType, $heap: Heap, this: ref, _k#0: int, a#0: ref, x#0: ref, b#0: ref)
   : bool
uses {
// definition axiom for _module.Universe.outlivesThrough_h (revealed)
axiom {:id "id512"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, this: ref, _k#0: int, a#0: ref, x#0: ref, b#0: ref :: 
    { _module.Universe.outlivesThrough_h($LS($ly), $Heap, this, _k#0, a#0, x#0, b#0), $IsGoodHeap($Heap) } 
    _module.Universe.outlivesThrough_h#canCall($Heap, this, _k#0, a#0, x#0, b#0)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap)
           && LitInt(0) <= _k#0
           && $Is(a#0, Tclass._module.Lifetime())
           && $Is(x#0, Tclass._module.Lifetime())
           && $Is(b#0, Tclass._module.Lifetime())
           && 
          Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0)))
       ==> (0 < _k#0
           ==> 
          Set#IsMember($Unbox(read($Heap, a#0, _module.Lifetime.mightPointFrom)): Set, $Box(x#0))
             || Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(x#0))
           ==> _module.Universe.outlives_h#canCall($Heap, this, _k#0 - 1, a#0, x#0)
             && (_module.Universe.outlives_h($LS($LZ), $Heap, this, _k#0 - 1, a#0, x#0)
               ==> _module.Universe.outlives_h#canCall($Heap, this, _k#0 - 1, x#0, b#0)))
         && _module.Universe.outlivesThrough_h($LS($ly), $Heap, this, _k#0, a#0, x#0, b#0)
           == (0 < _k#0
             && 
            (Set#IsMember($Unbox(read($Heap, a#0, _module.Lifetime.mightPointFrom)): Set, $Box(x#0))
               || Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(x#0)))
             && _module.Universe.outlives_h($LS($LZ), $Heap, this, _k#0 - 1, a#0, x#0)
             && _module.Universe.outlives_h($LS($LZ), $Heap, this, _k#0 - 1, x#0, b#0)));
}

function _module.Universe.outlivesThrough_h#canCall($heap: Heap, this: ref, _k#0: int, a#0: ref, x#0: ref, b#0: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, _k#0: int, a#0: ref, x#0: ref, b#0: ref :: 
  { _module.Universe.outlivesThrough_h($LS($ly), $Heap, this, _k#0, a#0, x#0, b#0) } 
  _module.Universe.outlivesThrough_h($LS($ly), $Heap, this, _k#0, a#0, x#0, b#0)
     == _module.Universe.outlivesThrough_h($ly, $Heap, this, _k#0, a#0, x#0, b#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, _k#0: int, a#0: ref, x#0: ref, b#0: ref :: 
  { _module.Universe.outlivesThrough_h(AsFuelBottom($ly), $Heap, this, _k#0, a#0, x#0, b#0) } 
  _module.Universe.outlivesThrough_h($ly, $Heap, this, _k#0, a#0, x#0, b#0)
     == _module.Universe.outlivesThrough_h($LZ, $Heap, this, _k#0, a#0, x#0, b#0));

// frame axiom for _module.Universe.outlivesThrough_h
axiom (forall $ly: LayerType, 
    $h0: Heap, 
    $h1: Heap, 
    this: ref, 
    _k#0: int, 
    a#0: ref, 
    x#0: ref, 
    b#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.outlivesThrough_h($ly, $h1, this, _k#0, a#0, x#0, b#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Universe())
       && (_module.Universe.outlivesThrough_h#canCall($h0, this, _k#0, a#0, x#0, b#0)
         || (
          LitInt(0) <= _k#0
           && $Is(a#0, Tclass._module.Lifetime())
           && $Is(x#0, Tclass._module.Lifetime())
           && $Is(b#0, Tclass._module.Lifetime())))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null
           && (
            $o == this
             || (
              $Is($o, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o))
               && $f == _module.Lifetime.mightPointTo)
             || (
              $Is($o, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o))
               && $f == _module.Lifetime.mightPointFrom))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.outlivesThrough_h($ly, $h0, this, _k#0, a#0, x#0, b#0)
       == _module.Universe.outlivesThrough_h($ly, $h1, this, _k#0, a#0, x#0, b#0));

function _module.Universe.outlivesThrough_h#requires(LayerType, Heap, ref, int, ref, ref, ref) : bool;

// #requires axiom for _module.Universe.outlivesThrough_h
axiom (forall $ly: LayerType, $Heap: Heap, this: ref, _k#0: int, a#0: ref, x#0: ref, b#0: ref :: 
  { _module.Universe.outlivesThrough_h#requires($ly, $Heap, this, _k#0, a#0, x#0, b#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
       && LitInt(0) <= _k#0
       && $Is(a#0, Tclass._module.Lifetime())
       && $Is(x#0, Tclass._module.Lifetime())
       && $Is(b#0, Tclass._module.Lifetime())
     ==> _module.Universe.outlivesThrough_h#requires($ly, $Heap, this, _k#0, a#0, x#0, b#0)
       == (
        Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0))));

procedure {:verboseName "Universe.OutlivesImpliesAlive (well-formedness)"} CheckWellFormed$$_module.Universe.OutlivesImpliesAlive(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 18 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.OutlivesImpliesAlive (well-formedness)"} CheckWellFormed$$_module.Universe.OutlivesImpliesAlive(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var a#0: ref;
  var b#0: ref;
  var ##a#0: ref;
  var ##b#0: ref;


    // AddMethodImpl: OutlivesImpliesAlive, CheckWellFormed$$_module.Universe.OutlivesImpliesAlive
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, this);
    assume {:id "id513"} _module.Universe.globalInv($Heap, this);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc a#0;
    havoc b#0;
    assume $Is(a#0, Tclass._module.Lifetime())
       && $IsAlloc(a#0, Tclass._module.Lifetime(), $Heap)
       && 
      $Is(b#0, Tclass._module.Lifetime())
       && $IsAlloc(b#0, Tclass._module.Lifetime(), $Heap);
    if (*)
    {
        assume {:id "id514"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0));
        assume {:id "id515"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0));
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            ##a#0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#0, Tclass._module.Lifetime(), $Heap);
            ##b#0 := b#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0, Tclass._module.Lifetime(), $Heap);
            assert {:id "id516"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0));
            assert {:id "id517"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0));
            assume Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0))
               && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0));
            assume _module.Universe.outlives#canCall($Heap, this, a#0, b#0);
            assume {:id "id518"} _module.Universe.outlives($LS($LZ), $Heap, this, a#0, b#0);
            assert {:id "id519"} b#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(b#0), Tclass._module.Lifetime?(), $Heap);
            assume _module.Lifetime.alive#canCall($Heap, b#0);
            assume {:id "id520"} _module.Lifetime.alive($Heap, b#0);
            assert {:id "id521"} a#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(a#0), Tclass._module.Lifetime?(), $Heap);
            assume _module.Lifetime.alive#canCall($Heap, a#0);
            assume {:id "id522"} _module.Lifetime.alive($Heap, a#0);
        }
        else
        {
            assume {:id "id523"} _module.Universe.outlives($LS($LZ), $Heap, this, a#0, b#0)
                 && _module.Lifetime.alive($Heap, b#0)
               ==> _module.Lifetime.alive($Heap, a#0);
        }
    }
    else
    {
        assume {:id "id524"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0))
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0))
           ==> 
          _module.Universe.outlives($LS($LZ), $Heap, this, a#0, b#0)
             && _module.Lifetime.alive($Heap, b#0)
           ==> _module.Lifetime.alive($Heap, a#0);
    }

    assume {:id "id525"} (forall a#1: ref, b#1: ref :: 
      { _module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1) } 
      $Is(a#1, Tclass._module.Lifetime())
           && $Is(b#1, Tclass._module.Lifetime())
           && 
          Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#1))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#1))
         ==> 
        _module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1)
           && _module.Lifetime.alive($Heap, b#1)
         ==> _module.Lifetime.alive($Heap, a#1));
}



procedure {:verboseName "Universe.OutlivesImpliesAlive (call)"} Call$$_module.Universe.OutlivesImpliesAlive(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  // user-defined preconditions
  requires {:id "id526"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
  requires {:id "id527"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == this
                 && o#0 != this
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id528"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1) } 
    $Is(a#1, Tclass._module.Lifetime()) && $Is(b#1, Tclass._module.Lifetime())
       ==> 
      Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#1))
       ==> _module.Universe.outlives#canCall($Heap, this, a#1, b#1)
         && (_module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1)
           ==> _module.Lifetime.alive#canCall($Heap, b#1)
             && (_module.Lifetime.alive($Heap, b#1)
               ==> _module.Lifetime.alive#canCall($Heap, a#1))));
  free ensures {:id "id529"} (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1) } 
    $Is(a#1, Tclass._module.Lifetime())
         && $Is(b#1, Tclass._module.Lifetime())
         && 
        Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#1))
       ==> 
      _module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1)
         && _module.Lifetime.alive($Heap, b#1)
       ==> _module.Lifetime.alive($Heap, a#1));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.OutlivesImpliesAlive (correctness)"} Impl$$_module.Universe.OutlivesImpliesAlive(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 18 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id530"} _module.Universe.globalInv#canCall($Heap, this)
     && 
    _module.Universe.globalInv($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && (forall o#3: ref :: 
      { _module.Object.inv($Heap, o#3) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3))
         ==> _module.Object.inv($Heap, o#3));
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1) } 
    $Is(a#1, Tclass._module.Lifetime()) && $Is(b#1, Tclass._module.Lifetime())
       ==> 
      Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#1))
       ==> _module.Universe.outlives#canCall($Heap, this, a#1, b#1)
         && (_module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1)
           ==> _module.Lifetime.alive#canCall($Heap, b#1)
             && (_module.Lifetime.alive($Heap, b#1)
               ==> _module.Lifetime.alive#canCall($Heap, a#1))));
  ensures {:id "id531"} (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LS($LZ)), $Heap, this, a#1, b#1) } 
    $Is(a#1, Tclass._module.Lifetime())
         && $Is(b#1, Tclass._module.Lifetime())
         && 
        Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#1))
       ==> 
      _module.Universe.outlives($LS($LS($LZ)), $Heap, this, a#1, b#1)
         && _module.Lifetime.alive($Heap, b#1)
       ==> _module.Lifetime.alive($Heap, a#1));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.OutlivesImpliesAlive (correctness)"} Impl$$_module.Universe.OutlivesImpliesAlive(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var a#0_0: ref;
  var b#0_0: ref;
  var ##a#0_0: ref;
  var ##b#0_0: ref;
  var k#0_0: int where LitInt(0) <= k#0_0;
  var k#0_1: int;
  var ##_k#0_0: int;
  var ##a#0_1: ref;
  var ##b#0_1: ref;
  var a##0_0: ref;
  var b##0_0: ref;
  var k##0_0: int;

    // AddMethodImpl: OutlivesImpliesAlive, Impl$$_module.Universe.OutlivesImpliesAlive
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(177,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc a#0_0, b#0_0;
        assume $Is(a#0_0, Tclass._module.Lifetime()) && $Is(b#0_0, Tclass._module.Lifetime());
        if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0_0)))
        {
        }

        if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0_0))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0_0)))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            ##a#0_0 := a#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#0_0, Tclass._module.Lifetime(), $Heap);
            ##b#0_0 := b#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0_0, Tclass._module.Lifetime(), $Heap);
            assert {:id "id532"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0_0));
            assert {:id "id533"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0_0));
            assume _module.Universe.outlives#canCall($Heap, this, a#0_0, b#0_0);
        }

        if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0_0))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0_0))
           && _module.Universe.outlives($LS($LZ), $Heap, this, a#0_0, b#0_0))
        {
            assert {:id "id534"} {:subsumption 0} b#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(b#0_0), Tclass._module.Lifetime?(), $Heap);
            assume _module.Lifetime.alive#canCall($Heap, b#0_0);
        }

        assume Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0_0))
           ==> 
          Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0_0))
           ==> _module.Universe.outlives#canCall($Heap, this, a#0_0, b#0_0)
             && (_module.Universe.outlives($LS($LZ), $Heap, this, a#0_0, b#0_0)
               ==> _module.Lifetime.alive#canCall($Heap, b#0_0));
        assume {:id "id535"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0_0))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0_0))
           && _module.Universe.outlives($LS($LZ), $Heap, this, a#0_0, b#0_0)
           && _module.Lifetime.alive($Heap, b#0_0);
        if (*)
        {
            assert {:id "id536"} {:subsumption 0} a#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(a#0_0), Tclass._module.Lifetime?(), $Heap);
            assume _module.Lifetime.alive#canCall($Heap, a#0_0);
            assume _module.Lifetime.alive#canCall($Heap, a#0_0);
            assume {:id "id537"} _module.Lifetime.alive($Heap, a#0_0);
            assume false;
        }

        // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(180,18)
        havoc k#0_1;
        if (LitInt(0) <= k#0_1)
        {
            ##_k#0_0 := k#0_1;
            ##a#0_1 := a#0_0;
            ##b#0_1 := b#0_0;
            assert {:id "id538"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assert {:id "id539"} $IsAlloc(a#0_0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id540"} $IsAlloc(b#0_0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id541"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0_1));
            assert {:id "id542"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0_1));
            assume _module.Universe.outlives_h#canCall(old($Heap), this, k#0_1, a#0_0, b#0_0);
            assume _module.Universe.outlives_h#canCall(old($Heap), this, k#0_1, a#0_0, b#0_0);
        }

        assert {:id "id543"} ($Is(LitInt(0), Tclass._System.nat())
             && _module.Universe.outlives_h($LS($LZ), old($Heap), this, LitInt(0), a#0_0, b#0_0))
           || 
          ($Is(LitInt(0), Tclass._System.nat())
             && _module.Universe.outlives_h($LS($LZ), old($Heap), this, LitInt(0), a#0_0, b#0_0))
           || (exists $as#k0_0#0_0: int :: 
            LitInt(0) <= $as#k0_0#0_0
               && _module.Universe.outlives_h($LS($LZ), old($Heap), this, $as#k0_0#0_0, a#0_0, b#0_0));
        havoc k#0_0;
        assume {:id "id544"} _module.Universe.outlives_h($LS($LZ), old($Heap), this, k#0_0, a#0_0, b#0_0);
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(181,33)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assume true;
        // ProcessCallStmt: CheckSubrange
        a##0_0 := a#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        b##0_0 := b#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        k##0_0 := k#0_0;
        call {:id "id545"} Call$$_module.Universe.OutlivesImpliesAliveHelper(this, a##0_0, b##0_0, k##0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id546"} _module.Lifetime.alive#canCall($Heap, a#0_0)
           ==> _module.Lifetime.alive($Heap, a#0_0)
             || $Unbox(read($Heap, a#0_0, _module.Lifetime.owner)): ref != null;
        assume false;
    }
    else
    {
        assume (forall a#0_1: ref, b#0_1: ref :: 
          { _module.Lifetime.alive($Heap, a#0_1), _module.Lifetime.alive($Heap, b#0_1) } 
            { _module.Lifetime.alive($Heap, a#0_1), Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0_1)) } 
            { _module.Lifetime.alive($Heap, b#0_1), Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0_1)) } 
            { _module.Universe.outlives($LS($LZ), $Heap, this, a#0_1, b#0_1) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0_1)), Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0_1)) } 
          $Is(a#0_1, Tclass._module.Lifetime())
               && $Is(b#0_1, Tclass._module.Lifetime())
               && 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0_1))
               && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0_1))
               && _module.Universe.outlives($LS($LZ), $Heap, this, a#0_1, b#0_1)
               && _module.Lifetime.alive($Heap, b#0_1)
             ==> _module.Lifetime.alive($Heap, a#0_1));
    }
}



procedure {:verboseName "Universe.OutlivesImpliesAliveHelper (well-formedness)"} CheckWellFormed$$_module.Universe.OutlivesImpliesAliveHelper(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    a#0: ref
       where $Is(a#0, Tclass._module.Lifetime())
         && $IsAlloc(a#0, Tclass._module.Lifetime(), $Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Lifetime())
         && $IsAlloc(b#0, Tclass._module.Lifetime(), $Heap), 
    k#0: int where LitInt(0) <= k#0);
  free requires 17 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.OutlivesImpliesAliveHelper (well-formedness)"} CheckWellFormed$$_module.Universe.OutlivesImpliesAliveHelper(this: ref, a#0: ref, b#0: ref, k#0: int)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##_k#0: int;
  var ##a#0: ref;
  var ##b#0: ref;


    // AddMethodImpl: OutlivesImpliesAliveHelper, CheckWellFormed$$_module.Universe.OutlivesImpliesAliveHelper
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, this);
    assume {:id "id547"} _module.Universe.globalInv($Heap, this);
    assume {:id "id548"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0));
    assume {:id "id549"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##_k#0 := k#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##_k#0, Tclass._System.nat(), $Heap);
    ##a#0 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#0, Tclass._module.Lifetime(), $Heap);
    ##b#0 := b#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#0, Tclass._module.Lifetime(), $Heap);
    assert {:id "id550"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0));
    assert {:id "id551"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0));
    assume Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0))
       && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0));
    assume _module.Universe.outlives_h#canCall($Heap, this, k#0, a#0, b#0);
    assume {:id "id552"} _module.Universe.outlives_h($LS($LZ), $Heap, this, k#0, a#0, b#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    if (*)
    {
        assert {:id "id553"} b#0 != null;
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(b#0), Tclass._module.Lifetime?(), $Heap);
        assume _module.Lifetime.alive#canCall($Heap, b#0);
        assume {:id "id554"} _module.Lifetime.alive($Heap, b#0);
        assert {:id "id555"} a#0 != null;
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(a#0), Tclass._module.Lifetime?(), $Heap);
        assume _module.Lifetime.alive#canCall($Heap, a#0);
        assume {:id "id556"} _module.Lifetime.alive($Heap, a#0);
    }
    else
    {
        assume {:id "id557"} _module.Lifetime.alive($Heap, b#0) ==> _module.Lifetime.alive($Heap, a#0);
    }
}



procedure {:verboseName "Universe.OutlivesImpliesAliveHelper (call)"} Call$$_module.Universe.OutlivesImpliesAliveHelper(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    a#0: ref
       where $Is(a#0, Tclass._module.Lifetime())
         && $IsAlloc(a#0, Tclass._module.Lifetime(), $Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Lifetime())
         && $IsAlloc(b#0, Tclass._module.Lifetime(), $Heap), 
    k#0: int where LitInt(0) <= k#0);
  // user-defined preconditions
  requires {:id "id558"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
  requires {:id "id559"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == this
                 && o#0 != this
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id560"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id561"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0));
  requires {:id "id562"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0));
  requires {:id "id563"} _module.Universe.outlives_h#canCall($Heap, this, k#0, a#0, b#0)
     ==> _module.Universe.outlives_h($LS($LZ), $Heap, this, k#0, a#0, b#0) || 0 < k#0;
  requires {:id "id564"} _module.Universe.outlives_h#canCall($Heap, this, k#0, a#0, b#0)
     ==> _module.Universe.outlives_h($LS($LZ), $Heap, this, k#0, a#0, b#0)
       || 
      Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
       || (exists x#0: ref :: 
        { _module.Universe.outlivesThrough_h($LS($LS($LZ)), $Heap, this, k#0 - 1, a#0, x#0, b#0) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0)) } 
        $Is(x#0, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0))
           && _module.Universe.outlivesThrough_h($LS($LS($LZ)), $Heap, this, k#0 - 1, a#0, x#0, b#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.alive#canCall($Heap, b#0)
     && (_module.Lifetime.alive($Heap, b#0)
       ==> _module.Lifetime.alive#canCall($Heap, a#0));
  free ensures {:id "id565"} _module.Lifetime.alive($Heap, b#0)
     ==> _module.Lifetime.alive#canCall($Heap, a#0)
       && 
      _module.Lifetime.alive($Heap, a#0)
       && $Unbox(read($Heap, a#0, _module.Lifetime.owner)): ref != null;
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.OutlivesImpliesAliveHelper (correctness)"} Impl$$_module.Universe.OutlivesImpliesAliveHelper(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    a#0: ref
       where $Is(a#0, Tclass._module.Lifetime())
         && $IsAlloc(a#0, Tclass._module.Lifetime(), $Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Lifetime())
         && $IsAlloc(b#0, Tclass._module.Lifetime(), $Heap), 
    k#0: int where LitInt(0) <= k#0)
   returns ($_reverifyPost: bool);
  free requires 17 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id566"} _module.Universe.globalInv#canCall($Heap, this)
     && 
    _module.Universe.globalInv($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && (forall o#3: ref :: 
      { _module.Object.inv($Heap, o#3) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3))
         ==> _module.Object.inv($Heap, o#3));
  requires {:id "id567"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(a#0));
  requires {:id "id568"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(b#0));
  free requires {:id "id569"} _module.Universe.outlives_h#canCall($Heap, this, k#0, a#0, b#0)
     && 
    _module.Universe.outlives_h($LS($LZ), $Heap, this, k#0, a#0, b#0)
     && 
    0 < k#0
     && (Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
       || (exists x#1: ref :: 
        { _module.Universe.outlivesThrough_h($LS($LZ), $Heap, this, k#0 - 1, a#0, x#1, b#0) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#1)) } 
        $Is(x#1, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#1))
           && _module.Universe.outlivesThrough_h($LS($LZ), $Heap, this, k#0 - 1, a#0, x#1, b#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.alive#canCall($Heap, b#0)
     && (_module.Lifetime.alive($Heap, b#0)
       ==> _module.Lifetime.alive#canCall($Heap, a#0));
  ensures {:id "id570"} _module.Lifetime.alive($Heap, b#0)
     ==> 
    _module.Lifetime.alive#canCall($Heap, a#0)
     ==> _module.Lifetime.alive($Heap, a#0)
       || $Unbox(read($Heap, a#0, _module.Lifetime.owner)): ref != null;
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.OutlivesImpliesAliveHelper (correctness)"} Impl$$_module.Universe.OutlivesImpliesAliveHelper(this: ref, a#0: ref, b#0: ref, k#0: int) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var defass#x#0_0_0: bool;
  var x#0_0_0: ref
     where defass#x#0_0_0
       ==> $Is(x#0_0_0, Tclass._module.Lifetime())
         && $IsAlloc(x#0_0_0, Tclass._module.Lifetime(), $Heap);
  var x#0_0_1: ref;
  var ##_k#0_0_0: int;
  var ##a#0_0_0: ref;
  var ##x#0_0_0: ref;
  var ##b#0_0_0: ref;
  var a##0_0_0: ref;
  var b##0_0_0: ref;
  var k##0_0_0: int;
  var a##0_0_1: ref;
  var b##0_0_1: ref;
  var k##0_0_1: int;

    // AddMethodImpl: OutlivesImpliesAliveHelper, Impl$$_module.Universe.OutlivesImpliesAliveHelper
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#a0#0: ref, $ih#b0#0: ref, $ih#k0#0: int :: 
      { _module.Universe.outlives_h($LS($LZ), $Heap, this, $ih#k0#0, $ih#a0#0, $ih#b0#0) } 
      $Is($ih#a0#0, Tclass._module.Lifetime())
           && $Is($ih#b0#0, Tclass._module.Lifetime())
           && LitInt(0) <= $ih#k0#0
           && 
          _module.Universe.globalInv($initHeapForallStmt#0, this)
           && Set#IsMember($Unbox(read($initHeapForallStmt#0, this, _module.Universe.content)): Set, 
            $Box($ih#a0#0))
           && Set#IsMember($Unbox(read($initHeapForallStmt#0, this, _module.Universe.content)): Set, 
            $Box($ih#b0#0))
           && _module.Universe.outlives_h($LS($LZ), $initHeapForallStmt#0, this, $ih#k0#0, $ih#a0#0, $ih#b0#0)
           && (($ih#a0#0 == null && a#0 != null)
             || (($ih#a0#0 != null <==> a#0 != null)
               && (($ih#b0#0 == null && b#0 != null)
                 || (($ih#b0#0 != null <==> b#0 != null) && 0 <= $ih#k0#0 && $ih#k0#0 < k#0))))
         ==> 
        _module.Lifetime.alive($Heap, $ih#b0#0)
         ==> _module.Lifetime.alive($Heap, $ih#a0#0));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(189,5)
    assume true;
    if (k#0 > 0)
    {
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(190,7)
        assert {:id "id571"} b#0 != null;
        assume true;
        if (!Set#IsMember($Unbox(read($Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0)))
        {
            // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(191,25)
            havoc x#0_0_1;
            if ($Is(x#0_0_1, Tclass._module.Lifetime())
               && $IsAlloc(x#0_0_1, Tclass._module.Lifetime(), $Heap))
            {
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0_0_1)))
                {
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
                    assert {:id "id572"} $Is(k#0 - 1, Tclass._System.nat());
                    ##_k#0_0_0 := k#0 - 1;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##_k#0_0_0, Tclass._System.nat(), $Heap);
                    ##a#0_0_0 := a#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##a#0_0_0, Tclass._module.Lifetime(), $Heap);
                    ##x#0_0_0 := x#0_0_1;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##x#0_0_0, Tclass._module.Lifetime(), $Heap);
                    ##b#0_0_0 := b#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##b#0_0_0, Tclass._module.Lifetime(), $Heap);
                    assert {:id "id573"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0_0_0));
                    assert {:id "id574"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##x#0_0_0));
                    assert {:id "id575"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0_0_0));
                    assume _module.Universe.outlivesThrough_h#canCall($Heap, this, k#0 - 1, a#0, x#0_0_1, b#0);
                }

                assume Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0_0_1))
                   ==> _module.Universe.outlivesThrough_h#canCall($Heap, this, k#0 - 1, a#0, x#0_0_1, b#0);
            }

            assert {:id "id576"} ($Is(null, Tclass._module.Lifetime())
                 && 
                Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(null))
                 && _module.Universe.outlivesThrough_h($LS($LZ), $Heap, this, k#0 - 1, a#0, null, b#0))
               || (exists $as#x0_0_0#0_0_0: ref :: 
                $Is($as#x0_0_0#0_0_0, Tclass._module.Lifetime())
                   && 
                  Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($as#x0_0_0#0_0_0))
                   && _module.Universe.outlivesThrough_h($LS($LZ), $Heap, this, k#0 - 1, a#0, $as#x0_0_0#0_0_0, b#0));
            defass#x#0_0_0 := true;
            havoc x#0_0_0;
            assume {:id "id577"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0_0_0))
               && _module.Universe.outlivesThrough_h($LS($LZ), $Heap, this, k#0 - 1, a#0, x#0_0_0, b#0);
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(192,35)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_0 := a#0;
            assert {:id "id578"} defass#x#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            b##0_0_0 := x#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert {:id "id579"} $Is(k#0 - 2, Tclass._System.nat());
            k##0_0_0 := k#0 - 2;
            assert {:id "id580"} 0 <= k#0
               || (a##0_0_0 == null && a#0 != null)
               || (b##0_0_0 == null && b#0 != null)
               || k##0_0_0 == k#0;
            assert {:id "id581"} (a##0_0_0 == null && a#0 != null)
               || ((a##0_0_0 != null <==> a#0 != null)
                 && ((b##0_0_0 == null && b#0 != null)
                   || ((b##0_0_0 != null <==> b#0 != null) && k##0_0_0 < k#0)));
            call {:id "id582"} Call$$_module.Universe.OutlivesImpliesAliveHelper(this, a##0_0_0, b##0_0_0, k##0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(193,35)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            assert {:id "id583"} defass#x#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_1 := x#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            b##0_0_1 := b#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert {:id "id584"} $Is(k#0 - 2, Tclass._System.nat());
            k##0_0_1 := k#0 - 2;
            assert {:id "id585"} 0 <= k#0
               || (a##0_0_1 == null && a#0 != null)
               || (b##0_0_1 == null && b#0 != null)
               || k##0_0_1 == k#0;
            assert {:id "id586"} (a##0_0_1 == null && a#0 != null)
               || ((a##0_0_1 != null <==> a#0 != null)
                 && ((b##0_0_1 == null && b#0 != null)
                   || ((b##0_0_1 != null <==> b#0 != null) && k##0_0_1 < k#0)));
            call {:id "id587"} Call$$_module.Universe.OutlivesImpliesAliveHelper(this, a##0_0_1, b##0_0_1, k##0_0_1);
            // TrCallStmt: After ProcessCallStmt
        }
        else
        {
        }
    }
    else
    {
    }
}



procedure {:verboseName "Universe.FrameOutlives (well-formedness)"} CheckWellFormed$$_module.Universe.FrameOutlives(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.FrameOutlives (well-formedness)"} CheckWellFormed$$_module.Universe.FrameOutlives(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var l#0: ref;
  var a#0: ref;
  var b#0: ref;
  var ##a#0: ref;
  var ##b#0: ref;
  var ##a#1: ref;
  var ##b#1: ref;


    // AddMethodImpl: FrameOutlives, CheckWellFormed$$_module.Universe.FrameOutlives
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id588"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume {:id "id589"} Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
      $Unbox(read($Heap, this, _module.Universe.content)): Set);
    havoc l#0;
    assume $Is(l#0, Tclass._module.Lifetime())
       && $IsAlloc(l#0, Tclass._module.Lifetime(), $Heap);
    if (*)
    {
        assert {:id "id590"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume {:id "id591"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#0));
        assert {:id "id592"} l#0 != null;
        assert {:id "id593"} $IsAlloc(l#0, Tclass._module.Lifetime(), old($Heap));
        assert {:id "id594"} l#0 != null;
        assume {:id "id595"} Set#Subset($Unbox(read(old($Heap), l#0, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read($Heap, l#0, _module.Lifetime.mightPointFrom)): Set);
        assert {:id "id596"} l#0 != null;
        assert {:id "id597"} $IsAlloc(l#0, Tclass._module.Lifetime(), old($Heap));
        assert {:id "id598"} l#0 != null;
        assume {:id "id599"} Set#Subset($Unbox(read(old($Heap), l#0, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read($Heap, l#0, _module.Lifetime.mightPointTo)): Set);
    }
    else
    {
        assume {:id "id600"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#0))
           ==> Set#Subset($Unbox(read(old($Heap), l#0, _module.Lifetime.mightPointFrom)): Set, 
              $Unbox(read($Heap, l#0, _module.Lifetime.mightPointFrom)): Set)
             && Set#Subset($Unbox(read(old($Heap), l#0, _module.Lifetime.mightPointTo)): Set, 
              $Unbox(read($Heap, l#0, _module.Lifetime.mightPointTo)): Set);
    }

    assume {:id "id601"} (forall l#1: ref :: 
      { $Unbox(read($Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
        { $Unbox(read(old($Heap), l#1, _module.Lifetime.mightPointTo)): Set } 
        { $Unbox(read($Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
        { $Unbox(read(old($Heap), l#1, _module.Lifetime.mightPointFrom)): Set } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#1)) } 
      $Is(l#1, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#1))
         ==> Set#Subset($Unbox(read(old($Heap), l#1, _module.Lifetime.mightPointFrom)): Set, 
            $Unbox(read($Heap, l#1, _module.Lifetime.mightPointFrom)): Set)
           && Set#Subset($Unbox(read(old($Heap), l#1, _module.Lifetime.mightPointTo)): Set, 
            $Unbox(read($Heap, l#1, _module.Lifetime.mightPointTo)): Set));
    havoc a#0;
    havoc b#0;
    assume $Is(a#0, Tclass._module.Lifetime())
       && $IsAlloc(a#0, Tclass._module.Lifetime(), $Heap)
       && 
      $Is(b#0, Tclass._module.Lifetime())
       && $IsAlloc(b#0, Tclass._module.Lifetime(), $Heap);
    if (*)
    {
        assert {:id "id602"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume {:id "id603"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#0));
        assert {:id "id604"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume {:id "id605"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(b#0));
        if (*)
        {
            ##a#0 := a#0;
            ##b#0 := b#0;
            assert {:id "id606"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assert {:id "id607"} $IsAlloc(a#0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id608"} $IsAlloc(b#0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id609"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0));
            assert {:id "id610"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0));
            assume Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0))
               && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0));
            assume _module.Universe.outlives#canCall(old($Heap), this, a#0, b#0);
            assume {:id "id611"} _module.Universe.outlives($LS($LZ), old($Heap), this, a#0, b#0);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            ##a#1 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#1, Tclass._module.Lifetime(), $Heap);
            ##b#1 := b#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#1, Tclass._module.Lifetime(), $Heap);
            assert {:id "id612"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#1));
            assert {:id "id613"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#1));
            assume Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#1))
               && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#1));
            assume _module.Universe.outlives#canCall($Heap, this, a#0, b#0);
            assume {:id "id614"} _module.Universe.outlives($LS($LZ), $Heap, this, a#0, b#0);
        }
        else
        {
            assume {:id "id615"} _module.Universe.outlives($LS($LZ), old($Heap), this, a#0, b#0)
               ==> _module.Universe.outlives($LS($LZ), $Heap, this, a#0, b#0);
        }
    }
    else
    {
        assume {:id "id616"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#0))
             && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(b#0))
           ==> 
          _module.Universe.outlives($LS($LZ), old($Heap), this, a#0, b#0)
           ==> _module.Universe.outlives($LS($LZ), $Heap, this, a#0, b#0);
    }

    assume {:id "id617"} (forall a#1: ref, b#1: ref :: 
      { _module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1) } 
        { _module.Universe.outlives($LS($LZ), old($Heap), this, a#1, b#1) } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#1)) } 
      $Is(a#1, Tclass._module.Lifetime())
           && $Is(b#1, Tclass._module.Lifetime())
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#1))
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(b#1))
         ==> 
        _module.Universe.outlives($LS($LZ), old($Heap), this, a#1, b#1)
         ==> _module.Universe.outlives($LS($LZ), $Heap, this, a#1, b#1));
}



procedure {:verboseName "Universe.FrameOutlives (call)"} Call$$_module.Universe.FrameOutlives(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  // user-defined preconditions
  requires {:id "id618"} Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, this, _module.Universe.content)): Set);
  requires {:id "id619"} (forall l#1: ref :: 
    { $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
      { $Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
      { $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
      { $Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1)) } 
    $Is(l#1, Tclass._module.Lifetime())
         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1))
       ==> Set#Subset($Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointFrom)): Set)
         && Set#Subset($Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointTo)): Set));
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LZ), current$Heap, this, a#1, b#1) } 
      { _module.Universe.outlives($LS($LZ), previous$Heap, this, a#1, b#1) } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#1)) } 
    $Is(a#1, Tclass._module.Lifetime()) && $Is(b#1, Tclass._module.Lifetime())
       ==> 
      Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#1))
       ==> _module.Universe.outlives#canCall(previous$Heap, this, a#1, b#1)
         && (_module.Universe.outlives($LS($LZ), previous$Heap, this, a#1, b#1)
           ==> _module.Universe.outlives#canCall(current$Heap, this, a#1, b#1)));
  free ensures {:id "id620"} (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LZ), current$Heap, this, a#1, b#1) } 
      { _module.Universe.outlives($LS($LZ), previous$Heap, this, a#1, b#1) } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#1)) } 
    $Is(a#1, Tclass._module.Lifetime())
         && $Is(b#1, Tclass._module.Lifetime())
         && 
        Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#1))
       ==> 
      _module.Universe.outlives($LS($LZ), previous$Heap, this, a#1, b#1)
       ==> _module.Universe.outlives($LS($LZ), current$Heap, this, a#1, b#1));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.FrameOutlives (correctness)"} Impl$$_module.Universe.FrameOutlives(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  requires {:id "id621"} Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, this, _module.Universe.content)): Set);
  requires {:id "id622"} (forall l#1: ref :: 
    { $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
      { $Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
      { $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
      { $Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1)) } 
    $Is(l#1, Tclass._module.Lifetime())
         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1))
       ==> Set#Subset($Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointFrom)): Set)
         && Set#Subset($Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointTo)): Set));
  modifies $Heap;
  // user-defined postconditions
  free ensures (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LZ), current$Heap, this, a#1, b#1) } 
      { _module.Universe.outlives($LS($LZ), previous$Heap, this, a#1, b#1) } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#1)) } 
    $Is(a#1, Tclass._module.Lifetime()) && $Is(b#1, Tclass._module.Lifetime())
       ==> 
      Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#1))
       ==> _module.Universe.outlives#canCall(previous$Heap, this, a#1, b#1)
         && (_module.Universe.outlives($LS($LZ), previous$Heap, this, a#1, b#1)
           ==> _module.Universe.outlives#canCall(current$Heap, this, a#1, b#1)));
  ensures {:id "id623"} (forall a#1: ref, b#1: ref :: 
    { _module.Universe.outlives($LS($LS($LZ)), current$Heap, this, a#1, b#1) } 
      { _module.Universe.outlives($LS($LS($LZ)), previous$Heap, this, a#1, b#1) } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#1)), Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#1)) } 
    $Is(a#1, Tclass._module.Lifetime())
         && $Is(b#1, Tclass._module.Lifetime())
         && 
        Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#1))
         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#1))
       ==> 
      _module.Universe.outlives($LS($LS($LZ)), previous$Heap, this, a#1, b#1)
       ==> _module.Universe.outlives($LS($LS($LZ)), current$Heap, this, a#1, b#1));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.FrameOutlives (correctness)"} Impl$$_module.Universe.FrameOutlives(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var running#0: Set
     where $Is(running#0, TSet(Tclass._module.Thread()))
       && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap);
  var t#0: ref;
  var a#0_0: ref;
  var b#0_0: ref;
  var ##a#0_0: ref;
  var ##b#0_0: ref;
  var ##a#0_1: ref;
  var ##b#0_1: ref;
  var ##a#0_2: ref;
  var ##b#0_2: ref;
  var k#0_0_0: int where LitInt(0) <= k#0_0_0;
  var k#0_0_1: int;
  var ##_k#0_0_0: int;
  var ##a#0_0_0: ref;
  var ##b#0_0_0: ref;
  var a##0_0_0: ref;
  var b##0_0_0: ref;
  var running##0_0_0: Set;
  var k##0_0_0: int;

    // AddMethodImpl: FrameOutlives, Impl$$_module.Universe.FrameOutlives
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(203,17)
    assume true;
    // Begin Comprehension WF check
    havoc t#0;
    if ($Is(t#0, Tclass._module.Thread())
       && $IsAlloc(t#0, Tclass._module.Thread(), $Heap))
    {
        assert {:id "id624"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#0)))
        {
        }
    }

    // End Comprehension WF check
    assume true;
    running#0 := Set#FromBoogieMap((lambda $y#0: Box :: 
        $IsBox($y#0, Tclass._module.Thread())
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#0)));
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(204,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc a#0_0, b#0_0;
        assume $Is(a#0_0, Tclass._module.Lifetime()) && $Is(b#0_0, Tclass._module.Lifetime());
        assert {:id "id626"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#0_0)))
        {
            assert {:id "id627"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        }

        assume true;
        assume {:id "id628"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#0_0))
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(b#0_0));
        if (*)
        {
            ##a#0_0 := a#0_0;
            ##b#0_0 := b#0_0;
            assert {:id "id629"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assert {:id "id630"} $IsAlloc(a#0_0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id631"} $IsAlloc(b#0_0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id632"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0_0));
            assert {:id "id633"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0_0));
            assume _module.Universe.outlives#canCall(old($Heap), this, a#0_0, b#0_0);
            if (_module.Universe.outlives($LS($LZ), old($Heap), this, a#0_0, b#0_0))
            {
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
                ##a#0_1 := a#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##a#0_1, Tclass._module.Lifetime(), $Heap);
                ##b#0_1 := b#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##b#0_1, Tclass._module.Lifetime(), $Heap);
                assert {:id "id634"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#0_1));
                assert {:id "id635"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#0_1));
                assume _module.Universe.outlives#canCall($Heap, this, a#0_0, b#0_0);
            }

            assume _module.Universe.outlives#canCall(old($Heap), this, a#0_0, b#0_0)
               && (_module.Universe.outlives($LS($LZ), old($Heap), this, a#0_0, b#0_0)
                 ==> _module.Universe.outlives#canCall($Heap, this, a#0_0, b#0_0));
            assume {:id "id636"} _module.Universe.outlives($LS($LZ), old($Heap), this, a#0_0, b#0_0)
               ==> _module.Universe.outlives($LS($LZ), $Heap, this, a#0_0, b#0_0);
            assume false;
        }

        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(207,7)
        ##a#0_2 := a#0_0;
        ##b#0_2 := b#0_0;
        assert {:id "id637"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assert {:id "id638"} $IsAlloc(a#0_0, Tclass._module.Lifetime(), old($Heap));
        assert {:id "id639"} $IsAlloc(b#0_0, Tclass._module.Lifetime(), old($Heap));
        assert {:id "id640"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0_2));
        assert {:id "id641"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0_2));
        assume Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0_2))
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0_2));
        assume _module.Universe.outlives#canCall(old($Heap), this, a#0_0, b#0_0);
        assume _module.Universe.outlives#canCall(old($Heap), this, a#0_0, b#0_0);
        if (_module.Universe.outlives($LS($LZ), old($Heap), this, a#0_0, b#0_0))
        {
            // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(208,20)
            havoc k#0_0_1;
            if (LitInt(0) <= k#0_0_1)
            {
                ##_k#0_0_0 := k#0_0_1;
                ##a#0_0_0 := a#0_0;
                ##b#0_0_0 := b#0_0;
                assert {:id "id642"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                assert {:id "id643"} $IsAlloc(a#0_0, Tclass._module.Lifetime(), old($Heap));
                assert {:id "id644"} $IsAlloc(b#0_0, Tclass._module.Lifetime(), old($Heap));
                assert {:id "id645"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0_0_0));
                assert {:id "id646"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0_0_0));
                assume _module.Universe.outlives_h#canCall(old($Heap), this, k#0_0_1, a#0_0, b#0_0);
                assume _module.Universe.outlives_h#canCall(old($Heap), this, k#0_0_1, a#0_0, b#0_0);
            }

            assert {:id "id647"} ($Is(LitInt(0), Tclass._System.nat())
                 && _module.Universe.outlives_h($LS($LZ), old($Heap), this, LitInt(0), a#0_0, b#0_0))
               || 
              ($Is(LitInt(0), Tclass._System.nat())
                 && _module.Universe.outlives_h($LS($LZ), old($Heap), this, LitInt(0), a#0_0, b#0_0))
               || (exists $as#k0_0_0#0_0_0: int :: 
                LitInt(0) <= $as#k0_0_0#0_0_0
                   && _module.Universe.outlives_h($LS($LZ), old($Heap), this, $as#k0_0_0#0_0_0, a#0_0, b#0_0));
            havoc k#0_0_0;
            assume {:id "id648"} _module.Universe.outlives_h($LS($LZ), old($Heap), this, k#0_0_0, a#0_0, b#0_0);
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(209,28)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_0 := a#0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            b##0_0_0 := b#0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            running##0_0_0 := running#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            k##0_0_0 := k#0_0_0;
            assert {:id "id649"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assert {:id "id650"} $IsAlloc(a#0_0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id651"} $IsAlloc(b#0_0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id652"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
            call {:id "id653"} Call$$_module.Universe.FrameOutlivesHelper(old($Heap), $Heap, this, a##0_0_0, b##0_0_0, running##0_0_0, k##0_0_0);
            // TrCallStmt: After ProcessCallStmt
        }
        else
        {
        }

        assert {:id "id654"} _module.Universe.outlives($LS($LZ), old($Heap), this, a#0_0, b#0_0)
           ==> 
          _module.Universe.outlives#canCall($Heap, this, a#0_0, b#0_0)
           ==> _module.Universe.outlives($LS($LZ), $Heap, this, a#0_0, b#0_0)
             || 
            Set#IsMember($Unbox(read($Heap, b#0_0, _module.Lifetime.mightPointTo)): Set, $Box(a#0_0))
             || (exists x#0_0: ref :: 
              { _module.Universe.outlivesThrough($LS($LS($LZ)), $Heap, this, a#0_0, x#0_0, b#0_0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0_0)) } 
              $Is(x#0_0, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(x#0_0))
                 && _module.Universe.outlivesThrough($LS($LS($LZ)), $Heap, this, a#0_0, x#0_0, b#0_0));
        assume false;
    }
    else
    {
        assume (forall a#0_1: ref, b#0_1: ref :: 
          { _module.Universe.outlives($LS($LZ), $Heap, this, a#0_1, b#0_1) } 
            { _module.Universe.outlives($LS($LZ), old($Heap), this, a#0_1, b#0_1) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(b#0_1)), Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#0_1)) } 
          $Is(a#0_1, Tclass._module.Lifetime())
               && $Is(b#0_1, Tclass._module.Lifetime())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#0_1))
               && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(b#0_1))
             ==> 
            _module.Universe.outlives($LS($LZ), old($Heap), this, a#0_1, b#0_1)
             ==> _module.Universe.outlives($LS($LZ), $Heap, this, a#0_1, b#0_1));
    }
}



procedure {:verboseName "Universe.FrameOutlivesHelper (well-formedness)"} CheckWellFormed$$_module.Universe.FrameOutlivesHelper(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    a#0: ref
       where $Is(a#0, Tclass._module.Lifetime())
         && $IsAlloc(a#0, Tclass._module.Lifetime(), previous$Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Lifetime())
         && $IsAlloc(b#0, Tclass._module.Lifetime(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap), 
    k#0: int where LitInt(0) <= k#0);
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(a#0, Tclass._module.Lifetime(), previous$Heap);
  requires $IsAlloc(b#0, Tclass._module.Lifetime(), previous$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  requires $IsAlloc(k#0, Tclass._System.nat(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.FrameOutlivesHelper (well-formedness)"} CheckWellFormed$$_module.Universe.FrameOutlivesHelper(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref, 
    a#0: ref, 
    b#0: ref, 
    running#0: Set, 
    k#0: int)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##_k#0: int;
  var ##a#0: ref;
  var ##b#0: ref;
  var l#0: ref;
  var ##_k#1: int;
  var ##a#1: ref;
  var ##b#1: ref;


    // AddMethodImpl: FrameOutlivesHelper, CheckWellFormed$$_module.Universe.FrameOutlivesHelper
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id655"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#0)))
    {
        assert {:id "id656"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    }

    if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#0))
       && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(b#0)))
    {
        ##_k#0 := k#0;
        ##a#0 := a#0;
        ##b#0 := b#0;
        assert {:id "id657"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assert {:id "id658"} $IsAlloc(a#0, Tclass._module.Lifetime(), old($Heap));
        assert {:id "id659"} $IsAlloc(b#0, Tclass._module.Lifetime(), old($Heap));
        assert {:id "id660"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0));
        assert {:id "id661"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0));
        assume Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0))
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0));
        assume _module.Universe.outlives_h#canCall(old($Heap), this, k#0, a#0, b#0);
    }

    assume {:id "id662"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(a#0))
       && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(b#0))
       && _module.Universe.outlives_h($LS($LZ), old($Heap), this, k#0, a#0, b#0);
    assert {:id "id663"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume {:id "id664"} Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
      $Unbox(read($Heap, this, _module.Universe.content)): Set);
    havoc l#0;
    assume $Is(l#0, Tclass._module.Lifetime())
       && $IsAlloc(l#0, Tclass._module.Lifetime(), $Heap);
    if (*)
    {
        assert {:id "id665"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume {:id "id666"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#0));
        assert {:id "id667"} l#0 != null;
        assert {:id "id668"} $IsAlloc(l#0, Tclass._module.Lifetime(), old($Heap));
        assert {:id "id669"} l#0 != null;
        assume {:id "id670"} Set#Subset($Unbox(read(old($Heap), l#0, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read($Heap, l#0, _module.Lifetime.mightPointFrom)): Set);
        assert {:id "id671"} l#0 != null;
        assert {:id "id672"} $IsAlloc(l#0, Tclass._module.Lifetime(), old($Heap));
        assert {:id "id673"} l#0 != null;
        assume {:id "id674"} Set#Subset($Unbox(read(old($Heap), l#0, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read($Heap, l#0, _module.Lifetime.mightPointTo)): Set);
    }
    else
    {
        assume {:id "id675"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#0))
           ==> Set#Subset($Unbox(read(old($Heap), l#0, _module.Lifetime.mightPointFrom)): Set, 
              $Unbox(read($Heap, l#0, _module.Lifetime.mightPointFrom)): Set)
             && Set#Subset($Unbox(read(old($Heap), l#0, _module.Lifetime.mightPointTo)): Set, 
              $Unbox(read($Heap, l#0, _module.Lifetime.mightPointTo)): Set);
    }

    assume {:id "id676"} (forall l#1: ref :: 
      { $Unbox(read($Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
        { $Unbox(read(old($Heap), l#1, _module.Lifetime.mightPointTo)): Set } 
        { $Unbox(read($Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
        { $Unbox(read(old($Heap), l#1, _module.Lifetime.mightPointFrom)): Set } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#1)) } 
      $Is(l#1, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#1))
         ==> Set#Subset($Unbox(read(old($Heap), l#1, _module.Lifetime.mightPointFrom)): Set, 
            $Unbox(read($Heap, l#1, _module.Lifetime.mightPointFrom)): Set)
           && Set#Subset($Unbox(read(old($Heap), l#1, _module.Lifetime.mightPointTo)): Set, 
            $Unbox(read($Heap, l#1, _module.Lifetime.mightPointTo)): Set));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##_k#1 := k#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##_k#1, Tclass._System.nat(), $Heap);
    ##a#1 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#1, Tclass._module.Lifetime(), $Heap);
    ##b#1 := b#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#1, Tclass._module.Lifetime(), $Heap);
    assert {:id "id677"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#1));
    assert {:id "id678"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#1));
    assume Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##a#1))
       && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(##b#1));
    assume _module.Universe.outlives_h#canCall($Heap, this, k#0, a#0, b#0);
    assume {:id "id679"} _module.Universe.outlives_h($LS($LZ), $Heap, this, k#0, a#0, b#0);
}



procedure {:verboseName "Universe.FrameOutlivesHelper (call)"} Call$$_module.Universe.FrameOutlivesHelper(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    a#0: ref
       where $Is(a#0, Tclass._module.Lifetime())
         && $IsAlloc(a#0, Tclass._module.Lifetime(), previous$Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Lifetime())
         && $IsAlloc(b#0, Tclass._module.Lifetime(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap), 
    k#0: int where LitInt(0) <= k#0);
  requires $IsAlloc(a#0, Tclass._module.Lifetime(), previous$Heap);
  requires $IsAlloc(b#0, Tclass._module.Lifetime(), previous$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  requires $IsAlloc(k#0, Tclass._System.nat(), previous$Heap);
  // user-defined preconditions
  requires {:id "id680"} Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#0));
  requires {:id "id681"} Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#0));
  requires {:id "id682"} _module.Universe.outlives_h#canCall(previous$Heap, this, k#0, a#0, b#0)
     ==> _module.Universe.outlives_h($LS($LZ), previous$Heap, this, k#0, a#0, b#0)
       || 0 < k#0;
  requires {:id "id683"} _module.Universe.outlives_h#canCall(previous$Heap, this, k#0, a#0, b#0)
     ==> _module.Universe.outlives_h($LS($LZ), previous$Heap, this, k#0, a#0, b#0)
       || 
      Set#IsMember($Unbox(read(previous$Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
       || (exists x#0: ref :: 
        { _module.Universe.outlivesThrough_h($LS($LS($LZ)), previous$Heap, this, k#0 - 1, a#0, x#0, b#0) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(x#0)) } 
        $Is(x#0, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(x#0))
           && _module.Universe.outlivesThrough_h($LS($LS($LZ)), previous$Heap, this, k#0 - 1, a#0, x#0, b#0));
  requires {:id "id684"} Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, this, _module.Universe.content)): Set);
  requires {:id "id685"} (forall l#1: ref :: 
    { $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
      { $Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
      { $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
      { $Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1)) } 
    $Is(l#1, Tclass._module.Lifetime())
         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1))
       ==> Set#Subset($Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointFrom)): Set)
         && Set#Subset($Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointTo)): Set));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.outlives_h#canCall(current$Heap, this, k#0, a#0, b#0);
  free ensures {:id "id686"} _module.Universe.outlives_h#canCall(current$Heap, this, k#0, a#0, b#0)
     && 
    _module.Universe.outlives_h($LS($LZ), current$Heap, this, k#0, a#0, b#0)
     && 
    0 < k#0
     && (Set#IsMember($Unbox(read(current$Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
       || (exists x#1: ref :: 
        { _module.Universe.outlivesThrough_h($LS($LZ), current$Heap, this, k#0 - 1, a#0, x#1, b#0) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(x#1)) } 
        $Is(x#1, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(x#1))
           && _module.Universe.outlivesThrough_h($LS($LZ), current$Heap, this, k#0 - 1, a#0, x#1, b#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.FrameOutlivesHelper (correctness)"} Impl$$_module.Universe.FrameOutlivesHelper(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    a#0: ref
       where $Is(a#0, Tclass._module.Lifetime())
         && $IsAlloc(a#0, Tclass._module.Lifetime(), previous$Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Lifetime())
         && $IsAlloc(b#0, Tclass._module.Lifetime(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap), 
    k#0: int where LitInt(0) <= k#0)
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(a#0, Tclass._module.Lifetime(), previous$Heap);
  requires $IsAlloc(b#0, Tclass._module.Lifetime(), previous$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  requires $IsAlloc(k#0, Tclass._System.nat(), previous$Heap);
  // user-defined preconditions
  requires {:id "id687"} Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(a#0));
  requires {:id "id688"} Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(b#0));
  free requires {:id "id689"} _module.Universe.outlives_h#canCall(previous$Heap, this, k#0, a#0, b#0)
     && 
    _module.Universe.outlives_h($LS($LZ), previous$Heap, this, k#0, a#0, b#0)
     && 
    0 < k#0
     && (Set#IsMember($Unbox(read(previous$Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
       || (exists x#2: ref :: 
        { _module.Universe.outlivesThrough_h($LS($LZ), previous$Heap, this, k#0 - 1, a#0, x#2, b#0) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(x#2)) } 
        $Is(x#2, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(x#2))
           && _module.Universe.outlivesThrough_h($LS($LZ), previous$Heap, this, k#0 - 1, a#0, x#2, b#0)));
  requires {:id "id690"} Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, this, _module.Universe.content)): Set);
  requires {:id "id691"} (forall l#1: ref :: 
    { $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
      { $Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointTo)): Set } 
      { $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
      { $Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointFrom)): Set } 
      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1)) } 
    $Is(l#1, Tclass._module.Lifetime())
         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(l#1))
       ==> Set#Subset($Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointFrom)): Set)
         && Set#Subset($Unbox(read(previous$Heap, l#1, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read(current$Heap, l#1, _module.Lifetime.mightPointTo)): Set));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.outlives_h#canCall(current$Heap, this, k#0, a#0, b#0);
  ensures {:id "id692"} _module.Universe.outlives_h#canCall(current$Heap, this, k#0, a#0, b#0)
     ==> _module.Universe.outlives_h($LS($LZ), current$Heap, this, k#0, a#0, b#0)
       || 0 < k#0;
  ensures {:id "id693"} _module.Universe.outlives_h#canCall(current$Heap, this, k#0, a#0, b#0)
     ==> _module.Universe.outlives_h($LS($LZ), current$Heap, this, k#0, a#0, b#0)
       || 
      Set#IsMember($Unbox(read(current$Heap, b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0))
       || (exists x#3: ref :: 
        { _module.Universe.outlivesThrough_h($LS($LS($LZ)), current$Heap, this, k#0 - 1, a#0, x#3, b#0) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(x#3)) } 
        $Is(x#3, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(x#3))
           && _module.Universe.outlivesThrough_h($LS($LS($LZ)), current$Heap, this, k#0 - 1, a#0, x#3, b#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.FrameOutlivesHelper (correctness)"} Impl$$_module.Universe.FrameOutlivesHelper(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref, 
    a#0: ref, 
    b#0: ref, 
    running#0: Set, 
    k#0: int)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var defass#x#0_0_0: bool;
  var x#0_0_0: ref
     where defass#x#0_0_0
       ==> $Is(x#0_0_0, Tclass._module.Lifetime())
         && $IsAlloc(x#0_0_0, Tclass._module.Lifetime(), $Heap);
  var x#0_0_1: ref;
  var ##_k#0_0_0: int;
  var ##a#0_0_0: ref;
  var ##x#0_0_0: ref;
  var ##b#0_0_0: ref;
  var a##0_0_0: ref;
  var b##0_0_0: ref;
  var running##0_0_0: Set;
  var k##0_0_0: int;
  var a##0_0_1: ref;
  var b##0_0_1: ref;
  var running##0_0_1: Set;
  var k##0_0_1: int;

    // AddMethodImpl: FrameOutlivesHelper, Impl$$_module.Universe.FrameOutlivesHelper
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#a0#0: ref, $ih#b0#0: ref, $ih#k0#0: int :: 
      { _module.Universe.outlives_h($LS($LZ), $Heap, this, $ih#k0#0, $ih#a0#0, $ih#b0#0) } 
      $Is($ih#a0#0, Tclass._module.Lifetime())
           && $Is($ih#b0#0, Tclass._module.Lifetime())
           && LitInt(0) <= $ih#k0#0
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($ih#a0#0))
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($ih#b0#0))
           && _module.Universe.outlives_h($LS($LZ), old($Heap), this, $ih#k0#0, $ih#a0#0, $ih#b0#0)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($initHeapForallStmt#0, this, _module.Universe.content)): Set)
           && (forall l#2: ref :: 
            { $Unbox(read($initHeapForallStmt#0, l#2, _module.Lifetime.mightPointTo)): Set } 
              { $Unbox(read(old($Heap), l#2, _module.Lifetime.mightPointTo)): Set } 
              { $Unbox(read($initHeapForallStmt#0, l#2, _module.Lifetime.mightPointFrom)): Set } 
              { $Unbox(read(old($Heap), l#2, _module.Lifetime.mightPointFrom)): Set } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#2)) } 
            $Is(l#2, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(l#2))
               ==> Set#Subset($Unbox(read(old($Heap), l#2, _module.Lifetime.mightPointFrom)): Set, 
                  $Unbox(read($initHeapForallStmt#0, l#2, _module.Lifetime.mightPointFrom)): Set)
                 && Set#Subset($Unbox(read(old($Heap), l#2, _module.Lifetime.mightPointTo)): Set, 
                  $Unbox(read($initHeapForallStmt#0, l#2, _module.Lifetime.mightPointTo)): Set))
           && (($ih#a0#0 == null && a#0 != null)
             || (($ih#a0#0 != null <==> a#0 != null)
               && (($ih#b0#0 == null && b#0 != null)
                 || (($ih#b0#0 != null <==> b#0 != null)
                   && ((Set#Subset(running#0, running#0) && !Set#Subset(running#0, running#0))
                     || (Set#Equal(running#0, running#0) && 0 <= $ih#k0#0 && $ih#k0#0 < k#0))))))
         ==> _module.Universe.outlives_h($LS($LZ), $Heap, this, $ih#k0#0, $ih#a0#0, $ih#b0#0));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(220,5)
    assume true;
    if (k#0 > 0)
    {
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(221,7)
        assert {:id "id694"} b#0 != null;
        assert {:id "id695"} $IsAlloc(b#0, Tclass._module.Lifetime(), old($Heap));
        assume true;
        if (!Set#IsMember($Unbox(read(old($Heap), b#0, _module.Lifetime.mightPointTo)): Set, $Box(a#0)))
        {
            // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(222,25)
            havoc x#0_0_1;
            if ($Is(x#0_0_1, Tclass._module.Lifetime())
               && $IsAlloc(x#0_0_1, Tclass._module.Lifetime(), $Heap))
            {
                assert {:id "id696"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(x#0_0_1)))
                {
                    assert {:id "id697"} $Is(k#0 - 1, Tclass._System.nat());
                    ##_k#0_0_0 := k#0 - 1;
                    ##a#0_0_0 := a#0;
                    ##x#0_0_0 := x#0_0_1;
                    ##b#0_0_0 := b#0;
                    assert {:id "id698"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                    assert {:id "id699"} $IsAlloc(a#0, Tclass._module.Lifetime(), old($Heap));
                    assert {:id "id700"} $IsAlloc(x#0_0_1, Tclass._module.Lifetime(), old($Heap));
                    assert {:id "id701"} $IsAlloc(b#0, Tclass._module.Lifetime(), old($Heap));
                    assert {:id "id702"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##a#0_0_0));
                    assert {:id "id703"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##x#0_0_0));
                    assert {:id "id704"} {:subsumption 0} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(##b#0_0_0));
                    assume _module.Universe.outlivesThrough_h#canCall(old($Heap), this, k#0 - 1, a#0, x#0_0_1, b#0);
                }

                assume Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(x#0_0_1))
                   ==> _module.Universe.outlivesThrough_h#canCall(old($Heap), this, k#0 - 1, a#0, x#0_0_1, b#0);
            }

            assert {:id "id705"} ($Is(null, Tclass._module.Lifetime())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(null))
                 && _module.Universe.outlivesThrough_h($LS($LZ), old($Heap), this, k#0 - 1, a#0, null, b#0))
               || (exists $as#x0_0_0#0_0_0: ref :: 
                $Is($as#x0_0_0#0_0_0, Tclass._module.Lifetime())
                   && $IsAlloc($as#x0_0_0#0_0_0, Tclass._module.Lifetime(), $Heap)
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
                    $Box($as#x0_0_0#0_0_0))
                   && _module.Universe.outlivesThrough_h($LS($LZ), old($Heap), this, k#0 - 1, a#0, $as#x0_0_0#0_0_0, b#0));
            defass#x#0_0_0 := true;
            havoc x#0_0_0;
            assume {:id "id706"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(x#0_0_0))
               && _module.Universe.outlivesThrough_h($LS($LZ), old($Heap), this, k#0 - 1, a#0, x#0_0_0, b#0);
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(223,28)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_0 := a#0;
            assert {:id "id707"} defass#x#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            b##0_0_0 := x#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            running##0_0_0 := running#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert {:id "id708"} $Is(k#0 - 2, Tclass._System.nat());
            k##0_0_0 := k#0 - 2;
            assert {:id "id709"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assert {:id "id710"} $IsAlloc(a#0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id711"} $IsAlloc(x#0_0_0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id712"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
            assert {:id "id713"} 0 <= k#0
               || (a##0_0_0 == null && a#0 != null)
               || (b##0_0_0 == null && b#0 != null)
               || (Set#Subset(running##0_0_0, running#0)
                 && !Set#Subset(running#0, running##0_0_0))
               || k##0_0_0 == k#0;
            assert {:id "id714"} (a##0_0_0 == null && a#0 != null)
               || ((a##0_0_0 != null <==> a#0 != null)
                 && ((b##0_0_0 == null && b#0 != null)
                   || ((b##0_0_0 != null <==> b#0 != null)
                     && ((Set#Subset(running##0_0_0, running#0)
                         && !Set#Subset(running#0, running##0_0_0))
                       || (Set#Equal(running##0_0_0, running#0) && k##0_0_0 < k#0)))));
            call {:id "id715"} Call$$_module.Universe.FrameOutlivesHelper(old($Heap), $Heap, this, a##0_0_0, b##0_0_0, running##0_0_0, k##0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(224,28)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            assert {:id "id716"} defass#x#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            a##0_0_1 := x#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            b##0_0_1 := b#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            running##0_0_1 := running#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert {:id "id717"} $Is(k#0 - 2, Tclass._System.nat());
            k##0_0_1 := k#0 - 2;
            assert {:id "id718"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assert {:id "id719"} $IsAlloc(x#0_0_0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id720"} $IsAlloc(b#0, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id721"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
            assert {:id "id722"} 0 <= k#0
               || (a##0_0_1 == null && a#0 != null)
               || (b##0_0_1 == null && b#0 != null)
               || (Set#Subset(running##0_0_1, running#0)
                 && !Set#Subset(running#0, running##0_0_1))
               || k##0_0_1 == k#0;
            assert {:id "id723"} (a##0_0_1 == null && a#0 != null)
               || ((a##0_0_1 != null <==> a#0 != null)
                 && ((b##0_0_1 == null && b#0 != null)
                   || ((b##0_0_1 != null <==> b#0 != null)
                     && ((Set#Subset(running##0_0_1, running#0)
                         && !Set#Subset(running#0, running##0_0_1))
                       || (Set#Equal(running##0_0_1, running#0) && k##0_0_1 < k#0)))));
            call {:id "id724"} Call$$_module.Universe.FrameOutlivesHelper(old($Heap), $Heap, this, a##0_0_1, b##0_0_1, running##0_0_1, k##0_0_1);
            // TrCallStmt: After ProcessCallStmt
        }
        else
        {
        }
    }
    else
    {
    }
}



// $Is axiom for non-null type _module.Universe
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Universe()) } 
    { $Is(c#0, Tclass._module.Universe?()) } 
  $Is(c#0, Tclass._module.Universe())
     <==> $Is(c#0, Tclass._module.Universe?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Universe
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Universe(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Universe?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Universe(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Universe?(), $h));

// Constructor function declaration
function #_module.ObjectClassKind.Thread() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.ObjectClassKind.Thread())
   == ##_module.ObjectClassKind.Thread;
// Constructor $Is
axiom $Is(#_module.ObjectClassKind.Thread(), Tclass._module.ObjectClassKind());
// Constructor literal
axiom #_module.ObjectClassKind.Thread() == Lit(#_module.ObjectClassKind.Thread());
}

const unique ##_module.ObjectClassKind.Thread: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.ObjectClassKind.Thread())
   == ##_module.ObjectClassKind.Thread;
}

function _module.ObjectClassKind.Thread_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.ObjectClassKind.Thread_q(d) } 
  _module.ObjectClassKind.Thread_q(d)
     <==> DatatypeCtorId(d) == ##_module.ObjectClassKind.Thread);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.ObjectClassKind.Thread_q(d) } 
  _module.ObjectClassKind.Thread_q(d) ==> d == #_module.ObjectClassKind.Thread());

function Tclass._module.ObjectClassKind() : Ty
uses {
// Tclass._module.ObjectClassKind Tag
axiom Tag(Tclass._module.ObjectClassKind()) == Tagclass._module.ObjectClassKind
   && TagFamily(Tclass._module.ObjectClassKind()) == tytagFamily$ObjectClassKind;
}

const unique Tagclass._module.ObjectClassKind: TyTag;

// Box/unbox axiom for Tclass._module.ObjectClassKind
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.ObjectClassKind()) } 
  $IsBox(bx, Tclass._module.ObjectClassKind())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.ObjectClassKind()));

// Constructor function declaration
function #_module.ObjectClassKind.OwnedObject() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.ObjectClassKind.OwnedObject())
   == ##_module.ObjectClassKind.OwnedObject;
// Constructor $Is
axiom $Is(#_module.ObjectClassKind.OwnedObject(), Tclass._module.ObjectClassKind());
// Constructor literal
axiom #_module.ObjectClassKind.OwnedObject()
   == Lit(#_module.ObjectClassKind.OwnedObject());
}

const unique ##_module.ObjectClassKind.OwnedObject: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.ObjectClassKind.OwnedObject())
   == ##_module.ObjectClassKind.OwnedObject;
}

function _module.ObjectClassKind.OwnedObject_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.ObjectClassKind.OwnedObject_q(d) } 
  _module.ObjectClassKind.OwnedObject_q(d)
     <==> DatatypeCtorId(d) == ##_module.ObjectClassKind.OwnedObject);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.ObjectClassKind.OwnedObject_q(d) } 
  _module.ObjectClassKind.OwnedObject_q(d)
     ==> d == #_module.ObjectClassKind.OwnedObject());

// Constructor function declaration
function #_module.ObjectClassKind.Lifetime() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.ObjectClassKind.Lifetime())
   == ##_module.ObjectClassKind.Lifetime;
// Constructor $Is
axiom $Is(#_module.ObjectClassKind.Lifetime(), Tclass._module.ObjectClassKind());
// Constructor literal
axiom #_module.ObjectClassKind.Lifetime() == Lit(#_module.ObjectClassKind.Lifetime());
}

const unique ##_module.ObjectClassKind.Lifetime: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.ObjectClassKind.Lifetime())
   == ##_module.ObjectClassKind.Lifetime;
}

function _module.ObjectClassKind.Lifetime_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.ObjectClassKind.Lifetime_q(d) } 
  _module.ObjectClassKind.Lifetime_q(d)
     <==> DatatypeCtorId(d) == ##_module.ObjectClassKind.Lifetime);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.ObjectClassKind.Lifetime_q(d) } 
  _module.ObjectClassKind.Lifetime_q(d)
     ==> d == #_module.ObjectClassKind.Lifetime());

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._module.ObjectClassKind(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._module.ObjectClassKind())
     ==> $IsAlloc(d, Tclass._module.ObjectClassKind(), $h));

// Depth-one case-split function
function $IsA#_module.ObjectClassKind(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.ObjectClassKind(d) } 
  $IsA#_module.ObjectClassKind(d)
     ==> _module.ObjectClassKind.Thread_q(d)
       || _module.ObjectClassKind.OwnedObject_q(d)
       || _module.ObjectClassKind.Lifetime_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.ObjectClassKind.Lifetime_q(d), $Is(d, Tclass._module.ObjectClassKind()) } 
    { _module.ObjectClassKind.OwnedObject_q(d), $Is(d, Tclass._module.ObjectClassKind()) } 
    { _module.ObjectClassKind.Thread_q(d), $Is(d, Tclass._module.ObjectClassKind()) } 
  $Is(d, Tclass._module.ObjectClassKind())
     ==> _module.ObjectClassKind.Thread_q(d)
       || _module.ObjectClassKind.OwnedObject_q(d)
       || _module.ObjectClassKind.Lifetime_q(d));

// Datatype extensional equality declaration
function _module.ObjectClassKind#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.ObjectClassKind.Thread
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.ObjectClassKind#Equal(a, b), _module.ObjectClassKind.Thread_q(a) } 
    { _module.ObjectClassKind#Equal(a, b), _module.ObjectClassKind.Thread_q(b) } 
  _module.ObjectClassKind.Thread_q(a) && _module.ObjectClassKind.Thread_q(b)
     ==> _module.ObjectClassKind#Equal(a, b));

// Datatype extensional equality definition: #_module.ObjectClassKind.OwnedObject
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.ObjectClassKind#Equal(a, b), _module.ObjectClassKind.OwnedObject_q(a) } 
    { _module.ObjectClassKind#Equal(a, b), _module.ObjectClassKind.OwnedObject_q(b) } 
  _module.ObjectClassKind.OwnedObject_q(a)
       && _module.ObjectClassKind.OwnedObject_q(b)
     ==> _module.ObjectClassKind#Equal(a, b));

// Datatype extensional equality definition: #_module.ObjectClassKind.Lifetime
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.ObjectClassKind#Equal(a, b), _module.ObjectClassKind.Lifetime_q(a) } 
    { _module.ObjectClassKind#Equal(a, b), _module.ObjectClassKind.Lifetime_q(b) } 
  _module.ObjectClassKind.Lifetime_q(a) && _module.ObjectClassKind.Lifetime_q(b)
     ==> _module.ObjectClassKind#Equal(a, b));

// Datatype extensionality axiom: _module.ObjectClassKind
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.ObjectClassKind#Equal(a, b) } 
  _module.ObjectClassKind#Equal(a, b) <==> a == b);

const unique class._module.ObjectClassKind: ClassName;

const unique class._module.Object?: ClassName;

// $Is axiom for trait Object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Object?()) } 
  $Is($o, Tclass._module.Object?())
     <==> $o == null || implements$_module.Object(dtype($o)));

// $IsAlloc axiom for trait Object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Object?(), $h) } 
  $IsAlloc($o, Tclass._module.Object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.Object(ty: Ty) : bool;

// function declaration for _module.Object.objectGlobalBaseInv
function _module.Object.objectGlobalBaseInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.objectGlobalBaseInv (revealed)
axiom {:id "id725"} 8 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.objectGlobalBaseInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
         || (8 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Object.baseFieldsInv#canCall($Heap, this)
             && (_module.Object.baseFieldsInv($Heap, this)
               ==> _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))))
         && _module.Object.objectGlobalBaseInv($Heap, this)
           == (
            Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Object.baseFieldsInv($Heap, this)
             && _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))));
}

function _module.Object.objectGlobalBaseInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.objectGlobalBaseInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.objectGlobalBaseInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.objectGlobalBaseInv($h0, this)
       == _module.Object.objectGlobalBaseInv($h1, this));

function _module.Object.objectGlobalBaseInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.objectGlobalBaseInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.objectGlobalBaseInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.objectGlobalBaseInv#requires($Heap, this) == true);

procedure {:verboseName "Object.objectGlobalBaseInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalBaseInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.objectGlobalBaseInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalBaseInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id726"} _module.Object.universe(this) != null;
        b$reqreads#0 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this)))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == this || $o == _module.Object.universe(this))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Object.baseFieldsInv#canCall($Heap, this);
        }

        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           && _module.Object.baseFieldsInv($Heap, this))
        {
            assert {:id "id727"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == _module.Object.universe(this)
                     || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box($o)))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this));
        }

        assume {:id "id728"} _module.Object.objectGlobalBaseInv($Heap, this)
           == (
            Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Object.baseFieldsInv($Heap, this)
             && _module.Universe.globalBaseInv($Heap, _module.Object.universe(this)));
        assume Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Object.baseFieldsInv#canCall($Heap, this)
             && (_module.Object.baseFieldsInv($Heap, this)
               ==> _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.objectGlobalBaseInv($Heap, this), TBool);
        assert {:id "id729"} b$reqreads#0;
        assert {:id "id730"} b$reqreads#1;
        assert {:id "id731"} b$reqreads#2;
        return;

        assume false;
    }
}



// function declaration for _module.Object.objectGlobalInv
function _module.Object.objectGlobalInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.objectGlobalInv (revealed)
axiom {:id "id732"} 17 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.objectGlobalInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.objectGlobalInv#canCall($Heap, this)
         || (17 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Universe.globalInv#canCall($Heap, _module.Object.universe(this)))
         && _module.Object.objectGlobalInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Universe.globalInv($Heap, _module.Object.universe(this))));
}

function _module.Object.objectGlobalInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.objectGlobalInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.objectGlobalInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.objectGlobalInv($h0, this)
       == _module.Object.objectGlobalInv($h1, this));

function _module.Object.objectGlobalInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.objectGlobalInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.objectGlobalInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.objectGlobalInv#requires($Heap, this) == true);

procedure {:verboseName "Object.objectGlobalInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 17 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.objectGlobalInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id733"} _module.Object.universe(this) != null;
        b$reqreads#0 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this)))
        {
            assert {:id "id734"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalInv#canCall($Heap, _module.Object.universe(this));
        }

        assume {:id "id735"} _module.Object.objectGlobalInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Universe.globalInv($Heap, _module.Object.universe(this)));
        assume Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Universe.globalInv#canCall($Heap, _module.Object.universe(this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.objectGlobalInv($Heap, this), TBool);
        assert {:id "id736"} b$reqreads#0;
        assert {:id "id737"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.objectGlobalInv2
function _module.Object.objectGlobalInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.objectGlobalInv2 (revealed)
axiom {:id "id738"} 18 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.objectGlobalInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.objectGlobalInv2#canCall($prevHeap, $Heap, this)
         || (18 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
           && _module.Object.objectGlobalInv($prevHeap, this))
       ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this)
         && (_module.Object.objectGlobalBaseInv($Heap, this)
           ==> _module.Universe.globalInv2#canCall($prevHeap, $Heap, _module.Object.universe(this)))
         && _module.Object.objectGlobalInv2($prevHeap, $Heap, this)
           == (_module.Object.objectGlobalBaseInv($Heap, this)
             && _module.Universe.globalInv2($prevHeap, $Heap, _module.Object.universe(this))));
}

function _module.Object.objectGlobalInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.objectGlobalInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.objectGlobalInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.objectGlobalInv2($prevHeap, $h0, this)
       == _module.Object.objectGlobalInv2($prevHeap, $h1, this));

function _module.Object.objectGlobalInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.objectGlobalInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.objectGlobalInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.objectGlobalInv2#requires($prevHeap, $Heap, this)
       == _module.Object.objectGlobalInv($prevHeap, this));

procedure {:verboseName "Object.objectGlobalInv2 (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 18 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.objectGlobalInv2 (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    assert {:id "id739"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.objectGlobalInv#canCall(old($Heap), this);
    assume {:id "id740"} _module.Object.objectGlobalInv(old($Heap), this);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        if (_module.Object.objectGlobalBaseInv($Heap, this))
        {
            assert {:id "id741"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            assert {:id "id742"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
        }

        assume {:id "id743"} _module.Object.objectGlobalInv2(old($Heap), $Heap, this)
           == (_module.Object.objectGlobalBaseInv($Heap, this)
             && _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this)));
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this)
           && (_module.Object.objectGlobalBaseInv($Heap, this)
             ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.objectGlobalInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id744"} b$reqreads#0;
        assert {:id "id745"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.nonAliasing
function _module.Object.nonAliasing($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.nonAliasing (revealed)
axiom {:id "id746"} 3 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.nonAliasing($Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.nonAliasing#canCall($Heap, this)
         || (3 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> $IsA#_module.ObjectClassKind(_module.Object.objectClassKind(this))
         && _module.Object.objectClassKind#canCall(this)
         && (_module.ObjectClassKind#Equal(_module.Object.objectClassKind(this), #_module.ObjectClassKind.Thread())
             == $Is(this, Tclass._module.Thread())
           ==> $IsA#_module.ObjectClassKind(_module.Object.objectClassKind(this))
             && _module.Object.objectClassKind#canCall(this)
             && (_module.ObjectClassKind#Equal(_module.Object.objectClassKind(this), #_module.ObjectClassKind.OwnedObject())
                 == $Is(this, Tclass._module.OwnedObject())
               ==> $IsA#_module.ObjectClassKind(_module.Object.objectClassKind(this))
                 && _module.Object.objectClassKind#canCall(this)))
         && _module.Object.nonAliasing($Heap, this)
           == (
            _module.ObjectClassKind#Equal(_module.Object.objectClassKind(this), #_module.ObjectClassKind.Thread())
               == $Is(this, Tclass._module.Thread())
             && _module.ObjectClassKind#Equal(_module.Object.objectClassKind(this), #_module.ObjectClassKind.OwnedObject())
               == $Is(this, Tclass._module.OwnedObject())
             && _module.ObjectClassKind#Equal(_module.Object.objectClassKind(this), #_module.ObjectClassKind.Lifetime())
               == $Is(this, Tclass._module.Lifetime())));
}

function _module.Object.nonAliasing#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.nonAliasing
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.nonAliasing($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Object())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.nonAliasing($h0, this) == _module.Object.nonAliasing($h1, this));

function _module.Object.nonAliasing#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.nonAliasing
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.nonAliasing#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.nonAliasing#requires($Heap, this) == true);

procedure {:verboseName "Object.nonAliasing (well-formedness)"} CheckWellformed$$_module.Object.nonAliasing(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.Object.triggerAxioms
function _module.Object.triggerAxioms($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.triggerAxioms
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.triggerAxioms($Heap, this) } 
    _module.Object.triggerAxioms#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> _module.Object.triggerAxioms($Heap, this));
// definition axiom for _module.Object.triggerAxioms (revealed)
axiom {:id "id748"} 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.triggerAxioms($Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.triggerAxioms#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> _module.Object.nonAliasing#canCall($Heap, this)
         && _module.Object.triggerAxioms($Heap, this)
           == _module.Object.nonAliasing($Heap, this));
}

function _module.Object.triggerAxioms#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.triggerAxioms
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.triggerAxioms($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Object())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.triggerAxioms($h0, this)
       == _module.Object.triggerAxioms($h1, this));

function _module.Object.triggerAxioms#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.triggerAxioms
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.triggerAxioms#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.triggerAxioms#requires($Heap, this) == true);

procedure {:verboseName "Object.triggerAxioms (well-formedness)"} CheckWellformed$$_module.Object.triggerAxioms(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id749"} _module.Object.triggerAxioms($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.triggerAxioms (well-formedness)"} CheckWellformed$$_module.Object.triggerAxioms(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        assert {:id "id750"} this == this
           || (Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
              Set#UnionOne(Set#Empty(): Set, $Box(this)))
             && !Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
              Set#UnionOne(Set#Empty(): Set, $Box(this))));
        assume this == this || _module.Object.triggerAxioms#canCall($Heap, this);
        assume {:id "id751"} _module.Object.triggerAxioms($Heap, this);
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(315,5)
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        assert {:id "id752"} {:subsumption 0} (forall $o: ref, $f: Field :: 
          $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.nonAliasing#canCall($Heap, this);
        assume _module.Object.nonAliasing#canCall($Heap, this);
        assume {:id "id753"} _module.Object.nonAliasing($Heap, this);
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.nonAliasing#canCall($Heap, this);
        assume {:id "id754"} _module.Object.triggerAxioms($Heap, this)
           == _module.Object.nonAliasing($Heap, this);
        assume _module.Object.nonAliasing#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.triggerAxioms($Heap, this), TBool);
        assert {:id "id755"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Object.join (well-formedness)"} CheckWellFormed$$_module.Object.join(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.join (well-formedness)"} CheckWellFormed$$_module.Object.join(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var newtype$check#1: ref;


    // AddMethodImpl: join, CheckWellFormed$$_module.Object.join
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this));
    assert {:id "id756"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this));
    assume {:id "id757"} _module.Universe.globalBaseInv($Heap, _module.Object.universe(this));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.baseFieldsInv#canCall($Heap, this);
    assume {:id "id758"} _module.Object.baseFieldsInv($Heap, this);
    newtype$check#0 := this;
    newtype$check#1 := this;
    assume {:id "id759"} this != _module.Object.universe(this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == _module.Object.universe(this));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
    assume {:id "id760"} _module.Object.objectGlobalBaseInv($Heap, this);
    assert {:id "id761"} _module.Object.universe(this) != null;
    assert {:id "id762"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id763"} _module.Object.universe(this) != null;
    assert {:id "id764"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume {:id "id765"} Set#Equal($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "Object.join (call)"} Call$$_module.Object.join(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  // user-defined preconditions
  requires {:id "id766"} _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
     ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
       || Lit(true);
  requires {:id "id767"} _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
     ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
       || (forall o#0: ref :: 
        { _module.Object.triggerAxioms($Heap, o#0) } 
          { _module.Object.baseFieldsInv($Heap, o#0) } 
          { _module.Object.universe(o#0) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#0)) } 
        $Is(o#0, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#0))
           ==> _module.Object.universe(o#0) == _module.Object.universe(this)
             && o#0 != _module.Object.universe(this)
             && _module.Object.baseFieldsInv($Heap, o#0)
             && _module.Object.triggerAxioms($Heap, o#0));
  requires {:id "id768"} _module.Object.baseFieldsInv($Heap, this);
  requires {:id "id769"} this != _module.Object.universe(this);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalBaseInv#canCall($Heap, this);
  free ensures {:id "id770"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalBaseInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Object.baseFieldsInv($Heap, this)
     && _module.Universe.globalBaseInv($Heap, _module.Object.universe(this));
  ensures {:id "id771"} Set#Equal($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == _module.Object.universe(this));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Object.join (correctness)"} Impl$$_module.Object.join(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 9 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id772"} _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#2: ref :: 
      { _module.Object.triggerAxioms($Heap, o#2) } 
        { _module.Object.baseFieldsInv($Heap, o#2) } 
        { _module.Object.universe(o#2) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#2)) } 
      $Is(o#2, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#2))
         ==> _module.Object.universe(o#2) == _module.Object.universe(this)
           && o#2 != _module.Object.universe(this)
           && _module.Object.baseFieldsInv($Heap, o#2)
           && _module.Object.triggerAxioms($Heap, o#2));
  requires {:id "id773"} _module.Object.baseFieldsInv($Heap, this);
  requires {:id "id774"} this != _module.Object.universe(this);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalBaseInv#canCall($Heap, this);
  ensures {:id "id775"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id776"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || _module.Object.baseFieldsInv($Heap, this);
  ensures {:id "id777"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || Lit(true));
  ensures {:id "id778"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#3: ref :: 
            { _module.Object.triggerAxioms($Heap, o#3) } 
              { _module.Object.baseFieldsInv($Heap, o#3) } 
              { _module.Object.universe(o#3) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#3)) } 
            $Is(o#3, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3))
               ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                 && o#3 != _module.Object.universe(this)
                 && _module.Object.baseFieldsInv($Heap, o#3)
                 && _module.Object.triggerAxioms($Heap, o#3)));
  ensures {:id "id779"} Set#Equal($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == _module.Object.universe(this));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.join (correctness)"} Impl$$_module.Object.join(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: Set;
  var o#0_0: ref;

    // AddMethodImpl: join, Impl$$_module.Object.join
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(325,22)
    assert {:id "id780"} _module.Object.universe(this) != null;
    assume true;
    assert {:id "id781"} $_ModifiesFrame[_module.Object.universe(this), _module.Universe.content];
    assert {:id "id782"} _module.Object.universe(this) != null;
    assume true;
    $rhs#0 := Set#Union($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    $Heap := update($Heap, _module.Object.universe(this), _module.Universe.content, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(326,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc o#0_0;
        assume $Is(o#0_0, Tclass._module.Object());
        assert {:id "id785"} {:subsumption 0} _module.Object.universe(this) != null;
        assume true;
        assume {:id "id786"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#0_0));
        if (*)
        {
            assert {:id "id787"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            assume _module.Object.baseFieldsInv#canCall($Heap, o#0_0);
            assume _module.Object.baseFieldsInv#canCall($Heap, o#0_0);
            assume {:id "id788"} _module.Object.baseFieldsInv($Heap, o#0_0);
            assume false;
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(327,34)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id789"} o#0_0 != null;
        assert {:id "id790"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
        call {:id "id791"} Call$$_module.Object.baseFieldsInvMonotonicity(old($Heap), $Heap, o#0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id792"} _module.Object.baseFieldsInv($Heap, o#0_0);
        assume false;
    }
    else
    {
        assume (forall o#0_1: ref :: 
          { _module.Object.baseFieldsInv($Heap, o#0_1) } 
            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#0_1)) } 
          $Is(o#0_1, Tclass._module.Object())
               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#0_1))
             ==> _module.Object.baseFieldsInv($Heap, o#0_1));
    }
}



// function declaration for _module.Object.goodPreAndLegalChangesSequence
function _module.Object.goodPreAndLegalChangesSequence($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool
uses {
// definition axiom for _module.Object.goodPreAndLegalChangesSequence (revealed)
axiom {:id "id793"} 10 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
    { _module.Object.goodPreAndLegalChangesSequence($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Object.goodPreAndLegalChangesSequence#canCall($prevHeap, $Heap, this, running#0)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
           && $Is(running#0, TSet(Tclass._module.Thread())))
       ==> (Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> 
          (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
           ==> _module.Universe.legalTransitionsSequence#canCall($prevHeap, $Heap, _module.Object.universe(this), running#0))
         && _module.Object.goodPreAndLegalChangesSequence($prevHeap, $Heap, this, running#0)
           == (
            Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
             && _module.Universe.legalTransitionsSequence($prevHeap, $Heap, _module.Object.universe(this), running#0)));
}

function _module.Object.goodPreAndLegalChangesSequence#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool;

// frame axiom for _module.Object.goodPreAndLegalChangesSequence
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: Set :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.goodPreAndLegalChangesSequence($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && (_module.Object.goodPreAndLegalChangesSequence#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, TSet(Tclass._module.Thread()))
           && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.goodPreAndLegalChangesSequence($prevHeap, $h0, this, running#0)
       == _module.Object.goodPreAndLegalChangesSequence($prevHeap, $h1, this, running#0));

function _module.Object.goodPreAndLegalChangesSequence#requires(Heap, Heap, ref, Set) : bool;

// #requires axiom for _module.Object.goodPreAndLegalChangesSequence
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
  { _module.Object.goodPreAndLegalChangesSequence#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
       && $Is(running#0, TSet(Tclass._module.Thread()))
     ==> _module.Object.goodPreAndLegalChangesSequence#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, TSet(Tclass._module.Thread()), $prevHeap));

procedure {:verboseName "Object.goodPreAndLegalChangesSequence (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChangesSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.goodPreAndLegalChangesSequence (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChangesSequence(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##running#0: Set;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id794"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
        assert {:id "id795"} _module.Object.universe(this) != null;
        assert {:id "id796"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this)))
        {
            assert {:id "id797"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                 ==> $_ReadsFrame[$o, $f]);
        }

        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           && (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
        {
            assert {:id "id798"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            ##running#0 := running#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
            assert {:id "id799"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            assert {:id "id800"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0);
        }

        assume {:id "id801"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
           == (
            Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             && _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0));
        assume Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> 
          (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0), 
          TBool);
        assert {:id "id802"} b$reqreads#0;
        assert {:id "id803"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.goodPreAndLegalChanges
function _module.Object.goodPreAndLegalChanges($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool
uses {
// definition axiom for _module.Object.goodPreAndLegalChanges (revealed)
axiom {:id "id804"} 18 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
    { _module.Object.goodPreAndLegalChanges($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Object.goodPreAndLegalChanges#canCall($prevHeap, $Heap, this, running#0)
         || (18 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
           && $Is(running#0, Tclass._module.Thread()))
       ==> (Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> 
          (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
           ==> _module.Universe.legalTransition#canCall($prevHeap, $Heap, _module.Object.universe(this), running#0))
         && _module.Object.goodPreAndLegalChanges($prevHeap, $Heap, this, running#0)
           == (
            Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
             && _module.Universe.legalTransition($prevHeap, $Heap, _module.Object.universe(this), running#0)));
}

function _module.Object.goodPreAndLegalChanges#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool;

// frame axiom for _module.Object.goodPreAndLegalChanges
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.goodPreAndLegalChanges($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && (_module.Object.goodPreAndLegalChanges#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, Tclass._module.Thread())
           && $IsAlloc(running#0, Tclass._module.Thread(), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.goodPreAndLegalChanges($prevHeap, $h0, this, running#0)
       == _module.Object.goodPreAndLegalChanges($prevHeap, $h1, this, running#0));

function _module.Object.goodPreAndLegalChanges#requires(Heap, Heap, ref, ref) : bool;

// #requires axiom for _module.Object.goodPreAndLegalChanges
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
  { _module.Object.goodPreAndLegalChanges#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
       && $Is(running#0, Tclass._module.Thread())
     ==> _module.Object.goodPreAndLegalChanges#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, Tclass._module.Thread(), $prevHeap));

procedure {:verboseName "Object.goodPreAndLegalChanges (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChanges(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 18 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.goodPreAndLegalChanges (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChanges(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##running#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id805"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
        assert {:id "id806"} _module.Object.universe(this) != null;
        assert {:id "id807"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this)))
        {
            assert {:id "id808"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                 ==> $_ReadsFrame[$o, $f]);
        }

        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           && (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
        {
            assert {:id "id809"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            ##running#0 := running#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
            assert {:id "id810"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            assert {:id "id811"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0);
        }

        assume {:id "id812"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
           == (
            Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             && _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0));
        assume Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> 
          (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0), TBool);
        assert {:id "id813"} b$reqreads#0;
        assert {:id "id814"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.objectClassKind
function _module.Object.objectClassKind(this: ref) : DatatypeType
uses {
// consequence axiom for _module.Object.objectClassKind
axiom 2 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Object.objectClassKind(this) } 
    _module.Object.objectClassKind#canCall(this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Object()))
       ==> $Is(_module.Object.objectClassKind(this), Tclass._module.ObjectClassKind()));
}

function _module.Object.objectClassKind#canCall(this: ref) : bool;

function _module.Object.objectClassKind#requires(ref) : bool;

// #requires axiom for _module.Object.objectClassKind
axiom (forall this: ref :: 
  { _module.Object.objectClassKind#requires(this) } 
  this != null && $Is(this, Tclass._module.Object())
     ==> _module.Object.objectClassKind#requires(this) == true);

procedure {:verboseName "Object.objectClassKind (well-formedness)"} CheckWellformed$$_module.Object.objectClassKind(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.Object.baseFieldsInv
function _module.Object.baseFieldsInv($heap: Heap, this: ref) : bool;

function _module.Object.baseFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.baseFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.baseFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Object())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.baseFieldsInv($h0, this)
       == _module.Object.baseFieldsInv($h1, this));

function _module.Object.baseFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.baseFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.baseFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.baseFieldsInv#requires($Heap, this) == true);

procedure {:verboseName "Object.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.Object.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Object.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Object.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 7 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Object.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseFieldsInvMonotonicity, CheckWellFormed$$_module.Object.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id815"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.baseFieldsInv#canCall(old($Heap), this);
    assume {:id "id816"} _module.Object.baseFieldsInv(old($Heap), this);
    assert {:id "id817"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id818"} _module.Object.universe(this) != null;
    assert {:id "id819"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id820"} _module.Object.universe(this) != null;
    assume {:id "id821"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id822"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume {:id "id823"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.baseFieldsInv#canCall($Heap, this);
    assume {:id "id824"} _module.Object.baseFieldsInv($Heap, this);
}



procedure {:verboseName "Object.baseFieldsInvMonotonicity (call)"} Call$$_module.Object.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  // user-defined preconditions
  requires {:id "id825"} _module.Object.baseFieldsInv(previous$Heap, this);
  requires {:id "id826"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id827"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.baseFieldsInv#canCall(current$Heap, this);
  ensures {:id "id828"} _module.Object.baseFieldsInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for _module.Object.localInv
function _module.Object.localInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.localInv
axiom 12 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.localInv($Heap, this) } 
    _module.Object.localInv#canCall($Heap, this)
         || (12 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> 
      _module.Object.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this));
}

function _module.Object.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.localInv($h0, this) == _module.Object.localInv($h1, this));

function _module.Object.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.localInv#requires($Heap, this) == true);

procedure {:verboseName "Object.localInv (well-formedness)"} CheckWellformed$$_module.Object.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 12 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id829"} _module.Object.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id830"} _module.Object.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || _module.Object.baseFieldsInv($Heap, this);
  ensures {:id "id831"} _module.Object.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || Lit(true));
  ensures {:id "id832"} _module.Object.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#0))
               ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                 && o#0 != _module.Object.universe(this)
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.localInv (well-formedness)"} CheckWellformed$$_module.Object.localInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id833"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Object.localInv#canCall($Heap, this);
            assume {:id "id834"} _module.Object.localInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
            assume {:id "id835"} _module.Object.objectGlobalBaseInv($Heap, this);
        }
        else
        {
            assume {:id "id836"} _module.Object.localInv($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module.Object.localInv2
function _module.Object.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.Object.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.localInv2($prevHeap, $h0, this)
       == _module.Object.localInv2($prevHeap, $h1, this));

function _module.Object.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.localInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Object.localInv2 (well-formedness)"} CheckWellformed$$_module.Object.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.Object.inv
function _module.Object.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.inv
axiom 15 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this) } 
    _module.Object.inv#canCall($Heap, this)
         || (15 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> 
      _module.Object.inv($Heap, this)
       ==> _module.Object.localInv($Heap, this));
}

function _module.Object.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.inv($h0, this) == _module.Object.inv($h1, this));

function _module.Object.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.inv#requires($Heap, this) == true);

procedure {:verboseName "Object.inv (well-formedness)"} CheckWellformed$$_module.Object.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id837"} _module.Object.inv($Heap, this) ==> _module.Object.localInv($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.inv (well-formedness)"} CheckWellformed$$_module.Object.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id838"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Object.inv#canCall($Heap, this);
            assume {:id "id839"} _module.Object.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.localInv#canCall($Heap, this);
            assume {:id "id840"} _module.Object.localInv($Heap, this);
        }
        else
        {
            assume {:id "id841"} _module.Object.inv($Heap, this) ==> _module.Object.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module.Object.sequenceInv2
function _module.Object.sequenceInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.Object.sequenceInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.sequenceInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.sequenceInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.sequenceInv2($prevHeap, $h0, this)
       == _module.Object.sequenceInv2($prevHeap, $h1, this));

function _module.Object.sequenceInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.sequenceInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.sequenceInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.sequenceInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Object.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.Object.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.Object.inv2
function _module.Object.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.inv2
axiom 15 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this) } 
    _module.Object.inv2#canCall($prevHeap, $Heap, this)
         || (15 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap))
       ==> 
      _module.Object.inv2($prevHeap, $Heap, this)
       ==> _module.Object.localInv2($prevHeap, $Heap, this)
         && _module.Object.sequenceInv2($prevHeap, $Heap, this));
}

function _module.Object.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.inv2($prevHeap, $h0, this)
       == _module.Object.inv2($prevHeap, $h1, this));

function _module.Object.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.inv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Object.inv2 (well-formedness)"} CheckWellformed$$_module.Object.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 15 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id842"} _module.Object.inv2(previous$Heap, current$Heap, this)
     ==> _module.Object.localInv2(previous$Heap, current$Heap, this);
  ensures {:id "id843"} _module.Object.inv2(previous$Heap, current$Heap, this)
     ==> _module.Object.sequenceInv2(previous$Heap, current$Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.inv2 (well-formedness)"} CheckWellformed$$_module.Object.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id844"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            assert {:id "id845"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Object.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id846"} _module.Object.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id847"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            assume _module.Object.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id848"} _module.Object.localInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id849"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id850"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id851"} _module.Object.inv2(old($Heap), $Heap, this)
               ==> _module.Object.localInv2(old($Heap), $Heap, this)
                 && _module.Object.sequenceInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



procedure {:verboseName "Object.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Object.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Object.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.Object.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id852"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id853"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id854"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assert {:id "id855"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id856"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Object.sequenceAdmissibility (call)"} Call$$_module.Object.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id857"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id858"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id859"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id860"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#0: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                      { _module.Object.universe(o#0) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#0)) } 
                    $Is(o#0, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0))
                       ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                         && o#0 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#0)
                         && _module.Object.triggerAxioms(previous$Heap, o#0)))));
  requires {:id "id861"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id862"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#1: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#1) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                      { _module.Object.universe(o#1) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1)) } 
                    $Is(o#1, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1))
                       ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                         && o#1 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#1)
                         && _module.Object.triggerAxioms(current$Heap, o#1)))));
  requires {:id "id863"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id864"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#2: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2)) } 
                $Is(o#2, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2))
                   ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap))));
  requires {:id "id865"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || Set#Subset(running#0, 
            $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id866"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#3: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#3)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#3)) } 
            $Is(o#3, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#3
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3)));
  requires {:id "id867"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#4: ref :: 
            { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#4)) } 
            $Is(o#4, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4))
                 && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#4, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id868"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall l#0: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0) } 
              { $Unbox(read(previous$Heap, l#0, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(l#0)) } 
            $Is(l#0, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#0))
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, l#0, _module.Lifetime.owner))
                 && $IsAllocBox(read(previous$Heap, l#0, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  previous$Heap)
               ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id869"} _module.Object.sequenceInv2(previous$Heap, current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Object.admissibility (well-formedness)"} CheckWellFormed$$_module.Object.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 20 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.admissibility (well-formedness)"} CheckWellFormed$$_module.Object.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Object.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id870"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id871"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id872"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assert {:id "id873"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id874"} _module.Object.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.inv#canCall($Heap, this);
    assume {:id "id875"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "Object.admissibility (call)"} Call$$_module.Object.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id876"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id877"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id878"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id879"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#0: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                          { _module.Object.universe(o#0) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0)) } 
                        $Is(o#0, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0))
                           ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                             && o#0 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#0)
                             && _module.Object.triggerAxioms(previous$Heap, o#0))))));
  requires {:id "id880"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id881"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#1: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#1) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                          { _module.Object.universe(o#1) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1)) } 
                        $Is(o#1, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1))
                           ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                             && o#1 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#1)
                             && _module.Object.triggerAxioms(current$Heap, o#1))))));
  requires {:id "id882"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id883"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#2: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2)) } 
                    $Is(o#2, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2))
                       ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id884"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id885"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#3: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3)) } 
                $Is(o#3, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#3
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3))));
  requires {:id "id886"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#4: ref :: 
                { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4)) } 
                $Is(o#4, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4))
                     && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#4, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id887"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall l#0: ref :: 
                { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0) } 
                  { $Unbox(read(previous$Heap, l#0, _module.Lifetime.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#0)) } 
                $Is(l#0, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#0))
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, l#0, _module.Lifetime.owner))
                     && $IsAllocBox(read(previous$Heap, l#0, _module.Lifetime.owner), 
                      Tclass._module.Thread?(), 
                      previous$Heap)
                   ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#0))));
  requires {:id "id888"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id889"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id890"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#6: ref :: 
                { _module.Object.inv(previous$Heap, o#6) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#6)) } 
                $Is(o#6, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6))
                   ==> _module.Object.inv(previous$Heap, o#6))));
  requires {:id "id891"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#7: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#7) } 
              { _module.Object.inv(current$Heap, o#7) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#7)) } 
            $Is(o#7, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#7
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#7))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#7
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#7))));
  requires {:id "id892"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.inv(current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> _module.Object.inv(current$Heap, o#8)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Object.inv2(previous$Heap, current$Heap, this)
       ==> _module.Object.inv#canCall(current$Heap, this));
  ensures {:id "id893"} _module.Object.inv2(previous$Heap, current$Heap, this);
  ensures {:id "id894"} _module.Object.inv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



// $Is axiom for non-null type _module.Object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Object()) } { $Is(c#0, Tclass._module.Object?()) } 
  $Is(c#0, Tclass._module.Object())
     <==> $Is(c#0, Tclass._module.Object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Object(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Object?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Object(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Object?(), $h));

const unique class._module.Thread?: ClassName;

// $Is axiom for class Thread
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Thread?()) } 
  $Is($o, Tclass._module.Thread?())
     <==> $o == null || dtype($o) == Tclass._module.Thread?());

// $IsAlloc axiom for class Thread
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Thread?(), $h) } 
  $IsAlloc($o, Tclass._module.Thread?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// function declaration for _module.Thread.objectClassKind
function _module.Thread.objectClassKind(this: ref) : DatatypeType
uses {
// consequence axiom for _module.Thread.objectClassKind
axiom 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Thread.objectClassKind(this) } 
    _module.Thread.objectClassKind#canCall(this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> $Is(_module.Thread.objectClassKind(this), Tclass._module.ObjectClassKind()));
// definition axiom for _module.Thread.objectClassKind (revealed)
axiom {:id "id895"} 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Thread.objectClassKind(this) } 
    _module.Thread.objectClassKind#canCall(this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Thread.objectClassKind(this) == Lit(#_module.ObjectClassKind.Thread()));
// definition axiom for _module.Thread.objectClassKind for all literals (revealed)
axiom {:id "id896"} 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.Thread.objectClassKind(Lit(this)) } 
    _module.Thread.objectClassKind#canCall(Lit(this))
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Thread.objectClassKind(Lit(this))
         == Lit(#_module.ObjectClassKind.Thread()));
}

function _module.Thread.objectClassKind#canCall(this: ref) : bool;

function _module.Thread.objectClassKind#requires(ref) : bool;

// #requires axiom for _module.Thread.objectClassKind
axiom (forall this: ref :: 
  { _module.Thread.objectClassKind#requires(this) } 
  this != null && $Is(this, Tclass._module.Thread())
     ==> _module.Thread.objectClassKind#requires(this) == true);

// override axiom for _module.Object.objectClassKind in class _module.Thread
axiom 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Object.objectClassKind(this), $Is(this, Tclass._module.Thread()) } 
      { _module.Object.objectClassKind(this), _module.Thread.objectClassKind(this) } 
    _module.Thread.objectClassKind#canCall(this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.objectClassKind(this) == _module.Thread.objectClassKind(this));

procedure {:verboseName "Thread.objectClassKind (well-formedness)"} CheckWellformed$$_module.Thread.objectClassKind(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Thread.objectClassKind (override check)"} OverrideCheck$$_module.Thread.objectClassKind(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.objectClassKind (override check)"} OverrideCheck$$_module.Thread.objectClassKind(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id898"} true;
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id899"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.Thread.baseFieldsInv
function _module.Thread.baseFieldsInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Thread.baseFieldsInv (revealed)
axiom {:id "id900"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.baseFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> _module.Thread.baseFieldsInv($Heap, this) == Lit(true));
}

function _module.Thread.baseFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.baseFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.baseFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Thread())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.baseFieldsInv($h0, this)
       == _module.Thread.baseFieldsInv($h1, this));

function _module.Thread.baseFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Thread.baseFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Thread.baseFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap)
     ==> _module.Thread.baseFieldsInv#requires($Heap, this) == true);

// override axiom for _module.Object.baseFieldsInv in class _module.Thread
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.baseFieldsInv($Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.baseFieldsInv($Heap, this), _module.Thread.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.baseFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.baseFieldsInv($Heap, this)
         == _module.Thread.baseFieldsInv($Heap, this));

procedure {:verboseName "Thread.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.Thread.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Thread.baseFieldsInv (override check)"} OverrideCheck$$_module.Thread.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.baseFieldsInv (override check)"} OverrideCheck$$_module.Thread.baseFieldsInv(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id902"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))), 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    assert {:id "id903"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this || $o == _module.Object.universe(this))
         ==> $o == this || $o == _module.Object.universe(this));
}



procedure {:verboseName "Thread.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseFieldsInvMonotonicity, CheckWellFormed$$_module.Thread.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id904"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume _module.Thread.baseFieldsInv#canCall(old($Heap), this);
    assume {:id "id905"} _module.Thread.baseFieldsInv(old($Heap), this);
    assert {:id "id906"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assert {:id "id907"} _module.Object.universe(this) != null;
    assert {:id "id908"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id909"} _module.Object.universe(this) != null;
    assume {:id "id910"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id911"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume {:id "id912"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.baseFieldsInv#canCall($Heap, this);
    assume {:id "id913"} _module.Thread.baseFieldsInv($Heap, this);
}



procedure {:verboseName "Thread.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id914"} _module.Thread.baseFieldsInv(old($Heap), this)
       && Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
       && (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id915"} _module.Thread.baseFieldsInv#canCall(old($Heap), this)
       ==> _module.Thread.baseFieldsInv(old($Heap), this) || Lit(true);
    assert {:id "id916"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id917"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id918"} true;
    assert {:id "id919"} (forall $o: ref, $f: Field :: true);
    assert {:id "id920"} (forall $o: ref, $f: Field :: true);
    assume {:id "id921"} _module.Thread.baseFieldsInv($Heap, this);
    assert {:id "id922"} _module.Thread.baseFieldsInv#canCall($Heap, this)
       ==> _module.Thread.baseFieldsInv($Heap, this) || Lit(true);
}



procedure {:verboseName "Thread.baseFieldsInvMonotonicity (call)"} Call$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  // user-defined preconditions
  requires {:id "id923"} _module.Thread.baseFieldsInv#canCall(previous$Heap, this)
     ==> _module.Thread.baseFieldsInv(previous$Heap, this) || Lit(true);
  requires {:id "id924"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id925"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.baseFieldsInv#canCall(current$Heap, this);
  free ensures {:id "id926"} _module.Thread.baseFieldsInv#canCall(current$Heap, this)
     && 
    _module.Thread.baseFieldsInv(current$Heap, this)
     && Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Thread.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  free requires {:id "id927"} _module.Thread.baseFieldsInv#canCall(previous$Heap, this)
     && 
    _module.Thread.baseFieldsInv(previous$Heap, this)
     && Lit(true);
  requires {:id "id928"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id929"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.baseFieldsInv#canCall(current$Heap, this);
  ensures {:id "id930"} _module.Thread.baseFieldsInv#canCall(current$Heap, this)
     ==> _module.Thread.baseFieldsInv(current$Heap, this) || Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: baseFieldsInvMonotonicity, Impl$$_module.Thread.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.Thread.localInv
function _module.Thread.localInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Thread.localInv
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.localInv($Heap, this) } 
    _module.Thread.localInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> 
      _module.Thread.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this));
// definition axiom for _module.Thread.localInv (revealed)
axiom {:id "id931"} 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> (Lit(true) ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this))
         && _module.Thread.localInv($Heap, this)
           == (true && _module.Object.objectGlobalBaseInv($Heap, this)));
}

function _module.Thread.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.localInv($h0, this) == _module.Thread.localInv($h1, this));

function _module.Thread.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Thread.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Thread.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap)
     ==> _module.Thread.localInv#requires($Heap, this) == true);

// override axiom for _module.Object.localInv in class _module.Thread
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.localInv($Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv($Heap, this), _module.Thread.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.localInv($Heap, this) == _module.Thread.localInv($Heap, this));

procedure {:verboseName "Thread.localInv (well-formedness)"} CheckWellformed$$_module.Thread.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id932"} _module.Thread.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id933"} _module.Thread.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || _module.Object.baseFieldsInv($Heap, this);
  ensures {:id "id934"} _module.Thread.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || Lit(true));
  ensures {:id "id935"} _module.Thread.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#0))
               ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                 && o#0 != _module.Object.universe(this)
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.localInv (well-formedness)"} CheckWellformed$$_module.Thread.localInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id936"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Thread.localInv#canCall($Heap, this);
            assume {:id "id937"} _module.Thread.localInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
            assume {:id "id938"} _module.Object.objectGlobalBaseInv($Heap, this);
        }
        else
        {
            assume {:id "id939"} _module.Thread.localInv($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        }

        assume {:id "id940"} _module.Thread.localInv($Heap, this)
           == (true && _module.Object.objectGlobalBaseInv($Heap, this));
        assume Lit(true) ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Thread.localInv($Heap, this), TBool);
        assert {:id "id941"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Thread.localInv (override check)"} OverrideCheck$$_module.Thread.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.localInv (override check)"} OverrideCheck$$_module.Thread.localInv(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id942"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id943"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id944"} _module.Thread.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this);
    assert {:id "id945"} _module.Thread.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id946"} _module.Thread.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || _module.Object.baseFieldsInv($Heap, this);
    assert {:id "id947"} _module.Thread.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || Lit(true));
    assert {:id "id948"} _module.Thread.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || (forall o#1: ref :: 
              { _module.Object.triggerAxioms($Heap, o#1) } 
                { _module.Object.baseFieldsInv($Heap, o#1) } 
                { _module.Object.universe(o#1) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1)) } 
              $Is(o#1, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1))
                 ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                   && o#1 != _module.Object.universe(this)
                   && _module.Object.baseFieldsInv($Heap, o#1)
                   && _module.Object.triggerAxioms($Heap, o#1)));
}



// function declaration for _module.Thread.inv
function _module.Thread.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Thread.inv
axiom 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.inv($Heap, this) } 
    _module.Thread.inv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> 
      _module.Thread.inv($Heap, this)
       ==> _module.Thread.localInv($Heap, this));
// definition axiom for _module.Thread.inv (revealed)
axiom {:id "id949"} 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> (Lit(true) ==> _module.Thread.localInv#canCall($Heap, this))
         && _module.Thread.inv($Heap, this)
           == (true && _module.Thread.localInv($Heap, this)));
}

function _module.Thread.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.inv($h0, this) == _module.Thread.inv($h1, this));

function _module.Thread.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.Thread.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Thread.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap)
     ==> _module.Thread.inv#requires($Heap, this) == true);

// override axiom for _module.Object.inv in class _module.Thread
axiom 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.inv($Heap, this), _module.Thread.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.inv($Heap, this) == _module.Thread.inv($Heap, this));

procedure {:verboseName "Thread.inv (well-formedness)"} CheckWellformed$$_module.Thread.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id950"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this) || Lit(true);
  ensures {:id "id951"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id952"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || _module.Object.baseFieldsInv($Heap, this));
  ensures {:id "id953"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id954"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv (well-formedness)"} CheckWellformed$$_module.Thread.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id955"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Thread.inv#canCall($Heap, this);
            assume {:id "id956"} _module.Thread.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assume _module.Thread.localInv#canCall($Heap, this);
            assume {:id "id957"} _module.Thread.localInv($Heap, this);
        }
        else
        {
            assume {:id "id958"} _module.Thread.inv($Heap, this) ==> _module.Thread.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Thread.localInv#canCall($Heap, this);
        }

        assume {:id "id959"} _module.Thread.inv($Heap, this)
           == (true && _module.Thread.localInv($Heap, this));
        assume Lit(true) ==> _module.Thread.localInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Thread.inv($Heap, this), TBool);
        assert {:id "id960"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Thread.inv (override check)"} OverrideCheck$$_module.Thread.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv (override check)"} OverrideCheck$$_module.Thread.inv(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id961"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id962"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id963"} _module.Thread.inv($Heap, this) ==> _module.Thread.localInv($Heap, this);
    assert {:id "id964"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this) || Lit(true);
    assert {:id "id965"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id966"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || _module.Object.baseFieldsInv($Heap, this));
    assert {:id "id967"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || Lit(true)));
    assert {:id "id968"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.triggerAxioms($Heap, o#1) } 
                    { _module.Object.baseFieldsInv($Heap, o#1) } 
                    { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this)
                       && _module.Object.baseFieldsInv($Heap, o#1)
                       && _module.Object.triggerAxioms($Heap, o#1))));
}



// function declaration for _module.Thread.localInv2
function _module.Thread.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Thread.localInv2 (revealed)
axiom {:id "id969"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> _module.Thread.localInv2($prevHeap, $Heap, this) == Lit(true));
}

function _module.Thread.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.localInv2($prevHeap, $h0, this)
       == _module.Thread.localInv2($prevHeap, $h1, this));

function _module.Thread.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Thread.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Thread.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $prevHeap)
     ==> _module.Thread.localInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.localInv2 in class _module.Thread
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.localInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv2($prevHeap, $Heap, this), _module.Thread.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.localInv2($prevHeap, $Heap, this)
         == _module.Thread.localInv2($prevHeap, $Heap, this));

procedure {:verboseName "Thread.localInv2 (well-formedness)"} CheckWellformed$$_module.Thread.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "Thread.localInv2 (override check)"} OverrideCheck$$_module.Thread.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.localInv2 (override check)"} OverrideCheck$$_module.Thread.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id971"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id972"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Thread.sequenceInv2
function _module.Thread.sequenceInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Thread.sequenceInv2 (revealed)
axiom {:id "id973"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> _module.Thread.sequenceInv2($prevHeap, $Heap, this) == Lit(true));
}

function _module.Thread.sequenceInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.sequenceInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.sequenceInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.sequenceInv2($prevHeap, $h0, this)
       == _module.Thread.sequenceInv2($prevHeap, $h1, this));

function _module.Thread.sequenceInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Thread.sequenceInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Thread.sequenceInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $prevHeap)
     ==> _module.Thread.sequenceInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.sequenceInv2 in class _module.Thread
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.sequenceInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.sequenceInv2($prevHeap, $Heap, this), _module.Thread.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.sequenceInv2($prevHeap, $Heap, this)
         == _module.Thread.sequenceInv2($prevHeap, $Heap, this));

procedure {:verboseName "Thread.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.Thread.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "Thread.sequenceInv2 (override check)"} OverrideCheck$$_module.Thread.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.sequenceInv2 (override check)"} OverrideCheck$$_module.Thread.sequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id975"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id976"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Thread.inv2
function _module.Thread.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Thread.inv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.inv2($prevHeap, $Heap, this) } 
    _module.Thread.inv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> 
      _module.Thread.inv2($prevHeap, $Heap, this)
       ==> _module.Thread.localInv2($prevHeap, $Heap, this)
         && _module.Thread.sequenceInv2($prevHeap, $Heap, this));
// definition axiom for _module.Thread.inv2 (revealed)
axiom {:id "id977"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> _module.Thread.localInv2#canCall($prevHeap, $Heap, this)
         && (_module.Thread.localInv2($prevHeap, $Heap, this)
           ==> _module.Thread.sequenceInv2#canCall($prevHeap, $Heap, this))
         && _module.Thread.inv2($prevHeap, $Heap, this)
           == (_module.Thread.localInv2($prevHeap, $Heap, this)
             && _module.Thread.sequenceInv2($prevHeap, $Heap, this)));
}

function _module.Thread.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.inv2($prevHeap, $h0, this)
       == _module.Thread.inv2($prevHeap, $h1, this));

function _module.Thread.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Thread.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Thread.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $prevHeap)
     ==> _module.Thread.inv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.inv2 in class _module.Thread
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.inv2($prevHeap, $Heap, this), _module.Thread.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.inv2($prevHeap, $Heap, this)
         == _module.Thread.inv2($prevHeap, $Heap, this));

procedure {:verboseName "Thread.inv2 (well-formedness)"} CheckWellformed$$_module.Thread.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id978"} _module.Thread.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Thread.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.localInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id979"} _module.Thread.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.sequenceInv2(previous$Heap, current$Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv2 (well-formedness)"} CheckWellformed$$_module.Thread.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id980"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assert {:id "id981"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Thread.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id982"} _module.Thread.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id983"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assume _module.Thread.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id984"} _module.Thread.localInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id985"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assume _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id986"} _module.Thread.sequenceInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id987"} _module.Thread.inv2(old($Heap), $Heap, this)
               ==> _module.Thread.localInv2(old($Heap), $Heap, this)
                 && _module.Thread.sequenceInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
        assert {:id "id988"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Thread.localInv2#canCall(old($Heap), $Heap, this);
        if (_module.Thread.localInv2(old($Heap), $Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id989"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id990"} _module.Thread.inv2(old($Heap), $Heap, this)
           == (_module.Thread.localInv2(old($Heap), $Heap, this)
             && _module.Thread.sequenceInv2(old($Heap), $Heap, this));
        assume _module.Thread.localInv2#canCall(old($Heap), $Heap, this)
           && (_module.Thread.localInv2(old($Heap), $Heap, this)
             ==> _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Thread.inv2(old($Heap), $Heap, this), TBool);
        assert {:id "id991"} b$reqreads#0;
        assert {:id "id992"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "Thread.inv2 (override check)"} OverrideCheck$$_module.Thread.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv2 (override check)"} OverrideCheck$$_module.Thread.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id993"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id994"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id995"} _module.Thread.inv2(old($Heap), $Heap, this)
       ==> _module.Thread.localInv2(old($Heap), $Heap, this)
         && _module.Thread.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id996"} _module.Thread.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Thread.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.localInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id997"} _module.Thread.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.sequenceInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "Thread.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.Thread.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id998"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assert {:id "id999"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1000"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assert {:id "id1001"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1002"} _module.Thread.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Thread.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id1003"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id1004"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1005"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1006"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1007"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id1008"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1009"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id1010"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id1011"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id1012"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || Set#Subset(running#0, 
              $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id1013"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id1014"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object?(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id1015"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall l#0: ref :: 
              { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#0)) } 
              $Is(l#0, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#0))
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), l#0, _module.Lifetime.owner))
                   && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                    Tclass._module.Thread?(), 
                    old($Heap))
                 ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0)));
    assert {:id "id1016"} Set#Subset(running#0, running#0);
    assert {:id "id1017"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1018"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1019"} _module.Thread.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id1020"} _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.sequenceInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "Thread.sequenceAdmissibility (call)"} Call$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id1021"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1022"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1023"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1024"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id1025"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1026"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id1027"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id1028"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id1029"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || Set#Subset(running#0, 
            $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id1030"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id1031"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id1032"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall l#1: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
              { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(l#1)) } 
            $Is(l#1, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#1))
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, l#1, _module.Lifetime.owner))
                 && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  previous$Heap)
               ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id1033"} _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Thread.sequenceInv2(previous$Heap, current$Heap, this)
     && Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Thread.sequenceAdmissibility (correctness)"} Impl$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1034"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id1035"} _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.sequenceInv2(previous$Heap, current$Heap, this) || Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.sequenceAdmissibility (correctness)"} Impl$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.Thread.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Thread.admissibility (well-formedness)"} CheckWellFormed$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.admissibility (well-formedness)"} CheckWellFormed$$_module.Thread.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Thread.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1036"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assert {:id "id1037"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1038"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assert {:id "id1039"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume _module.Thread.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1040"} _module.Thread.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.inv#canCall($Heap, this);
    assume {:id "id1041"} _module.Thread.inv($Heap, this);
}



procedure {:verboseName "Thread.admissibility (override check)"} OverrideCheck$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.admissibility (override check)"} OverrideCheck$$_module.Thread.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id1042"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id1043"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1044"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1045"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1046"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id1047"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1048"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id1049"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id1050"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id1051"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id1052"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id1053"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object?(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id1054"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall l#0: ref :: 
                  { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                    { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#0)) } 
                  $Is(l#0, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(l#0))
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), l#0, _module.Lifetime.owner))
                       && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                        Tclass._module.Thread?(), 
                        old($Heap))
                     ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0))));
    assert {:id "id1055"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1056"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id1057"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id1058"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id1059"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id1060"} running#0 != null ==> running#0 != null;
    assert {:id "id1061"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1062"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1063"} _module.Thread.inv2(old($Heap), $Heap, this) && _module.Thread.inv($Heap, this);
    assert {:id "id1064"} _module.Thread.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.inv2(old($Heap), $Heap, this)
         || (_module.Thread.localInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Thread.localInv2(old($Heap), $Heap, this) || Lit(true));
    assert {:id "id1065"} _module.Thread.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.inv2(old($Heap), $Heap, this)
         || (_module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Thread.sequenceInv2(old($Heap), $Heap, this) || Lit(true));
    assert {:id "id1066"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this) || Lit(true);
    assert {:id "id1067"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this) || Lit(true));
    assert {:id "id1068"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(this))));
    assert {:id "id1069"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || _module.Object.baseFieldsInv($Heap, this)));
    assert {:id "id1070"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1071"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#9: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#9) } 
                        { _module.Object.baseFieldsInv($Heap, o#9) } 
                        { _module.Object.universe(o#9) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#9)) } 
                      $Is(o#9, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9))
                         ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                           && o#9 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#9)
                           && _module.Object.triggerAxioms($Heap, o#9)))));
}



procedure {:verboseName "Thread.admissibility (call)"} Call$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id1072"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1073"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1074"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1075"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#10: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#10) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#10) } 
                          { _module.Object.universe(o#10) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#10)) } 
                        $Is(o#10, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#10))
                           ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                             && o#10 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#10)
                             && _module.Object.triggerAxioms(previous$Heap, o#10))))));
  requires {:id "id1076"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1077"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#11: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#11) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#11) } 
                          { _module.Object.universe(o#11) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#11)) } 
                        $Is(o#11, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#11))
                           ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                             && o#11 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#11)
                             && _module.Object.triggerAxioms(current$Heap, o#11))))));
  requires {:id "id1078"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id1079"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#12: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#12)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#12)) } 
                    $Is(o#12, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#12))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#12))
                       ==> !$IsAllocBox($Box(o#12), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id1080"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id1081"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#13: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#13) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#13
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#13))));
  requires {:id "id1082"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#14: ref :: 
                { $Unbox(read(current$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#14, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#14)) } 
                $Is(o#14, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#14))
                     && $Is($Unbox(read(previous$Heap, o#14, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#14, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#14, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id1083"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall l#1: ref :: 
                { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
                  { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#1)) } 
                $Is(l#1, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#1))
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, l#1, _module.Lifetime.owner))
                     && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                      Tclass._module.Thread?(), 
                      previous$Heap)
                   ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1))));
  requires {:id "id1084"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1085"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#15: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#15) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#15) } 
                      { _module.Object.universe(o#15) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#15)) } 
                    $Is(o#15, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#15))
                       ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                         && o#15 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#15)
                         && _module.Object.triggerAxioms(previous$Heap, o#15)))));
  requires {:id "id1086"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#16: ref :: 
                { _module.Object.inv(previous$Heap, o#16) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#16)) } 
                $Is(o#16, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#16))
                   ==> _module.Object.inv(previous$Heap, o#16))));
  requires {:id "id1087"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#17: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#17) } 
              { _module.Object.inv(current$Heap, o#17) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#17
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#17))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#17
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#17))));
  requires {:id "id1088"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#18: ref :: 
            { _module.Object.inv(current$Heap, o#18) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#18)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#18)) } 
            $Is(o#18, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#18))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#18))
               ==> _module.Object.inv(current$Heap, o#18)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Thread.inv2(previous$Heap, current$Heap, this)
       ==> _module.Thread.inv#canCall(current$Heap, this));
  free ensures {:id "id1089"} _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Thread.inv2(previous$Heap, current$Heap, this)
     && 
    _module.Thread.localInv2(previous$Heap, current$Heap, this)
     && _module.Thread.sequenceInv2(previous$Heap, current$Heap, this);
  free ensures {:id "id1090"} _module.Thread.inv#canCall(current$Heap, this)
     && 
    _module.Thread.inv(current$Heap, this)
     && 
    true
     && _module.Thread.localInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Thread.admissibility (correctness)"} Impl$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1091"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Thread.inv2(previous$Heap, current$Heap, this)
       ==> _module.Thread.inv#canCall(current$Heap, this));
  ensures {:id "id1092"} _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.inv2(previous$Heap, current$Heap, this)
       || (_module.Thread.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Thread.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id1093"} _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.inv2(previous$Heap, current$Heap, this)
       || (_module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Thread.sequenceInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id1094"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this) || Lit(true);
  ensures {:id "id1095"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this) || Lit(true));
  ensures {:id "id1096"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id1097"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id1098"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id1099"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#29: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#29) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#29) } 
                      { _module.Object.universe(o#29) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#29)) } 
                    $Is(o#29, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#29))
                       ==> _module.Object.universe(o#29) == _module.Object.universe(this)
                         && o#29 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#29)
                         && _module.Object.triggerAxioms(current$Heap, o#29)))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.admissibility (correctness)"} Impl$$_module.Thread.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.Thread.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Thread.CheckSequenceInv2 (well-formedness)"} CheckWellFormed$$_module.Thread.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 18 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.CheckSequenceInv2 (well-formedness)"} CheckWellFormed$$_module.Thread.CheckSequenceInv2(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: CheckSequenceInv2, CheckWellFormed$$_module.Thread.CheckSequenceInv2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1100"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1101"} _module.Object.universe(this) != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assert {:id "id1102"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1103"} _module.Thread.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Thread.CheckSequenceInv2 (call)"} Call$$_module.Thread.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1104"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1105"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  requires {:id "id1106"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));
  requires {:id "id1107"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#1: ref :: 
            { _module.Object.inv($Heap, o#1) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#1)) } 
            $Is(o#1, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1))
               ==> _module.Object.inv($Heap, o#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
  free ensures {:id "id1108"} _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
     && 
    _module.Thread.sequenceInv2(old($Heap), $Heap, this)
     && Lit(true);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == _module.Object.universe(this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Thread.CheckSequenceInv2 (correctness)"} Impl$$_module.Thread.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 18 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1109"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
  ensures {:id "id1110"} _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.Thread.sequenceInv2(old($Heap), $Heap, this) || Lit(true);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == _module.Object.universe(this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.CheckSequenceInv2 (correctness)"} Impl$$_module.Thread.CheckSequenceInv2(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var universe##0: ref;
  var o#4: ref;
  var $Heap_at_0: Heap;
  var universe##1: ref;
  var o#6: ref;

    // AddMethodImpl: CheckSequenceInv2, Impl$$_module.Thread.CheckSequenceInv2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(394,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := _module.Object.universe(this);
    assert {:id "id1111"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##0
             || Set#IsMember($Unbox(read($Heap, universe##0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1112"} Call$$_module.__default.Havoc(universe##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(395,5)
    assert {:id "id1113"} {:subsumption 0} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1114"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this));
    if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this)))
    {
        // Begin Comprehension WF check
        havoc o#4;
        if ($Is(o#4, Tclass._module.Object())
           && $IsAlloc(o#4, Tclass._module.Object(), $Heap))
        {
            assert {:id "id1115"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assert {:id "id1116"} {:subsumption 0} _module.Object.universe(this) != null;
            assert {:id "id1117"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#4)))
            {
                assert {:id "id1118"} {:subsumption 0} o#4 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#4), Tclass._module.Object?(), $Heap);
                assert {:id "id1119"} $IsAlloc(o#4, Tclass._module.Object(), old($Heap));
                assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#4);
            }
        }

        // End Comprehension WF check
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
       && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
         ==> (forall o#5: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5)) } 
          $Is(o#5, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5))
             ==> _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#5)));
    assume {:id "id1120"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
       && (forall o#5: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#5)) } 
        $Is(o#5, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5))
           ==> _module.Object.sequenceInv2(old($Heap), $Heap, o#5));
    $Heap_at_0 := $Heap;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(397,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##1 := _module.Object.universe(this);
    assert {:id "id1121"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##1
             || Set#IsMember($Unbox(read($Heap, universe##1, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1122"} Call$$_module.__default.Havoc(universe##1);
    // TrCallStmt: After ProcessCallStmt

  after_0:
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(398,5)
    assert {:id "id1123"} {:subsumption 0} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1124"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), $Heap_at_0);
    assume _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_0, $Heap, _module.Object.universe(this));
    if (_module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this)))
    {
        // Begin Comprehension WF check
        havoc o#6;
        if ($Is(o#6, Tclass._module.Object())
           && $IsAlloc(o#6, Tclass._module.Object(), $Heap))
        {
            assert {:id "id1125"} $IsAlloc(this, Tclass._module.Thread(), $Heap_at_0);
            assert {:id "id1126"} {:subsumption 0} _module.Object.universe(this) != null;
            assert {:id "id1127"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), $Heap_at_0);
            if (Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#6)))
            {
                assert {:id "id1128"} {:subsumption 0} o#6 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#6), Tclass._module.Object?(), $Heap);
                assert {:id "id1129"} $IsAlloc(o#6, Tclass._module.Object(), $Heap_at_0);
                assume _module.Object.sequenceInv2#canCall($Heap_at_0, $Heap, o#6);
            }
        }

        // End Comprehension WF check
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_0, $Heap, _module.Object.universe(this))
       && (_module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this))
         ==> (forall o#7: ref :: 
          { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7) } 
            { Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7)) } 
          $Is(o#7, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7))
             ==> _module.Object.sequenceInv2#canCall($Heap_at_0, $Heap, o#7)));
    assume {:id "id1130"} _module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this))
       && (forall o#7: ref :: 
        { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7) } 
          { Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#7)) } 
        $Is(o#7, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7))
           ==> _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7));
}



procedure {:verboseName "Thread._ctor (well-formedness)"} CheckWellFormed$$_module.Thread.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref);
  free requires 22 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread._ctor (well-formedness)"} CheckWellFormed$$_module.Thread.__ctor(universe#0: ref, running#0: ref) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.Thread.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    assert {:id "id1131"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id1132"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id1133"} universe#0 != null;
    assume {:id "id1134"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1135"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1136"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id1137"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id1138"} _module.Universe.globalInv2(old($Heap), $Heap, universe#0);
}



procedure {:verboseName "Thread._ctor (call)"} Call$$_module.Thread.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1139"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id1140"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id1141"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id1142"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id1143"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1144"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
     && (forall o#4: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#4) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#4)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#4)) } 
      $Is(o#4, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#4))
         ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#4))
           && _module.Object.inv2(old($Heap), $Heap, o#4));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Thread._ctor (correctness)"} Impl$$_module.Thread.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 22 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1145"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#6: ref :: 
      { _module.Object.inv($Heap, o#6) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6))
         ==> _module.Object.inv($Heap, o#6));
  requires {:id "id1146"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id1147"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id1148"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id1149"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { _module.Object.triggerAxioms($Heap, o#7) } 
                  { _module.Object.baseFieldsInv($Heap, o#7) } 
                  { _module.Object.universe(o#7) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> _module.Object.universe(o#7) == _module.Object.universe(this)
                     && o#7 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#7)
                     && _module.Object.triggerAxioms($Heap, o#7))));
  ensures {:id "id1150"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#8: ref :: 
            { _module.Object.inv($Heap, o#8) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> _module.Object.inv($Heap, o#8)));
  ensures {:id "id1151"} _module.Universe.globalInv2#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.globalInv2(old($Heap), $Heap, universe#0)
       || (forall o#9: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#9) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#9)) } 
        $Is(o#9, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#9))
           ==> Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9))
             && _module.Object.inv2(old($Heap), $Heap, o#9));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread._ctor (correctness)"} Impl$$_module.Thread.__ctor(universe#0: ref, running#0: ref) returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.universe: ref;
  var defass#this.universe: bool;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.Thread.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(406,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(407,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(406,3)
    assert {:id "id1153"} defass#this.universe;
    assume this != null && $Is(this, Tclass._module.Thread?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume _module.Object.universe(this) == this.universe;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(406,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(409,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1154"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1155"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(410,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1156"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1157"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1158"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1159"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.Thread
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Thread()) } { $Is(c#0, Tclass._module.Thread?()) } 
  $Is(c#0, Tclass._module.Thread())
     <==> $Is(c#0, Tclass._module.Thread?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Thread
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Thread(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Thread?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Thread(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Thread?(), $h));

const unique class._module.OwnedObject?: ClassName;

function Tclass._module.OwnedObject?() : Ty
uses {
// Tclass._module.OwnedObject? Tag
axiom Tag(Tclass._module.OwnedObject?()) == Tagclass._module.OwnedObject?
   && TagFamily(Tclass._module.OwnedObject?()) == tytagFamily$OwnedObject;
}

const unique Tagclass._module.OwnedObject?: TyTag;

// Box/unbox axiom for Tclass._module.OwnedObject?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedObject?()) } 
  $IsBox(bx, Tclass._module.OwnedObject?())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.OwnedObject?()));

// $Is axiom for trait OwnedObject
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedObject?()) } 
  $Is($o, Tclass._module.OwnedObject?())
     <==> $o == null || implements$_module.OwnedObject(dtype($o)));

// $IsAlloc axiom for trait OwnedObject
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedObject?(), $h) } 
  $IsAlloc($o, Tclass._module.OwnedObject?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.OwnedObject(ty: Ty) : bool;

const _module.OwnedObject.nonvolatileVersion: Field
uses {
axiom FDim(_module.OwnedObject.nonvolatileVersion) == 0
   && FieldOfDecl(class._module.OwnedObject?, field$nonvolatileVersion)
     == _module.OwnedObject.nonvolatileVersion
   && $IsGhostField(_module.OwnedObject.nonvolatileVersion);
}

// OwnedObject.nonvolatileVersion: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int } 
  $IsGoodHeap($h) && $o != null && $Is($o, Tclass._module.OwnedObject?())
     ==> $Is($Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int, TInt));

// OwnedObject.nonvolatileVersion: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && $Is($o, Tclass._module.OwnedObject?())
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int, TInt, $h));

const _module.OwnedObject.owner: Field
uses {
axiom FDim(_module.OwnedObject.owner) == 0
   && FieldOfDecl(class._module.OwnedObject?, field$owner)
     == _module.OwnedObject.owner
   && $IsGhostField(_module.OwnedObject.owner);
}

// OwnedObject.owner: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.owner)): ref } 
  $IsGoodHeap($h) && $o != null && $Is($o, Tclass._module.OwnedObject?())
     ==> $Is($Unbox(read($h, $o, _module.OwnedObject.owner)): ref, Tclass._module.Object?()));

// OwnedObject.owner: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.owner)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && $Is($o, Tclass._module.OwnedObject?())
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.OwnedObject.owner)): ref, 
      Tclass._module.Object?(), 
      $h));

function _module.OwnedObject.lifetime(this: ref) : ref
uses {
// OwnedObject.lifetime: Type axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $o: ref :: 
    { _module.OwnedObject.lifetime($o) } 
    $o != null && $Is($o, Tclass._module.OwnedObject?())
       ==> $Is(_module.OwnedObject.lifetime($o), Tclass._module.Lifetime()));
// OwnedObject.lifetime: Allocation axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $h: Heap, $o: ref :: 
    { _module.OwnedObject.lifetime($o), $Unbox(read($h, $o, alloc)): bool } 
    $IsGoodHeap($h)
         && 
        $o != null
         && $Is($o, Tclass._module.OwnedObject?())
         && $Unbox(read($h, $o, alloc)): bool
       ==> $IsAlloc(_module.OwnedObject.lifetime($o), Tclass._module.Lifetime(), $h));
}

// function declaration for _module.OwnedObject.alive
function _module.OwnedObject.alive($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.alive (revealed)
axiom {:id "id1160"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.alive($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.alive#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> _module.OwnedObject.alive($Heap, this)
         == ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null));
}

function _module.OwnedObject.alive#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.alive
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.alive($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this && $f == _module.OwnedObject.owner
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.alive($h0, this) == _module.OwnedObject.alive($h1, this));

function _module.OwnedObject.alive#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.alive
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.alive#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.alive#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.alive (well-formedness)"} CheckWellformed$$_module.OwnedObject.alive(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.alive (well-formedness)"} CheckWellformed$$_module.OwnedObject.alive(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this && $f == _module.OwnedObject.owner);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    assert {:id "id1161"} this != null;
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.OwnedObject.owner];
        newtype$check#0 := null;
        assume {:id "id1162"} _module.OwnedObject.alive($Heap, this)
           == ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.alive($Heap, this), TBool);
        assert {:id "id1163"} b$reqreads#0;
        return;

        assume false;
    }
}



// function declaration for _module.OwnedObject.objectClassKind
function _module.OwnedObject.objectClassKind(this: ref) : DatatypeType
uses {
// consequence axiom for _module.OwnedObject.objectClassKind
axiom 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.objectClassKind(this) } 
    _module.OwnedObject.objectClassKind#canCall(this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> $Is(_module.OwnedObject.objectClassKind(this), Tclass._module.ObjectClassKind()));
// definition axiom for _module.OwnedObject.objectClassKind (revealed)
axiom {:id "id1164"} 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.objectClassKind(this) } 
    _module.OwnedObject.objectClassKind#canCall(this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.OwnedObject.objectClassKind(this)
         == Lit(#_module.ObjectClassKind.OwnedObject()));
// definition axiom for _module.OwnedObject.objectClassKind for all literals (revealed)
axiom {:id "id1165"} 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.OwnedObject.objectClassKind(Lit(this)) } 
    _module.OwnedObject.objectClassKind#canCall(Lit(this))
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.OwnedObject.objectClassKind(Lit(this))
         == Lit(#_module.ObjectClassKind.OwnedObject()));
}

function _module.OwnedObject.objectClassKind#canCall(this: ref) : bool;

function _module.OwnedObject.objectClassKind#requires(ref) : bool;

// #requires axiom for _module.OwnedObject.objectClassKind
axiom (forall this: ref :: 
  { _module.OwnedObject.objectClassKind#requires(this) } 
  this != null && $Is(this, Tclass._module.OwnedObject())
     ==> _module.OwnedObject.objectClassKind#requires(this) == true);

// override axiom for _module.Object.objectClassKind in class _module.OwnedObject
axiom 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Object.objectClassKind(this), $Is(this, Tclass._module.OwnedObject()) } 
      { _module.Object.objectClassKind(this), _module.OwnedObject.objectClassKind(this) } 
    _module.OwnedObject.objectClassKind#canCall(this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.objectClassKind(this)
         == _module.OwnedObject.objectClassKind(this));

procedure {:verboseName "OwnedObject.objectClassKind (well-formedness)"} CheckWellformed$$_module.OwnedObject.objectClassKind(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedObject.objectClassKind (override check)"} OverrideCheck$$_module.OwnedObject.objectClassKind(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.objectClassKind (override check)"} OverrideCheck$$_module.OwnedObject.objectClassKind(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1167"} true;
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1168"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.OwnedObject.objectFields
function _module.OwnedObject.objectFields($heap: Heap, this: ref) : Set
uses {
// consequence axiom for _module.OwnedObject.objectFields
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.objectFields($Heap, this) } 
    _module.OwnedObject.objectFields#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> $Is(_module.OwnedObject.objectFields($Heap, this), TSet(Tclass._module.Object())));
// alloc consequence axiom for _module.OwnedObject.objectFields
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { $IsAlloc(_module.OwnedObject.objectFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap) } 
    _module.OwnedObject.objectFields#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && this != null
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> $IsAlloc(_module.OwnedObject.objectFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap));
// definition axiom for _module.OwnedObject.objectFields (revealed)
axiom {:id "id1169"} 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.objectFields($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.objectFields#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> _module.OwnedObject.objectUserFields#canCall($Heap, this)
         && _module.OwnedObject.objectFields($Heap, this)
           == Set#Union(Set#Union(_module.OwnedObject.objectUserFields($Heap, this), 
              Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))), 
            (if $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null
               then Set#Empty(): Set
               else Set#UnionOne(Set#Empty(): Set, read($Heap, this, _module.OwnedObject.owner)))));
}

function _module.OwnedObject.objectFields#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.objectFields
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.objectFields($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.objectFields($h0, this)
       == _module.OwnedObject.objectFields($h1, this));

function _module.OwnedObject.objectFields#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.objectFields
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.objectFields#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.objectFields#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.objectFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.objectFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.objectFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.objectFields(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var newtype$check#2: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.OwnedObject.objectFields($Heap, this), TSet(Tclass._module.Object()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedObject.objectUserFields#canCall($Heap, this);
        b$reqreads#1 := $_ReadsFrame[this, _module.OwnedObject.owner];
        newtype$check#0 := null;
        if ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
        {
        }
        else
        {
            b$reqreads#2 := $_ReadsFrame[this, _module.OwnedObject.owner];
            newtype$check#1 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref;
            assert {:id "id1170"} $Is(newtype$check#1, Tclass._module.Object());
            newtype$check#2 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref;
        }

        assume {:id "id1171"} _module.OwnedObject.objectFields($Heap, this)
           == Set#Union(Set#Union(_module.OwnedObject.objectUserFields($Heap, this), 
              Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))), 
            (if $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null
               then Set#Empty(): Set
               else Set#UnionOne(Set#Empty(): Set, read($Heap, this, _module.OwnedObject.owner))));
        assume _module.OwnedObject.objectUserFields#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.objectFields($Heap, this), TSet(Tclass._module.Object()));
        assert {:id "id1172"} b$reqreads#0;
        assert {:id "id1173"} b$reqreads#1;
        assert {:id "id1174"} b$reqreads#2;
        return;

        assume false;
    }
}



// function declaration for _module.OwnedObject.baseFieldsInv
function _module.OwnedObject.baseFieldsInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.baseFieldsInv (revealed)
axiom {:id "id1175"} 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.baseFieldsInv#canCall($Heap, this)
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> _module.OwnedObject.objectFields#canCall($Heap, this)
         && _module.OwnedObject.baseFieldsInv($Heap, this)
           == Set#Subset(_module.OwnedObject.objectFields($Heap, this), 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set));
}

function _module.OwnedObject.baseFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.baseFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.baseFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.baseFieldsInv($h0, this)
       == _module.OwnedObject.baseFieldsInv($h1, this));

function _module.OwnedObject.baseFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.baseFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.baseFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.baseFieldsInv#requires($Heap, this) == true);

// override axiom for _module.Object.baseFieldsInv in class _module.OwnedObject
axiom 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.baseFieldsInv($Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.baseFieldsInv($Heap, this), _module.OwnedObject.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.baseFieldsInv#canCall($Heap, this)
         || (5 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.baseFieldsInv($Heap, this)
         == _module.OwnedObject.baseFieldsInv($Heap, this));

procedure {:verboseName "OwnedObject.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.baseFieldsInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedObject.objectFields#canCall($Heap, this);
        assert {:id "id1176"} _module.Object.universe(this) != null;
        b$reqreads#1 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        assume {:id "id1177"} _module.OwnedObject.baseFieldsInv($Heap, this)
           == Set#Subset(_module.OwnedObject.objectFields($Heap, this), 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
        assume _module.OwnedObject.objectFields#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.baseFieldsInv($Heap, this), TBool);
        assert {:id "id1178"} b$reqreads#0;
        assert {:id "id1179"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.baseFieldsInv (override check)"} OverrideCheck$$_module.OwnedObject.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInv (override check)"} OverrideCheck$$_module.OwnedObject.baseFieldsInv(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1180"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))), 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    assert {:id "id1181"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this || $o == _module.Object.universe(this))
         ==> $o == this || $o == _module.Object.universe(this));
}



procedure {:verboseName "OwnedObject.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 6 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseFieldsInvMonotonicity, CheckWellFormed$$_module.OwnedObject.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1182"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume _module.OwnedObject.baseFieldsInv#canCall(old($Heap), this);
    assume {:id "id1183"} _module.OwnedObject.baseFieldsInv(old($Heap), this);
    assert {:id "id1184"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assert {:id "id1185"} _module.Object.universe(this) != null;
    assert {:id "id1186"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1187"} _module.Object.universe(this) != null;
    assume {:id "id1188"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1189"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume {:id "id1190"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.baseFieldsInv#canCall($Heap, this);
    assume {:id "id1191"} _module.OwnedObject.baseFieldsInv($Heap, this);
}



procedure {:verboseName "OwnedObject.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 6 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id1192"} _module.OwnedObject.baseFieldsInv(old($Heap), this)
       && Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
       && (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1193"} _module.OwnedObject.baseFieldsInv#canCall(old($Heap), this)
       ==> _module.OwnedObject.baseFieldsInv(old($Heap), this)
         || Set#Subset(_module.OwnedObject.objectFields(old($Heap), this), 
          $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1194"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1195"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1196"} true;
    assert {:id "id1197"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1198"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1199"} _module.OwnedObject.baseFieldsInv($Heap, this);
    assert {:id "id1200"} _module.OwnedObject.baseFieldsInv#canCall($Heap, this)
       ==> _module.OwnedObject.baseFieldsInv($Heap, this)
         || Set#Subset(_module.OwnedObject.objectFields($Heap, this), 
          $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
}



procedure {:verboseName "OwnedObject.baseFieldsInvMonotonicity (call)"} Call$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  // user-defined preconditions
  requires {:id "id1201"} _module.OwnedObject.baseFieldsInv#canCall(previous$Heap, this)
     ==> _module.OwnedObject.baseFieldsInv(previous$Heap, this)
       || Set#Subset(_module.OwnedObject.objectFields(previous$Heap, this), 
        $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1202"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1203"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.baseFieldsInv#canCall(current$Heap, this);
  free ensures {:id "id1204"} _module.OwnedObject.baseFieldsInv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.baseFieldsInv(current$Heap, this)
     && Set#Subset(_module.OwnedObject.objectFields(current$Heap, this), 
      $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OwnedObject.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  free requires {:id "id1205"} _module.OwnedObject.baseFieldsInv#canCall(previous$Heap, this)
     && 
    _module.OwnedObject.baseFieldsInv(previous$Heap, this)
     && Set#Subset(_module.OwnedObject.objectFields(previous$Heap, this), 
      $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1206"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1207"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.baseFieldsInv#canCall(current$Heap, this);
  ensures {:id "id1208"} _module.OwnedObject.baseFieldsInv#canCall(current$Heap, this)
     ==> _module.OwnedObject.baseFieldsInv(current$Heap, this)
       || Set#Subset(_module.OwnedObject.objectFields(current$Heap, this), 
        $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: baseFieldsInvMonotonicity, Impl$$_module.OwnedObject.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.OwnedObject.unchangedNonvolatileFields
function _module.OwnedObject.unchangedNonvolatileFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.unchangedNonvolatileFields (revealed)
axiom {:id "id1209"} 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.unchangedNonvolatileFields#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           ==> _module.OwnedObject.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this))
         && _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this)
           == ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
             && _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)));
}

function _module.OwnedObject.unchangedNonvolatileFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.unchangedNonvolatileFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $h0, this)
       == _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $h1, this));

function _module.OwnedObject.unchangedNonvolatileFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.unchangedNonvolatileFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.unchangedNonvolatileFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.unchangedNonvolatileFields#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "OwnedObject.unchangedNonvolatileFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.unchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.unchangedNonvolatileFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.unchangedNonvolatileFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id1210"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.OwnedObject.owner];
        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
           == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1211"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id1212"} _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
           == ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
             && _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, this));
        assume $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           ==> _module.OwnedObject.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this), TBool);
        assert {:id "id1213"} b$reqreads#0;
        assert {:id "id1214"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.OwnedObject.localInv
function _module.OwnedObject.localInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.localInv
axiom 11 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localInv($Heap, this) } 
    _module.OwnedObject.localInv#canCall($Heap, this)
         || (11 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> 
      _module.OwnedObject.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this));
// definition axiom for _module.OwnedObject.localInv (revealed)
axiom {:id "id1215"} 11 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv#canCall($Heap, this)
         || (11 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this)
         && (_module.Object.objectGlobalBaseInv($Heap, this)
           ==> 
          Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
            $Box(this))
           ==> _module.Lifetime.alive#canCall($Heap, _module.OwnedObject.lifetime(this))
             && (
              (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this))
               ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
               ==> 
              $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.localUserInv#canCall($Heap, this)))
         && _module.OwnedObject.localInv($Heap, this)
           == (
            _module.Object.objectGlobalBaseInv($Heap, this)
             && Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
              $Box(this))
             && (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this))
               ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
             && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.localUserInv($Heap, this))));
}

function _module.OwnedObject.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localInv($h0, this)
       == _module.OwnedObject.localInv($h1, this));

function _module.OwnedObject.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.localInv#requires($Heap, this) == true);

// override axiom for _module.Object.localInv in class _module.OwnedObject
axiom 11 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.localInv($Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv($Heap, this), _module.OwnedObject.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv#canCall($Heap, this)
         || (11 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.localInv($Heap, this)
         == _module.OwnedObject.localInv($Heap, this));

procedure {:verboseName "OwnedObject.localInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 11 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1216"} _module.OwnedObject.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id1217"} _module.OwnedObject.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || _module.Object.baseFieldsInv($Heap, this);
  ensures {:id "id1218"} _module.OwnedObject.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || Lit(true));
  ensures {:id "id1219"} _module.OwnedObject.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#0))
               ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                 && o#0 != _module.Object.universe(this)
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1220"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.localInv#canCall($Heap, this);
            assume {:id "id1221"} _module.OwnedObject.localInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
            assume {:id "id1222"} _module.Object.objectGlobalBaseInv($Heap, this);
        }
        else
        {
            assume {:id "id1223"} _module.OwnedObject.localInv($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        if (_module.Object.objectGlobalBaseInv($Heap, this))
        {
            assert {:id "id1224"} _module.OwnedObject.lifetime(this) != null;
            b$reqreads#1 := $_ReadsFrame[_module.OwnedObject.lifetime(this), _module.Lifetime.elements];
        }

        if (_module.Object.objectGlobalBaseInv($Heap, this)
           && Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
            $Box(this)))
        {
            assert {:id "id1225"} _module.OwnedObject.lifetime(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.OwnedObject.lifetime(this)), Tclass._module.Lifetime?(), $Heap);
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && 
                  $o == _module.OwnedObject.lifetime(this)
                   && $f == _module.Lifetime.owner
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Lifetime.alive#canCall($Heap, _module.OwnedObject.lifetime(this));
            if (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this)))
            {
                b$reqreads#3 := $_ReadsFrame[this, _module.OwnedObject.owner];
                newtype$check#0 := null;
            }
        }

        if (_module.Object.objectGlobalBaseInv($Heap, this)
           && Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
            $Box(this))
           && (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this))
             ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null))
        {
            b$reqreads#4 := $_ReadsFrame[this, _module.OwnedObject.owner];
            newtype$check#1 := null;
            if ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
            {
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
                b$reqreads#5 := (forall $o: ref, $f: Field :: 
                  $o != null
                       && $Unbox(read($Heap, $o, alloc)): bool
                       && $Unbox(read($Heap, $o, alloc)): bool
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.OwnedObject.localUserInv#canCall($Heap, this);
            }
        }

        assume {:id "id1226"} _module.OwnedObject.localInv($Heap, this)
           == (
            _module.Object.objectGlobalBaseInv($Heap, this)
             && Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
              $Box(this))
             && (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this))
               ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
             && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.localUserInv($Heap, this)));
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this)
           && (_module.Object.objectGlobalBaseInv($Heap, this)
             ==> 
            Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
              $Box(this))
             ==> _module.Lifetime.alive#canCall($Heap, _module.OwnedObject.lifetime(this))
               && (
                (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this))
                 ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
                 ==> 
                $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
                 ==> _module.OwnedObject.localUserInv#canCall($Heap, this)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.localInv($Heap, this), TBool);
        assert {:id "id1227"} b$reqreads#0;
        assert {:id "id1228"} b$reqreads#1;
        assert {:id "id1229"} b$reqreads#2;
        assert {:id "id1230"} b$reqreads#3;
        assert {:id "id1231"} b$reqreads#4;
        assert {:id "id1232"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.localInv (override check)"} OverrideCheck$$_module.OwnedObject.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 11 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv (override check)"} OverrideCheck$$_module.OwnedObject.localInv(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1233"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1234"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1235"} _module.OwnedObject.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this);
    assert {:id "id1236"} _module.OwnedObject.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1237"} _module.OwnedObject.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || _module.Object.baseFieldsInv($Heap, this);
    assert {:id "id1238"} _module.OwnedObject.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || Lit(true));
    assert {:id "id1239"} _module.OwnedObject.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || (forall o#1: ref :: 
              { _module.Object.triggerAxioms($Heap, o#1) } 
                { _module.Object.baseFieldsInv($Heap, o#1) } 
                { _module.Object.universe(o#1) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1)) } 
              $Is(o#1, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1))
                 ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                   && o#1 != _module.Object.universe(this)
                   && _module.Object.baseFieldsInv($Heap, o#1)
                   && _module.Object.triggerAxioms($Heap, o#1)));
}



// function declaration for _module.OwnedObject.inv
function _module.OwnedObject.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.inv
axiom 14 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv($Heap, this) } 
    _module.OwnedObject.inv#canCall($Heap, this)
         || (14 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> 
      _module.OwnedObject.inv($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this));
// definition axiom for _module.OwnedObject.inv (revealed)
axiom {:id "id1240"} 14 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv#canCall($Heap, this)
         || (14 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> _module.OwnedObject.localInv#canCall($Heap, this)
         && (_module.OwnedObject.localInv($Heap, this)
           ==> 
          $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.OwnedObject.userInv#canCall($Heap, this))
         && _module.OwnedObject.inv($Heap, this)
           == (_module.OwnedObject.localInv($Heap, this)
             && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.userInv($Heap, this))));
}

function _module.OwnedObject.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.inv($h0, this) == _module.OwnedObject.inv($h1, this));

function _module.OwnedObject.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.inv#requires($Heap, this) == true);

// override axiom for _module.Object.inv in class _module.OwnedObject
axiom 14 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.inv($Heap, this), _module.OwnedObject.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv#canCall($Heap, this)
         || (14 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.inv($Heap, this) == _module.OwnedObject.inv($Heap, this));

procedure {:verboseName "OwnedObject.inv (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 14 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1241"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1242"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || _module.Object.baseFieldsInv($Heap, this));
  ensures {:id "id1243"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id1244"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));
  ensures {:id "id1245"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
        $Box(this));
  ensures {:id "id1246"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this))
         ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null);
  ensures {:id "id1247"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.localUserInv($Heap, this));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1248"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.inv#canCall($Heap, this);
            assume {:id "id1249"} _module.OwnedObject.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assume _module.OwnedObject.localInv#canCall($Heap, this);
            assume {:id "id1250"} _module.OwnedObject.localInv($Heap, this);
        }
        else
        {
            assume {:id "id1251"} _module.OwnedObject.inv($Heap, this)
               ==> _module.OwnedObject.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedObject.localInv#canCall($Heap, this);
        if (_module.OwnedObject.localInv($Heap, this))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.OwnedObject.owner];
            newtype$check#0 := null;
            if ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
            {
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
                b$reqreads#2 := (forall $o: ref, $f: Field :: 
                  $o != null
                       && $Unbox(read($Heap, $o, alloc)): bool
                       && $Unbox(read($Heap, $o, alloc)): bool
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.OwnedObject.userInv#canCall($Heap, this);
            }
        }

        assume {:id "id1252"} _module.OwnedObject.inv($Heap, this)
           == (_module.OwnedObject.localInv($Heap, this)
             && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.userInv($Heap, this)));
        assume _module.OwnedObject.localInv#canCall($Heap, this)
           && (_module.OwnedObject.localInv($Heap, this)
             ==> 
            $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.userInv#canCall($Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.inv($Heap, this), TBool);
        assert {:id "id1253"} b$reqreads#0;
        assert {:id "id1254"} b$reqreads#1;
        assert {:id "id1255"} b$reqreads#2;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.inv (override check)"} OverrideCheck$$_module.OwnedObject.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 14 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv (override check)"} OverrideCheck$$_module.OwnedObject.inv(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1256"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1257"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1258"} _module.OwnedObject.inv($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this);
    assert {:id "id1259"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id1260"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || _module.Object.baseFieldsInv($Heap, this));
    assert {:id "id1261"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || Lit(true)));
    assert {:id "id1262"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.triggerAxioms($Heap, o#1) } 
                    { _module.Object.baseFieldsInv($Heap, o#1) } 
                    { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this)
                       && _module.Object.baseFieldsInv($Heap, o#1)
                       && _module.Object.triggerAxioms($Heap, o#1))));
    assert {:id "id1263"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
          $Box(this));
    assert {:id "id1264"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this))
           ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null);
    assert {:id "id1265"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.OwnedObject.localUserInv($Heap, this));
}



// function declaration for _module.OwnedObject.localInv2
function _module.OwnedObject.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.localInv2 (revealed)
axiom {:id "id1266"} 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> (Lit(true)
           ==> 
          $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.OwnedObject.localUserInv2#canCall($prevHeap, $Heap, this))
         && _module.OwnedObject.localInv2($prevHeap, $Heap, this)
           == (true
             && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this))));
}

function _module.OwnedObject.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localInv2($prevHeap, $h0, this)
       == _module.OwnedObject.localInv2($prevHeap, $h1, this));

function _module.OwnedObject.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.localInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.localInv2 in class _module.OwnedObject
axiom 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.localInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv2($prevHeap, $Heap, this), _module.OwnedObject.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.localInv2($prevHeap, $Heap, this)
         == _module.OwnedObject.localInv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedObject.localInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            b$reqreads#0 := $_ReadsFrame[this, _module.OwnedObject.owner];
            newtype$check#0 := null;
            if ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
            {
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
                assert {:id "id1267"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                b$reqreads#1 := (forall $o: ref, $f: Field :: 
                  $o != null
                       && $Unbox(read($Heap, $o, alloc)): bool
                       && $Unbox(read($Heap, $o, alloc)): bool
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.OwnedObject.localUserInv2#canCall(old($Heap), $Heap, this);
            }
        }

        assume {:id "id1268"} _module.OwnedObject.localInv2(old($Heap), $Heap, this)
           == (true
             && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.localUserInv2(old($Heap), $Heap, this)));
        assume Lit(true)
           ==> 
          $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.OwnedObject.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.localInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1269"} b$reqreads#0;
        assert {:id "id1270"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.localInv2 (override check)"} OverrideCheck$$_module.OwnedObject.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), current$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv2 (override check)"} OverrideCheck$$_module.OwnedObject.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1271"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1272"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedObject.sequenceInv2
function _module.OwnedObject.sequenceInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.sequenceInv2 (revealed)
axiom {:id "id1273"} 3 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (3 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> (
          ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref == null
           ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
           ==> 
          $Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> ($Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> 
              Lit(true)
               ==> _module.OwnedObject.unchangedNonvolatileFields#canCall($prevHeap, $Heap, this))
             && (
              ($Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> true && _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this))
               ==> 
              $Is($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#0 := $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref; 
                _module.OwnedObject.volatileOwns#canCall(oldOwner#0))))
         && _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this)
           == (
            ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref == null
               ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
             && $Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
               <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             && ($Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> true && _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this))
             && ($Is($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#0 := $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref; 
                !_module.OwnedObject.volatileOwns(oldOwner#0)
                     && $Unbox(read($prevHeap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
                   ==> $Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int))));
}

function _module.OwnedObject.sequenceInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.sequenceInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.sequenceInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.sequenceInv2($prevHeap, $h0, this)
       == _module.OwnedObject.sequenceInv2($prevHeap, $h1, this));

function _module.OwnedObject.sequenceInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.sequenceInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.sequenceInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.sequenceInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.sequenceInv2 in class _module.OwnedObject
axiom 3 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.sequenceInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.sequenceInv2($prevHeap, $Heap, this), _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (3 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.sequenceInv2($prevHeap, $Heap, this)
         == _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedObject.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.sequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var oldOwner#Z#0: ref;
  var let#0#0#0: ref;
  var newtype$check#2: ref;
  var newtype$check#3: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id1274"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        newtype$check#0 := null;
        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref == null)
        {
            b$reqreads#0 := $_ReadsFrame[this, _module.OwnedObject.owner];
            newtype$check#1 := null;
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref == null
           ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
        {
            assert {:id "id1275"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.OwnedObject.nonvolatileVersion];
        }

        if (($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref == null
             ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
           && $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int)
        {
            assert {:id "id1276"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#2 := $_ReadsFrame[this, _module.OwnedObject.nonvolatileVersion];
            if ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int)
            {
                if (Lit(true))
                {
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
                    assert {:id "id1277"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                    b$reqreads#3 := (forall $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
                }
            }
        }

        if (($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref == null
             ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
           && $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           && ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> true && _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)))
        {
            assert {:id "id1278"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            if ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject()))
            {
                havoc oldOwner#Z#0;
                assert {:id "id1279"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                newtype$check#2 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref;
                assert {:id "id1280"} $Is(newtype$check#2, Tclass._module.OwnedObject());
                newtype$check#3 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref;
                assume {:id "id1281"} let#0#0#0 == $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(let#0#0#0, Tclass._module.OwnedObject());
                assume {:id "id1282"} oldOwner#Z#0 == let#0#0#0;
                assert {:id "id1283"} oldOwner#Z#0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(oldOwner#Z#0), Tclass._module.OwnedObject?(), $Heap);
                assume _module.OwnedObject.volatileOwns#canCall(oldOwner#Z#0);
                if (!_module.OwnedObject.volatileOwns(oldOwner#Z#0))
                {
                    assert {:id "id1284"} oldOwner#Z#0 != null;
                    assert {:id "id1285"} $IsAlloc(oldOwner#Z#0, Tclass._module.OwnedObject(), old($Heap));
                    assert {:id "id1286"} oldOwner#Z#0 != null;
                    b$reqreads#4 := $_ReadsFrame[oldOwner#Z#0, _module.OwnedObject.nonvolatileVersion];
                }

                if (!_module.OwnedObject.volatileOwns(oldOwner#Z#0)
                   && $Unbox(read(old($Heap), oldOwner#Z#0, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, oldOwner#Z#0, _module.OwnedObject.nonvolatileVersion)): int)
                {
                    assert {:id "id1287"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                    b$reqreads#5 := $_ReadsFrame[this, _module.OwnedObject.nonvolatileVersion];
                }
            }
        }

        assume {:id "id1288"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
           == (
            ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref == null
               ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
             && $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             && ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> true && _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this))
             && ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
                !_module.OwnedObject.volatileOwns(oldOwner#1)
                     && $Unbox(read(old($Heap), oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                   ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
        assume ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref == null
           ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
           ==> 
          $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> 
              Lit(true)
               ==> _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this))
             && (
              ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> true && _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this))
               ==> 
              $Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
                _module.OwnedObject.volatileOwns#canCall(oldOwner#1)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.sequenceInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1289"} b$reqreads#0;
        assert {:id "id1290"} b$reqreads#1;
        assert {:id "id1291"} b$reqreads#2;
        assert {:id "id1292"} b$reqreads#3;
        assert {:id "id1293"} b$reqreads#4;
        assert {:id "id1294"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.sequenceInv2 (override check)"} OverrideCheck$$_module.OwnedObject.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), current$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.sequenceInv2 (override check)"} OverrideCheck$$_module.OwnedObject.sequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1295"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1296"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedObject.inv2
function _module.OwnedObject.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.inv2
axiom 14 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv2($prevHeap, $Heap, this) } 
    _module.OwnedObject.inv2#canCall($prevHeap, $Heap, this)
         || (14 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> 
      _module.OwnedObject.inv2($prevHeap, $Heap, this)
       ==> _module.OwnedObject.localInv2($prevHeap, $Heap, this)
         && _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this));
// definition axiom for _module.OwnedObject.inv2 (revealed)
axiom {:id "id1297"} 14 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv2#canCall($prevHeap, $Heap, this)
         || (14 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, this)
         && (_module.OwnedObject.localInv2($prevHeap, $Heap, this)
           ==> _module.OwnedObject.sequenceInv2#canCall($prevHeap, $Heap, this)
             && (_module.OwnedObject.sequenceInv2($prevHeap, $Heap, this)
               ==> ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref != null
                   ==> _module.OwnedObject.userInv2#canCall($prevHeap, $Heap, this))
                 && (
                  ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref != null
                   ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this))
                   ==> 
                  $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
                     != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
                   ==> _module.Object.localInv#canCall($Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                     && (_module.Object.localInv($Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                       ==> _module.Object.localInv2#canCall($prevHeap, $Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                         && (_module.Object.localInv2($prevHeap, $Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                           ==> 
                          $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
                           ==> _module.Object.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                             && (_module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                               ==> (var currOwner#0 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                                $IsAllocBox($Box(currOwner#0), Tclass._module.Object?(), $prevHeap)
                                   ==> _module.Object.localInv2#canCall($prevHeap, $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))))))))
         && _module.OwnedObject.inv2($prevHeap, $Heap, this)
           == (
            _module.OwnedObject.localInv2($prevHeap, $Heap, this)
             && _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this)
             && ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this))
             && ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
                 != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
               ==> _module.Object.localInv($Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv2($prevHeap, $Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                 && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
                   ==> _module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                     && (var currOwner#0 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                      $IsAllocBox($Box(currOwner#0), Tclass._module.Object?(), $prevHeap)
                         ==> _module.Object.localInv2($prevHeap, $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))))));
}

function _module.OwnedObject.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.inv2($prevHeap, $h0, this)
       == _module.OwnedObject.inv2($prevHeap, $h1, this));

function _module.OwnedObject.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.inv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.inv2 in class _module.OwnedObject
axiom 14 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.inv2($prevHeap, $Heap, this), _module.OwnedObject.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv2#canCall($prevHeap, $Heap, this)
         || (14 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.inv2($prevHeap, $Heap, this)
         == _module.OwnedObject.inv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedObject.inv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 14 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1298"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id1299"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this));
  ensures {:id "id1300"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
         ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null);
  ensures {:id "id1301"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id1302"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id1303"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id1304"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id1305"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#0)
               && $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var currOwner#Z#0: ref;
  var let#0#0#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1306"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assert {:id "id1307"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1308"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1309"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1310"} _module.OwnedObject.localInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1311"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1312"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1313"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
               ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
                 && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        assert {:id "id1314"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this);
        if (_module.OwnedObject.localInv2(old($Heap), $Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1315"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
        }

        if (_module.OwnedObject.localInv2(old($Heap), $Heap, this)
           && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this))
        {
            assert {:id "id1316"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            newtype$check#0 := null;
            if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null)
            {
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
                assert {:id "id1317"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                b$reqreads#2 := (forall $o: ref, $f: Field :: 
                  $o != null
                       && $Unbox(read($Heap, $o, alloc)): bool
                       && $Unbox(read($Heap, $o, alloc)): bool
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.OwnedObject.userInv2#canCall(old($Heap), $Heap, this);
            }
        }

        if (_module.OwnedObject.localInv2(old($Heap), $Heap, this)
           && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
           && ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.userInv2(old($Heap), $Heap, this)))
        {
            assert {:id "id1318"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#3 := $_ReadsFrame[this, _module.OwnedObject.owner];
            if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
            {
                assert {:id "id1319"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                assert {:id "id1320"} $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox(read(old($Heap), this, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  $Heap);
                b$reqreads#4 := (forall $o: ref, $f: Field :: 
                  $o != null
                       && $Unbox(read($Heap, $o, alloc)): bool
                       && $Unbox(read($Heap, $o, alloc)): bool
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.Object.localInv#canCall($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref);
                if (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref))
                {
                    assert {:id "id1321"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                    assert {:id "id1322"} $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox(read(old($Heap), this, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      $Heap);
                    assert {:id "id1323"} $IsAlloc($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Object?(), 
                      old($Heap));
                    b$reqreads#5 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.localInv2#canCall(old($Heap), 
                      $Heap, 
                      $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref);
                }

                if (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                   && _module.Object.localInv2(old($Heap), 
                    $Heap, 
                    $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref))
                {
                    b$reqreads#6 := $_ReadsFrame[this, _module.OwnedObject.owner];
                    newtype$check#1 := null;
                    if ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
                    {
                        b$reqreads#7 := $_ReadsFrame[this, _module.OwnedObject.owner];
                        assert {:id "id1324"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox(read($Heap, this, _module.OwnedObject.owner), Tclass._module.Object?(), $Heap);
                        b$reqreads#8 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && $Unbox(read($Heap, $o, alloc)): bool
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
                        if (_module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))
                        {
                            havoc currOwner#Z#0;
                            b$reqreads#9 := $_ReadsFrame[this, _module.OwnedObject.owner];
                            assume {:id "id1325"} let#0#0#0 == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref;
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0#0#0, Tclass._module.Object?());
                            assume {:id "id1326"} currOwner#Z#0 == let#0#0#0;
                            if ($IsAllocBox($Box(currOwner#Z#0), Tclass._module.Object?(), old($Heap)))
                            {
                                b$reqreads#10 := $_ReadsFrame[this, _module.OwnedObject.owner];
                                assert {:id "id1327"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
                                // assume allocatedness for receiver argument to function
                                assume $IsAllocBox(read($Heap, this, _module.OwnedObject.owner), Tclass._module.Object?(), $Heap);
                                assert {:id "id1328"} $IsAlloc($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref, 
                                  Tclass._module.Object?(), 
                                  old($Heap));
                                b$reqreads#11 := (forall $o: ref, $f: Field :: 
                                  $o != null
                                       && $Unbox(read($Heap, $o, alloc)): bool
                                       && $Unbox(read($Heap, $o, alloc)): bool
                                     ==> $_ReadsFrame[$o, $f]);
                                assume _module.Object.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
                            }
                        }
                    }
                }
            }
        }

        assume {:id "id1329"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
           == (
            _module.OwnedObject.localInv2(old($Heap), $Heap, this)
             && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
             && ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.userInv2(old($Heap), $Heap, this))
             && ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
                 != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
               ==> _module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv2(old($Heap), 
                  $Heap, 
                  $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                 && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
                   ==> _module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                     && (var currOwner#1 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                      $IsAllocBox($Box(currOwner#1), Tclass._module.Object?(), old($Heap))
                         ==> _module.Object.localInv2(old($Heap), $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)))));
        assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
           && (_module.OwnedObject.localInv2(old($Heap), $Heap, this)
             ==> _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
               && (_module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
                 ==> ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null
                     ==> _module.OwnedObject.userInv2#canCall(old($Heap), $Heap, this))
                   && (
                    ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null
                     ==> _module.OwnedObject.userInv2(old($Heap), $Heap, this))
                     ==> 
                    $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
                       != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
                     ==> _module.Object.localInv#canCall($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                       && (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                         ==> _module.Object.localInv2#canCall(old($Heap), 
                            $Heap, 
                            $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                           && (_module.Object.localInv2(old($Heap), 
                              $Heap, 
                              $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                             ==> 
                            $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
                             ==> _module.Object.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                               && (_module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                                 ==> (var currOwner#1 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                                  $IsAllocBox($Box(currOwner#1), Tclass._module.Object?(), old($Heap))
                                     ==> _module.Object.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))))))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.inv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1330"} b$reqreads#0;
        assert {:id "id1331"} b$reqreads#1;
        assert {:id "id1332"} b$reqreads#2;
        assert {:id "id1333"} b$reqreads#3;
        assert {:id "id1334"} b$reqreads#4;
        assert {:id "id1335"} b$reqreads#5;
        assert {:id "id1336"} b$reqreads#6;
        assert {:id "id1337"} b$reqreads#7;
        assert {:id "id1338"} b$reqreads#8;
        assert {:id "id1339"} b$reqreads#9;
        assert {:id "id1340"} b$reqreads#10;
        assert {:id "id1341"} b$reqreads#11;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.inv2 (override check)"} OverrideCheck$$_module.OwnedObject.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), current$Heap));
  free requires 14 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv2 (override check)"} OverrideCheck$$_module.OwnedObject.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1342"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1343"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1344"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
         && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id1345"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id1346"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
         || ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.OwnedObject.localUserInv2(old($Heap), $Heap, this));
    assert {:id "id1347"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref == null
           ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null);
    assert {:id "id1348"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
           <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    assert {:id "id1349"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> Lit(true));
    assert {:id "id1350"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> 
          _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
           ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
             || $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
    assert {:id "id1351"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> 
          _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
           ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
             || _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, this));
    assert {:id "id1352"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
            Tclass._module.OwnedObject())
           ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
            !_module.OwnedObject.volatileOwns(oldOwner#1)
                 && $Unbox(read(old($Heap), oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
               ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
}



procedure {:verboseName "OwnedObject.CheckSequenceInv2 (well-formedness)"} CheckWellFormed$$_module.OwnedObject.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 18 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.CheckSequenceInv2 (well-formedness)"} CheckWellFormed$$_module.OwnedObject.CheckSequenceInv2(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: CheckSequenceInv2, CheckWellFormed$$_module.OwnedObject.CheckSequenceInv2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1353"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1354"} _module.Object.universe(this) != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1355"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1356"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "OwnedObject.CheckSequenceInv2 (call)"} Call$$_module.OwnedObject.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  // user-defined preconditions
  requires {:id "id1357"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1358"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  requires {:id "id1359"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));
  requires {:id "id1360"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#1: ref :: 
            { _module.Object.inv($Heap, o#1) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#1)) } 
            $Is(o#1, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1))
               ==> _module.Object.inv($Heap, o#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
  free ensures {:id "id1361"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     && 
    _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
     && 
    ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref == null
       ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
     && $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
       <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
     && ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
         == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       ==> true && _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this))
     && ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
        Tclass._module.OwnedObject())
       ==> (var oldOwner#0 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
        !_module.OwnedObject.volatileOwns(oldOwner#0)
             && $Unbox(read(old($Heap), oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
           ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == _module.Object.universe(this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "OwnedObject.CheckSequenceInv2 (correctness)"} Impl$$_module.OwnedObject.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 18 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1362"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
  ensures {:id "id1363"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref == null
         ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null);
  ensures {:id "id1364"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id1365"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id1366"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
           || $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id1367"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, this));
  ensures {:id "id1368"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#1)
               && $Unbox(read(old($Heap), oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == _module.Object.universe(this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.CheckSequenceInv2 (correctness)"} Impl$$_module.OwnedObject.CheckSequenceInv2(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var universe##0: ref;
  var o#4: ref;
  var u1#0: bool;
  var $Heap_at_0: Heap;
  var universe##1: ref;
  var o#6: ref;
  var u2#0: bool;

    // AddMethodImpl: CheckSequenceInv2, Impl$$_module.OwnedObject.CheckSequenceInv2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(505,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := _module.Object.universe(this);
    assert {:id "id1369"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##0
             || Set#IsMember($Unbox(read($Heap, universe##0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1370"} Call$$_module.__default.Havoc(universe##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(506,5)
    assert {:id "id1371"} {:subsumption 0} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1372"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this));
    if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this)))
    {
        // Begin Comprehension WF check
        havoc o#4;
        if ($Is(o#4, Tclass._module.Object())
           && $IsAlloc(o#4, Tclass._module.Object(), $Heap))
        {
            assert {:id "id1373"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assert {:id "id1374"} {:subsumption 0} _module.Object.universe(this) != null;
            assert {:id "id1375"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#4)))
            {
                assert {:id "id1376"} {:subsumption 0} o#4 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#4), Tclass._module.Object?(), $Heap);
                assert {:id "id1377"} $IsAlloc(o#4, Tclass._module.Object(), old($Heap));
                assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#4);
            }
        }

        // End Comprehension WF check
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
       && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
         ==> (forall o#5: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5)) } 
          $Is(o#5, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5))
             ==> _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#5)));
    assume {:id "id1378"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
       && (forall o#5: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#5)) } 
        $Is(o#5, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5))
           ==> _module.Object.sequenceInv2(old($Heap), $Heap, o#5));
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(507,12)
    assume true;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1379"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
    assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
    u1#0 := _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this);
    $Heap_at_0 := $Heap;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(509,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##1 := _module.Object.universe(this);
    assert {:id "id1381"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##1
             || Set#IsMember($Unbox(read($Heap, universe##1, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1382"} Call$$_module.__default.Havoc(universe##1);
    // TrCallStmt: After ProcessCallStmt

  after_0:
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(510,5)
    assert {:id "id1383"} {:subsumption 0} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1384"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), $Heap_at_0);
    assume _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_0, $Heap, _module.Object.universe(this));
    if (_module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this)))
    {
        // Begin Comprehension WF check
        havoc o#6;
        if ($Is(o#6, Tclass._module.Object())
           && $IsAlloc(o#6, Tclass._module.Object(), $Heap))
        {
            assert {:id "id1385"} $IsAlloc(this, Tclass._module.OwnedObject(), $Heap_at_0);
            assert {:id "id1386"} {:subsumption 0} _module.Object.universe(this) != null;
            assert {:id "id1387"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), $Heap_at_0);
            if (Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#6)))
            {
                assert {:id "id1388"} {:subsumption 0} o#6 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#6), Tclass._module.Object?(), $Heap);
                assert {:id "id1389"} $IsAlloc(o#6, Tclass._module.Object(), $Heap_at_0);
                assume _module.Object.sequenceInv2#canCall($Heap_at_0, $Heap, o#6);
            }
        }

        // End Comprehension WF check
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_0, $Heap, _module.Object.universe(this))
       && (_module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this))
         ==> (forall o#7: ref :: 
          { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7) } 
            { Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7)) } 
          $Is(o#7, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7))
             ==> _module.Object.sequenceInv2#canCall($Heap_at_0, $Heap, o#7)));
    assume {:id "id1390"} _module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this))
       && (forall o#7: ref :: 
        { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7) } 
          { Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#7)) } 
        $Is(o#7, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7))
           ==> _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7));
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(511,12)
    assume true;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1391"} $IsAlloc(this, Tclass._module.OwnedObject(), $Heap_at_0);
    assume _module.OwnedObject.unchangedNonvolatileFields#canCall($Heap_at_0, $Heap, this);
    assume _module.OwnedObject.unchangedNonvolatileFields#canCall($Heap_at_0, $Heap, this);
    u2#0 := _module.OwnedObject.unchangedNonvolatileFields($Heap_at_0, $Heap, this);
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(513,5)
    if (u1#0)
    {
    }

    if (u1#0 && u2#0)
    {
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        assert {:id "id1393"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
    }

    assume u1#0
       ==> 
      u2#0
       ==> _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
    assume {:id "id1394"} u1#0 && u2#0
       ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this);
}



// function declaration for _module.OwnedObject.volatileOwns
function _module.OwnedObject.volatileOwns(this: ref) : bool;

function _module.OwnedObject.volatileOwns#canCall(this: ref) : bool;

function _module.OwnedObject.volatileOwns#requires(ref) : bool;

// #requires axiom for _module.OwnedObject.volatileOwns
axiom (forall this: ref :: 
  { _module.OwnedObject.volatileOwns#requires(this) } 
  this != null && $Is(this, Tclass._module.OwnedObject())
     ==> _module.OwnedObject.volatileOwns#requires(this) == true);

procedure {:verboseName "OwnedObject.volatileOwns (well-formedness)"} CheckWellformed$$_module.OwnedObject.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.OwnedObject.objectUserFields
function _module.OwnedObject.objectUserFields($heap: Heap, this: ref) : Set
uses {
// consequence axiom for _module.OwnedObject.objectUserFields
axiom 3 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.objectUserFields($Heap, this) } 
    _module.OwnedObject.objectUserFields#canCall($Heap, this)
         || (3 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> $Is(_module.OwnedObject.objectUserFields($Heap, this), TSet(Tclass._module.Object())));
// alloc consequence axiom for _module.OwnedObject.objectUserFields
axiom 3 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { $IsAlloc(_module.OwnedObject.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap) } 
    _module.OwnedObject.objectUserFields#canCall($Heap, this)
         || (3 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && this != null
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> $IsAlloc(_module.OwnedObject.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap));
}

function _module.OwnedObject.objectUserFields#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.objectUserFields
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.objectUserFields($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.objectUserFields($h0, this)
       == _module.OwnedObject.objectUserFields($h1, this));

function _module.OwnedObject.objectUserFields#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.objectUserFields
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.objectUserFields#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.objectUserFields#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.objectUserFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.objectUserFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.OwnedObject.unchangedNonvolatileUserFields
function _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.OwnedObject.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.OwnedObject.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "OwnedObject.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.OwnedObject.localUserInv
function _module.OwnedObject.localUserInv($heap: Heap, this: ref) : bool;

function _module.OwnedObject.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localUserInv($h0, this)
       == _module.OwnedObject.localUserInv($h1, this));

function _module.OwnedObject.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.localUserInv#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.localUserInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.OwnedObject.localUserInv2
function _module.OwnedObject.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.OwnedObject.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localUserInv2($prevHeap, $h0, this)
       == _module.OwnedObject.localUserInv2($prevHeap, $h1, this));

function _module.OwnedObject.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.localUserInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "OwnedObject.localUserInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.OwnedObject.userInv
function _module.OwnedObject.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.userInv
axiom 13 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this) } 
    _module.OwnedObject.userInv#canCall($Heap, this)
         || (13 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> 
      _module.OwnedObject.userInv($Heap, this)
       ==> _module.OwnedObject.localUserInv($Heap, this));
}

function _module.OwnedObject.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.userInv($h0, this) == _module.OwnedObject.userInv($h1, this));

function _module.OwnedObject.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.userInv#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.userInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 13 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1395"} _module.OwnedObject.userInv($Heap, this)
     ==> _module.OwnedObject.localUserInv($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.userInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1396"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.userInv#canCall($Heap, this);
            assume {:id "id1397"} _module.OwnedObject.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assume _module.OwnedObject.localUserInv#canCall($Heap, this);
            assume {:id "id1398"} _module.OwnedObject.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id1399"} _module.OwnedObject.userInv($Heap, this)
               ==> _module.OwnedObject.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module.OwnedObject.userInv2
function _module.OwnedObject.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.userInv2
axiom 13 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this) } 
    _module.OwnedObject.userInv2#canCall($prevHeap, $Heap, this)
         || (13 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> 
      _module.OwnedObject.userInv2($prevHeap, $Heap, this)
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this));
}

function _module.OwnedObject.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.userInv2($prevHeap, $h0, this)
       == _module.OwnedObject.userInv2($prevHeap, $h1, this));

function _module.OwnedObject.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.userInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "OwnedObject.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 13 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1400"} _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1401"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assert {:id "id1402"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1403"} _module.OwnedObject.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1404"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assume _module.OwnedObject.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1405"} _module.OwnedObject.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1406"} _module.OwnedObject.userInv2(old($Heap), $Heap, this)
               ==> _module.OwnedObject.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// $Is axiom for non-null type _module.OwnedObject
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.OwnedObject()) } 
    { $Is(c#0, Tclass._module.OwnedObject?()) } 
  $Is(c#0, Tclass._module.OwnedObject())
     <==> $Is(c#0, Tclass._module.OwnedObject?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.OwnedObject
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.OwnedObject(), $h) } 
    { $IsAlloc(c#0, Tclass._module.OwnedObject?(), $h) } 
  $IsAlloc(c#0, Tclass._module.OwnedObject(), $h)
     <==> $IsAlloc(c#0, Tclass._module.OwnedObject?(), $h));

const unique class._module.Lifetime?: ClassName;

// $Is axiom for class Lifetime
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Lifetime?()) } 
  $Is($o, Tclass._module.Lifetime?())
     <==> $o == null || dtype($o) == Tclass._module.Lifetime?());

// $IsAlloc axiom for class Lifetime
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Lifetime?(), $h) } 
  $IsAlloc($o, Tclass._module.Lifetime?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.Lifetime.owner: Field
uses {
axiom FDim(_module.Lifetime.owner) == 0
   && FieldOfDecl(class._module.Lifetime?, field$owner) == _module.Lifetime.owner
   && $IsGhostField(_module.Lifetime.owner);
}

// Lifetime.owner: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Lifetime.owner)): ref } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Lifetime?()
     ==> $Is($Unbox(read($h, $o, _module.Lifetime.owner)): ref, Tclass._module.Thread?()));

// Lifetime.owner: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Lifetime.owner)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Lifetime?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Lifetime.owner)): ref, Tclass._module.Thread?(), $h));

const _module.Lifetime.elements: Field
uses {
axiom FDim(_module.Lifetime.elements) == 0
   && FieldOfDecl(class._module.Lifetime?, field$elements)
     == _module.Lifetime.elements
   && $IsGhostField(_module.Lifetime.elements);
}

// Lifetime.elements: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Lifetime.elements)): Set } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Lifetime?()
     ==> $Is($Unbox(read($h, $o, _module.Lifetime.elements)): Set, 
      TSet(Tclass._module.OwnedObject())));

// Lifetime.elements: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Lifetime.elements)): Set } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Lifetime?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Lifetime.elements)): Set, 
      TSet(Tclass._module.OwnedObject()), 
      $h));

const _module.Lifetime.mightPointTo: Field
uses {
axiom FDim(_module.Lifetime.mightPointTo) == 0
   && FieldOfDecl(class._module.Lifetime?, field$mightPointTo)
     == _module.Lifetime.mightPointTo
   && $IsGhostField(_module.Lifetime.mightPointTo);
}

// Lifetime.mightPointTo: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Lifetime.mightPointTo)): Set } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Lifetime?()
     ==> $Is($Unbox(read($h, $o, _module.Lifetime.mightPointTo)): Set, 
      TSet(Tclass._module.Lifetime())));

// Lifetime.mightPointTo: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Lifetime.mightPointTo)): Set } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Lifetime?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Lifetime.mightPointTo)): Set, 
      TSet(Tclass._module.Lifetime()), 
      $h));

const _module.Lifetime.mightPointFrom: Field
uses {
axiom FDim(_module.Lifetime.mightPointFrom) == 0
   && FieldOfDecl(class._module.Lifetime?, field$mightPointFrom)
     == _module.Lifetime.mightPointFrom
   && $IsGhostField(_module.Lifetime.mightPointFrom);
}

// Lifetime.mightPointFrom: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Lifetime.mightPointFrom)): Set } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Lifetime?()
     ==> $Is($Unbox(read($h, $o, _module.Lifetime.mightPointFrom)): Set, 
      TSet(Tclass._module.Lifetime())));

// Lifetime.mightPointFrom: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Lifetime.mightPointFrom)): Set } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Lifetime?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Lifetime.mightPointFrom)): Set, 
      TSet(Tclass._module.Lifetime()), 
      $h));

// function declaration for _module.Lifetime.unused
function _module.Lifetime.unused($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Lifetime.unused (revealed)
axiom {:id "id1407"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Lifetime.unused($Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.unused#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $Heap))
       ==> _module.Lifetime.unused($Heap, this)
         == (Set#Equal($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, 
            Set#Empty(): Set)
           && Set#Equal($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, Set#Empty(): Set)));
}

function _module.Lifetime.unused#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.unused
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.unused($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Lifetime())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null
           && (($o == this && $f == _module.Lifetime.mightPointFrom)
             || ($o == this && $f == _module.Lifetime.elements))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.unused($h0, this) == _module.Lifetime.unused($h1, this));

function _module.Lifetime.unused#requires(Heap, ref) : bool;

// #requires axiom for _module.Lifetime.unused
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Lifetime.unused#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $Heap)
     ==> _module.Lifetime.unused#requires($Heap, this) == true);

procedure {:verboseName "Lifetime.unused (well-formedness)"} CheckWellformed$$_module.Lifetime.unused(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.unused (well-formedness)"} CheckWellformed$$_module.Lifetime.unused(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> ($o == this && $f == _module.Lifetime.mightPointFrom)
           || ($o == this && $f == _module.Lifetime.elements));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    assert {:id "id1408"} this != null;
    assert {:id "id1409"} this != null;
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.Lifetime.mightPointFrom];
        if (Set#Equal($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, 
          Set#Empty(): Set))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.Lifetime.elements];
        }

        assume {:id "id1410"} _module.Lifetime.unused($Heap, this)
           == (Set#Equal($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, 
              Set#Empty(): Set)
             && Set#Equal($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, Set#Empty(): Set));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Lifetime.unused($Heap, this), TBool);
        assert {:id "id1411"} b$reqreads#0;
        assert {:id "id1412"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Lifetime.alive
function _module.Lifetime.alive($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Lifetime.alive (revealed)
axiom {:id "id1413"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Lifetime.alive($Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.alive#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $Heap))
       ==> _module.Lifetime.alive($Heap, this)
         == ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null));
}

function _module.Lifetime.alive#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.alive
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.alive($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Lifetime())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this && $f == _module.Lifetime.owner
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.alive($h0, this) == _module.Lifetime.alive($h1, this));

function _module.Lifetime.alive#requires(Heap, ref) : bool;

// #requires axiom for _module.Lifetime.alive
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Lifetime.alive#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $Heap)
     ==> _module.Lifetime.alive#requires($Heap, this) == true);

procedure {:verboseName "Lifetime.alive (well-formedness)"} CheckWellformed$$_module.Lifetime.alive(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.alive (well-formedness)"} CheckWellformed$$_module.Lifetime.alive(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this && $f == _module.Lifetime.owner);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    assert {:id "id1414"} this != null;
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.Lifetime.owner];
        newtype$check#0 := null;
        assume {:id "id1415"} _module.Lifetime.alive($Heap, this)
           == ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Lifetime.alive($Heap, this), TBool);
        assert {:id "id1416"} b$reqreads#0;
        return;

        assume false;
    }
}



// function declaration for _module.Lifetime.deallocable
function _module.Lifetime.deallocable($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Lifetime.deallocable (revealed)
axiom {:id "id1417"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Lifetime.deallocable($Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.deallocable#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $Heap))
       ==> (forall o#0: ref :: 
          { _module.OwnedObject.alive($Heap, o#0) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0)) } 
          $Is(o#0, Tclass._module.OwnedObject())
             ==> 
            Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0))
             ==> _module.OwnedObject.alive#canCall($Heap, o#0))
         && ((forall o#0: ref :: 
            { _module.OwnedObject.alive($Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0))
               ==> !_module.OwnedObject.alive($Heap, o#0))
           ==> (forall l#0: ref :: 
            { _module.Lifetime.alive($Heap, l#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#0)) } 
            $Is(l#0, Tclass._module.Lifetime())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#0))
               ==> _module.Lifetime.alive#canCall($Heap, l#0)))
         && _module.Lifetime.deallocable($Heap, this)
           == ((forall o#0: ref :: 
              { _module.OwnedObject.alive($Heap, o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0))
                 ==> !_module.OwnedObject.alive($Heap, o#0))
             && (forall l#0: ref :: 
              { _module.Lifetime.alive($Heap, l#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#0)) } 
              $Is(l#0, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#0))
                 ==> !_module.Lifetime.alive($Heap, l#0))));
}

function _module.Lifetime.deallocable#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.deallocable
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.deallocable($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Lifetime())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null
           && (
            $o == this
             || (Set#IsMember($Unbox(read($h0, this, _module.Lifetime.mightPointFrom)): Set, $Box($o))
               && $f == _module.Lifetime.owner)
             || (Set#IsMember($Unbox(read($h0, this, _module.Lifetime.elements)): Set, $Box($o))
               && $f == _module.OwnedObject.owner))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.deallocable($h0, this)
       == _module.Lifetime.deallocable($h1, this));

function _module.Lifetime.deallocable#requires(Heap, ref) : bool;

// #requires axiom for _module.Lifetime.deallocable
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Lifetime.deallocable#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $Heap)
     ==> _module.Lifetime.deallocable#requires($Heap, this) == true);

procedure {:verboseName "Lifetime.deallocable (well-formedness)"} CheckWellformed$$_module.Lifetime.deallocable(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.deallocable (well-formedness)"} CheckWellformed$$_module.Lifetime.deallocable(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var o#1: ref;
  var l#1: ref;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box($o))
             && $f == _module.Lifetime.owner)
           || (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box($o))
             && $f == _module.OwnedObject.owner));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    b$reqreads#0 := $_ReadsFrame[this, _module.Lifetime.mightPointFrom];
    b$reqreads#1 := $_ReadsFrame[this, _module.Lifetime.elements];
    assert {:id "id1418"} b$reqreads#0;
    assert {:id "id1419"} b$reqreads#1;
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc o#1;
        if ($Is(o#1, Tclass._module.OwnedObject())
           && $IsAlloc(o#1, Tclass._module.OwnedObject(), $Heap))
        {
            b$reqreads#2 := $_ReadsFrame[this, _module.Lifetime.elements];
            if (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#1)))
            {
                assert {:id "id1420"} o#1 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#1), Tclass._module.OwnedObject?(), $Heap);
                b$reqreads#3 := (forall $o: ref, $f: Field :: 
                  $o != null
                       && $Unbox(read($Heap, $o, alloc)): bool
                       && 
                      $o == o#1
                       && $f == _module.OwnedObject.owner
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.OwnedObject.alive#canCall($Heap, o#1);
            }
        }

        // End Comprehension WF check
        if ((forall o#2: ref :: 
          { _module.OwnedObject.alive($Heap, o#2) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2)) } 
          $Is(o#2, Tclass._module.OwnedObject())
               && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2))
             ==> !_module.OwnedObject.alive($Heap, o#2)))
        {
            // Begin Comprehension WF check
            havoc l#1;
            if ($Is(l#1, Tclass._module.Lifetime())
               && $IsAlloc(l#1, Tclass._module.Lifetime(), $Heap))
            {
                b$reqreads#4 := $_ReadsFrame[this, _module.Lifetime.mightPointFrom];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#1)))
                {
                    assert {:id "id1421"} l#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(l#1), Tclass._module.Lifetime?(), $Heap);
                    b$reqreads#5 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && 
                          $o == l#1
                           && $f == _module.Lifetime.owner
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Lifetime.alive#canCall($Heap, l#1);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id1422"} _module.Lifetime.deallocable($Heap, this)
           == ((forall o#2: ref :: 
              { _module.OwnedObject.alive($Heap, o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2))
                 ==> !_module.OwnedObject.alive($Heap, o#2))
             && (forall l#2: ref :: 
              { _module.Lifetime.alive($Heap, l#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#2)) } 
              $Is(l#2, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#2))
                 ==> !_module.Lifetime.alive($Heap, l#2)));
        assume (forall o#2: ref :: 
            { _module.OwnedObject.alive($Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.OwnedObject())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2))
               ==> _module.OwnedObject.alive#canCall($Heap, o#2))
           && ((forall o#2: ref :: 
              { _module.OwnedObject.alive($Heap, o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2))
                 ==> !_module.OwnedObject.alive($Heap, o#2))
             ==> (forall l#2: ref :: 
              { _module.Lifetime.alive($Heap, l#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#2)) } 
              $Is(l#2, Tclass._module.Lifetime())
                 ==> 
                Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#2))
                 ==> _module.Lifetime.alive#canCall($Heap, l#2)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Lifetime.deallocable($Heap, this), TBool);
        assert {:id "id1423"} b$reqreads#2;
        assert {:id "id1424"} b$reqreads#3;
        assert {:id "id1425"} b$reqreads#4;
        assert {:id "id1426"} b$reqreads#5;
        return;

        assume false;
    }
}



// function declaration for _module.Lifetime.objectClassKind
function _module.Lifetime.objectClassKind(this: ref) : DatatypeType
uses {
// consequence axiom for _module.Lifetime.objectClassKind
axiom 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Lifetime.objectClassKind(this) } 
    _module.Lifetime.objectClassKind#canCall(this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> $Is(_module.Lifetime.objectClassKind(this), Tclass._module.ObjectClassKind()));
// definition axiom for _module.Lifetime.objectClassKind (revealed)
axiom {:id "id1427"} 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Lifetime.objectClassKind(this) } 
    _module.Lifetime.objectClassKind#canCall(this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> _module.Lifetime.objectClassKind(this)
         == Lit(#_module.ObjectClassKind.Lifetime()));
// definition axiom for _module.Lifetime.objectClassKind for all literals (revealed)
axiom {:id "id1428"} 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.Lifetime.objectClassKind(Lit(this)) } 
    _module.Lifetime.objectClassKind#canCall(Lit(this))
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> _module.Lifetime.objectClassKind(Lit(this))
         == Lit(#_module.ObjectClassKind.Lifetime()));
}

function _module.Lifetime.objectClassKind#canCall(this: ref) : bool;

function _module.Lifetime.objectClassKind#requires(ref) : bool;

// #requires axiom for _module.Lifetime.objectClassKind
axiom (forall this: ref :: 
  { _module.Lifetime.objectClassKind#requires(this) } 
  this != null && $Is(this, Tclass._module.Lifetime())
     ==> _module.Lifetime.objectClassKind#requires(this) == true);

// override axiom for _module.Object.objectClassKind in class _module.Lifetime
axiom 1 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Object.objectClassKind(this), $Is(this, Tclass._module.Lifetime()) } 
      { _module.Object.objectClassKind(this), _module.Lifetime.objectClassKind(this) } 
    _module.Lifetime.objectClassKind#canCall(this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> _module.Object.objectClassKind(this) == _module.Lifetime.objectClassKind(this));

procedure {:verboseName "Lifetime.objectClassKind (well-formedness)"} CheckWellformed$$_module.Lifetime.objectClassKind(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Lifetime.objectClassKind (override check)"} OverrideCheck$$_module.Lifetime.objectClassKind(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.objectClassKind (override check)"} OverrideCheck$$_module.Lifetime.objectClassKind(this: ref)
{
  var Lifetime_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1430"} true;
    Lifetime_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1431"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.Lifetime.baseFieldsInv
function _module.Lifetime.baseFieldsInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Lifetime.baseFieldsInv (revealed)
axiom {:id "id1432"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Lifetime.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.baseFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $Heap))
       ==> _module.Lifetime.baseFieldsInv($Heap, this)
         == (
          ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
             ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.Lifetime.owner)))
           && Set#Subset($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           && Set#Subset($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           && Set#Subset($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
}

function _module.Lifetime.baseFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.baseFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.baseFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Lifetime())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.baseFieldsInv($h0, this)
       == _module.Lifetime.baseFieldsInv($h1, this));

function _module.Lifetime.baseFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Lifetime.baseFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Lifetime.baseFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $Heap)
     ==> _module.Lifetime.baseFieldsInv#requires($Heap, this) == true);

// override axiom for _module.Object.baseFieldsInv in class _module.Lifetime
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.baseFieldsInv($Heap, this), $Is(this, Tclass._module.Lifetime()), $IsGoodHeap($Heap) } 
      { _module.Object.baseFieldsInv($Heap, this), _module.Lifetime.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.baseFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> _module.Object.baseFieldsInv($Heap, this)
         == _module.Lifetime.baseFieldsInv($Heap, this));

procedure {:verboseName "Lifetime.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.Lifetime.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.Lifetime.baseFieldsInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.Lifetime.owner];
        newtype$check#0 := null;
        if ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null)
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.Lifetime.owner];
            assert {:id "id1433"} _module.Object.universe(this) != null;
            b$reqreads#2 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        }

        if ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.Lifetime.owner)))
        {
            b$reqreads#3 := $_ReadsFrame[this, _module.Lifetime.elements];
            assert {:id "id1434"} _module.Object.universe(this) != null;
            b$reqreads#4 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        }

        if (($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
             ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.Lifetime.owner)))
           && Set#Subset($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))
        {
            b$reqreads#5 := $_ReadsFrame[this, _module.Lifetime.mightPointTo];
            assert {:id "id1435"} _module.Object.universe(this) != null;
            b$reqreads#6 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        }

        if (($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
             ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.Lifetime.owner)))
           && Set#Subset($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           && Set#Subset($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))
        {
            b$reqreads#7 := $_ReadsFrame[this, _module.Lifetime.mightPointFrom];
            assert {:id "id1436"} _module.Object.universe(this) != null;
            b$reqreads#8 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        }

        assume {:id "id1437"} _module.Lifetime.baseFieldsInv($Heap, this)
           == (
            ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
               ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                read($Heap, this, _module.Lifetime.owner)))
             && Set#Subset($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
             && Set#Subset($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
             && Set#Subset($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Lifetime.baseFieldsInv($Heap, this), TBool);
        assert {:id "id1438"} b$reqreads#0;
        assert {:id "id1439"} b$reqreads#1;
        assert {:id "id1440"} b$reqreads#2;
        assert {:id "id1441"} b$reqreads#3;
        assert {:id "id1442"} b$reqreads#4;
        assert {:id "id1443"} b$reqreads#5;
        assert {:id "id1444"} b$reqreads#6;
        assert {:id "id1445"} b$reqreads#7;
        assert {:id "id1446"} b$reqreads#8;
        return;

        assume false;
    }
}



procedure {:verboseName "Lifetime.baseFieldsInv (override check)"} OverrideCheck$$_module.Lifetime.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.baseFieldsInv (override check)"} OverrideCheck$$_module.Lifetime.baseFieldsInv(this: ref)
{
  var Lifetime_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1447"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))), 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))));
    Lifetime_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    assert {:id "id1448"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this || $o == _module.Object.universe(this))
         ==> $o == this || $o == _module.Object.universe(this));
}



procedure {:verboseName "Lifetime.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Lifetime.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Lifetime.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseFieldsInvMonotonicity, CheckWellFormed$$_module.Lifetime.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1449"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
    assume _module.Lifetime.baseFieldsInv#canCall(old($Heap), this);
    assume {:id "id1450"} _module.Lifetime.baseFieldsInv(old($Heap), this);
    assert {:id "id1451"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
    assert {:id "id1452"} _module.Object.universe(this) != null;
    assert {:id "id1453"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1454"} _module.Object.universe(this) != null;
    assume {:id "id1455"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1456"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
    assume {:id "id1457"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
    assume _module.Lifetime.baseFieldsInv#canCall($Heap, this);
    assume {:id "id1458"} _module.Lifetime.baseFieldsInv($Heap, this);
}



procedure {:verboseName "Lifetime.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.Lifetime.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.Lifetime.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id1459"} _module.Lifetime.baseFieldsInv(old($Heap), this)
       && Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
       && (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1460"} _module.Lifetime.baseFieldsInv#canCall(old($Heap), this)
       ==> _module.Lifetime.baseFieldsInv(old($Heap), this)
         || ($Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref != null
           ==> Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            read(old($Heap), this, _module.Lifetime.owner)));
    assert {:id "id1461"} _module.Lifetime.baseFieldsInv#canCall(old($Heap), this)
       ==> _module.Lifetime.baseFieldsInv(old($Heap), this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
          $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1462"} _module.Lifetime.baseFieldsInv#canCall(old($Heap), this)
       ==> _module.Lifetime.baseFieldsInv(old($Heap), this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1463"} _module.Lifetime.baseFieldsInv#canCall(old($Heap), this)
       ==> _module.Lifetime.baseFieldsInv(old($Heap), this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1464"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1465"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1466"} true;
    assert {:id "id1467"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1468"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1469"} _module.Lifetime.baseFieldsInv($Heap, this);
    assert {:id "id1470"} _module.Lifetime.baseFieldsInv#canCall($Heap, this)
       ==> _module.Lifetime.baseFieldsInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
           ==> Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.Lifetime.owner)));
    assert {:id "id1471"} _module.Lifetime.baseFieldsInv#canCall($Heap, this)
       ==> _module.Lifetime.baseFieldsInv($Heap, this)
         || Set#Subset($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, 
          $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1472"} _module.Lifetime.baseFieldsInv#canCall($Heap, this)
       ==> _module.Lifetime.baseFieldsInv($Heap, this)
         || Set#Subset($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1473"} _module.Lifetime.baseFieldsInv#canCall($Heap, this)
       ==> _module.Lifetime.baseFieldsInv($Heap, this)
         || Set#Subset($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
}



procedure {:verboseName "Lifetime.baseFieldsInvMonotonicity (call)"} Call$$_module.Lifetime.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap));
  // user-defined preconditions
  requires {:id "id1474"} _module.Lifetime.baseFieldsInv#canCall(previous$Heap, this)
     ==> _module.Lifetime.baseFieldsInv(previous$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.Lifetime.owner)): ref != null
         ==> Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read(previous$Heap, this, _module.Lifetime.owner)));
  requires {:id "id1475"} _module.Lifetime.baseFieldsInv#canCall(previous$Heap, this)
     ==> _module.Lifetime.baseFieldsInv(previous$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.elements)): Set, 
        $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1476"} _module.Lifetime.baseFieldsInv#canCall(previous$Heap, this)
     ==> _module.Lifetime.baseFieldsInv(previous$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointTo)): Set, 
        $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1477"} _module.Lifetime.baseFieldsInv#canCall(previous$Heap, this)
     ==> _module.Lifetime.baseFieldsInv(previous$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
        $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1478"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1479"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.baseFieldsInv#canCall(current$Heap, this);
  free ensures {:id "id1480"} _module.Lifetime.baseFieldsInv#canCall(current$Heap, this)
     && 
    _module.Lifetime.baseFieldsInv(current$Heap, this)
     && 
    ($Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref != null
       ==> Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(current$Heap, this, _module.Lifetime.owner)))
     && Set#Subset($Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set, 
      $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)
     && Set#Subset($Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set, 
      $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)
     && Set#Subset($Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
      $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Lifetime.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.Lifetime.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  free requires {:id "id1481"} _module.Lifetime.baseFieldsInv#canCall(previous$Heap, this)
     && 
    _module.Lifetime.baseFieldsInv(previous$Heap, this)
     && 
    ($Unbox(read(previous$Heap, this, _module.Lifetime.owner)): ref != null
       ==> Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(previous$Heap, this, _module.Lifetime.owner)))
     && Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.elements)): Set, 
      $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set)
     && Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointTo)): Set, 
      $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set)
     && Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
      $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1482"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1483"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.baseFieldsInv#canCall(current$Heap, this);
  ensures {:id "id1484"} _module.Lifetime.baseFieldsInv#canCall(current$Heap, this)
     ==> _module.Lifetime.baseFieldsInv(current$Heap, this)
       || ($Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref != null
         ==> Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read(current$Heap, this, _module.Lifetime.owner)));
  ensures {:id "id1485"} _module.Lifetime.baseFieldsInv#canCall(current$Heap, this)
     ==> _module.Lifetime.baseFieldsInv(current$Heap, this)
       || Set#Subset($Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set, 
        $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  ensures {:id "id1486"} _module.Lifetime.baseFieldsInv#canCall(current$Heap, this)
     ==> _module.Lifetime.baseFieldsInv(current$Heap, this)
       || Set#Subset($Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set, 
        $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  ensures {:id "id1487"} _module.Lifetime.baseFieldsInv#canCall(current$Heap, this)
     ==> _module.Lifetime.baseFieldsInv(current$Heap, this)
       || Set#Subset($Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
        $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.Lifetime.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: baseFieldsInvMonotonicity, Impl$$_module.Lifetime.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.Lifetime.unchangedNonvolatileFields
function _module.Lifetime.unchangedNonvolatileFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Lifetime.unchangedNonvolatileFields (revealed)
axiom {:id "id1488"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Lifetime.unchangedNonvolatileFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.unchangedNonvolatileFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $prevHeap))
       ==> _module.Lifetime.unchangedNonvolatileFields($prevHeap, $Heap, this)
         == (
          $Unbox(read($prevHeap, this, _module.Lifetime.owner)): ref
             == $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
           && Set#Equal($Unbox(read($prevHeap, this, _module.Lifetime.elements)): Set, 
            $Unbox(read($Heap, this, _module.Lifetime.elements)): Set)
           && Set#Equal($Unbox(read($prevHeap, this, _module.Lifetime.mightPointTo)): Set, 
            $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set)
           && Set#Equal($Unbox(read($prevHeap, this, _module.Lifetime.mightPointFrom)): Set, 
            $Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set)));
}

function _module.Lifetime.unchangedNonvolatileFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.unchangedNonvolatileFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.unchangedNonvolatileFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Lifetime())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.unchangedNonvolatileFields($prevHeap, $h0, this)
       == _module.Lifetime.unchangedNonvolatileFields($prevHeap, $h1, this));

function _module.Lifetime.unchangedNonvolatileFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Lifetime.unchangedNonvolatileFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Lifetime.unchangedNonvolatileFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $prevHeap)
     ==> _module.Lifetime.unchangedNonvolatileFields#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "Lifetime.unchangedNonvolatileFields (well-formedness)"} CheckWellformed$$_module.Lifetime.unchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.unchangedNonvolatileFields (well-formedness)"} CheckWellformed$$_module.Lifetime.unchangedNonvolatileFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id1489"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.Lifetime.owner];
        if ($Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref
           == $Unbox(read($Heap, this, _module.Lifetime.owner)): ref)
        {
            assert {:id "id1490"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.Lifetime.elements];
        }

        if ($Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref
             == $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
           && Set#Equal($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
            $Unbox(read($Heap, this, _module.Lifetime.elements)): Set))
        {
            assert {:id "id1491"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            b$reqreads#2 := $_ReadsFrame[this, _module.Lifetime.mightPointTo];
        }

        if ($Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref
             == $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
           && Set#Equal($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
            $Unbox(read($Heap, this, _module.Lifetime.elements)): Set)
           && Set#Equal($Unbox(read(old($Heap), this, _module.Lifetime.mightPointTo)): Set, 
            $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set))
        {
            assert {:id "id1492"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            b$reqreads#3 := $_ReadsFrame[this, _module.Lifetime.mightPointFrom];
        }

        assume {:id "id1493"} _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, this)
           == (
            $Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref
               == $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
             && Set#Equal($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.elements)): Set)
             && Set#Equal($Unbox(read(old($Heap), this, _module.Lifetime.mightPointTo)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set)
             && Set#Equal($Unbox(read(old($Heap), this, _module.Lifetime.mightPointFrom)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, this), TBool);
        assert {:id "id1494"} b$reqreads#0;
        assert {:id "id1495"} b$reqreads#1;
        assert {:id "id1496"} b$reqreads#2;
        assert {:id "id1497"} b$reqreads#3;
        return;

        assume false;
    }
}



// function declaration for _module.Lifetime.localInv
function _module.Lifetime.localInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Lifetime.localInv
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Lifetime.localInv($Heap, this) } 
    _module.Lifetime.localInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $Heap))
       ==> 
      _module.Lifetime.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this));
// definition axiom for _module.Lifetime.localInv (revealed)
axiom {:id "id1498"} 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Lifetime.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.localInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $Heap))
       ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this)
         && (_module.Object.objectGlobalBaseInv($Heap, this)
           ==> 
          (forall o#0: ref :: 
            { _module.OwnedObject.lifetime(o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0))
               ==> _module.OwnedObject.lifetime(o#0) == this)
           ==> (forall o#1: ref :: 
              { _module.OwnedObject.alive($Heap, o#1) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#1)) } 
              $Is(o#1, Tclass._module.OwnedObject())
                 ==> 
                Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#1))
                 ==> _module.OwnedObject.alive#canCall($Heap, o#1)
                   && _module.Lifetime.alive#canCall($Heap, this))
             && ((forall o#1: ref :: 
                { _module.OwnedObject.alive($Heap, o#1) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#1)) } 
                $Is(o#1, Tclass._module.OwnedObject())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#1))
                   ==> _module.OwnedObject.alive($Heap, o#1) == _module.Lifetime.alive($Heap, this))
               ==> _module.Lifetime.alive#canCall($Heap, this)
                 && (_module.Lifetime.alive($Heap, this)
                   ==> (forall l#0: ref :: 
                    { _module.Lifetime.alive($Heap, l#0) } 
                      { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#0)) } 
                    $Is(l#0, Tclass._module.Lifetime())
                       ==> 
                      Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#0))
                       ==> _module.Lifetime.alive#canCall($Heap, l#0)))
                 && (
                  (_module.Lifetime.alive($Heap, this)
                   ==> (forall l#0: ref :: 
                    { _module.Lifetime.alive($Heap, l#0) } 
                      { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#0)) } 
                    $Is(l#0, Tclass._module.Lifetime())
                         && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#0))
                       ==> _module.Lifetime.alive($Heap, l#0)))
                   ==> _module.Lifetime.alive#canCall($Heap, this)
                     && (!_module.Lifetime.alive($Heap, this)
                       ==> (forall l#1: ref :: 
                        { _module.Lifetime.alive($Heap, l#1) } 
                          { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#1)) } 
                        $Is(l#1, Tclass._module.Lifetime())
                           ==> 
                          Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#1))
                           ==> _module.Lifetime.alive#canCall($Heap, l#1))))))
         && _module.Lifetime.localInv($Heap, this)
           == (
            _module.Object.objectGlobalBaseInv($Heap, this)
             && (forall o#0: ref :: 
              { _module.OwnedObject.lifetime(o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#0))
                 ==> _module.OwnedObject.lifetime(o#0) == this)
             && (forall o#1: ref :: 
              { _module.OwnedObject.alive($Heap, o#1) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#1)) } 
              $Is(o#1, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#1))
                 ==> _module.OwnedObject.alive($Heap, o#1) == _module.Lifetime.alive($Heap, this))
             && (_module.Lifetime.alive($Heap, this)
               ==> (forall l#0: ref :: 
                { _module.Lifetime.alive($Heap, l#0) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#0)) } 
                $Is(l#0, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#0))
                   ==> _module.Lifetime.alive($Heap, l#0)))
             && (!_module.Lifetime.alive($Heap, this)
               ==> (forall l#1: ref :: 
                { _module.Lifetime.alive($Heap, l#1) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#1)) } 
                $Is(l#1, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#1))
                   ==> !_module.Lifetime.alive($Heap, l#1)))
             && (forall l#2: ref :: 
              { $Unbox(read($Heap, l#2, _module.Lifetime.mightPointFrom)): Set } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#2)) } 
              $Is(l#2, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#2))
                 ==> Set#IsMember($Unbox(read($Heap, l#2, _module.Lifetime.mightPointFrom)): Set, $Box(this)))
             && (forall l#3: ref :: 
              { $Unbox(read($Heap, l#3, _module.Lifetime.mightPointTo)): Set } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#3)) } 
              $Is(l#3, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#3))
                 ==> Set#IsMember($Unbox(read($Heap, l#3, _module.Lifetime.mightPointTo)): Set, $Box(this)))));
}

function _module.Lifetime.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.localInv($h0, this) == _module.Lifetime.localInv($h1, this));

function _module.Lifetime.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Lifetime.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Lifetime.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $Heap)
     ==> _module.Lifetime.localInv#requires($Heap, this) == true);

// override axiom for _module.Object.localInv in class _module.Lifetime
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.localInv($Heap, this), $Is(this, Tclass._module.Lifetime()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv($Heap, this), _module.Lifetime.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.localInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> _module.Object.localInv($Heap, this) == _module.Lifetime.localInv($Heap, this));

procedure {:verboseName "Lifetime.localInv (well-formedness)"} CheckWellformed$$_module.Lifetime.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1499"} _module.Lifetime.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id1500"} _module.Lifetime.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || _module.Object.baseFieldsInv($Heap, this);
  ensures {:id "id1501"} _module.Lifetime.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || Lit(true));
  ensures {:id "id1502"} _module.Lifetime.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#2: ref :: 
            { _module.Object.triggerAxioms($Heap, o#2) } 
              { _module.Object.baseFieldsInv($Heap, o#2) } 
              { _module.Object.universe(o#2) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#2))
               ==> _module.Object.universe(o#2) == _module.Object.universe(this)
                 && o#2 != _module.Object.universe(this)
                 && _module.Object.baseFieldsInv($Heap, o#2)
                 && _module.Object.triggerAxioms($Heap, o#2)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.localInv (well-formedness)"} CheckWellformed$$_module.Lifetime.localInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#3: ref;
  var o#4: ref;
  var l#4: ref;
  var l#5: ref;
  var l#7: ref;
  var l#9: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;
  var b$reqreads#13: bool;
  var b$reqreads#14: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;
    b$reqreads#13 := true;
    b$reqreads#14 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            assert {:id "id1503"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Lifetime.localInv#canCall($Heap, this);
            assume {:id "id1504"} _module.Lifetime.localInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
            assume {:id "id1505"} _module.Object.objectGlobalBaseInv($Heap, this);
        }
        else
        {
            assume {:id "id1506"} _module.Lifetime.localInv($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        if (_module.Object.objectGlobalBaseInv($Heap, this))
        {
            // Begin Comprehension WF check
            havoc o#3;
            if ($Is(o#3, Tclass._module.OwnedObject())
               && $IsAlloc(o#3, Tclass._module.OwnedObject(), $Heap))
            {
                b$reqreads#1 := $_ReadsFrame[this, _module.Lifetime.elements];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#3)))
                {
                    assert {:id "id1507"} o#3 != null;
                }
            }

            // End Comprehension WF check
        }

        if (_module.Object.objectGlobalBaseInv($Heap, this)
           && (forall o#5: ref :: 
            { _module.OwnedObject.lifetime(o#5) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5)) } 
            $Is(o#5, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5))
               ==> _module.OwnedObject.lifetime(o#5) == this))
        {
            // Begin Comprehension WF check
            havoc o#4;
            if ($Is(o#4, Tclass._module.OwnedObject())
               && $IsAlloc(o#4, Tclass._module.OwnedObject(), $Heap))
            {
                b$reqreads#2 := $_ReadsFrame[this, _module.Lifetime.elements];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#4)))
                {
                    assert {:id "id1508"} o#4 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#4), Tclass._module.OwnedObject?(), $Heap);
                    b$reqreads#3 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && 
                          $o == o#4
                           && $f == _module.OwnedObject.owner
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.OwnedObject.alive#canCall($Heap, o#4);
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
                    b$reqreads#4 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && 
                          $o == this
                           && $f == _module.Lifetime.owner
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Lifetime.alive#canCall($Heap, this);
                }
            }

            // End Comprehension WF check
        }

        if (_module.Object.objectGlobalBaseInv($Heap, this)
           && (forall o#5: ref :: 
            { _module.OwnedObject.lifetime(o#5) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5)) } 
            $Is(o#5, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5))
               ==> _module.OwnedObject.lifetime(o#5) == this)
           && (forall o#6: ref :: 
            { _module.OwnedObject.alive($Heap, o#6) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6))
               ==> _module.OwnedObject.alive($Heap, o#6) == _module.Lifetime.alive($Heap, this)))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            b$reqreads#5 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && 
                  $o == this
                   && $f == _module.Lifetime.owner
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Lifetime.alive#canCall($Heap, this);
            if (_module.Lifetime.alive($Heap, this))
            {
                // Begin Comprehension WF check
                havoc l#4;
                if ($Is(l#4, Tclass._module.Lifetime())
                   && $IsAlloc(l#4, Tclass._module.Lifetime(), $Heap))
                {
                    b$reqreads#6 := $_ReadsFrame[this, _module.Lifetime.mightPointTo];
                    if (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#4)))
                    {
                        assert {:id "id1509"} l#4 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(l#4), Tclass._module.Lifetime?(), $Heap);
                        b$reqreads#7 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && 
                              $o == l#4
                               && $f == _module.Lifetime.owner
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Lifetime.alive#canCall($Heap, l#4);
                    }
                }

                // End Comprehension WF check
            }
        }

        if (_module.Object.objectGlobalBaseInv($Heap, this)
           && (forall o#5: ref :: 
            { _module.OwnedObject.lifetime(o#5) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5)) } 
            $Is(o#5, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5))
               ==> _module.OwnedObject.lifetime(o#5) == this)
           && (forall o#6: ref :: 
            { _module.OwnedObject.alive($Heap, o#6) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6))
               ==> _module.OwnedObject.alive($Heap, o#6) == _module.Lifetime.alive($Heap, this))
           && (_module.Lifetime.alive($Heap, this)
             ==> (forall l#6: ref :: 
              { _module.Lifetime.alive($Heap, l#6) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6)) } 
              $Is(l#6, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6))
                 ==> _module.Lifetime.alive($Heap, l#6))))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            b$reqreads#8 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && 
                  $o == this
                   && $f == _module.Lifetime.owner
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Lifetime.alive#canCall($Heap, this);
            if (!_module.Lifetime.alive($Heap, this))
            {
                // Begin Comprehension WF check
                havoc l#5;
                if ($Is(l#5, Tclass._module.Lifetime())
                   && $IsAlloc(l#5, Tclass._module.Lifetime(), $Heap))
                {
                    b$reqreads#9 := $_ReadsFrame[this, _module.Lifetime.mightPointFrom];
                    if (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#5)))
                    {
                        assert {:id "id1510"} l#5 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(l#5), Tclass._module.Lifetime?(), $Heap);
                        b$reqreads#10 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && 
                              $o == l#5
                               && $f == _module.Lifetime.owner
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Lifetime.alive#canCall($Heap, l#5);
                    }
                }

                // End Comprehension WF check
            }
        }

        if (_module.Object.objectGlobalBaseInv($Heap, this)
           && (forall o#5: ref :: 
            { _module.OwnedObject.lifetime(o#5) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5)) } 
            $Is(o#5, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5))
               ==> _module.OwnedObject.lifetime(o#5) == this)
           && (forall o#6: ref :: 
            { _module.OwnedObject.alive($Heap, o#6) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6))
               ==> _module.OwnedObject.alive($Heap, o#6) == _module.Lifetime.alive($Heap, this))
           && (_module.Lifetime.alive($Heap, this)
             ==> (forall l#6: ref :: 
              { _module.Lifetime.alive($Heap, l#6) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6)) } 
              $Is(l#6, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6))
                 ==> _module.Lifetime.alive($Heap, l#6)))
           && (!_module.Lifetime.alive($Heap, this)
             ==> (forall l#8: ref :: 
              { _module.Lifetime.alive($Heap, l#8) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#8)) } 
              $Is(l#8, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#8))
                 ==> !_module.Lifetime.alive($Heap, l#8))))
        {
            // Begin Comprehension WF check
            havoc l#7;
            if ($Is(l#7, Tclass._module.Lifetime())
               && $IsAlloc(l#7, Tclass._module.Lifetime(), $Heap))
            {
                b$reqreads#11 := $_ReadsFrame[this, _module.Lifetime.mightPointTo];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#7)))
                {
                    assert {:id "id1511"} l#7 != null;
                    b$reqreads#12 := $_ReadsFrame[l#7, _module.Lifetime.mightPointFrom];
                }
            }

            // End Comprehension WF check
        }

        if (_module.Object.objectGlobalBaseInv($Heap, this)
           && (forall o#5: ref :: 
            { _module.OwnedObject.lifetime(o#5) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5)) } 
            $Is(o#5, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5))
               ==> _module.OwnedObject.lifetime(o#5) == this)
           && (forall o#6: ref :: 
            { _module.OwnedObject.alive($Heap, o#6) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6))
               ==> _module.OwnedObject.alive($Heap, o#6) == _module.Lifetime.alive($Heap, this))
           && (_module.Lifetime.alive($Heap, this)
             ==> (forall l#6: ref :: 
              { _module.Lifetime.alive($Heap, l#6) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6)) } 
              $Is(l#6, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6))
                 ==> _module.Lifetime.alive($Heap, l#6)))
           && (!_module.Lifetime.alive($Heap, this)
             ==> (forall l#8: ref :: 
              { _module.Lifetime.alive($Heap, l#8) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#8)) } 
              $Is(l#8, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#8))
                 ==> !_module.Lifetime.alive($Heap, l#8)))
           && (forall l#10: ref :: 
            { $Unbox(read($Heap, l#10, _module.Lifetime.mightPointFrom)): Set } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#10)) } 
            $Is(l#10, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#10))
               ==> Set#IsMember($Unbox(read($Heap, l#10, _module.Lifetime.mightPointFrom)): Set, $Box(this))))
        {
            // Begin Comprehension WF check
            havoc l#9;
            if ($Is(l#9, Tclass._module.Lifetime())
               && $IsAlloc(l#9, Tclass._module.Lifetime(), $Heap))
            {
                b$reqreads#13 := $_ReadsFrame[this, _module.Lifetime.mightPointFrom];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#9)))
                {
                    assert {:id "id1512"} l#9 != null;
                    b$reqreads#14 := $_ReadsFrame[l#9, _module.Lifetime.mightPointTo];
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id1513"} _module.Lifetime.localInv($Heap, this)
           == (
            _module.Object.objectGlobalBaseInv($Heap, this)
             && (forall o#5: ref :: 
              { _module.OwnedObject.lifetime(o#5) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5)) } 
              $Is(o#5, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5))
                 ==> _module.OwnedObject.lifetime(o#5) == this)
             && (forall o#6: ref :: 
              { _module.OwnedObject.alive($Heap, o#6) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6)) } 
              $Is(o#6, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6))
                 ==> _module.OwnedObject.alive($Heap, o#6) == _module.Lifetime.alive($Heap, this))
             && (_module.Lifetime.alive($Heap, this)
               ==> (forall l#6: ref :: 
                { _module.Lifetime.alive($Heap, l#6) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6)) } 
                $Is(l#6, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6))
                   ==> _module.Lifetime.alive($Heap, l#6)))
             && (!_module.Lifetime.alive($Heap, this)
               ==> (forall l#8: ref :: 
                { _module.Lifetime.alive($Heap, l#8) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#8)) } 
                $Is(l#8, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#8))
                   ==> !_module.Lifetime.alive($Heap, l#8)))
             && (forall l#10: ref :: 
              { $Unbox(read($Heap, l#10, _module.Lifetime.mightPointFrom)): Set } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#10)) } 
              $Is(l#10, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#10))
                 ==> Set#IsMember($Unbox(read($Heap, l#10, _module.Lifetime.mightPointFrom)): Set, $Box(this)))
             && (forall l#11: ref :: 
              { $Unbox(read($Heap, l#11, _module.Lifetime.mightPointTo)): Set } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#11)) } 
              $Is(l#11, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#11))
                 ==> Set#IsMember($Unbox(read($Heap, l#11, _module.Lifetime.mightPointTo)): Set, $Box(this))));
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this)
           && (_module.Object.objectGlobalBaseInv($Heap, this)
             ==> 
            (forall o#5: ref :: 
              { _module.OwnedObject.lifetime(o#5) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5)) } 
              $Is(o#5, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5))
                 ==> _module.OwnedObject.lifetime(o#5) == this)
             ==> (forall o#6: ref :: 
                { _module.OwnedObject.alive($Heap, o#6) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6)) } 
                $Is(o#6, Tclass._module.OwnedObject())
                   ==> 
                  Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6))
                   ==> _module.OwnedObject.alive#canCall($Heap, o#6)
                     && _module.Lifetime.alive#canCall($Heap, this))
               && ((forall o#6: ref :: 
                  { _module.OwnedObject.alive($Heap, o#6) } 
                    { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6)) } 
                  $Is(o#6, Tclass._module.OwnedObject())
                       && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#6))
                     ==> _module.OwnedObject.alive($Heap, o#6) == _module.Lifetime.alive($Heap, this))
                 ==> _module.Lifetime.alive#canCall($Heap, this)
                   && (_module.Lifetime.alive($Heap, this)
                     ==> (forall l#6: ref :: 
                      { _module.Lifetime.alive($Heap, l#6) } 
                        { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6)) } 
                      $Is(l#6, Tclass._module.Lifetime())
                         ==> 
                        Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6))
                         ==> _module.Lifetime.alive#canCall($Heap, l#6)))
                   && (
                    (_module.Lifetime.alive($Heap, this)
                     ==> (forall l#6: ref :: 
                      { _module.Lifetime.alive($Heap, l#6) } 
                        { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6)) } 
                      $Is(l#6, Tclass._module.Lifetime())
                           && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6))
                         ==> _module.Lifetime.alive($Heap, l#6)))
                     ==> _module.Lifetime.alive#canCall($Heap, this)
                       && (!_module.Lifetime.alive($Heap, this)
                         ==> (forall l#8: ref :: 
                          { _module.Lifetime.alive($Heap, l#8) } 
                            { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#8)) } 
                          $Is(l#8, Tclass._module.Lifetime())
                             ==> 
                            Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#8))
                             ==> _module.Lifetime.alive#canCall($Heap, l#8))))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Lifetime.localInv($Heap, this), TBool);
        assert {:id "id1514"} b$reqreads#0;
        assert {:id "id1515"} b$reqreads#1;
        assert {:id "id1516"} b$reqreads#2;
        assert {:id "id1517"} b$reqreads#3;
        assert {:id "id1518"} b$reqreads#4;
        assert {:id "id1519"} b$reqreads#5;
        assert {:id "id1520"} b$reqreads#6;
        assert {:id "id1521"} b$reqreads#7;
        assert {:id "id1522"} b$reqreads#8;
        assert {:id "id1523"} b$reqreads#9;
        assert {:id "id1524"} b$reqreads#10;
        assert {:id "id1525"} b$reqreads#11;
        assert {:id "id1526"} b$reqreads#12;
        assert {:id "id1527"} b$reqreads#13;
        assert {:id "id1528"} b$reqreads#14;
        return;

        assume false;
    }
}



procedure {:verboseName "Lifetime.localInv (override check)"} OverrideCheck$$_module.Lifetime.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.localInv (override check)"} OverrideCheck$$_module.Lifetime.localInv(this: ref)
{
  var Lifetime_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1529"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Lifetime_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1530"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1531"} _module.Lifetime.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this);
    assert {:id "id1532"} _module.Lifetime.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1533"} _module.Lifetime.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || _module.Object.baseFieldsInv($Heap, this);
    assert {:id "id1534"} _module.Lifetime.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || Lit(true));
    assert {:id "id1535"} _module.Lifetime.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || (forall o#7: ref :: 
              { _module.Object.triggerAxioms($Heap, o#7) } 
                { _module.Object.baseFieldsInv($Heap, o#7) } 
                { _module.Object.universe(o#7) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> _module.Object.universe(o#7) == _module.Object.universe(this)
                   && o#7 != _module.Object.universe(this)
                   && _module.Object.baseFieldsInv($Heap, o#7)
                   && _module.Object.triggerAxioms($Heap, o#7)));
}



// function declaration for _module.Lifetime.inv
function _module.Lifetime.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Lifetime.inv
axiom 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Lifetime.inv($Heap, this) } 
    _module.Lifetime.inv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $Heap))
       ==> 
      _module.Lifetime.inv($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this));
// definition axiom for _module.Lifetime.inv (revealed)
axiom {:id "id1536"} 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Lifetime.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.inv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $Heap))
       ==> _module.Lifetime.localInv#canCall($Heap, this)
         && _module.Lifetime.inv($Heap, this) == _module.Lifetime.localInv($Heap, this));
}

function _module.Lifetime.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.inv($h0, this) == _module.Lifetime.inv($h1, this));

function _module.Lifetime.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.Lifetime.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Lifetime.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $Heap)
     ==> _module.Lifetime.inv#requires($Heap, this) == true);

// override axiom for _module.Object.inv in class _module.Lifetime
axiom 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this), $Is(this, Tclass._module.Lifetime()), $IsGoodHeap($Heap) } 
      { _module.Object.inv($Heap, this), _module.Lifetime.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.inv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> _module.Object.inv($Heap, this) == _module.Lifetime.inv($Heap, this));

procedure {:verboseName "Lifetime.inv (well-formedness)"} CheckWellformed$$_module.Lifetime.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1537"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1538"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || _module.Object.baseFieldsInv($Heap, this));
  ensures {:id "id1539"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id1540"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));
  ensures {:id "id1541"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (forall o#1: ref :: 
        { _module.OwnedObject.lifetime(o#1) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.OwnedObject())
             && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#1))
           ==> _module.OwnedObject.lifetime(o#1) == this);
  ensures {:id "id1542"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (forall o#2: ref :: 
        { _module.OwnedObject.alive($Heap, o#2) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2)) } 
        $Is(o#2, Tclass._module.OwnedObject())
             && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#2))
           ==> _module.OwnedObject.alive($Heap, o#2) == _module.Lifetime.alive($Heap, this));
  ensures {:id "id1543"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (_module.Lifetime.alive($Heap, this)
         ==> (forall l#0: ref :: 
          { _module.Lifetime.alive($Heap, l#0) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#0)) } 
          $Is(l#0, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#0))
             ==> _module.Lifetime.alive($Heap, l#0)));
  ensures {:id "id1544"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (!_module.Lifetime.alive($Heap, this)
         ==> (forall l#1: ref :: 
          { _module.Lifetime.alive($Heap, l#1) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#1)) } 
          $Is(l#1, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#1))
             ==> !_module.Lifetime.alive($Heap, l#1)));
  ensures {:id "id1545"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (forall l#2: ref :: 
        { $Unbox(read($Heap, l#2, _module.Lifetime.mightPointFrom)): Set } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#2)) } 
        $Is(l#2, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#2))
           ==> Set#IsMember($Unbox(read($Heap, l#2, _module.Lifetime.mightPointFrom)): Set, $Box(this)));
  ensures {:id "id1546"} _module.Lifetime.inv($Heap, this)
     ==> 
    _module.Lifetime.localInv#canCall($Heap, this)
     ==> _module.Lifetime.localInv($Heap, this)
       || (forall l#3: ref :: 
        { $Unbox(read($Heap, l#3, _module.Lifetime.mightPointTo)): Set } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#3)) } 
        $Is(l#3, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#3))
           ==> Set#IsMember($Unbox(read($Heap, l#3, _module.Lifetime.mightPointTo)): Set, $Box(this)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.inv (well-formedness)"} CheckWellformed$$_module.Lifetime.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            assert {:id "id1547"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Lifetime.inv#canCall($Heap, this);
            assume {:id "id1548"} _module.Lifetime.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            assume _module.Lifetime.localInv#canCall($Heap, this);
            assume {:id "id1549"} _module.Lifetime.localInv($Heap, this);
        }
        else
        {
            assume {:id "id1550"} _module.Lifetime.inv($Heap, this) ==> _module.Lifetime.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Lifetime.localInv#canCall($Heap, this);
        assume {:id "id1551"} _module.Lifetime.inv($Heap, this) == _module.Lifetime.localInv($Heap, this);
        assume _module.Lifetime.localInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Lifetime.inv($Heap, this), TBool);
        assert {:id "id1552"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Lifetime.inv (override check)"} OverrideCheck$$_module.Lifetime.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.inv (override check)"} OverrideCheck$$_module.Lifetime.inv(this: ref)
{
  var Lifetime_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1553"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Lifetime_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1554"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1555"} _module.Lifetime.inv($Heap, this) ==> _module.Lifetime.localInv($Heap, this);
    assert {:id "id1556"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id1557"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || _module.Object.baseFieldsInv($Heap, this));
    assert {:id "id1558"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || Lit(true)));
    assert {:id "id1559"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#3: ref :: 
                  { _module.Object.triggerAxioms($Heap, o#3) } 
                    { _module.Object.baseFieldsInv($Heap, o#3) } 
                    { _module.Object.universe(o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                       && o#3 != _module.Object.universe(this)
                       && _module.Object.baseFieldsInv($Heap, o#3)
                       && _module.Object.triggerAxioms($Heap, o#3))));
    assert {:id "id1560"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (forall o#4: ref :: 
          { _module.OwnedObject.lifetime(o#4) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#4)) } 
          $Is(o#4, Tclass._module.OwnedObject())
               && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#4))
             ==> _module.OwnedObject.lifetime(o#4) == this);
    assert {:id "id1561"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (forall o#5: ref :: 
          { _module.OwnedObject.alive($Heap, o#5) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5)) } 
          $Is(o#5, Tclass._module.OwnedObject())
               && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#5))
             ==> _module.OwnedObject.alive($Heap, o#5) == _module.Lifetime.alive($Heap, this));
    assert {:id "id1562"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (_module.Lifetime.alive($Heap, this)
           ==> (forall l#4: ref :: 
            { _module.Lifetime.alive($Heap, l#4) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#4)) } 
            $Is(l#4, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#4))
               ==> _module.Lifetime.alive($Heap, l#4)));
    assert {:id "id1563"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (!_module.Lifetime.alive($Heap, this)
           ==> (forall l#5: ref :: 
            { _module.Lifetime.alive($Heap, l#5) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#5)) } 
            $Is(l#5, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#5))
               ==> !_module.Lifetime.alive($Heap, l#5)));
    assert {:id "id1564"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (forall l#6: ref :: 
          { $Unbox(read($Heap, l#6, _module.Lifetime.mightPointFrom)): Set } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6)) } 
          $Is(l#6, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#6))
             ==> Set#IsMember($Unbox(read($Heap, l#6, _module.Lifetime.mightPointFrom)): Set, $Box(this)));
    assert {:id "id1565"} _module.Lifetime.inv($Heap, this)
       ==> 
      _module.Lifetime.localInv#canCall($Heap, this)
       ==> _module.Lifetime.localInv($Heap, this)
         || (forall l#7: ref :: 
          { $Unbox(read($Heap, l#7, _module.Lifetime.mightPointTo)): Set } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#7)) } 
          $Is(l#7, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#7))
             ==> Set#IsMember($Unbox(read($Heap, l#7, _module.Lifetime.mightPointTo)): Set, $Box(this)));
}



// function declaration for _module.Lifetime.sequenceInv2
function _module.Lifetime.sequenceInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Lifetime.sequenceInv2 (revealed)
axiom {:id "id1566"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Lifetime.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $prevHeap))
       ==> _module.Lifetime.alive#canCall($prevHeap, this)
         && (!_module.Lifetime.alive($prevHeap, this)
           ==> _module.Lifetime.alive#canCall($Heap, this))
         && _module.Lifetime.sequenceInv2($prevHeap, $Heap, this)
           == (
            (!_module.Lifetime.alive($prevHeap, this)
               ==> !_module.Lifetime.alive($Heap, this))
             && ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
               ==> $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
                 == $Unbox(read($prevHeap, this, _module.Lifetime.owner)): ref)
             && Set#Subset($Unbox(read($prevHeap, this, _module.Lifetime.elements)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.elements)): Set)
             && Set#Subset($Unbox(read($prevHeap, this, _module.Lifetime.mightPointTo)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set)
             && Set#Subset($Unbox(read($prevHeap, this, _module.Lifetime.mightPointFrom)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set)));
}

function _module.Lifetime.sequenceInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.sequenceInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.sequenceInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.sequenceInv2($prevHeap, $h0, this)
       == _module.Lifetime.sequenceInv2($prevHeap, $h1, this));

function _module.Lifetime.sequenceInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Lifetime.sequenceInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Lifetime.sequenceInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $prevHeap)
     ==> _module.Lifetime.sequenceInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.sequenceInv2 in class _module.Lifetime
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.sequenceInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Lifetime()), $IsGoodHeap($Heap) } 
      { _module.Object.sequenceInv2($prevHeap, $Heap, this), _module.Lifetime.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> _module.Object.sequenceInv2($prevHeap, $Heap, this)
         == _module.Lifetime.sequenceInv2($prevHeap, $Heap, this));

procedure {:verboseName "Lifetime.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.Lifetime.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.Lifetime.sequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id1567"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
        assume _module.Lifetime.alive#canCall(old($Heap), this);
        if (!_module.Lifetime.alive(old($Heap), this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && 
                  $o == this
                   && $f == _module.Lifetime.owner
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Lifetime.alive#canCall($Heap, this);
        }

        if (!_module.Lifetime.alive(old($Heap), this)
           ==> !_module.Lifetime.alive($Heap, this))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.Lifetime.owner];
            newtype$check#0 := null;
            if ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null)
            {
                b$reqreads#2 := $_ReadsFrame[this, _module.Lifetime.owner];
                assert {:id "id1568"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            }
        }

        if ((!_module.Lifetime.alive(old($Heap), this)
             ==> !_module.Lifetime.alive($Heap, this))
           && ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
             ==> $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
               == $Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref))
        {
            assert {:id "id1569"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            b$reqreads#3 := $_ReadsFrame[this, _module.Lifetime.elements];
        }

        if ((!_module.Lifetime.alive(old($Heap), this)
             ==> !_module.Lifetime.alive($Heap, this))
           && ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
             ==> $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
               == $Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
            $Unbox(read($Heap, this, _module.Lifetime.elements)): Set))
        {
            assert {:id "id1570"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            b$reqreads#4 := $_ReadsFrame[this, _module.Lifetime.mightPointTo];
        }

        if ((!_module.Lifetime.alive(old($Heap), this)
             ==> !_module.Lifetime.alive($Heap, this))
           && ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
             ==> $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
               == $Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
            $Unbox(read($Heap, this, _module.Lifetime.elements)): Set)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointTo)): Set, 
            $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set))
        {
            assert {:id "id1571"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            b$reqreads#5 := $_ReadsFrame[this, _module.Lifetime.mightPointFrom];
        }

        assume {:id "id1572"} _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
           == (
            (!_module.Lifetime.alive(old($Heap), this)
               ==> !_module.Lifetime.alive($Heap, this))
             && ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
               ==> $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
                 == $Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref)
             && Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.elements)): Set)
             && Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointTo)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set)
             && Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointFrom)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set));
        assume _module.Lifetime.alive#canCall(old($Heap), this)
           && (!_module.Lifetime.alive(old($Heap), this)
             ==> _module.Lifetime.alive#canCall($Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Lifetime.sequenceInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1573"} b$reqreads#0;
        assert {:id "id1574"} b$reqreads#1;
        assert {:id "id1575"} b$reqreads#2;
        assert {:id "id1576"} b$reqreads#3;
        assert {:id "id1577"} b$reqreads#4;
        assert {:id "id1578"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "Lifetime.sequenceInv2 (override check)"} OverrideCheck$$_module.Lifetime.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.sequenceInv2 (override check)"} OverrideCheck$$_module.Lifetime.sequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Lifetime_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1579"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Lifetime_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1580"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Lifetime.localInv2
function _module.Lifetime.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Lifetime.localInv2 (revealed)
axiom {:id "id1581"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Lifetime.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.localInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $prevHeap))
       ==> _module.Lifetime.localInv2($prevHeap, $Heap, this) == Lit(true));
}

function _module.Lifetime.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.localInv2($prevHeap, $h0, this)
       == _module.Lifetime.localInv2($prevHeap, $h1, this));

function _module.Lifetime.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Lifetime.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Lifetime.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $prevHeap)
     ==> _module.Lifetime.localInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.localInv2 in class _module.Lifetime
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.localInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Lifetime()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv2($prevHeap, $Heap, this), _module.Lifetime.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.localInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> _module.Object.localInv2($prevHeap, $Heap, this)
         == _module.Lifetime.localInv2($prevHeap, $Heap, this));

procedure {:verboseName "Lifetime.localInv2 (well-formedness)"} CheckWellformed$$_module.Lifetime.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "Lifetime.localInv2 (override check)"} OverrideCheck$$_module.Lifetime.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.localInv2 (override check)"} OverrideCheck$$_module.Lifetime.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Lifetime_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1583"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Lifetime_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1584"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Lifetime.inv2
function _module.Lifetime.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Lifetime.inv2
axiom 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Lifetime.inv2($prevHeap, $Heap, this) } 
    _module.Lifetime.inv2#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $prevHeap))
       ==> 
      _module.Lifetime.inv2($prevHeap, $Heap, this)
       ==> _module.Lifetime.localInv2($prevHeap, $Heap, this)
         && _module.Lifetime.sequenceInv2($prevHeap, $Heap, this));
// definition axiom for _module.Lifetime.inv2 (revealed)
axiom {:id "id1585"} 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Lifetime.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.inv2#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Lifetime())
           && $IsAlloc(this, Tclass._module.Lifetime(), $prevHeap))
       ==> _module.Lifetime.localInv2#canCall($prevHeap, $Heap, this)
         && (_module.Lifetime.localInv2($prevHeap, $Heap, this)
           ==> _module.Lifetime.sequenceInv2#canCall($prevHeap, $Heap, this))
         && _module.Lifetime.inv2($prevHeap, $Heap, this)
           == (_module.Lifetime.localInv2($prevHeap, $Heap, this)
             && _module.Lifetime.sequenceInv2($prevHeap, $Heap, this)));
}

function _module.Lifetime.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Lifetime.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Lifetime.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Lifetime.inv2($prevHeap, $h0, this)
       == _module.Lifetime.inv2($prevHeap, $h1, this));

function _module.Lifetime.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Lifetime.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Lifetime.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $prevHeap)
     ==> _module.Lifetime.inv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.inv2 in class _module.Lifetime
axiom 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Lifetime()), $IsGoodHeap($Heap) } 
      { _module.Object.inv2($prevHeap, $Heap, this), _module.Lifetime.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Lifetime.inv2#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Lifetime()))
       ==> _module.Object.inv2($prevHeap, $Heap, this)
         == _module.Lifetime.inv2($prevHeap, $Heap, this));

procedure {:verboseName "Lifetime.inv2 (well-formedness)"} CheckWellformed$$_module.Lifetime.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1586"} _module.Lifetime.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Lifetime.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.localInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id1587"} _module.Lifetime.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || (!_module.Lifetime.alive(previous$Heap, this)
         ==> !_module.Lifetime.alive(current$Heap, this));
  ensures {:id "id1588"} _module.Lifetime.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref != null
         ==> $Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref
           == $Unbox(read(previous$Heap, this, _module.Lifetime.owner)): ref);
  ensures {:id "id1589"} _module.Lifetime.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.elements)): Set, 
        $Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set);
  ensures {:id "id1590"} _module.Lifetime.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointTo)): Set, 
        $Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set);
  ensures {:id "id1591"} _module.Lifetime.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
        $Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.inv2 (well-formedness)"} CheckWellformed$$_module.Lifetime.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            assert {:id "id1592"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            assert {:id "id1593"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Lifetime.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1594"} _module.Lifetime.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            assert {:id "id1595"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            assume _module.Lifetime.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1596"} _module.Lifetime.localInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            assert {:id "id1597"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            assume _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1598"} _module.Lifetime.sequenceInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1599"} _module.Lifetime.inv2(old($Heap), $Heap, this)
               ==> _module.Lifetime.localInv2(old($Heap), $Heap, this)
                 && _module.Lifetime.sequenceInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
        assert {:id "id1600"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Lifetime.localInv2#canCall(old($Heap), $Heap, this);
        if (_module.Lifetime.localInv2(old($Heap), $Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
            assert {:id "id1601"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id1602"} _module.Lifetime.inv2(old($Heap), $Heap, this)
           == (_module.Lifetime.localInv2(old($Heap), $Heap, this)
             && _module.Lifetime.sequenceInv2(old($Heap), $Heap, this));
        assume _module.Lifetime.localInv2#canCall(old($Heap), $Heap, this)
           && (_module.Lifetime.localInv2(old($Heap), $Heap, this)
             ==> _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Lifetime.inv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1603"} b$reqreads#0;
        assert {:id "id1604"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "Lifetime.inv2 (override check)"} OverrideCheck$$_module.Lifetime.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), current$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.inv2 (override check)"} OverrideCheck$$_module.Lifetime.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Lifetime_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1605"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Lifetime_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1606"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1607"} _module.Lifetime.inv2(old($Heap), $Heap, this)
       ==> _module.Lifetime.localInv2(old($Heap), $Heap, this)
         && _module.Lifetime.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id1608"} _module.Lifetime.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Lifetime.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.localInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id1609"} _module.Lifetime.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || (!_module.Lifetime.alive(old($Heap), this)
           ==> !_module.Lifetime.alive($Heap, this));
    assert {:id "id1610"} _module.Lifetime.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
           ==> $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
             == $Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref);
    assert {:id "id1611"} _module.Lifetime.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
          $Unbox(read($Heap, this, _module.Lifetime.elements)): Set);
    assert {:id "id1612"} _module.Lifetime.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set);
    assert {:id "id1613"} _module.Lifetime.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set);
}



procedure {:verboseName "Lifetime.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Lifetime.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Lifetime.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.Lifetime.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id1614"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
    assert {:id "id1615"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1616"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
    assert {:id "id1617"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
    assume _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1618"} _module.Lifetime.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Lifetime.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Lifetime.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Lifetime.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id1619"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id1620"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1621"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1622"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1623"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id1624"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1625"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id1626"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id1627"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id1628"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || Set#Subset(running#0, 
              $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id1629"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id1630"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object?(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id1631"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall l#0: ref :: 
              { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#0)) } 
              $Is(l#0, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#0))
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), l#0, _module.Lifetime.owner))
                   && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                    Tclass._module.Thread?(), 
                    old($Heap))
                 ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0)));
    assert {:id "id1632"} Set#Subset(running#0, running#0);
    assert {:id "id1633"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1634"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1635"} _module.Lifetime.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id1636"} _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || (!_module.Lifetime.alive(old($Heap), this)
           ==> !_module.Lifetime.alive($Heap, this));
    assert {:id "id1637"} _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
           ==> $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
             == $Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref);
    assert {:id "id1638"} _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
          $Unbox(read($Heap, this, _module.Lifetime.elements)): Set);
    assert {:id "id1639"} _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointTo)): Set, 
          $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set);
    assert {:id "id1640"} _module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointFrom)): Set, 
          $Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set);
}



procedure {:verboseName "Lifetime.sequenceAdmissibility (call)"} Call$$_module.Lifetime.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id1641"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1642"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1643"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1644"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id1645"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1646"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id1647"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id1648"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id1649"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || Set#Subset(running#0, 
            $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id1650"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id1651"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id1652"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall l#1: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
              { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(l#1)) } 
            $Is(l#1, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#1))
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, l#1, _module.Lifetime.owner))
                 && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  previous$Heap)
               ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id1653"} _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
     && 
    (!_module.Lifetime.alive(previous$Heap, this)
       ==> !_module.Lifetime.alive(current$Heap, this))
     && ($Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref != null
       ==> $Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref
         == $Unbox(read(previous$Heap, this, _module.Lifetime.owner)): ref)
     && Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.elements)): Set, 
      $Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set)
     && Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointTo)): Set, 
      $Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set)
     && Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
      $Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Lifetime.sequenceAdmissibility (correctness)"} Impl$$_module.Lifetime.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1654"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id1655"} _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || (!_module.Lifetime.alive(previous$Heap, this)
         ==> !_module.Lifetime.alive(current$Heap, this));
  ensures {:id "id1656"} _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref != null
         ==> $Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref
           == $Unbox(read(previous$Heap, this, _module.Lifetime.owner)): ref);
  ensures {:id "id1657"} _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.elements)): Set, 
        $Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set);
  ensures {:id "id1658"} _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointTo)): Set, 
        $Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set);
  ensures {:id "id1659"} _module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
        $Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.sequenceAdmissibility (correctness)"} Impl$$_module.Lifetime.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.Lifetime.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Lifetime.admissibility (well-formedness)"} CheckWellFormed$$_module.Lifetime.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.admissibility (well-formedness)"} CheckWellFormed$$_module.Lifetime.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Lifetime.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1660"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
    assert {:id "id1661"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1662"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
    assert {:id "id1663"} $IsAlloc(this, Tclass._module.Lifetime(), old($Heap));
    assume _module.Lifetime.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1664"} _module.Lifetime.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Lifetime?(), $Heap);
    assume _module.Lifetime.inv#canCall($Heap, this);
    assume {:id "id1665"} _module.Lifetime.inv($Heap, this);
}



procedure {:verboseName "Lifetime.admissibility (override check)"} OverrideCheck$$_module.Lifetime.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.admissibility (override check)"} OverrideCheck$$_module.Lifetime.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id1666"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id1667"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1668"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1669"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1670"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id1671"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1672"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id1673"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id1674"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id1675"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id1676"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id1677"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object?(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id1678"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall l#0: ref :: 
                  { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                    { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#0)) } 
                  $Is(l#0, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(l#0))
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), l#0, _module.Lifetime.owner))
                       && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                        Tclass._module.Thread?(), 
                        old($Heap))
                     ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0))));
    assert {:id "id1679"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1680"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id1681"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id1682"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id1683"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id1684"} running#0 != null ==> running#0 != null;
    assert {:id "id1685"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1686"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1687"} _module.Lifetime.inv2(old($Heap), $Heap, this)
       && _module.Lifetime.inv($Heap, this);
    assert {:id "id1688"} _module.Lifetime.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.inv2(old($Heap), $Heap, this)
         || (_module.Lifetime.localInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Lifetime.localInv2(old($Heap), $Heap, this) || Lit(true));
    assert {:id "id1689"} _module.Lifetime.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.inv2(old($Heap), $Heap, this)
         || (_module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
             || (!_module.Lifetime.alive(old($Heap), this)
               ==> !_module.Lifetime.alive($Heap, this)));
    assert {:id "id1690"} _module.Lifetime.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.inv2(old($Heap), $Heap, this)
         || (_module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
             || ($Unbox(read($Heap, this, _module.Lifetime.owner)): ref != null
               ==> $Unbox(read($Heap, this, _module.Lifetime.owner)): ref
                 == $Unbox(read(old($Heap), this, _module.Lifetime.owner)): ref));
    assert {:id "id1691"} _module.Lifetime.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.inv2(old($Heap), $Heap, this)
         || (_module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
             || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.elements)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.elements)): Set));
    assert {:id "id1692"} _module.Lifetime.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.inv2(old($Heap), $Heap, this)
         || (_module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
             || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointTo)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set));
    assert {:id "id1693"} _module.Lifetime.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Lifetime.inv2(old($Heap), $Heap, this)
         || (_module.Lifetime.sequenceInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Lifetime.sequenceInv2(old($Heap), $Heap, this)
             || Set#Subset($Unbox(read(old($Heap), this, _module.Lifetime.mightPointFrom)): Set, 
              $Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set));
    assert {:id "id1694"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(this))));
    assert {:id "id1695"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || _module.Object.baseFieldsInv($Heap, this)));
    assert {:id "id1696"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1697"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#9: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#9) } 
                        { _module.Object.baseFieldsInv($Heap, o#9) } 
                        { _module.Object.universe(o#9) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#9)) } 
                      $Is(o#9, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9))
                         ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                           && o#9 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#9)
                           && _module.Object.triggerAxioms($Heap, o#9)))));
    assert {:id "id1698"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (forall o#10: ref :: 
              { _module.OwnedObject.lifetime(o#10) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#10)) } 
              $Is(o#10, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#10))
                 ==> _module.OwnedObject.lifetime(o#10) == this));
    assert {:id "id1699"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (forall o#11: ref :: 
              { _module.OwnedObject.alive($Heap, o#11) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#11)) } 
              $Is(o#11, Tclass._module.OwnedObject())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, $Box(o#11))
                 ==> _module.OwnedObject.alive($Heap, o#11) == _module.Lifetime.alive($Heap, this)));
    assert {:id "id1700"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (_module.Lifetime.alive($Heap, this)
               ==> (forall l#1: ref :: 
                { _module.Lifetime.alive($Heap, l#1) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#1)) } 
                $Is(l#1, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#1))
                   ==> _module.Lifetime.alive($Heap, l#1))));
    assert {:id "id1701"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (!_module.Lifetime.alive($Heap, this)
               ==> (forall l#2: ref :: 
                { _module.Lifetime.alive($Heap, l#2) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#2)) } 
                $Is(l#2, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#2))
                   ==> !_module.Lifetime.alive($Heap, l#2))));
    assert {:id "id1702"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (forall l#3: ref :: 
              { $Unbox(read($Heap, l#3, _module.Lifetime.mightPointFrom)): Set } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#3)) } 
              $Is(l#3, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#3))
                 ==> Set#IsMember($Unbox(read($Heap, l#3, _module.Lifetime.mightPointFrom)): Set, $Box(this))));
    assert {:id "id1703"} _module.Lifetime.inv#canCall($Heap, this)
       ==> _module.Lifetime.inv($Heap, this)
         || (_module.Lifetime.localInv#canCall($Heap, this)
           ==> _module.Lifetime.localInv($Heap, this)
             || (forall l#4: ref :: 
              { $Unbox(read($Heap, l#4, _module.Lifetime.mightPointTo)): Set } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#4)) } 
              $Is(l#4, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, $Box(l#4))
                 ==> Set#IsMember($Unbox(read($Heap, l#4, _module.Lifetime.mightPointTo)): Set, $Box(this))));
}



procedure {:verboseName "Lifetime.admissibility (call)"} Call$$_module.Lifetime.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id1704"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1705"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1706"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1707"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#12: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#12) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#12) } 
                          { _module.Object.universe(o#12) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#12)) } 
                        $Is(o#12, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#12))
                           ==> _module.Object.universe(o#12) == _module.Object.universe(this)
                             && o#12 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#12)
                             && _module.Object.triggerAxioms(previous$Heap, o#12))))));
  requires {:id "id1708"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1709"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#13: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#13) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#13) } 
                          { _module.Object.universe(o#13) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#13)) } 
                        $Is(o#13, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#13))
                           ==> _module.Object.universe(o#13) == _module.Object.universe(this)
                             && o#13 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#13)
                             && _module.Object.triggerAxioms(current$Heap, o#13))))));
  requires {:id "id1710"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id1711"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#14: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#14)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#14)) } 
                    $Is(o#14, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#14))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#14))
                       ==> !$IsAllocBox($Box(o#14), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id1712"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id1713"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#15: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#15) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#15
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#15))));
  requires {:id "id1714"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#16: ref :: 
                { $Unbox(read(current$Heap, o#16, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#16, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#16, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#16)) } 
                $Is(o#16, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#16))
                     && $Is($Unbox(read(previous$Heap, o#16, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#16, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#16, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#16, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#16, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id1715"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall l#5: ref :: 
                { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#5) } 
                  { $Unbox(read(previous$Heap, l#5, _module.Lifetime.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#5)) } 
                $Is(l#5, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#5))
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, l#5, _module.Lifetime.owner))
                     && $IsAllocBox(read(previous$Heap, l#5, _module.Lifetime.owner), 
                      Tclass._module.Thread?(), 
                      previous$Heap)
                   ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#5))));
  requires {:id "id1716"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1717"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#17: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#17) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#17) } 
                      { _module.Object.universe(o#17) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#17)) } 
                    $Is(o#17, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#17))
                       ==> _module.Object.universe(o#17) == _module.Object.universe(this)
                         && o#17 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#17)
                         && _module.Object.triggerAxioms(previous$Heap, o#17)))));
  requires {:id "id1718"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#18: ref :: 
                { _module.Object.inv(previous$Heap, o#18) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#18)) } 
                $Is(o#18, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#18))
                   ==> _module.Object.inv(previous$Heap, o#18))));
  requires {:id "id1719"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#19: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#19) } 
              { _module.Object.inv(current$Heap, o#19) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#19)) } 
            $Is(o#19, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#19))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#19
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#19))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#19
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#19))));
  requires {:id "id1720"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#20: ref :: 
            { _module.Object.inv(current$Heap, o#20) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#20)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#20)) } 
            $Is(o#20, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#20))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#20))
               ==> _module.Object.inv(current$Heap, o#20)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Lifetime.inv2(previous$Heap, current$Heap, this)
       ==> _module.Lifetime.inv#canCall(current$Heap, this));
  free ensures {:id "id1721"} _module.Lifetime.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Lifetime.inv2(previous$Heap, current$Heap, this)
     && 
    _module.Lifetime.localInv2(previous$Heap, current$Heap, this)
     && _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this);
  free ensures {:id "id1722"} _module.Lifetime.inv#canCall(current$Heap, this)
     && 
    _module.Lifetime.inv(current$Heap, this)
     && _module.Lifetime.localInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Lifetime.admissibility (correctness)"} Impl$$_module.Lifetime.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1723"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Lifetime.inv2(previous$Heap, current$Heap, this)
       ==> _module.Lifetime.inv#canCall(current$Heap, this));
  ensures {:id "id1724"} _module.Lifetime.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.inv2(previous$Heap, current$Heap, this)
       || (_module.Lifetime.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Lifetime.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id1725"} _module.Lifetime.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.inv2(previous$Heap, current$Heap, this)
       || (_module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
           || (!_module.Lifetime.alive(previous$Heap, this)
             ==> !_module.Lifetime.alive(current$Heap, this)));
  ensures {:id "id1726"} _module.Lifetime.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.inv2(previous$Heap, current$Heap, this)
       || (_module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref != null
             ==> $Unbox(read(current$Heap, this, _module.Lifetime.owner)): ref
               == $Unbox(read(previous$Heap, this, _module.Lifetime.owner)): ref));
  ensures {:id "id1727"} _module.Lifetime.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.inv2(previous$Heap, current$Heap, this)
       || (_module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
           || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.elements)): Set, 
            $Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set));
  ensures {:id "id1728"} _module.Lifetime.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.inv2(previous$Heap, current$Heap, this)
       || (_module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
           || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointTo)): Set, 
            $Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set));
  ensures {:id "id1729"} _module.Lifetime.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Lifetime.inv2(previous$Heap, current$Heap, this)
       || (_module.Lifetime.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Lifetime.sequenceInv2(previous$Heap, current$Heap, this)
           || Set#Subset($Unbox(read(previous$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
            $Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set));
  ensures {:id "id1730"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id1731"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id1732"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id1733"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#33: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#33) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#33) } 
                      { _module.Object.universe(o#33) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#33)) } 
                    $Is(o#33, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#33))
                       ==> _module.Object.universe(o#33) == _module.Object.universe(this)
                         && o#33 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#33)
                         && _module.Object.triggerAxioms(current$Heap, o#33)))));
  ensures {:id "id1734"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (forall o#34: ref :: 
            { _module.OwnedObject.lifetime(o#34) } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set, $Box(o#34)) } 
            $Is(o#34, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set, $Box(o#34))
               ==> _module.OwnedObject.lifetime(o#34) == this));
  ensures {:id "id1735"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (forall o#35: ref :: 
            { _module.OwnedObject.alive(current$Heap, o#35) } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set, $Box(o#35)) } 
            $Is(o#35, Tclass._module.OwnedObject())
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.elements)): Set, $Box(o#35))
               ==> _module.OwnedObject.alive(current$Heap, o#35)
                 == _module.Lifetime.alive(current$Heap, this)));
  ensures {:id "id1736"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (_module.Lifetime.alive(current$Heap, this)
             ==> (forall l#11: ref :: 
              { _module.Lifetime.alive(current$Heap, l#11) } 
                { Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#11)) } 
              $Is(l#11, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#11))
                 ==> _module.Lifetime.alive(current$Heap, l#11))));
  ensures {:id "id1737"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (!_module.Lifetime.alive(current$Heap, this)
             ==> (forall l#12: ref :: 
              { _module.Lifetime.alive(current$Heap, l#12) } 
                { Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
                  $Box(l#12)) } 
              $Is(l#12, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
                    $Box(l#12))
                 ==> !_module.Lifetime.alive(current$Heap, l#12))));
  ensures {:id "id1738"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (forall l#13: ref :: 
            { $Unbox(read(current$Heap, l#13, _module.Lifetime.mightPointFrom)): Set } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#13)) } 
            $Is(l#13, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.mightPointTo)): Set, $Box(l#13))
               ==> Set#IsMember($Unbox(read(current$Heap, l#13, _module.Lifetime.mightPointFrom)): Set, 
                $Box(this))));
  ensures {:id "id1739"} _module.Lifetime.inv#canCall(current$Heap, this)
     ==> _module.Lifetime.inv(current$Heap, this)
       || (_module.Lifetime.localInv#canCall(current$Heap, this)
         ==> _module.Lifetime.localInv(current$Heap, this)
           || (forall l#14: ref :: 
            { $Unbox(read(current$Heap, l#14, _module.Lifetime.mightPointTo)): Set } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
                $Box(l#14)) } 
            $Is(l#14, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Lifetime.mightPointFrom)): Set, 
                  $Box(l#14))
               ==> Set#IsMember($Unbox(read(current$Heap, l#14, _module.Lifetime.mightPointTo)): Set, $Box(this))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime.admissibility (correctness)"} Impl$$_module.Lifetime.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.Lifetime.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Lifetime._ctor (well-formedness)"} CheckWellFormed$$_module.Lifetime.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    owner#0: ref
       where $Is(owner#0, Tclass._module.Thread())
         && $IsAlloc(owner#0, Tclass._module.Thread(), $Heap), 
    mightPointTo#0: Set
       where $Is(mightPointTo#0, TSet(Tclass._module.Lifetime()))
         && $IsAlloc(mightPointTo#0, TSet(Tclass._module.Lifetime()), $Heap))
   returns (this: ref);
  free requires 22 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime._ctor (well-formedness)"} CheckWellFormed$$_module.Lifetime.__ctor(universe#0: ref, running#0: ref, owner#0: ref, mightPointTo#0: Set)
   returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var l#0: ref;
  var ##running#0: ref;
  var l#2: ref;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.Lifetime.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || (Set#IsMember(mightPointTo#0, $Box($o))
             && $f == _module.Lifetime.mightPointFrom));
    assert {:id "id1740"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id1741"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id1742"} universe#0 != null;
    assume {:id "id1743"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(owner#0)), 
      $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
    assert {:id "id1744"} universe#0 != null;
    assume {:id "id1745"} Set#Subset(mightPointTo#0, $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
    havoc l#0;
    assume $Is(l#0, Tclass._module.Lifetime())
       && $IsAlloc(l#0, Tclass._module.Lifetime(), $Heap);
    if (*)
    {
        assume {:id "id1746"} Set#IsMember(mightPointTo#0, $Box(l#0));
        assert {:id "id1747"} l#0 != null;
        assume {:id "id1748"} $Unbox(read($Heap, l#0, _module.Lifetime.owner)): ref == running#0;
    }
    else
    {
        assume {:id "id1749"} Set#IsMember(mightPointTo#0, $Box(l#0))
           ==> $Unbox(read($Heap, l#0, _module.Lifetime.owner)): ref == running#0;
    }

    assume {:id "id1750"} (forall l#1: ref :: 
      { $Unbox(read($Heap, l#1, _module.Lifetime.owner)): ref } 
        { Set#IsMember(mightPointTo#0, $Box(l#1)) } 
      $Is(l#1, Tclass._module.Lifetime()) && Set#IsMember(mightPointTo#0, $Box(l#1))
         ==> $Unbox(read($Heap, l#1, _module.Lifetime.owner)): ref == running#0);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || Set#IsMember(mightPointTo#0, $Box($o)));
    assume (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
           || 
          $o == universe#0
           || (Set#IsMember(mightPointTo#0, $Box($o))
             && $f == _module.Lifetime.mightPointFrom));
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.Lifetime())
       && $IsAlloc(this, Tclass._module.Lifetime(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1751"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1752"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1753"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1754"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id1755"} _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id1756"} _module.Object.universe(this) == universe#0;
    assume {:id "id1757"} $Unbox(read($Heap, this, _module.Lifetime.owner)): ref == owner#0;
    assume {:id "id1758"} Set#Equal($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, Set#Empty(): Set);
    assume {:id "id1759"} Set#Equal($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, mightPointTo#0);
    assume {:id "id1760"} Set#Equal($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, 
      Set#Empty(): Set);
    assert {:id "id1761"} universe#0 != null;
    assert {:id "id1762"} universe#0 != null;
    assert {:id "id1763"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id1764"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
    havoc l#2;
    assume $Is(l#2, Tclass._module.Lifetime())
       && $IsAlloc(l#2, Tclass._module.Lifetime(), $Heap);
    if (*)
    {
        assume {:id "id1765"} Set#IsMember(mightPointTo#0, $Box(l#2));
        assert {:id "id1766"} l#2 != null;
        assert {:id "id1767"} l#2 != null;
        assert {:id "id1768"} $IsAlloc(l#2, Tclass._module.Lifetime(), old($Heap));
        assume {:id "id1769"} Set#Equal($Unbox(read($Heap, l#2, _module.Lifetime.mightPointFrom)): Set, 
          Set#Union($Unbox(read(old($Heap), l#2, _module.Lifetime.mightPointFrom)): Set, 
            Set#UnionOne(Set#Empty(): Set, $Box(this))));
    }
    else
    {
        assume {:id "id1770"} Set#IsMember(mightPointTo#0, $Box(l#2))
           ==> Set#Equal($Unbox(read($Heap, l#2, _module.Lifetime.mightPointFrom)): Set, 
            Set#Union($Unbox(read(old($Heap), l#2, _module.Lifetime.mightPointFrom)): Set, 
              Set#UnionOne(Set#Empty(): Set, $Box(this))));
    }

    assume {:id "id1771"} (forall l#3: ref :: 
      { $Unbox(read(old($Heap), l#3, _module.Lifetime.mightPointFrom)): Set } 
        { $Unbox(read($Heap, l#3, _module.Lifetime.mightPointFrom)): Set } 
        { Set#IsMember(mightPointTo#0, $Box(l#3)) } 
      $Is(l#3, Tclass._module.Lifetime()) && Set#IsMember(mightPointTo#0, $Box(l#3))
         ==> Set#Equal($Unbox(read($Heap, l#3, _module.Lifetime.mightPointFrom)): Set, 
          Set#Union($Unbox(read(old($Heap), l#3, _module.Lifetime.mightPointFrom)): Set, 
            Set#UnionOne(Set#Empty(): Set, $Box(this)))));
}



procedure {:verboseName "Lifetime._ctor (call)"} Call$$_module.Lifetime.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    owner#0: ref
       where $Is(owner#0, Tclass._module.Thread())
         && $IsAlloc(owner#0, Tclass._module.Thread(), $Heap), 
    mightPointTo#0: Set
       where $Is(mightPointTo#0, TSet(Tclass._module.Lifetime()))
         && $IsAlloc(mightPointTo#0, TSet(Tclass._module.Lifetime()), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Lifetime())
         && $IsAlloc(this, Tclass._module.Lifetime(), $Heap));
  // user-defined preconditions
  requires {:id "id1772"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id1773"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id1774"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id1775"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(owner#0)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id1776"} Set#Subset(mightPointTo#0, $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id1777"} (forall l#1: ref :: 
    { $Unbox(read($Heap, l#1, _module.Lifetime.owner)): ref } 
      { Set#IsMember(mightPointTo#0, $Box(l#1)) } 
    $Is(l#1, Tclass._module.Lifetime()) && Set#IsMember(mightPointTo#0, $Box(l#1))
       ==> $Unbox(read($Heap, l#1, _module.Lifetime.owner)): ref == running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  free ensures {:id "id1778"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1779"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && _module.Universe.globalInv(old($Heap), universe#0)
     && (forall o#11: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#11) } 
        { _module.Object.inv($Heap, o#11) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11))
         ==> ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv($Heap, o#11))
           && ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv2(old($Heap), $Heap, o#11)))
     && (forall o#12: ref :: 
      { _module.Object.inv($Heap, o#12) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
      $Is(o#12, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
           && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12))
         ==> _module.Object.inv($Heap, o#12));
  free ensures true;
  ensures {:id "id1780"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1781"} $Unbox(read($Heap, this, _module.Lifetime.owner)): ref == owner#0;
  free ensures true;
  ensures {:id "id1782"} Set#Equal($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, Set#Empty(): Set);
  ensures {:id "id1783"} Set#Equal($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, mightPointTo#0);
  ensures {:id "id1784"} Set#Equal($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, 
    Set#Empty(): Set);
  free ensures true;
  ensures {:id "id1785"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  free ensures true;
  ensures {:id "id1786"} (forall l#3: ref :: 
    { $Unbox(read(old($Heap), l#3, _module.Lifetime.mightPointFrom)): Set } 
      { $Unbox(read($Heap, l#3, _module.Lifetime.mightPointFrom)): Set } 
      { Set#IsMember(mightPointTo#0, $Box(l#3)) } 
    $Is(l#3, Tclass._module.Lifetime()) && Set#IsMember(mightPointTo#0, $Box(l#3))
       ==> Set#Equal($Unbox(read($Heap, l#3, _module.Lifetime.mightPointFrom)): Set, 
        Set#Union($Unbox(read(old($Heap), l#3, _module.Lifetime.mightPointFrom)): Set, 
          Set#UnionOne(Set#Empty(): Set, $Box(this)))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember(mightPointTo#0, $Box($o)));
  // frame condition: field granularity
  free ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || 
        $o == universe#0
         || (Set#IsMember(mightPointTo#0, $Box($o))
           && $f == _module.Lifetime.mightPointFrom));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Lifetime._ctor (correctness)"} Impl$$_module.Lifetime.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    owner#0: ref
       where $Is(owner#0, Tclass._module.Thread())
         && $IsAlloc(owner#0, Tclass._module.Thread(), $Heap), 
    mightPointTo#0: Set
       where $Is(mightPointTo#0, TSet(Tclass._module.Lifetime()))
         && $IsAlloc(mightPointTo#0, TSet(Tclass._module.Lifetime()), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 22 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1787"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#14: ref :: 
      { _module.Object.inv($Heap, o#14) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
      $Is(o#14, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
         ==> _module.Object.inv($Heap, o#14));
  requires {:id "id1788"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(owner#0)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id1789"} Set#Subset(mightPointTo#0, $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id1790"} (forall l#1: ref :: 
    { $Unbox(read($Heap, l#1, _module.Lifetime.owner)): ref } 
      { Set#IsMember(mightPointTo#0, $Box(l#1)) } 
    $Is(l#1, Tclass._module.Lifetime()) && Set#IsMember(mightPointTo#0, $Box(l#1))
       ==> $Unbox(read($Heap, l#1, _module.Lifetime.owner)): ref == running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  ensures {:id "id1791"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id1792"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id1793"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.triggerAxioms($Heap, o#15) } 
                  { _module.Object.baseFieldsInv($Heap, o#15) } 
                  { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                     && o#15 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#15)
                     && _module.Object.triggerAxioms($Heap, o#15))));
  ensures {:id "id1794"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#16: ref :: 
            { _module.Object.inv($Heap, o#16) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> _module.Object.inv($Heap, o#16)));
  ensures {:id "id1795"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true))));
  ensures {:id "id1796"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
                   || (forall o#17: ref :: 
                    { _module.Object.triggerAxioms(old($Heap), o#17) } 
                      { _module.Object.baseFieldsInv(old($Heap), o#17) } 
                      { _module.Object.universe(o#17) } 
                      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
                    $Is(o#17, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
                       ==> _module.Object.universe(o#17) == universe#0
                         && o#17 != universe#0
                         && _module.Object.baseFieldsInv(old($Heap), o#17)
                         && _module.Object.triggerAxioms(old($Heap), o#17)))));
  ensures {:id "id1797"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true))));
  ensures {:id "id1798"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0)
                   || (forall o#18: ref :: 
                    { _module.Object.triggerAxioms($Heap, o#18) } 
                      { _module.Object.baseFieldsInv($Heap, o#18) } 
                      { _module.Object.universe(o#18) } 
                      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
                    $Is(o#18, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
                       ==> _module.Object.universe(o#18) == universe#0
                         && o#18 != universe#0
                         && _module.Object.baseFieldsInv($Heap, o#18)
                         && _module.Object.triggerAxioms($Heap, o#18)))));
  ensures {:id "id1799"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
                $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)));
  ensures {:id "id1800"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (forall o#19: ref :: 
                { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                $Is(o#19, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19))
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19))
                   ==> !$IsAllocBox($Box(o#19), Tclass._module.Object(), old($Heap)))));
  ensures {:id "id1801"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set));
  ensures {:id "id1802"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#20) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
            $Is(o#20, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#20 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#20)));
  ensures {:id "id1803"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21))
                 && $Is($Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#21, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#21, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  ensures {:id "id1804"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall l#5: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#5) } 
              { $Unbox(read(old($Heap), l#5, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#5)) } 
            $Is(l#5, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#5))
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), l#5, _module.Lifetime.owner))
                 && $IsAllocBox(read(old($Heap), l#5, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  old($Heap))
               ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#5)));
  ensures {:id "id1805"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id1806"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#22: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#22) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#22) } 
                  { _module.Object.universe(o#22) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22)) } 
                $Is(o#22, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22))
                   ==> _module.Object.universe(o#22) == universe#0
                     && o#22 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#22)
                     && _module.Object.triggerAxioms(old($Heap), o#22))));
  ensures {:id "id1807"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (forall o#23: ref :: 
            { _module.Object.inv(old($Heap), o#23) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
            $Is(o#23, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23))
               ==> _module.Object.inv(old($Heap), o#23)));
  ensures {:id "id1808"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#24: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#24) } 
          { _module.Object.inv($Heap, o#24) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24)) } 
        $Is(o#24, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24))
           ==> ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv($Heap, o#24))
             && ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv2(old($Heap), $Heap, o#24)));
  ensures {:id "id1809"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#25: ref :: 
        { _module.Object.inv($Heap, o#25) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
        $Is(o#25, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25))
             && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25))
           ==> _module.Object.inv($Heap, o#25));
  free ensures true;
  ensures {:id "id1810"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1811"} $Unbox(read($Heap, this, _module.Lifetime.owner)): ref == owner#0;
  free ensures true;
  ensures {:id "id1812"} Set#Equal($Unbox(read($Heap, this, _module.Lifetime.elements)): Set, Set#Empty(): Set);
  ensures {:id "id1813"} Set#Equal($Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set, mightPointTo#0);
  ensures {:id "id1814"} Set#Equal($Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set, 
    Set#Empty(): Set);
  free ensures true;
  ensures {:id "id1815"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  free ensures true;
  ensures {:id "id1816"} (forall l#3: ref :: 
    { $Unbox(read(old($Heap), l#3, _module.Lifetime.mightPointFrom)): Set } 
      { $Unbox(read($Heap, l#3, _module.Lifetime.mightPointFrom)): Set } 
      { Set#IsMember(mightPointTo#0, $Box(l#3)) } 
    $Is(l#3, Tclass._module.Lifetime()) && Set#IsMember(mightPointTo#0, $Box(l#3))
       ==> Set#Equal($Unbox(read($Heap, l#3, _module.Lifetime.mightPointFrom)): Set, 
        Set#Union($Unbox(read(old($Heap), l#3, _module.Lifetime.mightPointFrom)): Set, 
          Set#UnionOne(Set#Empty(): Set, $Box(this)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember(mightPointTo#0, $Box($o)));
  // frame condition: field granularity
  free ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || 
        $o == universe#0
         || (Set#IsMember(mightPointTo#0, $Box($o))
           && $f == _module.Lifetime.mightPointFrom));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Lifetime._ctor (correctness)"} Impl$$_module.Lifetime.__ctor(universe#0: ref, running#0: ref, owner#0: ref, mightPointTo#0: Set)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.universe: ref;
  var this.owner: ref;
  var this.elements: Set;
  var this.mightPointTo: Set;
  var this.mightPointFrom: Set;
  var defass#this.universe: bool;
  var l#0_0: ref;
  var l#0_1: ref;
  var $prevHeap: Heap;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.Lifetime.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || (Set#IsMember(mightPointTo#0, $Box($o))
             && $f == _module.Lifetime.mightPointFrom));
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(618,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(619,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(620,16)
    assume true;
    assume true;
    this.owner := owner#0;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(621,19)
    assume true;
    assume true;
    this.elements := Lit(Set#Empty(): Set);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(622,23)
    assume true;
    assume true;
    this.mightPointTo := mightPointTo#0;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(623,25)
    assume true;
    assume true;
    this.mightPointFrom := Lit(Set#Empty(): Set);
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(618,3)
    assert {:id "id1822"} defass#this.universe;
    assume this != null && $Is(this, Tclass._module.Lifetime?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.Lifetime.owner)): ref == this.owner;
    assume $Unbox(read($Heap, this, _module.Lifetime.elements)): Set == this.elements;
    assume $Unbox(read($Heap, this, _module.Lifetime.mightPointTo)): Set
       == this.mightPointTo;
    assume $Unbox(read($Heap, this, _module.Lifetime.mightPointFrom)): Set
       == this.mightPointFrom;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(618,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(625,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1823"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1824"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- forall statement (assign) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(626,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc l#0_0;
        assume $Is(l#0_0, Tclass._module.Lifetime())
           && $IsAlloc(l#0_0, Tclass._module.Lifetime(), $Heap);
        assume true;
        assume Set#IsMember(mightPointTo#0, $Box(l#0_0));
        assert {:id "id1825"} {:subsumption 0} l#0_0 != null;
        assume true;
        assert {:id "id1826"} $_ModifiesFrame[l#0_0, _module.Lifetime.mightPointFrom];
        assert {:id "id1827"} {:subsumption 0} l#0_0 != null;
        assume true;
        havoc l#0_1;
        assume $Is(l#0_1, Tclass._module.Lifetime())
           && $IsAlloc(l#0_1, Tclass._module.Lifetime(), $Heap);
        assume Set#IsMember(mightPointTo#0, $Box(l#0_1));
        assume l#0_0 != l#0_1;
        assert {:id "id1828"} l#0_0 != l#0_1
           || _module.Lifetime.mightPointFrom != _module.Lifetime.mightPointFrom
           || Set#Union($Unbox(read($Heap, l#0_0, _module.Lifetime.mightPointFrom)): Set, 
              Set#UnionOne(Set#Empty(): Set, $Box(this)))
             == Set#Union($Unbox(read($Heap, l#0_1, _module.Lifetime.mightPointFrom)): Set, 
              Set#UnionOne(Set#Empty(): Set, $Box(this)));
        assume false;
    }
    else
    {
        $prevHeap := $Heap;
        havoc $Heap;
        assume $HeapSucc($prevHeap, $Heap);
        assume (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          read($Heap, $o, $f) == read($prevHeap, $o, $f)
             || (exists l#0_2: ref :: 
              $Is(l#0_2, Tclass._module.Lifetime())
                 && Set#IsMember(mightPointTo#0, $Box(l#0_2))
                 && $o == l#0_2
                 && $f == _module.Lifetime.mightPointFrom));
        assume (forall l#inv#0_0: ref :: 
          { read($Heap, l#inv#0_0, _module.Lifetime.mightPointFrom) } 
          $Is(l#inv#0_0, Tclass._module.Lifetime())
               && 
              l#inv#0_0 != null
               && Set#IsMember(mightPointTo#0, $Box(l#inv#0_0))
             ==> read($Heap, l#inv#0_0, _module.Lifetime.mightPointFrom)
               == $Box(Set#Union($Unbox(read($prevHeap, l#inv#0_0, _module.Lifetime.mightPointFrom)): Set, 
                  Set#UnionOne(Set#Empty(): Set, $Box(this)))));
    }

    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(629,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1829"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1830"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1831"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1832"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.Lifetime
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Lifetime()) } 
    { $Is(c#0, Tclass._module.Lifetime?()) } 
  $Is(c#0, Tclass._module.Lifetime())
     <==> $Is(c#0, Tclass._module.Lifetime?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Lifetime
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Lifetime(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Lifetime?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Lifetime(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Lifetime?(), $h));

const unique class._module.OwnedU32?: ClassName;

function Tclass._module.OwnedU32?() : Ty
uses {
// Tclass._module.OwnedU32? Tag
axiom Tag(Tclass._module.OwnedU32?()) == Tagclass._module.OwnedU32?
   && TagFamily(Tclass._module.OwnedU32?()) == tytagFamily$OwnedU32;
axiom implements$_module.OwnedObject(Tclass._module.OwnedU32?());
}

const unique Tagclass._module.OwnedU32?: TyTag;

// Box/unbox axiom for Tclass._module.OwnedU32?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedU32?()) } 
  $IsBox(bx, Tclass._module.OwnedU32?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.OwnedU32?()));

// $Is axiom for class OwnedU32
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedU32?()) } 
  $Is($o, Tclass._module.OwnedU32?())
     <==> $o == null || dtype($o) == Tclass._module.OwnedU32?());

// $IsAlloc axiom for class OwnedU32
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedU32?(), $h) } 
  $IsAlloc($o, Tclass._module.OwnedU32?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.OwnedU32.value: Field
uses {
axiom FDim(_module.OwnedU32.value) == 0
   && FieldOfDecl(class._module.OwnedU32?, field$value) == _module.OwnedU32.value
   && !$IsGhostField(_module.OwnedU32.value);
}

// OwnedU32.value: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedU32.value)): int } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.OwnedU32?()
     ==> $Is($Unbox(read($h, $o, _module.OwnedU32.value)): int, TInt));

// OwnedU32.value: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedU32.value)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.OwnedU32?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.OwnedU32.value)): int, TInt, $h));

// function declaration for _module.OwnedU32.volatileOwns
function _module.OwnedU32.volatileOwns(this: ref) : bool
uses {
// definition axiom for _module.OwnedU32.volatileOwns (revealed)
axiom {:id "id1833"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedU32.volatileOwns(this) } 
    _module.OwnedU32.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedU32.volatileOwns(this) == Lit(false));
// definition axiom for _module.OwnedU32.volatileOwns for all literals (revealed)
axiom {:id "id1834"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.OwnedU32.volatileOwns(Lit(this)) } 
    _module.OwnedU32.volatileOwns#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedU32.volatileOwns(Lit(this)) == Lit(false));
}

function _module.OwnedU32.volatileOwns#canCall(this: ref) : bool;

function Tclass._module.OwnedU32() : Ty
uses {
// Tclass._module.OwnedU32 Tag
axiom Tag(Tclass._module.OwnedU32()) == Tagclass._module.OwnedU32
   && TagFamily(Tclass._module.OwnedU32()) == tytagFamily$OwnedU32;
}

const unique Tagclass._module.OwnedU32: TyTag;

// Box/unbox axiom for Tclass._module.OwnedU32
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedU32()) } 
  $IsBox(bx, Tclass._module.OwnedU32())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.OwnedU32()));

function _module.OwnedU32.volatileOwns#requires(ref) : bool;

// #requires axiom for _module.OwnedU32.volatileOwns
axiom (forall this: ref :: 
  { _module.OwnedU32.volatileOwns#requires(this) } 
  this != null && $Is(this, Tclass._module.OwnedU32())
     ==> _module.OwnedU32.volatileOwns#requires(this) == true);

// override axiom for _module.OwnedObject.volatileOwns in class _module.OwnedU32
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.volatileOwns(this), $Is(this, Tclass._module.OwnedU32()) } 
      { _module.OwnedObject.volatileOwns(this), _module.OwnedU32.volatileOwns(this) } 
    _module.OwnedU32.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.volatileOwns(this) == _module.OwnedU32.volatileOwns(this));

procedure {:verboseName "OwnedU32.volatileOwns (well-formedness)"} CheckWellformed$$_module.OwnedU32.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedU32.volatileOwns (override check)"} OverrideCheck$$_module.OwnedU32.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.volatileOwns (override check)"} OverrideCheck$$_module.OwnedU32.volatileOwns(this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1836"} true;
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1837"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.OwnedU32.objectUserFields
function _module.OwnedU32.objectUserFields($heap: Heap, this: ref) : Set
uses {
// consequence axiom for _module.OwnedU32.objectUserFields
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedU32.objectUserFields($Heap, this) } 
    _module.OwnedU32.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> $Is(_module.OwnedU32.objectUserFields($Heap, this), TSet(Tclass._module.Object())));
// alloc consequence axiom for _module.OwnedU32.objectUserFields
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { $IsAlloc(_module.OwnedU32.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap) } 
    _module.OwnedU32.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && this != null
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> $IsAlloc(_module.OwnedU32.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap));
// definition axiom for _module.OwnedU32.objectUserFields (revealed)
axiom {:id "id1838"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedU32.objectUserFields($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> _module.OwnedU32.objectUserFields($Heap, this) == Lit(Set#Empty(): Set));
}

function _module.OwnedU32.objectUserFields#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.objectUserFields
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.objectUserFields($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedU32())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.objectUserFields($h0, this)
       == _module.OwnedU32.objectUserFields($h1, this));

function _module.OwnedU32.objectUserFields#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.objectUserFields
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedU32.objectUserFields#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap)
     ==> _module.OwnedU32.objectUserFields#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.objectUserFields in class _module.OwnedU32
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.objectUserFields($Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.objectUserFields($Heap, this), _module.OwnedU32.objectUserFields($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.objectUserFields($Heap, this)
         == _module.OwnedU32.objectUserFields($Heap, this));

procedure {:verboseName "OwnedU32.objectUserFields (well-formedness)"} CheckWellformed$$_module.OwnedU32.objectUserFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedU32.objectUserFields (override check)"} OverrideCheck$$_module.OwnedU32.objectUserFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.objectUserFields (override check)"} OverrideCheck$$_module.OwnedU32.objectUserFields(this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1840"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id1841"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.OwnedU32.unchangedNonvolatileUserFields
function _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedU32.unchangedNonvolatileUserFields (revealed)
axiom {:id "id1842"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap))
       ==> _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == (true
           && $Unbox(read($prevHeap, this, _module.OwnedU32.value)): int
             == $Unbox(read($Heap, this, _module.OwnedU32.value)): int));
}

function _module.OwnedU32.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedU32())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.OwnedU32.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedU32.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap)
     ==> _module.OwnedU32.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.OwnedU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "OwnedU32.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.OwnedU32.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.OwnedU32.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            assert {:id "id1843"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
            b$reqreads#0 := $_ReadsFrame[this, _module.OwnedU32.value];
        }

        assume {:id "id1844"} _module.OwnedU32.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
           == (true
             && $Unbox(read(old($Heap), this, _module.OwnedU32.value)): int
               == $Unbox(read($Heap, this, _module.OwnedU32.value)): int);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedU32.unchangedNonvolatileUserFields(old($Heap), $Heap, this), TBool);
        assert {:id "id1845"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedU32.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.OwnedU32.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.OwnedU32.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1846"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id1847"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.OwnedU32.localUserInv
function _module.OwnedU32.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedU32.localUserInv (revealed)
axiom {:id "id1848"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedU32.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> _module.OwnedU32.localUserInv($Heap, this) == Lit(true));
}

function _module.OwnedU32.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.localUserInv($h0, this)
       == _module.OwnedU32.localUserInv($h1, this));

function _module.OwnedU32.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedU32.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap)
     ==> _module.OwnedU32.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.OwnedU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.OwnedU32.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.OwnedU32.localUserInv($Heap, this));

procedure {:verboseName "OwnedU32.localUserInv (well-formedness)"} CheckWellformed$$_module.OwnedU32.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedU32.localUserInv (override check)"} OverrideCheck$$_module.OwnedU32.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.localUserInv (override check)"} OverrideCheck$$_module.OwnedU32.localUserInv(this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1850"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1851"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedU32.userInv
function _module.OwnedU32.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedU32.userInv
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedU32.userInv($Heap, this) } 
    _module.OwnedU32.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> 
      _module.OwnedU32.userInv($Heap, this)
       ==> _module.OwnedU32.localUserInv($Heap, this));
// definition axiom for _module.OwnedU32.userInv (revealed)
axiom {:id "id1852"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedU32.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> _module.OwnedU32.localUserInv#canCall($Heap, this)
         && _module.OwnedU32.userInv($Heap, this)
           == _module.OwnedU32.localUserInv($Heap, this));
}

function _module.OwnedU32.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.userInv($h0, this) == _module.OwnedU32.userInv($h1, this));

function _module.OwnedU32.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedU32.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap)
     ==> _module.OwnedU32.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.OwnedU32
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.OwnedU32.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.userInv($Heap, this)
         == _module.OwnedU32.userInv($Heap, this));

procedure {:verboseName "OwnedU32.userInv (well-formedness)"} CheckWellformed$$_module.OwnedU32.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1853"} _module.OwnedU32.userInv($Heap, this)
     ==> 
    _module.OwnedU32.localUserInv#canCall($Heap, this)
     ==> _module.OwnedU32.localUserInv($Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.userInv (well-formedness)"} CheckWellformed$$_module.OwnedU32.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
            assert {:id "id1854"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedU32.userInv#canCall($Heap, this);
            assume {:id "id1855"} _module.OwnedU32.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
            assume _module.OwnedU32.localUserInv#canCall($Heap, this);
            assume {:id "id1856"} _module.OwnedU32.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id1857"} _module.OwnedU32.userInv($Heap, this)
               ==> _module.OwnedU32.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedU32.localUserInv#canCall($Heap, this);
        assume {:id "id1858"} _module.OwnedU32.userInv($Heap, this)
           == _module.OwnedU32.localUserInv($Heap, this);
        assume _module.OwnedU32.localUserInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedU32.userInv($Heap, this), TBool);
        assert {:id "id1859"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedU32.userInv (override check)"} OverrideCheck$$_module.OwnedU32.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.userInv (override check)"} OverrideCheck$$_module.OwnedU32.userInv(this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1860"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1861"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1862"} _module.OwnedU32.userInv($Heap, this)
       ==> _module.OwnedU32.localUserInv($Heap, this);
    assert {:id "id1863"} _module.OwnedU32.userInv($Heap, this)
       ==> 
      _module.OwnedU32.localUserInv#canCall($Heap, this)
       ==> _module.OwnedU32.localUserInv($Heap, this) || Lit(true);
}



// function declaration for _module.OwnedU32.localUserInv2
function _module.OwnedU32.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedU32.localUserInv2 (revealed)
axiom {:id "id1864"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedU32.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap))
       ==> _module.OwnedU32.localUserInv2($prevHeap, $Heap, this) == Lit(true));
}

function _module.OwnedU32.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.localUserInv2($prevHeap, $h0, this)
       == _module.OwnedU32.localUserInv2($prevHeap, $h1, this));

function _module.OwnedU32.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedU32.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap)
     ==> _module.OwnedU32.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.OwnedU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.OwnedU32.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.OwnedU32.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedU32.localUserInv2 (well-formedness)"} CheckWellformed$$_module.OwnedU32.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "OwnedU32.localUserInv2 (override check)"} OverrideCheck$$_module.OwnedU32.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.localUserInv2 (override check)"} OverrideCheck$$_module.OwnedU32.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1866"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1867"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedU32.userInv2
function _module.OwnedU32.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedU32.userInv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedU32.userInv2($prevHeap, $Heap, this) } 
    _module.OwnedU32.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap))
       ==> 
      _module.OwnedU32.userInv2($prevHeap, $Heap, this)
       ==> _module.OwnedU32.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.OwnedU32.userInv2 (revealed)
axiom {:id "id1868"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedU32.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap))
       ==> _module.OwnedU32.localUserInv2#canCall($prevHeap, $Heap, this)
         && _module.OwnedU32.userInv2($prevHeap, $Heap, this)
           == _module.OwnedU32.localUserInv2($prevHeap, $Heap, this));
}

function _module.OwnedU32.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.userInv2($prevHeap, $h0, this)
       == _module.OwnedU32.userInv2($prevHeap, $h1, this));

function _module.OwnedU32.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedU32.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap)
     ==> _module.OwnedU32.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.OwnedU32
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.OwnedU32.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.OwnedU32.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedU32.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedU32.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1869"} _module.OwnedU32.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedU32.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedU32.localUserInv2(previous$Heap, current$Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedU32.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
            assert {:id "id1870"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
            assert {:id "id1871"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedU32.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1872"} _module.OwnedU32.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
            assert {:id "id1873"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
            assume _module.OwnedU32.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1874"} _module.OwnedU32.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1875"} _module.OwnedU32.userInv2(old($Heap), $Heap, this)
               ==> _module.OwnedU32.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
        assert {:id "id1876"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedU32.localUserInv2#canCall(old($Heap), $Heap, this);
        assume {:id "id1877"} _module.OwnedU32.userInv2(old($Heap), $Heap, this)
           == _module.OwnedU32.localUserInv2(old($Heap), $Heap, this);
        assume _module.OwnedU32.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedU32.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1878"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedU32.userInv2 (override check)"} OverrideCheck$$_module.OwnedU32.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.userInv2 (override check)"} OverrideCheck$$_module.OwnedU32.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1879"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1880"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1881"} _module.OwnedU32.userInv2(old($Heap), $Heap, this)
       ==> _module.OwnedU32.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id1882"} _module.OwnedU32.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedU32.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedU32.localUserInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "OwnedU32.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.OwnedU32.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id1883"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assert {:id "id1884"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1885"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1886"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1887"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "OwnedU32.sequenceAdmissibility (override check)"} OverrideCheck$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.sequenceAdmissibility (override check)"} OverrideCheck$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id1888"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id1889"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1890"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1891"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1892"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id1893"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1894"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id1895"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id1896"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id1897"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || Set#Subset(running#0, 
              $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id1898"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id1899"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object?(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id1900"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall l#0: ref :: 
              { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#0)) } 
              $Is(l#0, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#0))
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), l#0, _module.Lifetime.owner))
                   && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                    Tclass._module.Thread?(), 
                    old($Heap))
                 ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0)));
    assert {:id "id1901"} Set#Subset(running#0, running#0);
    assert {:id "id1902"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1903"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1904"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id1905"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "OwnedU32.sequenceAdmissibility (call)"} Call$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id1906"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1907"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1908"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1909"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id1910"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1911"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id1912"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id1913"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id1914"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || Set#Subset(running#0, 
            $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id1915"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id1916"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id1917"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall l#1: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
              { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(l#1)) } 
            $Is(l#1, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#1))
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, l#1, _module.Lifetime.owner))
                 && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  previous$Heap)
               ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id1918"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && 
    ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
       ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null)
     && $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       ==> true
         && _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this))
     && ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
        Tclass._module.OwnedObject())
       ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
        !_module.OwnedObject.volatileOwns(oldOwner#0)
             && $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
           ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OwnedU32.sequenceAdmissibility (correctness)"} Impl$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1919"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id1920"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
         ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null);
  ensures {:id "id1921"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id1922"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id1923"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id1924"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id1925"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#1)
               && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.sequenceAdmissibility (correctness)"} Impl$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.OwnedU32.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "OwnedU32.admissibility (well-formedness)"} CheckWellFormed$$_module.OwnedU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.admissibility (well-formedness)"} CheckWellFormed$$_module.OwnedU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.OwnedU32.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1926"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assert {:id "id1927"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1928"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1929"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1930"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id1931"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "OwnedU32.admissibility (override check)"} OverrideCheck$$_module.OwnedU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.admissibility (override check)"} OverrideCheck$$_module.OwnedU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id1932"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id1933"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1934"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1935"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1936"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id1937"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1938"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id1939"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id1940"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id1941"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id1942"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id1943"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object?(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id1944"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall l#0: ref :: 
                  { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                    { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#0)) } 
                  $Is(l#0, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(l#0))
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), l#0, _module.Lifetime.owner))
                       && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                        Tclass._module.Thread?(), 
                        old($Heap))
                     ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0))));
    assert {:id "id1945"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1946"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id1947"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id1948"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id1949"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id1950"} running#0 != null ==> running#0 != null;
    assert {:id "id1951"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1952"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1953"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id1954"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id1955"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "OwnedU32.admissibility (call)"} Call$$_module.OwnedU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id1956"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1957"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1958"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1959"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#9: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#9) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#9) } 
                          { _module.Object.universe(o#9) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9)) } 
                        $Is(o#9, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#9))
                           ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                             && o#9 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#9)
                             && _module.Object.triggerAxioms(previous$Heap, o#9))))));
  requires {:id "id1960"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1961"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#10: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#10) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#10) } 
                          { _module.Object.universe(o#10) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#10)) } 
                        $Is(o#10, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#10))
                           ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                             && o#10 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#10)
                             && _module.Object.triggerAxioms(current$Heap, o#10))))));
  requires {:id "id1962"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id1963"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#11: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                    $Is(o#11, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                       ==> !$IsAllocBox($Box(o#11), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id1964"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id1965"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#12: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#12
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12))));
  requires {:id "id1966"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#13: ref :: 
                { $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                     && $Is($Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#13, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#13, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id1967"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall l#1: ref :: 
                { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
                  { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#1)) } 
                $Is(l#1, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#1))
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, l#1, _module.Lifetime.owner))
                     && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                      Tclass._module.Thread?(), 
                      previous$Heap)
                   ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1))));
  requires {:id "id1968"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1969"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#14: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#14) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#14) } 
                      { _module.Object.universe(o#14) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#14)) } 
                    $Is(o#14, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#14))
                       ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                         && o#14 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#14)
                         && _module.Object.triggerAxioms(previous$Heap, o#14)))));
  requires {:id "id1970"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.inv(previous$Heap, o#15) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.inv(previous$Heap, o#15))));
  requires {:id "id1971"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#16: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#16) } 
              { _module.Object.inv(current$Heap, o#16) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#16))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#16))));
  requires {:id "id1972"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#17: ref :: 
            { _module.Object.inv(current$Heap, o#17) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
               ==> _module.Object.inv(current$Heap, o#17)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id1973"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.OwnedObject.userInv2(previous$Heap, current$Heap, this))
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
             && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
              $IsAllocBox($Box(currOwner#0), Tclass._module.Object?(), previous$Heap)
                 ==> _module.Object.localInv2(previous$Heap, 
                  current$Heap, 
                  $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref))));
  free ensures {:id "id1974"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.OwnedObject.userInv(current$Heap, this));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OwnedU32.admissibility (correctness)"} Impl$$_module.OwnedU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1975"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id1976"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id1977"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this)));
  ensures {:id "id1978"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
             ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null));
  ensures {:id "id1979"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id1980"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> Lit(true)));
  ensures {:id "id1981"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1982"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id1983"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              !_module.OwnedObject.volatileOwns(oldOwner#1)
                   && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id1984"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.userInv2(previous$Heap, current$Heap, this));
  ensures {:id "id1985"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1986"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1987"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> 
        $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1988"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> 
        $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object?(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id1989"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id1990"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id1991"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id1992"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#28: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#28) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#28) } 
                      { _module.Object.universe(o#28) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#28)) } 
                    $Is(o#28, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#28))
                       ==> _module.Object.universe(o#28) == _module.Object.universe(this)
                         && o#28 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#28)
                         && _module.Object.triggerAxioms(current$Heap, o#28)))));
  ensures {:id "id1993"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
            $Box(this)));
  ensures {:id "id1994"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Lifetime.alive(current$Heap, _module.OwnedObject.lifetime(this))
             ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null));
  ensures {:id "id1995"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.localUserInv(current$Heap, this)));
  ensures {:id "id1996"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.userInv(current$Heap, this));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.admissibility (correctness)"} Impl$$_module.OwnedU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.OwnedU32.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "OwnedU32._ctor (well-formedness)"} CheckWellFormed$$_module.OwnedU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    value#0: int)
   returns (this: ref);
  free requires 23 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32._ctor (well-formedness)"} CheckWellFormed$$_module.OwnedU32.__ctor(universe#0: ref, running#0: ref, value#0: int) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.OwnedU32.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    assert {:id "id1997"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id1998"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id1999"} universe#0 != null;
    assume {:id "id2000"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2001"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id2002"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##running#0 := Set#UnionOne(Set#Empty(): Set, $Box(running#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id2003"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id2004"} $IsAlloc(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
      TSet(Tclass._module.Thread()), 
      old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
    assume {:id "id2005"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
    assume {:id "id2006"} _module.Object.universe(this) == universe#0;
    assume {:id "id2007"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id2008"} $Unbox(read($Heap, this, _module.OwnedU32.value)): int == value#0;
    assert {:id "id2009"} _module.OwnedObject.lifetime(this) != null;
    assume {:id "id2010"} $Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.owner)): ref
       == running#0;
    assert {:id "id2011"} universe#0 != null;
    assert {:id "id2012"} universe#0 != null;
    assert {:id "id2013"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id2014"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
          $Box(_module.OwnedObject.lifetime(this)))));
    assert {:id "id2015"} _module.OwnedObject.lifetime(this) != null;
    assume {:id "id2016"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointFrom)): Set, 
      Set#Empty(): Set);
    assert {:id "id2017"} _module.OwnedObject.lifetime(this) != null;
    assume {:id "id2018"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
}



procedure {:verboseName "OwnedU32._ctor (call)"} Call$$_module.OwnedU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    value#0: int)
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  // user-defined preconditions
  requires {:id "id2019"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id2020"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id2021"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id2022"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0))));
  free ensures {:id "id2023"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id2024"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
     && Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
      $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set)
     && (forall o#7: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#7) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#7)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7)) } 
      $Is(o#7, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#7))
         ==> (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           || _module.Object.sequenceInv2(old($Heap), $Heap, o#7))
     && (forall o#8: ref :: 
      { $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8))
           && $Is($Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            read(old($Heap), o#8, _module.OwnedObject.owner))
           && $IsAllocBox(read(old($Heap), o#8, _module.OwnedObject.owner), 
            Tclass._module.Object?(), 
            old($Heap))
         ==> $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall l#0: ref :: 
      { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
        { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#0)) } 
      $Is(l#0, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#0))
         ==> 
        !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            read(old($Heap), l#0, _module.Lifetime.owner))
           && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
            Tclass._module.Thread?(), 
            old($Heap))
         ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0));
  free ensures true;
  ensures {:id "id2025"} _module.Object.universe(this) == universe#0;
  ensures {:id "id2026"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id2027"} $Unbox(read($Heap, this, _module.OwnedU32.value)): int == value#0;
  ensures {:id "id2028"} $Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.owner)): ref
     == running#0;
  free ensures true;
  ensures {:id "id2029"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
        $Box(_module.OwnedObject.lifetime(this)))));
  free ensures true;
  ensures {:id "id2030"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointFrom)): Set, 
    Set#Empty(): Set);
  ensures {:id "id2031"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
    Set#UnionOne(Set#Empty(): Set, $Box(this)));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "OwnedU32._ctor (correctness)"} Impl$$_module.OwnedU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    value#0: int)
   returns (this: ref, $_reverifyPost: bool);
  free requires 23 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2032"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#10: ref :: 
      { _module.Object.inv($Heap, o#10) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10)) } 
      $Is(o#10, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10))
         ==> _module.Object.inv($Heap, o#10));
  requires {:id "id2033"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0))));
  ensures {:id "id2034"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id2035"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id2036"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.triggerAxioms($Heap, o#11) } 
                  { _module.Object.baseFieldsInv($Heap, o#11) } 
                  { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#11)
                     && _module.Object.triggerAxioms($Heap, o#11))));
  ensures {:id "id2037"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id2038"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id2039"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#13: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#13) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#13) } 
                  { _module.Object.universe(o#13) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
                $Is(o#13, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
                   ==> _module.Object.universe(o#13) == universe#0
                     && o#13 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#13)
                     && _module.Object.triggerAxioms(old($Heap), o#13))));
  ensures {:id "id2040"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true)));
  ensures {:id "id2041"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0)
               || (forall o#14: ref :: 
                { _module.Object.triggerAxioms($Heap, o#14) } 
                  { _module.Object.baseFieldsInv($Heap, o#14) } 
                  { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
                   ==> _module.Object.universe(o#14) == universe#0
                     && o#14 != universe#0
                     && _module.Object.baseFieldsInv($Heap, o#14)
                     && _module.Object.triggerAxioms($Heap, o#14))));
  ensures {:id "id2042"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
            $Unbox(read($Heap, universe#0, _module.Universe.content)): Set));
  ensures {:id "id2043"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (forall o#15: ref :: 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
            $Is(o#15, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15))
               ==> !$IsAllocBox($Box(o#15), Tclass._module.Object(), old($Heap))));
  ensures {:id "id2044"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
        $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set);
  ensures {:id "id2045"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#16: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#16) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
        $Is(o#16, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#16))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16))
           ==> (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#16 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.sequenceInv2(old($Heap), $Heap, o#16));
  ensures {:id "id2046"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#17: ref :: 
        { $Unbox(read($Heap, o#17, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#17, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#17, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
        $Is(o#17, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
             && $Is($Unbox(read(old($Heap), o#17, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
              read(old($Heap), o#17, _module.OwnedObject.owner))
             && $IsAllocBox(read(old($Heap), o#17, _module.OwnedObject.owner), 
              Tclass._module.Object?(), 
              old($Heap))
           ==> $Unbox(read(old($Heap), o#17, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, o#17, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id2047"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall l#1: ref :: 
        { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1) } 
          { $Unbox(read(old($Heap), l#1, _module.Lifetime.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1)) } 
        $Is(l#1, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1))
           ==> 
          !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
              read(old($Heap), l#1, _module.Lifetime.owner))
             && $IsAllocBox(read(old($Heap), l#1, _module.Lifetime.owner), 
              Tclass._module.Thread?(), 
              old($Heap))
           ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1));
  free ensures true;
  ensures {:id "id2048"} _module.Object.universe(this) == universe#0;
  ensures {:id "id2049"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id2050"} $Unbox(read($Heap, this, _module.OwnedU32.value)): int == value#0;
  ensures {:id "id2051"} $Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.owner)): ref
     == running#0;
  free ensures true;
  ensures {:id "id2052"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
        $Box(_module.OwnedObject.lifetime(this)))));
  free ensures true;
  ensures {:id "id2053"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointFrom)): Set, 
    Set#Empty(): Set);
  ensures {:id "id2054"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
    Set#UnionOne(Set#Empty(): Set, $Box(this)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32._ctor (correctness)"} Impl$$_module.OwnedU32.__ctor(universe#0: ref, running#0: ref, value#0: int)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.lifetime: ref;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.value: int;
  var defass#this.lifetime: bool;
  var defass#this.universe: bool;
  var $Heap_at_0: Heap;
  var defass#lifetime#0: bool;
  var lifetime#0: ref
     where defass#lifetime#0
       ==> $Is(lifetime#0, Tclass._module.Lifetime())
         && $IsAlloc(lifetime#0, Tclass._module.Lifetime(), $Heap);
  var $rhs#0: ref;
  var $nw: ref;
  var universe##0: ref;
  var running##0: ref;
  var owner##0: ref;
  var mightPointTo##0: Set;
  var running##1: ref;
  var $Heap_at_1: Heap;
  var $rhs#1: Set;
  var running##2: ref;

    // AddMethodImpl: _ctor, Impl$$_module.OwnedU32.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(660,3)
    $Heap_at_0 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(662,18)
    assume true;
    // ----- init call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(662,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := universe#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    owner##0 := running#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    mightPointTo##0 := Lit(Set#Empty(): Set);
    assert {:id "id2055"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##0
             || (Set#IsMember(mightPointTo##0, $Box($o))
               && $f == _module.Lifetime.mightPointFrom))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id2056"} $nw := Call$$_module.Lifetime.__ctor(universe##0, running##0, owner##0, mightPointTo##0);
    // TrCallStmt: After ProcessCallStmt
    $rhs#0 := $nw;
    lifetime#0 := $rhs#0;
    defass#lifetime#0 := true;

  after_0:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(663,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2059"} universe#0 != null;
    assert {:id "id2060"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0);
    call {:id "id2061"} Call$$_module.Universe.FrameOutlives($Heap_at_0, $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(664,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2062"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##1 := running#0;
    assert {:id "id2063"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id2064"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_0);
    call {:id "id2065"} Call$$_module.Universe.lci($Heap_at_0, $Heap, universe#0, running##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(665,5)
    assume true;
    assert {:id "id2066"} {:split_here} Lit(true);
    $Heap_at_1 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(668,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;

  after_1:
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(669,16)
    assume true;
    assume true;
    this.owner := running#0;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(670,19)
    assume true;
    assert {:id "id2069"} defass#lifetime#0;
    assume true;
    this.lifetime := lifetime#0;
    defass#this.lifetime := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(671,16)
    assume true;
    assume true;
    this.value := value#0;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(660,3)
    assert {:id "id2072"} defass#this.lifetime;
    assert {:id "id2073"} defass#this.universe;
    assume this != null && $Is(this, Tclass._module.OwnedU32?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume _module.OwnedObject.lifetime(this) == this.lifetime;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.OwnedU32.value)): int == this.value;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(660,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(673,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2074"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id2075"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(674,23)
    assert {:id "id2076"} lifetime#0 != null;
    assume true;
    assert {:id "id2077"} $_ModifiesFrame[lifetime#0, _module.Lifetime.elements];
    assume true;
    $rhs#1 := Set#UnionOne(Set#Empty(): Set, $Box(this));
    $Heap := update($Heap, lifetime#0, _module.Lifetime.elements, $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(675,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2080"} universe#0 != null;
    assert {:id "id2081"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_1);
    call {:id "id2082"} Call$$_module.Universe.FrameOutlives($Heap_at_1, $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(676,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2083"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##2 := running#0;
    assert {:id "id2084"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_1);
    assert {:id "id2085"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_1);
    call {:id "id2086"} Call$$_module.Universe.lci($Heap_at_1, $Heap, universe#0, running##2);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(677,5)
    assume true;
    assert {:id "id2087"} {:split_here} Lit(true);
}



// $Is axiom for non-null type _module.OwnedU32
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.OwnedU32()) } 
    { $Is(c#0, Tclass._module.OwnedU32?()) } 
  $Is(c#0, Tclass._module.OwnedU32())
     <==> $Is(c#0, Tclass._module.OwnedU32?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.OwnedU32
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.OwnedU32(), $h) } 
    { $IsAlloc(c#0, Tclass._module.OwnedU32?(), $h) } 
  $IsAlloc(c#0, Tclass._module.OwnedU32(), $h)
     <==> $IsAlloc(c#0, Tclass._module.OwnedU32?(), $h));

const unique class._module.OutlivesClaim?: ClassName;

function Tclass._module.OutlivesClaim?() : Ty
uses {
// Tclass._module.OutlivesClaim? Tag
axiom Tag(Tclass._module.OutlivesClaim?()) == Tagclass._module.OutlivesClaim?
   && TagFamily(Tclass._module.OutlivesClaim?()) == tytagFamily$OutlivesClaim;
axiom implements$_module.OwnedObject(Tclass._module.OutlivesClaim?());
}

const unique Tagclass._module.OutlivesClaim?: TyTag;

// Box/unbox axiom for Tclass._module.OutlivesClaim?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OutlivesClaim?()) } 
  $IsBox(bx, Tclass._module.OutlivesClaim?())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.OutlivesClaim?()));

// $Is axiom for class OutlivesClaim
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OutlivesClaim?()) } 
  $Is($o, Tclass._module.OutlivesClaim?())
     <==> $o == null || dtype($o) == Tclass._module.OutlivesClaim?());

// $IsAlloc axiom for class OutlivesClaim
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.OutlivesClaim?(), $h) } 
  $IsAlloc($o, Tclass._module.OutlivesClaim?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _module.OutlivesClaim.target(this: ref) : ref
uses {
// OutlivesClaim.target: Type axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $o: ref :: 
    { _module.OutlivesClaim.target($o) } 
    $o != null && dtype($o) == Tclass._module.OutlivesClaim?()
       ==> $Is(_module.OutlivesClaim.target($o), Tclass._module.Lifetime()));
// OutlivesClaim.target: Allocation axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $h: Heap, $o: ref :: 
    { _module.OutlivesClaim.target($o), $Unbox(read($h, $o, alloc)): bool } 
    $IsGoodHeap($h)
         && 
        $o != null
         && dtype($o) == Tclass._module.OutlivesClaim?()
         && $Unbox(read($h, $o, alloc)): bool
       ==> $IsAlloc(_module.OutlivesClaim.target($o), Tclass._module.Lifetime(), $h));
}

function _module.OutlivesClaim.source(this: ref) : ref
uses {
// OutlivesClaim.source: Type axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $o: ref :: 
    { _module.OutlivesClaim.source($o) } 
    $o != null && dtype($o) == Tclass._module.OutlivesClaim?()
       ==> $Is(_module.OutlivesClaim.source($o), Tclass._module.Lifetime()));
// OutlivesClaim.source: Allocation axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $h: Heap, $o: ref :: 
    { _module.OutlivesClaim.source($o), $Unbox(read($h, $o, alloc)): bool } 
    $IsGoodHeap($h)
         && 
        $o != null
         && dtype($o) == Tclass._module.OutlivesClaim?()
         && $Unbox(read($h, $o, alloc)): bool
       ==> $IsAlloc(_module.OutlivesClaim.source($o), Tclass._module.Lifetime(), $h));
}

// function declaration for _module.OutlivesClaim.volatileOwns
function _module.OutlivesClaim.volatileOwns(this: ref) : bool
uses {
// definition axiom for _module.OutlivesClaim.volatileOwns (revealed)
axiom {:id "id2088"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OutlivesClaim.volatileOwns(this) } 
    _module.OutlivesClaim.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim()))
       ==> _module.OutlivesClaim.volatileOwns(this) == Lit(false));
// definition axiom for _module.OutlivesClaim.volatileOwns for all literals (revealed)
axiom {:id "id2089"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.OutlivesClaim.volatileOwns(Lit(this)) } 
    _module.OutlivesClaim.volatileOwns#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim()))
       ==> _module.OutlivesClaim.volatileOwns(Lit(this)) == Lit(false));
}

function _module.OutlivesClaim.volatileOwns#canCall(this: ref) : bool;

function Tclass._module.OutlivesClaim() : Ty
uses {
// Tclass._module.OutlivesClaim Tag
axiom Tag(Tclass._module.OutlivesClaim()) == Tagclass._module.OutlivesClaim
   && TagFamily(Tclass._module.OutlivesClaim()) == tytagFamily$OutlivesClaim;
}

const unique Tagclass._module.OutlivesClaim: TyTag;

// Box/unbox axiom for Tclass._module.OutlivesClaim
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OutlivesClaim()) } 
  $IsBox(bx, Tclass._module.OutlivesClaim())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.OutlivesClaim()));

function _module.OutlivesClaim.volatileOwns#requires(ref) : bool;

// #requires axiom for _module.OutlivesClaim.volatileOwns
axiom (forall this: ref :: 
  { _module.OutlivesClaim.volatileOwns#requires(this) } 
  this != null && $Is(this, Tclass._module.OutlivesClaim())
     ==> _module.OutlivesClaim.volatileOwns#requires(this) == true);

// override axiom for _module.OwnedObject.volatileOwns in class _module.OutlivesClaim
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.volatileOwns(this), $Is(this, Tclass._module.OutlivesClaim()) } 
      { _module.OwnedObject.volatileOwns(this), _module.OutlivesClaim.volatileOwns(this) } 
    _module.OutlivesClaim.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim()))
       ==> _module.OwnedObject.volatileOwns(this)
         == _module.OutlivesClaim.volatileOwns(this));

procedure {:verboseName "OutlivesClaim.volatileOwns (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OutlivesClaim.volatileOwns (override check)"} OverrideCheck$$_module.OutlivesClaim.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.volatileOwns (override check)"} OverrideCheck$$_module.OutlivesClaim.volatileOwns(this: ref)
{
  var OutlivesClaim_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2091"} true;
    OutlivesClaim_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id2092"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.OutlivesClaim.objectUserFields
function _module.OutlivesClaim.objectUserFields($heap: Heap, this: ref) : Set
uses {
// consequence axiom for _module.OutlivesClaim.objectUserFields
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OutlivesClaim.objectUserFields($Heap, this) } 
    _module.OutlivesClaim.objectUserFields#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OutlivesClaim())
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap))
       ==> $Is(_module.OutlivesClaim.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object())));
// alloc consequence axiom for _module.OutlivesClaim.objectUserFields
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { $IsAlloc(_module.OutlivesClaim.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap) } 
    _module.OutlivesClaim.objectUserFields#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && this != null
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap))
       ==> $IsAlloc(_module.OutlivesClaim.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap));
// definition axiom for _module.OutlivesClaim.objectUserFields (revealed)
axiom {:id "id2093"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OutlivesClaim.objectUserFields($Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.objectUserFields#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OutlivesClaim())
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap))
       ==> _module.OutlivesClaim.objectUserFields($Heap, this)
         == Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OutlivesClaim.source(this))), 
          $Box(_module.OutlivesClaim.target(this))));
}

function _module.OutlivesClaim.objectUserFields#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OutlivesClaim.objectUserFields
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OutlivesClaim.objectUserFields($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OutlivesClaim())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OutlivesClaim.objectUserFields($h0, this)
       == _module.OutlivesClaim.objectUserFields($h1, this));

function _module.OutlivesClaim.objectUserFields#requires(Heap, ref) : bool;

// #requires axiom for _module.OutlivesClaim.objectUserFields
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OutlivesClaim.objectUserFields#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap)
     ==> _module.OutlivesClaim.objectUserFields#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.objectUserFields in class _module.OutlivesClaim
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.objectUserFields($Heap, this), $Is(this, Tclass._module.OutlivesClaim()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.objectUserFields($Heap, this), _module.OutlivesClaim.objectUserFields($Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.objectUserFields#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim()))
       ==> _module.OwnedObject.objectUserFields($Heap, this)
         == _module.OutlivesClaim.objectUserFields($Heap, this));

procedure {:verboseName "OutlivesClaim.objectUserFields (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.objectUserFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OutlivesClaim.objectUserFields (override check)"} OverrideCheck$$_module.OutlivesClaim.objectUserFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.objectUserFields (override check)"} OverrideCheck$$_module.OutlivesClaim.objectUserFields(this: ref)
{
  var OutlivesClaim_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2095"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    OutlivesClaim_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id2096"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.OutlivesClaim.unchangedNonvolatileUserFields
function _module.OutlivesClaim.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OutlivesClaim.unchangedNonvolatileUserFields (revealed)
axiom {:id "id2097"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OutlivesClaim.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OutlivesClaim())
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $prevHeap))
       ==> _module.OutlivesClaim.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == Lit(true));
}

function _module.OutlivesClaim.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OutlivesClaim.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OutlivesClaim.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OutlivesClaim())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OutlivesClaim.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.OutlivesClaim.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.OutlivesClaim.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OutlivesClaim.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OutlivesClaim.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $prevHeap)
     ==> _module.OutlivesClaim.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.OutlivesClaim
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.OutlivesClaim()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.OutlivesClaim.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.OutlivesClaim.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "OutlivesClaim.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "OutlivesClaim.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.OutlivesClaim.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.OutlivesClaim.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OutlivesClaim_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id2099"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    OutlivesClaim_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id2100"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.OutlivesClaim.localUserInv
function _module.OutlivesClaim.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OutlivesClaim.localUserInv (revealed)
axiom {:id "id2101"} 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OutlivesClaim.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.localUserInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OutlivesClaim())
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap))
       ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this)
         && (_module.Object.objectGlobalBaseInv($Heap, this)
           ==> _module.Universe.outlives#canCall($Heap, 
            _module.Object.universe(this), 
            _module.OutlivesClaim.target(this), 
            _module.OutlivesClaim.source(this)))
         && _module.OutlivesClaim.localUserInv($Heap, this)
           == (_module.Object.objectGlobalBaseInv($Heap, this)
             && _module.Universe.outlives($LS($LZ), 
              $Heap, 
              _module.Object.universe(this), 
              _module.OutlivesClaim.target(this), 
              _module.OutlivesClaim.source(this))));
}

function _module.OutlivesClaim.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OutlivesClaim.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OutlivesClaim.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OutlivesClaim.localUserInv($h0, this)
       == _module.OutlivesClaim.localUserInv($h1, this));

function _module.OutlivesClaim.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OutlivesClaim.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OutlivesClaim.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap)
     ==> _module.OutlivesClaim.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.OutlivesClaim
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.OutlivesClaim()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.OutlivesClaim.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.localUserInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.OutlivesClaim.localUserInv($Heap, this));

procedure {:verboseName "OutlivesClaim.localUserInv (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.localUserInv (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.localUserInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##a#0: ref;
  var ##b#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        if (_module.Object.objectGlobalBaseInv($Heap, this))
        {
            assert {:id "id2102"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            ##a#0 := _module.OutlivesClaim.target(this);
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#0, Tclass._module.Lifetime(), $Heap);
            ##b#0 := _module.OutlivesClaim.source(this);
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0, Tclass._module.Lifetime(), $Heap);
            assert {:id "id2103"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(##a#0));
            assert {:id "id2104"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(##b#0));
            assume Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(##a#0))
               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(##b#0));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && (
                    $o == _module.Object.universe(this)
                     || (
                      $Is($o, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box($o))
                       && $f == _module.Lifetime.mightPointTo)
                     || (
                      $Is($o, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box($o))
                       && $f == _module.Lifetime.mightPointFrom))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.outlives#canCall($Heap, 
              _module.Object.universe(this), 
              _module.OutlivesClaim.target(this), 
              _module.OutlivesClaim.source(this));
        }

        assume {:id "id2105"} _module.OutlivesClaim.localUserInv($Heap, this)
           == (_module.Object.objectGlobalBaseInv($Heap, this)
             && _module.Universe.outlives($LS($LZ), 
              $Heap, 
              _module.Object.universe(this), 
              _module.OutlivesClaim.target(this), 
              _module.OutlivesClaim.source(this)));
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this)
           && (_module.Object.objectGlobalBaseInv($Heap, this)
             ==> _module.Universe.outlives#canCall($Heap, 
              _module.Object.universe(this), 
              _module.OutlivesClaim.target(this), 
              _module.OutlivesClaim.source(this)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OutlivesClaim.localUserInv($Heap, this), TBool);
        assert {:id "id2106"} b$reqreads#0;
        assert {:id "id2107"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "OutlivesClaim.localUserInv (override check)"} OverrideCheck$$_module.OutlivesClaim.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.localUserInv (override check)"} OverrideCheck$$_module.OutlivesClaim.localUserInv(this: ref)
{
  var OutlivesClaim_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2108"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OutlivesClaim_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2109"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OutlivesClaim.userInv
function _module.OutlivesClaim.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OutlivesClaim.userInv
axiom 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OutlivesClaim.userInv($Heap, this) } 
    _module.OutlivesClaim.userInv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OutlivesClaim())
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap))
       ==> 
      _module.OutlivesClaim.userInv($Heap, this)
       ==> _module.OutlivesClaim.localUserInv($Heap, this));
// definition axiom for _module.OutlivesClaim.userInv (revealed)
axiom {:id "id2110"} 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OutlivesClaim.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.userInv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OutlivesClaim())
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap))
       ==> _module.OutlivesClaim.localUserInv#canCall($Heap, this)
         && _module.OutlivesClaim.userInv($Heap, this)
           == _module.OutlivesClaim.localUserInv($Heap, this));
}

function _module.OutlivesClaim.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OutlivesClaim.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OutlivesClaim.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OutlivesClaim.userInv($h0, this)
       == _module.OutlivesClaim.userInv($h1, this));

function _module.OutlivesClaim.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OutlivesClaim.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OutlivesClaim.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap)
     ==> _module.OutlivesClaim.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.OutlivesClaim
axiom 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.OutlivesClaim()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.OutlivesClaim.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.userInv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim()))
       ==> _module.OwnedObject.userInv($Heap, this)
         == _module.OutlivesClaim.userInv($Heap, this));

procedure {:verboseName "OutlivesClaim.userInv (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id2111"} _module.OutlivesClaim.userInv($Heap, this)
     ==> 
    _module.OutlivesClaim.localUserInv#canCall($Heap, this)
     ==> _module.OutlivesClaim.localUserInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id2112"} _module.OutlivesClaim.userInv($Heap, this)
     ==> 
    _module.OutlivesClaim.localUserInv#canCall($Heap, this)
     ==> _module.OutlivesClaim.localUserInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || _module.Object.baseFieldsInv($Heap, this));
  ensures {:id "id2113"} _module.OutlivesClaim.userInv($Heap, this)
     ==> 
    _module.OutlivesClaim.localUserInv#canCall($Heap, this)
     ==> _module.OutlivesClaim.localUserInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id2114"} _module.OutlivesClaim.userInv($Heap, this)
     ==> 
    _module.OutlivesClaim.localUserInv#canCall($Heap, this)
     ==> _module.OutlivesClaim.localUserInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));
  ensures {:id "id2115"} _module.OutlivesClaim.userInv($Heap, this)
     ==> 
    _module.OutlivesClaim.localUserInv#canCall($Heap, this)
     ==> _module.OutlivesClaim.localUserInv($Heap, this)
       || (_module.Universe.outlives#canCall($Heap, 
          _module.Object.universe(this), 
          _module.OutlivesClaim.target(this), 
          _module.OutlivesClaim.source(this))
         ==> _module.Universe.outlives($LS($LZ), 
            $Heap, 
            _module.Object.universe(this), 
            _module.OutlivesClaim.target(this), 
            _module.OutlivesClaim.source(this))
           || 
          Set#IsMember($Unbox(read($Heap, _module.OutlivesClaim.source(this), _module.Lifetime.mightPointTo)): Set, 
            $Box(_module.OutlivesClaim.target(this)))
           || (exists x#0: ref :: 
            { _module.Universe.outlivesThrough($LS($LS($LZ)), 
                $Heap, 
                _module.Object.universe(this), 
                _module.OutlivesClaim.target(this), 
                x#0, 
                _module.OutlivesClaim.source(this)) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(x#0)) } 
            $Is(x#0, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(x#0))
               && _module.Universe.outlivesThrough($LS($LS($LZ)), 
                $Heap, 
                _module.Object.universe(this), 
                _module.OutlivesClaim.target(this), 
                x#0, 
                _module.OutlivesClaim.source(this))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.userInv (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OutlivesClaim?(), $Heap);
            assert {:id "id2116"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OutlivesClaim.userInv#canCall($Heap, this);
            assume {:id "id2117"} _module.OutlivesClaim.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OutlivesClaim?(), $Heap);
            assume _module.OutlivesClaim.localUserInv#canCall($Heap, this);
            assume {:id "id2118"} _module.OutlivesClaim.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id2119"} _module.OutlivesClaim.userInv($Heap, this)
               ==> _module.OutlivesClaim.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OutlivesClaim?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OutlivesClaim.localUserInv#canCall($Heap, this);
        assume {:id "id2120"} _module.OutlivesClaim.userInv($Heap, this)
           == _module.OutlivesClaim.localUserInv($Heap, this);
        assume _module.OutlivesClaim.localUserInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OutlivesClaim.userInv($Heap, this), TBool);
        assert {:id "id2121"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "OutlivesClaim.userInv (override check)"} OverrideCheck$$_module.OutlivesClaim.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.userInv (override check)"} OverrideCheck$$_module.OutlivesClaim.userInv(this: ref)
{
  var OutlivesClaim_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2122"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OutlivesClaim_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2123"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id2124"} _module.OutlivesClaim.userInv($Heap, this)
       ==> _module.OutlivesClaim.localUserInv($Heap, this);
    assert {:id "id2125"} _module.OutlivesClaim.userInv($Heap, this)
       ==> 
      _module.OutlivesClaim.localUserInv#canCall($Heap, this)
       ==> _module.OutlivesClaim.localUserInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id2126"} _module.OutlivesClaim.userInv($Heap, this)
       ==> 
      _module.OutlivesClaim.localUserInv#canCall($Heap, this)
       ==> _module.OutlivesClaim.localUserInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || _module.Object.baseFieldsInv($Heap, this));
    assert {:id "id2127"} _module.OutlivesClaim.userInv($Heap, this)
       ==> 
      _module.OutlivesClaim.localUserInv#canCall($Heap, this)
       ==> _module.OutlivesClaim.localUserInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || Lit(true)));
    assert {:id "id2128"} _module.OutlivesClaim.userInv($Heap, this)
       ==> 
      _module.OutlivesClaim.localUserInv#canCall($Heap, this)
       ==> _module.OutlivesClaim.localUserInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.triggerAxioms($Heap, o#1) } 
                    { _module.Object.baseFieldsInv($Heap, o#1) } 
                    { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this)
                       && _module.Object.baseFieldsInv($Heap, o#1)
                       && _module.Object.triggerAxioms($Heap, o#1))));
    assert {:id "id2129"} _module.OutlivesClaim.userInv($Heap, this)
       ==> 
      _module.OutlivesClaim.localUserInv#canCall($Heap, this)
       ==> _module.OutlivesClaim.localUserInv($Heap, this)
         || (_module.Universe.outlives#canCall($Heap, 
            _module.Object.universe(this), 
            _module.OutlivesClaim.target(this), 
            _module.OutlivesClaim.source(this))
           ==> _module.Universe.outlives($LS($LZ), 
              $Heap, 
              _module.Object.universe(this), 
              _module.OutlivesClaim.target(this), 
              _module.OutlivesClaim.source(this))
             || 
            Set#IsMember($Unbox(read($Heap, _module.OutlivesClaim.source(this), _module.Lifetime.mightPointTo)): Set, 
              $Box(_module.OutlivesClaim.target(this)))
             || (exists x#1: ref :: 
              { _module.Universe.outlivesThrough($LS($LS($LZ)), 
                  $Heap, 
                  _module.Object.universe(this), 
                  _module.OutlivesClaim.target(this), 
                  x#1, 
                  _module.OutlivesClaim.source(this)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(x#1)) } 
              $Is(x#1, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(x#1))
                 && _module.Universe.outlivesThrough($LS($LS($LZ)), 
                  $Heap, 
                  _module.Object.universe(this), 
                  _module.OutlivesClaim.target(this), 
                  x#1, 
                  _module.OutlivesClaim.source(this))));
}



// function declaration for _module.OutlivesClaim.localUserInv2
function _module.OutlivesClaim.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OutlivesClaim.localUserInv2 (revealed)
axiom {:id "id2130"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OutlivesClaim.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OutlivesClaim())
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $prevHeap))
       ==> _module.OutlivesClaim.localUserInv2($prevHeap, $Heap, this) == Lit(true));
}

function _module.OutlivesClaim.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OutlivesClaim.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OutlivesClaim.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OutlivesClaim.localUserInv2($prevHeap, $h0, this)
       == _module.OutlivesClaim.localUserInv2($prevHeap, $h1, this));

function _module.OutlivesClaim.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OutlivesClaim.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OutlivesClaim.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $prevHeap)
     ==> _module.OutlivesClaim.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.OutlivesClaim
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OutlivesClaim()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.OutlivesClaim.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.OutlivesClaim.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "OutlivesClaim.localUserInv2 (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "OutlivesClaim.localUserInv2 (override check)"} OverrideCheck$$_module.OutlivesClaim.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.localUserInv2 (override check)"} OverrideCheck$$_module.OutlivesClaim.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OutlivesClaim_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id2132"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OutlivesClaim_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2133"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OutlivesClaim.userInv2
function _module.OutlivesClaim.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OutlivesClaim.userInv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OutlivesClaim.userInv2($prevHeap, $Heap, this) } 
    _module.OutlivesClaim.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OutlivesClaim())
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $prevHeap))
       ==> 
      _module.OutlivesClaim.userInv2($prevHeap, $Heap, this)
       ==> _module.OutlivesClaim.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.OutlivesClaim.userInv2 (revealed)
axiom {:id "id2134"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OutlivesClaim.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OutlivesClaim())
           && $IsAlloc(this, Tclass._module.OutlivesClaim(), $prevHeap))
       ==> _module.OutlivesClaim.localUserInv2#canCall($prevHeap, $Heap, this)
         && _module.OutlivesClaim.userInv2($prevHeap, $Heap, this)
           == _module.OutlivesClaim.localUserInv2($prevHeap, $Heap, this));
}

function _module.OutlivesClaim.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OutlivesClaim.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OutlivesClaim.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OutlivesClaim.userInv2($prevHeap, $h0, this)
       == _module.OutlivesClaim.userInv2($prevHeap, $h1, this));

function _module.OutlivesClaim.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OutlivesClaim.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OutlivesClaim.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $prevHeap)
     ==> _module.OutlivesClaim.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.OutlivesClaim
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OutlivesClaim()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.OutlivesClaim.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OutlivesClaim.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.OutlivesClaim.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "OutlivesClaim.userInv2 (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id2135"} _module.OutlivesClaim.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OutlivesClaim.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OutlivesClaim.localUserInv2(previous$Heap, current$Heap, this)
       || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.userInv2 (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OutlivesClaim?(), $Heap);
            assert {:id "id2136"} $IsAlloc(this, Tclass._module.OutlivesClaim(), old($Heap));
            assert {:id "id2137"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OutlivesClaim.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id2138"} _module.OutlivesClaim.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OutlivesClaim?(), $Heap);
            assert {:id "id2139"} $IsAlloc(this, Tclass._module.OutlivesClaim(), old($Heap));
            assume _module.OutlivesClaim.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id2140"} _module.OutlivesClaim.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id2141"} _module.OutlivesClaim.userInv2(old($Heap), $Heap, this)
               ==> _module.OutlivesClaim.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OutlivesClaim?(), $Heap);
        assert {:id "id2142"} $IsAlloc(this, Tclass._module.OutlivesClaim(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OutlivesClaim.localUserInv2#canCall(old($Heap), $Heap, this);
        assume {:id "id2143"} _module.OutlivesClaim.userInv2(old($Heap), $Heap, this)
           == _module.OutlivesClaim.localUserInv2(old($Heap), $Heap, this);
        assume _module.OutlivesClaim.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OutlivesClaim.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id2144"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "OutlivesClaim.userInv2 (override check)"} OverrideCheck$$_module.OutlivesClaim.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.userInv2 (override check)"} OverrideCheck$$_module.OutlivesClaim.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OutlivesClaim_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id2145"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OutlivesClaim_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2146"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id2147"} _module.OutlivesClaim.userInv2(old($Heap), $Heap, this)
       ==> _module.OutlivesClaim.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id2148"} _module.OutlivesClaim.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.OutlivesClaim.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OutlivesClaim.localUserInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "OutlivesClaim.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.OutlivesClaim.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.OutlivesClaim.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.OutlivesClaim.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id2149"} $IsAlloc(this, Tclass._module.OutlivesClaim(), old($Heap));
    assert {:id "id2150"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id2151"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id2152"} $IsAlloc(this, Tclass._module.OutlivesClaim(), old($Heap));
    assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id2153"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "OutlivesClaim.sequenceAdmissibility (override check)"} OverrideCheck$$_module.OutlivesClaim.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.sequenceAdmissibility (override check)"} OverrideCheck$$_module.OutlivesClaim.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id2154"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id2155"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id2156"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id2157"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2158"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id2159"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2160"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id2161"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id2162"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id2163"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || Set#Subset(running#0, 
              $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id2164"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id2165"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object?(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id2166"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall l#0: ref :: 
              { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#0)) } 
              $Is(l#0, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#0))
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), l#0, _module.Lifetime.owner))
                   && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                    Tclass._module.Thread?(), 
                    old($Heap))
                 ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0)));
    assert {:id "id2167"} Set#Subset(running#0, running#0);
    assert {:id "id2168"} (forall $o: ref, $f: Field :: true);
    assert {:id "id2169"} (forall $o: ref, $f: Field :: true);
    assume {:id "id2170"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id2171"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "OutlivesClaim.sequenceAdmissibility (call)"} Call$$_module.OutlivesClaim.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id2172"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id2173"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id2174"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2175"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id2176"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2177"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id2178"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id2179"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id2180"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || Set#Subset(running#0, 
            $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id2181"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id2182"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id2183"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall l#1: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
              { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(l#1)) } 
            $Is(l#1, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#1))
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, l#1, _module.Lifetime.owner))
                 && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  previous$Heap)
               ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id2184"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && 
    ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
       ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null)
     && $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       ==> true
         && _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this))
     && ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
        Tclass._module.OwnedObject())
       ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
        !_module.OwnedObject.volatileOwns(oldOwner#0)
             && $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
           ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OutlivesClaim.sequenceAdmissibility (correctness)"} Impl$$_module.OutlivesClaim.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id2185"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id2186"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
         ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null);
  ensures {:id "id2187"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id2188"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id2189"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id2190"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id2191"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#1)
               && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.sequenceAdmissibility (correctness)"} Impl$$_module.OutlivesClaim.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.OutlivesClaim.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "OutlivesClaim.admissibility (well-formedness)"} CheckWellFormed$$_module.OutlivesClaim.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.admissibility (well-formedness)"} CheckWellFormed$$_module.OutlivesClaim.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.OutlivesClaim.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id2192"} $IsAlloc(this, Tclass._module.OutlivesClaim(), old($Heap));
    assert {:id "id2193"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id2194"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id2195"} $IsAlloc(this, Tclass._module.OutlivesClaim(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id2196"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id2197"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "OutlivesClaim.admissibility (override check)"} OverrideCheck$$_module.OutlivesClaim.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.admissibility (override check)"} OverrideCheck$$_module.OutlivesClaim.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id2198"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id2199"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id2200"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id2201"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id2202"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id2203"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id2204"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id2205"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id2206"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id2207"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id2208"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id2209"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object?(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id2210"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall l#0: ref :: 
                  { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                    { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#0)) } 
                  $Is(l#0, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(l#0))
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), l#0, _module.Lifetime.owner))
                       && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                        Tclass._module.Thread?(), 
                        old($Heap))
                     ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0))));
    assert {:id "id2211"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2212"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id2213"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id2214"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id2215"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id2216"} running#0 != null ==> running#0 != null;
    assert {:id "id2217"} (forall $o: ref, $f: Field :: true);
    assert {:id "id2218"} (forall $o: ref, $f: Field :: true);
    assume {:id "id2219"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id2220"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id2221"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "OutlivesClaim.admissibility (call)"} Call$$_module.OutlivesClaim.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id2222"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id2223"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id2224"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id2225"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#9: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#9) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#9) } 
                          { _module.Object.universe(o#9) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9)) } 
                        $Is(o#9, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#9))
                           ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                             && o#9 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#9)
                             && _module.Object.triggerAxioms(previous$Heap, o#9))))));
  requires {:id "id2226"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id2227"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#10: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#10) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#10) } 
                          { _module.Object.universe(o#10) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#10)) } 
                        $Is(o#10, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#10))
                           ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                             && o#10 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#10)
                             && _module.Object.triggerAxioms(current$Heap, o#10))))));
  requires {:id "id2228"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id2229"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#11: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                    $Is(o#11, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                       ==> !$IsAllocBox($Box(o#11), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id2230"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id2231"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#12: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#12
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12))));
  requires {:id "id2232"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#13: ref :: 
                { $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                     && $Is($Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#13, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#13, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id2233"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall l#1: ref :: 
                { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
                  { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#1)) } 
                $Is(l#1, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#1))
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, l#1, _module.Lifetime.owner))
                     && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                      Tclass._module.Thread?(), 
                      previous$Heap)
                   ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1))));
  requires {:id "id2234"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2235"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#14: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#14) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#14) } 
                      { _module.Object.universe(o#14) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#14)) } 
                    $Is(o#14, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#14))
                       ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                         && o#14 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#14)
                         && _module.Object.triggerAxioms(previous$Heap, o#14)))));
  requires {:id "id2236"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.inv(previous$Heap, o#15) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.inv(previous$Heap, o#15))));
  requires {:id "id2237"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#16: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#16) } 
              { _module.Object.inv(current$Heap, o#16) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#16))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#16))));
  requires {:id "id2238"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#17: ref :: 
            { _module.Object.inv(current$Heap, o#17) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
               ==> _module.Object.inv(current$Heap, o#17)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id2239"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.OwnedObject.userInv2(previous$Heap, current$Heap, this))
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
             && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
              $IsAllocBox($Box(currOwner#0), Tclass._module.Object?(), previous$Heap)
                 ==> _module.Object.localInv2(previous$Heap, 
                  current$Heap, 
                  $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref))));
  free ensures {:id "id2240"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.OwnedObject.userInv(current$Heap, this));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OutlivesClaim.admissibility (correctness)"} Impl$$_module.OutlivesClaim.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id2241"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id2242"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id2243"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this)));
  ensures {:id "id2244"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
             ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null));
  ensures {:id "id2245"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id2246"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> Lit(true)));
  ensures {:id "id2247"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2248"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id2249"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              !_module.OwnedObject.volatileOwns(oldOwner#1)
                   && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id2250"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.userInv2(previous$Heap, current$Heap, this));
  ensures {:id "id2251"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2252"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2253"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> 
        $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2254"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> 
        $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object?(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id2255"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id2256"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id2257"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id2258"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#28: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#28) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#28) } 
                      { _module.Object.universe(o#28) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#28)) } 
                    $Is(o#28, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#28))
                       ==> _module.Object.universe(o#28) == _module.Object.universe(this)
                         && o#28 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#28)
                         && _module.Object.triggerAxioms(current$Heap, o#28)))));
  ensures {:id "id2259"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
            $Box(this)));
  ensures {:id "id2260"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Lifetime.alive(current$Heap, _module.OwnedObject.lifetime(this))
             ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null));
  ensures {:id "id2261"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.localUserInv(current$Heap, this)));
  ensures {:id "id2262"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.userInv(current$Heap, this));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.admissibility (correctness)"} Impl$$_module.OutlivesClaim.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.OutlivesClaim.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(703,27)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2263"} _module.Object.universe(this) != null;
    assert {:id "id2264"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id2265"} Call$$_module.Universe.FrameOutlives(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "OutlivesClaim.apply (well-formedness)"} CheckWellFormed$$_module.OutlivesClaim.apply(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  free requires 19 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.apply (well-formedness)"} CheckWellFormed$$_module.OutlivesClaim.apply(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var newtype$check#0: ref;


    // AddMethodImpl: apply, CheckWellFormed$$_module.OutlivesClaim.apply
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2266"} _module.Object.objectGlobalInv($Heap, this);
    newtype$check#0 := null;
    assume {:id "id2267"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
    havoc $Heap;
    assume old($Heap) == $Heap;
    if (*)
    {
        assert {:id "id2268"} _module.OutlivesClaim.source(this) != null;
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(_module.OutlivesClaim.source(this)), Tclass._module.Lifetime?(), $Heap);
        assume _module.Lifetime.alive#canCall($Heap, _module.OutlivesClaim.source(this));
        assume {:id "id2269"} _module.Lifetime.alive($Heap, _module.OutlivesClaim.source(this));
        assert {:id "id2270"} _module.OutlivesClaim.target(this) != null;
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(_module.OutlivesClaim.target(this)), Tclass._module.Lifetime?(), $Heap);
        assume _module.Lifetime.alive#canCall($Heap, _module.OutlivesClaim.target(this));
        assume {:id "id2271"} _module.Lifetime.alive($Heap, _module.OutlivesClaim.target(this));
    }
    else
    {
        assume {:id "id2272"} _module.Lifetime.alive($Heap, _module.OutlivesClaim.source(this))
           ==> _module.Lifetime.alive($Heap, _module.OutlivesClaim.target(this));
    }
}



procedure {:verboseName "OutlivesClaim.apply (call)"} Call$$_module.OutlivesClaim.apply(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  // user-defined preconditions
  requires {:id "id2273"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id2274"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  requires {:id "id2275"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));
  requires {:id "id2276"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#1: ref :: 
            { _module.Object.inv($Heap, o#1) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#1)) } 
            $Is(o#1, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1))
               ==> _module.Object.inv($Heap, o#1)));
  requires {:id "id2277"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.alive#canCall($Heap, _module.OutlivesClaim.source(this))
     && (_module.Lifetime.alive($Heap, _module.OutlivesClaim.source(this))
       ==> _module.Lifetime.alive#canCall($Heap, _module.OutlivesClaim.target(this)));
  free ensures {:id "id2278"} _module.Lifetime.alive($Heap, _module.OutlivesClaim.source(this))
     ==> _module.Lifetime.alive#canCall($Heap, _module.OutlivesClaim.target(this))
       && 
      _module.Lifetime.alive($Heap, _module.OutlivesClaim.target(this))
       && $Unbox(read($Heap, _module.OutlivesClaim.target(this), _module.Lifetime.owner)): ref
         != null;
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OutlivesClaim.apply (correctness)"} Impl$$_module.OutlivesClaim.apply(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2279"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  requires {:id "id2280"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Lifetime.alive#canCall($Heap, _module.OutlivesClaim.source(this))
     && (_module.Lifetime.alive($Heap, _module.OutlivesClaim.source(this))
       ==> _module.Lifetime.alive#canCall($Heap, _module.OutlivesClaim.target(this)));
  ensures {:id "id2281"} _module.Lifetime.alive($Heap, _module.OutlivesClaim.source(this))
     ==> 
    _module.Lifetime.alive#canCall($Heap, _module.OutlivesClaim.target(this))
     ==> _module.Lifetime.alive($Heap, _module.OutlivesClaim.target(this))
       || $Unbox(read($Heap, _module.OutlivesClaim.target(this), _module.Lifetime.owner)): ref
         != null;
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.apply (correctness)"} Impl$$_module.OutlivesClaim.apply(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: apply, Impl$$_module.OutlivesClaim.apply
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(710,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2282"} _module.Object.universe(this) != null;
    call {:id "id2283"} Call$$_module.Universe.OutlivesImpliesAlive(_module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
}



// function declaration for _module.OutlivesClaim.outlives
function _module.OutlivesClaim.outlives(this: ref, t#0: ref, s#0: ref) : bool
uses {
// definition axiom for _module.OutlivesClaim.outlives (revealed)
axiom {:id "id2284"} 2 <= $FunctionContextHeight
   ==> (forall this: ref, t#0: ref, s#0: ref :: 
    { _module.OutlivesClaim.outlives(this, t#0, s#0) } 
    _module.OutlivesClaim.outlives#canCall(this, t#0, s#0)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim())
           && $Is(t#0, Tclass._module.Lifetime())
           && $Is(s#0, Tclass._module.Lifetime()))
       ==> _module.OutlivesClaim.outlives(this, t#0, s#0)
         == (_module.OutlivesClaim.target(this) == t#0
           && _module.OutlivesClaim.source(this) == s#0));
// definition axiom for _module.OutlivesClaim.outlives for decreasing-related literals (revealed)
axiom {:id "id2285"} 2 <= $FunctionContextHeight
   ==> (forall this: ref, t#0: ref, s#0: ref :: 
    {:weight 3} { _module.OutlivesClaim.outlives(this, Lit(t#0), Lit(s#0)) } 
    _module.OutlivesClaim.outlives#canCall(this, Lit(t#0), Lit(s#0))
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim())
           && $Is(t#0, Tclass._module.Lifetime())
           && $Is(s#0, Tclass._module.Lifetime()))
       ==> _module.OutlivesClaim.outlives(this, Lit(t#0), Lit(s#0))
         == (_module.OutlivesClaim.target(this) == Lit(t#0)
           && _module.OutlivesClaim.source(this) == Lit(s#0)));
// definition axiom for _module.OutlivesClaim.outlives for all literals (revealed)
axiom {:id "id2286"} 2 <= $FunctionContextHeight
   ==> (forall this: ref, t#0: ref, s#0: ref :: 
    {:weight 3} { _module.OutlivesClaim.outlives(Lit(this), Lit(t#0), Lit(s#0)) } 
    _module.OutlivesClaim.outlives#canCall(Lit(this), Lit(t#0), Lit(s#0))
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim())
           && $Is(t#0, Tclass._module.Lifetime())
           && $Is(s#0, Tclass._module.Lifetime()))
       ==> _module.OutlivesClaim.outlives(Lit(this), Lit(t#0), Lit(s#0))
         == (_module.OutlivesClaim.target(Lit(this)) == Lit(t#0)
           && _module.OutlivesClaim.source(Lit(this)) == Lit(s#0)));
}

function _module.OutlivesClaim.outlives#canCall(this: ref, t#0: ref, s#0: ref) : bool;

function _module.OutlivesClaim.outlives#requires(ref, ref, ref) : bool;

// #requires axiom for _module.OutlivesClaim.outlives
axiom (forall this: ref, t#0: ref, s#0: ref :: 
  { _module.OutlivesClaim.outlives#requires(this, t#0, s#0) } 
  this != null
       && $Is(this, Tclass._module.OutlivesClaim())
       && $Is(t#0, Tclass._module.Lifetime())
       && $Is(s#0, Tclass._module.Lifetime())
     ==> _module.OutlivesClaim.outlives#requires(this, t#0, s#0) == true);

procedure {:verboseName "OutlivesClaim.outlives (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.outlives(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap), 
    t#0: ref where $Is(t#0, Tclass._module.Lifetime()), 
    s#0: ref where $Is(s#0, Tclass._module.Lifetime()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.OutlivesClaim.lifetimeOutlives
function _module.OutlivesClaim.lifetimeOutlives(this: ref, t#0: ref, s#0: ref) : bool
uses {
// definition axiom for _module.OutlivesClaim.lifetimeOutlives (revealed)
axiom {:id "id2288"} 2 <= $FunctionContextHeight
   ==> (forall this: ref, t#0: ref, s#0: ref :: 
    { _module.OutlivesClaim.lifetimeOutlives(this, t#0, s#0) } 
    _module.OutlivesClaim.lifetimeOutlives#canCall(this, t#0, s#0)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim())
           && $Is(t#0, Tclass._module.OwnedObject())
           && $Is(s#0, Tclass._module.OwnedObject()))
       ==> _module.OutlivesClaim.lifetimeOutlives(this, t#0, s#0)
         == (_module.OutlivesClaim.target(this) == _module.OwnedObject.lifetime(t#0)
           && _module.OutlivesClaim.source(this) == _module.OwnedObject.lifetime(s#0)));
// definition axiom for _module.OutlivesClaim.lifetimeOutlives for decreasing-related literals (revealed)
axiom {:id "id2289"} 2 <= $FunctionContextHeight
   ==> (forall this: ref, t#0: ref, s#0: ref :: 
    {:weight 3} { _module.OutlivesClaim.lifetimeOutlives(this, Lit(t#0), Lit(s#0)) } 
    _module.OutlivesClaim.lifetimeOutlives#canCall(this, Lit(t#0), Lit(s#0))
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim())
           && $Is(t#0, Tclass._module.OwnedObject())
           && $Is(s#0, Tclass._module.OwnedObject()))
       ==> _module.OutlivesClaim.lifetimeOutlives(this, Lit(t#0), Lit(s#0))
         == (_module.OutlivesClaim.target(this) == _module.OwnedObject.lifetime(Lit(t#0))
           && _module.OutlivesClaim.source(this) == _module.OwnedObject.lifetime(Lit(s#0))));
// definition axiom for _module.OutlivesClaim.lifetimeOutlives for all literals (revealed)
axiom {:id "id2290"} 2 <= $FunctionContextHeight
   ==> (forall this: ref, t#0: ref, s#0: ref :: 
    {:weight 3} { _module.OutlivesClaim.lifetimeOutlives(Lit(this), Lit(t#0), Lit(s#0)) } 
    _module.OutlivesClaim.lifetimeOutlives#canCall(Lit(this), Lit(t#0), Lit(s#0))
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OutlivesClaim())
           && $Is(t#0, Tclass._module.OwnedObject())
           && $Is(s#0, Tclass._module.OwnedObject()))
       ==> _module.OutlivesClaim.lifetimeOutlives(Lit(this), Lit(t#0), Lit(s#0))
         == (_module.OutlivesClaim.target(Lit(this))
             == _module.OwnedObject.lifetime(Lit(t#0))
           && _module.OutlivesClaim.source(Lit(this))
             == _module.OwnedObject.lifetime(Lit(s#0))));
}

function _module.OutlivesClaim.lifetimeOutlives#canCall(this: ref, t#0: ref, s#0: ref) : bool;

function _module.OutlivesClaim.lifetimeOutlives#requires(ref, ref, ref) : bool;

// #requires axiom for _module.OutlivesClaim.lifetimeOutlives
axiom (forall this: ref, t#0: ref, s#0: ref :: 
  { _module.OutlivesClaim.lifetimeOutlives#requires(this, t#0, s#0) } 
  this != null
       && $Is(this, Tclass._module.OutlivesClaim())
       && $Is(t#0, Tclass._module.OwnedObject())
       && $Is(s#0, Tclass._module.OwnedObject())
     ==> _module.OutlivesClaim.lifetimeOutlives#requires(this, t#0, s#0) == true);

procedure {:verboseName "OutlivesClaim.lifetimeOutlives (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.lifetimeOutlives(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap), 
    t#0: ref where $Is(t#0, Tclass._module.OwnedObject()), 
    s#0: ref where $Is(s#0, Tclass._module.OwnedObject()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim.lifetimeOutlives (well-formedness)"} CheckWellformed$$_module.OutlivesClaim.lifetimeOutlives(this: ref, t#0: ref, s#0: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id2291"} t#0 != null;
        if (_module.OutlivesClaim.target(this) == _module.OwnedObject.lifetime(t#0))
        {
            assert {:id "id2292"} s#0 != null;
        }

        assume {:id "id2293"} _module.OutlivesClaim.lifetimeOutlives(this, t#0, s#0)
           == (_module.OutlivesClaim.target(this) == _module.OwnedObject.lifetime(t#0)
             && _module.OutlivesClaim.source(this) == _module.OwnedObject.lifetime(s#0));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OutlivesClaim.lifetimeOutlives(this, t#0, s#0), TBool);
        return;

        assume false;
    }
}



procedure {:verboseName "OutlivesClaim._ctor (well-formedness)"} CheckWellFormed$$_module.OutlivesClaim.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    target#0: ref
       where $Is(target#0, Tclass._module.Lifetime())
         && $IsAlloc(target#0, Tclass._module.Lifetime(), $Heap), 
    source#0: ref
       where $Is(source#0, Tclass._module.Lifetime())
         && $IsAlloc(source#0, Tclass._module.Lifetime(), $Heap))
   returns (this: ref);
  free requires 23 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim._ctor (well-formedness)"} CheckWellFormed$$_module.OutlivesClaim.__ctor(universe#0: ref, running#0: ref, target#0: ref, source#0: ref)
   returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##a#0: ref;
  var ##b#0: ref;
  var ##running#0: Set;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.OutlivesClaim.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || ($o == target#0 && $f == _module.Lifetime.mightPointFrom)
           || ($o == source#0 && $f == _module.Lifetime.mightPointFrom));
    assert {:id "id2294"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id2295"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id2296"} universe#0 != null;
    assume {:id "id2297"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(target#0)), 
        $Box(source#0)), 
      $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
    assert {:id "id2298"} target#0 != null;
    assert {:id "id2299"} source#0 != null;
    if ($Unbox(read($Heap, target#0, _module.Lifetime.owner)): ref
       == $Unbox(read($Heap, source#0, _module.Lifetime.owner)): ref)
    {
        assert {:id "id2300"} source#0 != null;
    }

    assume {:id "id2301"} $Unbox(read($Heap, target#0, _module.Lifetime.owner)): ref
         == $Unbox(read($Heap, source#0, _module.Lifetime.owner)): ref
       && $Unbox(read($Heap, source#0, _module.Lifetime.owner)): ref == running#0;
    assert {:id "id2302"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##a#0 := target#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#0, Tclass._module.Lifetime(), $Heap);
    ##b#0 := source#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#0, Tclass._module.Lifetime(), $Heap);
    assert {:id "id2303"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#0));
    assert {:id "id2304"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#0));
    assume Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#0))
       && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#0));
    assume _module.Universe.outlives#canCall($Heap, universe#0, target#0, source#0);
    assume {:id "id2305"} _module.Universe.outlives($LS($LZ), $Heap, universe#0, target#0, source#0);
    assert {:id "id2306"} target#0 != null;
    assert {:id "id2307"} source#0 != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || $o == target#0
           || $o == source#0);
    assume (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
           || 
          $o == universe#0
           || ($o == target#0 && $f == _module.Lifetime.mightPointFrom)
           || ($o == source#0 && $f == _module.Lifetime.mightPointFrom));
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.OutlivesClaim())
       && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2308"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id2309"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##running#0 := Set#UnionOne(Set#Empty(): Set, $Box(running#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id2310"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id2311"} $IsAlloc(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
      TSet(Tclass._module.Thread()), 
      old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
    assume {:id "id2312"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
    assume {:id "id2313"} _module.Object.universe(this) == universe#0;
    assume {:id "id2314"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id2315"} _module.OutlivesClaim.target(this) == target#0;
    assume {:id "id2316"} _module.OutlivesClaim.source(this) == source#0;
    assert {:id "id2317"} universe#0 != null;
    assert {:id "id2318"} universe#0 != null;
    assert {:id "id2319"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id2320"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
          $Box(_module.OwnedObject.lifetime(this)))));
    assert {:id "id2321"} target#0 != null;
    assert {:id "id2322"} target#0 != null;
    assert {:id "id2323"} $IsAlloc(target#0, Tclass._module.Lifetime(), old($Heap));
    assume {:id "id2324"} Set#Equal($Unbox(read($Heap, target#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#Union($Unbox(read(old($Heap), target#0, _module.Lifetime.mightPointFrom)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))));
    assert {:id "id2325"} source#0 != null;
    assert {:id "id2326"} source#0 != null;
    assert {:id "id2327"} $IsAlloc(source#0, Tclass._module.Lifetime(), old($Heap));
    assume {:id "id2328"} Set#Equal($Unbox(read($Heap, source#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#Union($Unbox(read(old($Heap), source#0, _module.Lifetime.mightPointFrom)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))));
}



procedure {:verboseName "OutlivesClaim._ctor (call)"} Call$$_module.OutlivesClaim.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    target#0: ref
       where $Is(target#0, Tclass._module.Lifetime())
         && $IsAlloc(target#0, Tclass._module.Lifetime(), $Heap), 
    source#0: ref
       where $Is(source#0, Tclass._module.Lifetime())
         && $IsAlloc(source#0, Tclass._module.Lifetime(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OutlivesClaim())
         && $IsAlloc(this, Tclass._module.OutlivesClaim(), $Heap));
  // user-defined preconditions
  requires {:id "id2329"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id2330"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id2331"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id2332"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(target#0)), 
      $Box(source#0)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id2333"} $Unbox(read($Heap, target#0, _module.Lifetime.owner)): ref
     == $Unbox(read($Heap, source#0, _module.Lifetime.owner)): ref;
  requires {:id "id2334"} $Unbox(read($Heap, source#0, _module.Lifetime.owner)): ref == running#0;
  requires {:id "id2335"} _module.Universe.outlives#canCall($Heap, universe#0, target#0, source#0)
     ==> _module.Universe.outlives($LS($LZ), $Heap, universe#0, target#0, source#0)
       || 
      Set#IsMember($Unbox(read($Heap, source#0, _module.Lifetime.mightPointTo)): Set, 
        $Box(target#0))
       || (exists x#0: ref :: 
        { _module.Universe.outlivesThrough($LS($LS($LZ)), $Heap, universe#0, target#0, x#0, source#0) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#0)) } 
        $Is(x#0, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#0))
           && _module.Universe.outlivesThrough($LS($LS($LZ)), $Heap, universe#0, target#0, x#0, source#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0))));
  free ensures {:id "id2336"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id2337"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
     && Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
      $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set)
     && (forall o#7: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#7) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#7)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7)) } 
      $Is(o#7, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#7))
         ==> (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           || _module.Object.sequenceInv2(old($Heap), $Heap, o#7))
     && (forall o#8: ref :: 
      { $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8))
           && $Is($Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            read(old($Heap), o#8, _module.OwnedObject.owner))
           && $IsAllocBox(read(old($Heap), o#8, _module.OwnedObject.owner), 
            Tclass._module.Object?(), 
            old($Heap))
         ==> $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall l#0: ref :: 
      { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
        { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#0)) } 
      $Is(l#0, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#0))
         ==> 
        !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            read(old($Heap), l#0, _module.Lifetime.owner))
           && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
            Tclass._module.Thread?(), 
            old($Heap))
         ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0));
  free ensures true;
  ensures {:id "id2338"} _module.Object.universe(this) == universe#0;
  ensures {:id "id2339"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id2340"} _module.OutlivesClaim.target(this) == target#0;
  ensures {:id "id2341"} _module.OutlivesClaim.source(this) == source#0;
  free ensures true;
  ensures {:id "id2342"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
        $Box(_module.OwnedObject.lifetime(this)))));
  free ensures true;
  ensures {:id "id2343"} Set#Equal($Unbox(read($Heap, target#0, _module.Lifetime.mightPointFrom)): Set, 
    Set#Union($Unbox(read(old($Heap), target#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))));
  free ensures true;
  ensures {:id "id2344"} Set#Equal($Unbox(read($Heap, source#0, _module.Lifetime.mightPointFrom)): Set, 
    Set#Union($Unbox(read(old($Heap), source#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || $o == target#0
         || $o == source#0);
  // frame condition: field granularity
  free ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || 
        $o == universe#0
         || ($o == target#0 && $f == _module.Lifetime.mightPointFrom)
         || ($o == source#0 && $f == _module.Lifetime.mightPointFrom));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "OutlivesClaim._ctor (correctness)"} Impl$$_module.OutlivesClaim.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    target#0: ref
       where $Is(target#0, Tclass._module.Lifetime())
         && $IsAlloc(target#0, Tclass._module.Lifetime(), $Heap), 
    source#0: ref
       where $Is(source#0, Tclass._module.Lifetime())
         && $IsAlloc(source#0, Tclass._module.Lifetime(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 23 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2345"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#10: ref :: 
      { _module.Object.inv($Heap, o#10) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10)) } 
      $Is(o#10, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10))
         ==> _module.Object.inv($Heap, o#10));
  requires {:id "id2346"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(target#0)), 
      $Box(source#0)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id2347"} $Unbox(read($Heap, target#0, _module.Lifetime.owner)): ref
     == $Unbox(read($Heap, source#0, _module.Lifetime.owner)): ref;
  requires {:id "id2348"} $Unbox(read($Heap, source#0, _module.Lifetime.owner)): ref == running#0;
  free requires {:id "id2349"} _module.Universe.outlives#canCall($Heap, universe#0, target#0, source#0)
     && 
    _module.Universe.outlives($LS($LZ), $Heap, universe#0, target#0, source#0)
     && (Set#IsMember($Unbox(read($Heap, source#0, _module.Lifetime.mightPointTo)): Set, 
        $Box(target#0))
       || (exists x#1: ref :: 
        { _module.Universe.outlivesThrough($LS($LZ), $Heap, universe#0, target#0, x#1, source#0) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#1)) } 
        $Is(x#1, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#1))
           && _module.Universe.outlivesThrough($LS($LZ), $Heap, universe#0, target#0, x#1, source#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0))));
  ensures {:id "id2350"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id2351"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id2352"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.triggerAxioms($Heap, o#11) } 
                  { _module.Object.baseFieldsInv($Heap, o#11) } 
                  { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#11)
                     && _module.Object.triggerAxioms($Heap, o#11))));
  ensures {:id "id2353"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id2354"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id2355"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#13: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#13) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#13) } 
                  { _module.Object.universe(o#13) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
                $Is(o#13, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
                   ==> _module.Object.universe(o#13) == universe#0
                     && o#13 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#13)
                     && _module.Object.triggerAxioms(old($Heap), o#13))));
  ensures {:id "id2356"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true)));
  ensures {:id "id2357"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0)
               || (forall o#14: ref :: 
                { _module.Object.triggerAxioms($Heap, o#14) } 
                  { _module.Object.baseFieldsInv($Heap, o#14) } 
                  { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
                   ==> _module.Object.universe(o#14) == universe#0
                     && o#14 != universe#0
                     && _module.Object.baseFieldsInv($Heap, o#14)
                     && _module.Object.triggerAxioms($Heap, o#14))));
  ensures {:id "id2358"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
            $Unbox(read($Heap, universe#0, _module.Universe.content)): Set));
  ensures {:id "id2359"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (forall o#15: ref :: 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
            $Is(o#15, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15))
               ==> !$IsAllocBox($Box(o#15), Tclass._module.Object(), old($Heap))));
  ensures {:id "id2360"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
        $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set);
  ensures {:id "id2361"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#16: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#16) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
        $Is(o#16, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#16))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16))
           ==> (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#16 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.sequenceInv2(old($Heap), $Heap, o#16));
  ensures {:id "id2362"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#17: ref :: 
        { $Unbox(read($Heap, o#17, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#17, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#17, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
        $Is(o#17, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
             && $Is($Unbox(read(old($Heap), o#17, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
              read(old($Heap), o#17, _module.OwnedObject.owner))
             && $IsAllocBox(read(old($Heap), o#17, _module.OwnedObject.owner), 
              Tclass._module.Object?(), 
              old($Heap))
           ==> $Unbox(read(old($Heap), o#17, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, o#17, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id2363"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall l#1: ref :: 
        { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1) } 
          { $Unbox(read(old($Heap), l#1, _module.Lifetime.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1)) } 
        $Is(l#1, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1))
           ==> 
          !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
              read(old($Heap), l#1, _module.Lifetime.owner))
             && $IsAllocBox(read(old($Heap), l#1, _module.Lifetime.owner), 
              Tclass._module.Thread?(), 
              old($Heap))
           ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1));
  free ensures true;
  ensures {:id "id2364"} _module.Object.universe(this) == universe#0;
  ensures {:id "id2365"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id2366"} _module.OutlivesClaim.target(this) == target#0;
  ensures {:id "id2367"} _module.OutlivesClaim.source(this) == source#0;
  free ensures true;
  ensures {:id "id2368"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
        $Box(_module.OwnedObject.lifetime(this)))));
  free ensures true;
  ensures {:id "id2369"} Set#Equal($Unbox(read($Heap, target#0, _module.Lifetime.mightPointFrom)): Set, 
    Set#Union($Unbox(read(old($Heap), target#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))));
  free ensures true;
  ensures {:id "id2370"} Set#Equal($Unbox(read($Heap, source#0, _module.Lifetime.mightPointFrom)): Set, 
    Set#Union($Unbox(read(old($Heap), source#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || $o == target#0
         || $o == source#0);
  // frame condition: field granularity
  free ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || 
        $o == universe#0
         || ($o == target#0 && $f == _module.Lifetime.mightPointFrom)
         || ($o == source#0 && $f == _module.Lifetime.mightPointFrom));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OutlivesClaim._ctor (correctness)"} Impl$$_module.OutlivesClaim.__ctor(universe#0: ref, running#0: ref, target#0: ref, source#0: ref)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.lifetime: ref;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.target: ref;
  var this.source: ref;
  var defass#this.lifetime: bool;
  var defass#this.universe: bool;
  var defass#this.target: bool;
  var defass#this.source: bool;
  var $Heap_at_0: Heap;
  var defass#lifetime#0: bool;
  var lifetime#0: ref
     where defass#lifetime#0
       ==> $Is(lifetime#0, Tclass._module.Lifetime())
         && $IsAlloc(lifetime#0, Tclass._module.Lifetime(), $Heap);
  var $rhs#0: ref;
  var $nw: ref;
  var universe##0: ref;
  var running##0: ref;
  var owner##0: ref;
  var mightPointTo##0: Set;
  var running##1: ref;
  var $Heap_at_1: Heap;
  var $rhs#1: Set;
  var running##2: ref;

    // AddMethodImpl: _ctor, Impl$$_module.OutlivesClaim.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || ($o == target#0 && $f == _module.Lifetime.mightPointFrom)
           || ($o == source#0 && $f == _module.Lifetime.mightPointFrom));
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(732,3)
    $Heap_at_0 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(735,18)
    assume true;
    // ----- init call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(735,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := universe#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    owner##0 := running#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    mightPointTo##0 := Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(target#0)), $Box(source#0));
    assert {:id "id2371"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##0
             || (Set#IsMember(mightPointTo##0, $Box($o))
               && $f == _module.Lifetime.mightPointFrom))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id2372"} $nw := Call$$_module.Lifetime.__ctor(universe##0, running##0, owner##0, mightPointTo##0);
    // TrCallStmt: After ProcessCallStmt
    $rhs#0 := $nw;
    lifetime#0 := $rhs#0;
    defass#lifetime#0 := true;

  after_0:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(736,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2375"} universe#0 != null;
    assert {:id "id2376"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0);
    call {:id "id2377"} Call$$_module.Universe.FrameOutlives($Heap_at_0, $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(737,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2378"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##1 := running#0;
    assert {:id "id2379"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id2380"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_0);
    call {:id "id2381"} Call$$_module.Universe.lci($Heap_at_0, $Heap, universe#0, running##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(738,5)
    assume true;
    assert {:id "id2382"} {:split_here} Lit(true);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(740,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2383"} universe#0 != null;
    call {:id "id2384"} Call$$_module.Universe.OutlivesImpliesAlive(universe#0);
    // TrCallStmt: After ProcessCallStmt
    $Heap_at_1 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(743,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;

  after_1:
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(744,16)
    assume true;
    assume true;
    this.owner := running#0;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(745,19)
    assume true;
    assert {:id "id2387"} defass#lifetime#0;
    assume true;
    this.lifetime := lifetime#0;
    defass#this.lifetime := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(746,17)
    assume true;
    assume true;
    this.target := target#0;
    defass#this.target := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(747,17)
    assume true;
    assume true;
    this.source := source#0;
    defass#this.source := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(732,3)
    assert {:id "id2391"} defass#this.lifetime;
    assert {:id "id2392"} defass#this.universe;
    assert {:id "id2393"} defass#this.target;
    assert {:id "id2394"} defass#this.source;
    assume this != null && $Is(this, Tclass._module.OutlivesClaim?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume _module.OwnedObject.lifetime(this) == this.lifetime;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume _module.OutlivesClaim.target(this) == this.target;
    assume _module.OutlivesClaim.source(this) == this.source;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(732,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(749,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2395"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id2396"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(750,23)
    assert {:id "id2397"} lifetime#0 != null;
    assume true;
    assert {:id "id2398"} $_ModifiesFrame[lifetime#0, _module.Lifetime.elements];
    assume true;
    $rhs#1 := Set#UnionOne(Set#Empty(): Set, $Box(this));
    $Heap := update($Heap, lifetime#0, _module.Lifetime.elements, $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(751,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2401"} universe#0 != null;
    assert {:id "id2402"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_1);
    call {:id "id2403"} Call$$_module.Universe.FrameOutlives($Heap_at_1, $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(752,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2404"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##2 := running#0;
    assert {:id "id2405"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_1);
    assert {:id "id2406"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_1);
    call {:id "id2407"} Call$$_module.Universe.lci($Heap_at_1, $Heap, universe#0, running##2);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(753,5)
    assume true;
    assert {:id "id2408"} {:split_here} Lit(true);
}



// $Is axiom for non-null type _module.OutlivesClaim
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.OutlivesClaim()) } 
    { $Is(c#0, Tclass._module.OutlivesClaim?()) } 
  $Is(c#0, Tclass._module.OutlivesClaim())
     <==> $Is(c#0, Tclass._module.OutlivesClaim?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.OutlivesClaim
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.OutlivesClaim(), $h) } 
    { $IsAlloc(c#0, Tclass._module.OutlivesClaim?(), $h) } 
  $IsAlloc(c#0, Tclass._module.OutlivesClaim(), $h)
     <==> $IsAlloc(c#0, Tclass._module.OutlivesClaim?(), $h));

const unique class._module.Mutex?: ClassName;

function Tclass._module.Mutex?() : Ty
uses {
// Tclass._module.Mutex? Tag
axiom Tag(Tclass._module.Mutex?()) == Tagclass._module.Mutex?
   && TagFamily(Tclass._module.Mutex?()) == tytagFamily$Mutex;
axiom implements$_module.OwnedObject(Tclass._module.Mutex?());
}

const unique Tagclass._module.Mutex?: TyTag;

// Box/unbox axiom for Tclass._module.Mutex?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Mutex?()) } 
  $IsBox(bx, Tclass._module.Mutex?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Mutex?()));

// $Is axiom for class Mutex
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Mutex?()) } 
  $Is($o, Tclass._module.Mutex?())
     <==> $o == null || dtype($o) == Tclass._module.Mutex?());

// $IsAlloc axiom for class Mutex
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Mutex?(), $h) } 
  $IsAlloc($o, Tclass._module.Mutex?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.Mutex.data: Field
uses {
axiom FDim(_module.Mutex.data) == 0
   && FieldOfDecl(class._module.Mutex?, field$data) == _module.Mutex.data
   && !$IsGhostField(_module.Mutex.data);
}

// Mutex.data: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.data)): ref } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Mutex?()
     ==> $Is($Unbox(read($h, $o, _module.Mutex.data)): ref, Tclass._module.OwnedU32()));

// Mutex.data: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.data)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Mutex?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Mutex.data)): ref, Tclass._module.OwnedU32(), $h));

const _module.Mutex.locked: Field
uses {
axiom FDim(_module.Mutex.locked) == 0
   && FieldOfDecl(class._module.Mutex?, field$locked) == _module.Mutex.locked
   && !$IsGhostField(_module.Mutex.locked);
}

// Mutex.locked: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.locked)): bool } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Mutex?()
     ==> $Is($Unbox(read($h, $o, _module.Mutex.locked)): bool, TBool));

// Mutex.locked: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.locked)): bool } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Mutex?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Mutex.locked)): bool, TBool, $h));

const _module.Mutex.guards: Field
uses {
axiom FDim(_module.Mutex.guards) == 0
   && FieldOfDecl(class._module.Mutex?, field$guards) == _module.Mutex.guards
   && $IsGhostField(_module.Mutex.guards);
}

function Tclass._module.MutexGuardU32() : Ty
uses {
// Tclass._module.MutexGuardU32 Tag
axiom Tag(Tclass._module.MutexGuardU32()) == Tagclass._module.MutexGuardU32
   && TagFamily(Tclass._module.MutexGuardU32()) == tytagFamily$MutexGuardU32;
}

const unique Tagclass._module.MutexGuardU32: TyTag;

// Box/unbox axiom for Tclass._module.MutexGuardU32
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.MutexGuardU32()) } 
  $IsBox(bx, Tclass._module.MutexGuardU32())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.MutexGuardU32()));

// Mutex.guards: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.guards)): Set } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Mutex?()
     ==> $Is($Unbox(read($h, $o, _module.Mutex.guards)): Set, 
      TSet(Tclass._module.MutexGuardU32())));

// Mutex.guards: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.guards)): Set } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Mutex?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Mutex.guards)): Set, 
      TSet(Tclass._module.MutexGuardU32()), 
      $h));

// function declaration for _module.Mutex.volatileOwns
function _module.Mutex.volatileOwns(this: ref) : bool
uses {
// definition axiom for _module.Mutex.volatileOwns (revealed)
axiom {:id "id2409"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Mutex.volatileOwns(this) } 
    _module.Mutex.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.Mutex.volatileOwns(this) == Lit(true));
// definition axiom for _module.Mutex.volatileOwns for all literals (revealed)
axiom {:id "id2410"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.Mutex.volatileOwns(Lit(this)) } 
    _module.Mutex.volatileOwns#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.Mutex.volatileOwns(Lit(this)) == Lit(true));
}

function _module.Mutex.volatileOwns#canCall(this: ref) : bool;

function Tclass._module.Mutex() : Ty
uses {
// Tclass._module.Mutex Tag
axiom Tag(Tclass._module.Mutex()) == Tagclass._module.Mutex
   && TagFamily(Tclass._module.Mutex()) == tytagFamily$Mutex;
}

const unique Tagclass._module.Mutex: TyTag;

// Box/unbox axiom for Tclass._module.Mutex
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Mutex()) } 
  $IsBox(bx, Tclass._module.Mutex())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Mutex()));

function _module.Mutex.volatileOwns#requires(ref) : bool;

// #requires axiom for _module.Mutex.volatileOwns
axiom (forall this: ref :: 
  { _module.Mutex.volatileOwns#requires(this) } 
  this != null && $Is(this, Tclass._module.Mutex())
     ==> _module.Mutex.volatileOwns#requires(this) == true);

// override axiom for _module.OwnedObject.volatileOwns in class _module.Mutex
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.volatileOwns(this), $Is(this, Tclass._module.Mutex()) } 
      { _module.OwnedObject.volatileOwns(this), _module.Mutex.volatileOwns(this) } 
    _module.Mutex.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.volatileOwns(this) == _module.Mutex.volatileOwns(this));

procedure {:verboseName "Mutex.volatileOwns (well-formedness)"} CheckWellformed$$_module.Mutex.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Mutex.volatileOwns (override check)"} OverrideCheck$$_module.Mutex.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.volatileOwns (override check)"} OverrideCheck$$_module.Mutex.volatileOwns(this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2412"} true;
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id2413"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.Mutex.objectUserFields
function _module.Mutex.objectUserFields($heap: Heap, this: ref) : Set
uses {
// consequence axiom for _module.Mutex.objectUserFields
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Mutex.objectUserFields($Heap, this) } 
    _module.Mutex.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> $Is(_module.Mutex.objectUserFields($Heap, this), TSet(Tclass._module.Object())));
// alloc consequence axiom for _module.Mutex.objectUserFields
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { $IsAlloc(_module.Mutex.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap) } 
    _module.Mutex.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && this != null
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> $IsAlloc(_module.Mutex.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap));
// definition axiom for _module.Mutex.objectUserFields (revealed)
axiom {:id "id2414"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Mutex.objectUserFields($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> _module.Mutex.objectUserFields($Heap, this)
         == (var r#0 := Set#Union($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
              Set#UnionOne(Set#Empty(): Set, read($Heap, this, _module.Mutex.data))); 
          r#0));
}

function _module.Mutex.objectUserFields#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.objectUserFields
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.objectUserFields($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Mutex())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.objectUserFields($h0, this)
       == _module.Mutex.objectUserFields($h1, this));

function _module.Mutex.objectUserFields#requires(Heap, ref) : bool;

// #requires axiom for _module.Mutex.objectUserFields
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Mutex.objectUserFields#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $Heap)
     ==> _module.Mutex.objectUserFields#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.objectUserFields in class _module.Mutex
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.objectUserFields($Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.objectUserFields($Heap, this), _module.Mutex.objectUserFields($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.objectUserFields($Heap, this)
         == _module.Mutex.objectUserFields($Heap, this));

procedure {:verboseName "Mutex.objectUserFields (well-formedness)"} CheckWellformed$$_module.Mutex.objectUserFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.objectUserFields (well-formedness)"} CheckWellformed$$_module.Mutex.objectUserFields(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var r#Z#0: Set;
  var let#0#0#0: Set;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.Mutex.objectUserFields($Heap, this), TSet(Tclass._module.Object()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc r#Z#0;
        b$reqreads#0 := $_ReadsFrame[this, _module.Mutex.guards];
        b$reqreads#1 := $_ReadsFrame[this, _module.Mutex.data];
        assume {:id "id2415"} let#0#0#0
           == Set#Union($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
            Set#UnionOne(Set#Empty(): Set, read($Heap, this, _module.Mutex.data)));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, TSet(Tclass._System.object()));
        assume {:id "id2416"} r#Z#0 == let#0#0#0;
        assert {:id "id2417"} $Is(r#Z#0, TSet(Tclass._module.Object()));
        assume {:id "id2418"} _module.Mutex.objectUserFields($Heap, this) == r#Z#0;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.objectUserFields($Heap, this), TSet(Tclass._module.Object()));
        assert {:id "id2419"} b$reqreads#0;
        assert {:id "id2420"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.objectUserFields (override check)"} OverrideCheck$$_module.Mutex.objectUserFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.objectUserFields (override check)"} OverrideCheck$$_module.Mutex.objectUserFields(this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2421"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id2422"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.Mutex.unchangedNonvolatileUserFields
function _module.Mutex.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Mutex.unchangedNonvolatileUserFields (revealed)
axiom {:id "id2423"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap))
       ==> _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == Lit(true));
}

function _module.Mutex.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Mutex())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.Mutex.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Mutex.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Mutex.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap)
     ==> _module.Mutex.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.Mutex
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "Mutex.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.Mutex.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "Mutex.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.Mutex.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.Mutex.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id2425"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id2426"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.Mutex.localUserInv
function _module.Mutex.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Mutex.localUserInv (revealed)
axiom {:id "id2427"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Mutex.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.localUserInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> _module.Mutex.localUserInv($Heap, this)
         == (
          _module.OwnedObject.lifetime(this)
             == _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.Mutex.data)): ref)
           && ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
             ==> $Is($Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref, 
                Tclass._module.MutexGuardU32())
               && (var mutexGuard#0 := $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref; 
                $Unbox(read($Heap, mutexGuard#0, _module.OwnedObject.owner)): ref != null
                   && $Unbox(read($Heap, mutexGuard#0, _module.MutexGuardU32.mutex)): ref == this
                   && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
                    Set#UnionOne(Set#Empty(): Set, $Box(mutexGuard#0)))))
           && (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref
                 == this
               && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set))));
}

function _module.Mutex.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.localUserInv($h0, this) == _module.Mutex.localUserInv($h1, this));

function _module.Mutex.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Mutex.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Mutex.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $Heap)
     ==> _module.Mutex.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.Mutex
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.Mutex.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.localUserInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.Mutex.localUserInv($Heap, this));

procedure {:verboseName "Mutex.localUserInv (well-formedness)"} CheckWellformed$$_module.Mutex.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.localUserInv (well-formedness)"} CheckWellformed$$_module.Mutex.localUserInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var mutexGuard#Z#0: ref;
  var let#0#0#0: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var newtype$check#2: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.Mutex.data];
        assert {:id "id2428"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
        if (_module.OwnedObject.lifetime(this)
           == _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.Mutex.data)): ref))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.Mutex.locked];
            if ($Unbox(read($Heap, this, _module.Mutex.locked)): bool)
            {
                b$reqreads#2 := $_ReadsFrame[this, _module.Mutex.data];
                assert {:id "id2429"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
                b$reqreads#3 := $_ReadsFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.owner];
                if ($Is($Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref, 
                  Tclass._module.MutexGuardU32()))
                {
                    havoc mutexGuard#Z#0;
                    b$reqreads#4 := $_ReadsFrame[this, _module.Mutex.data];
                    assert {:id "id2430"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
                    b$reqreads#5 := $_ReadsFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.owner];
                    newtype$check#0 := $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                        _module.OwnedObject.owner)): ref;
                    assert {:id "id2431"} $Is(newtype$check#0, Tclass._module.MutexGuardU32());
                    newtype$check#1 := $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                        _module.OwnedObject.owner)): ref;
                    assume {:id "id2432"} let#0#0#0
                       == $Unbox(read($Heap, 
                          $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                          _module.OwnedObject.owner)): ref;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0#0#0, Tclass._module.MutexGuardU32());
                    assume {:id "id2433"} mutexGuard#Z#0 == let#0#0#0;
                    assert {:id "id2434"} mutexGuard#Z#0 != null;
                    b$reqreads#6 := $_ReadsFrame[mutexGuard#Z#0, _module.OwnedObject.owner];
                    newtype$check#2 := null;
                    if ($Unbox(read($Heap, mutexGuard#Z#0, _module.OwnedObject.owner)): ref != null)
                    {
                        assert {:id "id2435"} mutexGuard#Z#0 != null;
                        b$reqreads#7 := $_ReadsFrame[mutexGuard#Z#0, _module.MutexGuardU32.mutex];
                    }

                    if ($Unbox(read($Heap, mutexGuard#Z#0, _module.OwnedObject.owner)): ref != null
                       && $Unbox(read($Heap, mutexGuard#Z#0, _module.MutexGuardU32.mutex)): ref == this)
                    {
                        b$reqreads#8 := $_ReadsFrame[this, _module.Mutex.guards];
                    }
                }
            }
        }

        if (_module.OwnedObject.lifetime(this)
             == _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.Mutex.data)): ref)
           && ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
             ==> $Is($Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref, 
                Tclass._module.MutexGuardU32())
               && (var mutexGuard#1 := $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref; 
                $Unbox(read($Heap, mutexGuard#1, _module.OwnedObject.owner)): ref != null
                   && $Unbox(read($Heap, mutexGuard#1, _module.MutexGuardU32.mutex)): ref == this
                   && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
                    Set#UnionOne(Set#Empty(): Set, $Box(mutexGuard#1))))))
        {
            b$reqreads#9 := $_ReadsFrame[this, _module.Mutex.locked];
            if (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool)
            {
                b$reqreads#10 := $_ReadsFrame[this, _module.Mutex.data];
                assert {:id "id2436"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
                b$reqreads#11 := $_ReadsFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.owner];
                if ($Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref
                   == this)
                {
                    b$reqreads#12 := $_ReadsFrame[this, _module.Mutex.guards];
                }
            }
        }

        assume {:id "id2437"} _module.Mutex.localUserInv($Heap, this)
           == (
            _module.OwnedObject.lifetime(this)
               == _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.Mutex.data)): ref)
             && ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> $Is($Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref, 
                  Tclass._module.MutexGuardU32())
                 && (var mutexGuard#1 := $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                        _module.OwnedObject.owner)): ref; 
                  $Unbox(read($Heap, mutexGuard#1, _module.OwnedObject.owner)): ref != null
                     && $Unbox(read($Heap, mutexGuard#1, _module.MutexGuardU32.mutex)): ref == this
                     && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
                      Set#UnionOne(Set#Empty(): Set, $Box(mutexGuard#1)))))
             && (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref
                   == this
                 && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set)));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.localUserInv($Heap, this), TBool);
        assert {:id "id2438"} b$reqreads#0;
        assert {:id "id2439"} b$reqreads#1;
        assert {:id "id2440"} b$reqreads#2;
        assert {:id "id2441"} b$reqreads#3;
        assert {:id "id2442"} b$reqreads#4;
        assert {:id "id2443"} b$reqreads#5;
        assert {:id "id2444"} b$reqreads#6;
        assert {:id "id2445"} b$reqreads#7;
        assert {:id "id2446"} b$reqreads#8;
        assert {:id "id2447"} b$reqreads#9;
        assert {:id "id2448"} b$reqreads#10;
        assert {:id "id2449"} b$reqreads#11;
        assert {:id "id2450"} b$reqreads#12;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.localUserInv (override check)"} OverrideCheck$$_module.Mutex.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.localUserInv (override check)"} OverrideCheck$$_module.Mutex.localUserInv(this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2451"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2452"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Mutex.userInv
function _module.Mutex.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Mutex.userInv
axiom 12 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Mutex.userInv($Heap, this) } 
    _module.Mutex.userInv#canCall($Heap, this)
         || (12 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> 
      _module.Mutex.userInv($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this));
// definition axiom for _module.Mutex.userInv (revealed)
axiom {:id "id2453"} 12 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Mutex.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.userInv#canCall($Heap, this)
         || (12 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> _module.Mutex.localUserInv#canCall($Heap, this)
         && (_module.Mutex.localUserInv($Heap, this)
           ==> (forall g#0: ref :: 
            { _module.OwnedObject.localInv($Heap, g#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0)) } 
            $Is(g#0, Tclass._module.MutexGuardU32())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0))
               ==> _module.OwnedObject.localInv#canCall($Heap, g#0)))
         && _module.Mutex.userInv($Heap, this)
           == (_module.Mutex.localUserInv($Heap, this)
             && (forall g#0: ref :: 
              { _module.OwnedObject.localInv($Heap, g#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0)) } 
              $Is(g#0, Tclass._module.MutexGuardU32())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0))
                 ==> _module.OwnedObject.localInv($Heap, g#0))));
}

function _module.Mutex.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.userInv($h0, this) == _module.Mutex.userInv($h1, this));

function _module.Mutex.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Mutex.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Mutex.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $Heap)
     ==> _module.Mutex.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.Mutex
axiom 12 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.Mutex.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.userInv#canCall($Heap, this)
         || (12 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.userInv($Heap, this) == _module.Mutex.userInv($Heap, this));

procedure {:verboseName "Mutex.userInv (well-formedness)"} CheckWellformed$$_module.Mutex.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 12 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id2454"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || _module.OwnedObject.lifetime(this)
         == _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.Mutex.data)): ref);
  ensures {:id "id2455"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> $Is($Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
              _module.OwnedObject.owner)): ref, 
          Tclass._module.MutexGuardU32()));
  ensures {:id "id2456"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> (var mutexGuard#0 := $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref; 
          $Unbox(read($Heap, mutexGuard#0, _module.OwnedObject.owner)): ref != null));
  ensures {:id "id2457"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> (var mutexGuard#0 := $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref; 
          $Unbox(read($Heap, mutexGuard#0, _module.MutexGuardU32.mutex)): ref == this));
  ensures {:id "id2458"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> (var mutexGuard#0 := $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref; 
          Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
            Set#UnionOne(Set#Empty(): Set, $Box(mutexGuard#0)))));
  ensures {:id "id2459"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
              _module.OwnedObject.owner)): ref
           == this);
  ensures {:id "id2460"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.userInv (well-formedness)"} CheckWellformed$$_module.Mutex.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var g#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assert {:id "id2461"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Mutex.userInv#canCall($Heap, this);
            assume {:id "id2462"} _module.Mutex.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assume _module.Mutex.localUserInv#canCall($Heap, this);
            assume {:id "id2463"} _module.Mutex.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id2464"} _module.Mutex.userInv($Heap, this) ==> _module.Mutex.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Mutex.localUserInv#canCall($Heap, this);
        if (_module.Mutex.localUserInv($Heap, this))
        {
            // Begin Comprehension WF check
            havoc g#1;
            if ($Is(g#1, Tclass._module.MutexGuardU32())
               && $IsAlloc(g#1, Tclass._module.MutexGuardU32(), $Heap))
            {
                b$reqreads#1 := $_ReadsFrame[this, _module.Mutex.guards];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#1)))
                {
                    assert {:id "id2465"} g#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(g#1), Tclass._module.OwnedObject?(), $Heap);
                    b$reqreads#2 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.OwnedObject.localInv#canCall($Heap, g#1);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id2466"} _module.Mutex.userInv($Heap, this)
           == (_module.Mutex.localUserInv($Heap, this)
             && (forall g#2: ref :: 
              { _module.OwnedObject.localInv($Heap, g#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#2)) } 
              $Is(g#2, Tclass._module.MutexGuardU32())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#2))
                 ==> _module.OwnedObject.localInv($Heap, g#2)));
        assume _module.Mutex.localUserInv#canCall($Heap, this)
           && (_module.Mutex.localUserInv($Heap, this)
             ==> (forall g#2: ref :: 
              { _module.OwnedObject.localInv($Heap, g#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#2)) } 
              $Is(g#2, Tclass._module.MutexGuardU32())
                 ==> 
                Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#2))
                 ==> _module.OwnedObject.localInv#canCall($Heap, g#2)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.userInv($Heap, this), TBool);
        assert {:id "id2467"} b$reqreads#0;
        assert {:id "id2468"} b$reqreads#1;
        assert {:id "id2469"} b$reqreads#2;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.userInv (override check)"} OverrideCheck$$_module.Mutex.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 12 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.userInv (override check)"} OverrideCheck$$_module.Mutex.userInv(this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2470"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2471"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id2472"} _module.Mutex.userInv($Heap, this) ==> _module.Mutex.localUserInv($Heap, this);
    assert {:id "id2473"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || _module.OwnedObject.lifetime(this)
           == _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.Mutex.data)): ref);
    assert {:id "id2474"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> $Is($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref, 
            Tclass._module.MutexGuardU32()));
    assert {:id "id2475"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> (var mutexGuard#1 := $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref; 
            $Unbox(read($Heap, mutexGuard#1, _module.OwnedObject.owner)): ref != null));
    assert {:id "id2476"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> (var mutexGuard#1 := $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref; 
            $Unbox(read($Heap, mutexGuard#1, _module.MutexGuardU32.mutex)): ref == this));
    assert {:id "id2477"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> (var mutexGuard#1 := $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref; 
            Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
              Set#UnionOne(Set#Empty(): Set, $Box(mutexGuard#1)))));
    assert {:id "id2478"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref
             == this);
    assert {:id "id2479"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set));
}



// function declaration for _module.Mutex.localUserInv2
function _module.Mutex.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Mutex.localUserInv2 (revealed)
axiom {:id "id2480"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Mutex.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap))
       ==> _module.Mutex.localUserInv2($prevHeap, $Heap, this)
         == (true
           && $Unbox(read($prevHeap, this, _module.Mutex.data)): ref
             == $Unbox(read($Heap, this, _module.Mutex.data)): ref));
}

function _module.Mutex.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.localUserInv2($prevHeap, $h0, this)
       == _module.Mutex.localUserInv2($prevHeap, $h1, this));

function _module.Mutex.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Mutex.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Mutex.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap)
     ==> _module.Mutex.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.Mutex
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.Mutex.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.Mutex.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "Mutex.localUserInv2 (well-formedness)"} CheckWellformed$$_module.Mutex.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.localUserInv2 (well-formedness)"} CheckWellformed$$_module.Mutex.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            assert {:id "id2481"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
            b$reqreads#0 := $_ReadsFrame[this, _module.Mutex.data];
        }

        assume {:id "id2482"} _module.Mutex.localUserInv2(old($Heap), $Heap, this)
           == (true
             && $Unbox(read(old($Heap), this, _module.Mutex.data)): ref
               == $Unbox(read($Heap, this, _module.Mutex.data)): ref);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.localUserInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id2483"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.localUserInv2 (override check)"} OverrideCheck$$_module.Mutex.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.localUserInv2 (override check)"} OverrideCheck$$_module.Mutex.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id2484"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2485"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Mutex.userInv2
function _module.Mutex.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Mutex.userInv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Mutex.userInv2($prevHeap, $Heap, this) } 
    _module.Mutex.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap))
       ==> 
      _module.Mutex.userInv2($prevHeap, $Heap, this)
       ==> _module.Mutex.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.Mutex.userInv2 (revealed)
axiom {:id "id2486"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Mutex.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap))
       ==> (Lit(true) ==> _module.Mutex.localUserInv2#canCall($prevHeap, $Heap, this))
         && _module.Mutex.userInv2($prevHeap, $Heap, this)
           == (true && _module.Mutex.localUserInv2($prevHeap, $Heap, this)));
}

function _module.Mutex.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.userInv2($prevHeap, $h0, this)
       == _module.Mutex.userInv2($prevHeap, $h1, this));

function _module.Mutex.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Mutex.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Mutex.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap)
     ==> _module.Mutex.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.Mutex
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.Mutex.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.Mutex.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "Mutex.userInv2 (well-formedness)"} CheckWellformed$$_module.Mutex.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id2487"} _module.Mutex.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Mutex.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Mutex.localUserInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id2488"} _module.Mutex.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Mutex.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Mutex.localUserInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.Mutex.data)): ref
         == $Unbox(read(current$Heap, this, _module.Mutex.data)): ref;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.userInv2 (well-formedness)"} CheckWellformed$$_module.Mutex.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assert {:id "id2489"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
            assert {:id "id2490"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Mutex.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id2491"} _module.Mutex.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assert {:id "id2492"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
            assume _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id2493"} _module.Mutex.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id2494"} _module.Mutex.userInv2(old($Heap), $Heap, this)
               ==> _module.Mutex.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assert {:id "id2495"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id2496"} _module.Mutex.userInv2(old($Heap), $Heap, this)
           == (true && _module.Mutex.localUserInv2(old($Heap), $Heap, this));
        assume Lit(true) ==> _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id2497"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.userInv2 (override check)"} OverrideCheck$$_module.Mutex.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.userInv2 (override check)"} OverrideCheck$$_module.Mutex.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id2498"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2499"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id2500"} _module.Mutex.userInv2(old($Heap), $Heap, this)
       ==> _module.Mutex.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id2501"} _module.Mutex.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Mutex.localUserInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id2502"} _module.Mutex.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Mutex.localUserInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.Mutex.data)): ref
           == $Unbox(read($Heap, this, _module.Mutex.data)): ref;
}



procedure {:verboseName "Mutex.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.Mutex.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id2503"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assert {:id "id2504"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id2505"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id2506"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id2507"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Mutex.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id2508"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id2509"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id2510"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id2511"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2512"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id2513"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2514"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id2515"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id2516"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id2517"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || Set#Subset(running#0, 
              $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id2518"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id2519"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object?(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id2520"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall l#0: ref :: 
              { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#0)) } 
              $Is(l#0, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#0))
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), l#0, _module.Lifetime.owner))
                   && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                    Tclass._module.Thread?(), 
                    old($Heap))
                 ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0)));
    assert {:id "id2521"} Set#Subset(running#0, running#0);
    assert {:id "id2522"} (forall $o: ref, $f: Field :: true);
    assert {:id "id2523"} (forall $o: ref, $f: Field :: true);
    assume {:id "id2524"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id2525"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Mutex.sequenceAdmissibility (call)"} Call$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id2526"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id2527"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id2528"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2529"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id2530"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2531"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id2532"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id2533"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id2534"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || Set#Subset(running#0, 
            $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id2535"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id2536"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id2537"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall l#1: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
              { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(l#1)) } 
            $Is(l#1, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#1))
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, l#1, _module.Lifetime.owner))
                 && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  previous$Heap)
               ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id2538"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && 
    ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
       ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null)
     && $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       ==> true
         && _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this))
     && ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
        Tclass._module.OwnedObject())
       ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
        !_module.OwnedObject.volatileOwns(oldOwner#0)
             && $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
           ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Mutex.sequenceAdmissibility (correctness)"} Impl$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id2539"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id2540"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
         ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null);
  ensures {:id "id2541"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id2542"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id2543"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id2544"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id2545"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#1)
               && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.sequenceAdmissibility (correctness)"} Impl$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.Mutex.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Mutex.admissibility (well-formedness)"} CheckWellFormed$$_module.Mutex.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.admissibility (well-formedness)"} CheckWellFormed$$_module.Mutex.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Mutex.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id2546"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assert {:id "id2547"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id2548"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id2549"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id2550"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id2551"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "Mutex.admissibility (override check)"} OverrideCheck$$_module.Mutex.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.admissibility (override check)"} OverrideCheck$$_module.Mutex.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id2552"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id2553"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id2554"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id2555"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id2556"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id2557"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id2558"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id2559"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id2560"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id2561"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id2562"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id2563"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object?(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id2564"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall l#0: ref :: 
                  { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                    { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#0)) } 
                  $Is(l#0, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(l#0))
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), l#0, _module.Lifetime.owner))
                       && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                        Tclass._module.Thread?(), 
                        old($Heap))
                     ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0))));
    assert {:id "id2565"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2566"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id2567"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id2568"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id2569"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id2570"} running#0 != null ==> running#0 != null;
    assert {:id "id2571"} (forall $o: ref, $f: Field :: true);
    assert {:id "id2572"} (forall $o: ref, $f: Field :: true);
    assume {:id "id2573"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id2574"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id2575"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "Mutex.admissibility (call)"} Call$$_module.Mutex.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id2576"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id2577"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id2578"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id2579"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#9: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#9) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#9) } 
                          { _module.Object.universe(o#9) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9)) } 
                        $Is(o#9, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#9))
                           ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                             && o#9 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#9)
                             && _module.Object.triggerAxioms(previous$Heap, o#9))))));
  requires {:id "id2580"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id2581"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#10: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#10) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#10) } 
                          { _module.Object.universe(o#10) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#10)) } 
                        $Is(o#10, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#10))
                           ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                             && o#10 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#10)
                             && _module.Object.triggerAxioms(current$Heap, o#10))))));
  requires {:id "id2582"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id2583"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#11: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                    $Is(o#11, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                       ==> !$IsAllocBox($Box(o#11), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id2584"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id2585"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#12: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#12
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12))));
  requires {:id "id2586"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#13: ref :: 
                { $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                     && $Is($Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#13, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#13, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id2587"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall l#1: ref :: 
                { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
                  { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#1)) } 
                $Is(l#1, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#1))
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, l#1, _module.Lifetime.owner))
                     && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                      Tclass._module.Thread?(), 
                      previous$Heap)
                   ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1))));
  requires {:id "id2588"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2589"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#14: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#14) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#14) } 
                      { _module.Object.universe(o#14) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#14)) } 
                    $Is(o#14, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#14))
                       ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                         && o#14 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#14)
                         && _module.Object.triggerAxioms(previous$Heap, o#14)))));
  requires {:id "id2590"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.inv(previous$Heap, o#15) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.inv(previous$Heap, o#15))));
  requires {:id "id2591"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#16: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#16) } 
              { _module.Object.inv(current$Heap, o#16) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#16))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#16))));
  requires {:id "id2592"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#17: ref :: 
            { _module.Object.inv(current$Heap, o#17) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
               ==> _module.Object.inv(current$Heap, o#17)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id2593"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.OwnedObject.userInv2(previous$Heap, current$Heap, this))
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
             && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
              $IsAllocBox($Box(currOwner#0), Tclass._module.Object?(), previous$Heap)
                 ==> _module.Object.localInv2(previous$Heap, 
                  current$Heap, 
                  $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref))));
  free ensures {:id "id2594"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.OwnedObject.userInv(current$Heap, this));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Mutex.admissibility (correctness)"} Impl$$_module.Mutex.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id2595"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id2596"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id2597"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this)));
  ensures {:id "id2598"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
             ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null));
  ensures {:id "id2599"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id2600"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> Lit(true)));
  ensures {:id "id2601"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2602"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id2603"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              !_module.OwnedObject.volatileOwns(oldOwner#1)
                   && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id2604"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.userInv2(previous$Heap, current$Heap, this));
  ensures {:id "id2605"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2606"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2607"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> 
        $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2608"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> 
        $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object?(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id2609"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id2610"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id2611"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id2612"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#28: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#28) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#28) } 
                      { _module.Object.universe(o#28) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#28)) } 
                    $Is(o#28, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#28))
                       ==> _module.Object.universe(o#28) == _module.Object.universe(this)
                         && o#28 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#28)
                         && _module.Object.triggerAxioms(current$Heap, o#28)))));
  ensures {:id "id2613"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
            $Box(this)));
  ensures {:id "id2614"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Lifetime.alive(current$Heap, _module.OwnedObject.lifetime(this))
             ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null));
  ensures {:id "id2615"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.localUserInv(current$Heap, this)));
  ensures {:id "id2616"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.userInv(current$Heap, this));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.admissibility (correctness)"} Impl$$_module.Mutex.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var defass#mutexGuard#0_0: bool;
  var mutexGuard#0_0: ref
     where defass#mutexGuard#0_0
       ==> $Is(mutexGuard#0_0, Tclass._module.MutexGuardU32())
         && $IsAlloc(mutexGuard#0_0, Tclass._module.MutexGuardU32(), $Heap);
  var newtype$check#0_0: ref;
  var newtype$check#0_1: ref;
  var newtype$check#1: ref;

    // AddMethodImpl: admissibility, Impl$$_module.Mutex.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(800,27)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2617"} _module.Object.universe(this) != null;
    assert {:id "id2618"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id2619"} Call$$_module.Universe.FrameOutlives(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(801,5)
    newtype$check#0 := null;
    if ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
    {
    }

    assume true;
    if ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       && $Unbox(read($Heap, this, _module.Mutex.locked)): bool)
    {
        push;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(802,22)
        assume true;
        assert {:id "id2620"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
        newtype$check#0_0 := $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
            _module.OwnedObject.owner)): ref;
        assert {:id "id2621"} $Is(newtype$check#0_0, Tclass._module.MutexGuardU32());
        newtype$check#0_1 := $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
            _module.OwnedObject.owner)): ref;
        assume true;
        mutexGuard#0_0 := $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
            _module.OwnedObject.owner)): ref;
        defass#mutexGuard#0_0 := true;
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(803,7)
        assert {:id "id2623"} defass#mutexGuard#0_0;
        assert {:id "id2624"} {:subsumption 0} mutexGuard#0_0 != null;
        assert {:id "id2625"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
        assert {:id "id2626"} {:subsumption 0} _module.Object.universe(this) != null;
        assert {:id "id2627"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
        assume true;
        assert {:id "id2628"} Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(_module.OwnedObject.lifetime(mutexGuard#0_0)));
        pop;
    }
    else
    {
    }

    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(805,5)
    assert {:id "id2629"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assume true;
    assert {:id "id2630"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(806,5)
    newtype$check#1 := null;
    if ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null)
    {
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
        assume _module.Mutex.userInv#canCall($Heap, this);
    }

    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.Mutex.userInv#canCall($Heap, this);
    assert {:id "id2631"} {:subsumption 0} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> 
      _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || _module.OwnedObject.lifetime(this)
               == _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.Mutex.data)): ref));
    assert {:id "id2632"} {:subsumption 0} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> 
      _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> $Is($Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref, 
                Tclass._module.MutexGuardU32())));
    assert {:id "id2633"} {:subsumption 0} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> 
      _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> (var mutexGuard#0 := $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref; 
                $Unbox(read($Heap, mutexGuard#0, _module.OwnedObject.owner)): ref != null)));
    assert {:id "id2634"} {:subsumption 0} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> 
      _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> (var mutexGuard#0 := $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref; 
                $Unbox(read($Heap, mutexGuard#0, _module.MutexGuardU32.mutex)): ref == this)));
    assert {:id "id2635"} {:subsumption 0} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> 
      _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> (var mutexGuard#0 := $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref; 
                Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
                  Set#UnionOne(Set#Empty(): Set, $Box(mutexGuard#0))))));
    assert {:id "id2636"} {:subsumption 0} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> 
      _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref
                 == this));
    assert {:id "id2637"} {:subsumption 0} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> 
      _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set)));
    assert {:id "id2638"} {:subsumption 0} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> 
      _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (forall g#0: ref :: 
          { _module.OwnedObject.localInv($Heap, g#0) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0)) } 
          $Is(g#0, Tclass._module.MutexGuardU32())
               && Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0))
             ==> _module.OwnedObject.localInv($Heap, g#0));
    assume {:id "id2639"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.Mutex.userInv($Heap, this);
}



procedure {:verboseName "Mutex._ctor (well-formedness)"} CheckWellFormed$$_module.Mutex.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    data#0: ref
       where $Is(data#0, Tclass._module.OwnedU32())
         && $IsAlloc(data#0, Tclass._module.OwnedU32(), $Heap))
   returns (this: ref);
  free requires 22 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex._ctor (well-formedness)"} CheckWellFormed$$_module.Mutex.__ctor(universe#0: ref, running#0: ref, data#0: ref) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.Mutex.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || $o == data#0
           || ($o == _module.OwnedObject.lifetime(data#0) && $f == _module.Lifetime.elements));
    assert {:id "id2640"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id2641"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id2642"} universe#0 != null;
    assume {:id "id2643"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(data#0)), 
      $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
    assert {:id "id2644"} data#0 != null;
    assume {:id "id2645"} $Unbox(read($Heap, data#0, _module.OwnedObject.owner)): ref == running#0;
    assert {:id "id2646"} data#0 != null;
    assert {:id "id2647"} _module.OwnedObject.lifetime(data#0) != null;
    assume {:id "id2648"} $Unbox(read($Heap, _module.OwnedObject.lifetime(data#0), _module.Lifetime.owner)): ref
       == running#0;
    assert {:id "id2649"} data#0 != null;
    assert {:id "id2650"} _module.OwnedObject.lifetime(data#0) != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || $o == data#0
           || $o == _module.OwnedObject.lifetime(data#0));
    assume (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
           || 
          $o == universe#0
           || $o == data#0
           || ($o == _module.OwnedObject.lifetime(data#0) && $f == _module.Lifetime.elements));
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2651"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id2652"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id2653"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id2654"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id2655"} _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id2656"} _module.Object.universe(this) == universe#0;
    assume {:id "id2657"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assert {:id "id2658"} data#0 != null;
    assume {:id "id2659"} _module.OwnedObject.lifetime(this) == _module.OwnedObject.lifetime(data#0);
    assume {:id "id2660"} $Unbox(read($Heap, this, _module.Mutex.data)): ref == data#0;
    assume {:id "id2661"} !$Unbox(read($Heap, this, _module.Mutex.locked)): bool;
    assert {:id "id2662"} universe#0 != null;
    assert {:id "id2663"} universe#0 != null;
    assert {:id "id2664"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id2665"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
    assert {:id "id2666"} data#0 != null;
    assert {:id "id2667"} _module.OwnedObject.lifetime(data#0) != null;
    assert {:id "id2668"} data#0 != null;
    assert {:id "id2669"} $IsAlloc(data#0, Tclass._module.OwnedU32(), old($Heap));
    assert {:id "id2670"} _module.OwnedObject.lifetime(data#0) != null;
    assert {:id "id2671"} $IsAlloc(_module.OwnedObject.lifetime(data#0), Tclass._module.Lifetime(), old($Heap));
    assume {:id "id2672"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(data#0), _module.Lifetime.elements)): Set, 
      Set#Union($Unbox(read(old($Heap), _module.OwnedObject.lifetime(data#0), _module.Lifetime.elements)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "Mutex._ctor (call)"} Call$$_module.Mutex.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    data#0: ref
       where $Is(data#0, Tclass._module.OwnedU32())
         && $IsAlloc(data#0, Tclass._module.OwnedU32(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  // user-defined preconditions
  requires {:id "id2673"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id2674"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id2675"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id2676"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(data#0)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id2677"} $Unbox(read($Heap, data#0, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id2678"} $Unbox(read($Heap, _module.OwnedObject.lifetime(data#0), _module.Lifetime.owner)): ref
     == running#0;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  free ensures {:id "id2679"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id2680"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && _module.Universe.globalInv(old($Heap), universe#0)
     && (forall o#11: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#11) } 
        { _module.Object.inv($Heap, o#11) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11))
         ==> ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv($Heap, o#11))
           && ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv2(old($Heap), $Heap, o#11)))
     && (forall o#12: ref :: 
      { _module.Object.inv($Heap, o#12) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
      $Is(o#12, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
           && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12))
         ==> _module.Object.inv($Heap, o#12));
  free ensures true;
  ensures {:id "id2681"} _module.Object.universe(this) == universe#0;
  ensures {:id "id2682"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id2683"} _module.OwnedObject.lifetime(this) == _module.OwnedObject.lifetime(data#0);
  free ensures true;
  ensures {:id "id2684"} $Unbox(read($Heap, this, _module.Mutex.data)): ref == data#0;
  ensures {:id "id2685"} !$Unbox(read($Heap, this, _module.Mutex.locked)): bool;
  free ensures true;
  ensures {:id "id2686"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  free ensures true;
  ensures {:id "id2687"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(data#0), _module.Lifetime.elements)): Set, 
    Set#Union($Unbox(read(old($Heap), _module.OwnedObject.lifetime(data#0), _module.Lifetime.elements)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || $o == data#0
         || $o == _module.OwnedObject.lifetime(data#0));
  // frame condition: field granularity
  free ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || 
        $o == universe#0
         || $o == data#0
         || ($o == _module.OwnedObject.lifetime(data#0) && $f == _module.Lifetime.elements));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Mutex._ctor (correctness)"} Impl$$_module.Mutex.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    data#0: ref
       where $Is(data#0, Tclass._module.OwnedU32())
         && $IsAlloc(data#0, Tclass._module.OwnedU32(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 22 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2688"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#14: ref :: 
      { _module.Object.inv($Heap, o#14) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
      $Is(o#14, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
         ==> _module.Object.inv($Heap, o#14));
  requires {:id "id2689"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(data#0)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id2690"} $Unbox(read($Heap, data#0, _module.OwnedObject.owner)): ref == running#0;
  requires {:id "id2691"} $Unbox(read($Heap, _module.OwnedObject.lifetime(data#0), _module.Lifetime.owner)): ref
     == running#0;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  ensures {:id "id2692"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id2693"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id2694"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.triggerAxioms($Heap, o#15) } 
                  { _module.Object.baseFieldsInv($Heap, o#15) } 
                  { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                     && o#15 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#15)
                     && _module.Object.triggerAxioms($Heap, o#15))));
  ensures {:id "id2695"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#16: ref :: 
            { _module.Object.inv($Heap, o#16) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> _module.Object.inv($Heap, o#16)));
  ensures {:id "id2696"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true))));
  ensures {:id "id2697"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
                   || (forall o#17: ref :: 
                    { _module.Object.triggerAxioms(old($Heap), o#17) } 
                      { _module.Object.baseFieldsInv(old($Heap), o#17) } 
                      { _module.Object.universe(o#17) } 
                      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
                    $Is(o#17, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
                       ==> _module.Object.universe(o#17) == universe#0
                         && o#17 != universe#0
                         && _module.Object.baseFieldsInv(old($Heap), o#17)
                         && _module.Object.triggerAxioms(old($Heap), o#17)))));
  ensures {:id "id2698"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true))));
  ensures {:id "id2699"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0)
                   || (forall o#18: ref :: 
                    { _module.Object.triggerAxioms($Heap, o#18) } 
                      { _module.Object.baseFieldsInv($Heap, o#18) } 
                      { _module.Object.universe(o#18) } 
                      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
                    $Is(o#18, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
                       ==> _module.Object.universe(o#18) == universe#0
                         && o#18 != universe#0
                         && _module.Object.baseFieldsInv($Heap, o#18)
                         && _module.Object.triggerAxioms($Heap, o#18)))));
  ensures {:id "id2700"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
                $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)));
  ensures {:id "id2701"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (forall o#19: ref :: 
                { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                $Is(o#19, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19))
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19))
                   ==> !$IsAllocBox($Box(o#19), Tclass._module.Object(), old($Heap)))));
  ensures {:id "id2702"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set));
  ensures {:id "id2703"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#20) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
            $Is(o#20, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#20 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#20)));
  ensures {:id "id2704"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21))
                 && $Is($Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#21, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#21, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  ensures {:id "id2705"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall l#1: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1) } 
              { $Unbox(read(old($Heap), l#1, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1)) } 
            $Is(l#1, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1))
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), l#1, _module.Lifetime.owner))
                 && $IsAllocBox(read(old($Heap), l#1, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  old($Heap))
               ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1)));
  ensures {:id "id2706"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id2707"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#22: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#22) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#22) } 
                  { _module.Object.universe(o#22) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22)) } 
                $Is(o#22, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22))
                   ==> _module.Object.universe(o#22) == universe#0
                     && o#22 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#22)
                     && _module.Object.triggerAxioms(old($Heap), o#22))));
  ensures {:id "id2708"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (forall o#23: ref :: 
            { _module.Object.inv(old($Heap), o#23) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
            $Is(o#23, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23))
               ==> _module.Object.inv(old($Heap), o#23)));
  ensures {:id "id2709"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#24: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#24) } 
          { _module.Object.inv($Heap, o#24) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24)) } 
        $Is(o#24, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24))
           ==> ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv($Heap, o#24))
             && ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv2(old($Heap), $Heap, o#24)));
  ensures {:id "id2710"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#25: ref :: 
        { _module.Object.inv($Heap, o#25) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
        $Is(o#25, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25))
             && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25))
           ==> _module.Object.inv($Heap, o#25));
  free ensures true;
  ensures {:id "id2711"} _module.Object.universe(this) == universe#0;
  ensures {:id "id2712"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id2713"} _module.OwnedObject.lifetime(this) == _module.OwnedObject.lifetime(data#0);
  free ensures true;
  ensures {:id "id2714"} $Unbox(read($Heap, this, _module.Mutex.data)): ref == data#0;
  ensures {:id "id2715"} !$Unbox(read($Heap, this, _module.Mutex.locked)): bool;
  free ensures true;
  ensures {:id "id2716"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  free ensures true;
  ensures {:id "id2717"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(data#0), _module.Lifetime.elements)): Set, 
    Set#Union($Unbox(read(old($Heap), _module.OwnedObject.lifetime(data#0), _module.Lifetime.elements)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || $o == data#0
         || $o == _module.OwnedObject.lifetime(data#0));
  // frame condition: field granularity
  free ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || 
        $o == universe#0
         || $o == data#0
         || ($o == _module.OwnedObject.lifetime(data#0) && $f == _module.Lifetime.elements));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex._ctor (correctness)"} Impl$$_module.Mutex.__ctor(universe#0: ref, running#0: ref, data#0: ref)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.lifetime: ref;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.data: ref;
  var this.locked: bool;
  var this.guards: Set;
  var defass#this.lifetime: bool;
  var defass#this.universe: bool;
  var defass#this.data: bool;
  var $rhs#0: Set;
  var $rhs#1: ref;
  var $rhs#2: int;
  var ##last#0: int;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.Mutex.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || $o == data#0
           || ($o == _module.OwnedObject.lifetime(data#0) && $f == _module.Lifetime.elements));
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(823,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(824,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(825,16)
    assume true;
    assume true;
    this.owner := running#0;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(826,19)
    assume true;
    assert {:id "id2720"} data#0 != null;
    assume true;
    this.lifetime := _module.OwnedObject.lifetime(data#0);
    defass#this.lifetime := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(827,15)
    assume true;
    assume true;
    this.data := data#0;
    defass#this.data := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(828,17)
    assume true;
    assume true;
    this.locked := Lit(false);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(829,17)
    assume true;
    assume true;
    this.guards := Lit(Set#Empty(): Set);
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(823,3)
    assert {:id "id2725"} defass#this.lifetime;
    assert {:id "id2726"} defass#this.universe;
    assert {:id "id2727"} defass#this.data;
    assume this != null && $Is(this, Tclass._module.Mutex?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume _module.OwnedObject.lifetime(this) == this.lifetime;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.Mutex.data)): ref == this.data;
    assume $Unbox(read($Heap, this, _module.Mutex.locked)): bool == this.locked;
    assume $Unbox(read($Heap, this, _module.Mutex.guards)): Set == this.guards;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(823,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(831,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2728"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id2729"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(832,28)
    assert {:id "id2730"} data#0 != null;
    assert {:id "id2731"} _module.OwnedObject.lifetime(data#0) != null;
    assume true;
    assert {:id "id2732"} $_ModifiesFrame[_module.OwnedObject.lifetime(data#0), _module.Lifetime.elements];
    assert {:id "id2733"} data#0 != null;
    assert {:id "id2734"} _module.OwnedObject.lifetime(data#0) != null;
    assume true;
    $rhs#0 := Set#Union($Unbox(read($Heap, _module.OwnedObject.lifetime(data#0), _module.Lifetime.elements)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    $Heap := update($Heap, 
      _module.OwnedObject.lifetime(data#0), 
      _module.Lifetime.elements, 
      $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(833,21)
    assert {:id "id2737"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
    assume true;
    assert {:id "id2738"} $_ModifiesFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.owner];
    assume true;
    $rhs#1 := this;
    $Heap := update($Heap, 
      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
      _module.OwnedObject.owner, 
      $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(834,34)
    assert {:id "id2741"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
    assume true;
    assert {:id "id2742"} $_ModifiesFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.nonvolatileVersion];
    assert {:id "id2743"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
    ##last#0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
        _module.OwnedObject.nonvolatileVersion)): int;
    // assume allocatedness for argument to function
    assume $IsAlloc(##last#0, TInt, $Heap);
    assume _module.__default.Bump#canCall($Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
          _module.OwnedObject.nonvolatileVersion)): int);
    assume _module.__default.Bump#canCall($Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
          _module.OwnedObject.nonvolatileVersion)): int);
    $rhs#2 := _module.__default.Bump($Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
          _module.OwnedObject.nonvolatileVersion)): int);
    $Heap := update($Heap, 
      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
      _module.OwnedObject.nonvolatileVersion, 
      $Box($rhs#2));
    assume $IsGoodHeap($Heap);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(835,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assert {:id "id2746"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(this))));
    assert {:id "id2747"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || _module.Object.baseFieldsInv($Heap, this)));
    assert {:id "id2748"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2749"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#26: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#26) } 
                        { _module.Object.baseFieldsInv($Heap, o#26) } 
                        { _module.Object.universe(o#26) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#26)) } 
                      $Is(o#26, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#26))
                         ==> _module.Object.universe(o#26) == _module.Object.universe(this)
                           && o#26 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#26)
                           && _module.Object.triggerAxioms($Heap, o#26)))));
    assert {:id "id2750"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
              $Box(this)));
    assert {:id "id2751"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this))
               ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null));
    assert {:id "id2752"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.localUserInv($Heap, this)));
    assert {:id "id2753"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.OwnedObject.userInv($Heap, this));
    assume {:id "id2754"} _module.OwnedObject.inv($Heap, this);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(836,5)
    assert {:id "id2755"} {:subsumption 0} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox(read($Heap, this, _module.Mutex.data), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref);
    assume _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref);
    assert {:id "id2756"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
                 || Set#IsMember($Unbox(read($Heap, 
                      _module.Object.universe($Unbox(read($Heap, this, _module.Mutex.data)): ref), 
                      _module.Universe.content)): Set, 
                  read($Heap, this, _module.Mutex.data))));
    assert {:id "id2757"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
                 || _module.Object.baseFieldsInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)));
    assert {:id "id2758"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
                 || (_module.Universe.globalBaseInv#canCall($Heap, 
                    _module.Object.universe($Unbox(read($Heap, this, _module.Mutex.data)): ref))
                   ==> _module.Universe.globalBaseInv($Heap, 
                      _module.Object.universe($Unbox(read($Heap, this, _module.Mutex.data)): ref))
                     || Lit(true))));
    assert {:id "id2759"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
                 || (_module.Universe.globalBaseInv#canCall($Heap, 
                    _module.Object.universe($Unbox(read($Heap, this, _module.Mutex.data)): ref))
                   ==> _module.Universe.globalBaseInv($Heap, 
                      _module.Object.universe($Unbox(read($Heap, this, _module.Mutex.data)): ref))
                     || (forall o#27: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#27) } 
                        { _module.Object.baseFieldsInv($Heap, o#27) } 
                        { _module.Object.universe(o#27) } 
                        { Set#IsMember($Unbox(read($Heap, 
                              _module.Object.universe($Unbox(read($Heap, this, _module.Mutex.data)): ref), 
                              _module.Universe.content)): Set, 
                          $Box(o#27)) } 
                      $Is(o#27, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, 
                                _module.Object.universe($Unbox(read($Heap, this, _module.Mutex.data)): ref), 
                                _module.Universe.content)): Set, 
                            $Box(o#27))
                         ==> _module.Object.universe(o#27)
                             == _module.Object.universe($Unbox(read($Heap, this, _module.Mutex.data)): ref)
                           && o#27
                             != _module.Object.universe($Unbox(read($Heap, this, _module.Mutex.data)): ref)
                           && _module.Object.baseFieldsInv($Heap, o#27)
                           && _module.Object.triggerAxioms($Heap, o#27)))));
    assert {:id "id2760"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
             || Set#IsMember($Unbox(read($Heap, 
                  _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.Mutex.data)): ref), 
                  _module.Lifetime.elements)): Set, 
              read($Heap, this, _module.Mutex.data)));
    assert {:id "id2761"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
             || (_module.Lifetime.alive($Heap, 
                _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.Mutex.data)): ref))
               ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref
                 != null));
    assert {:id "id2762"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
             || ($Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref
                 != null
               ==> _module.OwnedObject.localUserInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)));
    assert {:id "id2763"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref)
         || ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref
             != null
           ==> _module.OwnedObject.userInv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref));
    assume {:id "id2764"} _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.Mutex.data)): ref);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(837,27)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2765"} universe#0 != null;
    assert {:id "id2766"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    call {:id "id2767"} Call$$_module.Universe.FrameOutlives(old($Heap), $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(838,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2768"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id2769"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id2770"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id2771"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(839,5)
    assume true;
    assert {:id "id2772"} {:split_here} Lit(true);
}



// $Is axiom for non-null type _module.Mutex
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Mutex()) } { $Is(c#0, Tclass._module.Mutex?()) } 
  $Is(c#0, Tclass._module.Mutex())
     <==> $Is(c#0, Tclass._module.Mutex?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Mutex
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Mutex(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Mutex?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Mutex(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Mutex?(), $h));

const unique class._module.MutexGuardU32?: ClassName;

function Tclass._module.MutexGuardU32?() : Ty
uses {
// Tclass._module.MutexGuardU32? Tag
axiom Tag(Tclass._module.MutexGuardU32?()) == Tagclass._module.MutexGuardU32?
   && TagFamily(Tclass._module.MutexGuardU32?()) == tytagFamily$MutexGuardU32;
axiom implements$_module.OwnedObject(Tclass._module.MutexGuardU32?());
}

const unique Tagclass._module.MutexGuardU32?: TyTag;

// Box/unbox axiom for Tclass._module.MutexGuardU32?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.MutexGuardU32?()) } 
  $IsBox(bx, Tclass._module.MutexGuardU32?())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.MutexGuardU32?()));

// $Is axiom for class MutexGuardU32
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.MutexGuardU32?()) } 
  $Is($o, Tclass._module.MutexGuardU32?())
     <==> $o == null || dtype($o) == Tclass._module.MutexGuardU32?());

// $IsAlloc axiom for class MutexGuardU32
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.MutexGuardU32?(), $h) } 
  $IsAlloc($o, Tclass._module.MutexGuardU32?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.MutexGuardU32.mutex: Field
uses {
axiom FDim(_module.MutexGuardU32.mutex) == 0
   && FieldOfDecl(class._module.MutexGuardU32?, field$mutex)
     == _module.MutexGuardU32.mutex
   && !$IsGhostField(_module.MutexGuardU32.mutex);
}

// MutexGuardU32.mutex: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.MutexGuardU32.mutex)): ref } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.MutexGuardU32?()
     ==> $Is($Unbox(read($h, $o, _module.MutexGuardU32.mutex)): ref, Tclass._module.Mutex()));

// MutexGuardU32.mutex: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.MutexGuardU32.mutex)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.MutexGuardU32?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.MutexGuardU32.mutex)): ref, 
      Tclass._module.Mutex(), 
      $h));

const _module.MutexGuardU32.data: Field
uses {
axiom FDim(_module.MutexGuardU32.data) == 0
   && FieldOfDecl(class._module.MutexGuardU32?, field$data)
     == _module.MutexGuardU32.data
   && $IsGhostField(_module.MutexGuardU32.data);
}

// MutexGuardU32.data: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.MutexGuardU32.data)): ref } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.MutexGuardU32?()
     ==> $Is($Unbox(read($h, $o, _module.MutexGuardU32.data)): ref, Tclass._module.OwnedU32()));

// MutexGuardU32.data: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.MutexGuardU32.data)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.MutexGuardU32?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.MutexGuardU32.data)): ref, 
      Tclass._module.OwnedU32(), 
      $h));

// function declaration for _module.MutexGuardU32.volatileOwns
function _module.MutexGuardU32.volatileOwns(this: ref) : bool
uses {
// definition axiom for _module.MutexGuardU32.volatileOwns (revealed)
axiom {:id "id2773"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.MutexGuardU32.volatileOwns(this) } 
    _module.MutexGuardU32.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.MutexGuardU32.volatileOwns(this) == Lit(false));
// definition axiom for _module.MutexGuardU32.volatileOwns for all literals (revealed)
axiom {:id "id2774"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.MutexGuardU32.volatileOwns(Lit(this)) } 
    _module.MutexGuardU32.volatileOwns#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.MutexGuardU32.volatileOwns(Lit(this)) == Lit(false));
}

function _module.MutexGuardU32.volatileOwns#canCall(this: ref) : bool;

function _module.MutexGuardU32.volatileOwns#requires(ref) : bool;

// #requires axiom for _module.MutexGuardU32.volatileOwns
axiom (forall this: ref :: 
  { _module.MutexGuardU32.volatileOwns#requires(this) } 
  this != null && $Is(this, Tclass._module.MutexGuardU32())
     ==> _module.MutexGuardU32.volatileOwns#requires(this) == true);

// override axiom for _module.OwnedObject.volatileOwns in class _module.MutexGuardU32
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.volatileOwns(this), $Is(this, Tclass._module.MutexGuardU32()) } 
      { _module.OwnedObject.volatileOwns(this), _module.MutexGuardU32.volatileOwns(this) } 
    _module.MutexGuardU32.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.volatileOwns(this)
         == _module.MutexGuardU32.volatileOwns(this));

procedure {:verboseName "MutexGuardU32.volatileOwns (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "MutexGuardU32.volatileOwns (override check)"} OverrideCheck$$_module.MutexGuardU32.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.volatileOwns (override check)"} OverrideCheck$$_module.MutexGuardU32.volatileOwns(this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2776"} true;
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id2777"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.MutexGuardU32.objectUserFields
function _module.MutexGuardU32.objectUserFields($heap: Heap, this: ref) : Set
uses {
// consequence axiom for _module.MutexGuardU32.objectUserFields
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.objectUserFields($Heap, this) } 
    _module.MutexGuardU32.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> $Is(_module.MutexGuardU32.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object())));
// alloc consequence axiom for _module.MutexGuardU32.objectUserFields
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { $IsAlloc(_module.MutexGuardU32.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap) } 
    _module.MutexGuardU32.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && this != null
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> $IsAlloc(_module.MutexGuardU32.objectUserFields($Heap, this), 
        TSet(Tclass._module.Object()), 
        $Heap));
// definition axiom for _module.MutexGuardU32.objectUserFields (revealed)
axiom {:id "id2778"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.objectUserFields($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> _module.MutexGuardU32.objectUserFields($Heap, this)
         == Set#UnionOne(Set#UnionOne(Set#Empty(): Set, read($Heap, this, _module.MutexGuardU32.mutex)), 
          read($Heap, this, _module.MutexGuardU32.data)));
}

function _module.MutexGuardU32.objectUserFields#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.objectUserFields
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.objectUserFields($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.MutexGuardU32())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.objectUserFields($h0, this)
       == _module.MutexGuardU32.objectUserFields($h1, this));

function _module.MutexGuardU32.objectUserFields#requires(Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.objectUserFields
axiom (forall $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.objectUserFields#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap)
     ==> _module.MutexGuardU32.objectUserFields#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.objectUserFields in class _module.MutexGuardU32
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.objectUserFields($Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.objectUserFields($Heap, this), _module.MutexGuardU32.objectUserFields($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.objectUserFields#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.objectUserFields($Heap, this)
         == _module.MutexGuardU32.objectUserFields($Heap, this));

procedure {:verboseName "MutexGuardU32.objectUserFields (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.objectUserFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.objectUserFields (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.objectUserFields(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var newtype$check#2: ref;
  var newtype$check#3: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.MutexGuardU32.objectUserFields($Heap, this), 
          TSet(Tclass._module.Object()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
        newtype$check#0 := $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref;
        newtype$check#1 := $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref;
        b$reqreads#1 := $_ReadsFrame[this, _module.MutexGuardU32.data];
        newtype$check#2 := $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref;
        newtype$check#3 := $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref;
        assume {:id "id2779"} _module.MutexGuardU32.objectUserFields($Heap, this)
           == Set#UnionOne(Set#UnionOne(Set#Empty(): Set, read($Heap, this, _module.MutexGuardU32.mutex)), 
            read($Heap, this, _module.MutexGuardU32.data));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.objectUserFields($Heap, this), 
          TSet(Tclass._module.Object()));
        assert {:id "id2780"} b$reqreads#0;
        assert {:id "id2781"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.objectUserFields (override check)"} OverrideCheck$$_module.MutexGuardU32.objectUserFields(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.objectUserFields (override check)"} OverrideCheck$$_module.MutexGuardU32.objectUserFields(this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2782"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id2783"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.MutexGuardU32.unchangedNonvolatileUserFields
function _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.MutexGuardU32.unchangedNonvolatileUserFields (revealed)
axiom {:id "id2784"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap))
       ==> _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == ($Unbox(read($prevHeap, this, _module.MutexGuardU32.mutex)): ref
             == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref
           && $Unbox(read($prevHeap, this, _module.MutexGuardU32.data)): ref
             == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref));
}

function _module.MutexGuardU32.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.MutexGuardU32())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.MutexGuardU32.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap)
     ==> _module.MutexGuardU32.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.MutexGuardU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "MutexGuardU32.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id2785"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
        if ($Unbox(read(old($Heap), this, _module.MutexGuardU32.mutex)): ref
           == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
        {
            assert {:id "id2786"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.MutexGuardU32.data];
        }

        assume {:id "id2787"} _module.MutexGuardU32.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
           == ($Unbox(read(old($Heap), this, _module.MutexGuardU32.mutex)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref
             && $Unbox(read(old($Heap), this, _module.MutexGuardU32.data)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.unchangedNonvolatileUserFields(old($Heap), $Heap, this), 
          TBool);
        assert {:id "id2788"} b$reqreads#0;
        assert {:id "id2789"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.MutexGuardU32.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.MutexGuardU32.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id2790"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id2791"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.MutexGuardU32.localUserInv
function _module.MutexGuardU32.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.MutexGuardU32.localUserInv (revealed)
axiom {:id "id2792"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> (Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
              $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           ==> _module.Universe.outlives#canCall($Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this)))
         && _module.MutexGuardU32.localUserInv($Heap, this)
           == (
            Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
                $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
             && _module.Universe.outlives($LS($LZ), 
              $Heap, 
              _module.Object.universe(this), 
              _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
              _module.OwnedObject.lifetime(this))
             && $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.OwnedObject.owner)): ref
               != null
             && $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.locked)): bool
             && Set#Equal($Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.guards)): Set, 
              Set#UnionOne(Set#Empty(): Set, $Box(this)))
             && $Unbox(read($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref
               == this
             && $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref));
}

function _module.MutexGuardU32.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.localUserInv($h0, this)
       == _module.MutexGuardU32.localUserInv($h1, this));

function _module.MutexGuardU32.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap)
     ==> _module.MutexGuardU32.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.MutexGuardU32
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.MutexGuardU32.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.MutexGuardU32.localUserInv($Heap, this));

procedure {:verboseName "MutexGuardU32.localUserInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.localUserInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.localUserInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##a#0: ref;
  var ##b#0: ref;
  var newtype$check#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;
  var b$reqreads#13: bool;
  var b$reqreads#14: bool;
  var b$reqreads#15: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;
    b$reqreads#13 := true;
    b$reqreads#14 := true;
    b$reqreads#15 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
        assert {:id "id2793"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
        assert {:id "id2794"} _module.Object.universe(this) != null;
        b$reqreads#1 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
            $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
          $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))
        {
            assert {:id "id2795"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            b$reqreads#2 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id2796"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            ##a#0 := _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#0, Tclass._module.Lifetime(), $Heap);
            ##b#0 := _module.OwnedObject.lifetime(this);
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0, Tclass._module.Lifetime(), $Heap);
            assert {:id "id2797"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(##a#0));
            assert {:id "id2798"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(##b#0));
            assume Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(##a#0))
               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(##b#0));
            b$reqreads#3 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && (
                    $o == _module.Object.universe(this)
                     || (
                      $Is($o, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box($o))
                       && $f == _module.Lifetime.mightPointTo)
                     || (
                      $Is($o, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box($o))
                       && $f == _module.Lifetime.mightPointFrom))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.outlives#canCall($Heap, 
              _module.Object.universe(this), 
              _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
              _module.OwnedObject.lifetime(this));
        }

        if (Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
              $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           && _module.Universe.outlives($LS($LZ), 
            $Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this)))
        {
            b$reqreads#4 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id2799"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            b$reqreads#5 := $_ReadsFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.OwnedObject.owner];
            newtype$check#0 := null;
        }

        if (Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
              $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           && _module.Universe.outlives($LS($LZ), 
            $Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this))
           && $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.OwnedObject.owner)): ref
             != null)
        {
            b$reqreads#6 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id2800"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            b$reqreads#7 := $_ReadsFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.locked];
        }

        if (Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
              $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           && _module.Universe.outlives($LS($LZ), 
            $Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this))
           && $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.OwnedObject.owner)): ref
             != null
           && $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.locked)): bool)
        {
            b$reqreads#8 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id2801"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            b$reqreads#9 := $_ReadsFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.guards];
        }

        if (Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
              $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           && _module.Universe.outlives($LS($LZ), 
            $Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this))
           && $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.OwnedObject.owner)): ref
             != null
           && $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.locked)): bool
           && Set#Equal($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.guards)): Set, 
            Set#UnionOne(Set#Empty(): Set, $Box(this))))
        {
            b$reqreads#10 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id2802"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            b$reqreads#11 := $_ReadsFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.data];
            assert {:id "id2803"} $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref
               != null;
            b$reqreads#12 := $_ReadsFrame[$Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref, _module.OwnedObject.owner];
        }

        if (Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
              $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           && _module.Universe.outlives($LS($LZ), 
            $Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this))
           && $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.OwnedObject.owner)): ref
             != null
           && $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.locked)): bool
           && Set#Equal($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.guards)): Set, 
            Set#UnionOne(Set#Empty(): Set, $Box(this)))
           && $Unbox(read($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref
             == this)
        {
            b$reqreads#13 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id2804"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            b$reqreads#14 := $_ReadsFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.data];
            b$reqreads#15 := $_ReadsFrame[this, _module.MutexGuardU32.data];
        }

        assume {:id "id2805"} _module.MutexGuardU32.localUserInv($Heap, this)
           == (
            Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
                $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
             && _module.Universe.outlives($LS($LZ), 
              $Heap, 
              _module.Object.universe(this), 
              _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
              _module.OwnedObject.lifetime(this))
             && $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.OwnedObject.owner)): ref
               != null
             && $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.locked)): bool
             && Set#Equal($Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.guards)): Set, 
              Set#UnionOne(Set#Empty(): Set, $Box(this)))
             && $Unbox(read($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref
               == this
             && $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref);
        assume Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
              $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
           ==> _module.Universe.outlives#canCall($Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.localUserInv($Heap, this), TBool);
        assert {:id "id2806"} b$reqreads#0;
        assert {:id "id2807"} b$reqreads#1;
        assert {:id "id2808"} b$reqreads#2;
        assert {:id "id2809"} b$reqreads#3;
        assert {:id "id2810"} b$reqreads#4;
        assert {:id "id2811"} b$reqreads#5;
        assert {:id "id2812"} b$reqreads#6;
        assert {:id "id2813"} b$reqreads#7;
        assert {:id "id2814"} b$reqreads#8;
        assert {:id "id2815"} b$reqreads#9;
        assert {:id "id2816"} b$reqreads#10;
        assert {:id "id2817"} b$reqreads#11;
        assert {:id "id2818"} b$reqreads#12;
        assert {:id "id2819"} b$reqreads#13;
        assert {:id "id2820"} b$reqreads#14;
        assert {:id "id2821"} b$reqreads#15;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.localUserInv (override check)"} OverrideCheck$$_module.MutexGuardU32.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.localUserInv (override check)"} OverrideCheck$$_module.MutexGuardU32.localUserInv(this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2822"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2823"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.MutexGuardU32.userInv
function _module.MutexGuardU32.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.MutexGuardU32.userInv
axiom 12 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.userInv($Heap, this) } 
    _module.MutexGuardU32.userInv#canCall($Heap, this)
         || (12 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> 
      _module.MutexGuardU32.userInv($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this));
// definition axiom for _module.MutexGuardU32.userInv (revealed)
axiom {:id "id2824"} 12 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.userInv#canCall($Heap, this)
         || (12 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> _module.MutexGuardU32.localUserInv#canCall($Heap, this)
         && (_module.MutexGuardU32.localUserInv($Heap, this)
           ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
         && _module.MutexGuardU32.userInv($Heap, this)
           == (_module.MutexGuardU32.localUserInv($Heap, this)
             && _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)));
}

function _module.MutexGuardU32.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.userInv($h0, this)
       == _module.MutexGuardU32.userInv($h1, this));

function _module.MutexGuardU32.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap)
     ==> _module.MutexGuardU32.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.MutexGuardU32
axiom 12 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.MutexGuardU32.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.userInv#canCall($Heap, this)
         || (12 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.userInv($Heap, this)
         == _module.MutexGuardU32.userInv($Heap, this));

procedure {:verboseName "MutexGuardU32.userInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 12 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id2825"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
          $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
        $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  ensures {:id "id2826"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || (_module.Universe.outlives#canCall($Heap, 
          _module.Object.universe(this), 
          _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
          _module.OwnedObject.lifetime(this))
         ==> _module.Universe.outlives($LS($LZ), 
            $Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this))
           || 
          Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointTo)): Set, 
            $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)))
           || (exists x#0: ref :: 
            { _module.Universe.outlivesThrough($LS($LS($LZ)), 
                $Heap, 
                _module.Object.universe(this), 
                _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                x#0, 
                _module.OwnedObject.lifetime(this)) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(x#0)) } 
            $Is(x#0, Tclass._module.Lifetime())
               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(x#0))
               && _module.Universe.outlivesThrough($LS($LS($LZ)), 
                $Heap, 
                _module.Object.universe(this), 
                _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                x#0, 
                _module.OwnedObject.lifetime(this))));
  ensures {:id "id2827"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.OwnedObject.owner)): ref
         != null;
  ensures {:id "id2828"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.locked)): bool;
  ensures {:id "id2829"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || Set#Equal($Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.guards)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this)));
  ensures {:id "id2830"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || $Unbox(read($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref, 
            _module.OwnedObject.owner)): ref
         == this;
  ensures {:id "id2831"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref
         == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.userInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
            assert {:id "id2832"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.MutexGuardU32.userInv#canCall($Heap, this);
            assume {:id "id2833"} _module.MutexGuardU32.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
            assume _module.MutexGuardU32.localUserInv#canCall($Heap, this);
            assume {:id "id2834"} _module.MutexGuardU32.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id2835"} _module.MutexGuardU32.userInv($Heap, this)
               ==> _module.MutexGuardU32.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.MutexGuardU32.localUserInv#canCall($Heap, this);
        if (_module.MutexGuardU32.localUserInv($Heap, this))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id2836"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox(read($Heap, this, _module.MutexGuardU32.mutex), 
              Tclass._module.OwnedObject?(), 
              $Heap);
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
        }

        assume {:id "id2837"} _module.MutexGuardU32.userInv($Heap, this)
           == (_module.MutexGuardU32.localUserInv($Heap, this)
             && _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref));
        assume _module.MutexGuardU32.localUserInv#canCall($Heap, this)
           && (_module.MutexGuardU32.localUserInv($Heap, this)
             ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.userInv($Heap, this), TBool);
        assert {:id "id2838"} b$reqreads#0;
        assert {:id "id2839"} b$reqreads#1;
        assert {:id "id2840"} b$reqreads#2;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.userInv (override check)"} OverrideCheck$$_module.MutexGuardU32.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 12 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.userInv (override check)"} OverrideCheck$$_module.MutexGuardU32.userInv(this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id2841"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2842"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id2843"} _module.MutexGuardU32.userInv($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this);
    assert {:id "id2844"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
            $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
          $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id2845"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || (_module.Universe.outlives#canCall($Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this))
           ==> _module.Universe.outlives($LS($LZ), 
              $Heap, 
              _module.Object.universe(this), 
              _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
              _module.OwnedObject.lifetime(this))
             || 
            Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointTo)): Set, 
              $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)))
             || (exists x#1: ref :: 
              { _module.Universe.outlivesThrough($LS($LS($LZ)), 
                  $Heap, 
                  _module.Object.universe(this), 
                  _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                  x#1, 
                  _module.OwnedObject.lifetime(this)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(x#1)) } 
              $Is(x#1, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(x#1))
                 && _module.Universe.outlivesThrough($LS($LS($LZ)), 
                  $Heap, 
                  _module.Object.universe(this), 
                  _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                  x#1, 
                  _module.OwnedObject.lifetime(this))));
    assert {:id "id2846"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.OwnedObject.owner)): ref
           != null;
    assert {:id "id2847"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.locked)): bool;
    assert {:id "id2848"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || Set#Equal($Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.guards)): Set, 
          Set#UnionOne(Set#Empty(): Set, $Box(this)));
    assert {:id "id2849"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref, 
              _module.OwnedObject.owner)): ref
           == this;
    assert {:id "id2850"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref
           == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref;
}



// function declaration for _module.MutexGuardU32.localUserInv2
function _module.MutexGuardU32.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.MutexGuardU32.localUserInv2 (revealed)
axiom {:id "id2851"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap))
       ==> _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this)
         == (true
           && $Unbox(read($prevHeap, this, _module.MutexGuardU32.mutex)): ref
             == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref));
}

function _module.MutexGuardU32.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.localUserInv2($prevHeap, $h0, this)
       == _module.MutexGuardU32.localUserInv2($prevHeap, $h1, this));

function _module.MutexGuardU32.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap)
     ==> _module.MutexGuardU32.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.MutexGuardU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "MutexGuardU32.localUserInv2 (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.localUserInv2 (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            assert {:id "id2852"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
            b$reqreads#0 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
        }

        assume {:id "id2853"} _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this)
           == (true
             && $Unbox(read(old($Heap), this, _module.MutexGuardU32.mutex)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id2854"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.localUserInv2 (override check)"} OverrideCheck$$_module.MutexGuardU32.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.localUserInv2 (override check)"} OverrideCheck$$_module.MutexGuardU32.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id2855"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2856"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.MutexGuardU32.userInv2
function _module.MutexGuardU32.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.MutexGuardU32.userInv2
axiom 12 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.userInv2($prevHeap, $Heap, this) } 
    _module.MutexGuardU32.userInv2#canCall($prevHeap, $Heap, this)
         || (12 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap))
       ==> 
      _module.MutexGuardU32.userInv2($prevHeap, $Heap, this)
       ==> _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.MutexGuardU32.userInv2 (revealed)
axiom {:id "id2857"} 12 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.userInv2#canCall($prevHeap, $Heap, this)
         || (12 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap))
       ==> _module.MutexGuardU32.localUserInv2#canCall($prevHeap, $Heap, this)
         && (_module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this)
           ==> _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             && (_module.OwnedObject.localInv2($prevHeap, $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               ==> 
              $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null
               ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)))
         && _module.MutexGuardU32.userInv2($prevHeap, $Heap, this)
           == (
            _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this)
             && _module.OwnedObject.localInv2($prevHeap, $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null
               ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))));
}

function _module.MutexGuardU32.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.userInv2($prevHeap, $h0, this)
       == _module.MutexGuardU32.userInv2($prevHeap, $h1, this));

function _module.MutexGuardU32.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap)
     ==> _module.MutexGuardU32.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.MutexGuardU32
axiom 12 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.MutexGuardU32.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.userInv2#canCall($prevHeap, $Heap, this)
         || (12 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.MutexGuardU32.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "MutexGuardU32.userInv2 (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id2858"} _module.MutexGuardU32.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.MutexGuardU32.localUserInv2(previous$Heap, current$Heap, this)
       || Lit(true);
  ensures {:id "id2859"} _module.MutexGuardU32.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.MutexGuardU32.localUserInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.MutexGuardU32.mutex)): ref
         == $Unbox(read(current$Heap, this, _module.MutexGuardU32.mutex)): ref;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.userInv2 (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
            assert {:id "id2860"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
            assert {:id "id2861"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.MutexGuardU32.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id2862"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
            assert {:id "id2863"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
            assume _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id2864"} _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id2865"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
               ==> _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
        assert {:id "id2866"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this);
        if (_module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id2867"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox(read($Heap, this, _module.MutexGuardU32.mutex), 
              Tclass._module.OwnedObject?(), 
              $Heap);
            assert {:id "id2868"} $IsAlloc($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              Tclass._module.Mutex(), 
              old($Heap));
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
        }

        if (_module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this)
           && _module.OwnedObject.localInv2(old($Heap), $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
        {
            b$reqreads#3 := $_ReadsFrame[this, _module.OwnedObject.owner];
            newtype$check#0 := null;
            if ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null)
            {
                b$reqreads#4 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
                assert {:id "id2869"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox(read($Heap, this, _module.MutexGuardU32.mutex), 
                  Tclass._module.OwnedObject?(), 
                  $Heap);
                b$reqreads#5 := (forall $o: ref, $f: Field :: 
                  $o != null
                       && $Unbox(read($Heap, $o, alloc)): bool
                       && $Unbox(read($Heap, $o, alloc)): bool
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
            }
        }

        assume {:id "id2870"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
           == (
            _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this)
             && _module.OwnedObject.localInv2(old($Heap), $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             && ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null
               ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)));
        assume _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this)
           && (_module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this)
             ==> _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               && (_module.OwnedObject.localInv2(old($Heap), $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                 ==> 
                $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == null
                 ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id2871"} b$reqreads#0;
        assert {:id "id2872"} b$reqreads#1;
        assert {:id "id2873"} b$reqreads#2;
        assert {:id "id2874"} b$reqreads#3;
        assert {:id "id2875"} b$reqreads#4;
        assert {:id "id2876"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.userInv2 (override check)"} OverrideCheck$$_module.MutexGuardU32.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), current$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.userInv2 (override check)"} OverrideCheck$$_module.MutexGuardU32.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id2877"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id2878"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id2879"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
       ==> _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id2880"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id2881"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.MutexGuardU32.mutex)): ref
           == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref;
}



procedure {:verboseName "MutexGuardU32.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.MutexGuardU32.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id2882"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assert {:id "id2883"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id2884"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id2885"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id2886"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "MutexGuardU32.sequenceAdmissibility (override check)"} OverrideCheck$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.sequenceAdmissibility (override check)"} OverrideCheck$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id2887"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id2888"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id2889"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id2890"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2891"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id2892"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2893"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id2894"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id2895"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id2896"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || Set#Subset(running#0, 
              $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id2897"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id2898"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object?(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id2899"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall l#0: ref :: 
              { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#0)) } 
              $Is(l#0, Tclass._module.Lifetime())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#0))
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), l#0, _module.Lifetime.owner))
                   && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                    Tclass._module.Thread?(), 
                    old($Heap))
                 ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0)));
    assert {:id "id2900"} Set#Subset(running#0, running#0);
    assert {:id "id2901"} (forall $o: ref, $f: Field :: true);
    assert {:id "id2902"} (forall $o: ref, $f: Field :: true);
    assume {:id "id2903"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id2904"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "MutexGuardU32.sequenceAdmissibility (call)"} Call$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id2905"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id2906"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id2907"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2908"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id2909"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2910"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id2911"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id2912"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id2913"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || Set#Subset(running#0, 
            $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set));
  requires {:id "id2914"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id2915"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id2916"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall l#1: ref :: 
            { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
              { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(l#1)) } 
            $Is(l#1, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(l#1))
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, l#1, _module.Lifetime.owner))
                 && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                  Tclass._module.Thread?(), 
                  previous$Heap)
               ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id2917"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && 
    ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
       ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null)
     && $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       ==> true
         && _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this))
     && ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
        Tclass._module.OwnedObject())
       ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
        !_module.OwnedObject.volatileOwns(oldOwner#0)
             && $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
           ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "MutexGuardU32.sequenceAdmissibility (correctness)"} Impl$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id2918"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id2919"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
         ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null);
  ensures {:id "id2920"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id2921"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id2922"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id2923"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id2924"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#1)
               && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.sequenceAdmissibility (correctness)"} Impl$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.MutexGuardU32.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "MutexGuardU32.admissibility (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.admissibility (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.MutexGuardU32.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id2925"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assert {:id "id2926"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id2927"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id2928"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id2929"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id2930"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "MutexGuardU32.admissibility (override check)"} OverrideCheck$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.admissibility (override check)"} OverrideCheck$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id2931"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id2932"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id2933"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id2934"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id2935"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id2936"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id2937"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id2938"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id2939"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id2940"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id2941"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id2942"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object?(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id2943"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall l#0: ref :: 
                  { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0) } 
                    { $Unbox(read(old($Heap), l#0, _module.Lifetime.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#0)) } 
                  $Is(l#0, Tclass._module.Lifetime())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(l#0))
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), l#0, _module.Lifetime.owner))
                       && $IsAllocBox(read(old($Heap), l#0, _module.Lifetime.owner), 
                        Tclass._module.Thread?(), 
                        old($Heap))
                     ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#0))));
    assert {:id "id2944"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2945"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id2946"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id2947"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id2948"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id2949"} running#0 != null ==> running#0 != null;
    assert {:id "id2950"} (forall $o: ref, $f: Field :: true);
    assert {:id "id2951"} (forall $o: ref, $f: Field :: true);
    assume {:id "id2952"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id2953"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id2954"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "MutexGuardU32.admissibility (call)"} Call$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id2955"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id2956"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id2957"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id2958"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#9: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#9) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#9) } 
                          { _module.Object.universe(o#9) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9)) } 
                        $Is(o#9, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#9))
                           ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                             && o#9 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#9)
                             && _module.Object.triggerAxioms(previous$Heap, o#9))))));
  requires {:id "id2959"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id2960"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#10: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#10) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#10) } 
                          { _module.Object.universe(o#10) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#10)) } 
                        $Is(o#10, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#10))
                           ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                             && o#10 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#10)
                             && _module.Object.triggerAxioms(current$Heap, o#10))))));
  requires {:id "id2961"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id2962"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#11: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                    $Is(o#11, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                       ==> !$IsAllocBox($Box(o#11), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id2963"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id2964"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#12: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#12
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12))));
  requires {:id "id2965"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#13: ref :: 
                { $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                     && $Is($Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#13, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#13, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id2966"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall l#1: ref :: 
                { _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1) } 
                  { $Unbox(read(previous$Heap, l#1, _module.Lifetime.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(l#1)) } 
                $Is(l#1, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(l#1))
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, l#1, _module.Lifetime.owner))
                     && $IsAllocBox(read(previous$Heap, l#1, _module.Lifetime.owner), 
                      Tclass._module.Thread?(), 
                      previous$Heap)
                   ==> _module.Lifetime.unchangedNonvolatileFields(previous$Heap, current$Heap, l#1))));
  requires {:id "id2967"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2968"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#14: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#14) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#14) } 
                      { _module.Object.universe(o#14) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#14)) } 
                    $Is(o#14, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#14))
                       ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                         && o#14 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#14)
                         && _module.Object.triggerAxioms(previous$Heap, o#14)))));
  requires {:id "id2969"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.inv(previous$Heap, o#15) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.inv(previous$Heap, o#15))));
  requires {:id "id2970"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#16: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#16) } 
              { _module.Object.inv(current$Heap, o#16) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#16))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#16))));
  requires {:id "id2971"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#17: ref :: 
            { _module.Object.inv(current$Heap, o#17) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
               ==> _module.Object.inv(current$Heap, o#17)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id2972"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.OwnedObject.userInv2(previous$Heap, current$Heap, this))
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
             && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
              $IsAllocBox($Box(currOwner#0), Tclass._module.Object?(), previous$Heap)
                 ==> _module.Object.localInv2(previous$Heap, 
                  current$Heap, 
                  $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref))));
  free ensures {:id "id2973"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
       ==> _module.OwnedObject.userInv(current$Heap, this));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "MutexGuardU32.admissibility (correctness)"} Impl$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id2974"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id2975"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id2976"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this)));
  ensures {:id "id2977"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref == null
             ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref == null));
  ensures {:id "id2978"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id2979"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> Lit(true)));
  ensures {:id "id2980"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2981"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id2982"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              !_module.OwnedObject.volatileOwns(oldOwner#1)
                   && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id2983"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.userInv2(previous$Heap, current$Heap, this));
  ensures {:id "id2984"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2985"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2986"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> 
        $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2987"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> 
        $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object?(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id2988"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id2989"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id2990"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id2991"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#28: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#28) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#28) } 
                      { _module.Object.universe(o#28) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#28)) } 
                    $Is(o#28, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#28))
                       ==> _module.Object.universe(o#28) == _module.Object.universe(this)
                         && o#28 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#28)
                         && _module.Object.triggerAxioms(current$Heap, o#28)))));
  ensures {:id "id2992"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || Set#IsMember($Unbox(read(current$Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
            $Box(this)));
  ensures {:id "id2993"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Lifetime.alive(current$Heap, _module.OwnedObject.lifetime(this))
             ==> $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null));
  ensures {:id "id2994"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
             ==> _module.OwnedObject.localUserInv(current$Heap, this)));
  ensures {:id "id2995"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || ($Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref != null
         ==> _module.OwnedObject.userInv(current$Heap, this));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.admissibility (correctness)"} Impl$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.MutexGuardU32.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(885,27)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2996"} _module.Object.universe(this) != null;
    assert {:id "id2997"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    call {:id "id2998"} Call$$_module.Universe.FrameOutlives(old($Heap), $Heap, _module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "MutexGuardU32._ctor (well-formedness)"} {:vcs_split_on_every_assert} CheckWellFormed$$_module.MutexGuardU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    scope#0: ref
       where $Is(scope#0, Tclass._module.Lifetime())
         && $IsAlloc(scope#0, Tclass._module.Lifetime(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap), 
    mutexScope#0: ref
       where $Is(mutexScope#0, Tclass._module.Lifetime())
         && $IsAlloc(mutexScope#0, Tclass._module.Lifetime(), $Heap))
   returns (this: ref);
  free requires 23 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32._ctor (well-formedness)"} {:vcs_split_on_every_assert} CheckWellFormed$$_module.MutexGuardU32.__ctor(universe#0: ref, running#0: ref, scope#0: ref, mutex#0: ref, mutexScope#0: ref)
   returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##a#0: ref;
  var ##b#0: ref;
  var ##a#1: ref;
  var ##b#1: ref;
  var l#0: ref;
  var ##running#0: Set;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.MutexGuardU32.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || 
          (Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o))
             && !
            ($Is($o, Tclass._module.Lifetime())
             && 
            Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o))
             && $Unbox(read($Heap, $o, _module.Lifetime.owner)): ref == running#0))
           || 
          $o == scope#0
           || $o == mutexScope#0);
    assert {:id "id2999"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id3000"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id3001"} universe#0 != null;
    assume {:id "id3002"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(scope#0)), 
          $Box(mutex#0)), 
        $Box(mutexScope#0)), 
      $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
    assert {:id "id3003"} scope#0 != null;
    assume {:id "id3004"} $Unbox(read($Heap, scope#0, _module.Lifetime.owner)): ref == running#0;
    assert {:id "id3005"} mutexScope#0 != null;
    assume {:id "id3006"} $Unbox(read($Heap, mutexScope#0, _module.Lifetime.owner)): ref == running#0;
    assume {:id "id3007"} scope#0 != mutexScope#0;
    assert {:id "id3008"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id3009"} mutex#0 != null;
    ##a#0 := _module.OwnedObject.lifetime(mutex#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#0, Tclass._module.Lifetime(), $Heap);
    ##b#0 := mutexScope#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#0, Tclass._module.Lifetime(), $Heap);
    assert {:id "id3010"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#0));
    assert {:id "id3011"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#0));
    assume Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#0))
       && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#0));
    assume _module.Universe.outlives#canCall($Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0);
    assume {:id "id3012"} _module.Universe.outlives($LS($LZ), $Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0);
    assert {:id "id3013"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##a#1 := mutexScope#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#1, Tclass._module.Lifetime(), $Heap);
    ##b#1 := scope#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#1, Tclass._module.Lifetime(), $Heap);
    assert {:id "id3014"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#1));
    assert {:id "id3015"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#1));
    assume Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#1))
       && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#1));
    assume _module.Universe.outlives#canCall($Heap, universe#0, mutexScope#0, scope#0);
    assume {:id "id3016"} _module.Universe.outlives($LS($LZ), $Heap, universe#0, mutexScope#0, scope#0);
    assert {:id "id3017"} scope#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(scope#0), Tclass._module.Lifetime?(), $Heap);
    assume _module.Lifetime.unused#canCall($Heap, scope#0);
    assume {:id "id3018"} _module.Lifetime.unused($Heap, scope#0);
    assert {:id "id3019"} mutex#0 != null;
    assume {:id "id3020"} !$Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;
    assert {:id "id3021"} universe#0 != null;
    // Begin Comprehension WF check
    havoc l#0;
    if ($Is(l#0, Tclass._module.Lifetime())
       && $IsAlloc(l#0, Tclass._module.Lifetime(), $Heap))
    {
        assert {:id "id3022"} universe#0 != null;
        if (Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(l#0)))
        {
            assert {:id "id3023"} l#0 != null;
        }

        if (Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(l#0))
           && $Unbox(read($Heap, l#0, _module.Lifetime.owner)): ref == running#0)
        {
        }
    }

    // End Comprehension WF check
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || 
          (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o))
             && !
            ($Is($o, Tclass._module.Lifetime())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o))
             && $Unbox(read(old($Heap), $o, _module.Lifetime.owner)): ref == running#0))
           || 
          $o == scope#0
           || $o == mutexScope#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id3024"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id3025"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##running#0 := Set#UnionOne(Set#Empty(): Set, $Box(running#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id3026"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id3027"} $IsAlloc(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
      TSet(Tclass._module.Thread()), 
      old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
    assume {:id "id3028"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
    assume {:id "id3029"} _module.Object.universe(this) == universe#0;
    assume {:id "id3030"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id3031"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref == mutex#0;
    assert {:id "id3032"} mutex#0 != null;
    assume {:id "id3033"} $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref
       == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref;
    assert {:id "id3034"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assume {:id "id3035"} $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
        _module.Mutex.locked)): bool;
    assert {:id "id3036"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id3037"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume {:id "id3038"} $Unbox(read($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref, 
          _module.OwnedObject.owner)): ref
       == this;
    assert {:id "id3039"} _module.OwnedObject.lifetime(this) != null;
    assume {:id "id3040"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointFrom)): Set, 
      Set#Empty(): Set);
    assert {:id "id3041"} _module.OwnedObject.lifetime(this) != null;
    assume {:id "id3042"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    assert {:id "id3043"} _module.OwnedObject.lifetime(this) != null;
    assume {:id "id3044"} $Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.owner)): ref
       == running#0;
    assert {:id "id3045"} mutexScope#0 != null;
    assert {:id "id3046"} mutexScope#0 != null;
    assert {:id "id3047"} $IsAlloc(mutexScope#0, Tclass._module.Lifetime(), old($Heap));
    assume {:id "id3048"} Set#Equal($Unbox(read($Heap, mutexScope#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#Union($Unbox(read(old($Heap), mutexScope#0, _module.Lifetime.mightPointFrom)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))));
    assert {:id "id3049"} universe#0 != null;
    assume {:id "id3050"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
    assert {:id "id3051"} scope#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(scope#0), Tclass._module.Lifetime?(), $Heap);
    assume _module.Lifetime.alive#canCall($Heap, scope#0);
    assume {:id "id3052"} !_module.Lifetime.alive($Heap, scope#0);
}



procedure {:verboseName "MutexGuardU32._ctor (call)"} {:vcs_split_on_every_assert} Call$$_module.MutexGuardU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    scope#0: ref
       where $Is(scope#0, Tclass._module.Lifetime())
         && $IsAlloc(scope#0, Tclass._module.Lifetime(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap), 
    mutexScope#0: ref
       where $Is(mutexScope#0, Tclass._module.Lifetime())
         && $IsAlloc(mutexScope#0, Tclass._module.Lifetime(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  // user-defined preconditions
  requires {:id "id3053"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id3054"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id3055"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id3056"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(scope#0)), 
        $Box(mutex#0)), 
      $Box(mutexScope#0)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id3057"} $Unbox(read($Heap, scope#0, _module.Lifetime.owner)): ref == running#0;
  requires {:id "id3058"} $Unbox(read($Heap, mutexScope#0, _module.Lifetime.owner)): ref == running#0;
  requires {:id "id3059"} scope#0 != mutexScope#0;
  requires {:id "id3060"} _module.Universe.outlives#canCall($Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0)
     ==> _module.Universe.outlives($LS($LZ), $Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0)
       || 
      Set#IsMember($Unbox(read($Heap, mutexScope#0, _module.Lifetime.mightPointTo)): Set, 
        $Box(_module.OwnedObject.lifetime(mutex#0)))
       || (exists x#0: ref :: 
        { _module.Universe.outlivesThrough($LS($LS($LZ)), 
            $Heap, 
            universe#0, 
            _module.OwnedObject.lifetime(mutex#0), 
            x#0, 
            mutexScope#0) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#0)) } 
        $Is(x#0, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#0))
           && _module.Universe.outlivesThrough($LS($LS($LZ)), 
            $Heap, 
            universe#0, 
            _module.OwnedObject.lifetime(mutex#0), 
            x#0, 
            mutexScope#0));
  requires {:id "id3061"} _module.Universe.outlives#canCall($Heap, universe#0, mutexScope#0, scope#0)
     ==> _module.Universe.outlives($LS($LZ), $Heap, universe#0, mutexScope#0, scope#0)
       || 
      Set#IsMember($Unbox(read($Heap, scope#0, _module.Lifetime.mightPointTo)): Set, 
        $Box(mutexScope#0))
       || (exists x#1: ref :: 
        { _module.Universe.outlivesThrough($LS($LS($LZ)), $Heap, universe#0, mutexScope#0, x#1, scope#0) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#1)) } 
        $Is(x#1, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#1))
           && _module.Universe.outlivesThrough($LS($LS($LZ)), $Heap, universe#0, mutexScope#0, x#1, scope#0));
  requires {:id "id3062"} _module.Lifetime.unused#canCall($Heap, scope#0)
     ==> _module.Lifetime.unused($Heap, scope#0)
       || Set#Equal($Unbox(read($Heap, scope#0, _module.Lifetime.mightPointFrom)): Set, 
        Set#Empty(): Set);
  requires {:id "id3063"} _module.Lifetime.unused#canCall($Heap, scope#0)
     ==> _module.Lifetime.unused($Heap, scope#0)
       || Set#Equal($Unbox(read($Heap, scope#0, _module.Lifetime.elements)): Set, Set#Empty(): Set);
  requires {:id "id3064"} !$Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0))));
  free ensures {:id "id3065"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id3066"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
     && Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
      $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set)
     && (forall o#7: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#7) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#7)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7)) } 
      $Is(o#7, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#7))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#7))
         ==> (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           || _module.Object.sequenceInv2(old($Heap), $Heap, o#7))
     && (forall o#8: ref :: 
      { $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#8))
           && $Is($Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            read(old($Heap), o#8, _module.OwnedObject.owner))
           && $IsAllocBox(read(old($Heap), o#8, _module.OwnedObject.owner), 
            Tclass._module.Object?(), 
            old($Heap))
         ==> $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int)
     && (forall l#1: ref :: 
      { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1) } 
        { $Unbox(read(old($Heap), l#1, _module.Lifetime.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1)) } 
      $Is(l#1, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#1))
         ==> 
        !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
            read(old($Heap), l#1, _module.Lifetime.owner))
           && $IsAllocBox(read(old($Heap), l#1, _module.Lifetime.owner), 
            Tclass._module.Thread?(), 
            old($Heap))
         ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#1));
  free ensures true;
  ensures {:id "id3067"} _module.Object.universe(this) == universe#0;
  ensures {:id "id3068"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id3069"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref == mutex#0;
  ensures {:id "id3070"} $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref
     == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref;
  ensures {:id "id3071"} $Unbox(read($Heap, 
      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
      _module.Mutex.locked)): bool;
  ensures {:id "id3072"} $Unbox(read($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref, 
        _module.OwnedObject.owner)): ref
     == this;
  free ensures true;
  ensures {:id "id3073"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointFrom)): Set, 
    Set#Empty(): Set);
  ensures {:id "id3074"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
    Set#UnionOne(Set#Empty(): Set, $Box(this)));
  ensures {:id "id3075"} $Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.owner)): ref
     == running#0;
  free ensures true;
  ensures {:id "id3076"} Set#Equal($Unbox(read($Heap, mutexScope#0, _module.Lifetime.mightPointFrom)): Set, 
    Set#Union($Unbox(read(old($Heap), mutexScope#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))));
  free ensures true;
  ensures {:id "id3077"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  free ensures _module.Lifetime.alive#canCall($Heap, scope#0);
  ensures {:id "id3078"} !_module.Lifetime.alive($Heap, scope#0);
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || 
        (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o))
           && !
          ($Is($o, Tclass._module.Lifetime())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o))
           && $Unbox(read(old($Heap), $o, _module.Lifetime.owner)): ref == running#0))
         || 
        $o == scope#0
         || $o == mutexScope#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "MutexGuardU32._ctor (correctness)"} {:vcs_split_on_every_assert} Impl$$_module.MutexGuardU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    scope#0: ref
       where $Is(scope#0, Tclass._module.Lifetime())
         && $IsAlloc(scope#0, Tclass._module.Lifetime(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap), 
    mutexScope#0: ref
       where $Is(mutexScope#0, Tclass._module.Lifetime())
         && $IsAlloc(mutexScope#0, Tclass._module.Lifetime(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 23 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id3079"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#10: ref :: 
      { _module.Object.inv($Heap, o#10) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10)) } 
      $Is(o#10, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10))
         ==> _module.Object.inv($Heap, o#10));
  requires {:id "id3080"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), $Box(scope#0)), 
        $Box(mutex#0)), 
      $Box(mutexScope#0)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  requires {:id "id3081"} $Unbox(read($Heap, scope#0, _module.Lifetime.owner)): ref == running#0;
  requires {:id "id3082"} $Unbox(read($Heap, mutexScope#0, _module.Lifetime.owner)): ref == running#0;
  requires {:id "id3083"} scope#0 != mutexScope#0;
  free requires {:id "id3084"} _module.Universe.outlives#canCall($Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0)
     && 
    _module.Universe.outlives($LS($LZ), $Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0)
     && (Set#IsMember($Unbox(read($Heap, mutexScope#0, _module.Lifetime.mightPointTo)): Set, 
        $Box(_module.OwnedObject.lifetime(mutex#0)))
       || (exists x#2: ref :: 
        { _module.Universe.outlivesThrough($LS($LZ), 
            $Heap, 
            universe#0, 
            _module.OwnedObject.lifetime(mutex#0), 
            x#2, 
            mutexScope#0) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#2)) } 
        $Is(x#2, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#2))
           && _module.Universe.outlivesThrough($LS($LZ), 
            $Heap, 
            universe#0, 
            _module.OwnedObject.lifetime(mutex#0), 
            x#2, 
            mutexScope#0)));
  free requires {:id "id3085"} _module.Universe.outlives#canCall($Heap, universe#0, mutexScope#0, scope#0)
     && 
    _module.Universe.outlives($LS($LZ), $Heap, universe#0, mutexScope#0, scope#0)
     && (Set#IsMember($Unbox(read($Heap, scope#0, _module.Lifetime.mightPointTo)): Set, 
        $Box(mutexScope#0))
       || (exists x#3: ref :: 
        { _module.Universe.outlivesThrough($LS($LZ), $Heap, universe#0, mutexScope#0, x#3, scope#0) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#3)) } 
        $Is(x#3, Tclass._module.Lifetime())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#3))
           && _module.Universe.outlivesThrough($LS($LZ), $Heap, universe#0, mutexScope#0, x#3, scope#0)));
  free requires {:id "id3086"} _module.Lifetime.unused#canCall($Heap, scope#0)
     && 
    _module.Lifetime.unused($Heap, scope#0)
     && 
    Set#Equal($Unbox(read($Heap, scope#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#Empty(): Set)
     && Set#Equal($Unbox(read($Heap, scope#0, _module.Lifetime.elements)): Set, Set#Empty(): Set);
  requires {:id "id3087"} !$Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0))));
  ensures {:id "id3088"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id3089"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id3090"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#11: ref :: 
                { _module.Object.triggerAxioms($Heap, o#11) } 
                  { _module.Object.baseFieldsInv($Heap, o#11) } 
                  { _module.Object.universe(o#11) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#11)) } 
                $Is(o#11, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#11))
                   ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                     && o#11 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#11)
                     && _module.Object.triggerAxioms($Heap, o#11))));
  ensures {:id "id3091"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#12: ref :: 
            { _module.Object.inv($Heap, o#12) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#12))
               ==> _module.Object.inv($Heap, o#12)));
  ensures {:id "id3092"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id3093"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#13: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#13) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#13) } 
                  { _module.Object.universe(o#13) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
                $Is(o#13, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
                   ==> _module.Object.universe(o#13) == universe#0
                     && o#13 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#13)
                     && _module.Object.triggerAxioms(old($Heap), o#13))));
  ensures {:id "id3094"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true)));
  ensures {:id "id3095"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0)
               || (forall o#14: ref :: 
                { _module.Object.triggerAxioms($Heap, o#14) } 
                  { _module.Object.baseFieldsInv($Heap, o#14) } 
                  { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
                   ==> _module.Object.universe(o#14) == universe#0
                     && o#14 != universe#0
                     && _module.Object.baseFieldsInv($Heap, o#14)
                     && _module.Object.triggerAxioms($Heap, o#14))));
  ensures {:id "id3096"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
            $Unbox(read($Heap, universe#0, _module.Universe.content)): Set));
  ensures {:id "id3097"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
           || (forall o#15: ref :: 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
            $Is(o#15, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#15))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15))
               ==> !$IsAllocBox($Box(o#15), Tclass._module.Object(), old($Heap))));
  ensures {:id "id3098"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
        $Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set);
  ensures {:id "id3099"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#16: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#16) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
        $Is(o#16, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#16))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#16))
           ==> (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#16 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.sequenceInv2(old($Heap), $Heap, o#16));
  ensures {:id "id3100"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall o#17: ref :: 
        { $Unbox(read($Heap, o#17, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#17, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#17, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
        $Is(o#17, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
             && $Is($Unbox(read(old($Heap), o#17, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
              read(old($Heap), o#17, _module.OwnedObject.owner))
             && $IsAllocBox(read(old($Heap), o#17, _module.OwnedObject.owner), 
              Tclass._module.Object?(), 
              old($Heap))
           ==> $Unbox(read(old($Heap), o#17, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, o#17, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id3101"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
       || (forall l#2: ref :: 
        { _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#2) } 
          { $Unbox(read(old($Heap), l#2, _module.Lifetime.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#2)) } 
        $Is(l#2, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(l#2))
           ==> 
          !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
              read(old($Heap), l#2, _module.Lifetime.owner))
             && $IsAllocBox(read(old($Heap), l#2, _module.Lifetime.owner), 
              Tclass._module.Thread?(), 
              old($Heap))
           ==> _module.Lifetime.unchangedNonvolatileFields(old($Heap), $Heap, l#2));
  free ensures true;
  ensures {:id "id3102"} _module.Object.universe(this) == universe#0;
  ensures {:id "id3103"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  free ensures true;
  ensures {:id "id3104"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref == mutex#0;
  ensures {:id "id3105"} $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref
     == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref;
  ensures {:id "id3106"} $Unbox(read($Heap, 
      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
      _module.Mutex.locked)): bool;
  ensures {:id "id3107"} $Unbox(read($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref, 
        _module.OwnedObject.owner)): ref
     == this;
  free ensures true;
  ensures {:id "id3108"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointFrom)): Set, 
    Set#Empty(): Set);
  ensures {:id "id3109"} Set#Equal($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
    Set#UnionOne(Set#Empty(): Set, $Box(this)));
  ensures {:id "id3110"} $Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.owner)): ref
     == running#0;
  free ensures true;
  ensures {:id "id3111"} Set#Equal($Unbox(read($Heap, mutexScope#0, _module.Lifetime.mightPointFrom)): Set, 
    Set#Union($Unbox(read(old($Heap), mutexScope#0, _module.Lifetime.mightPointFrom)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this)))));
  free ensures true;
  ensures {:id "id3112"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
    $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  free ensures _module.Lifetime.alive#canCall($Heap, scope#0);
  ensures {:id "id3113"} !_module.Lifetime.alive($Heap, scope#0);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || 
        (Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o))
           && !
          ($Is($o, Tclass._module.Lifetime())
           && 
          Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o))
           && $Unbox(read(old($Heap), $o, _module.Lifetime.owner)): ref == running#0))
         || 
        $o == scope#0
         || $o == mutexScope#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32._ctor (correctness)"} {:vcs_split_on_every_assert} Impl$$_module.MutexGuardU32.__ctor(universe#0: ref, running#0: ref, scope#0: ref, mutex#0: ref, mutexScope#0: ref)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.lifetime: ref;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.mutex: ref;
  var this.data: ref;
  var defass#this.lifetime: bool;
  var defass#this.universe: bool;
  var defass#this.mutex: bool;
  var defass#this.data: bool;
  var $Heap_at_0: Heap;
  var defass#lifetime#0: bool;
  var lifetime#0: ref
     where defass#lifetime#0
       ==> $Is(lifetime#0, Tclass._module.Lifetime())
         && $IsAlloc(lifetime#0, Tclass._module.Lifetime(), $Heap);
  var $rhs#0: ref;
  var $nw: ref;
  var universe##0: ref;
  var running##0: ref;
  var owner##0: ref;
  var mightPointTo##0: Set;
  var running##1: ref;
  var $Heap_at_1: Heap;
  var $rhs#1: Set;
  var $rhs#2: bool;
  var $rhs#3: Set;
  var $rhs#4: ref;
  var $rhs#5: int;
  var ##last#0: int;
  var ##a#2: ref;
  var ##b#2: ref;
  var ##a#3: ref;
  var ##b#3: ref;
  var ##a#4: ref;
  var ##b#4: ref;
  var newtype$check#0: ref;
  var running##2: ref;
  var $Heap_at_2: Heap;
  var $rhs#6: ref;
  var newtype$check#1: ref;
  var running##3: ref;

    // AddMethodImpl: _ctor, Impl$$_module.MutexGuardU32.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || 
          (Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o))
             && !
            ($Is($o, Tclass._module.Lifetime())
             && 
            Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o))
             && $Unbox(read($Heap, $o, _module.Lifetime.owner)): ref == running#0))
           || 
          $o == scope#0
           || $o == mutexScope#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(904,3)
    $Heap_at_0 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(910,18)
    assume true;
    // ----- init call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(910,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := universe#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    owner##0 := running#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    mightPointTo##0 := Set#UnionOne(Set#Empty(): Set, $Box(mutexScope#0));
    assert {:id "id3114"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##0
             || (Set#IsMember(mightPointTo##0, $Box($o))
               && $f == _module.Lifetime.mightPointFrom))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id3115"} $nw := Call$$_module.Lifetime.__ctor(universe##0, running##0, owner##0, mightPointTo##0);
    // TrCallStmt: After ProcessCallStmt
    $rhs#0 := $nw;
    lifetime#0 := $rhs#0;
    defass#lifetime#0 := true;

  after_0:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(911,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id3118"} universe#0 != null;
    assert {:id "id3119"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0);
    call {:id "id3120"} Call$$_module.Universe.FrameOutlives($Heap_at_0, $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(912,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id3121"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##1 := running#0;
    assert {:id "id3122"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id3123"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_0);
    call {:id "id3124"} Call$$_module.Universe.lci($Heap_at_0, $Heap, universe#0, running##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(913,5)
    assume true;
    assert {:id "id3125"} {:split_here} Lit(true);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(915,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id3126"} universe#0 != null;
    call {:id "id3127"} Call$$_module.Universe.OutlivesImpliesAlive(universe#0);
    // TrCallStmt: After ProcessCallStmt
    $Heap_at_1 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(918,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;

  after_1:
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(919,16)
    assume true;
    assume true;
    this.owner := running#0;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(920,19)
    assume true;
    assert {:id "id3130"} defass#lifetime#0;
    assume true;
    this.lifetime := lifetime#0;
    defass#this.lifetime := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(921,16)
    assume true;
    assume true;
    this.mutex := mutex#0;
    defass#this.mutex := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(922,15)
    assume true;
    assert {:id "id3133"} mutex#0 != null;
    assume true;
    this.data := $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref;
    defass#this.data := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(904,3)
    assert {:id "id3135"} defass#this.lifetime;
    assert {:id "id3136"} defass#this.universe;
    assert {:id "id3137"} defass#this.mutex;
    assert {:id "id3138"} defass#this.data;
    assume this != null && $Is(this, Tclass._module.MutexGuardU32?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume _module.OwnedObject.lifetime(this) == this.lifetime;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref == this.mutex;
    assume $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref == this.data;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(904,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(924,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id3139"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id3140"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(925,23)
    assert {:id "id3141"} lifetime#0 != null;
    assume true;
    assert {:id "id3142"} $_ModifiesFrame[lifetime#0, _module.Lifetime.elements];
    assert {:id "id3143"} lifetime#0 != null;
    assume true;
    $rhs#1 := Set#Union($Unbox(read($Heap, lifetime#0, _module.Lifetime.elements)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    $Heap := update($Heap, lifetime#0, _module.Lifetime.elements, $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(927,23)
    assert {:id "id3146"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assume true;
    assert {:id "id3147"} $_ModifiesFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.locked];
    assume true;
    $rhs#2 := Lit(true);
    $Heap := update($Heap, 
      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
      _module.Mutex.locked, 
      $Box($rhs#2));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(928,23)
    assert {:id "id3150"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assume true;
    assert {:id "id3151"} $_ModifiesFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.guards];
    assume true;
    $rhs#3 := Set#UnionOne(Set#Empty(): Set, $Box(this));
    $Heap := update($Heap, 
      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
      _module.Mutex.guards, 
      $Box($rhs#3));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(930,27)
    assert {:id "id3154"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id3155"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    assert {:id "id3156"} $_ModifiesFrame[$Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
        _module.Mutex.data)): ref, _module.OwnedObject.owner];
    assume true;
    $rhs#4 := this;
    $Heap := update($Heap, 
      $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref, 
      _module.OwnedObject.owner, 
      $Box($rhs#4));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(931,40)
    assert {:id "id3159"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id3160"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    assert {:id "id3161"} $_ModifiesFrame[$Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
        _module.Mutex.data)): ref, _module.OwnedObject.nonvolatileVersion];
    assert {:id "id3162"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id3163"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    ##last#0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref, 
        _module.OwnedObject.nonvolatileVersion)): int;
    // assume allocatedness for argument to function
    assume $IsAlloc(##last#0, TInt, $Heap);
    assume _module.__default.Bump#canCall($Unbox(read($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref, 
          _module.OwnedObject.nonvolatileVersion)): int);
    assume _module.__default.Bump#canCall($Unbox(read($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref, 
          _module.OwnedObject.nonvolatileVersion)): int);
    $rhs#5 := _module.__default.Bump($Unbox(read($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref, 
          _module.OwnedObject.nonvolatileVersion)): int);
    $Heap := update($Heap, 
      $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref, 
      _module.OwnedObject.nonvolatileVersion, 
      $Box($rhs#5));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(933,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id3166"} universe#0 != null;
    assert {:id "id3167"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_1);
    call {:id "id3168"} Call$$_module.Universe.FrameOutlives($Heap_at_1, $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(934,5)
    assert {:id "id3169"} {:subsumption 0} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id3170"} {:subsumption 0} mutex#0 != null;
    ##a#2 := _module.OwnedObject.lifetime(mutex#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#2, Tclass._module.Lifetime(), $Heap);
    ##b#2 := mutexScope#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#2, Tclass._module.Lifetime(), $Heap);
    assert {:id "id3171"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#2));
    assert {:id "id3172"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#2));
    assume _module.Universe.outlives#canCall($Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0);
    if (_module.Universe.outlives($LS($LZ), $Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0))
    {
        assert {:id "id3173"} {:subsumption 0} universe#0 != null;
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
        ##a#3 := mutexScope#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##a#3, Tclass._module.Lifetime(), $Heap);
        ##b#3 := _module.OwnedObject.lifetime(this);
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#3, Tclass._module.Lifetime(), $Heap);
        assert {:id "id3174"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#3));
        assert {:id "id3175"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#3));
        assume _module.Universe.outlives#canCall($Heap, universe#0, mutexScope#0, _module.OwnedObject.lifetime(this));
    }

    assume _module.Universe.outlives#canCall($Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0)
       && (_module.Universe.outlives($LS($LZ), $Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0)
         ==> _module.Universe.outlives#canCall($Heap, universe#0, mutexScope#0, _module.OwnedObject.lifetime(this)));
    assert {:id "id3176"} {:subsumption 0} _module.Universe.outlives#canCall($Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0)
       ==> _module.Universe.outlives($LS($LZ), $Heap, universe#0, _module.OwnedObject.lifetime(mutex#0), mutexScope#0)
         || 
        Set#IsMember($Unbox(read($Heap, mutexScope#0, _module.Lifetime.mightPointTo)): Set, 
          $Box(_module.OwnedObject.lifetime(mutex#0)))
         || (exists x#4: ref :: 
          { _module.Universe.outlivesThrough($LS($LZ), 
              $Heap, 
              universe#0, 
              _module.OwnedObject.lifetime(mutex#0), 
              x#4, 
              mutexScope#0) } 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#4)) } 
          $Is(x#4, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#4))
             && _module.Universe.outlivesThrough($LS($LZ), 
              $Heap, 
              universe#0, 
              _module.OwnedObject.lifetime(mutex#0), 
              x#4, 
              mutexScope#0));
    assert {:id "id3177"} {:subsumption 0} _module.Universe.outlives#canCall($Heap, universe#0, mutexScope#0, _module.OwnedObject.lifetime(this))
       ==> _module.Universe.outlives($LS($LZ), $Heap, universe#0, mutexScope#0, _module.OwnedObject.lifetime(this))
         || 
        Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointTo)): Set, 
          $Box(mutexScope#0))
         || (exists x#5: ref :: 
          { _module.Universe.outlivesThrough($LS($LS($LZ)), 
              $Heap, 
              universe#0, 
              mutexScope#0, 
              x#5, 
              _module.OwnedObject.lifetime(this)) } 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#5)) } 
          $Is(x#5, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#5))
             && _module.Universe.outlivesThrough($LS($LS($LZ)), 
              $Heap, 
              universe#0, 
              mutexScope#0, 
              x#5, 
              _module.OwnedObject.lifetime(this)));
    assume {:id "id3178"} _module.Universe.outlives($LS($LS($LZ)), 
        $Heap, 
        universe#0, 
        _module.OwnedObject.lifetime(mutex#0), 
        mutexScope#0)
       && _module.Universe.outlives($LS($LZ), $Heap, universe#0, mutexScope#0, _module.OwnedObject.lifetime(this));
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(935,5)
    assert {:id "id3179"} {:subsumption 0} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id3180"} {:subsumption 0} mutex#0 != null;
    ##a#4 := _module.OwnedObject.lifetime(mutex#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##a#4, Tclass._module.Lifetime(), $Heap);
    ##b#4 := _module.OwnedObject.lifetime(this);
    // assume allocatedness for argument to function
    assume $IsAlloc(##b#4, Tclass._module.Lifetime(), $Heap);
    assert {:id "id3181"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##a#4));
    assert {:id "id3182"} {:subsumption 0} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(##b#4));
    assume _module.Universe.outlives#canCall($Heap, 
      universe#0, 
      _module.OwnedObject.lifetime(mutex#0), 
      _module.OwnedObject.lifetime(this));
    assume _module.Universe.outlives#canCall($Heap, 
      universe#0, 
      _module.OwnedObject.lifetime(mutex#0), 
      _module.OwnedObject.lifetime(this));
    assert {:id "id3183"} {:subsumption 0} _module.Universe.outlives#canCall($Heap, 
        universe#0, 
        _module.OwnedObject.lifetime(mutex#0), 
        _module.OwnedObject.lifetime(this))
       ==> _module.Universe.outlives($LS($LZ), 
          $Heap, 
          universe#0, 
          _module.OwnedObject.lifetime(mutex#0), 
          _module.OwnedObject.lifetime(this))
         || 
        Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointTo)): Set, 
          $Box(_module.OwnedObject.lifetime(mutex#0)))
         || (exists x#6: ref :: 
          { _module.Universe.outlivesThrough($LS($LZ), 
              $Heap, 
              universe#0, 
              _module.OwnedObject.lifetime(mutex#0), 
              x#6, 
              _module.OwnedObject.lifetime(this)) } 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#6)) } 
          $Is(x#6, Tclass._module.Lifetime())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(x#6))
             && _module.Universe.outlivesThrough($LS($LZ), 
              $Heap, 
              universe#0, 
              _module.OwnedObject.lifetime(mutex#0), 
              x#6, 
              _module.OwnedObject.lifetime(this)));
    assume {:id "id3184"} _module.Universe.outlives($LS($LS($LZ)), 
      $Heap, 
      universe#0, 
      _module.OwnedObject.lifetime(mutex#0), 
      _module.OwnedObject.lifetime(this));
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(936,5)
    assert {:id "id3185"} {:subsumption 0} lifetime#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(lifetime#0), Tclass._module.Lifetime?(), $Heap);
    assume _module.Lifetime.alive#canCall($Heap, lifetime#0);
    assume _module.Lifetime.alive#canCall($Heap, lifetime#0);
    assert {:id "id3186"} {:subsumption 0} _module.Lifetime.alive#canCall($Heap, lifetime#0)
       ==> _module.Lifetime.alive($Heap, lifetime#0)
         || $Unbox(read($Heap, lifetime#0, _module.Lifetime.owner)): ref != null;
    assume {:id "id3187"} _module.Lifetime.alive($Heap, lifetime#0);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(937,5)
    assert {:id "id3188"} {:subsumption 0} mutex#0 != null;
    newtype$check#0 := null;
    assume true;
    assert {:id "id3189"} $Unbox(read($Heap, mutex#0, _module.OwnedObject.owner)): ref != null;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(938,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
    assume _module.MutexGuardU32.localUserInv#canCall($Heap, this);
    assume _module.MutexGuardU32.localUserInv#canCall($Heap, this);
    assert {:id "id3190"} {:subsumption 0} _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
            $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
          $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id3191"} {:subsumption 0} _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || (_module.Universe.outlives#canCall($Heap, 
            _module.Object.universe(this), 
            _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
            _module.OwnedObject.lifetime(this))
           ==> _module.Universe.outlives($LS($LZ), 
              $Heap, 
              _module.Object.universe(this), 
              _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
              _module.OwnedObject.lifetime(this))
             || 
            Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointTo)): Set, 
              $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)))
             || (exists x#7: ref :: 
              { _module.Universe.outlivesThrough($LS($LZ), 
                  $Heap, 
                  _module.Object.universe(this), 
                  _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                  x#7, 
                  _module.OwnedObject.lifetime(this)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(x#7)) } 
              $Is(x#7, Tclass._module.Lifetime())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(x#7))
                 && _module.Universe.outlivesThrough($LS($LZ), 
                  $Heap, 
                  _module.Object.universe(this), 
                  _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                  x#7, 
                  _module.OwnedObject.lifetime(this))));
    assert {:id "id3192"} {:subsumption 0} _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.OwnedObject.owner)): ref
           != null;
    assert {:id "id3193"} {:subsumption 0} _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.locked)): bool;
    assert {:id "id3194"} {:subsumption 0} _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || Set#Equal($Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.guards)): Set, 
          Set#UnionOne(Set#Empty(): Set, $Box(this)));
    assert {:id "id3195"} {:subsumption 0} _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref, 
              _module.OwnedObject.owner)): ref
           == this;
    assert {:id "id3196"} {:subsumption 0} _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref
           == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref;
    assume {:id "id3197"} _module.MutexGuardU32.localUserInv($Heap, this);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(939,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
    assume _module.MutexGuardU32.userInv#canCall($Heap, this);
    assume _module.MutexGuardU32.userInv#canCall($Heap, this);
    assert {:id "id3198"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.MutexGuardU32.localUserInv#canCall($Heap, this)
           ==> _module.MutexGuardU32.localUserInv($Heap, this)
             || Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(_module.OwnedObject.lifetime(this))), 
                $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))), 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set));
    assert {:id "id3199"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.MutexGuardU32.localUserInv#canCall($Heap, this)
           ==> _module.MutexGuardU32.localUserInv($Heap, this)
             || (_module.Universe.outlives#canCall($Heap, 
                _module.Object.universe(this), 
                _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                _module.OwnedObject.lifetime(this))
               ==> _module.Universe.outlives($LS($LZ), 
                  $Heap, 
                  _module.Object.universe(this), 
                  _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                  _module.OwnedObject.lifetime(this))
                 || 
                Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.mightPointTo)): Set, 
                  $Box(_module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)))
                 || (exists x#8: ref :: 
                  { _module.Universe.outlivesThrough($LS($LZ), 
                      $Heap, 
                      _module.Object.universe(this), 
                      _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                      x#8, 
                      _module.OwnedObject.lifetime(this)) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(x#8)) } 
                  $Is(x#8, Tclass._module.Lifetime())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(x#8))
                     && _module.Universe.outlivesThrough($LS($LZ), 
                      $Heap, 
                      _module.Object.universe(this), 
                      _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                      x#8, 
                      _module.OwnedObject.lifetime(this)))));
    assert {:id "id3200"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.MutexGuardU32.localUserInv#canCall($Heap, this)
           ==> _module.MutexGuardU32.localUserInv($Heap, this)
             || $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.OwnedObject.owner)): ref
               != null);
    assert {:id "id3201"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.MutexGuardU32.localUserInv#canCall($Heap, this)
           ==> _module.MutexGuardU32.localUserInv($Heap, this)
             || $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.locked)): bool);
    assert {:id "id3202"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.MutexGuardU32.localUserInv#canCall($Heap, this)
           ==> _module.MutexGuardU32.localUserInv($Heap, this)
             || Set#Equal($Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.guards)): Set, 
              Set#UnionOne(Set#Empty(): Set, $Box(this))));
    assert {:id "id3203"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.MutexGuardU32.localUserInv#canCall($Heap, this)
           ==> _module.MutexGuardU32.localUserInv($Heap, this)
             || $Unbox(read($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref
               == this);
    assert {:id "id3204"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.MutexGuardU32.localUserInv#canCall($Heap, this)
           ==> _module.MutexGuardU32.localUserInv($Heap, this)
             || $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref);
    assert {:id "id3205"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                 || Set#IsMember($Unbox(read($Heap, 
                      _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                      _module.Universe.content)): Set, 
                  read($Heap, this, _module.MutexGuardU32.mutex))));
    assert {:id "id3206"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                 || _module.Object.baseFieldsInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)));
    assert {:id "id3207"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                 || (_module.Universe.globalBaseInv#canCall($Heap, 
                    _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
                   ==> _module.Universe.globalBaseInv($Heap, 
                      _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
                     || Lit(true))));
    assert {:id "id3208"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                 || (_module.Universe.globalBaseInv#canCall($Heap, 
                    _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
                   ==> _module.Universe.globalBaseInv($Heap, 
                      _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
                     || (forall o#18: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#18) } 
                        { _module.Object.baseFieldsInv($Heap, o#18) } 
                        { _module.Object.universe(o#18) } 
                        { Set#IsMember($Unbox(read($Heap, 
                              _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                              _module.Universe.content)): Set, 
                          $Box(o#18)) } 
                      $Is(o#18, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, 
                                _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                                _module.Universe.content)): Set, 
                            $Box(o#18))
                         ==> _module.Object.universe(o#18)
                             == _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                           && o#18
                             != _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                           && _module.Object.baseFieldsInv($Heap, o#18)
                           && _module.Object.triggerAxioms($Heap, o#18)))));
    assert {:id "id3209"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || Set#IsMember($Unbox(read($Heap, 
                  _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                  _module.Lifetime.elements)): Set, 
              read($Heap, this, _module.MutexGuardU32.mutex)));
    assert {:id "id3210"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Lifetime.alive($Heap, 
                _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
               ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.OwnedObject.owner)): ref
                 != null));
    assert {:id "id3211"} {:subsumption 0} _module.MutexGuardU32.userInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.userInv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || ($Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.OwnedObject.owner)): ref
                 != null
               ==> _module.OwnedObject.localUserInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)));
    assume {:id "id3212"} _module.MutexGuardU32.userInv($Heap, this);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(940,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assert {:id "id3213"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(this))));
    assert {:id "id3214"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || _module.Object.baseFieldsInv($Heap, this)));
    assert {:id "id3215"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id3216"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#19: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#19) } 
                        { _module.Object.baseFieldsInv($Heap, o#19) } 
                        { _module.Object.universe(o#19) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#19)) } 
                      $Is(o#19, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#19))
                         ==> _module.Object.universe(o#19) == _module.Object.universe(this)
                           && o#19 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#19)
                           && _module.Object.triggerAxioms($Heap, o#19)))));
    assert {:id "id3217"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.OwnedObject.lifetime(this), _module.Lifetime.elements)): Set, 
              $Box(this)));
    assert {:id "id3218"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || (_module.Lifetime.alive($Heap, _module.OwnedObject.lifetime(this))
               ==> $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null));
    assert {:id "id3219"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || (_module.OwnedObject.localInv#canCall($Heap, this)
           ==> _module.OwnedObject.localInv($Heap, this)
             || ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
               ==> _module.OwnedObject.localUserInv($Heap, this)));
    assert {:id "id3220"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, this)
       ==> _module.OwnedObject.inv($Heap, this)
         || ($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null
           ==> _module.OwnedObject.userInv($Heap, this));
    assume {:id "id3221"} _module.OwnedObject.inv($Heap, this);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(941,5)
    assert {:id "id3222"} {:subsumption 0} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox(read($Heap, this, _module.MutexGuardU32.mutex), 
      Tclass._module.OwnedObject?(), 
      $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
    assume _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
    assert {:id "id3223"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                 || Set#IsMember($Unbox(read($Heap, 
                      _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                      _module.Universe.content)): Set, 
                  read($Heap, this, _module.MutexGuardU32.mutex))));
    assert {:id "id3224"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                 || _module.Object.baseFieldsInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)));
    assert {:id "id3225"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                 || (_module.Universe.globalBaseInv#canCall($Heap, 
                    _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
                   ==> _module.Universe.globalBaseInv($Heap, 
                      _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
                     || Lit(true))));
    assert {:id "id3226"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                 || (_module.Universe.globalBaseInv#canCall($Heap, 
                    _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
                   ==> _module.Universe.globalBaseInv($Heap, 
                      _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
                     || (forall o#20: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#20) } 
                        { _module.Object.baseFieldsInv($Heap, o#20) } 
                        { _module.Object.universe(o#20) } 
                        { Set#IsMember($Unbox(read($Heap, 
                              _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                              _module.Universe.content)): Set, 
                          $Box(o#20)) } 
                      $Is(o#20, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, 
                                _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                                _module.Universe.content)): Set, 
                            $Box(o#20))
                         ==> _module.Object.universe(o#20)
                             == _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                           && o#20
                             != _module.Object.universe($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
                           && _module.Object.baseFieldsInv($Heap, o#20)
                           && _module.Object.triggerAxioms($Heap, o#20)))));
    assert {:id "id3227"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || Set#IsMember($Unbox(read($Heap, 
                  _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref), 
                  _module.Lifetime.elements)): Set, 
              read($Heap, this, _module.MutexGuardU32.mutex)));
    assert {:id "id3228"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || (_module.Lifetime.alive($Heap, 
                _module.OwnedObject.lifetime($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
               ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.OwnedObject.owner)): ref
                 != null));
    assert {:id "id3229"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
           ==> _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
             || ($Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.OwnedObject.owner)): ref
                 != null
               ==> _module.OwnedObject.localUserInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)));
    assert {:id "id3230"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
       ==> _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
         || ($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.OwnedObject.owner)): ref
             != null
           ==> _module.OwnedObject.userInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref));
    assume {:id "id3231"} _module.OwnedObject.inv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(942,5)
    assert {:id "id3232"} {:subsumption 0} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id3233"} {:subsumption 0} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox(read($Heap, 
        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
        _module.Mutex.data), 
      Tclass._module.OwnedObject?(), 
      $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, 
      $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref);
    assume _module.OwnedObject.inv#canCall($Heap, 
      $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref);
    assert {:id "id3234"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref)
                 || Set#IsMember($Unbox(read($Heap, 
                      _module.Object.universe($Unbox(read($Heap, 
                            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                            _module.Mutex.data)): ref), 
                      _module.Universe.content)): Set, 
                  read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data))));
    assert {:id "id3235"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref)
                 || _module.Object.baseFieldsInv($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref)));
    assert {:id "id3236"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref)
                 || (_module.Universe.globalBaseInv#canCall($Heap, 
                    _module.Object.universe($Unbox(read($Heap, 
                          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                          _module.Mutex.data)): ref))
                   ==> _module.Universe.globalBaseInv($Heap, 
                      _module.Object.universe($Unbox(read($Heap, 
                            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                            _module.Mutex.data)): ref))
                     || Lit(true))));
    assert {:id "id3237"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data)): ref)
               ==> _module.Object.objectGlobalBaseInv($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref)
                 || (_module.Universe.globalBaseInv#canCall($Heap, 
                    _module.Object.universe($Unbox(read($Heap, 
                          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                          _module.Mutex.data)): ref))
                   ==> _module.Universe.globalBaseInv($Heap, 
                      _module.Object.universe($Unbox(read($Heap, 
                            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                            _module.Mutex.data)): ref))
                     || (forall o#21: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#21) } 
                        { _module.Object.baseFieldsInv($Heap, o#21) } 
                        { _module.Object.universe(o#21) } 
                        { Set#IsMember($Unbox(read($Heap, 
                              _module.Object.universe($Unbox(read($Heap, 
                                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                                    _module.Mutex.data)): ref), 
                              _module.Universe.content)): Set, 
                          $Box(o#21)) } 
                      $Is(o#21, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, 
                                _module.Object.universe($Unbox(read($Heap, 
                                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                                      _module.Mutex.data)): ref), 
                                _module.Universe.content)): Set, 
                            $Box(o#21))
                         ==> _module.Object.universe(o#21)
                             == _module.Object.universe($Unbox(read($Heap, 
                                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                                  _module.Mutex.data)): ref)
                           && o#21
                             != _module.Object.universe($Unbox(read($Heap, 
                                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                                  _module.Mutex.data)): ref)
                           && _module.Object.baseFieldsInv($Heap, o#21)
                           && _module.Object.triggerAxioms($Heap, o#21)))));
    assert {:id "id3238"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref)
             || Set#IsMember($Unbox(read($Heap, 
                  _module.OwnedObject.lifetime($Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                        _module.Mutex.data)): ref), 
                  _module.Lifetime.elements)): Set, 
              read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)));
    assert {:id "id3239"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref)
             || (_module.Lifetime.alive($Heap, 
                _module.OwnedObject.lifetime($Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref))
               ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                        _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref
                 != null));
    assert {:id "id3240"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref)
         || (_module.OwnedObject.localInv#canCall($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref)
           ==> _module.OwnedObject.localInv($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref)
             || ($Unbox(read($Heap, 
                    $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                        _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref
                 != null
               ==> _module.OwnedObject.localUserInv($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data)): ref)));
    assert {:id "id3241"} {:subsumption 0} _module.OwnedObject.inv#canCall($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref)
       ==> _module.OwnedObject.inv($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref)
         || ($Unbox(read($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref
             != null
           ==> _module.OwnedObject.userInv($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref));
    assume {:id "id3242"} _module.OwnedObject.inv($Heap, 
      $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(943,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id3243"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##2 := running#0;
    assert {:id "id3244"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_1);
    assert {:id "id3245"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_1);
    call {:id "id3246"} Call$$_module.Universe.lci($Heap_at_1, $Heap, universe#0, running##2);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(944,5)
    assume true;
    assert {:id "id3247"} {:split_here} Lit(true);
    $Heap_at_2 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(947,17)
    assert {:id "id3248"} scope#0 != null;
    assume true;
    assert {:id "id3249"} $_ModifiesFrame[scope#0, _module.Lifetime.owner];
    newtype$check#1 := null;
    assume true;
    $rhs#6 := null;
    $Heap := update($Heap, scope#0, _module.Lifetime.owner, $Box($rhs#6));
    assume $IsGoodHeap($Heap);

  after_2:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(948,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id3252"} universe#0 != null;
    assert {:id "id3253"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_2);
    call {:id "id3254"} Call$$_module.Universe.FrameOutlives($Heap_at_2, $Heap, universe#0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(949,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id3255"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##3 := running#0;
    assert {:id "id3256"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_2);
    assert {:id "id3257"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_2);
    call {:id "id3258"} Call$$_module.Universe.lci($Heap_at_2, $Heap, universe#0, running##3);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/12-MutexLifetime-short.dfy(950,5)
    assume true;
    assert {:id "id3259"} {:split_here} Lit(true);
}



// $Is axiom for non-null type _module.MutexGuardU32
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.MutexGuardU32()) } 
    { $Is(c#0, Tclass._module.MutexGuardU32?()) } 
  $Is(c#0, Tclass._module.MutexGuardU32())
     <==> $Is(c#0, Tclass._module.MutexGuardU32?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.MutexGuardU32
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.MutexGuardU32(), $h) } 
    { $IsAlloc(c#0, Tclass._module.MutexGuardU32?(), $h) } 
  $IsAlloc(c#0, Tclass._module.MutexGuardU32(), $h)
     <==> $IsAlloc(c#0, Tclass._module.MutexGuardU32?(), $h));

// type axiom for trait parent: Thread? extends Object?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Thread?()) } 
  $Is($o, Tclass._module.Thread?()) ==> $Is($o, Tclass._module.Object?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Thread?()) } 
  $IsBox(bx, Tclass._module.Thread?()) ==> $IsBox(bx, Tclass._module.Object?()));

// allocation axiom for trait parent: Thread? extends Object?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.Thread?(), $heap) } 
  $IsAlloc($o, Tclass._module.Thread?(), $heap)
     ==> $IsAlloc($o, Tclass._module.Object?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.Thread?(), $h) } 
  $IsAllocBox(bx, Tclass._module.Thread?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.Object?(), $h));

// type axiom for trait parent: OwnedObject? extends Object?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedObject?()) } 
  $Is($o, Tclass._module.OwnedObject?()) ==> $Is($o, Tclass._module.Object?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedObject?()) } 
  $IsBox(bx, Tclass._module.OwnedObject?())
     ==> $IsBox(bx, Tclass._module.Object?()));

// allocation axiom for trait parent: OwnedObject? extends Object?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedObject?(), $heap) } 
  $IsAlloc($o, Tclass._module.OwnedObject?(), $heap)
     ==> $IsAlloc($o, Tclass._module.Object?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h) } 
  $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.Object?(), $h));

// type axiom for trait parent: Lifetime? extends Object?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Lifetime?()) } 
  $Is($o, Tclass._module.Lifetime?()) ==> $Is($o, Tclass._module.Object?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Lifetime?()) } 
  $IsBox(bx, Tclass._module.Lifetime?()) ==> $IsBox(bx, Tclass._module.Object?()));

// allocation axiom for trait parent: Lifetime? extends Object?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.Lifetime?(), $heap) } 
  $IsAlloc($o, Tclass._module.Lifetime?(), $heap)
     ==> $IsAlloc($o, Tclass._module.Object?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.Lifetime?(), $h) } 
  $IsAllocBox(bx, Tclass._module.Lifetime?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.Object?(), $h));

// type axiom for trait parent: OwnedU32? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedU32?()) } 
  $Is($o, Tclass._module.OwnedU32?()) ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedU32?()) } 
  $IsBox(bx, Tclass._module.OwnedU32?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: OwnedU32? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedU32?(), $heap) } 
  $IsAlloc($o, Tclass._module.OwnedU32?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.OwnedU32?(), $h) } 
  $IsAllocBox(bx, Tclass._module.OwnedU32?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

// type axiom for trait parent: OutlivesClaim? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OutlivesClaim?()) } 
  $Is($o, Tclass._module.OutlivesClaim?())
     ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OutlivesClaim?()) } 
  $IsBox(bx, Tclass._module.OutlivesClaim?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: OutlivesClaim? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.OutlivesClaim?(), $heap) } 
  $IsAlloc($o, Tclass._module.OutlivesClaim?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.OutlivesClaim?(), $h) } 
  $IsAllocBox(bx, Tclass._module.OutlivesClaim?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

// type axiom for trait parent: Mutex? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Mutex?()) } 
  $Is($o, Tclass._module.Mutex?()) ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Mutex?()) } 
  $IsBox(bx, Tclass._module.Mutex?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: Mutex? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.Mutex?(), $heap) } 
  $IsAlloc($o, Tclass._module.Mutex?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.Mutex?(), $h) } 
  $IsAllocBox(bx, Tclass._module.Mutex?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

// type axiom for trait parent: MutexGuardU32? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.MutexGuardU32?()) } 
  $Is($o, Tclass._module.MutexGuardU32?())
     ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.MutexGuardU32?()) } 
  $IsBox(bx, Tclass._module.MutexGuardU32?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: MutexGuardU32? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.MutexGuardU32?(), $heap) } 
  $IsAlloc($o, Tclass._module.MutexGuardU32?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.MutexGuardU32?(), $h) } 
  $IsAllocBox(bx, Tclass._module.MutexGuardU32?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$_#Func2: TyTagFamily;

const unique tytagFamily$_#PartialFunc2: TyTagFamily;

const unique tytagFamily$_#TotalFunc2: TyTagFamily;

const unique tytagFamily$_#Func3: TyTagFamily;

const unique tytagFamily$_#PartialFunc3: TyTagFamily;

const unique tytagFamily$_#TotalFunc3: TyTagFamily;

const unique tytagFamily$_#Func4: TyTagFamily;

const unique tytagFamily$_#PartialFunc4: TyTagFamily;

const unique tytagFamily$_#TotalFunc4: TyTagFamily;

const unique tytagFamily$Universe: TyTagFamily;

const unique tytagFamily$Object: TyTagFamily;

const unique tytagFamily$Thread: TyTagFamily;

const unique tytagFamily$OwnedObject: TyTagFamily;

const unique tytagFamily$Lifetime: TyTagFamily;

const unique tytagFamily$ObjectClassKind: TyTagFamily;

const unique tytagFamily$OwnedU32: TyTagFamily;

const unique tytagFamily$OutlivesClaim: TyTagFamily;

const unique tytagFamily$Mutex: TyTagFamily;

const unique tytagFamily$MutexGuardU32: TyTagFamily;

const unique field$content: NameFamily;

const unique field$owner: NameFamily;

const unique field$nonvolatileVersion: NameFamily;

const unique field$mightPointTo: NameFamily;

const unique field$mightPointFrom: NameFamily;

const unique field$elements: NameFamily;

const unique field$value: NameFamily;

const unique field$data: NameFamily;

const unique field$locked: NameFamily;

const unique field$guards: NameFamily;

const unique field$mutex: NameFamily;
