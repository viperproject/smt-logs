// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy-@PROC@.smt2 /normalizeNames:0 /emitDebugInformation:1 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

const unique class._module.__default: ClassName;

procedure {:verboseName "BumpVersion (well-formedness)"} CheckWellFormed$$_module.__default.BumpVersion(last#0: int) returns (res#0: int);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "BumpVersion (call)"} Call$$_module.__default.BumpVersion(last#0: int) returns (res#0: int);
  modifies $Heap;
  // user-defined postconditions
  free ensures true;
  ensures {:id "id1"} res#0 > last#0;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



function Tclass._module.Universe() : Ty
uses {
// Tclass._module.Universe Tag
axiom Tag(Tclass._module.Universe()) == Tagclass._module.Universe
   && TagFamily(Tclass._module.Universe()) == tytagFamily$Universe;
}

const unique Tagclass._module.Universe: TyTag;

// Box/unbox axiom for Tclass._module.Universe
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Universe()) } 
  $IsBox(bx, Tclass._module.Universe())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Universe()));

function Tclass._module.Thread() : Ty
uses {
// Tclass._module.Thread Tag
axiom Tag(Tclass._module.Thread()) == Tagclass._module.Thread
   && TagFamily(Tclass._module.Thread()) == tytagFamily$Thread;
}

const unique Tagclass._module.Thread: TyTag;

// Box/unbox axiom for Tclass._module.Thread
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Thread()) } 
  $IsBox(bx, Tclass._module.Thread())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Thread()));

function Tclass._module.Mutex() : Ty
uses {
// Tclass._module.Mutex Tag
axiom Tag(Tclass._module.Mutex()) == Tagclass._module.Mutex
   && TagFamily(Tclass._module.Mutex()) == tytagFamily$Mutex;
}

const unique Tagclass._module.Mutex: TyTag;

// Box/unbox axiom for Tclass._module.Mutex
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Mutex()) } 
  $IsBox(bx, Tclass._module.Mutex())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Mutex()));

function Tclass._module.MutexGuardU32() : Ty
uses {
// Tclass._module.MutexGuardU32 Tag
axiom Tag(Tclass._module.MutexGuardU32()) == Tagclass._module.MutexGuardU32
   && TagFamily(Tclass._module.MutexGuardU32()) == tytagFamily$MutexGuardU32;
}

const unique Tagclass._module.MutexGuardU32: TyTag;

// Box/unbox axiom for Tclass._module.MutexGuardU32
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.MutexGuardU32()) } 
  $IsBox(bx, Tclass._module.MutexGuardU32())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.MutexGuardU32()));

procedure {:verboseName "Acquire (well-formedness)"} CheckWellFormed$$_module.__default.Acquire(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap))
   returns (guard#0: ref
       where $Is(guard#0, Tclass._module.MutexGuardU32())
         && $IsAlloc(guard#0, Tclass._module.MutexGuardU32(), $Heap));
  free requires 20 == $FunctionContextHeight;
  modifies $Heap;



function Tclass._module.Universe?() : Ty
uses {
// Tclass._module.Universe? Tag
axiom Tag(Tclass._module.Universe?()) == Tagclass._module.Universe?
   && TagFamily(Tclass._module.Universe?()) == tytagFamily$Universe;
}

const unique Tagclass._module.Universe?: TyTag;

// Box/unbox axiom for Tclass._module.Universe?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Universe?()) } 
  $IsBox(bx, Tclass._module.Universe?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Universe?()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Acquire (well-formedness)"} CheckWellFormed$$_module.__default.Acquire(universe#0: ref, running#0: ref, mutex#0: ref) returns (guard#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Acquire, CheckWellFormed$$_module.__default.Acquire
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    assert {:id "id2"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id3"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id4"} universe#0 != null;
    assume {:id "id5"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
    assert {:id "id6"} universe#0 != null;
    assume {:id "id7"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(mutex#0));
    assert {:id "id8"} universe#0 != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    havoc guard#0;
    assert {:id "id9"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id10"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id11"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id12"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id13"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0);
    assert {:id "id14"} universe#0 != null;
    assume {:id "id15"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(guard#0));
    assert {:id "id16"} guard#0 != null;
    assume {:id "id17"} $Unbox(read($Heap, guard#0, _module.OwnedObject.owner)): ref == running#0;
    assert {:id "id18"} guard#0 != null;
    assume {:id "id19"} $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref == mutex#0;
}



function Tclass._module.Object() : Ty
uses {
// Tclass._module.Object Tag
axiom Tag(Tclass._module.Object()) == Tagclass._module.Object
   && TagFamily(Tclass._module.Object()) == tytagFamily$Object;
}

const unique Tagclass._module.Object: TyTag;

// Box/unbox axiom for Tclass._module.Object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Object()) } 
  $IsBox(bx, Tclass._module.Object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Object()));

function _module.Object.universe(this: ref) : ref
uses {
// Object.universe: Type axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $o: ref :: 
    { _module.Object.universe($o) } 
    $o != null && $Is($o, Tclass._module.Object?())
       ==> $Is(_module.Object.universe($o), Tclass._module.Universe()));
// Object.universe: Allocation axiom
axiom 1 < $FunctionContextHeight
   ==> (forall $h: Heap, $o: ref :: 
    { _module.Object.universe($o), $Unbox(read($h, $o, alloc)): bool } 
    $IsGoodHeap($h)
         && 
        $o != null
         && $Is($o, Tclass._module.Object?())
         && $Unbox(read($h, $o, alloc)): bool
       ==> $IsAlloc(_module.Object.universe($o), Tclass._module.Universe(), $h));
}

procedure {:verboseName "Acquire (call)"} Call$$_module.__default.Acquire(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap))
   returns (guard#0: ref
       where $Is(guard#0, Tclass._module.MutexGuardU32())
         && $IsAlloc(guard#0, Tclass._module.MutexGuardU32(), $Heap));
  // user-defined preconditions
  requires {:id "id20"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id21"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id22"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id23"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  requires {:id "id24"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(mutex#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0)
     && (_module.Universe.globalInv($Heap, universe#0)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id25"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#3: ref :: 
      { _module.Object.inv($Heap, o#3) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3))
         ==> _module.Object.inv($Heap, o#3));
  free ensures {:id "id26"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalBaseInv(old($Heap), universe#0)
     && _module.Universe.globalBaseInv($Heap, universe#0)
     && Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)
     && (forall o#6: ref :: 
      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && 
          !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6))
         ==> !$IsAllocBox($Box(o#6), Tclass._module.Object(), old($Heap)));
  free ensures true;
  ensures {:id "id27"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(guard#0));
  free ensures true;
  ensures {:id "id28"} $Unbox(read($Heap, guard#0, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id29"} $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref == mutex#0;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Acquire (correctness)"} Impl$$_module.__default.Acquire(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap))
   returns (defass#guard#0: bool, 
    guard#0: ref
       where defass#guard#0
         ==> $Is(guard#0, Tclass._module.MutexGuardU32())
           && $IsAlloc(guard#0, Tclass._module.MutexGuardU32(), $Heap), 
    $_reverifyPost: bool);
  free requires 20 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id30"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#8: ref :: 
      { _module.Object.inv($Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv($Heap, o#8));
  requires {:id "id31"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  requires {:id "id32"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(mutex#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0)
     && (_module.Universe.globalInv($Heap, universe#0)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id33"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  ensures {:id "id34"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#9: ref :: 
            { _module.Object.triggerAxioms($Heap, o#9) } 
              { _module.Object.baseFieldsInv($Heap, o#9) } 
              { _module.Object.universe(o#9) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9)) } 
            $Is(o#9, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9))
               ==> _module.Object.universe(o#9) == universe#0
                 && o#9 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#9)
                 && _module.Object.triggerAxioms($Heap, o#9)));
  ensures {:id "id35"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#10: ref :: 
        { _module.Object.inv($Heap, o#10) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10)) } 
        $Is(o#10, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10))
           ==> _module.Object.inv($Heap, o#10));
  ensures {:id "id36"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true));
  ensures {:id "id37"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
           || (forall o#11: ref :: 
            { _module.Object.triggerAxioms(old($Heap), o#11) } 
              { _module.Object.baseFieldsInv(old($Heap), o#11) } 
              { _module.Object.universe(o#11) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
            $Is(o#11, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11))
               ==> _module.Object.universe(o#11) == universe#0
                 && o#11 != universe#0
                 && _module.Object.baseFieldsInv(old($Heap), o#11)
                 && _module.Object.triggerAxioms(old($Heap), o#11)));
  ensures {:id "id38"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  ensures {:id "id39"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#12: ref :: 
            { _module.Object.triggerAxioms($Heap, o#12) } 
              { _module.Object.baseFieldsInv($Heap, o#12) } 
              { _module.Object.universe(o#12) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
               ==> _module.Object.universe(o#12) == universe#0
                 && o#12 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#12)
                 && _module.Object.triggerAxioms($Heap, o#12)));
  ensures {:id "id40"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  ensures {:id "id41"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (forall o#13: ref :: 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && 
            !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13))
           ==> !$IsAllocBox($Box(o#13), Tclass._module.Object(), old($Heap)));
  free ensures true;
  ensures {:id "id42"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(guard#0));
  free ensures true;
  ensures {:id "id43"} $Unbox(read($Heap, guard#0, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id44"} $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref == mutex#0;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Acquire (correctness)"} Impl$$_module.__default.Acquire(universe#0: ref, running#0: ref, mutex#0: ref)
   returns (defass#guard#0: bool, guard#0: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var preempting##0: ref;
  var $Heap_at_0: Heap;
  var wasLocked#0: bool;
  var running##0: ref;
  var $Heap_at_1: Heap;
  var $PreLoopHeap$loop#0: Heap;
  var $Frame$loop#0: [ref,Field]bool;
  var $w$loop#0: bool;
  var preempting##0_0: ref;
  var $Heap_at_0_0: Heap;
  var running##0_0: ref;
  var $Heap_at_2: Heap;
  var $rhs#0: ref;
  var $nw: ref;
  var universe##0: ref;
  var running##1: ref;
  var mutex##0: ref;
  var running##2: ref;
  var preempting##1: ref;

    // AddMethodImpl: Acquire, Impl$$_module.__default.Acquire
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(606,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id45"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##0 := running#0;
    assert {:id "id46"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id47"} Call$$_module.Universe.Interference(universe#0, preempting##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(607,3)
    assume true;
    assert {:id "id48"} {:split_here} Lit(true);
    $Heap_at_0 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(610,17)
    assume true;
    assert {:id "id49"} mutex#0 != null;
    assume true;
    wasLocked#0 := $Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;

  after_0:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(611,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id51"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id52"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id53"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_0);
    call {:id "id54"} Call$$_module.Universe.lci($Heap_at_0, $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(612,3)
    assume true;
    assert {:id "id55"} {:split_here} Lit(true);
    $Heap_at_1 := $Heap;
    // ----- while statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(617,3)
    // Assume Fuel Constant
    assert {:id "id56"} universe#0 != null;
    assert {:id "id57"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    $Frame$loop#0 := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    $PreLoopHeap$loop#0 := $Heap;
    havoc $w$loop#0;
    while (true)
      free invariant $w$loop#0
         ==> _module.Universe.globalInv#canCall($Heap, universe#0)
           && (_module.Universe.globalInv($Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0));
      invariant {:id "id62"} $w$loop#0
         ==> 
        _module.Universe.globalInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalInv($Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
      invariant {:id "id63"} $w$loop#0
         ==> 
        _module.Universe.globalInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalInv($Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0)
               || (forall o#14: ref :: 
                { _module.Object.triggerAxioms($Heap, o#14) } 
                  { _module.Object.baseFieldsInv($Heap, o#14) } 
                  { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
                   ==> _module.Object.universe(o#14) == universe#0
                     && o#14 != universe#0
                     && _module.Object.baseFieldsInv($Heap, o#14)
                     && _module.Object.triggerAxioms($Heap, o#14)));
      invariant {:id "id64"} $w$loop#0
         ==> 
        _module.Universe.globalInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalInv($Heap, universe#0)
           || (forall o#15: ref :: 
            { _module.Object.inv($Heap, o#15) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
            $Is(o#15, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15))
               ==> _module.Object.inv($Heap, o#15));
      free invariant {:id "id65"} $w$loop#0
         ==> _module.Universe.globalInv#canCall($Heap, universe#0)
           && 
          _module.Universe.globalInv($Heap, universe#0)
           && 
          _module.Universe.globalBaseInv($Heap, universe#0)
           && (forall o#15: ref :: 
            { _module.Object.inv($Heap, o#15) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15)) } 
            $Is(o#15, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#15))
               ==> _module.Object.inv($Heap, o#15));
      invariant {:id "id66"} $w$loop#0
         ==> 
        _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence($Heap_at_1, $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap_at_1, universe#0)
             ==> _module.Universe.globalBaseInv($Heap_at_1, universe#0) || Lit(true));
      invariant {:id "id67"} $w$loop#0
         ==> 
        _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence($Heap_at_1, $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap_at_1, universe#0)
             ==> _module.Universe.globalBaseInv($Heap_at_1, universe#0)
               || (forall o#16: ref :: 
                { _module.Object.triggerAxioms($Heap_at_1, o#16) } 
                  { _module.Object.baseFieldsInv($Heap_at_1, o#16) } 
                  { _module.Object.universe(o#16) } 
                  { Set#IsMember($Unbox(read($Heap_at_1, universe#0, _module.Universe.content)): Set, $Box(o#16)) } 
                $Is(o#16, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap_at_1, universe#0, _module.Universe.content)): Set, $Box(o#16))
                   ==> _module.Object.universe(o#16) == universe#0
                     && o#16 != universe#0
                     && _module.Object.baseFieldsInv($Heap_at_1, o#16)
                     && _module.Object.triggerAxioms($Heap_at_1, o#16)));
      invariant {:id "id68"} $w$loop#0
         ==> 
        _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence($Heap_at_1, $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
      invariant {:id "id69"} $w$loop#0
         ==> 
        _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence($Heap_at_1, $Heap, universe#0)
           || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
             ==> _module.Universe.globalBaseInv($Heap, universe#0)
               || (forall o#17: ref :: 
                { _module.Object.triggerAxioms($Heap, o#17) } 
                  { _module.Object.baseFieldsInv($Heap, o#17) } 
                  { _module.Object.universe(o#17) } 
                  { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
                $Is(o#17, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#17))
                   ==> _module.Object.universe(o#17) == universe#0
                     && o#17 != universe#0
                     && _module.Object.baseFieldsInv($Heap, o#17)
                     && _module.Object.triggerAxioms($Heap, o#17)));
      invariant {:id "id70"} $w$loop#0
         ==> 
        _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence($Heap_at_1, $Heap, universe#0)
           || Set#Subset($Unbox(read($Heap_at_1, universe#0, _module.Universe.content)): Set, 
            $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
      invariant {:id "id71"} $w$loop#0
         ==> 
        _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0)
         ==> _module.Universe.baseLegalTransitionsSequence($Heap_at_1, $Heap, universe#0)
           || (forall o#18: ref :: 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
              { Set#IsMember($Unbox(read($Heap_at_1, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
            $Is(o#18, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read($Heap_at_1, universe#0, _module.Universe.content)): Set, $Box(o#18))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
               ==> !$IsAllocBox($Box(o#18), Tclass._module.Object(), $Heap_at_1));
      free invariant {:id "id72"} $w$loop#0
         ==> _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0)
           && 
          _module.Universe.baseLegalTransitionsSequence($Heap_at_1, $Heap, universe#0)
           && 
          _module.Universe.globalBaseInv($Heap_at_1, universe#0)
           && _module.Universe.globalBaseInv($Heap, universe#0)
           && Set#Subset($Unbox(read($Heap_at_1, universe#0, _module.Universe.content)): Set, 
            $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)
           && (forall o#18: ref :: 
            { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
              { Set#IsMember($Unbox(read($Heap_at_1, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
            $Is(o#18, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read($Heap_at_1, universe#0, _module.Universe.content)): Set, $Box(o#18))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
               ==> !$IsAllocBox($Box(o#18), Tclass._module.Object(), $Heap_at_1));
      free invariant true;
      invariant {:id "id75"} $w$loop#0
         ==> 
        !wasLocked#0
         ==> !$Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o]
             || 
            $o == universe#0
             || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null && $Unbox(read($PreLoopHeap$loop#0, $o, alloc)): bool
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f)
             || $Frame$loop#0[$o, $f]);
    {
        if (!$w$loop#0)
        {
            assert {:id "id58"} {:subsumption 0} universe#0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
            assume _module.Universe.globalInv#canCall($Heap, universe#0);
            if (_module.Universe.globalInv($Heap, universe#0))
            {
                assert {:id "id59"} {:subsumption 0} universe#0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
                assert {:id "id60"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_1);
                assume _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0);
            }

            assume _module.Universe.globalInv#canCall($Heap, universe#0)
               && (_module.Universe.globalInv($Heap, universe#0)
                 ==> _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0));
            assume {:id "id61"} _module.Universe.globalInv($Heap, universe#0)
               && _module.Universe.baseLegalTransitionsSequence($Heap_at_1, $Heap, universe#0);
            if (!wasLocked#0)
            {
                assert {:id "id73"} {:subsumption 0} mutex#0 != null;
            }

            assume true;
            assume {:id "id74"} !wasLocked#0 ==> !$Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;
            assume true;
            assume false;
        }

        assume true;
        if (!wasLocked#0)
        {
            break;
        }

        push;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(623,26)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id76"} universe#0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        preempting##0_0 := running#0;
        assert {:id "id77"} (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && ($o == universe#0
                 || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
             ==> $Frame$loop#0[$o, $f]);
        call {:id "id78"} Call$$_module.Universe.Interference(universe#0, preempting##0_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(624,5)
        assume true;
        assert {:id "id79"} {:split_here} Lit(true);
        $Heap_at_0_0 := $Heap;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(627,15)
        assume true;
        assert {:id "id80"} mutex#0 != null;
        assume true;
        wasLocked#0 := $Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;

      after_0_0:
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(628,25)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id82"} universe#0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        running##0_0 := running#0;
        assert {:id "id83"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0_0);
        assert {:id "id84"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_0_0);
        call {:id "id85"} Call$$_module.Universe.lci($Heap_at_0_0, $Heap, universe#0, running##0_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(629,5)
        assume true;
        assert {:id "id86"} {:split_here} Lit(true);
        pop;

      continue_1:
        assume _module.Universe.globalInv#canCall($Heap, universe#0)
           && (_module.Universe.globalInv($Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_1, $Heap, universe#0));
    }

  after_1:
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(631,3)
    assume true;
    assert {:id "id87"} {:split_here} Lit(true);
    $Heap_at_2 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(636,9)
    assume true;
    // ----- init call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(636,12)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := universe#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##1 := running#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    mutex##0 := mutex#0;
    assert {:id "id88"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && (
            $o == universe##0
             || ($o == mutex##0 && $f == _module.Mutex.locked)
             || ($o == mutex##0 && $f == _module.Mutex.guards)
             || ($o == $Unbox(read($Heap, mutex##0, _module.Mutex.data)): ref
               && $f == _module.OwnedObject.owner)
             || ($o == $Unbox(read($Heap, mutex##0, _module.Mutex.data)): ref
               && $f == _module.OwnedObject.nonvolatileVersion))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id89"} $nw := Call$$_module.MutexGuardU32.__ctor(universe##0, running##1, mutex##0);
    // TrCallStmt: After ProcessCallStmt
    $rhs#0 := $nw;
    guard#0 := $rhs#0;
    defass#guard#0 := true;

  after_2:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(637,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id92"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##2 := running#0;
    assert {:id "id93"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_2);
    assert {:id "id94"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_2);
    call {:id "id95"} Call$$_module.Universe.lci($Heap_at_2, $Heap, universe#0, running##2);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(638,3)
    assume true;
    assert {:id "id96"} {:split_here} Lit(true);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(640,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id97"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##1 := running#0;
    assert {:id "id98"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id99"} Call$$_module.Universe.Interference(universe#0, preempting##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(641,3)
    assume true;
    assert {:id "id100"} {:split_here} Lit(true);
    assert {:id "id101"} defass#guard#0;
}



procedure {:verboseName "SetData (well-formedness)"} {:vcs_split_on_every_assert} CheckWellFormed$$_module.__default.SetData(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap));
  free requires 21 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "SetData (well-formedness)"} {:vcs_split_on_every_assert} CheckWellFormed$$_module.__default.SetData(universe#0: ref, running#0: ref, mutex#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: SetData, CheckWellFormed$$_module.__default.SetData
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    assert {:id "id102"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id103"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id104"} universe#0 != null;
    assume {:id "id105"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
    assert {:id "id106"} universe#0 != null;
    assume {:id "id107"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(mutex#0));
    assert {:id "id108"} universe#0 != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    assert {:id "id109"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id110"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id111"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id112"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id113"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0);
}



procedure {:verboseName "SetData (call)"} {:vcs_split_on_every_assert} Call$$_module.__default.SetData(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap));
  // user-defined preconditions
  requires {:id "id114"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id115"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id116"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id117"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  requires {:id "id118"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(mutex#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0)
     && (_module.Universe.globalInv($Heap, universe#0)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id119"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#3: ref :: 
      { _module.Object.inv($Heap, o#3) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3))
         ==> _module.Object.inv($Heap, o#3));
  free ensures {:id "id120"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalBaseInv(old($Heap), universe#0)
     && _module.Universe.globalBaseInv($Heap, universe#0)
     && Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)
     && (forall o#6: ref :: 
      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && 
          !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6))
         ==> !$IsAllocBox($Box(o#6), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "SetData (correctness)"} {:vcs_split_on_every_assert} Impl$$_module.__default.SetData(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 21 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id121"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#8: ref :: 
      { _module.Object.inv($Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv($Heap, o#8));
  requires {:id "id122"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  requires {:id "id123"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(mutex#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0)
     && (_module.Universe.globalInv($Heap, universe#0)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id124"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  ensures {:id "id125"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#9: ref :: 
            { _module.Object.triggerAxioms($Heap, o#9) } 
              { _module.Object.baseFieldsInv($Heap, o#9) } 
              { _module.Object.universe(o#9) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9)) } 
            $Is(o#9, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9))
               ==> _module.Object.universe(o#9) == universe#0
                 && o#9 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#9)
                 && _module.Object.triggerAxioms($Heap, o#9)));
  ensures {:id "id126"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#10: ref :: 
        { _module.Object.inv($Heap, o#10) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10)) } 
        $Is(o#10, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10))
           ==> _module.Object.inv($Heap, o#10));
  ensures {:id "id127"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true));
  ensures {:id "id128"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
           || (forall o#11: ref :: 
            { _module.Object.triggerAxioms(old($Heap), o#11) } 
              { _module.Object.baseFieldsInv(old($Heap), o#11) } 
              { _module.Object.universe(o#11) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
            $Is(o#11, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11))
               ==> _module.Object.universe(o#11) == universe#0
                 && o#11 != universe#0
                 && _module.Object.baseFieldsInv(old($Heap), o#11)
                 && _module.Object.triggerAxioms(old($Heap), o#11)));
  ensures {:id "id129"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  ensures {:id "id130"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#12: ref :: 
            { _module.Object.triggerAxioms($Heap, o#12) } 
              { _module.Object.baseFieldsInv($Heap, o#12) } 
              { _module.Object.universe(o#12) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
               ==> _module.Object.universe(o#12) == universe#0
                 && o#12 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#12)
                 && _module.Object.triggerAxioms($Heap, o#12)));
  ensures {:id "id131"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  ensures {:id "id132"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (forall o#13: ref :: 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && 
            !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13))
           ==> !$IsAllocBox($Box(o#13), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "SetData (correctness)"} {:vcs_split_on_every_assert} Impl$$_module.__default.SetData(universe#0: ref, running#0: ref, mutex#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var preempting##0: ref;
  var defass#guard#0: bool;
  var guard#0: ref
     where defass#guard#0
       ==> $Is(guard#0, Tclass._module.MutexGuardU32())
         && $IsAlloc(guard#0, Tclass._module.MutexGuardU32(), $Heap);
  var $rhs##0: ref;
  var universe##0: ref;
  var running##0: ref;
  var mutex##0: ref;
  var preempting##1: ref;
  var $Heap_at_0: Heap;
  var a#0: int;
  var running##1: ref;
  var preempting##2: ref;
  var $Heap_at_1: Heap;
  var b#0: int;
  var running##2: ref;
  var preempting##3: ref;
  var $Heap_at_2: Heap;
  var running##3: ref;
  var preempting##4: ref;
  var $Heap_at_3: Heap;
  var $rhs#0: int;
  var $obj0: ref;
  var $rhs##1: int;
  var last##0: int;
  var $rhs##2: int;
  var last##1: int;
  var running##4: ref;
  var preempting##5: ref;

    // AddMethodImpl: SetData, Impl$$_module.__default.SetData
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(659,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id133"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##0 := running#0;
    assert {:id "id134"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id135"} Call$$_module.Universe.Interference(universe#0, preempting##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(662,23)
    assume true;
    // TrCallStmt: Adding lhs with type MutexGuardU32
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := universe#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    mutex##0 := mutex#0;
    assert {:id "id136"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##0
             || Set#IsMember($Unbox(read($Heap, universe##0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id137"} $rhs##0 := Call$$_module.__default.Acquire(universe##0, running##0, mutex##0);
    // TrCallStmt: After ProcessCallStmt
    guard#0 := $rhs##0;
    defass#guard#0 := true;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(664,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id139"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##1 := running#0;
    assert {:id "id140"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id141"} Call$$_module.Universe.Interference(universe#0, preempting##1);
    // TrCallStmt: After ProcessCallStmt
    $Heap_at_0 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(667,9)
    assume true;
    assert {:id "id142"} defass#guard#0;
    assert {:id "id143"} guard#0 != null;
    assert {:id "id144"} $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id145"} $Unbox(read($Heap, 
          $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    a#0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref, 
        _module.OwnedU32.value)): int;

  after_0:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(668,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id147"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##1 := running#0;
    assert {:id "id148"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id149"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_0);
    call {:id "id150"} Call$$_module.Universe.lci($Heap_at_0, $Heap, universe#0, running##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(670,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id151"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##2 := running#0;
    assert {:id "id152"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id153"} Call$$_module.Universe.Interference(universe#0, preempting##2);
    // TrCallStmt: After ProcessCallStmt
    $Heap_at_1 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(673,9)
    assume true;
    assert {:id "id154"} defass#guard#0;
    assert {:id "id155"} guard#0 != null;
    assert {:id "id156"} $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id157"} $Unbox(read($Heap, 
          $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    b#0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref, 
        _module.OwnedU32.value)): int;

  after_1:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(674,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id159"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##2 := running#0;
    assert {:id "id160"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_1);
    assert {:id "id161"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_1);
    call {:id "id162"} Call$$_module.Universe.lci($Heap_at_1, $Heap, universe#0, running##2);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(676,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id163"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##3 := running#0;
    assert {:id "id164"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id165"} Call$$_module.Universe.Interference(universe#0, preempting##3);
    // TrCallStmt: After ProcessCallStmt
    $Heap_at_2 := $Heap;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(679,3)
    assume true;
    assert {:id "id166"} a#0 == b#0;

  after_2:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(680,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id167"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##3 := running#0;
    assert {:id "id168"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_2);
    assert {:id "id169"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_2);
    call {:id "id170"} Call$$_module.Universe.lci($Heap_at_2, $Heap, universe#0, running##3);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(682,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id171"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##4 := running#0;
    assert {:id "id172"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id173"} Call$$_module.Universe.Interference(universe#0, preempting##4);
    // TrCallStmt: After ProcessCallStmt
    $Heap_at_3 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(685,26)
    assert {:id "id174"} defass#guard#0;
    assert {:id "id175"} guard#0 != null;
    assert {:id "id176"} $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id177"} $Unbox(read($Heap, 
          $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    assert {:id "id178"} $_ModifiesFrame[$Unbox(read($Heap, 
        $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
        _module.Mutex.data)): ref, _module.OwnedU32.value];
    assume true;
    $rhs#0 := LitInt(42);
    $Heap := update($Heap, 
      $Unbox(read($Heap, 
          $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref, 
      _module.OwnedU32.value, 
      $Box($rhs#0));
    assume $IsGoodHeap($Heap);

  after_3:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(686,53)
    assert {:id "id181"} defass#guard#0;
    assert {:id "id182"} guard#0 != null;
    assert {:id "id183"} $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id184"} $Unbox(read($Heap, 
          $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    $obj0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
        _module.Mutex.data)): ref;
    assert {:id "id185"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assert {:id "id186"} defass#guard#0;
    assert {:id "id187"} guard#0 != null;
    assert {:id "id188"} $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id189"} $Unbox(read($Heap, 
          $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, guard#0, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref, 
        _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id190"} $rhs##1 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##1));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(687,42)
    assert {:id "id192"} defass#guard#0;
    assert {:id "id193"} guard#0 != null;
    assume true;
    $obj0 := guard#0;
    assert {:id "id194"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assert {:id "id195"} defass#guard#0;
    assert {:id "id196"} guard#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##1 := $Unbox(read($Heap, guard#0, _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id197"} $rhs##2 := Call$$_module.__default.BumpVersion(last##1);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##2));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(688,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id199"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##4 := running#0;
    assert {:id "id200"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_3);
    assert {:id "id201"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_3);
    call {:id "id202"} Call$$_module.Universe.lci($Heap_at_3, $Heap, universe#0, running##4);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(690,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id203"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##5 := running#0;
    assert {:id "id204"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id205"} Call$$_module.Universe.Interference(universe#0, preempting##5);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "Main (well-formedness)"} CheckWellFormed$$_module.__default.Main(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  free requires 22 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Main (well-formedness)"} CheckWellFormed$$_module.__default.Main(universe#0: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Main, CheckWellFormed$$_module.__default.Main
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    assert {:id "id206"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id207"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id208"} universe#0 != null;
    assume {:id "id209"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
    assert {:id "id210"} universe#0 != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    assert {:id "id211"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id212"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id213"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assert {:id "id214"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0);
    assume {:id "id215"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0);
}



procedure {:verboseName "Main (call)"} Call$$_module.__default.Main(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id216"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id217"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id218"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id219"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0)
     && (_module.Universe.globalInv($Heap, universe#0)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0));
  free ensures {:id "id220"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#3: ref :: 
      { _module.Object.inv($Heap, o#3) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#3))
         ==> _module.Object.inv($Heap, o#3));
  free ensures {:id "id221"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
     && 
    _module.Universe.globalBaseInv(old($Heap), universe#0)
     && _module.Universe.globalBaseInv($Heap, universe#0)
     && Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)
     && (forall o#6: ref :: 
      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.Object())
           && 
          !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#6))
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#6))
         ==> !$IsAllocBox($Box(o#6), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Main (correctness)"} Impl$$_module.__default.Main(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 22 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id222"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#8: ref :: 
      { _module.Object.inv($Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv($Heap, o#8));
  requires {:id "id223"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, universe#0)
     && (_module.Universe.globalInv($Heap, universe#0)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0));
  ensures {:id "id224"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  ensures {:id "id225"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#9: ref :: 
            { _module.Object.triggerAxioms($Heap, o#9) } 
              { _module.Object.baseFieldsInv($Heap, o#9) } 
              { _module.Object.universe(o#9) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9)) } 
            $Is(o#9, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#9))
               ==> _module.Object.universe(o#9) == universe#0
                 && o#9 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#9)
                 && _module.Object.triggerAxioms($Heap, o#9)));
  ensures {:id "id226"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#10: ref :: 
        { _module.Object.inv($Heap, o#10) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10)) } 
        $Is(o#10, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#10))
           ==> _module.Object.inv($Heap, o#10));
  ensures {:id "id227"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true));
  ensures {:id "id228"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
           || (forall o#11: ref :: 
            { _module.Object.triggerAxioms(old($Heap), o#11) } 
              { _module.Object.baseFieldsInv(old($Heap), o#11) } 
              { _module.Object.universe(o#11) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
            $Is(o#11, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11))
               ==> _module.Object.universe(o#11) == universe#0
                 && o#11 != universe#0
                 && _module.Object.baseFieldsInv(old($Heap), o#11)
                 && _module.Object.triggerAxioms(old($Heap), o#11)));
  ensures {:id "id229"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  ensures {:id "id230"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#12: ref :: 
            { _module.Object.triggerAxioms($Heap, o#12) } 
              { _module.Object.baseFieldsInv($Heap, o#12) } 
              { _module.Object.universe(o#12) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
               ==> _module.Object.universe(o#12) == universe#0
                 && o#12 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#12)
                 && _module.Object.triggerAxioms($Heap, o#12)));
  ensures {:id "id231"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        $Unbox(read($Heap, universe#0, _module.Universe.content)): Set);
  ensures {:id "id232"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
       || (forall o#13: ref :: 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && 
            !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#13))
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#13))
           ==> !$IsAllocBox($Box(o#13), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



function Tclass._module.OwnedU32() : Ty
uses {
// Tclass._module.OwnedU32 Tag
axiom Tag(Tclass._module.OwnedU32()) == Tagclass._module.OwnedU32
   && TagFamily(Tclass._module.OwnedU32()) == tytagFamily$OwnedU32;
}

const unique Tagclass._module.OwnedU32: TyTag;

// Box/unbox axiom for Tclass._module.OwnedU32
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedU32()) } 
  $IsBox(bx, Tclass._module.OwnedU32())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.OwnedU32()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Main (correctness)"} Impl$$_module.__default.Main(universe#0: ref, running#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var preempting##0: ref;
  var $Heap_at_0: Heap;
  var defass#data#0: bool;
  var data#0: ref
     where defass#data#0
       ==> $Is(data#0, Tclass._module.OwnedU32())
         && $IsAlloc(data#0, Tclass._module.OwnedU32(), $Heap);
  var $rhs#0: ref;
  var $nw: ref;
  var universe##0: ref;
  var running##0: ref;
  var value##0: int;
  var running##1: ref;
  var $Heap_at_1: Heap;
  var defass#mutex#0: bool;
  var mutex#0: ref
     where defass#mutex#0
       ==> $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap);
  var $rhs#1: ref;
  var universe##1: ref;
  var running##2: ref;
  var data##0: ref;
  var running##3: ref;
  var universe##2: ref;
  var running##4: ref;
  var mutex##0: ref;
  var preempting##1: ref;

    // AddMethodImpl: Main, Impl$$_module.__default.Main
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(707,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id233"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##0 := running#0;
    assert {:id "id234"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id235"} Call$$_module.Universe.Interference(universe#0, preempting##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(708,3)
    assume true;
    assert {:id "id236"} {:split_here} Lit(true);
    $Heap_at_0 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(711,12)
    assume true;
    // ----- init call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(711,15)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##0 := universe#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    value##0 := LitInt(0);
    assert {:id "id237"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == universe##0
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id238"} $nw := Call$$_module.OwnedU32.__ctor(universe##0, running##0, value##0);
    // TrCallStmt: After ProcessCallStmt
    $rhs#0 := $nw;
    data#0 := $rhs#0;
    defass#data#0 := true;

  after_0:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(712,22)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id241"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##1 := running#0;
    assert {:id "id242"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id243"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_0);
    call {:id "id244"} Call$$_module.Universe.lci($Heap_at_0, $Heap, universe#0, running##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(713,3)
    assume true;
    assert {:id "id245"} {:split_here} Lit(true);
    $Heap_at_1 := $Heap;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(716,13)
    assume true;
    // ----- init call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(716,16)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##1 := universe#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##2 := running#0;
    assert {:id "id246"} defass#data#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    data##0 := data#0;
    assert {:id "id247"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##1 || $o == data##0)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id248"} $nw := Call$$_module.Mutex.__ctor(universe##1, running##2, data##0);
    // TrCallStmt: After ProcessCallStmt
    $rhs#1 := $nw;
    mutex#0 := $rhs#1;
    defass#mutex#0 := true;

  after_1:
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(717,22)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id251"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##3 := running#0;
    assert {:id "id252"} $IsAlloc(universe#0, Tclass._module.Universe(), $Heap_at_1);
    assert {:id "id253"} $IsAlloc(running#0, Tclass._module.Thread(), $Heap_at_1);
    call {:id "id254"} Call$$_module.Universe.lci($Heap_at_1, $Heap, universe#0, running##3);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(718,3)
    assume true;
    assert {:id "id255"} {:split_here} Lit(true);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(721,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    universe##2 := universe#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##4 := running#0;
    assert {:id "id256"} defass#mutex#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    mutex##0 := mutex#0;
    assert {:id "id257"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe##2
             || Set#IsMember($Unbox(read($Heap, universe##2, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id258"} Call$$_module.__default.SetData(universe##2, running##4, mutex##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(723,24)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id259"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    preempting##1 := running#0;
    assert {:id "id260"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == universe#0
             || Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id261"} Call$$_module.Universe.Interference(universe#0, preempting##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(724,3)
    assume true;
    assert {:id "id262"} {:split_here} Lit(true);
}



const unique class._module.Universe?: ClassName;

// $Is axiom for trait Universe
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Universe?()) } 
  $Is($o, Tclass._module.Universe?())
     <==> $o == null || implements$_module.Universe(dtype($o)));

// $IsAlloc axiom for trait Universe
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Universe?(), $h) } 
  $IsAlloc($o, Tclass._module.Universe?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.Universe(ty: Ty) : bool;

const _module.Universe.content: Field
uses {
axiom FDim(_module.Universe.content) == 0
   && FieldOfDecl(class._module.Universe?, field$content) == _module.Universe.content
   && !$IsGhostField(_module.Universe.content);
}

// Universe.content: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Universe.content)): Set } 
  $IsGoodHeap($h) && $o != null && $Is($o, Tclass._module.Universe?())
     ==> $Is($Unbox(read($h, $o, _module.Universe.content)): Set, 
      TSet(Tclass._module.Object())));

// Universe.content: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Universe.content)): Set } 
  $IsGoodHeap($h)
       && 
      $o != null
       && $Is($o, Tclass._module.Universe?())
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Universe.content)): Set, 
      TSet(Tclass._module.Object()), 
      $h));

// function declaration for _module.Universe.globalBaseInv
function _module.Universe.globalBaseInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalBaseInv (revealed)
axiom {:id "id263"} 6 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Universe.globalBaseInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalBaseInv#canCall($Heap, this)
         || (6 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap))
       ==> (Lit(true)
           ==> (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> 
              _module.Object.universe(o#0) == this
               ==> 
              o#0 != this
               ==> _module.Object.baseFieldsInv#canCall($Heap, o#0)
                 && (_module.Object.baseFieldsInv($Heap, o#0)
                   ==> _module.Object.triggerAxioms#canCall($Heap, o#0))))
         && _module.Universe.globalBaseInv($Heap, this)
           == (true
             && (forall o#0: ref :: 
              { _module.Object.triggerAxioms($Heap, o#0) } 
                { _module.Object.baseFieldsInv($Heap, o#0) } 
                { _module.Object.universe(o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> _module.Object.universe(o#0) == this
                   && o#0 != this
                   && _module.Object.baseFieldsInv($Heap, o#0)
                   && _module.Object.triggerAxioms($Heap, o#0))));
}

function _module.Universe.globalBaseInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalBaseInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalBaseInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Universe())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null
           && ($o == this
             || Set#IsMember($Unbox(read($h0, this, _module.Universe.content)): Set, $Box($o)))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalBaseInv($h0, this)
       == _module.Universe.globalBaseInv($h1, this));

function _module.Universe.globalBaseInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Universe.globalBaseInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Universe.globalBaseInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
     ==> _module.Universe.globalBaseInv#requires($Heap, this) == true);

procedure {:verboseName "Universe.globalBaseInv (well-formedness)"} CheckWellformed$$_module.Universe.globalBaseInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



function Tclass._module.Object?() : Ty
uses {
// Tclass._module.Object? Tag
axiom Tag(Tclass._module.Object?()) == Tagclass._module.Object?
   && TagFamily(Tclass._module.Object?()) == tytagFamily$Object;
}

const unique Tagclass._module.Object?: TyTag;

// Box/unbox axiom for Tclass._module.Object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Object?()) } 
  $IsBox(bx, Tclass._module.Object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Object?()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalBaseInv (well-formedness)"} CheckWellformed$$_module.Universe.globalBaseInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var o#1: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
    assert {:id "id264"} b$reqreads#0;
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // Begin Comprehension WF check
            havoc o#1;
            if ($Is(o#1, Tclass._module.Object())
               && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
            {
                b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    assert {:id "id265"} o#1 != null;
                    if (_module.Object.universe(o#1) == this)
                    {
                        newtype$check#0 := o#1;
                        newtype$check#1 := o#1;
                    }

                    if (_module.Object.universe(o#1) == this && o#1 != this)
                    {
                        assert {:id "id266"} o#1 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                        b$reqreads#2 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && ($o == o#1 || $o == _module.Object.universe(o#1))
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.baseFieldsInv#canCall($Heap, o#1);
                    }

                    if (_module.Object.universe(o#1) == this
                       && o#1 != this
                       && _module.Object.baseFieldsInv($Heap, o#1))
                    {
                        assert {:id "id267"} o#1 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                        b$reqreads#3 := (forall $o: ref, $f: Field :: 
                          $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == o#1
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.triggerAxioms#canCall($Heap, o#1);
                    }
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id268"} _module.Universe.globalBaseInv($Heap, this)
           == (true
             && (forall o#2: ref :: 
              { _module.Object.triggerAxioms($Heap, o#2) } 
                { _module.Object.baseFieldsInv($Heap, o#2) } 
                { _module.Object.universe(o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> _module.Object.universe(o#2) == this
                   && o#2 != this
                   && _module.Object.baseFieldsInv($Heap, o#2)
                   && _module.Object.triggerAxioms($Heap, o#2)));
        assume Lit(true)
           ==> (forall o#2: ref :: 
            { _module.Object.triggerAxioms($Heap, o#2) } 
              { _module.Object.baseFieldsInv($Heap, o#2) } 
              { _module.Object.universe(o#2) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
               ==> 
              _module.Object.universe(o#2) == this
               ==> 
              o#2 != this
               ==> _module.Object.baseFieldsInv#canCall($Heap, o#2)
                 && (_module.Object.baseFieldsInv($Heap, o#2)
                   ==> _module.Object.triggerAxioms#canCall($Heap, o#2)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalBaseInv($Heap, this), TBool);
        assert {:id "id269"} b$reqreads#1;
        assert {:id "id270"} b$reqreads#2;
        assert {:id "id271"} b$reqreads#3;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.globalInv
function _module.Universe.globalInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalInv (revealed)
axiom {:id "id272"} 13 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Universe.globalInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalInv#canCall($Heap, this)
         || (13 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $Heap))
       ==> _module.Universe.globalBaseInv#canCall($Heap, this)
         && (_module.Universe.globalBaseInv($Heap, this)
           ==> (forall o#0: ref :: 
            { _module.Object.inv($Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.inv#canCall($Heap, o#0)))
         && _module.Universe.globalInv($Heap, this)
           == (_module.Universe.globalBaseInv($Heap, this)
             && (forall o#0: ref :: 
              { _module.Object.inv($Heap, o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> _module.Object.inv($Heap, o#0))));
}

function _module.Universe.globalInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalInv($h0, this) == _module.Universe.globalInv($h1, this));

function _module.Universe.globalInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Universe.globalInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Universe.globalInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $Heap)
     ==> _module.Universe.globalInv#requires($Heap, this) == true);

procedure {:verboseName "Universe.globalInv (well-formedness)"} CheckWellformed$$_module.Universe.globalInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 13 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalInv (well-formedness)"} CheckWellformed$$_module.Universe.globalInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && ($o == this
                 || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Universe.globalBaseInv#canCall($Heap, this);
        if (_module.Universe.globalBaseInv($Heap, this))
        {
            // Begin Comprehension WF check
            havoc o#1;
            if ($Is(o#1, Tclass._module.Object())
               && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
            {
                b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    assert {:id "id273"} o#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                    b$reqreads#2 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.inv#canCall($Heap, o#1);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id274"} _module.Universe.globalInv($Heap, this)
           == (_module.Universe.globalBaseInv($Heap, this)
             && (forall o#2: ref :: 
              { _module.Object.inv($Heap, o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> _module.Object.inv($Heap, o#2)));
        assume _module.Universe.globalBaseInv#canCall($Heap, this)
           && (_module.Universe.globalBaseInv($Heap, this)
             ==> (forall o#2: ref :: 
              { _module.Object.inv($Heap, o#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                 ==> 
                Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> _module.Object.inv#canCall($Heap, o#2)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalInv($Heap, this), TBool);
        assert {:id "id275"} b$reqreads#0;
        assert {:id "id276"} b$reqreads#1;
        assert {:id "id277"} b$reqreads#2;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.globalSequenceInv2
function _module.Universe.globalSequenceInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalSequenceInv2 (revealed)
axiom {:id "id278"} 5 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Universe.globalSequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalSequenceInv2#canCall($prevHeap, $Heap, this)
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap))
       ==> (forall o#0: ref :: 
          { _module.Object.sequenceInv2($prevHeap, $Heap, o#0) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
          $Is(o#0, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
             ==> 
            Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
             ==> _module.Object.sequenceInv2#canCall($prevHeap, $Heap, o#0))
         && _module.Universe.globalSequenceInv2($prevHeap, $Heap, this)
           == (forall o#0: ref :: 
            { _module.Object.sequenceInv2($prevHeap, $Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 && _module.Object.sequenceInv2($prevHeap, $Heap, o#0)));
}

function _module.Universe.globalSequenceInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalSequenceInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalSequenceInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalSequenceInv2($prevHeap, $h0, this)
       == _module.Universe.globalSequenceInv2($prevHeap, $h1, this));

function _module.Universe.globalSequenceInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Universe.globalSequenceInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Universe.globalSequenceInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
     ==> _module.Universe.globalSequenceInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Universe.globalSequenceInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalSequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 5 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalSequenceInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalSequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc o#1;
        if ($Is(o#1, Tclass._module.Object())
           && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
        {
            assert {:id "id279"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1)))
            {
                b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    assert {:id "id280"} o#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                    assert {:id "id281"} $IsAlloc(o#1, Tclass._module.Object(), old($Heap));
                    b$reqreads#1 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#1);
                }
            }
        }

        // End Comprehension WF check
        assume {:id "id282"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, this)
           == (forall o#2: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 && _module.Object.sequenceInv2(old($Heap), $Heap, o#2));
        assume (forall o#2: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#2) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
          $Is(o#2, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
             ==> 
            Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
             ==> _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#2));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalSequenceInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id283"} b$reqreads#0;
        assert {:id "id284"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.globalInv2
function _module.Universe.globalInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.globalInv2 (revealed)
axiom {:id "id285"} 12 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Universe.globalInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.globalInv2#canCall($prevHeap, $Heap, this)
         || (12 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap))
       ==> (forall o#0: ref :: 
          { _module.Object.inv2($prevHeap, $Heap, o#0) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
          $Is(o#0, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
             ==> 
            Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
             ==> _module.Object.inv2#canCall($prevHeap, $Heap, o#0))
         && _module.Universe.globalInv2($prevHeap, $Heap, this)
           == (forall o#0: ref :: 
            { _module.Object.inv2($prevHeap, $Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 && _module.Object.inv2($prevHeap, $Heap, o#0)));
}

function _module.Universe.globalInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.globalInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.globalInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.globalInv2($prevHeap, $h0, this)
       == _module.Universe.globalInv2($prevHeap, $h1, this));

function _module.Universe.globalInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Universe.globalInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Universe.globalInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
     ==> _module.Universe.globalInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Universe.globalInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.globalInv2 (well-formedness)"} CheckWellformed$$_module.Universe.globalInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc o#1;
        if ($Is(o#1, Tclass._module.Object())
           && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
        {
            assert {:id "id286"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1)))
            {
                b$reqreads#0 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    assert {:id "id287"} o#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#1), Tclass._module.Object?(), $Heap);
                    assert {:id "id288"} $IsAlloc(o#1, Tclass._module.Object(), old($Heap));
                    b$reqreads#1 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.inv2#canCall(old($Heap), $Heap, o#1);
                }
            }
        }

        // End Comprehension WF check
        assume {:id "id289"} _module.Universe.globalInv2(old($Heap), $Heap, this)
           == (forall o#2: ref :: 
            { _module.Object.inv2(old($Heap), $Heap, o#2) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 && _module.Object.inv2(old($Heap), $Heap, o#2));
        assume (forall o#2: ref :: 
          { _module.Object.inv2(old($Heap), $Heap, o#2) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
          $Is(o#2, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
             ==> 
            Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
             ==> _module.Object.inv2#canCall(old($Heap), $Heap, o#2));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.globalInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id290"} b$reqreads#0;
        assert {:id "id291"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.baseLegalTransitionsSequence
function _module.Universe.baseLegalTransitionsSequence($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.baseLegalTransitionsSequence (revealed)
axiom {:id "id292"} 7 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Universe.baseLegalTransitionsSequence($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.baseLegalTransitionsSequence#canCall($prevHeap, $Heap, this)
         || (7 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap))
       ==> _module.Universe.globalBaseInv#canCall($prevHeap, this)
         && (_module.Universe.globalBaseInv($prevHeap, this)
           ==> _module.Universe.globalBaseInv#canCall($Heap, this))
         && _module.Universe.baseLegalTransitionsSequence($prevHeap, $Heap, this)
           == (
            _module.Universe.globalBaseInv($prevHeap, this)
             && _module.Universe.globalBaseInv($Heap, this)
             && Set#Subset($Unbox(read($prevHeap, this, _module.Universe.content)): Set, 
              $Unbox(read($Heap, this, _module.Universe.content)): Set)
             && (forall o#0: ref :: 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && 
                  !Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> !$IsAllocBox($Box(o#0), Tclass._module.Object(), $prevHeap))));
}

function _module.Universe.baseLegalTransitionsSequence#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.baseLegalTransitionsSequence
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.baseLegalTransitionsSequence($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.baseLegalTransitionsSequence($prevHeap, $h0, this)
       == _module.Universe.baseLegalTransitionsSequence($prevHeap, $h1, this));

function _module.Universe.baseLegalTransitionsSequence#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Universe.baseLegalTransitionsSequence
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Universe.baseLegalTransitionsSequence#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
     ==> _module.Universe.baseLegalTransitionsSequence#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "Universe.baseLegalTransitionsSequence (well-formedness)"} CheckWellformed$$_module.Universe.baseLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 7 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.baseLegalTransitionsSequence (well-formedness)"} CheckWellformed$$_module.Universe.baseLegalTransitionsSequence(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id293"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume _module.Universe.globalBaseInv#canCall(old($Heap), this);
        if (_module.Universe.globalBaseInv(old($Heap), this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == this
                     || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalBaseInv#canCall($Heap, this);
        }

        if (_module.Universe.globalBaseInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this))
        {
            assert {:id "id294"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
        }

        if (_module.Universe.globalBaseInv(old($Heap), this)
           && _module.Universe.globalBaseInv($Heap, this)
           && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set))
        {
            // Begin Comprehension WF check
            havoc o#1;
            if ($Is(o#1, Tclass._module.Object())
               && $IsAlloc(o#1, Tclass._module.Object(), $Heap))
            {
                assert {:id "id295"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (!Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1)))
                {
                    b$reqreads#2 := $_ReadsFrame[this, _module.Universe.content];
                }

                if (!Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#1))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)))
                {
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id296"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           == (
            _module.Universe.globalBaseInv(old($Heap), this)
             && _module.Universe.globalBaseInv($Heap, this)
             && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
              $Unbox(read($Heap, this, _module.Universe.content)): Set)
             && (forall o#2: ref :: 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)) } 
              $Is(o#2, Tclass._module.Object())
                   && 
                  !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))));
        assume _module.Universe.globalBaseInv#canCall(old($Heap), this)
           && (_module.Universe.globalBaseInv(old($Heap), this)
             ==> _module.Universe.globalBaseInv#canCall($Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this), TBool);
        assert {:id "id297"} b$reqreads#0;
        assert {:id "id298"} b$reqreads#1;
        assert {:id "id299"} b$reqreads#2;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.legalTransitionsSequence
function _module.Universe.legalTransitionsSequence($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool
uses {
// definition axiom for _module.Universe.legalTransitionsSequence (revealed)
axiom {:id "id300"} 8 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
    { _module.Universe.legalTransitionsSequence($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Universe.legalTransitionsSequence#canCall($prevHeap, $Heap, this, running#0)
         || (8 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
           && $Is(running#0, TSet(Tclass._module.Thread())))
       ==> _module.Universe.baseLegalTransitionsSequence#canCall($prevHeap, $Heap, this)
         && (_module.Universe.baseLegalTransitionsSequence($prevHeap, $Heap, this)
           ==> (forall o#0: ref :: 
            { _module.Object.sequenceInv2($prevHeap, $Heap, o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
               ==> 
              Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> 
              !(forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
               ==> _module.Object.sequenceInv2#canCall($prevHeap, $Heap, o#0)))
         && _module.Universe.legalTransitionsSequence($prevHeap, $Heap, this, running#0)
           == (
            _module.Universe.baseLegalTransitionsSequence($prevHeap, $Heap, this)
             && (forall o#0: ref :: 
              { _module.Object.sequenceInv2($prevHeap, $Heap, o#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                   || _module.Object.sequenceInv2($prevHeap, $Heap, o#0))
             && (forall o#1: ref :: 
              { $Unbox(read($Heap, o#1, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read($prevHeap, o#1, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read($prevHeap, o#1, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1)) } 
              $Is(o#1, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1))
                   && $Is($Unbox(read($prevHeap, o#1, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read($prevHeap, o#1, _module.OwnedObject.owner))
                   && $IsAllocBox(read($prevHeap, o#1, _module.OwnedObject.owner), 
                    Tclass._module.Object(), 
                    $prevHeap)
                 ==> $Unbox(read($prevHeap, o#1, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#1, _module.OwnedObject.nonvolatileVersion)): int)));
}

function _module.Universe.legalTransitionsSequence#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool;

// frame axiom for _module.Universe.legalTransitionsSequence
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: Set :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.legalTransitionsSequence($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && (_module.Universe.legalTransitionsSequence#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, TSet(Tclass._module.Thread()))
           && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.legalTransitionsSequence($prevHeap, $h0, this, running#0)
       == _module.Universe.legalTransitionsSequence($prevHeap, $h1, this, running#0));

function _module.Universe.legalTransitionsSequence#requires(Heap, Heap, ref, Set) : bool;

// #requires axiom for _module.Universe.legalTransitionsSequence
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
  { _module.Universe.legalTransitionsSequence#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
       && $Is(running#0, TSet(Tclass._module.Thread()))
     ==> _module.Universe.legalTransitionsSequence#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, TSet(Tclass._module.Thread()), $prevHeap));

function Tclass._module.OwnedObject() : Ty
uses {
// Tclass._module.OwnedObject Tag
axiom Tag(Tclass._module.OwnedObject()) == Tagclass._module.OwnedObject
   && TagFamily(Tclass._module.OwnedObject()) == tytagFamily$OwnedObject;
}

const unique Tagclass._module.OwnedObject: TyTag;

// Box/unbox axiom for Tclass._module.OwnedObject
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedObject()) } 
  $IsBox(bx, Tclass._module.OwnedObject())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.OwnedObject()));

procedure {:verboseName "Universe.legalTransitionsSequence (well-formedness)"} CheckWellformed$$_module.Universe.legalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 8 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.legalTransitionsSequence (well-formedness)"} CheckWellformed$$_module.Universe.legalTransitionsSequence(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var o#2: ref;
  var o#3: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        assert {:id "id301"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
        if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this))
        {
            // Begin Comprehension WF check
            havoc o#2;
            if ($Is(o#2, Tclass._module.Object())
               && $IsAlloc(o#2, Tclass._module.Object(), $Heap))
            {
                assert {:id "id302"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)))
                {
                    b$reqreads#1 := $_ReadsFrame[this, _module.Universe.content];
                }

                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#2)))
                {
                    assert {:id "id303"} $IsAlloc(o#2, Tclass._module.Object(), old($Heap));
                    b$reqreads#2 := (forall $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == o#2
                         ==> $_ReadsFrame[$o, $f]);
                    if (!(forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#2 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
                    {
                        assert {:id "id304"} o#2 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#2), Tclass._module.Object?(), $Heap);
                        assert {:id "id305"} $IsAlloc(o#2, Tclass._module.Object(), old($Heap));
                        b$reqreads#3 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && $Unbox(read($Heap, $o, alloc)): bool
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#2);
                    }
                }
            }

            // End Comprehension WF check
        }

        if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           && (forall o#4: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#4) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
            $Is(o#4, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#4)))
        {
            // Begin Comprehension WF check
            havoc o#3;
            if ($Is(o#3, Tclass._module.OwnedObject())
               && $IsAlloc(o#3, Tclass._module.OwnedObject(), $Heap))
            {
                assert {:id "id306"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3)))
                {
                    assert {:id "id307"} o#3 != null;
                    assert {:id "id308"} $IsAlloc(o#3, Tclass._module.OwnedObject(), old($Heap));
                }

                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3))
                   && $Is($Unbox(read(old($Heap), o#3, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread()))
                {
                    assert {:id "id309"} o#3 != null;
                    assert {:id "id310"} $IsAlloc(o#3, Tclass._module.OwnedObject(), old($Heap));
                    newtype$check#0 := $Unbox(read(old($Heap), o#3, _module.OwnedObject.owner)): ref;
                    assert {:id "id311"} $Is(newtype$check#0, Tclass._module.Thread());
                    newtype$check#1 := $Unbox(read(old($Heap), o#3, _module.OwnedObject.owner)): ref;
                    if (!Set#IsMember(running#0, read(old($Heap), o#3, _module.OwnedObject.owner)))
                    {
                        assert {:id "id312"} o#3 != null;
                        assert {:id "id313"} $IsAlloc(o#3, Tclass._module.OwnedObject(), old($Heap));
                    }

                    if (!Set#IsMember(running#0, read(old($Heap), o#3, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#3, _module.OwnedObject.owner), 
                        Tclass._module.Object(), 
                        old($Heap)))
                    {
                        assert {:id "id314"} o#3 != null;
                        assert {:id "id315"} $IsAlloc(o#3, Tclass._module.OwnedObject(), old($Heap));
                        assert {:id "id316"} o#3 != null;
                        b$reqreads#4 := $_ReadsFrame[o#3, _module.OwnedObject.nonvolatileVersion];
                    }
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id317"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
           == (
            _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
             && (forall o#4: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#4) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
              $Is(o#4, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#4))
             && (forall o#5: ref :: 
              { $Unbox(read($Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#5, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#5, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
              $Is(o#5, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
                   && $Is($Unbox(read(old($Heap), o#5, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#5, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#5, _module.OwnedObject.owner), 
                    Tclass._module.Object(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#5, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#5, _module.OwnedObject.nonvolatileVersion)): int));
        assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
           && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
             ==> (forall o#4: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#4) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
              $Is(o#4, Tclass._module.Object())
                 ==> 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                   && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
                 ==> 
                !(forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 ==> _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#4)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0), 
          TBool);
        assert {:id "id318"} b$reqreads#0;
        assert {:id "id319"} b$reqreads#1;
        assert {:id "id320"} b$reqreads#2;
        assert {:id "id321"} b$reqreads#3;
        assert {:id "id322"} b$reqreads#4;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.legalTransitionsSequenceAnyThread
function _module.Universe.legalTransitionsSequenceAnyThread($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Universe.legalTransitionsSequenceAnyThread (revealed)
axiom {:id "id323"} 9 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Universe.legalTransitionsSequenceAnyThread#canCall($prevHeap, $Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap))
       ==> _module.Universe.legalTransitionsSequence#canCall($prevHeap, 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#1: Box :: 
              $IsBox($y#1, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $y#1))))
         && _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $Heap, this)
           == _module.Universe.legalTransitionsSequence($prevHeap, 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#0: Box :: 
                $IsBox($y#0, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $y#0)))));
}

function _module.Universe.legalTransitionsSequenceAnyThread#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Universe.legalTransitionsSequenceAnyThread
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $h0, this)
       == _module.Universe.legalTransitionsSequenceAnyThread($prevHeap, $h1, this));

function _module.Universe.legalTransitionsSequenceAnyThread#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Universe.legalTransitionsSequenceAnyThread
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Universe.legalTransitionsSequenceAnyThread#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
     ==> _module.Universe.legalTransitionsSequenceAnyThread#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "Universe.legalTransitionsSequenceAnyThread (well-formedness)"} CheckWellformed$$_module.Universe.legalTransitionsSequenceAnyThread(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap));
  free requires 9 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.legalTransitionsSequenceAnyThread (well-formedness)"} CheckWellformed$$_module.Universe.legalTransitionsSequenceAnyThread(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##running#0: Set;
  var t#1: ref;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        // Begin Comprehension WF check
        havoc t#1;
        if ($Is(t#1, Tclass._module.Thread())
           && $IsAlloc(t#1, Tclass._module.Thread(), $Heap))
        {
            assert {:id "id324"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#1)))
            {
            }
        }

        // End Comprehension WF check
        ##running#0 := Set#FromBoogieMap((lambda $y#3: Box :: 
            $IsBox($y#3, Tclass._module.Thread())
               && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#3)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
        assert {:id "id325"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assert {:id "id326"} $IsAlloc(Set#FromBoogieMap((lambda $y#4: Box :: 
              $IsBox($y#4, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#4))), 
          TSet(Tclass._module.Thread()), 
          old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#5: Box :: 
              $IsBox($y#5, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#5))));
        assume {:id "id327"} _module.Universe.legalTransitionsSequenceAnyThread(old($Heap), $Heap, this)
           == _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#7: Box :: 
                $IsBox($y#7, Tclass._module.Thread())
                   && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#7))));
        assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#8: Box :: 
              $IsBox($y#8, Tclass._module.Thread())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#8))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.legalTransitionsSequenceAnyThread(old($Heap), $Heap, this), 
          TBool);
        assert {:id "id328"} b$reqreads#0;
        return;

        assume false;
    }
}



// function declaration for _module.Universe.legalTransition
function _module.Universe.legalTransition($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool
uses {
// definition axiom for _module.Universe.legalTransition (revealed)
axiom {:id "id329"} 14 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
    { _module.Universe.legalTransition($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Universe.legalTransition#canCall($prevHeap, $Heap, this, running#0)
         || (14 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Universe())
           && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
           && $Is(running#0, Tclass._module.Thread()))
       ==> _module.Universe.legalTransitionsSequence#canCall($prevHeap, $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         && (_module.Universe.legalTransitionsSequence($prevHeap, $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           ==> _module.Universe.globalInv#canCall($prevHeap, this)
             && (_module.Universe.globalInv($prevHeap, this)
               ==> (forall o#0: ref :: 
                  { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                    { _module.Object.inv($Heap, o#0) } 
                    { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                  $Is(o#0, Tclass._module.Object())
                     ==> 
                    Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                     ==> (!(forall $o: ref, $f: Field :: 
                          { read($Heap, $o, $f) } 
                          $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                         ==> _module.Object.inv#canCall($Heap, o#0))
                       && ((forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                           || _module.Object.inv($Heap, o#0)
                         ==> 
                        !(forall $o: ref, $f: Field :: 
                          { read($Heap, $o, $f) } 
                          $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                         ==> _module.Object.inv2#canCall($prevHeap, $Heap, o#0)))
                 && ((forall o#0: ref :: 
                    { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                      { _module.Object.inv($Heap, o#0) } 
                      { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                    $Is(o#0, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                       ==> ((forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                           || _module.Object.inv($Heap, o#0))
                         && ((forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                           || _module.Object.inv2($prevHeap, $Heap, o#0)))
                   ==> (forall o#1: ref :: 
                    { _module.Object.inv($Heap, o#1) } 
                      { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                      { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                    $Is(o#1, Tclass._module.Object())
                       ==> 
                      Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
                         && !Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1))
                       ==> _module.Object.inv#canCall($Heap, o#1)))))
         && _module.Universe.legalTransition($prevHeap, $Heap, this, running#0)
           == (
            _module.Universe.legalTransitionsSequence($prevHeap, $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             && _module.Universe.globalInv($prevHeap, this)
             && (forall o#0: ref :: 
              { _module.Object.inv2($prevHeap, $Heap, o#0) } 
                { _module.Object.inv($Heap, o#0) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0)) } 
              $Is(o#0, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#0))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                     || _module.Object.inv($Heap, o#0))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#0 ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
                     || _module.Object.inv2($prevHeap, $Heap, o#0)))
             && (forall o#1: ref :: 
              { _module.Object.inv($Heap, o#1) } 
                { Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
              $Is(o#1, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
                   && !Set#IsMember($Unbox(read($prevHeap, this, _module.Universe.content)): Set, $Box(o#1))
                 ==> _module.Object.inv($Heap, o#1))));
}

function _module.Universe.legalTransition#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool;

// frame axiom for _module.Universe.legalTransition
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Universe.legalTransition($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $h0)
       && (_module.Universe.legalTransition#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, Tclass._module.Thread())
           && $IsAlloc(running#0, Tclass._module.Thread(), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Universe.legalTransition($prevHeap, $h0, this, running#0)
       == _module.Universe.legalTransition($prevHeap, $h1, this, running#0));

function _module.Universe.legalTransition#requires(Heap, Heap, ref, ref) : bool;

// #requires axiom for _module.Universe.legalTransition
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
  { _module.Universe.legalTransition#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Universe())
       && $IsAlloc(this, Tclass._module.Universe(), $prevHeap)
       && $Is(running#0, Tclass._module.Thread())
     ==> _module.Universe.legalTransition#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, Tclass._module.Thread(), $prevHeap));

procedure {:verboseName "Universe.legalTransition (well-formedness)"} CheckWellformed$$_module.Universe.legalTransition(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 14 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.legalTransition (well-formedness)"} CheckWellformed$$_module.Universe.legalTransition(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##running#0: Set;
  var o#2: ref;
  var o#3: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        ##running#0 := Set#UnionOne(Set#Empty(): Set, $Box(running#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
        assert {:id "id330"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assert {:id "id331"} $IsAlloc(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
          TSet(Tclass._module.Thread()), 
          old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)));
        if (_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0))))
        {
            assert {:id "id332"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assume _module.Universe.globalInv#canCall(old($Heap), this);
        }

        if (_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           && _module.Universe.globalInv(old($Heap), this))
        {
            // Begin Comprehension WF check
            havoc o#2;
            if ($Is(o#2, Tclass._module.Object())
               && $IsAlloc(o#2, Tclass._module.Object(), $Heap))
            {
                assert {:id "id333"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#2)))
                {
                    assert {:id "id334"} $IsAlloc(o#2, Tclass._module.Object(), old($Heap));
                    b$reqreads#1 := (forall $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == o#2
                         ==> $_ReadsFrame[$o, $f]);
                    if (!(forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#2 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
                    {
                        assert {:id "id335"} o#2 != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox($Box(o#2), Tclass._module.Object?(), $Heap);
                        b$reqreads#2 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && $Unbox(read($Heap, $o, alloc)): bool
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.inv#canCall($Heap, o#2);
                        if (_module.Object.inv($Heap, o#2))
                        {
                            assert {:id "id336"} o#2 != null;
                            // assume allocatedness for receiver argument to function
                            assume $IsAllocBox($Box(o#2), Tclass._module.Object?(), $Heap);
                            assert {:id "id337"} $IsAlloc(o#2, Tclass._module.Object(), old($Heap));
                            b$reqreads#3 := (forall $o: ref, $f: Field :: 
                              $o != null
                                   && $Unbox(read($Heap, $o, alloc)): bool
                                   && $Unbox(read($Heap, $o, alloc)): bool
                                 ==> $_ReadsFrame[$o, $f]);
                            assume _module.Object.inv2#canCall(old($Heap), $Heap, o#2);
                        }
                    }
                }
            }

            // End Comprehension WF check
        }

        if (_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           && _module.Universe.globalInv(old($Heap), this)
           && (forall o#4: ref :: 
            { _module.Object.inv2(old($Heap), $Heap, o#4) } 
              { _module.Object.inv($Heap, o#4) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
            $Is(o#4, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
               ==> ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv($Heap, o#4))
                 && ((forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.inv2(old($Heap), $Heap, o#4))))
        {
            // Begin Comprehension WF check
            havoc o#3;
            if ($Is(o#3, Tclass._module.Object())
               && $IsAlloc(o#3, Tclass._module.Object(), $Heap))
            {
                b$reqreads#4 := $_ReadsFrame[this, _module.Universe.content];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3)))
                {
                    assert {:id "id338"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                }

                if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3))
                   && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3)))
                {
                    assert {:id "id339"} o#3 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(o#3), Tclass._module.Object?(), $Heap);
                    b$reqreads#5 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.inv#canCall($Heap, o#3);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id340"} _module.Universe.legalTransition(old($Heap), $Heap, this, running#0)
           == (
            _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             && _module.Universe.globalInv(old($Heap), this)
             && (forall o#4: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#4) } 
                { _module.Object.inv($Heap, o#4) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
              $Is(o#4, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#4))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#4)))
             && (forall o#5: ref :: 
              { _module.Object.inv($Heap, o#5) } 
                { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
              $Is(o#5, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5))
                   && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
                 ==> _module.Object.inv($Heap, o#5)));
        assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           && (_module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.globalInv#canCall(old($Heap), this)
               && (_module.Universe.globalInv(old($Heap), this)
                 ==> (forall o#4: ref :: 
                    { _module.Object.inv2(old($Heap), $Heap, o#4) } 
                      { _module.Object.inv($Heap, o#4) } 
                      { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
                    $Is(o#4, Tclass._module.Object())
                       ==> 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                       ==> (!(forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                           ==> _module.Object.inv#canCall($Heap, o#4))
                         && ((forall $o: ref, $f: Field :: 
                              { read($Heap, $o, $f) } 
                              $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                             || _module.Object.inv($Heap, o#4)
                           ==> 
                          !(forall $o: ref, $f: Field :: 
                            { read($Heap, $o, $f) } 
                            $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                           ==> _module.Object.inv2#canCall(old($Heap), $Heap, o#4)))
                   && ((forall o#4: ref :: 
                      { _module.Object.inv2(old($Heap), $Heap, o#4) } 
                        { _module.Object.inv($Heap, o#4) } 
                        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
                      $Is(o#4, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
                         ==> ((forall $o: ref, $f: Field :: 
                              { read($Heap, $o, $f) } 
                              $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                             || _module.Object.inv($Heap, o#4))
                           && ((forall $o: ref, $f: Field :: 
                              { read($Heap, $o, $f) } 
                              $o != null ==> $o == o#4 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                             || _module.Object.inv2(old($Heap), $Heap, o#4)))
                     ==> (forall o#5: ref :: 
                      { _module.Object.inv($Heap, o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
                        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                         ==> 
                        Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5))
                           && !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
                         ==> _module.Object.inv#canCall($Heap, o#5)))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Universe.legalTransition(old($Heap), $Heap, this, running#0), TBool);
        assert {:id "id341"} b$reqreads#0;
        assert {:id "id342"} b$reqreads#1;
        assert {:id "id343"} b$reqreads#2;
        assert {:id "id344"} b$reqreads#3;
        assert {:id "id345"} b$reqreads#4;
        assert {:id "id346"} b$reqreads#5;
        return;

        assume false;
    }
}



procedure {:verboseName "Universe.sequenceLci (well-formedness)"} CheckWellFormed$$_module.Universe.sequenceLci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.sequenceLci (well-formedness)"} CheckWellFormed$$_module.Universe.sequenceLci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceLci, CheckWellFormed$$_module.Universe.sequenceLci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id347"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id348"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id349"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id350"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id351"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.sequenceLci (call)"} Call$$_module.Universe.sequenceLci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id352"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true)));
  requires {:id "id353"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this)
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                  { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0))
                   ==> _module.Object.universe(o#0) == this
                     && o#0 != this
                     && _module.Object.baseFieldsInv(previous$Heap, o#0)
                     && _module.Object.triggerAxioms(previous$Heap, o#0))));
  requires {:id "id354"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true)));
  requires {:id "id355"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this)
               || (forall o#1: ref :: 
                { _module.Object.triggerAxioms(current$Heap, o#1) } 
                  { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                  { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1))
                   ==> _module.Object.universe(o#1) == this
                     && o#1 != this
                     && _module.Object.baseFieldsInv(current$Heap, o#1)
                     && _module.Object.triggerAxioms(current$Heap, o#1))));
  requires {:id "id356"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, this, _module.Universe.content)): Set));
  requires {:id "id357"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (forall o#2: ref :: 
            { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2))
               ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap)));
  requires {:id "id358"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall o#3: ref :: 
        { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
        $Is(o#3, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3))
             && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3))
           ==> (forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#3
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3));
  requires {:id "id359"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall o#4: ref :: 
        { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
        $Is(o#4, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4))
             && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(running#0, read(previous$Heap, o#4, _module.OwnedObject.owner))
             && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
              Tclass._module.Object(), 
              previous$Heap)
           ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalSequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id360"} _module.Universe.globalSequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Universe.globalSequenceInv2(previous$Heap, current$Heap, this)
     && (forall o#5: ref :: 
      { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#5) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
      $Is(o#5, Tclass._module.Object())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5))
         ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#5))
           && _module.Object.sequenceInv2(previous$Heap, current$Heap, o#5));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.sequenceLci (correctness)"} Impl$$_module.Universe.sequenceLci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 12 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id361"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
     && (forall o#9: ref :: 
      { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#9) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
      $Is(o#9, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9))
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#9))
         ==> (forall $o: ref, $f: Field :: 
            { read(current$Heap, $o, $f) } 
            $o != null
               ==> 
              $o == o#9
               ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
           || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#9))
     && (forall o#10: ref :: 
      { $Unbox(read(current$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#10, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#10)) } 
      $Is(o#10, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#10))
           && $Is($Unbox(read(previous$Heap, o#10, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(running#0, read(previous$Heap, o#10, _module.OwnedObject.owner))
           && $IsAllocBox(read(previous$Heap, o#10, _module.OwnedObject.owner), 
            Tclass._module.Object(), 
            previous$Heap)
         ==> $Unbox(read(previous$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, o#10, _module.OwnedObject.nonvolatileVersion)): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalSequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id362"} _module.Universe.globalSequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.globalSequenceInv2(previous$Heap, current$Heap, this)
       || (forall o#11: ref :: 
        { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#11) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
        $Is(o#11, Tclass._module.Object())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#11))
           ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#11))
             && _module.Object.sequenceInv2(previous$Heap, current$Heap, o#11));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.sequenceLci (correctness)"} Impl$$_module.Universe.sequenceLci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var o#0_0: ref;
  var ##running#0_0: Set;
  var running##0_0: Set;

    // AddMethodImpl: sequenceLci, Impl$$_module.Universe.sequenceLci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(87,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc o#0_0;
        assume $Is(o#0_0, Tclass._module.Object());
        assert {:id "id363"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0)))
        {
            assert {:id "id364"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            ##running#0_0 := running#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0_0, TSet(Tclass._module.Thread()), $Heap);
            assert {:id "id365"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assert {:id "id366"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
            assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, o#0_0, running#0);
        }

        assume Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           ==> _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, o#0_0, running#0);
        assume {:id "id367"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           && _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, o#0_0, running#0);
        if (*)
        {
            assert {:id "id368"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            assert {:id "id369"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#0_0);
            assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#0_0);
            assume {:id "id370"} _module.Object.sequenceInv2(old($Heap), $Heap, o#0_0);
            assume false;
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(87,137)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id371"} o#0_0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        running##0_0 := running#0;
        assert {:id "id372"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
        assert {:id "id373"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
        call {:id "id374"} Call$$_module.Object.sequenceAdmissibility(old($Heap), $Heap, o#0_0, running##0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id375"} _module.Object.sequenceInv2(old($Heap), $Heap, o#0_0);
        assume false;
    }
    else
    {
        assume (forall o#0_1: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#0_1) } 
            { _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, o#0_1, running#0) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1)) } 
          $Is(o#0_1, Tclass._module.Object())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1))
               && _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, o#0_1, running#0)
             ==> _module.Object.sequenceInv2(old($Heap), $Heap, o#0_1));
    }
}



procedure {:verboseName "Universe.lci (well-formedness)"} CheckWellFormed$$_module.Universe.lci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 18 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.lci (well-formedness)"} CheckWellFormed$$_module.Universe.lci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: lci, CheckWellFormed$$_module.Universe.lci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id376"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id377"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id378"} _module.Universe.legalTransition(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, this);
    assume {:id "id379"} _module.Universe.globalInv($Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id380"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id381"} _module.Universe.globalInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.lci (call)"} Call$$_module.Universe.lci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id382"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
                 ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true))));
  requires {:id "id383"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
                 ==> _module.Universe.globalBaseInv(previous$Heap, this)
                   || (forall o#0: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                      { _module.Object.universe(o#0) } 
                      { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                    $Is(o#0, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0))
                       ==> _module.Object.universe(o#0) == this
                         && o#0 != this
                         && _module.Object.baseFieldsInv(previous$Heap, o#0)
                         && _module.Object.triggerAxioms(previous$Heap, o#0)))));
  requires {:id "id384"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
                 ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true))));
  requires {:id "id385"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
                 ==> _module.Universe.globalBaseInv(current$Heap, this)
                   || (forall o#1: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#1) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                      { _module.Object.universe(o#1) } 
                      { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                    $Is(o#1, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1))
                       ==> _module.Object.universe(o#1) == this
                         && o#1 != this
                         && _module.Object.baseFieldsInv(current$Heap, o#1)
                         && _module.Object.triggerAxioms(current$Heap, o#1)))));
  requires {:id "id386"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, this, _module.Universe.content)): Set)));
  requires {:id "id387"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
               || (forall o#2: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
                $Is(o#2, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2))
                     && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2))
                   ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap))));
  requires {:id "id388"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#3: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
            $Is(o#3, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3))
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#3
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3)));
  requires {:id "id389"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
          current$Heap, 
          this, 
          Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
            current$Heap, 
            this, 
            Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#4: ref :: 
            { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
            $Is(o#4, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4))
                 && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(previous$Heap, o#4, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
  requires {:id "id390"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, this)
         ==> _module.Universe.globalInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true)));
  requires {:id "id391"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, this)
         ==> _module.Universe.globalInv(previous$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this)
               || (forall o#5: ref :: 
                { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                  { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                  { _module.Object.universe(o#5) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
                $Is(o#5, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#5))
                   ==> _module.Object.universe(o#5) == this
                     && o#5 != this
                     && _module.Object.baseFieldsInv(previous$Heap, o#5)
                     && _module.Object.triggerAxioms(previous$Heap, o#5))));
  requires {:id "id392"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.globalInv#canCall(previous$Heap, this)
         ==> _module.Universe.globalInv(previous$Heap, this)
           || (forall o#6: ref :: 
            { _module.Object.inv(previous$Heap, o#6) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#6))
               ==> _module.Object.inv(previous$Heap, o#6)));
  requires {:id "id393"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (forall o#7: ref :: 
        { _module.Object.inv2(previous$Heap, current$Heap, o#7) } 
          { _module.Object.inv(current$Heap, o#7) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#7)) } 
        $Is(o#7, Tclass._module.Object())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#7))
           ==> ((forall $o: ref, $f: Field :: 
                { read(current$Heap, $o, $f) } 
                $o != null
                   ==> 
                  $o == o#7
                   ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
               || _module.Object.inv(current$Heap, o#7))
             && ((forall $o: ref, $f: Field :: 
                { read(current$Heap, $o, $f) } 
                $o != null
                   ==> 
                  $o == o#7
                   ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
               || _module.Object.inv2(previous$Heap, current$Heap, o#7)));
  requires {:id "id394"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
       || (forall o#8: ref :: 
        { _module.Object.inv(current$Heap, o#8) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
        $Is(o#8, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8))
             && !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#8))
           ==> _module.Object.inv(current$Heap, o#8));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall(current$Heap, this)
     && (_module.Universe.globalInv(current$Heap, this)
       ==> _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this));
  free ensures {:id "id395"} _module.Universe.globalInv#canCall(current$Heap, this)
     && 
    _module.Universe.globalInv(current$Heap, this)
     && 
    _module.Universe.globalBaseInv(current$Heap, this)
     && (forall o#10: ref :: 
      { _module.Object.inv(current$Heap, o#10) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#10)) } 
      $Is(o#10, Tclass._module.Object())
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#10))
         ==> _module.Object.inv(current$Heap, o#10));
  free ensures {:id "id396"} _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Universe.globalInv2(previous$Heap, current$Heap, this)
     && (forall o#11: ref :: 
      { _module.Object.inv2(previous$Heap, current$Heap, o#11) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#11))
         ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#11))
           && _module.Object.inv2(previous$Heap, current$Heap, o#11));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.lci (correctness)"} Impl$$_module.Universe.lci(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 18 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id397"} _module.Universe.legalTransition#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.legalTransition(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.legalTransitionsSequence(previous$Heap, 
      current$Heap, 
      this, 
      Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && _module.Universe.globalInv(previous$Heap, this)
     && (forall o#19: ref :: 
      { _module.Object.inv2(previous$Heap, current$Heap, o#19) } 
        { _module.Object.inv(current$Heap, o#19) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19)) } 
      $Is(o#19, Tclass._module.Object())
           && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19))
         ==> ((forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#19
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.inv(current$Heap, o#19))
           && ((forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#19
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.inv2(previous$Heap, current$Heap, o#19)))
     && (forall o#20: ref :: 
      { _module.Object.inv(current$Heap, o#20) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#20)) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#20)) } 
      $Is(o#20, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#20))
           && !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#20))
         ==> _module.Object.inv(current$Heap, o#20));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall(current$Heap, this)
     && (_module.Universe.globalInv(current$Heap, this)
       ==> _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this));
  ensures {:id "id398"} _module.Universe.globalInv#canCall(current$Heap, this)
     ==> _module.Universe.globalInv(current$Heap, this)
       || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
         ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true));
  ensures {:id "id399"} _module.Universe.globalInv#canCall(current$Heap, this)
     ==> _module.Universe.globalInv(current$Heap, this)
       || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
         ==> _module.Universe.globalBaseInv(current$Heap, this)
           || (forall o#21: ref :: 
            { _module.Object.triggerAxioms(current$Heap, o#21) } 
              { _module.Object.baseFieldsInv(current$Heap, o#21) } 
              { _module.Object.universe(o#21) } 
              { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#21))
               ==> _module.Object.universe(o#21) == this
                 && o#21 != this
                 && _module.Object.baseFieldsInv(current$Heap, o#21)
                 && _module.Object.triggerAxioms(current$Heap, o#21)));
  ensures {:id "id400"} _module.Universe.globalInv#canCall(current$Heap, this)
     ==> _module.Universe.globalInv(current$Heap, this)
       || (forall o#22: ref :: 
        { _module.Object.inv(current$Heap, o#22) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#22)) } 
        $Is(o#22, Tclass._module.Object())
             && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#22))
           ==> _module.Object.inv(current$Heap, o#22));
  ensures {:id "id401"} _module.Universe.globalInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Universe.globalInv2(previous$Heap, current$Heap, this)
       || (forall o#23: ref :: 
        { _module.Object.inv2(previous$Heap, current$Heap, o#23) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#23)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#23)) } 
        $Is(o#23, Tclass._module.Object())
             && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#23))
           ==> Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#23))
             && _module.Object.inv2(previous$Heap, current$Heap, o#23));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.lci (correctness)"} Impl$$_module.Universe.lci(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var o#0_0: ref;
  var ##running#0_0: ref;
  var running##0_0: ref;

    // AddMethodImpl: lci, Impl$$_module.Universe.lci
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(95,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc o#0_0;
        assume $Is(o#0_0, Tclass._module.Object());
        assert {:id "id402"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0)))
        {
            assert {:id "id403"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            ##running#0_0 := running#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0_0, Tclass._module.Thread(), $Heap);
            assert {:id "id404"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assert {:id "id405"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
            assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, o#0_0, running#0);
        }

        assume Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           ==> _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, o#0_0, running#0);
        assume {:id "id406"} Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0))
           && _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, o#0_0, running#0);
        if (*)
        {
            assert {:id "id407"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            assert {:id "id408"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
            assume _module.Object.inv2#canCall(old($Heap), $Heap, o#0_0);
            if (_module.Object.inv2(old($Heap), $Heap, o#0_0))
            {
                assert {:id "id409"} {:subsumption 0} o#0_0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
                assume _module.Object.inv#canCall($Heap, o#0_0);
            }

            assume _module.Object.inv2#canCall(old($Heap), $Heap, o#0_0)
               && (_module.Object.inv2(old($Heap), $Heap, o#0_0)
                 ==> _module.Object.inv#canCall($Heap, o#0_0));
            assume {:id "id410"} _module.Object.inv2(old($Heap), $Heap, o#0_0)
               && _module.Object.inv($Heap, o#0_0);
            assume false;
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(95,124)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id411"} o#0_0 != null;
        assume true;
        // ProcessCallStmt: CheckSubrange
        running##0_0 := running#0;
        assert {:id "id412"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
        assert {:id "id413"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
        call {:id "id414"} Call$$_module.Object.admissibility(old($Heap), $Heap, o#0_0, running##0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id415"} _module.Object.inv2(old($Heap), $Heap, o#0_0);
        assert {:id "id416"} _module.Object.inv($Heap, o#0_0);
        assume false;
    }
    else
    {
        assume (forall o#0_1: ref :: 
          { _module.Object.inv($Heap, o#0_1) } 
            { _module.Object.inv2(old($Heap), $Heap, o#0_1) } 
            { _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, o#0_1, running#0) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1)) } 
          $Is(o#0_1, Tclass._module.Object())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_1))
               && _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, o#0_1, running#0)
             ==> _module.Object.inv2(old($Heap), $Heap, o#0_1)
               && _module.Object.inv($Heap, o#0_1));
    }
}



procedure {:verboseName "Universe.Havoc (well-formedness)"} CheckWellFormed$$_module.Universe.Havoc(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.Havoc (well-formedness)"} CheckWellFormed$$_module.Universe.Havoc(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: Havoc, CheckWellFormed$$_module.Universe.Havoc
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalBaseInv#canCall($Heap, this);
    assume {:id "id417"} _module.Universe.globalBaseInv($Heap, this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == this
           || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalBaseInv#canCall($Heap, this);
    assume {:id "id418"} _module.Universe.globalBaseInv($Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id419"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
    assume {:id "id420"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.Havoc (call)"} Call$$_module.Universe.Havoc(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  // user-defined preconditions
  requires {:id "id421"} _module.Universe.globalBaseInv#canCall($Heap, this)
     ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true);
  requires {:id "id422"} _module.Universe.globalBaseInv#canCall($Heap, this)
     ==> _module.Universe.globalBaseInv($Heap, this)
       || (forall o#0: ref :: 
        { _module.Object.triggerAxioms($Heap, o#0) } 
          { _module.Object.baseFieldsInv($Heap, o#0) } 
          { _module.Object.universe(o#0) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
        $Is(o#0, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
           ==> _module.Object.universe(o#0) == this
             && o#0 != this
             && _module.Object.baseFieldsInv($Heap, o#0)
             && _module.Object.triggerAxioms($Heap, o#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalBaseInv#canCall($Heap, this)
     && (_module.Universe.globalBaseInv($Heap, this)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this));
  free ensures {:id "id423"} _module.Universe.globalBaseInv#canCall($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && 
    true
     && (forall o#1: ref :: 
      { _module.Object.triggerAxioms($Heap, o#1) } 
        { _module.Object.baseFieldsInv($Heap, o#1) } 
        { _module.Object.universe(o#1) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
      $Is(o#1, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
         ==> _module.Object.universe(o#1) == this
           && o#1 != this
           && _module.Object.baseFieldsInv($Heap, o#1)
           && _module.Object.triggerAxioms($Heap, o#1));
  free ensures {:id "id424"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
     && 
    _module.Universe.globalBaseInv(old($Heap), this)
     && _module.Universe.globalBaseInv($Heap, this)
     && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
      $Unbox(read($Heap, this, _module.Universe.content)): Set)
     && (forall o#4: ref :: 
      { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4)) } 
      $Is(o#4, Tclass._module.Object())
           && 
          !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#4))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
         ==> !$IsAllocBox($Box(o#4), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Universe.Havoc (correctness)"} Impl$$_module.Universe.Havoc(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id425"} _module.Universe.globalBaseInv#canCall($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && 
    true
     && (forall o#5: ref :: 
      { _module.Object.triggerAxioms($Heap, o#5) } 
        { _module.Object.baseFieldsInv($Heap, o#5) } 
        { _module.Object.universe(o#5) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
      $Is(o#5, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5))
         ==> _module.Object.universe(o#5) == this
           && o#5 != this
           && _module.Object.baseFieldsInv($Heap, o#5)
           && _module.Object.triggerAxioms($Heap, o#5));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalBaseInv#canCall($Heap, this)
     && (_module.Universe.globalBaseInv($Heap, this)
       ==> _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this));
  ensures {:id "id426"} _module.Universe.globalBaseInv#canCall($Heap, this)
     ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true);
  ensures {:id "id427"} _module.Universe.globalBaseInv#canCall($Heap, this)
     ==> _module.Universe.globalBaseInv($Heap, this)
       || (forall o#6: ref :: 
        { _module.Object.triggerAxioms($Heap, o#6) } 
          { _module.Object.baseFieldsInv($Heap, o#6) } 
          { _module.Object.universe(o#6) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#6)) } 
        $Is(o#6, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#6))
           ==> _module.Object.universe(o#6) == this
             && o#6 != this
             && _module.Object.baseFieldsInv($Heap, o#6)
             && _module.Object.triggerAxioms($Heap, o#6));
  ensures {:id "id428"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
         ==> _module.Universe.globalBaseInv(old($Heap), this) || Lit(true));
  ensures {:id "id429"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
         ==> _module.Universe.globalBaseInv(old($Heap), this)
           || (forall o#7: ref :: 
            { _module.Object.triggerAxioms(old($Heap), o#7) } 
              { _module.Object.baseFieldsInv(old($Heap), o#7) } 
              { _module.Object.universe(o#7) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#7)) } 
            $Is(o#7, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#7))
               ==> _module.Object.universe(o#7) == this
                 && o#7 != this
                 && _module.Object.baseFieldsInv(old($Heap), o#7)
                 && _module.Object.triggerAxioms(old($Heap), o#7)));
  ensures {:id "id430"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
  ensures {:id "id431"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this)
           || (forall o#8: ref :: 
            { _module.Object.triggerAxioms($Heap, o#8) } 
              { _module.Object.baseFieldsInv($Heap, o#8) } 
              { _module.Object.universe(o#8) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8))
               ==> _module.Object.universe(o#8) == this
                 && o#8 != this
                 && _module.Object.baseFieldsInv($Heap, o#8)
                 && _module.Object.triggerAxioms($Heap, o#8)));
  ensures {:id "id432"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
        $Unbox(read($Heap, this, _module.Universe.content)): Set);
  ensures {:id "id433"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (forall o#9: ref :: 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9)) } 
        $Is(o#9, Tclass._module.Object())
             && 
            !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9))
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#9))
           ==> !$IsAllocBox($Box(o#9), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.Havoc (correctness)"} Impl$$_module.Universe.Havoc(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: Havoc, Impl$$_module.Universe.Havoc
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
}



procedure {:verboseName "Universe.Interference (well-formedness)"} CheckWellFormed$$_module.Universe.Interference(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    preempting#0: ref
       where $Is(preempting#0, Tclass._module.Thread())
         && $IsAlloc(preempting#0, Tclass._module.Thread(), $Heap));
  free requires 19 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.Interference (well-formedness)"} CheckWellFormed$$_module.Universe.Interference(this: ref, preempting#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;
  var t#0: ref;


    // AddMethodImpl: Interference, CheckWellFormed$$_module.Universe.Interference
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, this);
    assume {:id "id434"} _module.Universe.globalInv($Heap, this);
    assume {:id "id435"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(preempting#0));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == this
           || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, this);
    assume {:id "id436"} _module.Universe.globalInv($Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    // Begin Comprehension WF check
    havoc t#0;
    if ($Is(t#0, Tclass._module.Thread())
       && $IsAlloc(t#0, Tclass._module.Thread(), $Heap))
    {
        assert {:id "id437"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#0)))
        {
        }

        if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#0))
           && t#0 != preempting#0)
        {
        }
    }

    // End Comprehension WF check
    ##running#0 := Set#FromBoogieMap((lambda $y#1: Box :: 
        $IsBox($y#1, Tclass._module.Thread())
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#1)
           && $Unbox($y#1): ref != preempting#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id438"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id439"} $IsAlloc(Set#FromBoogieMap((lambda $y#2: Box :: 
          $IsBox($y#2, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#2)
             && $Unbox($y#2): ref != preempting#0)), 
      TSet(Tclass._module.Thread()), 
      old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#3: Box :: 
          $IsBox($y#3, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#3)
             && $Unbox($y#3): ref != preempting#0)));
    assume {:id "id440"} _module.Universe.legalTransitionsSequence(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#4: Box :: 
          $IsBox($y#4, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#4)
             && $Unbox($y#4): ref != preempting#0)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id441"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id442"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.Interference (call)"} Call$$_module.Universe.Interference(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    preempting#0: ref
       where $Is(preempting#0, Tclass._module.Thread())
         && $IsAlloc(preempting#0, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id443"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
  requires {:id "id444"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == this
                 && o#0 != this
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id445"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id446"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(preempting#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, this);
  free ensures {:id "id447"} _module.Universe.globalInv#canCall($Heap, this)
     && 
    _module.Universe.globalInv($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && (forall o#3: ref :: 
      { _module.Object.inv($Heap, o#3) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3))
         ==> _module.Object.inv($Heap, o#3));
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#5: Box :: 
          $IsBox($y#5, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#5)
             && $Unbox($y#5): ref != preempting#0)))
     && (_module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#6: Box :: 
            $IsBox($y#6, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#6)
               && $Unbox($y#6): ref != preempting#0)))
       ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this));
  free ensures {:id "id448"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#7: Box :: 
          $IsBox($y#7, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#7)
             && $Unbox($y#7): ref != preempting#0)))
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#8: Box :: 
          $IsBox($y#8, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#8)
             && $Unbox($y#8): ref != preempting#0)))
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
     && (forall o#7: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#7) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#7)) } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#7)) } 
      $Is(o#7, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#7))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#7))
         ==> (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           || _module.Object.sequenceInv2(old($Heap), $Heap, o#7))
     && (forall o#8: ref :: 
      { $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#8))
           && $Is($Unbox(read(old($Heap), o#8, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(Set#FromBoogieMap((lambda $y#10: Box :: 
                $IsBox($y#10, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#10)
                   && $Unbox($y#10): ref != preempting#0)), 
            read(old($Heap), o#8, _module.OwnedObject.owner))
           && $IsAllocBox(read(old($Heap), o#8, _module.OwnedObject.owner), 
            Tclass._module.Object(), 
            old($Heap))
         ==> $Unbox(read(old($Heap), o#8, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, o#8, _module.OwnedObject.nonvolatileVersion)): int);
  free ensures {:id "id449"} _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)
     && 
    _module.Universe.globalSequenceInv2(old($Heap), $Heap, this)
     && (forall o#9: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#9) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9)) } 
      $Is(o#9, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9))
         ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#9))
           && _module.Object.sequenceInv2(old($Heap), $Heap, o#9));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Universe.Interference (correctness)"} Impl$$_module.Universe.Interference(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    preempting#0: ref
       where $Is(preempting#0, Tclass._module.Thread())
         && $IsAlloc(preempting#0, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id450"} _module.Universe.globalInv#canCall($Heap, this)
     && 
    _module.Universe.globalInv($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && (forall o#11: ref :: 
      { _module.Object.inv($Heap, o#11) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#11))
         ==> _module.Object.inv($Heap, o#11));
  requires {:id "id451"} Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(preempting#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.globalInv#canCall($Heap, this);
  ensures {:id "id452"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
  ensures {:id "id453"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this)
           || (forall o#12: ref :: 
            { _module.Object.triggerAxioms($Heap, o#12) } 
              { _module.Object.baseFieldsInv($Heap, o#12) } 
              { _module.Object.universe(o#12) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#12)) } 
            $Is(o#12, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#12))
               ==> _module.Object.universe(o#12) == this
                 && o#12 != this
                 && _module.Object.baseFieldsInv($Heap, o#12)
                 && _module.Object.triggerAxioms($Heap, o#12)));
  ensures {:id "id454"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (forall o#13: ref :: 
        { _module.Object.inv($Heap, o#13) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#13))
           ==> _module.Object.inv($Heap, o#13));
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#11: Box :: 
          $IsBox($y#11, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#11)
             && $Unbox($y#11): ref != preempting#0)))
     && (_module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#12: Box :: 
            $IsBox($y#12, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#12)
               && $Unbox($y#12): ref != preempting#0)))
       ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this));
  ensures {:id "id455"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#13: Box :: 
          $IsBox($y#13, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#13)
             && $Unbox($y#13): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#14: Box :: 
            $IsBox($y#14, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#14)
               && $Unbox($y#14): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
             ==> _module.Universe.globalBaseInv(old($Heap), this) || Lit(true)));
  ensures {:id "id456"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#13: Box :: 
          $IsBox($y#13, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#13)
             && $Unbox($y#13): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#14: Box :: 
            $IsBox($y#14, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#14)
               && $Unbox($y#14): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
             ==> _module.Universe.globalBaseInv(old($Heap), this)
               || (forall o#14: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#14) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#14) } 
                  { _module.Object.universe(o#14) } 
                  { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#14)) } 
                $Is(o#14, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#14))
                   ==> _module.Object.universe(o#14) == this
                     && o#14 != this
                     && _module.Object.baseFieldsInv(old($Heap), o#14)
                     && _module.Object.triggerAxioms(old($Heap), o#14))));
  ensures {:id "id457"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#13: Box :: 
          $IsBox($y#13, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#13)
             && $Unbox($y#13): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#14: Box :: 
            $IsBox($y#14, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#14)
               && $Unbox($y#14): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, this)
             ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true)));
  ensures {:id "id458"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#13: Box :: 
          $IsBox($y#13, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#13)
             && $Unbox($y#13): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#14: Box :: 
            $IsBox($y#14, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#14)
               && $Unbox($y#14): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, this)
             ==> _module.Universe.globalBaseInv($Heap, this)
               || (forall o#15: ref :: 
                { _module.Object.triggerAxioms($Heap, o#15) } 
                  { _module.Object.baseFieldsInv($Heap, o#15) } 
                  { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#15))
                   ==> _module.Object.universe(o#15) == this
                     && o#15 != this
                     && _module.Object.baseFieldsInv($Heap, o#15)
                     && _module.Object.triggerAxioms($Heap, o#15))));
  ensures {:id "id459"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#13: Box :: 
          $IsBox($y#13, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#13)
             && $Unbox($y#13): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#14: Box :: 
            $IsBox($y#14, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#14)
               && $Unbox($y#14): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set));
  ensures {:id "id460"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#13: Box :: 
          $IsBox($y#13, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#13)
             && $Unbox($y#13): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#14: Box :: 
            $IsBox($y#14, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#14)
               && $Unbox($y#14): ref != preempting#0)))
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (forall o#16: ref :: 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#16)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#16))
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#16))
               ==> !$IsAllocBox($Box(o#16), Tclass._module.Object(), old($Heap))));
  ensures {:id "id461"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#13: Box :: 
          $IsBox($y#13, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#13)
             && $Unbox($y#13): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#14: Box :: 
            $IsBox($y#14, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#14)
               && $Unbox($y#14): ref != preempting#0)))
       || (forall o#17: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#17) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#17)) } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#17)) } 
        $Is(o#17, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#17))
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#17))
           ==> (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#17 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.sequenceInv2(old($Heap), $Heap, o#17));
  ensures {:id "id462"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
      $Heap, 
      this, 
      Set#FromBoogieMap((lambda $y#13: Box :: 
          $IsBox($y#13, Tclass._module.Thread())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#13)
             && $Unbox($y#13): ref != preempting#0)))
     ==> _module.Universe.legalTransitionsSequence(old($Heap), 
        $Heap, 
        this, 
        Set#FromBoogieMap((lambda $y#14: Box :: 
            $IsBox($y#14, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#14)
               && $Unbox($y#14): ref != preempting#0)))
       || (forall o#18: ref :: 
        { $Unbox(read($Heap, o#18, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#18, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#18, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#18)) } 
        $Is(o#18, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#18))
             && $Is($Unbox(read(old($Heap), o#18, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(Set#FromBoogieMap((lambda $y#15: Box :: 
                  $IsBox($y#15, Tclass._module.Thread())
                     && 
                    Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#15)
                     && $Unbox($y#15): ref != preempting#0)), 
              read(old($Heap), o#18, _module.OwnedObject.owner))
             && $IsAllocBox(read(old($Heap), o#18, _module.OwnedObject.owner), 
              Tclass._module.Object(), 
              old($Heap))
           ==> $Unbox(read(old($Heap), o#18, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, o#18, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id463"} _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, this)
       || (forall o#19: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#19) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#19)) } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#19)) } 
        $Is(o#19, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#19))
           ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#19))
             && _module.Object.sequenceInv2(old($Heap), $Heap, o#19));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.Interference (correctness)"} Impl$$_module.Universe.Interference(this: ref, preempting#0: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var steps#0: int;
  var steps#1: int;
  var running##0: Set;
  var $PreLoopHeap$loop#0: Heap;
  var $decr_init$loop#00: int;
  var $w$loop#0: bool;
  var ##running#1: Set;
  var t#2: ref;
  var $decr$loop#00: int;
  var envThreads#0_0: Set
     where $Is(envThreads#0_0, TSet(Tclass._module.Thread()))
       && $IsAlloc(envThreads#0_0, TSet(Tclass._module.Thread()), $Heap);
  var t#0_0: ref;
  var defass#running#0_0_0: bool;
  var running#0_0_0: ref
     where defass#running#0_0_0
       ==> $Is(running#0_0_0, Tclass._module.Thread())
         && $IsAlloc(running#0_0_0, Tclass._module.Thread(), $Heap);
  var running#0_0_1: ref;
  var $Heap_at_0_0_0: Heap;
  var ##running#0_0_0: ref;
  var running##0_0_0: ref;

    // AddMethodImpl: Interference, Impl$$_module.Universe.Interference
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(119,20)
    havoc steps#1;
    if (true)
    {
        assume true;
    }

    assert {:id "id464"} ($Is(LitInt(0), TInt) && LitInt(0) <= LitInt(0))
       || 
      ($Is(LitInt(0), TInt) && LitInt(0) <= LitInt(0))
       || (exists $as#steps0#0: int :: LitInt(0) <= $as#steps0#0);
    havoc steps#0;
    assume {:id "id465"} LitInt(0) <= steps#0;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(120,16)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := Lit(Set#Empty(): Set);
    assert {:id "id466"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id467"} $IsAlloc(Lit(Set#Empty(): Set), TSet(Tclass._module.Thread()), old($Heap));
    call {:id "id468"} Call$$_module.Universe.sequenceLci(old($Heap), $Heap, this, running##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- while statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(121,5)
    // Assume Fuel Constant
    $PreLoopHeap$loop#0 := $Heap;
    $decr_init$loop#00 := steps#0 - 0;
    havoc $w$loop#0;
    while (true)
      free invariant $w$loop#0
         ==> _module.Universe.globalInv#canCall($Heap, this)
           && (_module.Universe.globalInv($Heap, this)
             ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                this, 
                Set#FromBoogieMap((lambda $y#25: Box :: 
                    $IsBox($y#25, Tclass._module.Thread())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#25)
                       && $Unbox($y#25): ref != preempting#0)))
               && (_module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  this, 
                  Set#FromBoogieMap((lambda $y#26: Box :: 
                      $IsBox($y#26, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#26)
                         && $Unbox($y#26): ref != preempting#0)))
                 ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)));
      invariant {:id "id474"} $w$loop#0
         ==> 
        _module.Universe.globalInv#canCall($Heap, this)
         ==> _module.Universe.globalInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, this)
             ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
      invariant {:id "id475"} $w$loop#0
         ==> 
        _module.Universe.globalInv#canCall($Heap, this)
         ==> _module.Universe.globalInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, this)
             ==> _module.Universe.globalBaseInv($Heap, this)
               || (forall o#20: ref :: 
                { _module.Object.triggerAxioms($Heap, o#20) } 
                  { _module.Object.baseFieldsInv($Heap, o#20) } 
                  { _module.Object.universe(o#20) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#20)) } 
                $Is(o#20, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#20))
                   ==> _module.Object.universe(o#20) == this
                     && o#20 != this
                     && _module.Object.baseFieldsInv($Heap, o#20)
                     && _module.Object.triggerAxioms($Heap, o#20)));
      invariant {:id "id476"} $w$loop#0
         ==> 
        _module.Universe.globalInv#canCall($Heap, this)
         ==> _module.Universe.globalInv($Heap, this)
           || (forall o#21: ref :: 
            { _module.Object.inv($Heap, o#21) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#21))
               ==> _module.Object.inv($Heap, o#21));
      free invariant {:id "id477"} $w$loop#0
         ==> _module.Universe.globalInv#canCall($Heap, this)
           && 
          _module.Universe.globalInv($Heap, this)
           && 
          _module.Universe.globalBaseInv($Heap, this)
           && (forall o#21: ref :: 
            { _module.Object.inv($Heap, o#21) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#21))
               ==> _module.Object.inv($Heap, o#21));
      invariant {:id "id478"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#27: Box :: 
              $IsBox($y#27, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#27)
                 && $Unbox($y#27): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#28: Box :: 
                $IsBox($y#28, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#28)
                   && $Unbox($y#28): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
                 ==> _module.Universe.globalBaseInv(old($Heap), this) || Lit(true)));
      invariant {:id "id479"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#27: Box :: 
              $IsBox($y#27, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#27)
                 && $Unbox($y#27): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#28: Box :: 
                $IsBox($y#28, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#28)
                   && $Unbox($y#28): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
                 ==> _module.Universe.globalBaseInv(old($Heap), this)
                   || (forall o#22: ref :: 
                    { _module.Object.triggerAxioms(old($Heap), o#22) } 
                      { _module.Object.baseFieldsInv(old($Heap), o#22) } 
                      { _module.Object.universe(o#22) } 
                      { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#22)) } 
                    $Is(o#22, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#22))
                       ==> _module.Object.universe(o#22) == this
                         && o#22 != this
                         && _module.Object.baseFieldsInv(old($Heap), o#22)
                         && _module.Object.triggerAxioms(old($Heap), o#22))));
      invariant {:id "id480"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#27: Box :: 
              $IsBox($y#27, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#27)
                 && $Unbox($y#27): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#28: Box :: 
                $IsBox($y#28, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#28)
                   && $Unbox($y#28): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
               || (_module.Universe.globalBaseInv#canCall($Heap, this)
                 ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true)));
      invariant {:id "id481"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#27: Box :: 
              $IsBox($y#27, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#27)
                 && $Unbox($y#27): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#28: Box :: 
                $IsBox($y#28, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#28)
                   && $Unbox($y#28): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
               || (_module.Universe.globalBaseInv#canCall($Heap, this)
                 ==> _module.Universe.globalBaseInv($Heap, this)
                   || (forall o#23: ref :: 
                    { _module.Object.triggerAxioms($Heap, o#23) } 
                      { _module.Object.baseFieldsInv($Heap, o#23) } 
                      { _module.Object.universe(o#23) } 
                      { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#23)) } 
                    $Is(o#23, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#23))
                       ==> _module.Object.universe(o#23) == this
                         && o#23 != this
                         && _module.Object.baseFieldsInv($Heap, o#23)
                         && _module.Object.triggerAxioms($Heap, o#23))));
      invariant {:id "id482"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#27: Box :: 
              $IsBox($y#27, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#27)
                 && $Unbox($y#27): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#28: Box :: 
                $IsBox($y#28, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#28)
                   && $Unbox($y#28): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
               || Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
                $Unbox(read($Heap, this, _module.Universe.content)): Set));
      invariant {:id "id483"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#27: Box :: 
              $IsBox($y#27, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#27)
                 && $Unbox($y#27): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#28: Box :: 
                $IsBox($y#28, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#28)
                   && $Unbox($y#28): ref != preempting#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
               || (forall o#24: ref :: 
                { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#24)) } 
                  { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#24)) } 
                $Is(o#24, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#24))
                     && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#24))
                   ==> !$IsAllocBox($Box(o#24), Tclass._module.Object(), old($Heap))));
      invariant {:id "id484"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#27: Box :: 
              $IsBox($y#27, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#27)
                 && $Unbox($y#27): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#28: Box :: 
                $IsBox($y#28, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#28)
                   && $Unbox($y#28): ref != preempting#0)))
           || (forall o#25: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#25) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#25)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#25)) } 
            $Is(o#25, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#25))
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#25))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#25 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#25));
      invariant {:id "id485"} $w$loop#0
         ==> 
        _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
          $Heap, 
          this, 
          Set#FromBoogieMap((lambda $y#27: Box :: 
              $IsBox($y#27, Tclass._module.Thread())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#27)
                 && $Unbox($y#27): ref != preempting#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#28: Box :: 
                $IsBox($y#28, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#28)
                   && $Unbox($y#28): ref != preempting#0)))
           || (forall o#26: ref :: 
            { $Unbox(read($Heap, o#26, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#26, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#26, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#26)) } 
            $Is(o#26, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#26))
                 && $Is($Unbox(read(old($Heap), o#26, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#FromBoogieMap((lambda $y#29: Box :: 
                      $IsBox($y#29, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#29)
                         && $Unbox($y#29): ref != preempting#0)), 
                  read(old($Heap), o#26, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#26, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#26, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#26, _module.OwnedObject.nonvolatileVersion)): int);
      free invariant {:id "id486"} $w$loop#0
         ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#27: Box :: 
                $IsBox($y#27, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#27)
                   && $Unbox($y#27): ref != preempting#0)))
           && 
          _module.Universe.legalTransitionsSequence(old($Heap), 
            $Heap, 
            this, 
            Set#FromBoogieMap((lambda $y#28: Box :: 
                $IsBox($y#28, Tclass._module.Thread())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#28)
                   && $Unbox($y#28): ref != preempting#0)))
           && 
          _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           && (forall o#25: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#25) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#25)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#25)) } 
            $Is(o#25, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#25))
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#25))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#25 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#25))
           && (forall o#26: ref :: 
            { $Unbox(read($Heap, o#26, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#26, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#26, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#26)) } 
            $Is(o#26, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#26))
                 && $Is($Unbox(read(old($Heap), o#26, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#FromBoogieMap((lambda $y#30: Box :: 
                      $IsBox($y#30, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#30)
                         && $Unbox($y#30): ref != preempting#0)), 
                  read(old($Heap), o#26, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#26, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#26, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#26, _module.OwnedObject.nonvolatileVersion)): int);
      invariant {:id "id487"} $w$loop#0
         ==> 
        _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, this)
           || (forall o#27: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#27) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#27)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#27)) } 
            $Is(o#27, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#27))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#27))
                 && _module.Object.sequenceInv2(old($Heap), $Heap, o#27));
      free invariant {:id "id488"} $w$loop#0
         ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)
           && 
          _module.Universe.globalSequenceInv2(old($Heap), $Heap, this)
           && (forall o#27: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#27) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#27)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#27)) } 
            $Is(o#27, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#27))
               ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#27))
                 && _module.Object.sequenceInv2(old($Heap), $Heap, o#27));
      free invariant (forall $o: ref :: 
        { $Heap[$o] } 
        $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
           ==> $Heap[$o] == $PreLoopHeap$loop#0[$o]
             || 
            $o == this
             || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null && $Unbox(read($PreLoopHeap$loop#0, $o, alloc)): bool
           ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f)
             || $_ModifiesFrame[$o, $f]);
      free invariant steps#0 - 0 <= $decr_init$loop#00;
    {
        if (!$w$loop#0)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            assume _module.Universe.globalInv#canCall($Heap, this);
            if (_module.Universe.globalInv($Heap, this))
            {
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
                // Begin Comprehension WF check
                havoc t#2;
                if ($Is(t#2, Tclass._module.Thread())
                   && $IsAlloc(t#2, Tclass._module.Thread(), $Heap))
                {
                    assert {:id "id469"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                    if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#2)))
                    {
                    }

                    if (Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(t#2))
                       && t#2 != preempting#0)
                    {
                    }
                }

                // End Comprehension WF check
                ##running#1 := Set#FromBoogieMap((lambda $y#18: Box :: 
                    $IsBox($y#18, Tclass._module.Thread())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#18)
                       && $Unbox($y#18): ref != preempting#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##running#1, TSet(Tclass._module.Thread()), $Heap);
                assert {:id "id470"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                assert {:id "id471"} $IsAlloc(Set#FromBoogieMap((lambda $y#19: Box :: 
                      $IsBox($y#19, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#19)
                         && $Unbox($y#19): ref != preempting#0)), 
                  TSet(Tclass._module.Thread()), 
                  old($Heap));
                assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                  $Heap, 
                  this, 
                  Set#FromBoogieMap((lambda $y#20: Box :: 
                      $IsBox($y#20, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#20)
                         && $Unbox($y#20): ref != preempting#0)));
            }

            if (_module.Universe.globalInv($Heap, this)
               && _module.Universe.legalTransitionsSequence(old($Heap), 
                $Heap, 
                this, 
                Set#FromBoogieMap((lambda $y#21: Box :: 
                    $IsBox($y#21, Tclass._module.Thread())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#21)
                       && $Unbox($y#21): ref != preempting#0))))
            {
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
                assert {:id "id472"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
            }

            assume _module.Universe.globalInv#canCall($Heap, this)
               && (_module.Universe.globalInv($Heap, this)
                 ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                    $Heap, 
                    this, 
                    Set#FromBoogieMap((lambda $y#22: Box :: 
                        $IsBox($y#22, Tclass._module.Thread())
                           && 
                          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#22)
                           && $Unbox($y#22): ref != preempting#0)))
                   && (_module.Universe.legalTransitionsSequence(old($Heap), 
                      $Heap, 
                      this, 
                      Set#FromBoogieMap((lambda $y#23: Box :: 
                          $IsBox($y#23, Tclass._module.Thread())
                             && 
                            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#23)
                             && $Unbox($y#23): ref != preempting#0)))
                     ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)));
            assume {:id "id473"} _module.Universe.globalInv($Heap, this)
               && _module.Universe.legalTransitionsSequence(old($Heap), 
                $Heap, 
                this, 
                Set#FromBoogieMap((lambda $y#24: Box :: 
                    $IsBox($y#24, Tclass._module.Thread())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#24)
                       && $Unbox($y#24): ref != preempting#0)))
               && _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);
            assume true;
            assume false;
        }

        assume true;
        if (0 >= steps#0)
        {
            break;
        }

        $decr$loop#00 := steps#0 - 0;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(125,35)
        assume true;
        // Begin Comprehension WF check
        havoc t#0_0;
        if ($Is(t#0_0, Tclass._module.Thread())
           && $IsAlloc(t#0_0, Tclass._module.Thread(), $Heap))
        {
            if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(t#0_0)))
            {
            }

            if (Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(t#0_0))
               && t#0_0 != preempting#0)
            {
            }
        }

        // End Comprehension WF check
        assume true;
        envThreads#0_0 := Set#FromBoogieMap((lambda $y#0_0: Box :: 
            $IsBox($y#0_0, Tclass._module.Thread())
               && 
              Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $y#0_0)
               && $Unbox($y#0_0): ref != preempting#0));
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(126,7)
        assume true;
        if (Set#Card(envThreads#0_0) > 0)
        {
            push;
            // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(127,35)
            havoc running#0_0_1;
            if ($Is(running#0_0_1, Tclass._module.Thread())
               && $IsAlloc(running#0_0_1, Tclass._module.Thread(), $Heap))
            {
                assume true;
            }

            assert {:id "id490"} ($Is(null, Tclass._module.Thread()) && Set#IsMember(envThreads#0_0, $Box(null)))
               || (exists $as#running0_0_0#0_0_0: ref :: 
                $Is($as#running0_0_0#0_0_0, Tclass._module.Thread())
                   && Set#IsMember(envThreads#0_0, $Box($as#running0_0_0#0_0_0)));
            defass#running#0_0_0 := true;
            havoc running#0_0_0;
            assume {:id "id491"} Set#IsMember(envThreads#0_0, $Box(running#0_0_0));
            $Heap_at_0_0_0 := $Heap;
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(129,9)
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            assert {:id "id492"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
            assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
            assert {:id "id493"} {:subsumption 0} _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)
               ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, this)
                 || (forall o#0_0_0: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#0_0_0) } 
                    { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0_0_0)) } 
                    { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0_0)) } 
                  $Is(o#0_0_0, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#0_0_0))
                     ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0_0_0))
                       && _module.Object.sequenceInv2(old($Heap), $Heap, o#0_0_0));
            assume {:id "id494"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);

          after_0_0_0:
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(130,14)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            assert {:id "id495"} (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == this
                     || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
                 ==> $_ModifiesFrame[$o, $f]);
            call {:id "id496"} Call$$_module.Universe.Havoc(this);
            // TrCallStmt: After ProcessCallStmt
            // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(131,9)
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            assert {:id "id497"} defass#running#0_0_0;
            ##running#0_0_0 := running#0_0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0_0_0, Tclass._module.Thread(), $Heap);
            assert {:id "id498"} $IsAlloc(this, Tclass._module.Universe(), $Heap_at_0_0_0);
            assert {:id "id499"} $IsAlloc(running#0_0_0, Tclass._module.Thread(), $Heap_at_0_0_0);
            assume _module.Universe.legalTransition#canCall($Heap_at_0_0_0, $Heap, this, running#0_0_0);
            assume _module.Universe.legalTransition#canCall($Heap_at_0_0_0, $Heap, this, running#0_0_0);
            assume {:id "id500"} _module.Universe.legalTransition($Heap_at_0_0_0, $Heap, this, running#0_0_0);
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(132,26)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            assert {:id "id501"} defass#running#0_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            running##0_0_0 := running#0_0_0;
            assert {:id "id502"} $IsAlloc(this, Tclass._module.Universe(), $Heap_at_0_0_0);
            assert {:id "id503"} $IsAlloc(running#0_0_0, Tclass._module.Thread(), $Heap_at_0_0_0);
            call {:id "id504"} Call$$_module.Universe.lci($Heap_at_0_0_0, $Heap, this, running##0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(133,9)
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            assert {:id "id505"} $IsAlloc(this, Tclass._module.Universe(), $Heap_at_0_0_0);
            assume _module.Universe.globalSequenceInv2#canCall($Heap_at_0_0_0, $Heap, this);
            assume _module.Universe.globalSequenceInv2#canCall($Heap_at_0_0_0, $Heap, this);
            assert {:id "id506"} {:subsumption 0} _module.Universe.globalSequenceInv2#canCall($Heap_at_0_0_0, $Heap, this)
               ==> _module.Universe.globalSequenceInv2($Heap_at_0_0_0, $Heap, this)
                 || (forall o#0_0_1: ref :: 
                  { _module.Object.sequenceInv2($Heap_at_0_0_0, $Heap, o#0_0_1) } 
                    { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0_0_1)) } 
                    { Set#IsMember($Unbox(read($Heap_at_0_0_0, this, _module.Universe.content)): Set, $Box(o#0_0_1)) } 
                  $Is(o#0_0_1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap_at_0_0_0, this, _module.Universe.content)): Set, $Box(o#0_0_1))
                     ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0_0_1))
                       && _module.Object.sequenceInv2($Heap_at_0_0_0, $Heap, o#0_0_1));
            assume {:id "id507"} _module.Universe.globalSequenceInv2($Heap_at_0_0_0, $Heap, this);
            // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(135,9)
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
            assert {:id "id508"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
            assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
            if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this))
            {
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
                assert {:id "id509"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
                assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
            }

            assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
               && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
                 ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this));
            assume {:id "id510"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
               ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);
            pop;
        }
        else
        {
        }

        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(137,13)
        assume true;
        assume true;
        steps#0 := steps#0 - 1;
        // ----- loop termination check ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(121,5)
        assert {:id "id512"} 0 <= $decr$loop#00 || steps#0 - 0 == $decr$loop#00;
        assert {:id "id513"} steps#0 - 0 < $decr$loop#00;
        assume _module.Universe.globalInv#canCall($Heap, this)
           && (_module.Universe.globalInv($Heap, this)
             ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                this, 
                Set#FromBoogieMap((lambda $y#31: Box :: 
                    $IsBox($y#31, Tclass._module.Thread())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#31)
                       && $Unbox($y#31): ref != preempting#0)))
               && (_module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  this, 
                  Set#FromBoogieMap((lambda $y#32: Box :: 
                      $IsBox($y#32, Tclass._module.Thread())
                         && 
                        Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $y#32)
                         && $Unbox($y#32): ref != preempting#0)))
                 ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)));
    }
}



procedure {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: CheckTransitiveBaseLegalTransitionsSequence, CheckWellFormed$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalBaseInv#canCall($Heap, this);
    assume {:id "id514"} _module.Universe.globalBaseInv($Heap, this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == this
           || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id515"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
    assume {:id "id516"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (call)"} Call$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap));
  // user-defined preconditions
  requires {:id "id517"} _module.Universe.globalBaseInv#canCall($Heap, this)
     ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true);
  requires {:id "id518"} _module.Universe.globalBaseInv#canCall($Heap, this)
     ==> _module.Universe.globalBaseInv($Heap, this)
       || (forall o#0: ref :: 
        { _module.Object.triggerAxioms($Heap, o#0) } 
          { _module.Object.baseFieldsInv($Heap, o#0) } 
          { _module.Object.universe(o#0) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
        $Is(o#0, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
           ==> _module.Object.universe(o#0) == this
             && o#0 != this
             && _module.Object.baseFieldsInv($Heap, o#0)
             && _module.Object.triggerAxioms($Heap, o#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
  free ensures {:id "id519"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
     && 
    _module.Universe.globalBaseInv(old($Heap), this)
     && _module.Universe.globalBaseInv($Heap, this)
     && Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
      $Unbox(read($Heap, this, _module.Universe.content)): Set)
     && (forall o#3: ref :: 
      { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3)) } 
      $Is(o#3, Tclass._module.Object())
           && 
          !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#3))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#3))
         ==> !$IsAllocBox($Box(o#3), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 9 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id520"} _module.Universe.globalBaseInv#canCall($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && 
    true
     && (forall o#4: ref :: 
      { _module.Object.triggerAxioms($Heap, o#4) } 
        { _module.Object.baseFieldsInv($Heap, o#4) } 
        { _module.Object.universe(o#4) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
      $Is(o#4, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#4))
         ==> _module.Object.universe(o#4) == this
           && o#4 != this
           && _module.Object.baseFieldsInv($Heap, o#4)
           && _module.Object.triggerAxioms($Heap, o#4));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
  ensures {:id "id521"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
         ==> _module.Universe.globalBaseInv(old($Heap), this) || Lit(true));
  ensures {:id "id522"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
         ==> _module.Universe.globalBaseInv(old($Heap), this)
           || (forall o#5: ref :: 
            { _module.Object.triggerAxioms(old($Heap), o#5) } 
              { _module.Object.baseFieldsInv(old($Heap), o#5) } 
              { _module.Object.universe(o#5) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
            $Is(o#5, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
               ==> _module.Object.universe(o#5) == this
                 && o#5 != this
                 && _module.Object.baseFieldsInv(old($Heap), o#5)
                 && _module.Object.triggerAxioms(old($Heap), o#5)));
  ensures {:id "id523"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
  ensures {:id "id524"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this)
           || (forall o#6: ref :: 
            { _module.Object.triggerAxioms($Heap, o#6) } 
              { _module.Object.baseFieldsInv($Heap, o#6) } 
              { _module.Object.universe(o#6) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#6)) } 
            $Is(o#6, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#6))
               ==> _module.Object.universe(o#6) == this
                 && o#6 != this
                 && _module.Object.baseFieldsInv($Heap, o#6)
                 && _module.Object.triggerAxioms($Heap, o#6)));
  ensures {:id "id525"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
        $Unbox(read($Heap, this, _module.Universe.content)): Set);
  ensures {:id "id526"} _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
     ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       || (forall o#7: ref :: 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#7)) } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#7)) } 
        $Is(o#7, Tclass._module.Object())
             && 
            !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#7))
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#7))
           ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), old($Heap)));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckTransitiveBaseLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: CheckTransitiveBaseLegalTransitionsSequence, Impl$$_module.Universe.CheckTransitiveBaseLegalTransitionsSequence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(147,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id527"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this
             || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id528"} Call$$_module.Universe.Havoc(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(148,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id529"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this
             || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id530"} Call$$_module.Universe.Havoc(this);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap));
  free requires 14 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: CheckTransitiveLegalTransitionsSequence, CheckWellFormed$$_module.Universe.CheckTransitiveLegalTransitionsSequence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, this);
    assume {:id "id531"} _module.Universe.globalInv($Heap, this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == this
           || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id532"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id533"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id534"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0);
}



procedure {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (call)"} Call$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap));
  // user-defined preconditions
  requires {:id "id535"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true));
  requires {:id "id536"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, this)
         ==> _module.Universe.globalBaseInv($Heap, this)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == this
                 && o#0 != this
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id537"} _module.Universe.globalInv#canCall($Heap, this)
     ==> _module.Universe.globalInv($Heap, this)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
  free ensures {:id "id538"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
     && (forall o#5: ref :: 
      { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5)) } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5)) } 
      $Is(o#5, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#5))
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#5))
         ==> (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == o#5 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           || _module.Object.sequenceInv2(old($Heap), $Heap, o#5))
     && (forall o#6: ref :: 
      { $Unbox(read($Heap, o#6, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#6, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(old($Heap), o#6, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6)) } 
      $Is(o#6, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#6))
           && $Is($Unbox(read(old($Heap), o#6, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(running#0, read(old($Heap), o#6, _module.OwnedObject.owner))
           && $IsAllocBox(read(old($Heap), o#6, _module.OwnedObject.owner), 
            Tclass._module.Object(), 
            old($Heap))
         ==> $Unbox(read(old($Heap), o#6, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, o#6, _module.OwnedObject.nonvolatileVersion)): int);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), $Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 14 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id539"} _module.Universe.globalInv#canCall($Heap, this)
     && 
    _module.Universe.globalInv($Heap, this)
     && 
    _module.Universe.globalBaseInv($Heap, this)
     && (forall o#8: ref :: 
      { _module.Object.inv($Heap, o#8) } 
        { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#8))
         ==> _module.Object.inv($Heap, o#8));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
  ensures {:id "id540"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
             ==> _module.Universe.globalBaseInv(old($Heap), this) || Lit(true)));
  ensures {:id "id541"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), this)
             ==> _module.Universe.globalBaseInv(old($Heap), this)
               || (forall o#9: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#9) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#9) } 
                  { _module.Object.universe(o#9) } 
                  { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9)) } 
                $Is(o#9, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#9))
                   ==> _module.Object.universe(o#9) == this
                     && o#9 != this
                     && _module.Object.baseFieldsInv(old($Heap), o#9)
                     && _module.Object.triggerAxioms(old($Heap), o#9))));
  ensures {:id "id542"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, this)
             ==> _module.Universe.globalBaseInv($Heap, this) || Lit(true)));
  ensures {:id "id543"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, this)
             ==> _module.Universe.globalBaseInv($Heap, this)
               || (forall o#10: ref :: 
                { _module.Object.triggerAxioms($Heap, o#10) } 
                  { _module.Object.baseFieldsInv($Heap, o#10) } 
                  { _module.Object.universe(o#10) } 
                  { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#10)) } 
                $Is(o#10, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#10))
                   ==> _module.Object.universe(o#10) == this
                     && o#10 != this
                     && _module.Object.baseFieldsInv($Heap, o#10)
                     && _module.Object.triggerAxioms($Heap, o#10))));
  ensures {:id "id544"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || Set#Subset($Unbox(read(old($Heap), this, _module.Universe.content)): Set, 
            $Unbox(read($Heap, this, _module.Universe.content)): Set));
  ensures {:id "id545"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
           || (forall o#11: ref :: 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#11)) } 
              { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#11)) } 
            $Is(o#11, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#11))
                 && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#11))
               ==> !$IsAllocBox($Box(o#11), Tclass._module.Object(), old($Heap))));
  ensures {:id "id546"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (forall o#12: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#12) } 
          { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#12)) } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#12)) } 
        $Is(o#12, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#12))
             && Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#12))
           ==> (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#12 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.sequenceInv2(old($Heap), $Heap, o#12));
  ensures {:id "id547"} _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0)
       || (forall o#13: ref :: 
        { $Unbox(read($Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#13, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(old($Heap), o#13, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#13)) } 
        $Is(o#13, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#13))
             && $Is($Unbox(read(old($Heap), o#13, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(running#0, read(old($Heap), o#13, _module.OwnedObject.owner))
             && $IsAllocBox(read(old($Heap), o#13, _module.OwnedObject.owner), 
              Tclass._module.Object(), 
              old($Heap))
           ==> $Unbox(read(old($Heap), o#13, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == this
         || Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckTransitiveLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckTransitiveLegalTransitionsSequence(this: ref, running#0: Set) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#1: Set;
  var running##0: Set;
  var $Heap_at_0: Heap;
  var ##running#2: Set;
  var running##1: Set;

    // AddMethodImpl: CheckTransitiveLegalTransitionsSequence, Impl$$_module.Universe.CheckTransitiveLegalTransitionsSequence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this
           || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(157,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id548"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this
             || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id549"} Call$$_module.Universe.Havoc(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(158,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#1 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#1, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id550"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id551"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id552"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(159,16)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id553"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id554"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    call {:id "id555"} Call$$_module.Universe.sequenceLci(old($Heap), $Heap, this, running##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(160,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id556"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
    assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
    assert {:id "id557"} {:subsumption 0} _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, this)
         || (forall o#14: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#14) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#14)) } 
            { Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#14)) } 
          $Is(o#14, Tclass._module.Object())
               && Set#IsMember($Unbox(read(old($Heap), this, _module.Universe.content)): Set, $Box(o#14))
             ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#14))
               && _module.Object.sequenceInv2(old($Heap), $Heap, o#14));
    assume {:id "id558"} _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);
    $Heap_at_0 := $Heap;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(162,10)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id559"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this
             || Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id560"} Call$$_module.Universe.Havoc(this);
    // TrCallStmt: After ProcessCallStmt

  after_0:
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(163,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#2 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#2, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id561"} $IsAlloc(this, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id562"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap_at_0);
    assume _module.Universe.legalTransitionsSequence#canCall($Heap_at_0, $Heap, this, running#0);
    assume _module.Universe.legalTransitionsSequence#canCall($Heap_at_0, $Heap, this, running#0);
    assume {:id "id563"} _module.Universe.legalTransitionsSequence($Heap_at_0, $Heap, this, running#0);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(164,20)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##1 := running#0;
    assert {:id "id564"} $IsAlloc(this, Tclass._module.Universe(), $Heap_at_0);
    assert {:id "id565"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), $Heap_at_0);
    call {:id "id566"} Call$$_module.Universe.sequenceLci($Heap_at_0, $Heap, this, running##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(165,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id567"} $IsAlloc(this, Tclass._module.Universe(), $Heap_at_0);
    assume _module.Universe.globalSequenceInv2#canCall($Heap_at_0, $Heap, this);
    assume _module.Universe.globalSequenceInv2#canCall($Heap_at_0, $Heap, this);
    assert {:id "id568"} {:subsumption 0} _module.Universe.globalSequenceInv2#canCall($Heap_at_0, $Heap, this)
       ==> _module.Universe.globalSequenceInv2($Heap_at_0, $Heap, this)
         || (forall o#15: ref :: 
          { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#15) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#15)) } 
            { Set#IsMember($Unbox(read($Heap_at_0, this, _module.Universe.content)): Set, $Box(o#15)) } 
          $Is(o#15, Tclass._module.Object())
               && Set#IsMember($Unbox(read($Heap_at_0, this, _module.Universe.content)): Set, $Box(o#15))
             ==> Set#IsMember($Unbox(read($Heap, this, _module.Universe.content)): Set, $Box(o#15))
               && _module.Object.sequenceInv2($Heap_at_0, $Heap, o#15));
    assume {:id "id569"} _module.Universe.globalSequenceInv2($Heap_at_0, $Heap, this);
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(167,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    assert {:id "id570"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this);
    if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this))
    {
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
        assert {:id "id571"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
        assume _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this);
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, this)
       && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
         ==> _module.Universe.globalSequenceInv2#canCall(old($Heap), $Heap, this));
    assume {:id "id572"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, this)
       ==> _module.Universe.globalSequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap), 
    moreRunning#0: Set
       where $Is(moreRunning#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 9 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  requires $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (well-formedness)"} CheckWellFormed$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref, 
    running#0: Set, 
    moreRunning#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;
  var ##running#1: Set;


    // AddMethodImpl: CheckMonotonicLegalTransitionsSequence, CheckWellFormed$$_module.Universe.CheckMonotonicLegalTransitionsSequence
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id573"} Set#Subset(running#0, moreRunning#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id574"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id575"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id576"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Universe?(), $Heap);
    ##running#1 := moreRunning#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#1, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id577"} $IsAlloc(this, Tclass._module.Universe(), old($Heap));
    assert {:id "id578"} $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, this, moreRunning#0);
    assume {:id "id579"} _module.Universe.legalTransitionsSequence(old($Heap), $Heap, this, moreRunning#0);
}



procedure {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (call)"} Call$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap), 
    moreRunning#0: Set
       where $Is(moreRunning#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  requires $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id580"} Set#Subset(running#0, moreRunning#0);
  requires {:id "id581"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true)));
  requires {:id "id582"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this)
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                  { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#0))
                   ==> _module.Object.universe(o#0) == this
                     && o#0 != this
                     && _module.Object.baseFieldsInv(previous$Heap, o#0)
                     && _module.Object.triggerAxioms(previous$Heap, o#0))));
  requires {:id "id583"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true)));
  requires {:id "id584"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this)
               || (forall o#1: ref :: 
                { _module.Object.triggerAxioms(current$Heap, o#1) } 
                  { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                  { _module.Object.universe(o#1) } 
                  { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1)) } 
                $Is(o#1, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#1))
                   ==> _module.Object.universe(o#1) == this
                     && o#1 != this
                     && _module.Object.baseFieldsInv(current$Heap, o#1)
                     && _module.Object.triggerAxioms(current$Heap, o#1))));
  requires {:id "id585"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, this, _module.Universe.content)): Set));
  requires {:id "id586"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (forall o#2: ref :: 
            { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2)) } 
            $Is(o#2, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#2))
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#2))
               ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap)));
  requires {:id "id587"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall o#3: ref :: 
        { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3)) } 
        $Is(o#3, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#3))
             && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#3))
           ==> (forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#3
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3));
  requires {:id "id588"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
       || (forall o#4: ref :: 
        { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4)) } 
        $Is(o#4, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#4))
             && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(running#0, read(previous$Heap, o#4, _module.OwnedObject.owner))
             && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
              Tclass._module.Object(), 
              previous$Heap)
           ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0);
  free ensures {:id "id589"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     && 
    _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
     && (forall o#8: ref :: 
      { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#8)) } 
      $Is(o#8, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#8))
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#8))
         ==> (forall $o: ref, $f: Field :: 
            { read(current$Heap, $o, $f) } 
            $o != null
               ==> 
              $o == o#8
               ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
           || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8))
     && (forall o#9: ref :: 
      { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9)) } 
      $Is(o#9, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#9))
           && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(moreRunning#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
           && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
            Tclass._module.Object(), 
            previous$Heap)
         ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Universe())
         && $IsAlloc(this, Tclass._module.Universe(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap), 
    moreRunning#0: Set
       where $Is(moreRunning#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 9 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  requires $IsAlloc(moreRunning#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id590"} Set#Subset(running#0, moreRunning#0);
  free requires {:id "id591"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
     && (forall o#13: ref :: 
      { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#13) } 
        { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#13)) } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#13)) } 
      $Is(o#13, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#13))
           && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#13))
         ==> (forall $o: ref, $f: Field :: 
            { read(current$Heap, $o, $f) } 
            $o != null
               ==> 
              $o == o#13
               ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
           || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#13))
     && (forall o#14: ref :: 
      { $Unbox(read(current$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int } 
        { $Unbox(read(previous$Heap, o#14, _module.OwnedObject.owner)): ref } 
        { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#14)) } 
      $Is(o#14, Tclass._module.OwnedObject())
           && 
          Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#14))
           && $Is($Unbox(read(previous$Heap, o#14, _module.OwnedObject.owner)): ref, 
            Tclass._module.Thread())
         ==> 
        !Set#IsMember(running#0, read(previous$Heap, o#14, _module.OwnedObject.owner))
           && $IsAllocBox(read(previous$Heap, o#14, _module.OwnedObject.owner), 
            Tclass._module.Object(), 
            previous$Heap)
         ==> $Unbox(read(previous$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0);
  ensures {:id "id592"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this) || Lit(true)));
  ensures {:id "id593"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(previous$Heap, this)
             ==> _module.Universe.globalBaseInv(previous$Heap, this)
               || (forall o#15: ref :: 
                { _module.Object.triggerAxioms(previous$Heap, o#15) } 
                  { _module.Object.baseFieldsInv(previous$Heap, o#15) } 
                  { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#15))
                   ==> _module.Object.universe(o#15) == this
                     && o#15 != this
                     && _module.Object.baseFieldsInv(previous$Heap, o#15)
                     && _module.Object.triggerAxioms(previous$Heap, o#15))));
  ensures {:id "id594"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this) || Lit(true)));
  ensures {:id "id595"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (_module.Universe.globalBaseInv#canCall(current$Heap, this)
             ==> _module.Universe.globalBaseInv(current$Heap, this)
               || (forall o#16: ref :: 
                { _module.Object.triggerAxioms(current$Heap, o#16) } 
                  { _module.Object.baseFieldsInv(current$Heap, o#16) } 
                  { _module.Object.universe(o#16) } 
                  { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#16)) } 
                $Is(o#16, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#16))
                   ==> _module.Object.universe(o#16) == this
                     && o#16 != this
                     && _module.Object.baseFieldsInv(current$Heap, o#16)
                     && _module.Object.triggerAxioms(current$Heap, o#16))));
  ensures {:id "id596"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || Set#Subset($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, 
            $Unbox(read(current$Heap, this, _module.Universe.content)): Set));
  ensures {:id "id597"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, this)
         ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, this)
           || (forall o#17: ref :: 
            { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#17)) } 
              { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && 
                !Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#17))
                 && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#17))
               ==> !$IsAllocBox($Box(o#17), Tclass._module.Object(), previous$Heap)));
  ensures {:id "id598"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (forall o#18: ref :: 
        { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#18) } 
          { Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#18)) } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#18)) } 
        $Is(o#18, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#18))
             && Set#IsMember($Unbox(read(current$Heap, this, _module.Universe.content)): Set, $Box(o#18))
           ==> (forall $o: ref, $f: Field :: 
              { read(current$Heap, $o, $f) } 
              $o != null
                 ==> 
                $o == o#18
                 ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
             || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#18));
  ensures {:id "id599"} _module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, this, moreRunning#0)
     ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, this, moreRunning#0)
       || (forall o#19: ref :: 
        { $Unbox(read(current$Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int } 
          { $Unbox(read(previous$Heap, o#19, _module.OwnedObject.owner)): ref } 
          { Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19)) } 
        $Is(o#19, Tclass._module.OwnedObject())
             && 
            Set#IsMember($Unbox(read(previous$Heap, this, _module.Universe.content)): Set, $Box(o#19))
             && $Is($Unbox(read(previous$Heap, o#19, _module.OwnedObject.owner)): ref, 
              Tclass._module.Thread())
           ==> 
          !Set#IsMember(moreRunning#0, read(previous$Heap, o#19, _module.OwnedObject.owner))
             && $IsAllocBox(read(previous$Heap, o#19, _module.OwnedObject.owner), 
              Tclass._module.Object(), 
              previous$Heap)
           ==> $Unbox(read(previous$Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, o#19, _module.OwnedObject.nonvolatileVersion)): int);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Universe.CheckMonotonicLegalTransitionsSequence (correctness)"} Impl$$_module.Universe.CheckMonotonicLegalTransitionsSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref, 
    running#0: Set, 
    moreRunning#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: CheckMonotonicLegalTransitionsSequence, Impl$$_module.Universe.CheckMonotonicLegalTransitionsSequence
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// $Is axiom for non-null type _module.Universe
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Universe()) } 
    { $Is(c#0, Tclass._module.Universe?()) } 
  $Is(c#0, Tclass._module.Universe())
     <==> $Is(c#0, Tclass._module.Universe?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Universe
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Universe(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Universe?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Universe(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Universe?(), $h));

const unique class._module.Object?: ClassName;

// $Is axiom for trait Object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Object?()) } 
  $Is($o, Tclass._module.Object?())
     <==> $o == null || implements$_module.Object(dtype($o)));

// $IsAlloc axiom for trait Object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Object?(), $h) } 
  $IsAlloc($o, Tclass._module.Object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.Object(ty: Ty) : bool;

// function declaration for _module.Object.objectGlobalBaseInv
function _module.Object.objectGlobalBaseInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.objectGlobalBaseInv (revealed)
axiom {:id "id600"} 7 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.objectGlobalBaseInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
         || (7 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Object.baseFieldsInv#canCall($Heap, this)
             && (_module.Object.baseFieldsInv($Heap, this)
               ==> _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))))
         && _module.Object.objectGlobalBaseInv($Heap, this)
           == (
            Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Object.baseFieldsInv($Heap, this)
             && _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))));
}

function _module.Object.objectGlobalBaseInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.objectGlobalBaseInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.objectGlobalBaseInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.objectGlobalBaseInv($h0, this)
       == _module.Object.objectGlobalBaseInv($h1, this));

function _module.Object.objectGlobalBaseInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.objectGlobalBaseInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.objectGlobalBaseInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.objectGlobalBaseInv#requires($Heap, this) == true);

procedure {:verboseName "Object.objectGlobalBaseInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalBaseInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.objectGlobalBaseInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalBaseInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id601"} _module.Object.universe(this) != null;
        b$reqreads#0 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this)))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == this || $o == _module.Object.universe(this))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Object.baseFieldsInv#canCall($Heap, this);
        }

        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           && _module.Object.baseFieldsInv($Heap, this))
        {
            assert {:id "id602"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == _module.Object.universe(this)
                     || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box($o)))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this));
        }

        assume {:id "id603"} _module.Object.objectGlobalBaseInv($Heap, this)
           == (
            Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Object.baseFieldsInv($Heap, this)
             && _module.Universe.globalBaseInv($Heap, _module.Object.universe(this)));
        assume Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Object.baseFieldsInv#canCall($Heap, this)
             && (_module.Object.baseFieldsInv($Heap, this)
               ==> _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.objectGlobalBaseInv($Heap, this), TBool);
        assert {:id "id604"} b$reqreads#0;
        assert {:id "id605"} b$reqreads#1;
        assert {:id "id606"} b$reqreads#2;
        return;

        assume false;
    }
}



// function declaration for _module.Object.objectGlobalInv
function _module.Object.objectGlobalInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.objectGlobalInv (revealed)
axiom {:id "id607"} 14 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.objectGlobalInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.objectGlobalInv#canCall($Heap, this)
         || (14 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Universe.globalInv#canCall($Heap, _module.Object.universe(this)))
         && _module.Object.objectGlobalInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Universe.globalInv($Heap, _module.Object.universe(this))));
}

function _module.Object.objectGlobalInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.objectGlobalInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.objectGlobalInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.objectGlobalInv($h0, this)
       == _module.Object.objectGlobalInv($h1, this));

function _module.Object.objectGlobalInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.objectGlobalInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.objectGlobalInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.objectGlobalInv#requires($Heap, this) == true);

procedure {:verboseName "Object.objectGlobalInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 14 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.objectGlobalInv (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id608"} _module.Object.universe(this) != null;
        b$reqreads#0 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this)))
        {
            assert {:id "id609"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalInv#canCall($Heap, _module.Object.universe(this));
        }

        assume {:id "id610"} _module.Object.objectGlobalInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && _module.Universe.globalInv($Heap, _module.Object.universe(this)));
        assume Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> _module.Universe.globalInv#canCall($Heap, _module.Object.universe(this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.objectGlobalInv($Heap, this), TBool);
        assert {:id "id611"} b$reqreads#0;
        assert {:id "id612"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.objectGlobalInv2
function _module.Object.objectGlobalInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Object.objectGlobalInv2 (revealed)
axiom {:id "id613"} 15 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.objectGlobalInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.objectGlobalInv2#canCall($prevHeap, $Heap, this)
         || (15 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
           && _module.Object.objectGlobalInv($prevHeap, this))
       ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this)
         && (_module.Object.objectGlobalBaseInv($Heap, this)
           ==> _module.Universe.globalInv2#canCall($prevHeap, $Heap, _module.Object.universe(this)))
         && _module.Object.objectGlobalInv2($prevHeap, $Heap, this)
           == (_module.Object.objectGlobalBaseInv($Heap, this)
             && _module.Universe.globalInv2($prevHeap, $Heap, _module.Object.universe(this))));
}

function _module.Object.objectGlobalInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.objectGlobalInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.objectGlobalInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.objectGlobalInv2($prevHeap, $h0, this)
       == _module.Object.objectGlobalInv2($prevHeap, $h1, this));

function _module.Object.objectGlobalInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.objectGlobalInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.objectGlobalInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.objectGlobalInv2#requires($prevHeap, $Heap, this)
       == _module.Object.objectGlobalInv($prevHeap, this));

procedure {:verboseName "Object.objectGlobalInv2 (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 15 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.objectGlobalInv2 (well-formedness)"} CheckWellformed$$_module.Object.objectGlobalInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    assert {:id "id614"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.objectGlobalInv#canCall(old($Heap), this);
    assume {:id "id615"} _module.Object.objectGlobalInv(old($Heap), this);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        if (_module.Object.objectGlobalBaseInv($Heap, this))
        {
            assert {:id "id616"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            assert {:id "id617"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this));
        }

        assume {:id "id618"} _module.Object.objectGlobalInv2(old($Heap), $Heap, this)
           == (_module.Object.objectGlobalBaseInv($Heap, this)
             && _module.Universe.globalInv2(old($Heap), $Heap, _module.Object.universe(this)));
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this)
           && (_module.Object.objectGlobalBaseInv($Heap, this)
             ==> _module.Universe.globalInv2#canCall(old($Heap), $Heap, _module.Object.universe(this)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.objectGlobalInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id619"} b$reqreads#0;
        assert {:id "id620"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.triggerAxioms
function _module.Object.triggerAxioms($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.triggerAxioms
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.triggerAxioms($Heap, this) } 
    _module.Object.triggerAxioms#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> _module.Object.triggerAxioms($Heap, this));
// definition axiom for _module.Object.triggerAxioms (revealed)
axiom {:id "id621"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.triggerAxioms($Heap, this), $IsGoodHeap($Heap) } 
    _module.Object.triggerAxioms#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> _module.Object.triggerAxioms($Heap, this)
         == (($Is(this, Tclass._module.OwnedObject()) || $Is(this, Tclass._module.Thread()))
           && !
          ($Is(this, Tclass._module.OwnedObject())
           && $Is(this, Tclass._module.Thread()))));
}

function _module.Object.triggerAxioms#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.triggerAxioms
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.triggerAxioms($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Object())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.triggerAxioms($h0, this)
       == _module.Object.triggerAxioms($h1, this));

function _module.Object.triggerAxioms#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.triggerAxioms
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.triggerAxioms#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.triggerAxioms#requires($Heap, this) == true);

procedure {:verboseName "Object.triggerAxioms (well-formedness)"} CheckWellformed$$_module.Object.triggerAxioms(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id622"} _module.Object.triggerAxioms($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.triggerAxioms (well-formedness)"} CheckWellformed$$_module.Object.triggerAxioms(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        assert {:id "id623"} this == this
           || (Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
              Set#UnionOne(Set#Empty(): Set, $Box(this)))
             && !Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
              Set#UnionOne(Set#Empty(): Set, $Box(this))));
        assume this == this || _module.Object.triggerAxioms#canCall($Heap, this);
        assume {:id "id624"} _module.Object.triggerAxioms($Heap, this);
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(211,5)
        if (!$Is(this, Tclass._module.OwnedObject()))
        {
        }

        if ($Is(this, Tclass._module.OwnedObject()) || $Is(this, Tclass._module.Thread()))
        {
            if ($Is(this, Tclass._module.OwnedObject()))
            {
            }
        }

        assume true;
        assume {:id "id625"} ($Is(this, Tclass._module.OwnedObject()) || $Is(this, Tclass._module.Thread()))
           && !
          ($Is(this, Tclass._module.OwnedObject())
           && $Is(this, Tclass._module.Thread()));
        if (!$Is(this, Tclass._module.OwnedObject()))
        {
        }

        if ($Is(this, Tclass._module.OwnedObject()) || $Is(this, Tclass._module.Thread()))
        {
            if ($Is(this, Tclass._module.OwnedObject()))
            {
            }
        }

        assume {:id "id626"} _module.Object.triggerAxioms($Heap, this)
           == (($Is(this, Tclass._module.OwnedObject()) || $Is(this, Tclass._module.Thread()))
             && !
            ($Is(this, Tclass._module.OwnedObject())
             && $Is(this, Tclass._module.Thread())));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.triggerAxioms($Heap, this), TBool);
        return;

        assume false;
    }
}



procedure {:verboseName "Object.join (well-formedness)"} CheckWellFormed$$_module.Object.join(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.join (well-formedness)"} CheckWellFormed$$_module.Object.join(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var newtype$check#1: ref;


    // AddMethodImpl: join, CheckWellFormed$$_module.Object.join
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this));
    assert {:id "id627"} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this));
    assume {:id "id628"} _module.Universe.globalBaseInv($Heap, _module.Object.universe(this));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.baseFieldsInv#canCall($Heap, this);
    assume {:id "id629"} _module.Object.baseFieldsInv($Heap, this);
    newtype$check#0 := this;
    newtype$check#1 := this;
    assume {:id "id630"} this != _module.Object.universe(this);
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == _module.Object.universe(this));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
    assume {:id "id631"} _module.Object.objectGlobalBaseInv($Heap, this);
    assert {:id "id632"} _module.Object.universe(this) != null;
    assert {:id "id633"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id634"} _module.Object.universe(this) != null;
    assert {:id "id635"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume {:id "id636"} Set#Equal($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "Object.join (call)"} Call$$_module.Object.join(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  // user-defined preconditions
  requires {:id "id637"} _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
     ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
       || Lit(true);
  requires {:id "id638"} _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
     ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
       || (forall o#0: ref :: 
        { _module.Object.triggerAxioms($Heap, o#0) } 
          { _module.Object.baseFieldsInv($Heap, o#0) } 
          { _module.Object.universe(o#0) } 
          { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#0)) } 
        $Is(o#0, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#0))
           ==> _module.Object.universe(o#0) == _module.Object.universe(this)
             && o#0 != _module.Object.universe(this)
             && _module.Object.baseFieldsInv($Heap, o#0)
             && _module.Object.triggerAxioms($Heap, o#0));
  requires {:id "id639"} _module.Object.baseFieldsInv($Heap, this);
  requires {:id "id640"} this != _module.Object.universe(this);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalBaseInv#canCall($Heap, this);
  free ensures {:id "id641"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalBaseInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Object.baseFieldsInv($Heap, this)
     && _module.Universe.globalBaseInv($Heap, _module.Object.universe(this));
  ensures {:id "id642"} Set#Equal($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == _module.Object.universe(this));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Object.join (correctness)"} Impl$$_module.Object.join(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id643"} _module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
     && 
    _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
     && 
    true
     && (forall o#2: ref :: 
      { _module.Object.triggerAxioms($Heap, o#2) } 
        { _module.Object.baseFieldsInv($Heap, o#2) } 
        { _module.Object.universe(o#2) } 
        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#2)) } 
      $Is(o#2, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#2))
         ==> _module.Object.universe(o#2) == _module.Object.universe(this)
           && o#2 != _module.Object.universe(this)
           && _module.Object.baseFieldsInv($Heap, o#2)
           && _module.Object.triggerAxioms($Heap, o#2));
  requires {:id "id644"} _module.Object.baseFieldsInv($Heap, this);
  requires {:id "id645"} this != _module.Object.universe(this);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalBaseInv#canCall($Heap, this);
  ensures {:id "id646"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id647"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || _module.Object.baseFieldsInv($Heap, this);
  ensures {:id "id648"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || Lit(true));
  ensures {:id "id649"} _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#3: ref :: 
            { _module.Object.triggerAxioms($Heap, o#3) } 
              { _module.Object.baseFieldsInv($Heap, o#3) } 
              { _module.Object.universe(o#3) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#3)) } 
            $Is(o#3, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3))
               ==> _module.Object.universe(o#3) == _module.Object.universe(this)
                 && o#3 != _module.Object.universe(this)
                 && _module.Object.baseFieldsInv($Heap, o#3)
                 && _module.Object.triggerAxioms($Heap, o#3)));
  ensures {:id "id650"} Set#Equal($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == _module.Object.universe(this));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.join (correctness)"} Impl$$_module.Object.join(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0: Set;
  var o#0_0: ref;

    // AddMethodImpl: join, Impl$$_module.Object.join
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(222,22)
    assert {:id "id651"} _module.Object.universe(this) != null;
    assume true;
    assert {:id "id652"} $_ModifiesFrame[_module.Object.universe(this), _module.Universe.content];
    assert {:id "id653"} _module.Object.universe(this) != null;
    assume true;
    $rhs#0 := Set#Union($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    $Heap := update($Heap, _module.Object.universe(this), _module.Universe.content, $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(223,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc o#0_0;
        assume $Is(o#0_0, Tclass._module.Object());
        assert {:id "id656"} {:subsumption 0} _module.Object.universe(this) != null;
        assume true;
        assume {:id "id657"} Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(o#0_0));
        if (*)
        {
            assert {:id "id658"} {:subsumption 0} o#0_0 != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(o#0_0), Tclass._module.Object?(), $Heap);
            assume _module.Object.baseFieldsInv#canCall($Heap, o#0_0);
            assume _module.Object.baseFieldsInv#canCall($Heap, o#0_0);
            assume {:id "id659"} _module.Object.baseFieldsInv($Heap, o#0_0);
            assume false;
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(224,34)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        assert {:id "id660"} o#0_0 != null;
        assert {:id "id661"} $IsAlloc(o#0_0, Tclass._module.Object(), old($Heap));
        call {:id "id662"} Call$$_module.Object.baseFieldsInvMonotonicity(old($Heap), $Heap, o#0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id663"} _module.Object.baseFieldsInv($Heap, o#0_0);
        assume false;
    }
    else
    {
        assume (forall o#0_1: ref :: 
          { _module.Object.baseFieldsInv($Heap, o#0_1) } 
            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#0_1)) } 
          $Is(o#0_1, Tclass._module.Object())
               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#0_1))
             ==> _module.Object.baseFieldsInv($Heap, o#0_1));
    }
}



// function declaration for _module.Object.goodPreAndLegalChangesSequence
function _module.Object.goodPreAndLegalChangesSequence($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool
uses {
// definition axiom for _module.Object.goodPreAndLegalChangesSequence (revealed)
axiom {:id "id664"} 9 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
    { _module.Object.goodPreAndLegalChangesSequence($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Object.goodPreAndLegalChangesSequence#canCall($prevHeap, $Heap, this, running#0)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
           && $Is(running#0, TSet(Tclass._module.Thread())))
       ==> (Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> 
          (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
           ==> _module.Universe.legalTransitionsSequence#canCall($prevHeap, $Heap, _module.Object.universe(this), running#0))
         && _module.Object.goodPreAndLegalChangesSequence($prevHeap, $Heap, this, running#0)
           == (
            Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
             && _module.Universe.legalTransitionsSequence($prevHeap, $Heap, _module.Object.universe(this), running#0)));
}

function _module.Object.goodPreAndLegalChangesSequence#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: Set) : bool;

// frame axiom for _module.Object.goodPreAndLegalChangesSequence
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: Set :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.goodPreAndLegalChangesSequence($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && (_module.Object.goodPreAndLegalChangesSequence#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, TSet(Tclass._module.Thread()))
           && $IsAlloc(running#0, TSet(Tclass._module.Thread()), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.goodPreAndLegalChangesSequence($prevHeap, $h0, this, running#0)
       == _module.Object.goodPreAndLegalChangesSequence($prevHeap, $h1, this, running#0));

function _module.Object.goodPreAndLegalChangesSequence#requires(Heap, Heap, ref, Set) : bool;

// #requires axiom for _module.Object.goodPreAndLegalChangesSequence
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: Set :: 
  { _module.Object.goodPreAndLegalChangesSequence#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
       && $Is(running#0, TSet(Tclass._module.Thread()))
     ==> _module.Object.goodPreAndLegalChangesSequence#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, TSet(Tclass._module.Thread()), $prevHeap));

procedure {:verboseName "Object.goodPreAndLegalChangesSequence (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChangesSequence(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 9 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.goodPreAndLegalChangesSequence (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChangesSequence(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##running#0: Set;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id665"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
        assert {:id "id666"} _module.Object.universe(this) != null;
        assert {:id "id667"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this)))
        {
            assert {:id "id668"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                 ==> $_ReadsFrame[$o, $f]);
        }

        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           && (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
        {
            assert {:id "id669"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            ##running#0 := running#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
            assert {:id "id670"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            assert {:id "id671"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0);
        }

        assume {:id "id672"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
           == (
            Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             && _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0));
        assume Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> 
          (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           ==> _module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0), 
          TBool);
        assert {:id "id673"} b$reqreads#0;
        assert {:id "id674"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.goodPreAndLegalChanges
function _module.Object.goodPreAndLegalChanges($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool
uses {
// definition axiom for _module.Object.goodPreAndLegalChanges (revealed)
axiom {:id "id675"} 15 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
    { _module.Object.goodPreAndLegalChanges($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
    _module.Object.goodPreAndLegalChanges#canCall($prevHeap, $Heap, this, running#0)
         || (15 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
           && $Is(running#0, Tclass._module.Thread()))
       ==> (Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> 
          (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
           ==> _module.Universe.legalTransition#canCall($prevHeap, $Heap, _module.Object.universe(this), running#0))
         && _module.Object.goodPreAndLegalChanges($prevHeap, $Heap, this, running#0)
           == (
            Set#IsMember($Unbox(read($prevHeap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read($prevHeap, $o, $f))
             && _module.Universe.legalTransition($prevHeap, $Heap, _module.Object.universe(this), running#0)));
}

function _module.Object.goodPreAndLegalChanges#canCall($prevHeap: Heap, $heap: Heap, this: ref, running#0: ref) : bool;

// frame axiom for _module.Object.goodPreAndLegalChanges
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref, running#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.goodPreAndLegalChanges($prevHeap, $h1, this, running#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && (_module.Object.goodPreAndLegalChanges#canCall($prevHeap, $h0, this, running#0)
         || ($Is(running#0, Tclass._module.Thread())
           && $IsAlloc(running#0, Tclass._module.Thread(), $h0)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.goodPreAndLegalChanges($prevHeap, $h0, this, running#0)
       == _module.Object.goodPreAndLegalChanges($prevHeap, $h1, this, running#0));

function _module.Object.goodPreAndLegalChanges#requires(Heap, Heap, ref, ref) : bool;

// #requires axiom for _module.Object.goodPreAndLegalChanges
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref, running#0: ref :: 
  { _module.Object.goodPreAndLegalChanges#requires($prevHeap, $Heap, this, running#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
       && $Is(running#0, Tclass._module.Thread())
     ==> _module.Object.goodPreAndLegalChanges#requires($prevHeap, $Heap, this, running#0)
       == $IsAlloc(running#0, Tclass._module.Thread(), $prevHeap));

procedure {:verboseName "Object.goodPreAndLegalChanges (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChanges(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 15 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.goodPreAndLegalChanges (well-formedness)"} CheckWellformed$$_module.Object.goodPreAndLegalChanges(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##running#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id676"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
        assert {:id "id677"} _module.Object.universe(this) != null;
        assert {:id "id678"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this)))
        {
            assert {:id "id679"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                 ==> $_ReadsFrame[$o, $f]);
        }

        if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           && (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)))
        {
            assert {:id "id680"} _module.Object.universe(this) != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
            ##running#0 := running#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
            assert {:id "id681"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            assert {:id "id682"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0);
        }

        assume {:id "id683"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
           == (
            Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this))
             && (forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             && _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0));
        assume Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this))
           ==> 
          (forall $o: ref, $f: Field :: 
            { read($Heap, $o, $f) } 
            $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
           ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0), TBool);
        assert {:id "id684"} b$reqreads#0;
        assert {:id "id685"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.Object.isOwnedObject
function _module.Object.isOwnedObject(this: ref) : bool;

function _module.Object.isOwnedObject#canCall(this: ref) : bool;

function _module.Object.isOwnedObject#requires(ref) : bool;

// #requires axiom for _module.Object.isOwnedObject
axiom (forall this: ref :: 
  { _module.Object.isOwnedObject#requires(this) } 
  this != null && $Is(this, Tclass._module.Object())
     ==> _module.Object.isOwnedObject#requires(this) == true);

procedure {:verboseName "Object.isOwnedObject (well-formedness)"} CheckWellformed$$_module.Object.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.Object.baseFieldsInv
function _module.Object.baseFieldsInv($heap: Heap, this: ref) : bool;

function _module.Object.baseFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.baseFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.baseFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Object())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.baseFieldsInv($h0, this)
       == _module.Object.baseFieldsInv($h1, this));

function _module.Object.baseFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.baseFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.baseFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.baseFieldsInv#requires($Heap, this) == true);

procedure {:verboseName "Object.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.Object.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Object.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Object.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 6 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Object.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseFieldsInvMonotonicity, CheckWellFormed$$_module.Object.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id686"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.baseFieldsInv#canCall(old($Heap), this);
    assume {:id "id687"} _module.Object.baseFieldsInv(old($Heap), this);
    assert {:id "id688"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id689"} _module.Object.universe(this) != null;
    assert {:id "id690"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id691"} _module.Object.universe(this) != null;
    assume {:id "id692"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id693"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume {:id "id694"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.baseFieldsInv#canCall($Heap, this);
    assume {:id "id695"} _module.Object.baseFieldsInv($Heap, this);
}



procedure {:verboseName "Object.baseFieldsInvMonotonicity (call)"} Call$$_module.Object.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  // user-defined preconditions
  requires {:id "id696"} _module.Object.baseFieldsInv(previous$Heap, this);
  requires {:id "id697"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id698"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.baseFieldsInv#canCall(current$Heap, this);
  ensures {:id "id699"} _module.Object.baseFieldsInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for _module.Object.localInv
function _module.Object.localInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.localInv
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.localInv($Heap, this) } 
    _module.Object.localInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> 
      _module.Object.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this));
}

function _module.Object.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.localInv($h0, this) == _module.Object.localInv($h1, this));

function _module.Object.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.localInv#requires($Heap, this) == true);

procedure {:verboseName "Object.localInv (well-formedness)"} CheckWellformed$$_module.Object.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id700"} _module.Object.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id701"} _module.Object.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || _module.Object.baseFieldsInv($Heap, this);
  ensures {:id "id702"} _module.Object.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || Lit(true));
  ensures {:id "id703"} _module.Object.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#0))
               ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                 && o#0 != _module.Object.universe(this)
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.localInv (well-formedness)"} CheckWellformed$$_module.Object.localInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id704"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Object.localInv#canCall($Heap, this);
            assume {:id "id705"} _module.Object.localInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
            assume {:id "id706"} _module.Object.objectGlobalBaseInv($Heap, this);
        }
        else
        {
            assume {:id "id707"} _module.Object.localInv($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module.Object.localInv2
function _module.Object.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.Object.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.localInv2($prevHeap, $h0, this)
       == _module.Object.localInv2($prevHeap, $h1, this));

function _module.Object.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.localInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Object.localInv2 (well-formedness)"} CheckWellformed$$_module.Object.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.Object.inv
function _module.Object.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.inv
axiom 12 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this) } 
    _module.Object.inv#canCall($Heap, this)
         || (12 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $Heap))
       ==> 
      _module.Object.inv($Heap, this)
       ==> _module.Object.localInv($Heap, this));
}

function _module.Object.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.inv($h0, this) == _module.Object.inv($h1, this));

function _module.Object.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.Object.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Object.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $Heap)
     ==> _module.Object.inv#requires($Heap, this) == true);

procedure {:verboseName "Object.inv (well-formedness)"} CheckWellformed$$_module.Object.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), $Heap));
  free requires 12 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id708"} _module.Object.inv($Heap, this) ==> _module.Object.localInv($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.inv (well-formedness)"} CheckWellformed$$_module.Object.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id709"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Object.inv#canCall($Heap, this);
            assume {:id "id710"} _module.Object.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.localInv#canCall($Heap, this);
            assume {:id "id711"} _module.Object.localInv($Heap, this);
        }
        else
        {
            assume {:id "id712"} _module.Object.inv($Heap, this) ==> _module.Object.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module.Object.sequenceInv2
function _module.Object.sequenceInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.Object.sequenceInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.sequenceInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.sequenceInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.sequenceInv2($prevHeap, $h0, this)
       == _module.Object.sequenceInv2($prevHeap, $h1, this));

function _module.Object.sequenceInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.sequenceInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.sequenceInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.sequenceInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Object.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.Object.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.Object.inv2
function _module.Object.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Object.inv2
axiom 11 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this) } 
    _module.Object.inv2#canCall($prevHeap, $Heap, this)
         || (11 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Object())
           && $IsAlloc(this, Tclass._module.Object(), $prevHeap))
       ==> 
      _module.Object.inv2($prevHeap, $Heap, this)
       ==> _module.Object.localInv2($prevHeap, $Heap, this)
         && _module.Object.sequenceInv2($prevHeap, $Heap, this));
}

function _module.Object.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Object.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Object.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Object.inv2($prevHeap, $h0, this)
       == _module.Object.inv2($prevHeap, $h1, this));

function _module.Object.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Object.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Object.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Object())
       && $IsAlloc(this, Tclass._module.Object(), $prevHeap)
     ==> _module.Object.inv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "Object.inv2 (well-formedness)"} CheckWellformed$$_module.Object.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id713"} _module.Object.inv2(previous$Heap, current$Heap, this)
     ==> _module.Object.localInv2(previous$Heap, current$Heap, this);
  ensures {:id "id714"} _module.Object.inv2(previous$Heap, current$Heap, this)
     ==> _module.Object.sequenceInv2(previous$Heap, current$Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.inv2 (well-formedness)"} CheckWellformed$$_module.Object.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id715"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            assert {:id "id716"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Object.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id717"} _module.Object.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id718"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            assume _module.Object.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id719"} _module.Object.localInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assert {:id "id720"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
            assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id721"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id722"} _module.Object.inv2(old($Heap), $Heap, this)
               ==> _module.Object.localInv2(old($Heap), $Heap, this)
                 && _module.Object.sequenceInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



procedure {:verboseName "Object.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Object.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 11 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Object.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.Object.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id723"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id724"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id725"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assert {:id "id726"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id727"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Object.sequenceAdmissibility (call)"} Call$$_module.Object.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id728"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id729"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id730"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id731"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#0: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                      { _module.Object.universe(o#0) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#0)) } 
                    $Is(o#0, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0))
                       ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                         && o#0 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#0)
                         && _module.Object.triggerAxioms(previous$Heap, o#0)))));
  requires {:id "id732"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id733"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#1: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#1) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                      { _module.Object.universe(o#1) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1)) } 
                    $Is(o#1, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1))
                       ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                         && o#1 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#1)
                         && _module.Object.triggerAxioms(current$Heap, o#1)))));
  requires {:id "id734"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id735"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#2: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#2)) } 
                $Is(o#2, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2))
                   ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap))));
  requires {:id "id736"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#3: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#3)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#3)) } 
            $Is(o#3, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#3
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3)));
  requires {:id "id737"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#4: ref :: 
            { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#4)) } 
            $Is(o#4, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4))
                 && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#4, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id738"} _module.Object.sequenceInv2(previous$Heap, current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Object.admissibility (well-formedness)"} CheckWellFormed$$_module.Object.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 17 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Object.admissibility (well-formedness)"} CheckWellFormed$$_module.Object.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Object.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id739"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assert {:id "id740"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id741"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assert {:id "id742"} $IsAlloc(this, Tclass._module.Object(), old($Heap));
    assume _module.Object.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id743"} _module.Object.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.inv#canCall($Heap, this);
    assume {:id "id744"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "Object.admissibility (call)"} Call$$_module.Object.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Object())
         && $IsAlloc(this, Tclass._module.Object(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id745"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id746"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id747"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id748"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#0: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#0) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#0) } 
                          { _module.Object.universe(o#0) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0)) } 
                        $Is(o#0, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0))
                           ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                             && o#0 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#0)
                             && _module.Object.triggerAxioms(previous$Heap, o#0))))));
  requires {:id "id749"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id750"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#1: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#1) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#1) } 
                          { _module.Object.universe(o#1) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1)) } 
                        $Is(o#1, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1))
                           ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                             && o#1 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#1)
                             && _module.Object.triggerAxioms(current$Heap, o#1))))));
  requires {:id "id751"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id752"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#2: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2)) } 
                    $Is(o#2, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2))
                       ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id753"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#3: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3)) } 
                $Is(o#3, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#3
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#3))));
  requires {:id "id754"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#4: ref :: 
                { $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4)) } 
                $Is(o#4, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4))
                     && $Is($Unbox(read(previous$Heap, o#4, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#4, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#4, _module.OwnedObject.owner), 
                      Tclass._module.Object(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id755"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id756"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id757"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#6: ref :: 
                { _module.Object.inv(previous$Heap, o#6) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#6)) } 
                $Is(o#6, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6))
                   ==> _module.Object.inv(previous$Heap, o#6))));
  requires {:id "id758"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#7: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#7) } 
              { _module.Object.inv(current$Heap, o#7) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#7)) } 
            $Is(o#7, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#7
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#7))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#7
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#7))));
  requires {:id "id759"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.inv(current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> _module.Object.inv(current$Heap, o#8)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Object.inv2(previous$Heap, current$Heap, this)
       ==> _module.Object.inv#canCall(current$Heap, this));
  ensures {:id "id760"} _module.Object.inv2(previous$Heap, current$Heap, this);
  ensures {:id "id761"} _module.Object.inv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



// $Is axiom for non-null type _module.Object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Object()) } { $Is(c#0, Tclass._module.Object?()) } 
  $Is(c#0, Tclass._module.Object())
     <==> $Is(c#0, Tclass._module.Object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Object(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Object?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Object(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Object?(), $h));

const unique class._module.Thread?: ClassName;

function Tclass._module.Thread?() : Ty
uses {
// Tclass._module.Thread? Tag
axiom Tag(Tclass._module.Thread?()) == Tagclass._module.Thread?
   && TagFamily(Tclass._module.Thread?()) == tytagFamily$Thread;
axiom implements$_module.Object(Tclass._module.Thread?());
}

const unique Tagclass._module.Thread?: TyTag;

// Box/unbox axiom for Tclass._module.Thread?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Thread?()) } 
  $IsBox(bx, Tclass._module.Thread?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Thread?()));

// $Is axiom for class Thread
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Thread?()) } 
  $Is($o, Tclass._module.Thread?())
     <==> $o == null || dtype($o) == Tclass._module.Thread?());

// $IsAlloc axiom for class Thread
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Thread?(), $h) } 
  $IsAlloc($o, Tclass._module.Thread?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// function declaration for _module.Thread.isOwnedObject
function _module.Thread.isOwnedObject(this: ref) : bool
uses {
// definition axiom for _module.Thread.isOwnedObject (revealed)
axiom {:id "id762"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Thread.isOwnedObject(this) } 
    _module.Thread.isOwnedObject#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Thread.isOwnedObject(this) == Lit(false));
// definition axiom for _module.Thread.isOwnedObject for all literals (revealed)
axiom {:id "id763"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.Thread.isOwnedObject(Lit(this)) } 
    _module.Thread.isOwnedObject#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Thread.isOwnedObject(Lit(this)) == Lit(false));
}

function _module.Thread.isOwnedObject#canCall(this: ref) : bool;

function _module.Thread.isOwnedObject#requires(ref) : bool;

// #requires axiom for _module.Thread.isOwnedObject
axiom (forall this: ref :: 
  { _module.Thread.isOwnedObject#requires(this) } 
  this != null && $Is(this, Tclass._module.Thread())
     ==> _module.Thread.isOwnedObject#requires(this) == true);

// override axiom for _module.Object.isOwnedObject in class _module.Thread
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Object.isOwnedObject(this), $Is(this, Tclass._module.Thread()) } 
      { _module.Object.isOwnedObject(this), _module.Thread.isOwnedObject(this) } 
    _module.Thread.isOwnedObject#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.isOwnedObject(this) == _module.Thread.isOwnedObject(this));

procedure {:verboseName "Thread.isOwnedObject (well-formedness)"} CheckWellformed$$_module.Thread.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Thread.isOwnedObject (override check)"} OverrideCheck$$_module.Thread.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.isOwnedObject (override check)"} OverrideCheck$$_module.Thread.isOwnedObject(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id765"} true;
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id766"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.Thread.baseFieldsInv
function _module.Thread.baseFieldsInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Thread.baseFieldsInv (revealed)
axiom {:id "id767"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.baseFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> _module.Thread.baseFieldsInv($Heap, this) == Lit(true));
}

function _module.Thread.baseFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.baseFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.baseFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Thread())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.baseFieldsInv($h0, this)
       == _module.Thread.baseFieldsInv($h1, this));

function _module.Thread.baseFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Thread.baseFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Thread.baseFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap)
     ==> _module.Thread.baseFieldsInv#requires($Heap, this) == true);

// override axiom for _module.Object.baseFieldsInv in class _module.Thread
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.baseFieldsInv($Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.baseFieldsInv($Heap, this), _module.Thread.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.baseFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.baseFieldsInv($Heap, this)
         == _module.Thread.baseFieldsInv($Heap, this));

procedure {:verboseName "Thread.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.Thread.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Thread.baseFieldsInv (override check)"} OverrideCheck$$_module.Thread.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.baseFieldsInv (override check)"} OverrideCheck$$_module.Thread.baseFieldsInv(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id769"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))), 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    assert {:id "id770"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this || $o == _module.Object.universe(this))
         ==> $o == this || $o == _module.Object.universe(this));
}



procedure {:verboseName "Thread.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseFieldsInvMonotonicity, CheckWellFormed$$_module.Thread.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id771"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume _module.Thread.baseFieldsInv#canCall(old($Heap), this);
    assume {:id "id772"} _module.Thread.baseFieldsInv(old($Heap), this);
    assert {:id "id773"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assert {:id "id774"} _module.Object.universe(this) != null;
    assert {:id "id775"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id776"} _module.Object.universe(this) != null;
    assume {:id "id777"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id778"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume {:id "id779"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.baseFieldsInv#canCall($Heap, this);
    assume {:id "id780"} _module.Thread.baseFieldsInv($Heap, this);
}



procedure {:verboseName "Thread.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id781"} _module.Thread.baseFieldsInv(old($Heap), this)
       && Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
       && (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id782"} _module.Thread.baseFieldsInv#canCall(old($Heap), this)
       ==> _module.Thread.baseFieldsInv(old($Heap), this) || Lit(true);
    assert {:id "id783"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id784"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id785"} true;
    assert {:id "id786"} (forall $o: ref, $f: Field :: true);
    assert {:id "id787"} (forall $o: ref, $f: Field :: true);
    assume {:id "id788"} _module.Thread.baseFieldsInv($Heap, this);
    assert {:id "id789"} _module.Thread.baseFieldsInv#canCall($Heap, this)
       ==> _module.Thread.baseFieldsInv($Heap, this) || Lit(true);
}



procedure {:verboseName "Thread.baseFieldsInvMonotonicity (call)"} Call$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  // user-defined preconditions
  requires {:id "id790"} _module.Thread.baseFieldsInv#canCall(previous$Heap, this)
     ==> _module.Thread.baseFieldsInv(previous$Heap, this) || Lit(true);
  requires {:id "id791"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id792"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.baseFieldsInv#canCall(current$Heap, this);
  free ensures {:id "id793"} _module.Thread.baseFieldsInv#canCall(current$Heap, this)
     && 
    _module.Thread.baseFieldsInv(current$Heap, this)
     && Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Thread.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  free requires {:id "id794"} _module.Thread.baseFieldsInv#canCall(previous$Heap, this)
     && 
    _module.Thread.baseFieldsInv(previous$Heap, this)
     && Lit(true);
  requires {:id "id795"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id796"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.baseFieldsInv#canCall(current$Heap, this);
  ensures {:id "id797"} _module.Thread.baseFieldsInv#canCall(current$Heap, this)
     ==> _module.Thread.baseFieldsInv(current$Heap, this) || Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.Thread.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: baseFieldsInvMonotonicity, Impl$$_module.Thread.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.Thread.localInv
function _module.Thread.localInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Thread.localInv
axiom 8 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.localInv($Heap, this) } 
    _module.Thread.localInv#canCall($Heap, this)
         || (8 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> 
      _module.Thread.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this));
// definition axiom for _module.Thread.localInv (revealed)
axiom {:id "id798"} 8 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv#canCall($Heap, this)
         || (8 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> (Lit(true) ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this))
         && _module.Thread.localInv($Heap, this)
           == (true && _module.Object.objectGlobalBaseInv($Heap, this)));
}

function _module.Thread.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.localInv($h0, this) == _module.Thread.localInv($h1, this));

function _module.Thread.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Thread.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Thread.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap)
     ==> _module.Thread.localInv#requires($Heap, this) == true);

// override axiom for _module.Object.localInv in class _module.Thread
axiom 8 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.localInv($Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv($Heap, this), _module.Thread.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv#canCall($Heap, this)
         || (8 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.localInv($Heap, this) == _module.Thread.localInv($Heap, this));

procedure {:verboseName "Thread.localInv (well-formedness)"} CheckWellformed$$_module.Thread.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id799"} _module.Thread.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id800"} _module.Thread.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || _module.Object.baseFieldsInv($Heap, this);
  ensures {:id "id801"} _module.Thread.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || Lit(true));
  ensures {:id "id802"} _module.Thread.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#0))
               ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                 && o#0 != _module.Object.universe(this)
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.localInv (well-formedness)"} CheckWellformed$$_module.Thread.localInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id803"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Thread.localInv#canCall($Heap, this);
            assume {:id "id804"} _module.Thread.localInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
            assume {:id "id805"} _module.Object.objectGlobalBaseInv($Heap, this);
        }
        else
        {
            assume {:id "id806"} _module.Thread.localInv($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        }

        assume {:id "id807"} _module.Thread.localInv($Heap, this)
           == (true && _module.Object.objectGlobalBaseInv($Heap, this));
        assume Lit(true) ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Thread.localInv($Heap, this), TBool);
        assert {:id "id808"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Thread.localInv (override check)"} OverrideCheck$$_module.Thread.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.localInv (override check)"} OverrideCheck$$_module.Thread.localInv(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id809"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id810"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id811"} _module.Thread.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this);
    assert {:id "id812"} _module.Thread.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id813"} _module.Thread.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || _module.Object.baseFieldsInv($Heap, this);
    assert {:id "id814"} _module.Thread.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || Lit(true));
    assert {:id "id815"} _module.Thread.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || (forall o#1: ref :: 
              { _module.Object.triggerAxioms($Heap, o#1) } 
                { _module.Object.baseFieldsInv($Heap, o#1) } 
                { _module.Object.universe(o#1) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1)) } 
              $Is(o#1, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1))
                 ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                   && o#1 != _module.Object.universe(this)
                   && _module.Object.baseFieldsInv($Heap, o#1)
                   && _module.Object.triggerAxioms($Heap, o#1)));
}



// function declaration for _module.Thread.inv
function _module.Thread.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Thread.inv
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.inv($Heap, this) } 
    _module.Thread.inv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> 
      _module.Thread.inv($Heap, this)
       ==> _module.Thread.localInv($Heap, this));
// definition axiom for _module.Thread.inv (revealed)
axiom {:id "id816"} 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Thread.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $Heap))
       ==> (Lit(true) ==> _module.Thread.localInv#canCall($Heap, this))
         && _module.Thread.inv($Heap, this)
           == (true && _module.Thread.localInv($Heap, this)));
}

function _module.Thread.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.inv($h0, this) == _module.Thread.inv($h1, this));

function _module.Thread.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.Thread.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Thread.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap)
     ==> _module.Thread.inv#requires($Heap, this) == true);

// override axiom for _module.Object.inv in class _module.Thread
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.inv($Heap, this), _module.Thread.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.inv($Heap, this) == _module.Thread.inv($Heap, this));

procedure {:verboseName "Thread.inv (well-formedness)"} CheckWellformed$$_module.Thread.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id817"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this) || Lit(true);
  ensures {:id "id818"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id819"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || _module.Object.baseFieldsInv($Heap, this));
  ensures {:id "id820"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id821"} _module.Thread.inv($Heap, this)
     ==> 
    _module.Thread.localInv#canCall($Heap, this)
     ==> _module.Thread.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv (well-formedness)"} CheckWellformed$$_module.Thread.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id822"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Thread.inv#canCall($Heap, this);
            assume {:id "id823"} _module.Thread.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assume _module.Thread.localInv#canCall($Heap, this);
            assume {:id "id824"} _module.Thread.localInv($Heap, this);
        }
        else
        {
            assume {:id "id825"} _module.Thread.inv($Heap, this) ==> _module.Thread.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Thread.localInv#canCall($Heap, this);
        }

        assume {:id "id826"} _module.Thread.inv($Heap, this)
           == (true && _module.Thread.localInv($Heap, this));
        assume Lit(true) ==> _module.Thread.localInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Thread.inv($Heap, this), TBool);
        assert {:id "id827"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Thread.inv (override check)"} OverrideCheck$$_module.Thread.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv (override check)"} OverrideCheck$$_module.Thread.inv(this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id828"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id829"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id830"} _module.Thread.inv($Heap, this) ==> _module.Thread.localInv($Heap, this);
    assert {:id "id831"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this) || Lit(true);
    assert {:id "id832"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id833"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || _module.Object.baseFieldsInv($Heap, this));
    assert {:id "id834"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || Lit(true)));
    assert {:id "id835"} _module.Thread.inv($Heap, this)
       ==> 
      _module.Thread.localInv#canCall($Heap, this)
       ==> _module.Thread.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.triggerAxioms($Heap, o#1) } 
                    { _module.Object.baseFieldsInv($Heap, o#1) } 
                    { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this)
                       && _module.Object.baseFieldsInv($Heap, o#1)
                       && _module.Object.triggerAxioms($Heap, o#1))));
}



// function declaration for _module.Thread.localInv2
function _module.Thread.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Thread.localInv2 (revealed)
axiom {:id "id836"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> _module.Thread.localInv2($prevHeap, $Heap, this) == Lit(true));
}

function _module.Thread.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.localInv2($prevHeap, $h0, this)
       == _module.Thread.localInv2($prevHeap, $h1, this));

function _module.Thread.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Thread.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Thread.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $prevHeap)
     ==> _module.Thread.localInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.localInv2 in class _module.Thread
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.localInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv2($prevHeap, $Heap, this), _module.Thread.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.localInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.localInv2($prevHeap, $Heap, this)
         == _module.Thread.localInv2($prevHeap, $Heap, this));

procedure {:verboseName "Thread.localInv2 (well-formedness)"} CheckWellformed$$_module.Thread.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "Thread.localInv2 (override check)"} OverrideCheck$$_module.Thread.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.localInv2 (override check)"} OverrideCheck$$_module.Thread.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id838"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id839"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Thread.sequenceInv2
function _module.Thread.sequenceInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Thread.sequenceInv2 (revealed)
axiom {:id "id840"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> _module.Thread.sequenceInv2($prevHeap, $Heap, this) == Lit(true));
}

function _module.Thread.sequenceInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.sequenceInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.sequenceInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.sequenceInv2($prevHeap, $h0, this)
       == _module.Thread.sequenceInv2($prevHeap, $h1, this));

function _module.Thread.sequenceInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Thread.sequenceInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Thread.sequenceInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $prevHeap)
     ==> _module.Thread.sequenceInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.sequenceInv2 in class _module.Thread
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.sequenceInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.sequenceInv2($prevHeap, $Heap, this), _module.Thread.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.sequenceInv2($prevHeap, $Heap, this)
         == _module.Thread.sequenceInv2($prevHeap, $Heap, this));

procedure {:verboseName "Thread.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.Thread.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "Thread.sequenceInv2 (override check)"} OverrideCheck$$_module.Thread.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.sequenceInv2 (override check)"} OverrideCheck$$_module.Thread.sequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id842"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id843"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Thread.inv2
function _module.Thread.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Thread.inv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.inv2($prevHeap, $Heap, this) } 
    _module.Thread.inv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> 
      _module.Thread.inv2($prevHeap, $Heap, this)
       ==> _module.Thread.localInv2($prevHeap, $Heap, this)
         && _module.Thread.sequenceInv2($prevHeap, $Heap, this));
// definition axiom for _module.Thread.inv2 (revealed)
axiom {:id "id844"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Thread.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Thread())
           && $IsAlloc(this, Tclass._module.Thread(), $prevHeap))
       ==> _module.Thread.localInv2#canCall($prevHeap, $Heap, this)
         && (_module.Thread.localInv2($prevHeap, $Heap, this)
           ==> _module.Thread.sequenceInv2#canCall($prevHeap, $Heap, this))
         && _module.Thread.inv2($prevHeap, $Heap, this)
           == (_module.Thread.localInv2($prevHeap, $Heap, this)
             && _module.Thread.sequenceInv2($prevHeap, $Heap, this)));
}

function _module.Thread.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Thread.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Thread.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Thread.inv2($prevHeap, $h0, this)
       == _module.Thread.inv2($prevHeap, $h1, this));

function _module.Thread.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Thread.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Thread.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $prevHeap)
     ==> _module.Thread.inv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.inv2 in class _module.Thread
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Thread()), $IsGoodHeap($Heap) } 
      { _module.Object.inv2($prevHeap, $Heap, this), _module.Thread.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Thread.inv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Thread()))
       ==> _module.Object.inv2($prevHeap, $Heap, this)
         == _module.Thread.inv2($prevHeap, $Heap, this));

procedure {:verboseName "Thread.inv2 (well-formedness)"} CheckWellformed$$_module.Thread.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id845"} _module.Thread.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Thread.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.localInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id846"} _module.Thread.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.sequenceInv2(previous$Heap, current$Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv2 (well-formedness)"} CheckWellformed$$_module.Thread.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id847"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assert {:id "id848"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Thread.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id849"} _module.Thread.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id850"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assume _module.Thread.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id851"} _module.Thread.localInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id852"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assume _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id853"} _module.Thread.sequenceInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id854"} _module.Thread.inv2(old($Heap), $Heap, this)
               ==> _module.Thread.localInv2(old($Heap), $Heap, this)
                 && _module.Thread.sequenceInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
        assert {:id "id855"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Thread.localInv2#canCall(old($Heap), $Heap, this);
        if (_module.Thread.localInv2(old($Heap), $Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
            assert {:id "id856"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id857"} _module.Thread.inv2(old($Heap), $Heap, this)
           == (_module.Thread.localInv2(old($Heap), $Heap, this)
             && _module.Thread.sequenceInv2(old($Heap), $Heap, this));
        assume _module.Thread.localInv2#canCall(old($Heap), $Heap, this)
           && (_module.Thread.localInv2(old($Heap), $Heap, this)
             ==> _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Thread.inv2(old($Heap), $Heap, this), TBool);
        assert {:id "id858"} b$reqreads#0;
        assert {:id "id859"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "Thread.inv2 (override check)"} OverrideCheck$$_module.Thread.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.inv2 (override check)"} OverrideCheck$$_module.Thread.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Thread_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id860"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Thread_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id861"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id862"} _module.Thread.inv2(old($Heap), $Heap, this)
       ==> _module.Thread.localInv2(old($Heap), $Heap, this)
         && _module.Thread.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id863"} _module.Thread.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Thread.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.localInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id864"} _module.Thread.inv2(old($Heap), $Heap, this)
       ==> 
      _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.sequenceInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "Thread.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.Thread.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id865"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assert {:id "id866"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id867"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assert {:id "id868"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id869"} _module.Thread.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Thread.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id870"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id871"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id872"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id873"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id874"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id875"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id876"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id877"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id878"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id879"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id880"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id881"} Set#Subset(running#0, running#0);
    assert {:id "id882"} (forall $o: ref, $f: Field :: true);
    assert {:id "id883"} (forall $o: ref, $f: Field :: true);
    assume {:id "id884"} _module.Thread.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id885"} _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.sequenceInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "Thread.sequenceAdmissibility (call)"} Call$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id886"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id887"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id888"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id889"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id890"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id891"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id892"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id893"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id894"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id895"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id896"} _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Thread.sequenceInv2(previous$Heap, current$Heap, this)
     && Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Thread.sequenceAdmissibility (correctness)"} Impl$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id897"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id898"} _module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.sequenceInv2(previous$Heap, current$Heap, this) || Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.sequenceAdmissibility (correctness)"} Impl$$_module.Thread.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.Thread.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Thread.admissibility (well-formedness)"} CheckWellFormed$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.admissibility (well-formedness)"} CheckWellFormed$$_module.Thread.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Thread.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id899"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assert {:id "id900"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id901"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assert {:id "id902"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume _module.Thread.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id903"} _module.Thread.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assume _module.Thread.inv#canCall($Heap, this);
    assume {:id "id904"} _module.Thread.inv($Heap, this);
}



procedure {:verboseName "Thread.admissibility (override check)"} OverrideCheck$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.admissibility (override check)"} OverrideCheck$$_module.Thread.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id905"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id906"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id907"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id908"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id909"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id910"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id911"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id912"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id913"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id914"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id915"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id916"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id917"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id918"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id919"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id920"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id921"} running#0 != null ==> running#0 != null;
    assert {:id "id922"} (forall $o: ref, $f: Field :: true);
    assert {:id "id923"} (forall $o: ref, $f: Field :: true);
    assume {:id "id924"} _module.Thread.inv2(old($Heap), $Heap, this) && _module.Thread.inv($Heap, this);
    assert {:id "id925"} _module.Thread.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.inv2(old($Heap), $Heap, this)
         || (_module.Thread.localInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Thread.localInv2(old($Heap), $Heap, this) || Lit(true));
    assert {:id "id926"} _module.Thread.inv2#canCall(old($Heap), $Heap, this)
       ==> _module.Thread.inv2(old($Heap), $Heap, this)
         || (_module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
           ==> _module.Thread.sequenceInv2(old($Heap), $Heap, this) || Lit(true));
    assert {:id "id927"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this) || Lit(true);
    assert {:id "id928"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this) || Lit(true));
    assert {:id "id929"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(this))));
    assert {:id "id930"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || _module.Object.baseFieldsInv($Heap, this)));
    assert {:id "id931"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id932"} _module.Thread.inv#canCall($Heap, this)
       ==> _module.Thread.inv($Heap, this)
         || (_module.Thread.localInv#canCall($Heap, this)
           ==> _module.Thread.localInv($Heap, this)
             || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this)
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#9: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#9) } 
                        { _module.Object.baseFieldsInv($Heap, o#9) } 
                        { _module.Object.universe(o#9) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#9)) } 
                      $Is(o#9, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9))
                         ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                           && o#9 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#9)
                           && _module.Object.triggerAxioms($Heap, o#9)))));
}



procedure {:verboseName "Thread.admissibility (call)"} Call$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id933"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id934"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id935"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id936"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#10: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#10) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#10) } 
                          { _module.Object.universe(o#10) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#10)) } 
                        $Is(o#10, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#10))
                           ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                             && o#10 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#10)
                             && _module.Object.triggerAxioms(previous$Heap, o#10))))));
  requires {:id "id937"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id938"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#11: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#11) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#11) } 
                          { _module.Object.universe(o#11) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#11)) } 
                        $Is(o#11, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#11))
                           ==> _module.Object.universe(o#11) == _module.Object.universe(this)
                             && o#11 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#11)
                             && _module.Object.triggerAxioms(current$Heap, o#11))))));
  requires {:id "id939"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id940"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#12: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#12)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#12)) } 
                    $Is(o#12, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#12))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#12))
                       ==> !$IsAllocBox($Box(o#12), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id941"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#13: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#13) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#13
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#13))));
  requires {:id "id942"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#14: ref :: 
                { $Unbox(read(current$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#14, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#14)) } 
                $Is(o#14, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#14))
                     && $Is($Unbox(read(previous$Heap, o#14, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#14, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#14, _module.OwnedObject.owner), 
                      Tclass._module.Object(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#14, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id943"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id944"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#15: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#15) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#15) } 
                      { _module.Object.universe(o#15) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#15)) } 
                    $Is(o#15, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#15))
                       ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                         && o#15 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#15)
                         && _module.Object.triggerAxioms(previous$Heap, o#15)))));
  requires {:id "id945"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#16: ref :: 
                { _module.Object.inv(previous$Heap, o#16) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#16)) } 
                $Is(o#16, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#16))
                   ==> _module.Object.inv(previous$Heap, o#16))));
  requires {:id "id946"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#17: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#17) } 
              { _module.Object.inv(current$Heap, o#17) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#17
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#17))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#17
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#17))));
  requires {:id "id947"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#18: ref :: 
            { _module.Object.inv(current$Heap, o#18) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#18)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#18)) } 
            $Is(o#18, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#18))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#18))
               ==> _module.Object.inv(current$Heap, o#18)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Thread.inv2(previous$Heap, current$Heap, this)
       ==> _module.Thread.inv#canCall(current$Heap, this));
  free ensures {:id "id948"} _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.Thread.inv2(previous$Heap, current$Heap, this)
     && 
    _module.Thread.localInv2(previous$Heap, current$Heap, this)
     && _module.Thread.sequenceInv2(previous$Heap, current$Heap, this);
  free ensures {:id "id949"} _module.Thread.inv#canCall(current$Heap, this)
     && 
    _module.Thread.inv(current$Heap, this)
     && 
    true
     && _module.Thread.localInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Thread.admissibility (correctness)"} Impl$$_module.Thread.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id950"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.Thread.inv2(previous$Heap, current$Heap, this)
       ==> _module.Thread.inv#canCall(current$Heap, this));
  ensures {:id "id951"} _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.inv2(previous$Heap, current$Heap, this)
       || (_module.Thread.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Thread.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id952"} _module.Thread.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Thread.inv2(previous$Heap, current$Heap, this)
       || (_module.Thread.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.Thread.sequenceInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id953"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this) || Lit(true);
  ensures {:id "id954"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this) || Lit(true));
  ensures {:id "id955"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id956"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id957"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id958"} _module.Thread.inv#canCall(current$Heap, this)
     ==> _module.Thread.inv(current$Heap, this)
       || (_module.Thread.localInv#canCall(current$Heap, this)
         ==> _module.Thread.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#29: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#29) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#29) } 
                      { _module.Object.universe(o#29) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#29)) } 
                    $Is(o#29, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#29))
                       ==> _module.Object.universe(o#29) == _module.Object.universe(this)
                         && o#29 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#29)
                         && _module.Object.triggerAxioms(current$Heap, o#29)))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.admissibility (correctness)"} Impl$$_module.Thread.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.Thread.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Thread.CheckSequenceInv2 (well-formedness)"} CheckWellFormed$$_module.Thread.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.CheckSequenceInv2 (well-formedness)"} CheckWellFormed$$_module.Thread.CheckSequenceInv2(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: CheckSequenceInv2, CheckWellFormed$$_module.Thread.CheckSequenceInv2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id959"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id960"} _module.Object.universe(this) != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Thread?(), $Heap);
    assert {:id "id961"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
    assume _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id962"} _module.Thread.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Thread.CheckSequenceInv2 (call)"} Call$$_module.Thread.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id963"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id964"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  requires {:id "id965"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));
  requires {:id "id966"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#1: ref :: 
            { _module.Object.inv($Heap, o#1) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#1)) } 
            $Is(o#1, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1))
               ==> _module.Object.inv($Heap, o#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
  free ensures {:id "id967"} _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
     && 
    _module.Thread.sequenceInv2(old($Heap), $Heap, this)
     && Lit(true);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == _module.Object.universe(this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Thread.CheckSequenceInv2 (correctness)"} Impl$$_module.Thread.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id968"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this);
  ensures {:id "id969"} _module.Thread.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.Thread.sequenceInv2(old($Heap), $Heap, this) || Lit(true);
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == _module.Object.universe(this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread.CheckSequenceInv2 (correctness)"} Impl$$_module.Thread.CheckSequenceInv2(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var o#4: ref;
  var $Heap_at_0: Heap;
  var o#6: ref;

    // AddMethodImpl: CheckSequenceInv2, Impl$$_module.Thread.CheckSequenceInv2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(291,19)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id970"} _module.Object.universe(this) != null;
    assert {:id "id971"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == _module.Object.universe(this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id972"} Call$$_module.Universe.Havoc(_module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(292,5)
    assert {:id "id973"} {:subsumption 0} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id974"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this));
    if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this)))
    {
        // Begin Comprehension WF check
        havoc o#4;
        if ($Is(o#4, Tclass._module.Object())
           && $IsAlloc(o#4, Tclass._module.Object(), $Heap))
        {
            assert {:id "id975"} $IsAlloc(this, Tclass._module.Thread(), old($Heap));
            assert {:id "id976"} {:subsumption 0} _module.Object.universe(this) != null;
            assert {:id "id977"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#4)))
            {
                assert {:id "id978"} {:subsumption 0} o#4 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#4), Tclass._module.Object?(), $Heap);
                assert {:id "id979"} $IsAlloc(o#4, Tclass._module.Object(), old($Heap));
                assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#4);
            }
        }

        // End Comprehension WF check
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
       && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
         ==> (forall o#5: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5)) } 
          $Is(o#5, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5))
             ==> _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#5)));
    assume {:id "id980"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
       && (forall o#5: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#5)) } 
        $Is(o#5, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5))
           ==> _module.Object.sequenceInv2(old($Heap), $Heap, o#5));
    $Heap_at_0 := $Heap;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(294,19)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id981"} _module.Object.universe(this) != null;
    assert {:id "id982"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == _module.Object.universe(this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id983"} Call$$_module.Universe.Havoc(_module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt

  after_0:
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(295,5)
    assert {:id "id984"} {:subsumption 0} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id985"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), $Heap_at_0);
    assume _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_0, $Heap, _module.Object.universe(this));
    if (_module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this)))
    {
        // Begin Comprehension WF check
        havoc o#6;
        if ($Is(o#6, Tclass._module.Object())
           && $IsAlloc(o#6, Tclass._module.Object(), $Heap))
        {
            assert {:id "id986"} $IsAlloc(this, Tclass._module.Thread(), $Heap_at_0);
            assert {:id "id987"} {:subsumption 0} _module.Object.universe(this) != null;
            assert {:id "id988"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), $Heap_at_0);
            if (Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#6)))
            {
                assert {:id "id989"} {:subsumption 0} o#6 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#6), Tclass._module.Object?(), $Heap);
                assert {:id "id990"} $IsAlloc(o#6, Tclass._module.Object(), $Heap_at_0);
                assume _module.Object.sequenceInv2#canCall($Heap_at_0, $Heap, o#6);
            }
        }

        // End Comprehension WF check
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_0, $Heap, _module.Object.universe(this))
       && (_module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this))
         ==> (forall o#7: ref :: 
          { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7) } 
            { Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7)) } 
          $Is(o#7, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7))
             ==> _module.Object.sequenceInv2#canCall($Heap_at_0, $Heap, o#7)));
    assume {:id "id991"} _module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this))
       && (forall o#7: ref :: 
        { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7) } 
          { Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#7)) } 
        $Is(o#7, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7))
           ==> _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7));
}



procedure {:verboseName "Thread._ctor (well-formedness)"} CheckWellFormed$$_module.Thread.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref);
  free requires 19 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread._ctor (well-formedness)"} CheckWellFormed$$_module.Thread.__ctor(universe#0: ref, running#0: ref) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.Thread.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    assert {:id "id992"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id993"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id994"} universe#0 != null;
    assume {:id "id995"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.Thread())
       && $IsAlloc(this, Tclass._module.Thread(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id996"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id997"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id998"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id999"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id1000"} _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0);
}



procedure {:verboseName "Thread._ctor (call)"} Call$$_module.Thread.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Thread())
         && $IsAlloc(this, Tclass._module.Thread(), $Heap));
  // user-defined preconditions
  requires {:id "id1001"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id1002"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id1003"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id1004"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  free ensures {:id "id1005"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1006"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && _module.Universe.globalInv(old($Heap), universe#0)
     && (forall o#11: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#11) } 
        { _module.Object.inv($Heap, o#11) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11))
         ==> ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv($Heap, o#11))
           && ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv2(old($Heap), $Heap, o#11)))
     && (forall o#12: ref :: 
      { _module.Object.inv($Heap, o#12) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
      $Is(o#12, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
           && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12))
         ==> _module.Object.inv($Heap, o#12));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Thread._ctor (correctness)"} Impl$$_module.Thread.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1007"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#14: ref :: 
      { _module.Object.inv($Heap, o#14) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
      $Is(o#14, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
         ==> _module.Object.inv($Heap, o#14));
  requires {:id "id1008"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  ensures {:id "id1009"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id1010"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id1011"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.triggerAxioms($Heap, o#15) } 
                  { _module.Object.baseFieldsInv($Heap, o#15) } 
                  { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                     && o#15 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#15)
                     && _module.Object.triggerAxioms($Heap, o#15))));
  ensures {:id "id1012"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#16: ref :: 
            { _module.Object.inv($Heap, o#16) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> _module.Object.inv($Heap, o#16)));
  ensures {:id "id1013"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true))));
  ensures {:id "id1014"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
                   || (forall o#17: ref :: 
                    { _module.Object.triggerAxioms(old($Heap), o#17) } 
                      { _module.Object.baseFieldsInv(old($Heap), o#17) } 
                      { _module.Object.universe(o#17) } 
                      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
                    $Is(o#17, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
                       ==> _module.Object.universe(o#17) == universe#0
                         && o#17 != universe#0
                         && _module.Object.baseFieldsInv(old($Heap), o#17)
                         && _module.Object.triggerAxioms(old($Heap), o#17)))));
  ensures {:id "id1015"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true))));
  ensures {:id "id1016"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0)
                   || (forall o#18: ref :: 
                    { _module.Object.triggerAxioms($Heap, o#18) } 
                      { _module.Object.baseFieldsInv($Heap, o#18) } 
                      { _module.Object.universe(o#18) } 
                      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
                    $Is(o#18, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
                       ==> _module.Object.universe(o#18) == universe#0
                         && o#18 != universe#0
                         && _module.Object.baseFieldsInv($Heap, o#18)
                         && _module.Object.triggerAxioms($Heap, o#18)))));
  ensures {:id "id1017"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
                $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)));
  ensures {:id "id1018"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (forall o#19: ref :: 
                { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                $Is(o#19, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19))
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19))
                   ==> !$IsAllocBox($Box(o#19), Tclass._module.Object(), old($Heap)))));
  ensures {:id "id1019"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#20) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
            $Is(o#20, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#20 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#20)));
  ensures {:id "id1020"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21))
                 && $Is($Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#21, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#21, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  ensures {:id "id1021"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id1022"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#22: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#22) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#22) } 
                  { _module.Object.universe(o#22) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22)) } 
                $Is(o#22, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22))
                   ==> _module.Object.universe(o#22) == universe#0
                     && o#22 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#22)
                     && _module.Object.triggerAxioms(old($Heap), o#22))));
  ensures {:id "id1023"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (forall o#23: ref :: 
            { _module.Object.inv(old($Heap), o#23) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
            $Is(o#23, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23))
               ==> _module.Object.inv(old($Heap), o#23)));
  ensures {:id "id1024"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#24: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#24) } 
          { _module.Object.inv($Heap, o#24) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24)) } 
        $Is(o#24, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24))
           ==> ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv($Heap, o#24))
             && ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv2(old($Heap), $Heap, o#24)));
  ensures {:id "id1025"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#25: ref :: 
        { _module.Object.inv($Heap, o#25) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
        $Is(o#25, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25))
             && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25))
           ==> _module.Object.inv($Heap, o#25));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Thread._ctor (correctness)"} Impl$$_module.Thread.__ctor(universe#0: ref, running#0: ref) returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.universe: ref;
  var defass#this.universe: bool;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.Thread.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(303,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(304,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(303,3)
    assert {:id "id1027"} defass#this.universe;
    assume this != null && $Is(this, Tclass._module.Thread?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume _module.Object.universe(this) == this.universe;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(303,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(306,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1028"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1029"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(307,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1030"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1031"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1032"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1033"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.Thread
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Thread()) } { $Is(c#0, Tclass._module.Thread?()) } 
  $Is(c#0, Tclass._module.Thread())
     <==> $Is(c#0, Tclass._module.Thread?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Thread
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Thread(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Thread?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Thread(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Thread?(), $h));

const unique class._module.OwnedObject?: ClassName;

function Tclass._module.OwnedObject?() : Ty
uses {
// Tclass._module.OwnedObject? Tag
axiom Tag(Tclass._module.OwnedObject?()) == Tagclass._module.OwnedObject?
   && TagFamily(Tclass._module.OwnedObject?()) == tytagFamily$OwnedObject;
}

const unique Tagclass._module.OwnedObject?: TyTag;

// Box/unbox axiom for Tclass._module.OwnedObject?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedObject?()) } 
  $IsBox(bx, Tclass._module.OwnedObject?())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.OwnedObject?()));

// $Is axiom for trait OwnedObject
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedObject?()) } 
  $Is($o, Tclass._module.OwnedObject?())
     <==> $o == null || implements$_module.OwnedObject(dtype($o)));

// $IsAlloc axiom for trait OwnedObject
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedObject?(), $h) } 
  $IsAlloc($o, Tclass._module.OwnedObject?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_module.OwnedObject(ty: Ty) : bool;

const _module.OwnedObject.nonvolatileVersion: Field
uses {
axiom FDim(_module.OwnedObject.nonvolatileVersion) == 0
   && FieldOfDecl(class._module.OwnedObject?, field$nonvolatileVersion)
     == _module.OwnedObject.nonvolatileVersion
   && $IsGhostField(_module.OwnedObject.nonvolatileVersion);
}

// OwnedObject.nonvolatileVersion: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int } 
  $IsGoodHeap($h) && $o != null && $Is($o, Tclass._module.OwnedObject?())
     ==> $Is($Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int, TInt));

// OwnedObject.nonvolatileVersion: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && $Is($o, Tclass._module.OwnedObject?())
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.OwnedObject.nonvolatileVersion)): int, TInt, $h));

const _module.OwnedObject.owner: Field
uses {
axiom FDim(_module.OwnedObject.owner) == 0
   && FieldOfDecl(class._module.OwnedObject?, field$owner)
     == _module.OwnedObject.owner
   && $IsGhostField(_module.OwnedObject.owner);
}

// OwnedObject.owner: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.owner)): ref } 
  $IsGoodHeap($h) && $o != null && $Is($o, Tclass._module.OwnedObject?())
     ==> $Is($Unbox(read($h, $o, _module.OwnedObject.owner)): ref, Tclass._module.Object()));

// OwnedObject.owner: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedObject.owner)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && $Is($o, Tclass._module.OwnedObject?())
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.OwnedObject.owner)): ref, 
      Tclass._module.Object(), 
      $h));

// function declaration for _module.OwnedObject.isOwnedObject
function _module.OwnedObject.isOwnedObject(this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.isOwnedObject (revealed)
axiom {:id "id1034"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.isOwnedObject(this) } 
    _module.OwnedObject.isOwnedObject#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.OwnedObject.isOwnedObject(this) == Lit(true));
// definition axiom for _module.OwnedObject.isOwnedObject for all literals (revealed)
axiom {:id "id1035"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.OwnedObject.isOwnedObject(Lit(this)) } 
    _module.OwnedObject.isOwnedObject#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.OwnedObject.isOwnedObject(Lit(this)) == Lit(true));
}

function _module.OwnedObject.isOwnedObject#canCall(this: ref) : bool;

function _module.OwnedObject.isOwnedObject#requires(ref) : bool;

// #requires axiom for _module.OwnedObject.isOwnedObject
axiom (forall this: ref :: 
  { _module.OwnedObject.isOwnedObject#requires(this) } 
  this != null && $Is(this, Tclass._module.OwnedObject())
     ==> _module.OwnedObject.isOwnedObject#requires(this) == true);

// override axiom for _module.Object.isOwnedObject in class _module.OwnedObject
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Object.isOwnedObject(this), $Is(this, Tclass._module.OwnedObject()) } 
      { _module.Object.isOwnedObject(this), _module.OwnedObject.isOwnedObject(this) } 
    _module.OwnedObject.isOwnedObject#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.isOwnedObject(this) == _module.OwnedObject.isOwnedObject(this));

procedure {:verboseName "OwnedObject.isOwnedObject (well-formedness)"} CheckWellformed$$_module.OwnedObject.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedObject.isOwnedObject (override check)"} OverrideCheck$$_module.OwnedObject.isOwnedObject(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.isOwnedObject (override check)"} OverrideCheck$$_module.OwnedObject.isOwnedObject(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1037"} true;
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1038"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.OwnedObject.baseFieldsInv
function _module.OwnedObject.baseFieldsInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.baseFieldsInv (revealed)
axiom {:id "id1039"} 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.baseFieldsInv#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.OwnedObject.owner))
           ==> _module.OwnedObject.baseUserFieldsInv#canCall($Heap, this))
         && _module.OwnedObject.baseFieldsInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.OwnedObject.owner))
             && _module.OwnedObject.baseUserFieldsInv($Heap, this)));
}

function _module.OwnedObject.baseFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.baseFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.baseFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.baseFieldsInv($h0, this)
       == _module.OwnedObject.baseFieldsInv($h1, this));

function _module.OwnedObject.baseFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.baseFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.baseFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.baseFieldsInv#requires($Heap, this) == true);

// override axiom for _module.Object.baseFieldsInv in class _module.OwnedObject
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.baseFieldsInv($Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.baseFieldsInv($Heap, this), _module.OwnedObject.baseFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.baseFieldsInv#canCall($Heap, this)
         || (4 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.baseFieldsInv($Heap, this)
         == _module.OwnedObject.baseFieldsInv($Heap, this));

procedure {:verboseName "OwnedObject.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.baseFieldsInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.OwnedObject.owner];
        assert {:id "id1040"} _module.Object.universe(this) != null;
        b$reqreads#1 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read($Heap, this, _module.OwnedObject.owner)))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && ($o == this || $o == _module.Object.universe(this))
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.baseUserFieldsInv#canCall($Heap, this);
        }

        assume {:id "id1041"} _module.OwnedObject.baseFieldsInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.OwnedObject.owner))
             && _module.OwnedObject.baseUserFieldsInv($Heap, this));
        assume Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.OwnedObject.owner))
           ==> _module.OwnedObject.baseUserFieldsInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.baseFieldsInv($Heap, this), TBool);
        assert {:id "id1042"} b$reqreads#0;
        assert {:id "id1043"} b$reqreads#1;
        assert {:id "id1044"} b$reqreads#2;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.baseFieldsInv (override check)"} OverrideCheck$$_module.OwnedObject.baseFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInv (override check)"} OverrideCheck$$_module.OwnedObject.baseFieldsInv(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1045"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))), 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    assert {:id "id1046"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this || $o == _module.Object.universe(this))
         ==> $o == this || $o == _module.Object.universe(this));
}



procedure {:verboseName "OwnedObject.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 5 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseFieldsInvMonotonicity, CheckWellFormed$$_module.OwnedObject.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1047"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume _module.OwnedObject.baseFieldsInv#canCall(old($Heap), this);
    assume {:id "id1048"} _module.OwnedObject.baseFieldsInv(old($Heap), this);
    assert {:id "id1049"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assert {:id "id1050"} _module.Object.universe(this) != null;
    assert {:id "id1051"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1052"} _module.Object.universe(this) != null;
    assume {:id "id1053"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1054"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume {:id "id1055"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.baseFieldsInv#canCall($Heap, this);
    assume {:id "id1056"} _module.OwnedObject.baseFieldsInv($Heap, this);
}



procedure {:verboseName "OwnedObject.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 5 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id1057"} _module.OwnedObject.baseFieldsInv(old($Heap), this)
       && Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
       && (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1058"} _module.OwnedObject.baseFieldsInv#canCall(old($Heap), this)
       ==> _module.OwnedObject.baseFieldsInv(old($Heap), this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          read(old($Heap), this, _module.OwnedObject.owner));
    assert {:id "id1059"} _module.OwnedObject.baseFieldsInv#canCall(old($Heap), this)
       ==> _module.OwnedObject.baseFieldsInv(old($Heap), this)
         || _module.OwnedObject.baseUserFieldsInv(old($Heap), this);
    assert {:id "id1060"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1061"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1062"} true;
    assert {:id "id1063"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1064"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1065"} _module.OwnedObject.baseFieldsInv($Heap, this);
    assert {:id "id1066"} _module.OwnedObject.baseFieldsInv#canCall($Heap, this)
       ==> _module.OwnedObject.baseFieldsInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read($Heap, this, _module.OwnedObject.owner));
    assert {:id "id1067"} _module.OwnedObject.baseFieldsInv#canCall($Heap, this)
       ==> _module.OwnedObject.baseFieldsInv($Heap, this)
         || _module.OwnedObject.baseUserFieldsInv($Heap, this);
}



procedure {:verboseName "OwnedObject.baseFieldsInvMonotonicity (call)"} Call$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  // user-defined preconditions
  requires {:id "id1068"} _module.OwnedObject.baseFieldsInv#canCall(previous$Heap, this)
     ==> _module.OwnedObject.baseFieldsInv(previous$Heap, this)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(previous$Heap, this, _module.OwnedObject.owner));
  requires {:id "id1069"} _module.OwnedObject.baseFieldsInv#canCall(previous$Heap, this)
     ==> _module.OwnedObject.baseFieldsInv(previous$Heap, this)
       || _module.OwnedObject.baseUserFieldsInv(previous$Heap, this);
  requires {:id "id1070"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1071"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.baseFieldsInv#canCall(current$Heap, this);
  free ensures {:id "id1072"} _module.OwnedObject.baseFieldsInv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.baseFieldsInv(current$Heap, this)
     && 
    Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      read(current$Heap, this, _module.OwnedObject.owner))
     && _module.OwnedObject.baseUserFieldsInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OwnedObject.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  free requires {:id "id1073"} _module.OwnedObject.baseFieldsInv#canCall(previous$Heap, this)
     && 
    _module.OwnedObject.baseFieldsInv(previous$Heap, this)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      read(previous$Heap, this, _module.OwnedObject.owner))
     && _module.OwnedObject.baseUserFieldsInv(previous$Heap, this);
  requires {:id "id1074"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1075"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.baseFieldsInv#canCall(current$Heap, this);
  ensures {:id "id1076"} _module.OwnedObject.baseFieldsInv#canCall(current$Heap, this)
     ==> _module.OwnedObject.baseFieldsInv(current$Heap, this)
       || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(current$Heap, this, _module.OwnedObject.owner));
  ensures {:id "id1077"} _module.OwnedObject.baseFieldsInv#canCall(current$Heap, this)
     ==> _module.OwnedObject.baseFieldsInv(current$Heap, this)
       || _module.OwnedObject.baseUserFieldsInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseFieldsInvMonotonicity (correctness)"} Impl$$_module.OwnedObject.baseFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: baseFieldsInvMonotonicity, Impl$$_module.OwnedObject.baseFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(328,34)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1078"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    call {:id "id1079"} Call$$_module.OwnedObject.baseUserFieldsInvMonotonicity(old($Heap), $Heap, this);
    // TrCallStmt: After ProcessCallStmt
}



// function declaration for _module.OwnedObject.unchangedNonvolatileFields
function _module.OwnedObject.unchangedNonvolatileFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.unchangedNonvolatileFields (revealed)
axiom {:id "id1080"} 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.unchangedNonvolatileFields#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           ==> _module.OwnedObject.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this))
         && _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this)
           == ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
             && _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)));
}

function _module.OwnedObject.unchangedNonvolatileFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.unchangedNonvolatileFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $h0, this)
       == _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $h1, this));

function _module.OwnedObject.unchangedNonvolatileFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.unchangedNonvolatileFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.unchangedNonvolatileFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.unchangedNonvolatileFields#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "OwnedObject.unchangedNonvolatileFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.unchangedNonvolatileFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.unchangedNonvolatileFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.unchangedNonvolatileFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id1081"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.OwnedObject.owner];
        if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
           == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1082"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id1083"} _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
           == ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
             && _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, this));
        assume $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
           ==> _module.OwnedObject.unchangedNonvolatileUserFields#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this), TBool);
        assert {:id "id1084"} b$reqreads#0;
        assert {:id "id1085"} b$reqreads#1;
        return;

        assume false;
    }
}



// function declaration for _module.OwnedObject.localInv
function _module.OwnedObject.localInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.localInv
axiom 8 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localInv($Heap, this) } 
    _module.OwnedObject.localInv#canCall($Heap, this)
         || (8 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> 
      _module.OwnedObject.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this));
// definition axiom for _module.OwnedObject.localInv (revealed)
axiom {:id "id1086"} 8 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv#canCall($Heap, this)
         || (8 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> _module.Object.objectGlobalBaseInv#canCall($Heap, this)
         && (_module.Object.objectGlobalBaseInv($Heap, this)
           ==> _module.OwnedObject.localUserInv#canCall($Heap, this))
         && _module.OwnedObject.localInv($Heap, this)
           == (_module.Object.objectGlobalBaseInv($Heap, this)
             && _module.OwnedObject.localUserInv($Heap, this)));
}

function _module.OwnedObject.localInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localInv($h0, this)
       == _module.OwnedObject.localInv($h1, this));

function _module.OwnedObject.localInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.localInv#requires($Heap, this) == true);

// override axiom for _module.Object.localInv in class _module.OwnedObject
axiom 8 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.localInv($Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv($Heap, this), _module.OwnedObject.localInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv#canCall($Heap, this)
         || (8 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.localInv($Heap, this)
         == _module.OwnedObject.localInv($Heap, this));

procedure {:verboseName "OwnedObject.localInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1087"} _module.OwnedObject.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id1088"} _module.OwnedObject.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || _module.Object.baseFieldsInv($Heap, this);
  ensures {:id "id1089"} _module.OwnedObject.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || Lit(true));
  ensures {:id "id1090"} _module.OwnedObject.localInv($Heap, this)
     ==> 
    _module.Object.objectGlobalBaseInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalBaseInv($Heap, this)
       || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#0))
               ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                 && o#0 != _module.Object.universe(this)
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1091"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.localInv#canCall($Heap, this);
            assume {:id "id1092"} _module.OwnedObject.localInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
            assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
            assume {:id "id1093"} _module.Object.objectGlobalBaseInv($Heap, this);
        }
        else
        {
            assume {:id "id1094"} _module.OwnedObject.localInv($Heap, this)
               ==> _module.Object.objectGlobalBaseInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this);
        if (_module.Object.objectGlobalBaseInv($Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localUserInv#canCall($Heap, this);
        }

        assume {:id "id1095"} _module.OwnedObject.localInv($Heap, this)
           == (_module.Object.objectGlobalBaseInv($Heap, this)
             && _module.OwnedObject.localUserInv($Heap, this));
        assume _module.Object.objectGlobalBaseInv#canCall($Heap, this)
           && (_module.Object.objectGlobalBaseInv($Heap, this)
             ==> _module.OwnedObject.localUserInv#canCall($Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.localInv($Heap, this), TBool);
        assert {:id "id1096"} b$reqreads#0;
        assert {:id "id1097"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.localInv (override check)"} OverrideCheck$$_module.OwnedObject.localInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv (override check)"} OverrideCheck$$_module.OwnedObject.localInv(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1098"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1099"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1100"} _module.OwnedObject.localInv($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this);
    assert {:id "id1101"} _module.OwnedObject.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1102"} _module.OwnedObject.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || _module.Object.baseFieldsInv($Heap, this);
    assert {:id "id1103"} _module.OwnedObject.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || Lit(true));
    assert {:id "id1104"} _module.OwnedObject.localInv($Heap, this)
       ==> 
      _module.Object.objectGlobalBaseInv#canCall($Heap, this)
       ==> _module.Object.objectGlobalBaseInv($Heap, this)
         || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
           ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
             || (forall o#1: ref :: 
              { _module.Object.triggerAxioms($Heap, o#1) } 
                { _module.Object.baseFieldsInv($Heap, o#1) } 
                { _module.Object.universe(o#1) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1)) } 
              $Is(o#1, Tclass._module.Object())
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#1))
                 ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                   && o#1 != _module.Object.universe(this)
                   && _module.Object.baseFieldsInv($Heap, o#1)
                   && _module.Object.triggerAxioms($Heap, o#1)));
}



// function declaration for _module.OwnedObject.inv
function _module.OwnedObject.inv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.inv
axiom 11 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv($Heap, this) } 
    _module.OwnedObject.inv#canCall($Heap, this)
         || (11 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> 
      _module.OwnedObject.inv($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this));
// definition axiom for _module.OwnedObject.inv (revealed)
axiom {:id "id1105"} 11 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv#canCall($Heap, this)
         || (11 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> _module.OwnedObject.localInv#canCall($Heap, this)
         && (_module.OwnedObject.localInv($Heap, this)
           ==> _module.OwnedObject.userInv#canCall($Heap, this))
         && _module.OwnedObject.inv($Heap, this)
           == (_module.OwnedObject.localInv($Heap, this)
             && _module.OwnedObject.userInv($Heap, this)));
}

function _module.OwnedObject.inv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.inv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.inv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.inv($h0, this) == _module.OwnedObject.inv($h1, this));

function _module.OwnedObject.inv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.inv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.inv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.inv#requires($Heap, this) == true);

// override axiom for _module.Object.inv in class _module.OwnedObject
axiom 11 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Object.inv($Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.inv($Heap, this), _module.OwnedObject.inv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv#canCall($Heap, this)
         || (11 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.inv($Heap, this) == _module.OwnedObject.inv($Heap, this));

procedure {:verboseName "OwnedObject.inv (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 11 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1106"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(this)));
  ensures {:id "id1107"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || _module.Object.baseFieldsInv($Heap, this));
  ensures {:id "id1108"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id1109"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
         ==> _module.Object.objectGlobalBaseInv($Heap, this)
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));
  ensures {:id "id1110"} _module.OwnedObject.inv($Heap, this)
     ==> 
    _module.OwnedObject.localInv#canCall($Heap, this)
     ==> _module.OwnedObject.localInv($Heap, this)
       || _module.OwnedObject.localUserInv($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1111"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.inv#canCall($Heap, this);
            assume {:id "id1112"} _module.OwnedObject.inv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assume _module.OwnedObject.localInv#canCall($Heap, this);
            assume {:id "id1113"} _module.OwnedObject.localInv($Heap, this);
        }
        else
        {
            assume {:id "id1114"} _module.OwnedObject.inv($Heap, this)
               ==> _module.OwnedObject.localInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedObject.localInv#canCall($Heap, this);
        if (_module.OwnedObject.localInv($Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.userInv#canCall($Heap, this);
        }

        assume {:id "id1115"} _module.OwnedObject.inv($Heap, this)
           == (_module.OwnedObject.localInv($Heap, this)
             && _module.OwnedObject.userInv($Heap, this));
        assume _module.OwnedObject.localInv#canCall($Heap, this)
           && (_module.OwnedObject.localInv($Heap, this)
             ==> _module.OwnedObject.userInv#canCall($Heap, this));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.inv($Heap, this), TBool);
        assert {:id "id1116"} b$reqreads#0;
        assert {:id "id1117"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.inv (override check)"} OverrideCheck$$_module.OwnedObject.inv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 11 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv (override check)"} OverrideCheck$$_module.OwnedObject.inv(this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1118"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1119"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1120"} _module.OwnedObject.inv($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this);
    assert {:id "id1121"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(this)));
    assert {:id "id1122"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || _module.Object.baseFieldsInv($Heap, this));
    assert {:id "id1123"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || Lit(true)));
    assert {:id "id1124"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || (_module.Object.objectGlobalBaseInv#canCall($Heap, this)
           ==> _module.Object.objectGlobalBaseInv($Heap, this)
             || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
               ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                 || (forall o#1: ref :: 
                  { _module.Object.triggerAxioms($Heap, o#1) } 
                    { _module.Object.baseFieldsInv($Heap, o#1) } 
                    { _module.Object.universe(o#1) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#1)) } 
                  $Is(o#1, Tclass._module.Object())
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#1))
                     ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                       && o#1 != _module.Object.universe(this)
                       && _module.Object.baseFieldsInv($Heap, o#1)
                       && _module.Object.triggerAxioms($Heap, o#1))));
    assert {:id "id1125"} _module.OwnedObject.inv($Heap, this)
       ==> 
      _module.OwnedObject.localInv#canCall($Heap, this)
       ==> _module.OwnedObject.localInv($Heap, this)
         || _module.OwnedObject.localUserInv($Heap, this);
}



// function declaration for _module.OwnedObject.localInv2
function _module.OwnedObject.localInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.localInv2 (revealed)
axiom {:id "id1126"} 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> (Lit(true)
           ==> _module.OwnedObject.localUserInv2#canCall($prevHeap, $Heap, this))
         && _module.OwnedObject.localInv2($prevHeap, $Heap, this)
           == (true && _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)));
}

function _module.OwnedObject.localInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localInv2($prevHeap, $h0, this)
       == _module.OwnedObject.localInv2($prevHeap, $h1, this));

function _module.OwnedObject.localInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.localInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.localInv2 in class _module.OwnedObject
axiom 2 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.localInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.localInv2($prevHeap, $Heap, this), _module.OwnedObject.localInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.localInv2($prevHeap, $Heap, this)
         == _module.OwnedObject.localInv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedObject.localInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1127"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localUserInv2#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id1128"} _module.OwnedObject.localInv2(old($Heap), $Heap, this)
           == (true && _module.OwnedObject.localUserInv2(old($Heap), $Heap, this));
        assume Lit(true) ==> _module.OwnedObject.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.localInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1129"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.localInv2 (override check)"} OverrideCheck$$_module.OwnedObject.localInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), current$Heap));
  free requires 2 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.localInv2 (override check)"} OverrideCheck$$_module.OwnedObject.localInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1130"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1131"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedObject.sequenceInv2
function _module.OwnedObject.sequenceInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedObject.sequenceInv2 (revealed)
axiom {:id "id1132"} 3 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (3 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> ($Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> ($Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> 
              Lit(true)
               ==> _module.OwnedObject.unchangedNonvolatileFields#canCall($prevHeap, $Heap, this))
             && (
              ($Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> true && _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this))
               ==> 
              $Is($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#0 := $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref; 
                _module.OwnedObject.volatileOwns#canCall(oldOwner#0))))
         && _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this)
           == (
            $Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
               <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             && ($Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> true && _module.OwnedObject.unchangedNonvolatileFields($prevHeap, $Heap, this))
             && ($Is($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#0 := $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref; 
                !_module.OwnedObject.volatileOwns(oldOwner#0)
                     && $Unbox(read($prevHeap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
                   ==> $Unbox(read($prevHeap, this, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int))));
}

function _module.OwnedObject.sequenceInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.sequenceInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.sequenceInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.sequenceInv2($prevHeap, $h0, this)
       == _module.OwnedObject.sequenceInv2($prevHeap, $h1, this));

function _module.OwnedObject.sequenceInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.sequenceInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.sequenceInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.sequenceInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.sequenceInv2 in class _module.OwnedObject
axiom 3 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.sequenceInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.sequenceInv2($prevHeap, $Heap, this), _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.sequenceInv2#canCall($prevHeap, $Heap, this)
         || (3 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.sequenceInv2($prevHeap, $Heap, this)
         == _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedObject.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.sequenceInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.sequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var oldOwner#Z#0: ref;
  var let#0#0#0: ref;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id1133"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.OwnedObject.nonvolatileVersion];
        if ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
           <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int)
        {
            assert {:id "id1134"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.OwnedObject.nonvolatileVersion];
            if ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int)
            {
                if (Lit(true))
                {
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
                    assert {:id "id1135"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                    b$reqreads#2 := (forall $o: ref, $f: Field :: 
                      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
                }
            }
        }

        if ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           && ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> true && _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)))
        {
            assert {:id "id1136"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            if ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject()))
            {
                havoc oldOwner#Z#0;
                assert {:id "id1137"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                newtype$check#0 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref;
                assert {:id "id1138"} $Is(newtype$check#0, Tclass._module.OwnedObject());
                newtype$check#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref;
                assume {:id "id1139"} let#0#0#0 == $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref;
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(let#0#0#0, Tclass._module.OwnedObject());
                assume {:id "id1140"} oldOwner#Z#0 == let#0#0#0;
                assert {:id "id1141"} oldOwner#Z#0 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(oldOwner#Z#0), Tclass._module.OwnedObject?(), $Heap);
                assume _module.OwnedObject.volatileOwns#canCall(oldOwner#Z#0);
                if (!_module.OwnedObject.volatileOwns(oldOwner#Z#0))
                {
                    assert {:id "id1142"} oldOwner#Z#0 != null;
                    assert {:id "id1143"} $IsAlloc(oldOwner#Z#0, Tclass._module.OwnedObject(), old($Heap));
                    assert {:id "id1144"} oldOwner#Z#0 != null;
                    b$reqreads#3 := $_ReadsFrame[oldOwner#Z#0, _module.OwnedObject.nonvolatileVersion];
                }

                if (!_module.OwnedObject.volatileOwns(oldOwner#Z#0)
                   && $Unbox(read(old($Heap), oldOwner#Z#0, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, oldOwner#Z#0, _module.OwnedObject.nonvolatileVersion)): int)
                {
                    assert {:id "id1145"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                    b$reqreads#4 := $_ReadsFrame[this, _module.OwnedObject.nonvolatileVersion];
                }
            }
        }

        assume {:id "id1146"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
           == (
            $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             && ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> true && _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this))
             && ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
                !_module.OwnedObject.volatileOwns(oldOwner#1)
                     && $Unbox(read(old($Heap), oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                   ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
        assume $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> 
              Lit(true)
               ==> _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this))
             && (
              ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               ==> true && _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this))
               ==> 
              $Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
                Tclass._module.OwnedObject())
               ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
                _module.OwnedObject.volatileOwns#canCall(oldOwner#1)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.sequenceInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1147"} b$reqreads#0;
        assert {:id "id1148"} b$reqreads#1;
        assert {:id "id1149"} b$reqreads#2;
        assert {:id "id1150"} b$reqreads#3;
        assert {:id "id1151"} b$reqreads#4;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.sequenceInv2 (override check)"} OverrideCheck$$_module.OwnedObject.sequenceInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), current$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.sequenceInv2 (override check)"} OverrideCheck$$_module.OwnedObject.sequenceInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1152"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1153"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedObject.inv2
function _module.OwnedObject.inv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.inv2
axiom 10 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv2($prevHeap, $Heap, this) } 
    _module.OwnedObject.inv2#canCall($prevHeap, $Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> 
      _module.OwnedObject.inv2($prevHeap, $Heap, this)
       ==> _module.OwnedObject.localInv2($prevHeap, $Heap, this)
         && _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this));
// definition axiom for _module.OwnedObject.inv2 (revealed)
axiom {:id "id1154"} 10 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv2#canCall($prevHeap, $Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, this)
         && (_module.OwnedObject.localInv2($prevHeap, $Heap, this)
           ==> _module.OwnedObject.sequenceInv2#canCall($prevHeap, $Heap, this)
             && (_module.OwnedObject.sequenceInv2($prevHeap, $Heap, this)
               ==> _module.OwnedObject.userInv2#canCall($prevHeap, $Heap, this)
                 && (_module.OwnedObject.userInv2($prevHeap, $Heap, this)
                   ==> 
                  $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
                     != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
                   ==> _module.Object.localInv#canCall($Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                     && (_module.Object.localInv($Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                       ==> _module.Object.localInv2#canCall($prevHeap, $Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                         && (_module.Object.localInv2($prevHeap, $Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                           ==> _module.Object.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                             && (_module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                               ==> (var currOwner#0 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                                $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), $prevHeap)
                                   ==> _module.Object.localInv2#canCall($prevHeap, $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))))))))
         && _module.OwnedObject.inv2($prevHeap, $Heap, this)
           == (
            _module.OwnedObject.localInv2($prevHeap, $Heap, this)
             && _module.OwnedObject.sequenceInv2($prevHeap, $Heap, this)
             && _module.OwnedObject.userInv2($prevHeap, $Heap, this)
             && ($Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref
                 != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
               ==> _module.Object.localInv($Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv2($prevHeap, $Heap, $Unbox(read($prevHeap, this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                 && (var currOwner#0 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                  $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), $prevHeap)
                     ==> _module.Object.localInv2($prevHeap, $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)))));
}

function _module.OwnedObject.inv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.inv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.inv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.inv2($prevHeap, $h0, this)
       == _module.OwnedObject.inv2($prevHeap, $h1, this));

function _module.OwnedObject.inv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.inv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.inv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.inv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.Object.inv2 in class _module.OwnedObject
axiom 10 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Object.inv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedObject()), $IsGoodHeap($Heap) } 
      { _module.Object.inv2($prevHeap, $Heap, this), _module.OwnedObject.inv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedObject.inv2#canCall($prevHeap, $Heap, this)
         || (10 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedObject()))
       ==> _module.Object.inv2($prevHeap, $Heap, this)
         == _module.OwnedObject.inv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedObject.inv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1155"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id1156"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
       || _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this);
  ensures {:id "id1157"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id1158"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id1159"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id1160"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id1161"} _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#0)
               && $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var currOwner#Z#0: ref;
  var let#0#0#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1162"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assert {:id "id1163"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1164"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1165"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1166"} _module.OwnedObject.localInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1167"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1168"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1169"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
               ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
                 && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        assert {:id "id1170"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this);
        if (_module.OwnedObject.localInv2(old($Heap), $Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1171"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#1 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
        }

        if (_module.OwnedObject.localInv2(old($Heap), $Heap, this)
           && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1172"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.userInv2#canCall(old($Heap), $Heap, this);
        }

        if (_module.OwnedObject.localInv2(old($Heap), $Heap, this)
           && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
           && _module.OwnedObject.userInv2(old($Heap), $Heap, this))
        {
            assert {:id "id1173"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            b$reqreads#3 := $_ReadsFrame[this, _module.OwnedObject.owner];
            if ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
            {
                assert {:id "id1174"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                assert {:id "id1175"} $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox(read(old($Heap), this, _module.OwnedObject.owner), 
                  Tclass._module.Object?(), 
                  $Heap);
                b$reqreads#4 := (forall $o: ref, $f: Field :: 
                  $o != null
                       && $Unbox(read($Heap, $o, alloc)): bool
                       && $Unbox(read($Heap, $o, alloc)): bool
                     ==> $_ReadsFrame[$o, $f]);
                assume _module.Object.localInv#canCall($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref);
                if (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref))
                {
                    assert {:id "id1176"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
                    assert {:id "id1177"} $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox(read(old($Heap), this, _module.OwnedObject.owner), 
                      Tclass._module.Object?(), 
                      $Heap);
                    assert {:id "id1178"} $IsAlloc($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Object(), 
                      old($Heap));
                    b$reqreads#5 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.localInv2#canCall(old($Heap), 
                      $Heap, 
                      $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref);
                }

                if (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                   && _module.Object.localInv2(old($Heap), 
                    $Heap, 
                    $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref))
                {
                    b$reqreads#6 := $_ReadsFrame[this, _module.OwnedObject.owner];
                    assert {:id "id1179"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox(read($Heap, this, _module.OwnedObject.owner), Tclass._module.Object?(), $Heap);
                    b$reqreads#7 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.Object.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
                }

                if (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                   && _module.Object.localInv2(old($Heap), 
                    $Heap, 
                    $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                   && _module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))
                {
                    havoc currOwner#Z#0;
                    b$reqreads#8 := $_ReadsFrame[this, _module.OwnedObject.owner];
                    assume {:id "id1180"} let#0#0#0 == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref;
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0#0#0, Tclass._module.Object());
                    assume {:id "id1181"} currOwner#Z#0 == let#0#0#0;
                    if ($IsAllocBox($Box(currOwner#Z#0), Tclass._module.Object(), old($Heap)))
                    {
                        b$reqreads#9 := $_ReadsFrame[this, _module.OwnedObject.owner];
                        assert {:id "id1182"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref != null;
                        // assume allocatedness for receiver argument to function
                        assume $IsAllocBox(read($Heap, this, _module.OwnedObject.owner), Tclass._module.Object?(), $Heap);
                        assert {:id "id1183"} $IsAlloc($Unbox(read($Heap, this, _module.OwnedObject.owner)): ref, 
                          Tclass._module.Object(), 
                          old($Heap));
                        b$reqreads#10 := (forall $o: ref, $f: Field :: 
                          $o != null
                               && $Unbox(read($Heap, $o, alloc)): bool
                               && $Unbox(read($Heap, $o, alloc)): bool
                             ==> $_ReadsFrame[$o, $f]);
                        assume _module.Object.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
                    }
                }
            }
        }

        assume {:id "id1184"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
           == (
            _module.OwnedObject.localInv2(old($Heap), $Heap, this)
             && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
             && _module.OwnedObject.userInv2(old($Heap), $Heap, this)
             && ($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
                 != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
               ==> _module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv2(old($Heap), 
                  $Heap, 
                  $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                 && _module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                 && (var currOwner#1 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                  $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), old($Heap))
                     ==> _module.Object.localInv2(old($Heap), $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))));
        assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
           && (_module.OwnedObject.localInv2(old($Heap), $Heap, this)
             ==> _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
               && (_module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
                 ==> _module.OwnedObject.userInv2#canCall(old($Heap), $Heap, this)
                   && (_module.OwnedObject.userInv2(old($Heap), $Heap, this)
                     ==> 
                    $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
                       != $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref
                     ==> _module.Object.localInv#canCall($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                       && (_module.Object.localInv($Heap, $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                         ==> _module.Object.localInv2#canCall(old($Heap), 
                            $Heap, 
                            $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                           && (_module.Object.localInv2(old($Heap), 
                              $Heap, 
                              $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref)
                             ==> _module.Object.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                               && (_module.Object.localInv($Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref)
                                 ==> (var currOwner#1 := $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref; 
                                  $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), old($Heap))
                                     ==> _module.Object.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref))))))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedObject.inv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1185"} b$reqreads#0;
        assert {:id "id1186"} b$reqreads#1;
        assert {:id "id1187"} b$reqreads#2;
        assert {:id "id1188"} b$reqreads#3;
        assert {:id "id1189"} b$reqreads#4;
        assert {:id "id1190"} b$reqreads#5;
        assert {:id "id1191"} b$reqreads#6;
        assert {:id "id1192"} b$reqreads#7;
        assert {:id "id1193"} b$reqreads#8;
        assert {:id "id1194"} b$reqreads#9;
        assert {:id "id1195"} b$reqreads#10;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedObject.inv2 (override check)"} OverrideCheck$$_module.OwnedObject.inv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), current$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.inv2 (override check)"} OverrideCheck$$_module.OwnedObject.inv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedObject_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1196"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedObject_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1197"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1198"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
         && _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id1199"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id1200"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.localInv2(old($Heap), $Heap, this)
         || _module.OwnedObject.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id1201"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
           <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
    assert {:id "id1202"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> Lit(true));
    assert {:id "id1203"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> 
          _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
           ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
             || $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
               == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
    assert {:id "id1204"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           ==> 
          _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
           ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
             || _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, this));
    assert {:id "id1205"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
         || ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
            Tclass._module.OwnedObject())
           ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
            !_module.OwnedObject.volatileOwns(oldOwner#1)
                 && $Unbox(read(old($Heap), oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
               ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
}



procedure {:verboseName "OwnedObject.CheckSequenceInv2 (well-formedness)"} CheckWellFormed$$_module.OwnedObject.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.CheckSequenceInv2 (well-formedness)"} CheckWellFormed$$_module.OwnedObject.CheckSequenceInv2(this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: CheckSequenceInv2, CheckWellFormed$$_module.OwnedObject.CheckSequenceInv2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1206"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1207"} _module.Object.universe(this) != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    assume $HeapSucc(old($Heap), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1208"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1209"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "OwnedObject.CheckSequenceInv2 (call)"} Call$$_module.OwnedObject.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  // user-defined preconditions
  requires {:id "id1210"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1211"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  requires {:id "id1212"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#0: ref :: 
                { _module.Object.triggerAxioms($Heap, o#0) } 
                  { _module.Object.baseFieldsInv($Heap, o#0) } 
                  { _module.Object.universe(o#0) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#0)) } 
                $Is(o#0, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#0))
                   ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                     && o#0 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#0)
                     && _module.Object.triggerAxioms($Heap, o#0))));
  requires {:id "id1213"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#1: ref :: 
            { _module.Object.inv($Heap, o#1) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#1)) } 
            $Is(o#1, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#1))
               ==> _module.Object.inv($Heap, o#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
  free ensures {:id "id1214"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     && 
    _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
     && 
    $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
       <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
     && ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
         == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       ==> true && _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this))
     && ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
        Tclass._module.OwnedObject())
       ==> (var oldOwner#0 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
        !_module.OwnedObject.volatileOwns(oldOwner#0)
             && $Unbox(read(old($Heap), oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
           ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == _module.Object.universe(this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "OwnedObject.CheckSequenceInv2 (correctness)"} Impl$$_module.OwnedObject.CheckSequenceInv2(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1215"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
  ensures {:id "id1216"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id1217"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id1218"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
           || $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref
             == $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id1219"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || ($Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(old($Heap), $Heap, this));
  ensures {:id "id1220"} _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this)
     ==> _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this)
       || ($Is($Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#1 := $Unbox(read(old($Heap), this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#1)
               && $Unbox(read(old($Heap), oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(old($Heap), this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == _module.Object.universe(this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box($o)));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.CheckSequenceInv2 (correctness)"} Impl$$_module.OwnedObject.CheckSequenceInv2(this: ref) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var o#4: ref;
  var u1#0: bool;
  var $Heap_at_0: Heap;
  var o#6: ref;
  var u2#0: bool;

    // AddMethodImpl: CheckSequenceInv2, Impl$$_module.OwnedObject.CheckSequenceInv2
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == _module.Object.universe(this)
           || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box($o)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(391,19)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1221"} _module.Object.universe(this) != null;
    assert {:id "id1222"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == _module.Object.universe(this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1223"} Call$$_module.Universe.Havoc(_module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(392,5)
    assert {:id "id1224"} {:subsumption 0} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1225"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this));
    if (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this)))
    {
        // Begin Comprehension WF check
        havoc o#4;
        if ($Is(o#4, Tclass._module.Object())
           && $IsAlloc(o#4, Tclass._module.Object(), $Heap))
        {
            assert {:id "id1226"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assert {:id "id1227"} {:subsumption 0} _module.Object.universe(this) != null;
            assert {:id "id1228"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
            if (Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#4)))
            {
                assert {:id "id1229"} {:subsumption 0} o#4 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#4), Tclass._module.Object?(), $Heap);
                assert {:id "id1230"} $IsAlloc(o#4, Tclass._module.Object(), old($Heap));
                assume _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#4);
            }
        }

        // End Comprehension WF check
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
       && (_module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
         ==> (forall o#5: ref :: 
          { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5)) } 
          $Is(o#5, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5))
             ==> _module.Object.sequenceInv2#canCall(old($Heap), $Heap, o#5)));
    assume {:id "id1231"} _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
       && (forall o#5: ref :: 
        { _module.Object.sequenceInv2(old($Heap), $Heap, o#5) } 
          { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#5)) } 
        $Is(o#5, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#5))
           ==> _module.Object.sequenceInv2(old($Heap), $Heap, o#5));
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(393,12)
    assume true;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1232"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
    assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
    u1#0 := _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this);
    $Heap_at_0 := $Heap;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(395,19)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1234"} _module.Object.universe(this) != null;
    assert {:id "id1235"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == _module.Object.universe(this)
             || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box($o)))
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1236"} Call$$_module.Universe.Havoc(_module.Object.universe(this));
    // TrCallStmt: After ProcessCallStmt

  after_0:
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(396,5)
    assert {:id "id1237"} {:subsumption 0} _module.Object.universe(this) != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(_module.Object.universe(this)), Tclass._module.Universe?(), $Heap);
    assert {:id "id1238"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), $Heap_at_0);
    assume _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_0, $Heap, _module.Object.universe(this));
    if (_module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this)))
    {
        // Begin Comprehension WF check
        havoc o#6;
        if ($Is(o#6, Tclass._module.Object())
           && $IsAlloc(o#6, Tclass._module.Object(), $Heap))
        {
            assert {:id "id1239"} $IsAlloc(this, Tclass._module.OwnedObject(), $Heap_at_0);
            assert {:id "id1240"} {:subsumption 0} _module.Object.universe(this) != null;
            assert {:id "id1241"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), $Heap_at_0);
            if (Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#6)))
            {
                assert {:id "id1242"} {:subsumption 0} o#6 != null;
                // assume allocatedness for receiver argument to function
                assume $IsAllocBox($Box(o#6), Tclass._module.Object?(), $Heap);
                assert {:id "id1243"} $IsAlloc(o#6, Tclass._module.Object(), $Heap_at_0);
                assume _module.Object.sequenceInv2#canCall($Heap_at_0, $Heap, o#6);
            }
        }

        // End Comprehension WF check
    }

    assume _module.Universe.baseLegalTransitionsSequence#canCall($Heap_at_0, $Heap, _module.Object.universe(this))
       && (_module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this))
         ==> (forall o#7: ref :: 
          { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7) } 
            { Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7)) } 
          $Is(o#7, Tclass._module.Object())
             ==> 
            Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7))
             ==> _module.Object.sequenceInv2#canCall($Heap_at_0, $Heap, o#7)));
    assume {:id "id1244"} _module.Universe.baseLegalTransitionsSequence($Heap_at_0, $Heap, _module.Object.universe(this))
       && (forall o#7: ref :: 
        { _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7) } 
          { Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
            $Box(o#7)) } 
        $Is(o#7, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap_at_0, _module.Object.universe(this), _module.Universe.content)): Set, 
              $Box(o#7))
           ==> _module.Object.sequenceInv2($Heap_at_0, $Heap, o#7));
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(397,12)
    assume true;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1245"} $IsAlloc(this, Tclass._module.OwnedObject(), $Heap_at_0);
    assume _module.OwnedObject.unchangedNonvolatileFields#canCall($Heap_at_0, $Heap, this);
    assume _module.OwnedObject.unchangedNonvolatileFields#canCall($Heap_at_0, $Heap, this);
    u2#0 := _module.OwnedObject.unchangedNonvolatileFields($Heap_at_0, $Heap, this);
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(399,5)
    if (u1#0)
    {
    }

    if (u1#0 && u2#0)
    {
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
        assert {:id "id1247"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
        assume _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
    }

    assume u1#0
       ==> 
      u2#0
       ==> _module.OwnedObject.unchangedNonvolatileFields#canCall(old($Heap), $Heap, this);
    assume {:id "id1248"} u1#0 && u2#0
       ==> _module.OwnedObject.unchangedNonvolatileFields(old($Heap), $Heap, this);
}



// function declaration for _module.OwnedObject.volatileOwns
function _module.OwnedObject.volatileOwns(this: ref) : bool;

function _module.OwnedObject.volatileOwns#canCall(this: ref) : bool;

function _module.OwnedObject.volatileOwns#requires(ref) : bool;

// #requires axiom for _module.OwnedObject.volatileOwns
axiom (forall this: ref :: 
  { _module.OwnedObject.volatileOwns#requires(this) } 
  this != null && $Is(this, Tclass._module.OwnedObject())
     ==> _module.OwnedObject.volatileOwns#requires(this) == true);

procedure {:verboseName "OwnedObject.volatileOwns (well-formedness)"} CheckWellformed$$_module.OwnedObject.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.OwnedObject.baseUserFieldsInv
function _module.OwnedObject.baseUserFieldsInv($heap: Heap, this: ref) : bool;

function _module.OwnedObject.baseUserFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.baseUserFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.baseUserFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.baseUserFieldsInv($h0, this)
       == _module.OwnedObject.baseUserFieldsInv($h1, this));

function _module.OwnedObject.baseUserFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.baseUserFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.baseUserFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.baseUserFieldsInv#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.baseUserFieldsInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.baseUserFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedObject.baseUserFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.OwnedObject.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.baseUserFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.OwnedObject.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseUserFieldsInvMonotonicity, CheckWellFormed$$_module.OwnedObject.baseUserFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1249"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume _module.OwnedObject.baseUserFieldsInv#canCall(old($Heap), this);
    assume {:id "id1250"} _module.OwnedObject.baseUserFieldsInv(old($Heap), this);
    assert {:id "id1251"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assert {:id "id1252"} _module.Object.universe(this) != null;
    assert {:id "id1253"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1254"} _module.Object.universe(this) != null;
    assume {:id "id1255"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1256"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
    assume {:id "id1257"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.baseUserFieldsInv#canCall($Heap, this);
    assume {:id "id1258"} _module.OwnedObject.baseUserFieldsInv($Heap, this);
}



procedure {:verboseName "OwnedObject.baseUserFieldsInvMonotonicity (call)"} Call$$_module.OwnedObject.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  // user-defined preconditions
  requires {:id "id1259"} _module.OwnedObject.baseUserFieldsInv(previous$Heap, this);
  requires {:id "id1260"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1261"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.baseUserFieldsInv#canCall(current$Heap, this);
  ensures {:id "id1262"} _module.OwnedObject.baseUserFieldsInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for _module.OwnedObject.unchangedNonvolatileUserFields
function _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.OwnedObject.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedObject())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.OwnedObject.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

procedure {:verboseName "OwnedObject.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.OwnedObject.localUserInv
function _module.OwnedObject.localUserInv($heap: Heap, this: ref) : bool;

function _module.OwnedObject.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localUserInv($h0, this)
       == _module.OwnedObject.localUserInv($h1, this));

function _module.OwnedObject.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.localUserInv#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.localUserInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module.OwnedObject.localUserInv2
function _module.OwnedObject.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool;

function _module.OwnedObject.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.localUserInv2($prevHeap, $h0, this)
       == _module.OwnedObject.localUserInv2($prevHeap, $h1, this));

function _module.OwnedObject.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.localUserInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "OwnedObject.localUserInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



// function declaration for _module.OwnedObject.userInv
function _module.OwnedObject.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.userInv
axiom 10 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this) } 
    _module.OwnedObject.userInv#canCall($Heap, this)
         || (10 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap))
       ==> 
      _module.OwnedObject.userInv($Heap, this)
       ==> _module.OwnedObject.localUserInv($Heap, this));
}

function _module.OwnedObject.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.userInv($h0, this) == _module.OwnedObject.userInv($h1, this));

function _module.OwnedObject.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedObject.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap)
     ==> _module.OwnedObject.userInv#requires($Heap, this) == true);

procedure {:verboseName "OwnedObject.userInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1263"} _module.OwnedObject.userInv($Heap, this)
     ==> _module.OwnedObject.localUserInv($Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.userInv (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1264"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.userInv#canCall($Heap, this);
            assume {:id "id1265"} _module.OwnedObject.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assume _module.OwnedObject.localUserInv#canCall($Heap, this);
            assume {:id "id1266"} _module.OwnedObject.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id1267"} _module.OwnedObject.userInv($Heap, this)
               ==> _module.OwnedObject.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module.OwnedObject.userInv2
function _module.OwnedObject.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedObject.userInv2
axiom 4 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this) } 
    _module.OwnedObject.userInv2#canCall($prevHeap, $Heap, this)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedObject())
           && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap))
       ==> 
      _module.OwnedObject.userInv2($prevHeap, $Heap, this)
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this));
}

function _module.OwnedObject.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedObject.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedObject.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedObject.userInv2($prevHeap, $h0, this)
       == _module.OwnedObject.userInv2($prevHeap, $h1, this));

function _module.OwnedObject.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedObject.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedObject.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedObject())
       && $IsAlloc(this, Tclass._module.OwnedObject(), $prevHeap)
     ==> _module.OwnedObject.userInv2#requires($prevHeap, $Heap, this) == true);

procedure {:verboseName "OwnedObject.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedObject())
         && $IsAlloc(this, Tclass._module.OwnedObject(), previous$Heap));
  free requires 4 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1268"} _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedObject.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedObject.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;


    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1269"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assert {:id "id1270"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedObject.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1271"} _module.OwnedObject.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
            assert {:id "id1272"} $IsAlloc(this, Tclass._module.OwnedObject(), old($Heap));
            assume _module.OwnedObject.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1273"} _module.OwnedObject.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1274"} _module.OwnedObject.userInv2(old($Heap), $Heap, this)
               ==> _module.OwnedObject.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// $Is axiom for non-null type _module.OwnedObject
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.OwnedObject()) } 
    { $Is(c#0, Tclass._module.OwnedObject?()) } 
  $Is(c#0, Tclass._module.OwnedObject())
     <==> $Is(c#0, Tclass._module.OwnedObject?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.OwnedObject
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.OwnedObject(), $h) } 
    { $IsAlloc(c#0, Tclass._module.OwnedObject?(), $h) } 
  $IsAlloc(c#0, Tclass._module.OwnedObject(), $h)
     <==> $IsAlloc(c#0, Tclass._module.OwnedObject?(), $h));

const unique class._module.OwnedU32?: ClassName;

function Tclass._module.OwnedU32?() : Ty
uses {
// Tclass._module.OwnedU32? Tag
axiom Tag(Tclass._module.OwnedU32?()) == Tagclass._module.OwnedU32?
   && TagFamily(Tclass._module.OwnedU32?()) == tytagFamily$OwnedU32;
axiom implements$_module.OwnedObject(Tclass._module.OwnedU32?());
}

const unique Tagclass._module.OwnedU32?: TyTag;

// Box/unbox axiom for Tclass._module.OwnedU32?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedU32?()) } 
  $IsBox(bx, Tclass._module.OwnedU32?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.OwnedU32?()));

// $Is axiom for class OwnedU32
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedU32?()) } 
  $Is($o, Tclass._module.OwnedU32?())
     <==> $o == null || dtype($o) == Tclass._module.OwnedU32?());

// $IsAlloc axiom for class OwnedU32
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedU32?(), $h) } 
  $IsAlloc($o, Tclass._module.OwnedU32?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.OwnedU32.value: Field
uses {
axiom FDim(_module.OwnedU32.value) == 0
   && FieldOfDecl(class._module.OwnedU32?, field$value) == _module.OwnedU32.value
   && !$IsGhostField(_module.OwnedU32.value);
}

// OwnedU32.value: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedU32.value)): int } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.OwnedU32?()
     ==> $Is($Unbox(read($h, $o, _module.OwnedU32.value)): int, TInt));

// OwnedU32.value: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.OwnedU32.value)): int } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.OwnedU32?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.OwnedU32.value)): int, TInt, $h));

// function declaration for _module.OwnedU32.volatileOwns
function _module.OwnedU32.volatileOwns(this: ref) : bool
uses {
// definition axiom for _module.OwnedU32.volatileOwns (revealed)
axiom {:id "id1275"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedU32.volatileOwns(this) } 
    _module.OwnedU32.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedU32.volatileOwns(this) == Lit(false));
// definition axiom for _module.OwnedU32.volatileOwns for all literals (revealed)
axiom {:id "id1276"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.OwnedU32.volatileOwns(Lit(this)) } 
    _module.OwnedU32.volatileOwns#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedU32.volatileOwns(Lit(this)) == Lit(false));
}

function _module.OwnedU32.volatileOwns#canCall(this: ref) : bool;

function _module.OwnedU32.volatileOwns#requires(ref) : bool;

// #requires axiom for _module.OwnedU32.volatileOwns
axiom (forall this: ref :: 
  { _module.OwnedU32.volatileOwns#requires(this) } 
  this != null && $Is(this, Tclass._module.OwnedU32())
     ==> _module.OwnedU32.volatileOwns#requires(this) == true);

// override axiom for _module.OwnedObject.volatileOwns in class _module.OwnedU32
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.volatileOwns(this), $Is(this, Tclass._module.OwnedU32()) } 
      { _module.OwnedObject.volatileOwns(this), _module.OwnedU32.volatileOwns(this) } 
    _module.OwnedU32.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.volatileOwns(this) == _module.OwnedU32.volatileOwns(this));

procedure {:verboseName "OwnedU32.volatileOwns (well-formedness)"} CheckWellformed$$_module.OwnedU32.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedU32.volatileOwns (override check)"} OverrideCheck$$_module.OwnedU32.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.volatileOwns (override check)"} OverrideCheck$$_module.OwnedU32.volatileOwns(this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1278"} true;
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1279"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.OwnedU32.baseUserFieldsInv
function _module.OwnedU32.baseUserFieldsInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedU32.baseUserFieldsInv (revealed)
axiom {:id "id1280"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedU32.baseUserFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.baseUserFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> _module.OwnedU32.baseUserFieldsInv($Heap, this) == Lit(true));
}

function _module.OwnedU32.baseUserFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.baseUserFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.baseUserFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedU32())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.baseUserFieldsInv($h0, this)
       == _module.OwnedU32.baseUserFieldsInv($h1, this));

function _module.OwnedU32.baseUserFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.baseUserFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedU32.baseUserFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap)
     ==> _module.OwnedU32.baseUserFieldsInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.baseUserFieldsInv in class _module.OwnedU32
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.baseUserFieldsInv($Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.baseUserFieldsInv($Heap, this), _module.OwnedU32.baseUserFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.baseUserFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.baseUserFieldsInv($Heap, this)
         == _module.OwnedU32.baseUserFieldsInv($Heap, this));

procedure {:verboseName "OwnedU32.baseUserFieldsInv (well-formedness)"} CheckWellformed$$_module.OwnedU32.baseUserFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedU32.baseUserFieldsInv (override check)"} OverrideCheck$$_module.OwnedU32.baseUserFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.baseUserFieldsInv (override check)"} OverrideCheck$$_module.OwnedU32.baseUserFieldsInv(this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1282"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))), 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    assert {:id "id1283"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this || $o == _module.Object.universe(this))
         ==> $o == this || $o == _module.Object.universe(this));
}



procedure {:verboseName "OwnedU32.baseUserFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.OwnedU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.baseUserFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.OwnedU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseUserFieldsInvMonotonicity, CheckWellFormed$$_module.OwnedU32.baseUserFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1284"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assume _module.OwnedU32.baseUserFieldsInv#canCall(old($Heap), this);
    assume {:id "id1285"} _module.OwnedU32.baseUserFieldsInv(old($Heap), this);
    assert {:id "id1286"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assert {:id "id1287"} _module.Object.universe(this) != null;
    assert {:id "id1288"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1289"} _module.Object.universe(this) != null;
    assume {:id "id1290"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1291"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assume {:id "id1292"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
    assume _module.OwnedU32.baseUserFieldsInv#canCall($Heap, this);
    assume {:id "id1293"} _module.OwnedU32.baseUserFieldsInv($Heap, this);
}



procedure {:verboseName "OwnedU32.baseUserFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.OwnedU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.baseUserFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.OwnedU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id1294"} _module.OwnedU32.baseUserFieldsInv(old($Heap), this)
       && Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
       && (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1295"} _module.OwnedU32.baseUserFieldsInv#canCall(old($Heap), this)
       ==> _module.OwnedU32.baseUserFieldsInv(old($Heap), this) || Lit(true);
    assert {:id "id1296"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1297"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1298"} true;
    assert {:id "id1299"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1300"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1301"} _module.OwnedU32.baseUserFieldsInv($Heap, this);
    assert {:id "id1302"} _module.OwnedU32.baseUserFieldsInv#canCall($Heap, this)
       ==> _module.OwnedU32.baseUserFieldsInv($Heap, this) || Lit(true);
}



procedure {:verboseName "OwnedU32.baseUserFieldsInvMonotonicity (call)"} Call$$_module.OwnedU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap));
  // user-defined preconditions
  requires {:id "id1303"} _module.OwnedU32.baseUserFieldsInv#canCall(previous$Heap, this)
     ==> _module.OwnedU32.baseUserFieldsInv(previous$Heap, this) || Lit(true);
  requires {:id "id1304"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1305"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedU32.baseUserFieldsInv#canCall(current$Heap, this);
  free ensures {:id "id1306"} _module.OwnedU32.baseUserFieldsInv#canCall(current$Heap, this)
     && 
    _module.OwnedU32.baseUserFieldsInv(current$Heap, this)
     && Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OwnedU32.baseUserFieldsInvMonotonicity (correctness)"} Impl$$_module.OwnedU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  free requires {:id "id1307"} _module.OwnedU32.baseUserFieldsInv#canCall(previous$Heap, this)
     && 
    _module.OwnedU32.baseUserFieldsInv(previous$Heap, this)
     && Lit(true);
  requires {:id "id1308"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1309"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedU32.baseUserFieldsInv#canCall(current$Heap, this);
  ensures {:id "id1310"} _module.OwnedU32.baseUserFieldsInv#canCall(current$Heap, this)
     ==> _module.OwnedU32.baseUserFieldsInv(current$Heap, this) || Lit(true);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.baseUserFieldsInvMonotonicity (correctness)"} Impl$$_module.OwnedU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: baseUserFieldsInvMonotonicity, Impl$$_module.OwnedU32.baseUserFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.OwnedU32.unchangedNonvolatileUserFields
function _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedU32.unchangedNonvolatileUserFields (revealed)
axiom {:id "id1311"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap))
       ==> _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == (true
           && $Unbox(read($prevHeap, this, _module.OwnedU32.value)): int
             == $Unbox(read($Heap, this, _module.OwnedU32.value)): int));
}

function _module.OwnedU32.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.OwnedU32())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.OwnedU32.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedU32.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap)
     ==> _module.OwnedU32.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.OwnedU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.OwnedU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "OwnedU32.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.OwnedU32.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.OwnedU32.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            assert {:id "id1312"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
            b$reqreads#0 := $_ReadsFrame[this, _module.OwnedU32.value];
        }

        assume {:id "id1313"} _module.OwnedU32.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
           == (true
             && $Unbox(read(old($Heap), this, _module.OwnedU32.value)): int
               == $Unbox(read($Heap, this, _module.OwnedU32.value)): int);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedU32.unchangedNonvolatileUserFields(old($Heap), $Heap, this), TBool);
        assert {:id "id1314"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedU32.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.OwnedU32.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.OwnedU32.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1315"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id1316"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.OwnedU32.localUserInv
function _module.OwnedU32.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedU32.localUserInv (revealed)
axiom {:id "id1317"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedU32.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> _module.OwnedU32.localUserInv($Heap, this) == Lit(true));
}

function _module.OwnedU32.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.localUserInv($h0, this)
       == _module.OwnedU32.localUserInv($h1, this));

function _module.OwnedU32.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedU32.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap)
     ==> _module.OwnedU32.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.OwnedU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.OwnedU32.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.OwnedU32.localUserInv($Heap, this));

procedure {:verboseName "OwnedU32.localUserInv (well-formedness)"} CheckWellformed$$_module.OwnedU32.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "OwnedU32.localUserInv (override check)"} OverrideCheck$$_module.OwnedU32.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.localUserInv (override check)"} OverrideCheck$$_module.OwnedU32.localUserInv(this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1319"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1320"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedU32.userInv
function _module.OwnedU32.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedU32.userInv
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedU32.userInv($Heap, this) } 
    _module.OwnedU32.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> 
      _module.OwnedU32.userInv($Heap, this)
       ==> _module.OwnedU32.localUserInv($Heap, this));
// definition axiom for _module.OwnedU32.userInv (revealed)
axiom {:id "id1321"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedU32.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap))
       ==> _module.OwnedU32.localUserInv#canCall($Heap, this)
         && _module.OwnedU32.userInv($Heap, this)
           == _module.OwnedU32.localUserInv($Heap, this));
}

function _module.OwnedU32.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.userInv($h0, this) == _module.OwnedU32.userInv($h1, this));

function _module.OwnedU32.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.OwnedU32.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap)
     ==> _module.OwnedU32.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.OwnedU32
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.OwnedU32.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.userInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.userInv($Heap, this)
         == _module.OwnedU32.userInv($Heap, this));

procedure {:verboseName "OwnedU32.userInv (well-formedness)"} CheckWellformed$$_module.OwnedU32.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1322"} _module.OwnedU32.userInv($Heap, this)
     ==> 
    _module.OwnedU32.localUserInv#canCall($Heap, this)
     ==> _module.OwnedU32.localUserInv($Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.userInv (well-formedness)"} CheckWellformed$$_module.OwnedU32.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
            assert {:id "id1323"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedU32.userInv#canCall($Heap, this);
            assume {:id "id1324"} _module.OwnedU32.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
            assume _module.OwnedU32.localUserInv#canCall($Heap, this);
            assume {:id "id1325"} _module.OwnedU32.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id1326"} _module.OwnedU32.userInv($Heap, this)
               ==> _module.OwnedU32.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedU32.localUserInv#canCall($Heap, this);
        assume {:id "id1327"} _module.OwnedU32.userInv($Heap, this)
           == _module.OwnedU32.localUserInv($Heap, this);
        assume _module.OwnedU32.localUserInv#canCall($Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedU32.userInv($Heap, this), TBool);
        assert {:id "id1328"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedU32.userInv (override check)"} OverrideCheck$$_module.OwnedU32.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.userInv (override check)"} OverrideCheck$$_module.OwnedU32.userInv(this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1329"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1330"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1331"} _module.OwnedU32.userInv($Heap, this)
       ==> _module.OwnedU32.localUserInv($Heap, this);
    assert {:id "id1332"} _module.OwnedU32.userInv($Heap, this)
       ==> 
      _module.OwnedU32.localUserInv#canCall($Heap, this)
       ==> _module.OwnedU32.localUserInv($Heap, this) || Lit(true);
}



// function declaration for _module.OwnedU32.localUserInv2
function _module.OwnedU32.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.OwnedU32.localUserInv2 (revealed)
axiom {:id "id1333"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedU32.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap))
       ==> _module.OwnedU32.localUserInv2($prevHeap, $Heap, this) == Lit(true));
}

function _module.OwnedU32.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.localUserInv2($prevHeap, $h0, this)
       == _module.OwnedU32.localUserInv2($prevHeap, $h1, this));

function _module.OwnedU32.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedU32.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap)
     ==> _module.OwnedU32.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.OwnedU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.OwnedU32.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.OwnedU32.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedU32.localUserInv2 (well-formedness)"} CheckWellformed$$_module.OwnedU32.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "OwnedU32.localUserInv2 (override check)"} OverrideCheck$$_module.OwnedU32.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.localUserInv2 (override check)"} OverrideCheck$$_module.OwnedU32.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1335"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1336"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.OwnedU32.userInv2
function _module.OwnedU32.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.OwnedU32.userInv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedU32.userInv2($prevHeap, $Heap, this) } 
    _module.OwnedU32.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap))
       ==> 
      _module.OwnedU32.userInv2($prevHeap, $Heap, this)
       ==> _module.OwnedU32.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.OwnedU32.userInv2 (revealed)
axiom {:id "id1337"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedU32.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.OwnedU32())
           && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap))
       ==> _module.OwnedU32.localUserInv2#canCall($prevHeap, $Heap, this)
         && _module.OwnedU32.userInv2($prevHeap, $Heap, this)
           == _module.OwnedU32.localUserInv2($prevHeap, $Heap, this));
}

function _module.OwnedU32.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.OwnedU32.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.OwnedU32.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.OwnedU32.userInv2($prevHeap, $h0, this)
       == _module.OwnedU32.userInv2($prevHeap, $h1, this));

function _module.OwnedU32.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.OwnedU32.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.OwnedU32.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $prevHeap)
     ==> _module.OwnedU32.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.OwnedU32
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.OwnedU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.OwnedU32.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.OwnedU32.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.OwnedU32()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.OwnedU32.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "OwnedU32.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedU32.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1338"} _module.OwnedU32.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.OwnedU32.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedU32.localUserInv2(previous$Heap, current$Heap, this) || Lit(true);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.userInv2 (well-formedness)"} CheckWellformed$$_module.OwnedU32.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
            assert {:id "id1339"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
            assert {:id "id1340"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.OwnedU32.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1341"} _module.OwnedU32.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
            assert {:id "id1342"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
            assume _module.OwnedU32.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1343"} _module.OwnedU32.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1344"} _module.OwnedU32.userInv2(old($Heap), $Heap, this)
               ==> _module.OwnedU32.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.OwnedU32?(), $Heap);
        assert {:id "id1345"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.OwnedU32.localUserInv2#canCall(old($Heap), $Heap, this);
        assume {:id "id1346"} _module.OwnedU32.userInv2(old($Heap), $Heap, this)
           == _module.OwnedU32.localUserInv2(old($Heap), $Heap, this);
        assume _module.OwnedU32.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.OwnedU32.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1347"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "OwnedU32.userInv2 (override check)"} OverrideCheck$$_module.OwnedU32.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.userInv2 (override check)"} OverrideCheck$$_module.OwnedU32.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var OwnedU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1348"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    OwnedU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1349"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1350"} _module.OwnedU32.userInv2(old($Heap), $Heap, this)
       ==> _module.OwnedU32.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id1351"} _module.OwnedU32.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.OwnedU32.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.OwnedU32.localUserInv2(old($Heap), $Heap, this) || Lit(true);
}



procedure {:verboseName "OwnedU32.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.OwnedU32.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id1352"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assert {:id "id1353"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1354"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1355"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1356"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "OwnedU32.sequenceAdmissibility (override check)"} OverrideCheck$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.sequenceAdmissibility (override check)"} OverrideCheck$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id1357"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id1358"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1359"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1360"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1361"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id1362"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1363"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id1364"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id1365"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id1366"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id1367"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id1368"} Set#Subset(running#0, running#0);
    assert {:id "id1369"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1370"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1371"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id1372"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "OwnedU32.sequenceAdmissibility (call)"} Call$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id1373"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1374"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1375"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1376"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id1377"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1378"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id1379"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id1380"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id1381"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id1382"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id1383"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && 
    $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       ==> true
         && _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this))
     && ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
        Tclass._module.OwnedObject())
       ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
        !_module.OwnedObject.volatileOwns(oldOwner#0)
             && $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
           ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OwnedU32.sequenceAdmissibility (correctness)"} Impl$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1384"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id1385"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id1386"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id1387"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id1388"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id1389"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#1)
               && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.sequenceAdmissibility (correctness)"} Impl$$_module.OwnedU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.OwnedU32.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "OwnedU32.admissibility (well-formedness)"} CheckWellFormed$$_module.OwnedU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.admissibility (well-formedness)"} CheckWellFormed$$_module.OwnedU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.OwnedU32.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1390"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assert {:id "id1391"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1392"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1393"} $IsAlloc(this, Tclass._module.OwnedU32(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1394"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id1395"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "OwnedU32.admissibility (override check)"} OverrideCheck$$_module.OwnedU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.admissibility (override check)"} OverrideCheck$$_module.OwnedU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id1396"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id1397"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1398"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1399"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1400"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id1401"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1402"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id1403"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id1404"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id1405"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id1406"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id1407"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1408"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id1409"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id1410"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id1411"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id1412"} running#0 != null ==> running#0 != null;
    assert {:id "id1413"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1414"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1415"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id1416"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id1417"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "OwnedU32.admissibility (call)"} Call$$_module.OwnedU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id1418"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1419"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1420"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1421"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#9: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#9) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#9) } 
                          { _module.Object.universe(o#9) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9)) } 
                        $Is(o#9, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#9))
                           ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                             && o#9 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#9)
                             && _module.Object.triggerAxioms(previous$Heap, o#9))))));
  requires {:id "id1422"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1423"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#10: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#10) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#10) } 
                          { _module.Object.universe(o#10) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#10)) } 
                        $Is(o#10, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#10))
                           ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                             && o#10 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#10)
                             && _module.Object.triggerAxioms(current$Heap, o#10))))));
  requires {:id "id1424"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id1425"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#11: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                    $Is(o#11, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                       ==> !$IsAllocBox($Box(o#11), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id1426"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#12: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#12
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12))));
  requires {:id "id1427"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#13: ref :: 
                { $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                     && $Is($Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#13, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#13, _module.OwnedObject.owner), 
                      Tclass._module.Object(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id1428"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1429"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#14: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#14) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#14) } 
                      { _module.Object.universe(o#14) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#14)) } 
                    $Is(o#14, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#14))
                       ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                         && o#14 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#14)
                         && _module.Object.triggerAxioms(previous$Heap, o#14)))));
  requires {:id "id1430"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.inv(previous$Heap, o#15) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.inv(previous$Heap, o#15))));
  requires {:id "id1431"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#16: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#16) } 
              { _module.Object.inv(current$Heap, o#16) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#16))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#16))));
  requires {:id "id1432"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#17: ref :: 
            { _module.Object.inv(current$Heap, o#17) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
               ==> _module.Object.inv(current$Heap, o#17)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id1433"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
         && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  free ensures {:id "id1434"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "OwnedU32.admissibility (correctness)"} Impl$$_module.OwnedU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1435"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id1436"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id1437"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this));
  ensures {:id "id1438"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id1439"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> Lit(true)));
  ensures {:id "id1440"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1441"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id1442"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              !_module.OwnedObject.volatileOwns(oldOwner#1)
                   && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id1443"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || _module.OwnedObject.userInv2(previous$Heap, current$Heap, this);
  ensures {:id "id1444"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1445"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1446"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1447"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id1448"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id1449"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id1450"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id1451"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#28: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#28) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#28) } 
                      { _module.Object.universe(o#28) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#28)) } 
                    $Is(o#28, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#28))
                       ==> _module.Object.universe(o#28) == _module.Object.universe(this)
                         && o#28 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#28)
                         && _module.Object.triggerAxioms(current$Heap, o#28)))));
  ensures {:id "id1452"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.localUserInv(current$Heap, this));
  ensures {:id "id1453"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32.admissibility (correctness)"} Impl$$_module.OwnedU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.OwnedU32.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "OwnedU32._ctor (well-formedness)"} CheckWellFormed$$_module.OwnedU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    value#0: int)
   returns (this: ref);
  free requires 19 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32._ctor (well-formedness)"} CheckWellFormed$$_module.OwnedU32.__ctor(universe#0: ref, running#0: ref, value#0: int) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.OwnedU32.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    assert {:id "id1454"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id1455"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id1456"} universe#0 != null;
    assume {:id "id1457"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.OwnedU32())
       && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1458"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1459"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1460"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1461"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id1462"} _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id1463"} _module.Object.universe(this) == universe#0;
    assume {:id "id1464"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1465"} $Unbox(read($Heap, this, _module.OwnedU32.value)): int == value#0;
    assert {:id "id1466"} universe#0 != null;
    assert {:id "id1467"} universe#0 != null;
    assert {:id "id1468"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id1469"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "OwnedU32._ctor (call)"} Call$$_module.OwnedU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    value#0: int)
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.OwnedU32())
         && $IsAlloc(this, Tclass._module.OwnedU32(), $Heap));
  // user-defined preconditions
  requires {:id "id1470"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id1471"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id1472"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id1473"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  free ensures {:id "id1474"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1475"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && _module.Universe.globalInv(old($Heap), universe#0)
     && (forall o#11: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#11) } 
        { _module.Object.inv($Heap, o#11) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11))
         ==> ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv($Heap, o#11))
           && ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv2(old($Heap), $Heap, o#11)))
     && (forall o#12: ref :: 
      { _module.Object.inv($Heap, o#12) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
      $Is(o#12, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
           && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12))
         ==> _module.Object.inv($Heap, o#12));
  free ensures true;
  ensures {:id "id1476"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1477"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id1478"} $Unbox(read($Heap, this, _module.OwnedU32.value)): int == value#0;
  free ensures true;
  ensures {:id "id1479"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "OwnedU32._ctor (correctness)"} Impl$$_module.OwnedU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    value#0: int)
   returns (this: ref, $_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1480"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#14: ref :: 
      { _module.Object.inv($Heap, o#14) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
      $Is(o#14, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
         ==> _module.Object.inv($Heap, o#14));
  requires {:id "id1481"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  ensures {:id "id1482"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id1483"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id1484"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.triggerAxioms($Heap, o#15) } 
                  { _module.Object.baseFieldsInv($Heap, o#15) } 
                  { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                     && o#15 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#15)
                     && _module.Object.triggerAxioms($Heap, o#15))));
  ensures {:id "id1485"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#16: ref :: 
            { _module.Object.inv($Heap, o#16) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> _module.Object.inv($Heap, o#16)));
  ensures {:id "id1486"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true))));
  ensures {:id "id1487"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
                   || (forall o#17: ref :: 
                    { _module.Object.triggerAxioms(old($Heap), o#17) } 
                      { _module.Object.baseFieldsInv(old($Heap), o#17) } 
                      { _module.Object.universe(o#17) } 
                      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
                    $Is(o#17, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
                       ==> _module.Object.universe(o#17) == universe#0
                         && o#17 != universe#0
                         && _module.Object.baseFieldsInv(old($Heap), o#17)
                         && _module.Object.triggerAxioms(old($Heap), o#17)))));
  ensures {:id "id1488"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true))));
  ensures {:id "id1489"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0)
                   || (forall o#18: ref :: 
                    { _module.Object.triggerAxioms($Heap, o#18) } 
                      { _module.Object.baseFieldsInv($Heap, o#18) } 
                      { _module.Object.universe(o#18) } 
                      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
                    $Is(o#18, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
                       ==> _module.Object.universe(o#18) == universe#0
                         && o#18 != universe#0
                         && _module.Object.baseFieldsInv($Heap, o#18)
                         && _module.Object.triggerAxioms($Heap, o#18)))));
  ensures {:id "id1490"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
                $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)));
  ensures {:id "id1491"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (forall o#19: ref :: 
                { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                $Is(o#19, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19))
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19))
                   ==> !$IsAllocBox($Box(o#19), Tclass._module.Object(), old($Heap)))));
  ensures {:id "id1492"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#20) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
            $Is(o#20, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#20 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#20)));
  ensures {:id "id1493"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21))
                 && $Is($Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#21, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#21, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  ensures {:id "id1494"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id1495"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#22: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#22) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#22) } 
                  { _module.Object.universe(o#22) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22)) } 
                $Is(o#22, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22))
                   ==> _module.Object.universe(o#22) == universe#0
                     && o#22 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#22)
                     && _module.Object.triggerAxioms(old($Heap), o#22))));
  ensures {:id "id1496"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (forall o#23: ref :: 
            { _module.Object.inv(old($Heap), o#23) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
            $Is(o#23, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23))
               ==> _module.Object.inv(old($Heap), o#23)));
  ensures {:id "id1497"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#24: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#24) } 
          { _module.Object.inv($Heap, o#24) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24)) } 
        $Is(o#24, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24))
           ==> ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv($Heap, o#24))
             && ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv2(old($Heap), $Heap, o#24)));
  ensures {:id "id1498"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#25: ref :: 
        { _module.Object.inv($Heap, o#25) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
        $Is(o#25, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25))
             && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25))
           ==> _module.Object.inv($Heap, o#25));
  free ensures true;
  ensures {:id "id1499"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1500"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id1501"} $Unbox(read($Heap, this, _module.OwnedU32.value)): int == value#0;
  free ensures true;
  ensures {:id "id1502"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OwnedU32._ctor (correctness)"} Impl$$_module.OwnedU32.__ctor(universe#0: ref, running#0: ref, value#0: int)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.value: int;
  var defass#this.owner: bool;
  var defass#this.universe: bool;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.OwnedU32.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == universe#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(461,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(462,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(463,16)
    assume true;
    assume true;
    this.owner := running#0;
    defass#this.owner := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(464,16)
    assume true;
    assume true;
    this.value := value#0;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(461,3)
    assert {:id "id1506"} defass#this.owner;
    assert {:id "id1507"} defass#this.universe;
    assume this != null && $Is(this, Tclass._module.OwnedU32?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.OwnedU32.value)): int == this.value;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(461,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(466,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1508"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1509"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(467,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1510"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1511"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1512"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1513"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.OwnedU32
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.OwnedU32()) } 
    { $Is(c#0, Tclass._module.OwnedU32?()) } 
  $Is(c#0, Tclass._module.OwnedU32())
     <==> $Is(c#0, Tclass._module.OwnedU32?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.OwnedU32
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.OwnedU32(), $h) } 
    { $IsAlloc(c#0, Tclass._module.OwnedU32?(), $h) } 
  $IsAlloc(c#0, Tclass._module.OwnedU32(), $h)
     <==> $IsAlloc(c#0, Tclass._module.OwnedU32?(), $h));

const unique class._module.Mutex?: ClassName;

function Tclass._module.Mutex?() : Ty
uses {
// Tclass._module.Mutex? Tag
axiom Tag(Tclass._module.Mutex?()) == Tagclass._module.Mutex?
   && TagFamily(Tclass._module.Mutex?()) == tytagFamily$Mutex;
axiom implements$_module.OwnedObject(Tclass._module.Mutex?());
}

const unique Tagclass._module.Mutex?: TyTag;

// Box/unbox axiom for Tclass._module.Mutex?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Mutex?()) } 
  $IsBox(bx, Tclass._module.Mutex?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Mutex?()));

// $Is axiom for class Mutex
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Mutex?()) } 
  $Is($o, Tclass._module.Mutex?())
     <==> $o == null || dtype($o) == Tclass._module.Mutex?());

// $IsAlloc axiom for class Mutex
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Mutex?(), $h) } 
  $IsAlloc($o, Tclass._module.Mutex?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.Mutex.data: Field
uses {
axiom FDim(_module.Mutex.data) == 0
   && FieldOfDecl(class._module.Mutex?, field$data) == _module.Mutex.data
   && !$IsGhostField(_module.Mutex.data);
}

// Mutex.data: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.data)): ref } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Mutex?()
     ==> $Is($Unbox(read($h, $o, _module.Mutex.data)): ref, Tclass._module.OwnedU32()));

// Mutex.data: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.data)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Mutex?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Mutex.data)): ref, Tclass._module.OwnedU32(), $h));

const _module.Mutex.locked: Field
uses {
axiom FDim(_module.Mutex.locked) == 0
   && FieldOfDecl(class._module.Mutex?, field$locked) == _module.Mutex.locked
   && !$IsGhostField(_module.Mutex.locked);
}

// Mutex.locked: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.locked)): bool } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Mutex?()
     ==> $Is($Unbox(read($h, $o, _module.Mutex.locked)): bool, TBool));

// Mutex.locked: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.locked)): bool } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Mutex?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Mutex.locked)): bool, TBool, $h));

const _module.Mutex.guards: Field
uses {
axiom FDim(_module.Mutex.guards) == 0
   && FieldOfDecl(class._module.Mutex?, field$guards) == _module.Mutex.guards
   && $IsGhostField(_module.Mutex.guards);
}

// Mutex.guards: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.guards)): Set } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Mutex?()
     ==> $Is($Unbox(read($h, $o, _module.Mutex.guards)): Set, 
      TSet(Tclass._module.MutexGuardU32())));

// Mutex.guards: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.Mutex.guards)): Set } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.Mutex?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.Mutex.guards)): Set, 
      TSet(Tclass._module.MutexGuardU32()), 
      $h));

// function declaration for _module.Mutex.volatileOwns
function _module.Mutex.volatileOwns(this: ref) : bool
uses {
// definition axiom for _module.Mutex.volatileOwns (revealed)
axiom {:id "id1514"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.Mutex.volatileOwns(this) } 
    _module.Mutex.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.Mutex.volatileOwns(this) == Lit(true));
// definition axiom for _module.Mutex.volatileOwns for all literals (revealed)
axiom {:id "id1515"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.Mutex.volatileOwns(Lit(this)) } 
    _module.Mutex.volatileOwns#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.Mutex.volatileOwns(Lit(this)) == Lit(true));
}

function _module.Mutex.volatileOwns#canCall(this: ref) : bool;

function _module.Mutex.volatileOwns#requires(ref) : bool;

// #requires axiom for _module.Mutex.volatileOwns
axiom (forall this: ref :: 
  { _module.Mutex.volatileOwns#requires(this) } 
  this != null && $Is(this, Tclass._module.Mutex())
     ==> _module.Mutex.volatileOwns#requires(this) == true);

// override axiom for _module.OwnedObject.volatileOwns in class _module.Mutex
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.volatileOwns(this), $Is(this, Tclass._module.Mutex()) } 
      { _module.OwnedObject.volatileOwns(this), _module.Mutex.volatileOwns(this) } 
    _module.Mutex.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.volatileOwns(this) == _module.Mutex.volatileOwns(this));

procedure {:verboseName "Mutex.volatileOwns (well-formedness)"} CheckWellformed$$_module.Mutex.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Mutex.volatileOwns (override check)"} OverrideCheck$$_module.Mutex.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.volatileOwns (override check)"} OverrideCheck$$_module.Mutex.volatileOwns(this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1517"} true;
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1518"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.Mutex.baseUserFieldsInv
function _module.Mutex.baseUserFieldsInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Mutex.baseUserFieldsInv (revealed)
axiom {:id "id1519"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Mutex.baseUserFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.baseUserFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> _module.Mutex.baseUserFieldsInv($Heap, this)
         == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.Mutex.data))
           && Set#Subset($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
            $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
}

function _module.Mutex.baseUserFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.baseUserFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.baseUserFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Mutex())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.baseUserFieldsInv($h0, this)
       == _module.Mutex.baseUserFieldsInv($h1, this));

function _module.Mutex.baseUserFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Mutex.baseUserFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Mutex.baseUserFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $Heap)
     ==> _module.Mutex.baseUserFieldsInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.baseUserFieldsInv in class _module.Mutex
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.baseUserFieldsInv($Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.baseUserFieldsInv($Heap, this), _module.Mutex.baseUserFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.baseUserFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.baseUserFieldsInv($Heap, this)
         == _module.Mutex.baseUserFieldsInv($Heap, this));

procedure {:verboseName "Mutex.baseUserFieldsInv (well-formedness)"} CheckWellformed$$_module.Mutex.baseUserFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.baseUserFieldsInv (well-formedness)"} CheckWellformed$$_module.Mutex.baseUserFieldsInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.Mutex.data];
        assert {:id "id1520"} _module.Object.universe(this) != null;
        b$reqreads#1 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read($Heap, this, _module.Mutex.data)))
        {
            b$reqreads#2 := $_ReadsFrame[this, _module.Mutex.guards];
            assert {:id "id1521"} _module.Object.universe(this) != null;
            b$reqreads#3 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        }

        assume {:id "id1522"} _module.Mutex.baseUserFieldsInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.Mutex.data))
             && Set#Subset($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
              $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.baseUserFieldsInv($Heap, this), TBool);
        assert {:id "id1523"} b$reqreads#0;
        assert {:id "id1524"} b$reqreads#1;
        assert {:id "id1525"} b$reqreads#2;
        assert {:id "id1526"} b$reqreads#3;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.baseUserFieldsInv (override check)"} OverrideCheck$$_module.Mutex.baseUserFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.baseUserFieldsInv (override check)"} OverrideCheck$$_module.Mutex.baseUserFieldsInv(this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1527"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))), 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    assert {:id "id1528"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this || $o == _module.Object.universe(this))
         ==> $o == this || $o == _module.Object.universe(this));
}



procedure {:verboseName "Mutex.baseUserFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Mutex.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.baseUserFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.Mutex.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseUserFieldsInvMonotonicity, CheckWellFormed$$_module.Mutex.baseUserFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1529"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assume _module.Mutex.baseUserFieldsInv#canCall(old($Heap), this);
    assume {:id "id1530"} _module.Mutex.baseUserFieldsInv(old($Heap), this);
    assert {:id "id1531"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assert {:id "id1532"} _module.Object.universe(this) != null;
    assert {:id "id1533"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1534"} _module.Object.universe(this) != null;
    assume {:id "id1535"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1536"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assume {:id "id1537"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
    assume _module.Mutex.baseUserFieldsInv#canCall($Heap, this);
    assume {:id "id1538"} _module.Mutex.baseUserFieldsInv($Heap, this);
}



procedure {:verboseName "Mutex.baseUserFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.Mutex.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.baseUserFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.Mutex.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id1539"} _module.Mutex.baseUserFieldsInv(old($Heap), this)
       && Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
       && (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1540"} _module.Mutex.baseUserFieldsInv#canCall(old($Heap), this)
       ==> _module.Mutex.baseUserFieldsInv(old($Heap), this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          read(old($Heap), this, _module.Mutex.data));
    assert {:id "id1541"} _module.Mutex.baseUserFieldsInv#canCall(old($Heap), this)
       ==> _module.Mutex.baseUserFieldsInv(old($Heap), this)
         || Set#Subset($Unbox(read(old($Heap), this, _module.Mutex.guards)): Set, 
          $Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1542"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1543"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1544"} true;
    assert {:id "id1545"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1546"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1547"} _module.Mutex.baseUserFieldsInv($Heap, this);
    assert {:id "id1548"} _module.Mutex.baseUserFieldsInv#canCall($Heap, this)
       ==> _module.Mutex.baseUserFieldsInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read($Heap, this, _module.Mutex.data));
    assert {:id "id1549"} _module.Mutex.baseUserFieldsInv#canCall($Heap, this)
       ==> _module.Mutex.baseUserFieldsInv($Heap, this)
         || Set#Subset($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
          $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
}



procedure {:verboseName "Mutex.baseUserFieldsInvMonotonicity (call)"} Call$$_module.Mutex.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap));
  // user-defined preconditions
  requires {:id "id1550"} _module.Mutex.baseUserFieldsInv#canCall(previous$Heap, this)
     ==> _module.Mutex.baseUserFieldsInv(previous$Heap, this)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(previous$Heap, this, _module.Mutex.data));
  requires {:id "id1551"} _module.Mutex.baseUserFieldsInv#canCall(previous$Heap, this)
     ==> _module.Mutex.baseUserFieldsInv(previous$Heap, this)
       || Set#Subset($Unbox(read(previous$Heap, this, _module.Mutex.guards)): Set, 
        $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1552"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1553"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Mutex.baseUserFieldsInv#canCall(current$Heap, this);
  free ensures {:id "id1554"} _module.Mutex.baseUserFieldsInv#canCall(current$Heap, this)
     && 
    _module.Mutex.baseUserFieldsInv(current$Heap, this)
     && 
    Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      read(current$Heap, this, _module.Mutex.data))
     && Set#Subset($Unbox(read(current$Heap, this, _module.Mutex.guards)): Set, 
      $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Mutex.baseUserFieldsInvMonotonicity (correctness)"} Impl$$_module.Mutex.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  free requires {:id "id1555"} _module.Mutex.baseUserFieldsInv#canCall(previous$Heap, this)
     && 
    _module.Mutex.baseUserFieldsInv(previous$Heap, this)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      read(previous$Heap, this, _module.Mutex.data))
     && Set#Subset($Unbox(read(previous$Heap, this, _module.Mutex.guards)): Set, 
      $Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1556"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1557"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Mutex.baseUserFieldsInv#canCall(current$Heap, this);
  ensures {:id "id1558"} _module.Mutex.baseUserFieldsInv#canCall(current$Heap, this)
     ==> _module.Mutex.baseUserFieldsInv(current$Heap, this)
       || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(current$Heap, this, _module.Mutex.data));
  ensures {:id "id1559"} _module.Mutex.baseUserFieldsInv#canCall(current$Heap, this)
     ==> _module.Mutex.baseUserFieldsInv(current$Heap, this)
       || Set#Subset($Unbox(read(current$Heap, this, _module.Mutex.guards)): Set, 
        $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.baseUserFieldsInvMonotonicity (correctness)"} Impl$$_module.Mutex.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: baseUserFieldsInvMonotonicity, Impl$$_module.Mutex.baseUserFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.Mutex.unchangedNonvolatileUserFields
function _module.Mutex.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Mutex.unchangedNonvolatileUserFields (revealed)
axiom {:id "id1560"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap))
       ==> _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == Lit(true));
}

function _module.Mutex.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.Mutex())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.Mutex.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Mutex.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Mutex.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap)
     ==> _module.Mutex.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.Mutex
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.Mutex.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "Mutex.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.Mutex.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



procedure {:verboseName "Mutex.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.Mutex.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.Mutex.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1562"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id1563"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.Mutex.localUserInv
function _module.Mutex.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Mutex.localUserInv (revealed)
axiom {:id "id1564"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Mutex.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.localUserInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> _module.Mutex.localUserInv($Heap, this)
         == (($Unbox(read($Heap, this, _module.Mutex.locked)): bool
             ==> $Is($Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref, 
                Tclass._module.MutexGuardU32())
               && $Unbox(read($Heap, 
                    $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                        _module.OwnedObject.owner)): ref, 
                    _module.MutexGuardU32.mutex)): ref
                 == this
               && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
                Set#UnionOne(Set#Empty(): Set, 
                  read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner))))
           && (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
             ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref
                 == this
               && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set))));
}

function _module.Mutex.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.localUserInv($h0, this) == _module.Mutex.localUserInv($h1, this));

function _module.Mutex.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Mutex.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Mutex.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $Heap)
     ==> _module.Mutex.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.Mutex
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.Mutex.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.localUserInv#canCall($Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.Mutex.localUserInv($Heap, this));

procedure {:verboseName "Mutex.localUserInv (well-formedness)"} CheckWellformed$$_module.Mutex.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.localUserInv (well-formedness)"} CheckWellformed$$_module.Mutex.localUserInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var newtype$check#0: ref;
  var newtype$check#1: ref;
  var newtype$check#2: ref;
  var newtype$check#3: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.Mutex.locked];
        if ($Unbox(read($Heap, this, _module.Mutex.locked)): bool)
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.Mutex.data];
            assert {:id "id1565"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
            b$reqreads#2 := $_ReadsFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.owner];
            if ($Is($Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref, 
              Tclass._module.MutexGuardU32()))
            {
                b$reqreads#3 := $_ReadsFrame[this, _module.Mutex.data];
                assert {:id "id1566"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
                b$reqreads#4 := $_ReadsFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.owner];
                newtype$check#0 := $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref;
                assert {:id "id1567"} $Is(newtype$check#0, Tclass._module.MutexGuardU32());
                newtype$check#1 := $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref;
                assert {:id "id1568"} $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref
                   != null;
                b$reqreads#5 := $_ReadsFrame[$Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref, _module.MutexGuardU32.mutex];
            }

            if ($Is($Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref, 
                Tclass._module.MutexGuardU32())
               && $Unbox(read($Heap, 
                    $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                        _module.OwnedObject.owner)): ref, 
                    _module.MutexGuardU32.mutex)): ref
                 == this)
            {
                b$reqreads#6 := $_ReadsFrame[this, _module.Mutex.guards];
                b$reqreads#7 := $_ReadsFrame[this, _module.Mutex.data];
                assert {:id "id1569"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
                b$reqreads#8 := $_ReadsFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.owner];
                newtype$check#2 := $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref;
                assert {:id "id1570"} $Is(newtype$check#2, Tclass._module.MutexGuardU32());
                newtype$check#3 := $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref;
            }
        }

        if ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> $Is($Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref, 
              Tclass._module.MutexGuardU32())
             && $Unbox(read($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref, 
                  _module.MutexGuardU32.mutex)): ref
               == this
             && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
              Set#UnionOne(Set#Empty(): Set, 
                read($Heap, 
                  $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner))))
        {
            b$reqreads#9 := $_ReadsFrame[this, _module.Mutex.locked];
            if (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool)
            {
                b$reqreads#10 := $_ReadsFrame[this, _module.Mutex.data];
                assert {:id "id1571"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
                b$reqreads#11 := $_ReadsFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.owner];
                if ($Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref
                   == this)
                {
                    b$reqreads#12 := $_ReadsFrame[this, _module.Mutex.guards];
                }
            }
        }

        assume {:id "id1572"} _module.Mutex.localUserInv($Heap, this)
           == (($Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> $Is($Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref, 
                  Tclass._module.MutexGuardU32())
                 && $Unbox(read($Heap, 
                      $Unbox(read($Heap, 
                          $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                          _module.OwnedObject.owner)): ref, 
                      _module.MutexGuardU32.mutex)): ref
                   == this
                 && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
                  Set#UnionOne(Set#Empty(): Set, 
                    read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner))))
             && (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                      _module.OwnedObject.owner)): ref
                   == this
                 && Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set)));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.localUserInv($Heap, this), TBool);
        assert {:id "id1573"} b$reqreads#0;
        assert {:id "id1574"} b$reqreads#1;
        assert {:id "id1575"} b$reqreads#2;
        assert {:id "id1576"} b$reqreads#3;
        assert {:id "id1577"} b$reqreads#4;
        assert {:id "id1578"} b$reqreads#5;
        assert {:id "id1579"} b$reqreads#6;
        assert {:id "id1580"} b$reqreads#7;
        assert {:id "id1581"} b$reqreads#8;
        assert {:id "id1582"} b$reqreads#9;
        assert {:id "id1583"} b$reqreads#10;
        assert {:id "id1584"} b$reqreads#11;
        assert {:id "id1585"} b$reqreads#12;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.localUserInv (override check)"} OverrideCheck$$_module.Mutex.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.localUserInv (override check)"} OverrideCheck$$_module.Mutex.localUserInv(this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1586"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1587"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Mutex.userInv
function _module.Mutex.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Mutex.userInv
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Mutex.userInv($Heap, this) } 
    _module.Mutex.userInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> 
      _module.Mutex.userInv($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this));
// definition axiom for _module.Mutex.userInv (revealed)
axiom {:id "id1588"} 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.Mutex.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.userInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $Heap))
       ==> _module.Mutex.localUserInv#canCall($Heap, this)
         && (_module.Mutex.localUserInv($Heap, this)
           ==> (forall g#0: ref :: 
            { _module.OwnedObject.localInv($Heap, g#0) } 
              { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0)) } 
            $Is(g#0, Tclass._module.MutexGuardU32())
               ==> 
              Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0))
               ==> _module.OwnedObject.localInv#canCall($Heap, g#0)))
         && _module.Mutex.userInv($Heap, this)
           == (_module.Mutex.localUserInv($Heap, this)
             && (forall g#0: ref :: 
              { _module.OwnedObject.localInv($Heap, g#0) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0)) } 
              $Is(g#0, Tclass._module.MutexGuardU32())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0))
                 ==> _module.OwnedObject.localInv($Heap, g#0))));
}

function _module.Mutex.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.userInv($h0, this) == _module.Mutex.userInv($h1, this));

function _module.Mutex.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.Mutex.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.Mutex.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $Heap)
     ==> _module.Mutex.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.Mutex
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.Mutex.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.userInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.userInv($Heap, this) == _module.Mutex.userInv($Heap, this));

procedure {:verboseName "Mutex.userInv (well-formedness)"} CheckWellformed$$_module.Mutex.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1589"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> $Is($Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
              _module.OwnedObject.owner)): ref, 
          Tclass._module.MutexGuardU32()));
  ensures {:id "id1590"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> $Unbox(read($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref, 
              _module.MutexGuardU32.mutex)): ref
           == this);
  ensures {:id "id1591"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
          Set#UnionOne(Set#Empty(): Set, 
            read($Heap, 
              $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
              _module.OwnedObject.owner))));
  ensures {:id "id1592"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
              _module.OwnedObject.owner)): ref
           == this);
  ensures {:id "id1593"} _module.Mutex.userInv($Heap, this)
     ==> 
    _module.Mutex.localUserInv#canCall($Heap, this)
     ==> _module.Mutex.localUserInv($Heap, this)
       || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
         ==> Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.userInv (well-formedness)"} CheckWellformed$$_module.Mutex.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var g#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assert {:id "id1594"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Mutex.userInv#canCall($Heap, this);
            assume {:id "id1595"} _module.Mutex.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assume _module.Mutex.localUserInv#canCall($Heap, this);
            assume {:id "id1596"} _module.Mutex.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id1597"} _module.Mutex.userInv($Heap, this) ==> _module.Mutex.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.Mutex.localUserInv#canCall($Heap, this);
        if (_module.Mutex.localUserInv($Heap, this))
        {
            // Begin Comprehension WF check
            havoc g#1;
            if ($Is(g#1, Tclass._module.MutexGuardU32())
               && $IsAlloc(g#1, Tclass._module.MutexGuardU32(), $Heap))
            {
                b$reqreads#1 := $_ReadsFrame[this, _module.Mutex.guards];
                if (Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#1)))
                {
                    assert {:id "id1598"} g#1 != null;
                    // assume allocatedness for receiver argument to function
                    assume $IsAllocBox($Box(g#1), Tclass._module.OwnedObject?(), $Heap);
                    b$reqreads#2 := (forall $o: ref, $f: Field :: 
                      $o != null
                           && $Unbox(read($Heap, $o, alloc)): bool
                           && $Unbox(read($Heap, $o, alloc)): bool
                         ==> $_ReadsFrame[$o, $f]);
                    assume _module.OwnedObject.localInv#canCall($Heap, g#1);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id1599"} _module.Mutex.userInv($Heap, this)
           == (_module.Mutex.localUserInv($Heap, this)
             && (forall g#2: ref :: 
              { _module.OwnedObject.localInv($Heap, g#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#2)) } 
              $Is(g#2, Tclass._module.MutexGuardU32())
                   && Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#2))
                 ==> _module.OwnedObject.localInv($Heap, g#2)));
        assume _module.Mutex.localUserInv#canCall($Heap, this)
           && (_module.Mutex.localUserInv($Heap, this)
             ==> (forall g#2: ref :: 
              { _module.OwnedObject.localInv($Heap, g#2) } 
                { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#2)) } 
              $Is(g#2, Tclass._module.MutexGuardU32())
                 ==> 
                Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#2))
                 ==> _module.OwnedObject.localInv#canCall($Heap, g#2)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.userInv($Heap, this), TBool);
        assert {:id "id1600"} b$reqreads#0;
        assert {:id "id1601"} b$reqreads#1;
        assert {:id "id1602"} b$reqreads#2;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.userInv (override check)"} OverrideCheck$$_module.Mutex.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.userInv (override check)"} OverrideCheck$$_module.Mutex.userInv(this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1603"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1604"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1605"} _module.Mutex.userInv($Heap, this) ==> _module.Mutex.localUserInv($Heap, this);
    assert {:id "id1606"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> $Is($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref, 
            Tclass._module.MutexGuardU32()));
    assert {:id "id1607"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref, 
                _module.MutexGuardU32.mutex)): ref
             == this);
    assert {:id "id1608"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
            Set#UnionOne(Set#Empty(): Set, 
              read($Heap, 
                $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                _module.OwnedObject.owner))));
    assert {:id "id1609"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref
             == this);
    assert {:id "id1610"} _module.Mutex.userInv($Heap, this)
       ==> 
      _module.Mutex.localUserInv#canCall($Heap, this)
       ==> _module.Mutex.localUserInv($Heap, this)
         || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
           ==> Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set));
}



// function declaration for _module.Mutex.localUserInv2
function _module.Mutex.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.Mutex.localUserInv2 (revealed)
axiom {:id "id1611"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Mutex.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap))
       ==> _module.Mutex.localUserInv2($prevHeap, $Heap, this)
         == (true
           && $Unbox(read($prevHeap, this, _module.Mutex.data)): ref
             == $Unbox(read($Heap, this, _module.Mutex.data)): ref));
}

function _module.Mutex.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.localUserInv2($prevHeap, $h0, this)
       == _module.Mutex.localUserInv2($prevHeap, $h1, this));

function _module.Mutex.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Mutex.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Mutex.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap)
     ==> _module.Mutex.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.Mutex
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.Mutex.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.Mutex.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "Mutex.localUserInv2 (well-formedness)"} CheckWellformed$$_module.Mutex.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.localUserInv2 (well-formedness)"} CheckWellformed$$_module.Mutex.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            assert {:id "id1612"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
            b$reqreads#0 := $_ReadsFrame[this, _module.Mutex.data];
        }

        assume {:id "id1613"} _module.Mutex.localUserInv2(old($Heap), $Heap, this)
           == (true
             && $Unbox(read(old($Heap), this, _module.Mutex.data)): ref
               == $Unbox(read($Heap, this, _module.Mutex.data)): ref);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.localUserInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1614"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.localUserInv2 (override check)"} OverrideCheck$$_module.Mutex.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.localUserInv2 (override check)"} OverrideCheck$$_module.Mutex.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1615"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1616"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.Mutex.userInv2
function _module.Mutex.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.Mutex.userInv2
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Mutex.userInv2($prevHeap, $Heap, this) } 
    _module.Mutex.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap))
       ==> 
      _module.Mutex.userInv2($prevHeap, $Heap, this)
       ==> _module.Mutex.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.Mutex.userInv2 (revealed)
axiom {:id "id1617"} 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.Mutex.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.Mutex())
           && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap))
       ==> (Lit(true) ==> _module.Mutex.localUserInv2#canCall($prevHeap, $Heap, this))
         && _module.Mutex.userInv2($prevHeap, $Heap, this)
           == (true && _module.Mutex.localUserInv2($prevHeap, $Heap, this)));
}

function _module.Mutex.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.Mutex.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Mutex.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Mutex.userInv2($prevHeap, $h0, this)
       == _module.Mutex.userInv2($prevHeap, $h1, this));

function _module.Mutex.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.Mutex.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.Mutex.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $prevHeap)
     ==> _module.Mutex.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.Mutex
axiom 1 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.Mutex()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.Mutex.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.Mutex.userInv2#canCall($prevHeap, $Heap, this)
         || (1 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.Mutex()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.Mutex.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "Mutex.userInv2 (well-formedness)"} CheckWellformed$$_module.Mutex.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1618"} _module.Mutex.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Mutex.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Mutex.localUserInv2(previous$Heap, current$Heap, this) || Lit(true);
  ensures {:id "id1619"} _module.Mutex.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.Mutex.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.Mutex.localUserInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.Mutex.data)): ref
         == $Unbox(read(current$Heap, this, _module.Mutex.data)): ref;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.userInv2 (well-formedness)"} CheckWellformed$$_module.Mutex.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assert {:id "id1620"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
            assert {:id "id1621"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.Mutex.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1622"} _module.Mutex.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assert {:id "id1623"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
            assume _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1624"} _module.Mutex.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1625"} _module.Mutex.userInv2(old($Heap), $Heap, this)
               ==> _module.Mutex.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
            assert {:id "id1626"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
            b$reqreads#0 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this);
        }

        assume {:id "id1627"} _module.Mutex.userInv2(old($Heap), $Heap, this)
           == (true && _module.Mutex.localUserInv2(old($Heap), $Heap, this));
        assume Lit(true) ==> _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this);
        // CheckWellformedWithResult: any expression
        assume $Is(_module.Mutex.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1628"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "Mutex.userInv2 (override check)"} OverrideCheck$$_module.Mutex.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), current$Heap));
  free requires 1 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.userInv2 (override check)"} OverrideCheck$$_module.Mutex.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var Mutex_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1629"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    Mutex_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1630"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1631"} _module.Mutex.userInv2(old($Heap), $Heap, this)
       ==> _module.Mutex.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id1632"} _module.Mutex.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Mutex.localUserInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id1633"} _module.Mutex.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.Mutex.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.Mutex.localUserInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.Mutex.data)): ref
           == $Unbox(read($Heap, this, _module.Mutex.data)): ref;
}



procedure {:verboseName "Mutex.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.Mutex.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id1634"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assert {:id "id1635"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1636"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1637"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1638"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Mutex.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.sequenceAdmissibility (override check)"} OverrideCheck$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id1639"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id1640"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1641"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1642"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1643"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id1644"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1645"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id1646"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id1647"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id1648"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id1649"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id1650"} Set#Subset(running#0, running#0);
    assert {:id "id1651"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1652"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1653"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id1654"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "Mutex.sequenceAdmissibility (call)"} Call$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id1655"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1656"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1657"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1658"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id1659"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1660"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id1661"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id1662"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id1663"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id1664"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id1665"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && 
    $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       ==> true
         && _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this))
     && ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
        Tclass._module.OwnedObject())
       ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
        !_module.OwnedObject.volatileOwns(oldOwner#0)
             && $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
           ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Mutex.sequenceAdmissibility (correctness)"} Impl$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1666"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id1667"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id1668"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id1669"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id1670"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id1671"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#1)
               && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.sequenceAdmissibility (correctness)"} Impl$$_module.Mutex.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.Mutex.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "Mutex.admissibility (well-formedness)"} CheckWellFormed$$_module.Mutex.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.admissibility (well-formedness)"} CheckWellFormed$$_module.Mutex.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.Mutex.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1672"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assert {:id "id1673"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1674"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1675"} $IsAlloc(this, Tclass._module.Mutex(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1676"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id1677"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "Mutex.admissibility (override check)"} OverrideCheck$$_module.Mutex.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.admissibility (override check)"} OverrideCheck$$_module.Mutex.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id1678"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id1679"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1680"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1681"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1682"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id1683"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1684"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id1685"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id1686"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id1687"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id1688"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id1689"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1690"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id1691"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id1692"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id1693"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id1694"} running#0 != null ==> running#0 != null;
    assert {:id "id1695"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1696"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1697"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id1698"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id1699"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "Mutex.admissibility (call)"} Call$$_module.Mutex.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id1700"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1701"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1702"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1703"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#9: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#9) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#9) } 
                          { _module.Object.universe(o#9) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9)) } 
                        $Is(o#9, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#9))
                           ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                             && o#9 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#9)
                             && _module.Object.triggerAxioms(previous$Heap, o#9))))));
  requires {:id "id1704"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id1705"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#10: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#10) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#10) } 
                          { _module.Object.universe(o#10) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#10)) } 
                        $Is(o#10, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#10))
                           ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                             && o#10 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#10)
                             && _module.Object.triggerAxioms(current$Heap, o#10))))));
  requires {:id "id1706"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id1707"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#11: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                    $Is(o#11, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                       ==> !$IsAllocBox($Box(o#11), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id1708"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#12: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#12
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12))));
  requires {:id "id1709"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#13: ref :: 
                { $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                     && $Is($Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#13, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#13, _module.OwnedObject.owner), 
                      Tclass._module.Object(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id1710"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1711"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#14: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#14) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#14) } 
                      { _module.Object.universe(o#14) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#14)) } 
                    $Is(o#14, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#14))
                       ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                         && o#14 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#14)
                         && _module.Object.triggerAxioms(previous$Heap, o#14)))));
  requires {:id "id1712"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.inv(previous$Heap, o#15) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.inv(previous$Heap, o#15))));
  requires {:id "id1713"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#16: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#16) } 
              { _module.Object.inv(current$Heap, o#16) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#16))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#16))));
  requires {:id "id1714"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#17: ref :: 
            { _module.Object.inv(current$Heap, o#17) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
               ==> _module.Object.inv(current$Heap, o#17)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id1715"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
         && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  free ensures {:id "id1716"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "Mutex.admissibility (correctness)"} Impl$$_module.Mutex.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1717"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id1718"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id1719"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this));
  ensures {:id "id1720"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id1721"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> Lit(true)));
  ensures {:id "id1722"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1723"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id1724"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              !_module.OwnedObject.volatileOwns(oldOwner#1)
                   && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id1725"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || _module.OwnedObject.userInv2(previous$Heap, current$Heap, this);
  ensures {:id "id1726"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1727"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1728"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id1729"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id1730"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id1731"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id1732"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id1733"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#28: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#28) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#28) } 
                      { _module.Object.universe(o#28) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#28)) } 
                    $Is(o#28, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#28))
                       ==> _module.Object.universe(o#28) == _module.Object.universe(this)
                         && o#28 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#28)
                         && _module.Object.triggerAxioms(current$Heap, o#28)))));
  ensures {:id "id1734"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.localUserInv(current$Heap, this));
  ensures {:id "id1735"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex.admissibility (correctness)"} Impl$$_module.Mutex.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.Mutex.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(510,5)
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Mutex?(), $Heap);
    assume _module.Mutex.userInv#canCall($Heap, this);
    assume _module.Mutex.userInv#canCall($Heap, this);
    assert {:id "id1736"} {:subsumption 0} _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> $Is($Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref, 
                Tclass._module.MutexGuardU32())));
    assert {:id "id1737"} {:subsumption 0} _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, 
                        $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                        _module.OwnedObject.owner)): ref, 
                    _module.MutexGuardU32.mutex)): ref
                 == this));
    assert {:id "id1738"} {:subsumption 0} _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || ($Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, 
                Set#UnionOne(Set#Empty(): Set, 
                  read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)))));
    assert {:id "id1739"} {:subsumption 0} _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
                    _module.OwnedObject.owner)): ref
                 == this));
    assert {:id "id1740"} {:subsumption 0} _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (_module.Mutex.localUserInv#canCall($Heap, this)
           ==> _module.Mutex.localUserInv($Heap, this)
             || (!$Unbox(read($Heap, this, _module.Mutex.locked)): bool
               ==> Set#Equal($Unbox(read($Heap, this, _module.Mutex.guards)): Set, Set#Empty(): Set)));
    assert {:id "id1741"} {:subsumption 0} _module.Mutex.userInv#canCall($Heap, this)
       ==> _module.Mutex.userInv($Heap, this)
         || (forall g#0: ref :: 
          { _module.OwnedObject.localInv($Heap, g#0) } 
            { Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0)) } 
          $Is(g#0, Tclass._module.MutexGuardU32())
               && Set#IsMember($Unbox(read($Heap, this, _module.Mutex.guards)): Set, $Box(g#0))
             ==> _module.OwnedObject.localInv($Heap, g#0));
    assume {:id "id1742"} _module.Mutex.userInv($Heap, this);
}



procedure {:verboseName "Mutex._ctor (well-formedness)"} CheckWellFormed$$_module.Mutex.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    data#0: ref
       where $Is(data#0, Tclass._module.OwnedU32())
         && $IsAlloc(data#0, Tclass._module.OwnedU32(), $Heap))
   returns (this: ref);
  free requires 19 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex._ctor (well-formedness)"} CheckWellFormed$$_module.Mutex.__ctor(universe#0: ref, running#0: ref, data#0: ref) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.Mutex.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0 || $o == data#0);
    assert {:id "id1743"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id1744"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id1745"} universe#0 != null;
    assume {:id "id1746"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
    assert {:id "id1747"} universe#0 != null;
    assume {:id "id1748"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(data#0));
    assert {:id "id1749"} data#0 != null;
    assume {:id "id1750"} $Unbox(read($Heap, data#0, _module.OwnedObject.owner)): ref == running#0;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0 || $o == data#0);
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.Mutex())
       && $IsAlloc(this, Tclass._module.Mutex(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id1751"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id1752"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1753"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1754"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id1755"} _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id1756"} _module.Object.universe(this) == universe#0;
    assume {:id "id1757"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id1758"} $Unbox(read($Heap, this, _module.Mutex.data)): ref == data#0;
    assume {:id "id1759"} !$Unbox(read($Heap, this, _module.Mutex.locked)): bool;
    assert {:id "id1760"} universe#0 != null;
    assert {:id "id1761"} universe#0 != null;
    assert {:id "id1762"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id1763"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "Mutex._ctor (call)"} Call$$_module.Mutex.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    data#0: ref
       where $Is(data#0, Tclass._module.OwnedU32())
         && $IsAlloc(data#0, Tclass._module.OwnedU32(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Mutex())
         && $IsAlloc(this, Tclass._module.Mutex(), $Heap));
  // user-defined preconditions
  requires {:id "id1764"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id1765"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id1766"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id1767"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  requires {:id "id1768"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(data#0));
  requires {:id "id1769"} $Unbox(read($Heap, data#0, _module.OwnedObject.owner)): ref == running#0;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  free ensures {:id "id1770"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id1771"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && _module.Universe.globalInv(old($Heap), universe#0)
     && (forall o#11: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#11) } 
        { _module.Object.inv($Heap, o#11) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11))
         ==> ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv($Heap, o#11))
           && ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv2(old($Heap), $Heap, o#11)))
     && (forall o#12: ref :: 
      { _module.Object.inv($Heap, o#12) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
      $Is(o#12, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
           && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12))
         ==> _module.Object.inv($Heap, o#12));
  free ensures true;
  ensures {:id "id1772"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1773"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id1774"} $Unbox(read($Heap, this, _module.Mutex.data)): ref == data#0;
  ensures {:id "id1775"} !$Unbox(read($Heap, this, _module.Mutex.locked)): bool;
  free ensures true;
  ensures {:id "id1776"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0 || $o == data#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Mutex._ctor (correctness)"} Impl$$_module.Mutex.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    data#0: ref
       where $Is(data#0, Tclass._module.OwnedU32())
         && $IsAlloc(data#0, Tclass._module.OwnedU32(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1777"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#14: ref :: 
      { _module.Object.inv($Heap, o#14) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
      $Is(o#14, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
         ==> _module.Object.inv($Heap, o#14));
  requires {:id "id1778"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  requires {:id "id1779"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(data#0));
  requires {:id "id1780"} $Unbox(read($Heap, data#0, _module.OwnedObject.owner)): ref == running#0;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  ensures {:id "id1781"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id1782"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id1783"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.triggerAxioms($Heap, o#15) } 
                  { _module.Object.baseFieldsInv($Heap, o#15) } 
                  { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                     && o#15 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#15)
                     && _module.Object.triggerAxioms($Heap, o#15))));
  ensures {:id "id1784"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#16: ref :: 
            { _module.Object.inv($Heap, o#16) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> _module.Object.inv($Heap, o#16)));
  ensures {:id "id1785"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true))));
  ensures {:id "id1786"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
                   || (forall o#17: ref :: 
                    { _module.Object.triggerAxioms(old($Heap), o#17) } 
                      { _module.Object.baseFieldsInv(old($Heap), o#17) } 
                      { _module.Object.universe(o#17) } 
                      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
                    $Is(o#17, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
                       ==> _module.Object.universe(o#17) == universe#0
                         && o#17 != universe#0
                         && _module.Object.baseFieldsInv(old($Heap), o#17)
                         && _module.Object.triggerAxioms(old($Heap), o#17)))));
  ensures {:id "id1787"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true))));
  ensures {:id "id1788"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0)
                   || (forall o#18: ref :: 
                    { _module.Object.triggerAxioms($Heap, o#18) } 
                      { _module.Object.baseFieldsInv($Heap, o#18) } 
                      { _module.Object.universe(o#18) } 
                      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
                    $Is(o#18, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
                       ==> _module.Object.universe(o#18) == universe#0
                         && o#18 != universe#0
                         && _module.Object.baseFieldsInv($Heap, o#18)
                         && _module.Object.triggerAxioms($Heap, o#18)))));
  ensures {:id "id1789"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
                $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)));
  ensures {:id "id1790"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (forall o#19: ref :: 
                { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                $Is(o#19, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19))
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19))
                   ==> !$IsAllocBox($Box(o#19), Tclass._module.Object(), old($Heap)))));
  ensures {:id "id1791"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#20) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
            $Is(o#20, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#20 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#20)));
  ensures {:id "id1792"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21))
                 && $Is($Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#21, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#21, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  ensures {:id "id1793"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id1794"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#22: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#22) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#22) } 
                  { _module.Object.universe(o#22) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22)) } 
                $Is(o#22, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22))
                   ==> _module.Object.universe(o#22) == universe#0
                     && o#22 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#22)
                     && _module.Object.triggerAxioms(old($Heap), o#22))));
  ensures {:id "id1795"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (forall o#23: ref :: 
            { _module.Object.inv(old($Heap), o#23) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
            $Is(o#23, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23))
               ==> _module.Object.inv(old($Heap), o#23)));
  ensures {:id "id1796"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#24: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#24) } 
          { _module.Object.inv($Heap, o#24) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24)) } 
        $Is(o#24, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24))
           ==> ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv($Heap, o#24))
             && ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv2(old($Heap), $Heap, o#24)));
  ensures {:id "id1797"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#25: ref :: 
        { _module.Object.inv($Heap, o#25) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
        $Is(o#25, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25))
             && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25))
           ==> _module.Object.inv($Heap, o#25));
  free ensures true;
  ensures {:id "id1798"} _module.Object.universe(this) == universe#0;
  ensures {:id "id1799"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id1800"} $Unbox(read($Heap, this, _module.Mutex.data)): ref == data#0;
  ensures {:id "id1801"} !$Unbox(read($Heap, this, _module.Mutex.locked)): bool;
  free ensures true;
  ensures {:id "id1802"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o] || $o == universe#0 || $o == data#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Mutex._ctor (correctness)"} Impl$$_module.Mutex.__ctor(universe#0: ref, running#0: ref, data#0: ref)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.data: ref;
  var this.locked: bool;
  var this.guards: Set;
  var defass#this.owner: bool;
  var defass#this.universe: bool;
  var defass#this.data: bool;
  var $rhs#0: ref;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.Mutex.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0 || $o == data#0);
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(519,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(520,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(521,16)
    assume true;
    assume true;
    this.owner := running#0;
    defass#this.owner := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(522,15)
    assume true;
    assume true;
    this.data := data#0;
    defass#this.data := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(523,17)
    assume true;
    assume true;
    this.locked := Lit(false);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(524,17)
    assume true;
    assume true;
    this.guards := Lit(Set#Empty(): Set);
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(519,3)
    assert {:id "id1808"} defass#this.owner;
    assert {:id "id1809"} defass#this.universe;
    assert {:id "id1810"} defass#this.data;
    assume this != null && $Is(this, Tclass._module.Mutex?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.Mutex.data)): ref == this.data;
    assume $Unbox(read($Heap, this, _module.Mutex.locked)): bool == this.locked;
    assume $Unbox(read($Heap, this, _module.Mutex.guards)): Set == this.guards;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(519,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(526,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1811"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id1812"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(528,21)
    assert {:id "id1813"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
    assume true;
    assert {:id "id1814"} $_ModifiesFrame[$Unbox(read($Heap, this, _module.Mutex.data)): ref, _module.OwnedObject.owner];
    assume true;
    $rhs#0 := this;
    $Heap := update($Heap, 
      $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
      _module.OwnedObject.owner, 
      $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(529,48)
    assert {:id "id1817"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
    assume true;
    $obj0 := $Unbox(read($Heap, this, _module.Mutex.data)): ref;
    assert {:id "id1818"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assert {:id "id1819"} $Unbox(read($Heap, this, _module.Mutex.data)): ref != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.Mutex.data)): ref, 
        _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id1820"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(530,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id1822"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id1823"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id1824"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id1825"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.Mutex
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.Mutex()) } { $Is(c#0, Tclass._module.Mutex?()) } 
  $Is(c#0, Tclass._module.Mutex())
     <==> $Is(c#0, Tclass._module.Mutex?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.Mutex
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.Mutex(), $h) } 
    { $IsAlloc(c#0, Tclass._module.Mutex?(), $h) } 
  $IsAlloc(c#0, Tclass._module.Mutex(), $h)
     <==> $IsAlloc(c#0, Tclass._module.Mutex?(), $h));

const unique class._module.MutexGuardU32?: ClassName;

function Tclass._module.MutexGuardU32?() : Ty
uses {
// Tclass._module.MutexGuardU32? Tag
axiom Tag(Tclass._module.MutexGuardU32?()) == Tagclass._module.MutexGuardU32?
   && TagFamily(Tclass._module.MutexGuardU32?()) == tytagFamily$MutexGuardU32;
axiom implements$_module.OwnedObject(Tclass._module.MutexGuardU32?());
}

const unique Tagclass._module.MutexGuardU32?: TyTag;

// Box/unbox axiom for Tclass._module.MutexGuardU32?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.MutexGuardU32?()) } 
  $IsBox(bx, Tclass._module.MutexGuardU32?())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._module.MutexGuardU32?()));

// $Is axiom for class MutexGuardU32
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.MutexGuardU32?()) } 
  $Is($o, Tclass._module.MutexGuardU32?())
     <==> $o == null || dtype($o) == Tclass._module.MutexGuardU32?());

// $IsAlloc axiom for class MutexGuardU32
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.MutexGuardU32?(), $h) } 
  $IsAlloc($o, Tclass._module.MutexGuardU32?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

const _module.MutexGuardU32.mutex: Field
uses {
axiom FDim(_module.MutexGuardU32.mutex) == 0
   && FieldOfDecl(class._module.MutexGuardU32?, field$mutex)
     == _module.MutexGuardU32.mutex
   && !$IsGhostField(_module.MutexGuardU32.mutex);
}

// MutexGuardU32.mutex: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.MutexGuardU32.mutex)): ref } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.MutexGuardU32?()
     ==> $Is($Unbox(read($h, $o, _module.MutexGuardU32.mutex)): ref, Tclass._module.Mutex()));

// MutexGuardU32.mutex: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.MutexGuardU32.mutex)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.MutexGuardU32?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.MutexGuardU32.mutex)): ref, 
      Tclass._module.Mutex(), 
      $h));

const _module.MutexGuardU32.data: Field
uses {
axiom FDim(_module.MutexGuardU32.data) == 0
   && FieldOfDecl(class._module.MutexGuardU32?, field$data)
     == _module.MutexGuardU32.data
   && $IsGhostField(_module.MutexGuardU32.data);
}

// MutexGuardU32.data: Type axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.MutexGuardU32.data)): ref } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.MutexGuardU32?()
     ==> $Is($Unbox(read($h, $o, _module.MutexGuardU32.data)): ref, Tclass._module.OwnedU32()));

// MutexGuardU32.data: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { $Unbox(read($h, $o, _module.MutexGuardU32.data)): ref } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._module.MutexGuardU32?()
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc($Unbox(read($h, $o, _module.MutexGuardU32.data)): ref, 
      Tclass._module.OwnedU32(), 
      $h));

// function declaration for _module.MutexGuardU32.volatileOwns
function _module.MutexGuardU32.volatileOwns(this: ref) : bool
uses {
// definition axiom for _module.MutexGuardU32.volatileOwns (revealed)
axiom {:id "id1826"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.MutexGuardU32.volatileOwns(this) } 
    _module.MutexGuardU32.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.MutexGuardU32.volatileOwns(this) == Lit(false));
// definition axiom for _module.MutexGuardU32.volatileOwns for all literals (revealed)
axiom {:id "id1827"} 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    {:weight 3} { _module.MutexGuardU32.volatileOwns(Lit(this)) } 
    _module.MutexGuardU32.volatileOwns#canCall(Lit(this))
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.MutexGuardU32.volatileOwns(Lit(this)) == Lit(false));
}

function _module.MutexGuardU32.volatileOwns#canCall(this: ref) : bool;

function _module.MutexGuardU32.volatileOwns#requires(ref) : bool;

// #requires axiom for _module.MutexGuardU32.volatileOwns
axiom (forall this: ref :: 
  { _module.MutexGuardU32.volatileOwns#requires(this) } 
  this != null && $Is(this, Tclass._module.MutexGuardU32())
     ==> _module.MutexGuardU32.volatileOwns#requires(this) == true);

// override axiom for _module.OwnedObject.volatileOwns in class _module.MutexGuardU32
axiom 0 <= $FunctionContextHeight
   ==> (forall this: ref :: 
    { _module.OwnedObject.volatileOwns(this), $Is(this, Tclass._module.MutexGuardU32()) } 
      { _module.OwnedObject.volatileOwns(this), _module.MutexGuardU32.volatileOwns(this) } 
    _module.MutexGuardU32.volatileOwns#canCall(this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.volatileOwns(this)
         == _module.MutexGuardU32.volatileOwns(this));

procedure {:verboseName "MutexGuardU32.volatileOwns (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "MutexGuardU32.volatileOwns (override check)"} OverrideCheck$$_module.MutexGuardU32.volatileOwns(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.volatileOwns (override check)"} OverrideCheck$$_module.MutexGuardU32.volatileOwns(this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1829"} true;
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1830"} (forall $o: ref, $f: Field :: true);
}



// function declaration for _module.MutexGuardU32.baseUserFieldsInv
function _module.MutexGuardU32.baseUserFieldsInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.MutexGuardU32.baseUserFieldsInv (revealed)
axiom {:id "id1831"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.baseUserFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.baseUserFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> _module.MutexGuardU32.baseUserFieldsInv($Heap, this)
         == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.MutexGuardU32.mutex))
           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
            read($Heap, this, _module.MutexGuardU32.data))));
}

function _module.MutexGuardU32.baseUserFieldsInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.baseUserFieldsInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.baseUserFieldsInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.MutexGuardU32())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && ($o == this || $o == _module.Object.universe(this))
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.baseUserFieldsInv($h0, this)
       == _module.MutexGuardU32.baseUserFieldsInv($h1, this));

function _module.MutexGuardU32.baseUserFieldsInv#requires(Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.baseUserFieldsInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.baseUserFieldsInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap)
     ==> _module.MutexGuardU32.baseUserFieldsInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.baseUserFieldsInv in class _module.MutexGuardU32
axiom 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.baseUserFieldsInv($Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.baseUserFieldsInv($Heap, this), _module.MutexGuardU32.baseUserFieldsInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.baseUserFieldsInv#canCall($Heap, this)
         || (2 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.baseUserFieldsInv($Heap, this)
         == _module.MutexGuardU32.baseUserFieldsInv($Heap, this));

procedure {:verboseName "MutexGuardU32.baseUserFieldsInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.baseUserFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.baseUserFieldsInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.baseUserFieldsInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
        assert {:id "id1832"} _module.Object.universe(this) != null;
        b$reqreads#1 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        if (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read($Heap, this, _module.MutexGuardU32.mutex)))
        {
            b$reqreads#2 := $_ReadsFrame[this, _module.MutexGuardU32.data];
            assert {:id "id1833"} _module.Object.universe(this) != null;
            b$reqreads#3 := $_ReadsFrame[_module.Object.universe(this), _module.Universe.content];
        }

        assume {:id "id1834"} _module.MutexGuardU32.baseUserFieldsInv($Heap, this)
           == (Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.MutexGuardU32.mutex))
             && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
              read($Heap, this, _module.MutexGuardU32.data)));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.baseUserFieldsInv($Heap, this), TBool);
        assert {:id "id1835"} b$reqreads#0;
        assert {:id "id1836"} b$reqreads#1;
        assert {:id "id1837"} b$reqreads#2;
        assert {:id "id1838"} b$reqreads#3;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.baseUserFieldsInv (override check)"} OverrideCheck$$_module.MutexGuardU32.baseUserFieldsInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.baseUserFieldsInv (override check)"} OverrideCheck$$_module.MutexGuardU32.baseUserFieldsInv(this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1839"} Set#Subset(Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))), 
      Set#UnionOne(Set#UnionOne(Set#Empty(): Set, $Box(this)), $Box(_module.Object.universe(this))));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == this || $o == _module.Object.universe(this));
    assert {:id "id1840"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && ($o == this || $o == _module.Object.universe(this))
         ==> $o == this || $o == _module.Object.universe(this));
}



procedure {:verboseName "MutexGuardU32.baseUserFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.baseUserFieldsInvMonotonicity (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;


    // AddMethodImpl: baseUserFieldsInvMonotonicity, CheckWellFormed$$_module.MutexGuardU32.baseUserFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assert {:id "id1841"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assume _module.MutexGuardU32.baseUserFieldsInv#canCall(old($Heap), this);
    assume {:id "id1842"} _module.MutexGuardU32.baseUserFieldsInv(old($Heap), this);
    assert {:id "id1843"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assert {:id "id1844"} _module.Object.universe(this) != null;
    assert {:id "id1845"} $IsAlloc(_module.Object.universe(this), Tclass._module.Universe(), old($Heap));
    assert {:id "id1846"} _module.Object.universe(this) != null;
    assume {:id "id1847"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1848"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assume {:id "id1849"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
    assume _module.MutexGuardU32.baseUserFieldsInv#canCall($Heap, this);
    assume {:id "id1850"} _module.MutexGuardU32.baseUserFieldsInv($Heap, this);
}



procedure {:verboseName "MutexGuardU32.baseUserFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.MutexGuardU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.baseUserFieldsInvMonotonicity (override check)"} OverrideCheck$$_module.MutexGuardU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
    $Heap := current$Heap;
    assume {:id "id1851"} _module.MutexGuardU32.baseUserFieldsInv(old($Heap), this)
       && Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
        $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)
       && (forall $o: ref, $f: Field :: 
        { read($Heap, $o, $f) } 
        $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1852"} _module.MutexGuardU32.baseUserFieldsInv#canCall(old($Heap), this)
       ==> _module.MutexGuardU32.baseUserFieldsInv(old($Heap), this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          read(old($Heap), this, _module.MutexGuardU32.mutex));
    assert {:id "id1853"} _module.MutexGuardU32.baseUserFieldsInv#canCall(old($Heap), this)
       ==> _module.MutexGuardU32.baseUserFieldsInv(old($Heap), this)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          read(old($Heap), this, _module.MutexGuardU32.data));
    assert {:id "id1854"} Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set);
    assert {:id "id1855"} (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1856"} true;
    assert {:id "id1857"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1858"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1859"} _module.MutexGuardU32.baseUserFieldsInv($Heap, this);
    assert {:id "id1860"} _module.MutexGuardU32.baseUserFieldsInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.baseUserFieldsInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read($Heap, this, _module.MutexGuardU32.mutex));
    assert {:id "id1861"} _module.MutexGuardU32.baseUserFieldsInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.baseUserFieldsInv($Heap, this)
         || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
          read($Heap, this, _module.MutexGuardU32.data));
}



procedure {:verboseName "MutexGuardU32.baseUserFieldsInvMonotonicity (call)"} Call$$_module.MutexGuardU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap));
  // user-defined preconditions
  requires {:id "id1862"} _module.MutexGuardU32.baseUserFieldsInv#canCall(previous$Heap, this)
     ==> _module.MutexGuardU32.baseUserFieldsInv(previous$Heap, this)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(previous$Heap, this, _module.MutexGuardU32.mutex));
  requires {:id "id1863"} _module.MutexGuardU32.baseUserFieldsInv#canCall(previous$Heap, this)
     ==> _module.MutexGuardU32.baseUserFieldsInv(previous$Heap, this)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(previous$Heap, this, _module.MutexGuardU32.data));
  requires {:id "id1864"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1865"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.MutexGuardU32.baseUserFieldsInv#canCall(current$Heap, this);
  free ensures {:id "id1866"} _module.MutexGuardU32.baseUserFieldsInv#canCall(current$Heap, this)
     && 
    _module.MutexGuardU32.baseUserFieldsInv(current$Heap, this)
     && 
    Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      read(current$Heap, this, _module.MutexGuardU32.mutex))
     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      read(current$Heap, this, _module.MutexGuardU32.data));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "MutexGuardU32.baseUserFieldsInvMonotonicity (correctness)"} Impl$$_module.MutexGuardU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  // user-defined preconditions
  free requires {:id "id1867"} _module.MutexGuardU32.baseUserFieldsInv#canCall(previous$Heap, this)
     && 
    _module.MutexGuardU32.baseUserFieldsInv(previous$Heap, this)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      read(previous$Heap, this, _module.MutexGuardU32.mutex))
     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      read(previous$Heap, this, _module.MutexGuardU32.data));
  requires {:id "id1868"} Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set);
  requires {:id "id1869"} (forall $o: ref, $f: Field :: 
    { read(current$Heap, $o, $f) } 
    $o != null
       ==> 
      $o == this
       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.MutexGuardU32.baseUserFieldsInv#canCall(current$Heap, this);
  ensures {:id "id1870"} _module.MutexGuardU32.baseUserFieldsInv#canCall(current$Heap, this)
     ==> _module.MutexGuardU32.baseUserFieldsInv(current$Heap, this)
       || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(current$Heap, this, _module.MutexGuardU32.mutex));
  ensures {:id "id1871"} _module.MutexGuardU32.baseUserFieldsInv#canCall(current$Heap, this)
     ==> _module.MutexGuardU32.baseUserFieldsInv(current$Heap, this)
       || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        read(current$Heap, this, _module.MutexGuardU32.data));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.baseUserFieldsInvMonotonicity (correctness)"} Impl$$_module.MutexGuardU32.baseUserFieldsInvMonotonicity(previous$Heap: Heap, current$Heap: Heap, this: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: baseUserFieldsInvMonotonicity, Impl$$_module.MutexGuardU32.baseUserFieldsInvMonotonicity
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for _module.MutexGuardU32.unchangedNonvolatileUserFields
function _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.MutexGuardU32.unchangedNonvolatileUserFields (revealed)
axiom {:id "id1872"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap))
       ==> _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == ($Unbox(read($prevHeap, this, _module.MutexGuardU32.mutex)): ref
             == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref
           && $Unbox(read($prevHeap, this, _module.MutexGuardU32.data)): ref
             == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref));
}

function _module.MutexGuardU32.unchangedNonvolatileUserFields#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && $Is(this, Tclass._module.MutexGuardU32())
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $o == this ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $h0, this)
       == _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $h1, this));

function _module.MutexGuardU32.unchangedNonvolatileUserFields#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.unchangedNonvolatileUserFields
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap)
     ==> _module.MutexGuardU32.unchangedNonvolatileUserFields#requires($prevHeap, $Heap, this)
       == true);

// override axiom for _module.OwnedObject.unchangedNonvolatileUserFields in class _module.MutexGuardU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this), _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.unchangedNonvolatileUserFields#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.unchangedNonvolatileUserFields($prevHeap, $Heap, this)
         == _module.MutexGuardU32.unchangedNonvolatileUserFields($prevHeap, $Heap, this));

procedure {:verboseName "MutexGuardU32.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.unchangedNonvolatileUserFields (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assert {:id "id1873"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
        b$reqreads#0 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
        if ($Unbox(read(old($Heap), this, _module.MutexGuardU32.mutex)): ref
           == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)
        {
            assert {:id "id1874"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
            b$reqreads#1 := $_ReadsFrame[this, _module.MutexGuardU32.data];
        }

        assume {:id "id1875"} _module.MutexGuardU32.unchangedNonvolatileUserFields(old($Heap), $Heap, this)
           == ($Unbox(read(old($Heap), this, _module.MutexGuardU32.mutex)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref
             && $Unbox(read(old($Heap), this, _module.MutexGuardU32.data)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.unchangedNonvolatileUserFields(old($Heap), $Heap, this), 
          TBool);
        assert {:id "id1876"} b$reqreads#0;
        assert {:id "id1877"} b$reqreads#1;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.MutexGuardU32.unchangedNonvolatileUserFields(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.unchangedNonvolatileUserFields (override check)"} OverrideCheck$$_module.MutexGuardU32.unchangedNonvolatileUserFields(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1878"} Set#Subset(Set#UnionOne(Set#Empty(): Set, $Box(this)), 
      Set#UnionOne(Set#Empty(): Set, $Box(this)));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> $o == this);
    assert {:id "id1879"} (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool && $o == this ==> $o == this);
}



// function declaration for _module.MutexGuardU32.localUserInv
function _module.MutexGuardU32.localUserInv($heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.MutexGuardU32.localUserInv (revealed)
axiom {:id "id1880"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         == (
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.locked)): bool
           && Set#Equal($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.guards)): Set, 
            Set#UnionOne(Set#Empty(): Set, $Box(this)))
           && $Unbox(read($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref
             == this
           && $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref
             == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref));
}

function _module.MutexGuardU32.localUserInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.localUserInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.localUserInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.localUserInv($h0, this)
       == _module.MutexGuardU32.localUserInv($h1, this));

function _module.MutexGuardU32.localUserInv#requires(Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.localUserInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.localUserInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap)
     ==> _module.MutexGuardU32.localUserInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv in class _module.MutexGuardU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv($Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv($Heap, this), _module.MutexGuardU32.localUserInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.localUserInv($Heap, this)
         == _module.MutexGuardU32.localUserInv($Heap, this));

procedure {:verboseName "MutexGuardU32.localUserInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.localUserInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.localUserInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        b$reqreads#0 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
        assert {:id "id1881"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
        b$reqreads#1 := $_ReadsFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.locked];
        if ($Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.locked)): bool)
        {
            b$reqreads#2 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id1882"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            b$reqreads#3 := $_ReadsFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.guards];
        }

        if ($Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.locked)): bool
           && Set#Equal($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.guards)): Set, 
            Set#UnionOne(Set#Empty(): Set, $Box(this))))
        {
            b$reqreads#4 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id1883"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            b$reqreads#5 := $_ReadsFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.data];
            assert {:id "id1884"} $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref
               != null;
            b$reqreads#6 := $_ReadsFrame[$Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref, _module.OwnedObject.owner];
        }

        if ($Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.locked)): bool
           && Set#Equal($Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.guards)): Set, 
            Set#UnionOne(Set#Empty(): Set, $Box(this)))
           && $Unbox(read($Heap, 
                $Unbox(read($Heap, 
                    $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                    _module.Mutex.data)): ref, 
                _module.OwnedObject.owner)): ref
             == this)
        {
            b$reqreads#7 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id1885"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            b$reqreads#8 := $_ReadsFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.data];
            b$reqreads#9 := $_ReadsFrame[this, _module.MutexGuardU32.data];
        }

        assume {:id "id1886"} _module.MutexGuardU32.localUserInv($Heap, this)
           == (
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.locked)): bool
             && Set#Equal($Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.guards)): Set, 
              Set#UnionOne(Set#Empty(): Set, $Box(this)))
             && $Unbox(read($Heap, 
                  $Unbox(read($Heap, 
                      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                      _module.Mutex.data)): ref, 
                  _module.OwnedObject.owner)): ref
               == this
             && $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.localUserInv($Heap, this), TBool);
        assert {:id "id1887"} b$reqreads#0;
        assert {:id "id1888"} b$reqreads#1;
        assert {:id "id1889"} b$reqreads#2;
        assert {:id "id1890"} b$reqreads#3;
        assert {:id "id1891"} b$reqreads#4;
        assert {:id "id1892"} b$reqreads#5;
        assert {:id "id1893"} b$reqreads#6;
        assert {:id "id1894"} b$reqreads#7;
        assert {:id "id1895"} b$reqreads#8;
        assert {:id "id1896"} b$reqreads#9;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.localUserInv (override check)"} OverrideCheck$$_module.MutexGuardU32.localUserInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.localUserInv (override check)"} OverrideCheck$$_module.MutexGuardU32.localUserInv(this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1897"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1898"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.MutexGuardU32.userInv
function _module.MutexGuardU32.userInv($heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.MutexGuardU32.userInv
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.userInv($Heap, this) } 
    _module.MutexGuardU32.userInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> 
      _module.MutexGuardU32.userInv($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this));
// definition axiom for _module.MutexGuardU32.userInv (revealed)
axiom {:id "id1899"} 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.userInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap))
       ==> _module.MutexGuardU32.localUserInv#canCall($Heap, this)
         && (_module.MutexGuardU32.localUserInv($Heap, this)
           ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
         && _module.MutexGuardU32.userInv($Heap, this)
           == (_module.MutexGuardU32.localUserInv($Heap, this)
             && _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)));
}

function _module.MutexGuardU32.userInv#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.userInv
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.userInv($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.userInv($h0, this)
       == _module.MutexGuardU32.userInv($h1, this));

function _module.MutexGuardU32.userInv#requires(Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.userInv
axiom (forall $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.userInv#requires($Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap)
     ==> _module.MutexGuardU32.userInv#requires($Heap, this) == true);

// override axiom for _module.OwnedObject.userInv in class _module.MutexGuardU32
axiom 9 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv($Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv($Heap, this), _module.MutexGuardU32.userInv($Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.userInv#canCall($Heap, this)
         || (9 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.userInv($Heap, this)
         == _module.MutexGuardU32.userInv($Heap, this));

procedure {:verboseName "MutexGuardU32.userInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1900"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.locked)): bool;
  ensures {:id "id1901"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || Set#Equal($Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.guards)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this)));
  ensures {:id "id1902"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || $Unbox(read($Heap, 
            $Unbox(read($Heap, 
                $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                _module.Mutex.data)): ref, 
            _module.OwnedObject.owner)): ref
         == this;
  ensures {:id "id1903"} _module.MutexGuardU32.userInv($Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv#canCall($Heap, this)
     ==> _module.MutexGuardU32.localUserInv($Heap, this)
       || $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref
         == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.userInv (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.userInv(this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
            assert {:id "id1904"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.MutexGuardU32.userInv#canCall($Heap, this);
            assume {:id "id1905"} _module.MutexGuardU32.userInv($Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
            assume _module.MutexGuardU32.localUserInv#canCall($Heap, this);
            assume {:id "id1906"} _module.MutexGuardU32.localUserInv($Heap, this);
        }
        else
        {
            assume {:id "id1907"} _module.MutexGuardU32.userInv($Heap, this)
               ==> _module.MutexGuardU32.localUserInv($Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.MutexGuardU32.localUserInv#canCall($Heap, this);
        if (_module.MutexGuardU32.localUserInv($Heap, this))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id1908"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox(read($Heap, this, _module.MutexGuardU32.mutex), 
              Tclass._module.OwnedObject?(), 
              $Heap);
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
        }

        assume {:id "id1909"} _module.MutexGuardU32.userInv($Heap, this)
           == (_module.MutexGuardU32.localUserInv($Heap, this)
             && _module.OwnedObject.localInv($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref));
        assume _module.MutexGuardU32.localUserInv#canCall($Heap, this)
           && (_module.MutexGuardU32.localUserInv($Heap, this)
             ==> _module.OwnedObject.localInv#canCall($Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.userInv($Heap, this), TBool);
        assert {:id "id1910"} b$reqreads#0;
        assert {:id "id1911"} b$reqreads#1;
        assert {:id "id1912"} b$reqreads#2;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.userInv (override check)"} OverrideCheck$$_module.MutexGuardU32.userInv(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.userInv (override check)"} OverrideCheck$$_module.MutexGuardU32.userInv(this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    assert {:id "id1913"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1914"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1915"} _module.MutexGuardU32.userInv($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this);
    assert {:id "id1916"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.locked)): bool;
    assert {:id "id1917"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || Set#Equal($Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.guards)): Set, 
          Set#UnionOne(Set#Empty(): Set, $Box(this)));
    assert {:id "id1918"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
              $Unbox(read($Heap, 
                  $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
                  _module.Mutex.data)): ref, 
              _module.OwnedObject.owner)): ref
           == this;
    assert {:id "id1919"} _module.MutexGuardU32.userInv($Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv#canCall($Heap, this)
       ==> _module.MutexGuardU32.localUserInv($Heap, this)
         || $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref
           == $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref;
}



// function declaration for _module.MutexGuardU32.localUserInv2
function _module.MutexGuardU32.localUserInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// definition axiom for _module.MutexGuardU32.localUserInv2 (revealed)
axiom {:id "id1920"} 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap))
       ==> _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this)
         == (true
           && $Unbox(read($prevHeap, this, _module.MutexGuardU32.mutex)): ref
             == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref));
}

function _module.MutexGuardU32.localUserInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.localUserInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.localUserInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.localUserInv2($prevHeap, $h0, this)
       == _module.MutexGuardU32.localUserInv2($prevHeap, $h1, this));

function _module.MutexGuardU32.localUserInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.localUserInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.localUserInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap)
     ==> _module.MutexGuardU32.localUserInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.localUserInv2 in class _module.MutexGuardU32
axiom 0 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.localUserInv2($prevHeap, $Heap, this), _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.localUserInv2#canCall($prevHeap, $Heap, this)
         || (0 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.localUserInv2($prevHeap, $Heap, this)
         == _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this));

procedure {:verboseName "MutexGuardU32.localUserInv2 (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.localUserInv2 (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;

    b$reqreads#0 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Lit(true))
        {
            assert {:id "id1921"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
            b$reqreads#0 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
        }

        assume {:id "id1922"} _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this)
           == (true
             && $Unbox(read(old($Heap), this, _module.MutexGuardU32.mutex)): ref
               == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1923"} b$reqreads#0;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.localUserInv2 (override check)"} OverrideCheck$$_module.MutexGuardU32.localUserInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), current$Heap));
  free requires 0 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.localUserInv2 (override check)"} OverrideCheck$$_module.MutexGuardU32.localUserInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1924"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1925"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
}



// function declaration for _module.MutexGuardU32.userInv2
function _module.MutexGuardU32.userInv2($prevHeap: Heap, $heap: Heap, this: ref) : bool
uses {
// consequence axiom for _module.MutexGuardU32.userInv2
axiom 3 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.userInv2($prevHeap, $Heap, this) } 
    _module.MutexGuardU32.userInv2#canCall($prevHeap, $Heap, this)
         || (3 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap))
       ==> 
      _module.MutexGuardU32.userInv2($prevHeap, $Heap, this)
       ==> _module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this));
// definition axiom for _module.MutexGuardU32.userInv2 (revealed)
axiom {:id "id1926"} 3 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.MutexGuardU32.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.userInv2#canCall($prevHeap, $Heap, this)
         || (3 < $FunctionContextHeight
           && 
          $IsGoodHeap($prevHeap)
           && $IsGoodHeap($Heap)
           && $HeapSucc($prevHeap, $Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.MutexGuardU32())
           && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap))
       ==> _module.MutexGuardU32.localUserInv2#canCall($prevHeap, $Heap, this)
         && (_module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this)
           ==> _module.OwnedObject.localInv2#canCall($prevHeap, $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref))
         && _module.MutexGuardU32.userInv2($prevHeap, $Heap, this)
           == (_module.MutexGuardU32.localUserInv2($prevHeap, $Heap, this)
             && _module.OwnedObject.localInv2($prevHeap, $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref)));
}

function _module.MutexGuardU32.userInv2#canCall($prevHeap: Heap, $heap: Heap, this: ref) : bool;

// frame axiom for _module.MutexGuardU32.userInv2
axiom (forall $prevHeap: Heap, $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.MutexGuardU32.userInv2($prevHeap, $h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $h0)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall $o: ref, $f: Field :: 
      $o != null && $Unbox(read($h0, $o, alloc)): bool
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.MutexGuardU32.userInv2($prevHeap, $h0, this)
       == _module.MutexGuardU32.userInv2($prevHeap, $h1, this));

function _module.MutexGuardU32.userInv2#requires(Heap, Heap, ref) : bool;

// #requires axiom for _module.MutexGuardU32.userInv2
axiom (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
  { _module.MutexGuardU32.userInv2#requires($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
  $IsGoodHeap($prevHeap)
       && $IsGoodHeap($Heap)
       && $HeapSucc($prevHeap, $Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $prevHeap)
     ==> _module.MutexGuardU32.userInv2#requires($prevHeap, $Heap, this) == true);

// override axiom for _module.OwnedObject.userInv2 in class _module.MutexGuardU32
axiom 3 <= $FunctionContextHeight
   ==> (forall $prevHeap: Heap, $Heap: Heap, this: ref :: 
    { _module.OwnedObject.userInv2($prevHeap, $Heap, this), $Is(this, Tclass._module.MutexGuardU32()), $IsGoodHeap($Heap) } 
      { _module.OwnedObject.userInv2($prevHeap, $Heap, this), _module.MutexGuardU32.userInv2($prevHeap, $Heap, this), $IsGoodHeap($Heap) } 
    _module.MutexGuardU32.userInv2#canCall($prevHeap, $Heap, this)
         || (3 < $FunctionContextHeight
           && 
          this != null
           && $Is(this, Tclass._module.MutexGuardU32()))
       ==> _module.OwnedObject.userInv2($prevHeap, $Heap, this)
         == _module.MutexGuardU32.userInv2($prevHeap, $Heap, this));

procedure {:verboseName "MutexGuardU32.userInv2 (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;
  ensures {:id "id1927"} _module.MutexGuardU32.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.MutexGuardU32.localUserInv2(previous$Heap, current$Heap, this)
       || Lit(true);
  ensures {:id "id1928"} _module.MutexGuardU32.userInv2(previous$Heap, current$Heap, this)
     ==> 
    _module.MutexGuardU32.localUserInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.MutexGuardU32.localUserInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.MutexGuardU32.mutex)): ref
         == $Unbox(read(current$Heap, this, _module.MutexGuardU32.mutex)): ref;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.userInv2 (well-formedness)"} CheckWellformed$$_module.MutexGuardU32.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var $_ReadsFrame: [ref,Field]bool;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;

    $Heap := current$Heap;
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        if (*)
        {
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
            assert {:id "id1929"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
            assert {:id "id1930"} this == this
               || (Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set))
                 && !Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set)));
            assume this == this || _module.MutexGuardU32.userInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1931"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this);
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
            assert {:id "id1932"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
            assume _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this);
            assume {:id "id1933"} _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this);
        }
        else
        {
            assume {:id "id1934"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
               ==> _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this);
        }

        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // assume allocatedness for receiver argument to function
        assume $IsAllocBox($Box(this), Tclass._module.MutexGuardU32?(), $Heap);
        assert {:id "id1935"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
        b$reqreads#0 := (forall $o: ref, $f: Field :: 
          $o != null
               && $Unbox(read($Heap, $o, alloc)): bool
               && $Unbox(read($Heap, $o, alloc)): bool
             ==> $_ReadsFrame[$o, $f]);
        assume _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this);
        if (_module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this))
        {
            b$reqreads#1 := $_ReadsFrame[this, _module.MutexGuardU32.mutex];
            assert {:id "id1936"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
            // assume allocatedness for receiver argument to function
            assume $IsAllocBox(read($Heap, this, _module.MutexGuardU32.mutex), 
              Tclass._module.OwnedObject?(), 
              $Heap);
            assert {:id "id1937"} $IsAlloc($Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              Tclass._module.Mutex(), 
              old($Heap));
            b$reqreads#2 := (forall $o: ref, $f: Field :: 
              $o != null
                   && $Unbox(read($Heap, $o, alloc)): bool
                   && $Unbox(read($Heap, $o, alloc)): bool
                 ==> $_ReadsFrame[$o, $f]);
            assume _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref);
        }

        assume {:id "id1938"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
           == (_module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this)
             && _module.OwnedObject.localInv2(old($Heap), $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref));
        assume _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this)
           && (_module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this)
             ==> _module.OwnedObject.localInv2#canCall(old($Heap), $Heap, $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.MutexGuardU32.userInv2(old($Heap), $Heap, this), TBool);
        assert {:id "id1939"} b$reqreads#0;
        assert {:id "id1940"} b$reqreads#1;
        assert {:id "id1941"} b$reqreads#2;
        return;

        assume false;
    }
}



procedure {:verboseName "MutexGuardU32.userInv2 (override check)"} OverrideCheck$$_module.MutexGuardU32.userInv2(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), current$Heap));
  free requires 3 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.userInv2 (override check)"} OverrideCheck$$_module.MutexGuardU32.userInv2(previous$Heap: Heap, current$Heap: Heap, this: ref)
{
  var MutexGuardU32_$_ReadsFrame: [ref,Field]bool;

    $Heap := current$Heap;
    assert {:id "id1942"} Set#Subset(Lit(Set#Empty(): Set), Lit(Set#Empty(): Set));
    MutexGuardU32_$_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assert {:id "id1943"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $Unbox(read($Heap, $o, alloc)): bool
         ==> $Unbox(read($Heap, $o, alloc)): bool);
    assume {:id "id1944"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
       ==> _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this);
    assert {:id "id1945"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this) || Lit(true);
    assert {:id "id1946"} _module.MutexGuardU32.userInv2(old($Heap), $Heap, this)
       ==> 
      _module.MutexGuardU32.localUserInv2#canCall(old($Heap), $Heap, this)
       ==> _module.MutexGuardU32.localUserInv2(old($Heap), $Heap, this)
         || $Unbox(read(old($Heap), this, _module.MutexGuardU32.mutex)): ref
           == $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref;
}



procedure {:verboseName "MutexGuardU32.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.sequenceAdmissibility (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: Set;


    // AddMethodImpl: sequenceAdmissibility, CheckWellFormed$$_module.MutexGuardU32.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, TSet(Tclass._module.Thread()), $Heap);
    assert {:id "id1947"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assert {:id "id1948"} $IsAlloc(running#0, TSet(Tclass._module.Thread()), old($Heap));
    assume _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1949"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1950"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assume _module.OwnedObject.sequenceInv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1951"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "MutexGuardU32.sequenceAdmissibility (override check)"} OverrideCheck$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.sequenceAdmissibility (override check)"} OverrideCheck$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
{
    $Heap := current$Heap;
    assume {:id "id1952"} _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0);
    assert {:id "id1953"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1954"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1955"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1956"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#0: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#0) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                        { _module.Object.universe(o#0) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#0)) } 
                      $Is(o#0, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#0))
                         ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                           && o#0 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#0)
                           && _module.Object.triggerAxioms(old($Heap), o#0)))));
    assert {:id "id1957"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id1958"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                     || (forall o#1: ref :: 
                      { _module.Object.triggerAxioms($Heap, o#1) } 
                        { _module.Object.baseFieldsInv($Heap, o#1) } 
                        { _module.Object.universe(o#1) } 
                        { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#1)) } 
                      $Is(o#1, Tclass._module.Object())
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#1))
                         ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                           && o#1 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv($Heap, o#1)
                           && _module.Object.triggerAxioms($Heap, o#1)))));
    assert {:id "id1959"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
    assert {:id "id1960"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
               ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                 || (forall o#2: ref :: 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#2)) } 
                  $Is(o#2, Tclass._module.Object())
                       && 
                      !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#2))
                     ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap)))));
    assert {:id "id1961"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#3: ref :: 
              { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#3)) } 
              $Is(o#3, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                   && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#3))
                 ==> (forall $o: ref, $f: Field :: 
                    { read($Heap, $o, $f) } 
                    $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                   || _module.Object.sequenceInv2(old($Heap), $Heap, o#3)));
    assert {:id "id1962"} _module.Object.goodPreAndLegalChangesSequence#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChangesSequence(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#4: ref :: 
              { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#4)) } 
              $Is(o#4, Tclass._module.OwnedObject())
                   && 
                  Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#4))
                   && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                    Tclass._module.Thread())
                 ==> 
                !Set#IsMember(running#0, read(old($Heap), o#4, _module.OwnedObject.owner))
                   && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                    Tclass._module.Object(), 
                    old($Heap))
                 ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int));
    assert {:id "id1963"} Set#Subset(running#0, running#0);
    assert {:id "id1964"} (forall $o: ref, $f: Field :: true);
    assert {:id "id1965"} (forall $o: ref, $f: Field :: true);
    assume {:id "id1966"} _module.OwnedObject.sequenceInv2(old($Heap), $Heap, this);
    assert {:id "id1967"} _module.Object.sequenceInv2(old($Heap), $Heap, this);
}



procedure {:verboseName "MutexGuardU32.sequenceAdmissibility (call)"} Call$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap));
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  requires {:id "id1968"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id1969"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id1970"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1971"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#5: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#5) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#5) } 
                      { _module.Object.universe(o#5) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#5)) } 
                    $Is(o#5, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5))
                       ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                         && o#5 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#5)
                         && _module.Object.triggerAxioms(previous$Heap, o#5)))));
  requires {:id "id1972"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id1973"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#6: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#6) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#6) } 
                      { _module.Object.universe(o#6) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6)) } 
                    $Is(o#6, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#6))
                       ==> _module.Object.universe(o#6) == _module.Object.universe(this)
                         && o#6 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#6)
                         && _module.Object.triggerAxioms(current$Heap, o#6)))));
  requires {:id "id1974"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set)));
  requires {:id "id1975"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
             ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
               || (forall o#7: ref :: 
                { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7)) } 
                $Is(o#7, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#7))
                   ==> !$IsAllocBox($Box(o#7), Tclass._module.Object(), previous$Heap))));
  requires {:id "id1976"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#8: ref :: 
            { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#8)) } 
            $Is(o#8, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
                 && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8))
               ==> (forall $o: ref, $f: Field :: 
                  { read(current$Heap, $o, $f) } 
                  $o != null
                     ==> 
                    $o == o#8
                     ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                 || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#8)));
  requires {:id "id1977"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#9: ref :: 
            { $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#9)) } 
            $Is(o#9, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#9))
                 && $Is($Unbox(read(previous$Heap, o#9, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(running#0, read(previous$Heap, o#9, _module.OwnedObject.owner))
                 && $IsAllocBox(read(previous$Heap, o#9, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  previous$Heap)
               ==> $Unbox(read(previous$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, o#9, _module.OwnedObject.nonvolatileVersion)): int));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  free ensures {:id "id1978"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && 
    $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       ==> true
         && _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this))
     && ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
        Tclass._module.OwnedObject())
       ==> (var oldOwner#0 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
        !_module.OwnedObject.volatileOwns(oldOwner#0)
             && $Unbox(read(previous$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, oldOwner#0, _module.OwnedObject.nonvolatileVersion)): int
           ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "MutexGuardU32.sequenceAdmissibility (correctness)"} Impl$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: Set
       where $Is(running#0, TSet(Tclass._module.Thread()))
         && $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 10 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, TSet(Tclass._module.Thread()), previous$Heap);
  // user-defined preconditions
  free requires {:id "id1979"} _module.Object.goodPreAndLegalChangesSequence#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChangesSequence(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this);
  ensures {:id "id1980"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int;
  ensures {:id "id1981"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> Lit(true));
  ensures {:id "id1982"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
             == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref);
  ensures {:id "id1983"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
           == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
         ==> 
        _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
           || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this));
  ensures {:id "id1984"} _module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
       || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
          Tclass._module.OwnedObject())
         ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
          !_module.OwnedObject.volatileOwns(oldOwner#1)
               && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
             ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.sequenceAdmissibility (correctness)"} Impl$$_module.MutexGuardU32.sequenceAdmissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: sequenceAdmissibility, Impl$$_module.MutexGuardU32.sequenceAdmissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "MutexGuardU32.admissibility (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.admissibility (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: admissibility, CheckWellFormed$$_module.MutexGuardU32.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id1985"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assert {:id "id1986"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0);
    assume {:id "id1987"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assert {:id "id1988"} $IsAlloc(this, Tclass._module.MutexGuardU32(), old($Heap));
    assume _module.OwnedObject.inv2#canCall(old($Heap), $Heap, this);
    assume {:id "id1989"} _module.OwnedObject.inv2(old($Heap), $Heap, this);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.OwnedObject?(), $Heap);
    assume _module.OwnedObject.inv#canCall($Heap, this);
    assume {:id "id1990"} _module.OwnedObject.inv($Heap, this);
}



procedure {:verboseName "MutexGuardU32.admissibility (override check)"} OverrideCheck$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.admissibility (override check)"} OverrideCheck$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
{
    $Heap := current$Heap;
    assume {:id "id1991"} _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0);
    assert {:id "id1992"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
          $Box(this));
    assert {:id "id1993"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (forall $o: ref, $f: Field :: 
          { read($Heap, $o, $f) } 
          $o != null ==> $o == this ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assert {:id "id1994"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1995"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                         || (forall o#0: ref :: 
                          { _module.Object.triggerAxioms(old($Heap), o#0) } 
                            { _module.Object.baseFieldsInv(old($Heap), o#0) } 
                            { _module.Object.universe(o#0) } 
                            { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#0)) } 
                          $Is(o#0, Tclass._module.Object())
                               && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#0))
                             ==> _module.Object.universe(o#0) == _module.Object.universe(this)
                               && o#0 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv(old($Heap), o#0)
                               && _module.Object.triggerAxioms(old($Heap), o#0))))));
    assert {:id "id1996"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || Lit(true)))));
    assert {:id "id1997"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
                       ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
                         || (forall o#1: ref :: 
                          { _module.Object.triggerAxioms($Heap, o#1) } 
                            { _module.Object.baseFieldsInv($Heap, o#1) } 
                            { _module.Object.universe(o#1) } 
                            { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#1)) } 
                          $Is(o#1, Tclass._module.Object())
                               && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                                $Box(o#1))
                             ==> _module.Object.universe(o#1) == _module.Object.universe(this)
                               && o#1 != _module.Object.universe(this)
                               && _module.Object.baseFieldsInv($Heap, o#1)
                               && _module.Object.triggerAxioms($Heap, o#1))))));
    assert {:id "id1998"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || Set#Subset($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
    assert {:id "id1999"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, _module.Object.universe(this))
                   ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, _module.Object.universe(this))
                     || (forall o#2: ref :: 
                      { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#2)) } 
                      $Is(o#2, Tclass._module.Object())
                           && 
                          !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                           && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#2))
                         ==> !$IsAllocBox($Box(o#2), Tclass._module.Object(), old($Heap))))));
    assert {:id "id2000"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#3: ref :: 
                  { _module.Object.sequenceInv2(old($Heap), $Heap, o#3) } 
                    { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#3)) } 
                  $Is(o#3, Tclass._module.Object())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                       && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#3))
                     ==> (forall $o: ref, $f: Field :: 
                        { read($Heap, $o, $f) } 
                        $o != null ==> $o == o#3 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                       || _module.Object.sequenceInv2(old($Heap), $Heap, o#3))));
    assert {:id "id2001"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), 
                $Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               ==> _module.Universe.legalTransitionsSequence(old($Heap), 
                  $Heap, 
                  _module.Object.universe(this), 
                  Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
                 || (forall o#4: ref :: 
                  { $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int } 
                    { $Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#4)) } 
                  $Is(o#4, Tclass._module.OwnedObject())
                       && 
                      Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#4))
                       && $Is($Unbox(read(old($Heap), o#4, _module.OwnedObject.owner)): ref, 
                        Tclass._module.Thread())
                     ==> 
                    !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                        read(old($Heap), o#4, _module.OwnedObject.owner))
                       && $IsAllocBox(read(old($Heap), o#4, _module.OwnedObject.owner), 
                        Tclass._module.Object(), 
                        old($Heap))
                     ==> $Unbox(read(old($Heap), o#4, _module.OwnedObject.nonvolatileVersion)): int
                       == $Unbox(read($Heap, o#4, _module.OwnedObject.nonvolatileVersion)): int)));
    assert {:id "id2002"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || Lit(true))));
    assert {:id "id2003"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (_module.Universe.globalBaseInv#canCall(old($Heap), _module.Object.universe(this))
                   ==> _module.Universe.globalBaseInv(old($Heap), _module.Object.universe(this))
                     || (forall o#5: ref :: 
                      { _module.Object.triggerAxioms(old($Heap), o#5) } 
                        { _module.Object.baseFieldsInv(old($Heap), o#5) } 
                        { _module.Object.universe(o#5) } 
                        { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#5)) } 
                      $Is(o#5, Tclass._module.Object())
                           && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#5))
                         ==> _module.Object.universe(o#5) == _module.Object.universe(this)
                           && o#5 != _module.Object.universe(this)
                           && _module.Object.baseFieldsInv(old($Heap), o#5)
                           && _module.Object.triggerAxioms(old($Heap), o#5)))));
    assert {:id "id2004"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (_module.Universe.globalInv#canCall(old($Heap), _module.Object.universe(this))
               ==> _module.Universe.globalInv(old($Heap), _module.Object.universe(this))
                 || (forall o#6: ref :: 
                  { _module.Object.inv(old($Heap), o#6) } 
                    { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#6)) } 
                  $Is(o#6, Tclass._module.Object())
                       && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#6))
                     ==> _module.Object.inv(old($Heap), o#6))));
    assert {:id "id2005"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#7: ref :: 
              { _module.Object.inv2(old($Heap), $Heap, o#7) } 
                { _module.Object.inv($Heap, o#7) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#7)) } 
              $Is(o#7, Tclass._module.Object())
                   && Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#7))
                 ==> ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv($Heap, o#7))
                   && ((forall $o: ref, $f: Field :: 
                      { read($Heap, $o, $f) } 
                      $o != null ==> $o == o#7 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                     || _module.Object.inv2(old($Heap), $Heap, o#7))));
    assert {:id "id2006"} _module.Object.goodPreAndLegalChanges#canCall(old($Heap), $Heap, this, running#0)
       ==> _module.Object.goodPreAndLegalChanges(old($Heap), $Heap, this, running#0)
         || (_module.Universe.legalTransition#canCall(old($Heap), $Heap, _module.Object.universe(this), running#0)
           ==> _module.Universe.legalTransition(old($Heap), $Heap, _module.Object.universe(this), running#0)
             || (forall o#8: ref :: 
              { _module.Object.inv($Heap, o#8) } 
                { Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
                { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#8)) } 
              $Is(o#8, Tclass._module.Object())
                   && 
                  Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                   && !Set#IsMember($Unbox(read(old($Heap), _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#8))
                 ==> _module.Object.inv($Heap, o#8)));
    assert {:id "id2007"} running#0 != null ==> running#0 != null;
    assert {:id "id2008"} (forall $o: ref, $f: Field :: true);
    assert {:id "id2009"} (forall $o: ref, $f: Field :: true);
    assume {:id "id2010"} _module.OwnedObject.inv2(old($Heap), $Heap, this)
       && _module.OwnedObject.inv($Heap, this);
    assert {:id "id2011"} _module.Object.inv2(old($Heap), $Heap, this);
    assert {:id "id2012"} _module.Object.inv($Heap, this);
}



procedure {:verboseName "MutexGuardU32.admissibility (call)"} Call$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap));
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  requires {:id "id2013"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  requires {:id "id2014"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (forall $o: ref, $f: Field :: 
        { read(current$Heap, $o, $f) } 
        $o != null
           ==> 
          $o == this
           ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f));
  requires {:id "id2015"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id2016"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                       || (forall o#9: ref :: 
                        { _module.Object.triggerAxioms(previous$Heap, o#9) } 
                          { _module.Object.baseFieldsInv(previous$Heap, o#9) } 
                          { _module.Object.universe(o#9) } 
                          { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#9)) } 
                        $Is(o#9, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#9))
                           ==> _module.Object.universe(o#9) == _module.Object.universe(this)
                             && o#9 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(previous$Heap, o#9)
                             && _module.Object.triggerAxioms(previous$Heap, o#9))))));
  requires {:id "id2017"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || Lit(true)))));
  requires {:id "id2018"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                     ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                       || (forall o#10: ref :: 
                        { _module.Object.triggerAxioms(current$Heap, o#10) } 
                          { _module.Object.baseFieldsInv(current$Heap, o#10) } 
                          { _module.Object.universe(o#10) } 
                          { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                            $Box(o#10)) } 
                        $Is(o#10, Tclass._module.Object())
                             && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                              $Box(o#10))
                           ==> _module.Object.universe(o#10) == _module.Object.universe(this)
                             && o#10 != _module.Object.universe(this)
                             && _module.Object.baseFieldsInv(current$Heap, o#10)
                             && _module.Object.triggerAxioms(current$Heap, o#10))))));
  requires {:id "id2019"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || Set#Subset($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set))));
  requires {:id "id2020"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (_module.Universe.baseLegalTransitionsSequence#canCall(previous$Heap, current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.baseLegalTransitionsSequence(previous$Heap, current$Heap, _module.Object.universe(this))
                   || (forall o#11: ref :: 
                    { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#11)) } 
                    $Is(o#11, Tclass._module.Object())
                         && 
                        !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#11))
                       ==> !$IsAllocBox($Box(o#11), Tclass._module.Object(), previous$Heap)))));
  requires {:id "id2021"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#12: ref :: 
                { _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12) } 
                  { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#12)) } 
                $Is(o#12, Tclass._module.Object())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                     && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#12))
                   ==> (forall $o: ref, $f: Field :: 
                      { read(current$Heap, $o, $f) } 
                      $o != null
                         ==> 
                        $o == o#12
                         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                     || _module.Object.sequenceInv2(previous$Heap, current$Heap, o#12))));
  requires {:id "id2022"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.legalTransitionsSequence#canCall(previous$Heap, 
              current$Heap, 
              _module.Object.universe(this), 
              Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
             ==> _module.Universe.legalTransitionsSequence(previous$Heap, 
                current$Heap, 
                _module.Object.universe(this), 
                Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
               || (forall o#13: ref :: 
                { $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int } 
                  { $Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#13)) } 
                $Is(o#13, Tclass._module.OwnedObject())
                     && 
                    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#13))
                     && $Is($Unbox(read(previous$Heap, o#13, _module.OwnedObject.owner)): ref, 
                      Tclass._module.Thread())
                   ==> 
                  !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                      read(previous$Heap, o#13, _module.OwnedObject.owner))
                     && $IsAllocBox(read(previous$Heap, o#13, _module.OwnedObject.owner), 
                      Tclass._module.Object(), 
                      previous$Heap)
                   ==> $Unbox(read(previous$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, o#13, _module.OwnedObject.nonvolatileVersion)): int)));
  requires {:id "id2023"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || Lit(true))));
  requires {:id "id2024"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (_module.Universe.globalBaseInv#canCall(previous$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(previous$Heap, _module.Object.universe(this))
                   || (forall o#14: ref :: 
                    { _module.Object.triggerAxioms(previous$Heap, o#14) } 
                      { _module.Object.baseFieldsInv(previous$Heap, o#14) } 
                      { _module.Object.universe(o#14) } 
                      { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#14)) } 
                    $Is(o#14, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#14))
                       ==> _module.Object.universe(o#14) == _module.Object.universe(this)
                         && o#14 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(previous$Heap, o#14)
                         && _module.Object.triggerAxioms(previous$Heap, o#14)))));
  requires {:id "id2025"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (_module.Universe.globalInv#canCall(previous$Heap, _module.Object.universe(this))
             ==> _module.Universe.globalInv(previous$Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.inv(previous$Heap, o#15) } 
                  { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.inv(previous$Heap, o#15))));
  requires {:id "id2026"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#16: ref :: 
            { _module.Object.inv2(previous$Heap, current$Heap, o#16) } 
              { _module.Object.inv(current$Heap, o#16) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv(current$Heap, o#16))
                 && ((forall $o: ref, $f: Field :: 
                    { read(current$Heap, $o, $f) } 
                    $o != null
                       ==> 
                      $o == o#16
                       ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
                   || _module.Object.inv2(previous$Heap, current$Heap, o#16))));
  requires {:id "id2027"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     ==> _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
       || (_module.Universe.legalTransition#canCall(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
         ==> _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0)
           || (forall o#17: ref :: 
            { _module.Object.inv(current$Heap, o#17) } 
              { Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
              { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#17)) } 
            $Is(o#17, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
                 && !Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#17))
               ==> _module.Object.inv(current$Heap, o#17)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  free ensures {:id "id2028"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
     && 
    _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
     && _module.OwnedObject.userInv2(previous$Heap, current$Heap, this)
     && ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
         != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
       ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref)
         && _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)
         && (var currOwner#0 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#0), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  free ensures {:id "id2029"} _module.OwnedObject.inv#canCall(current$Heap, this)
     && 
    _module.OwnedObject.inv(current$Heap, this)
     && 
    _module.OwnedObject.localInv(current$Heap, this)
     && _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "MutexGuardU32.admissibility (correctness)"} Impl$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, 
    current$Heap: Heap, 
    this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), previous$Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap))
   returns ($_reverifyPost: bool);
  free requires 16 == $FunctionContextHeight;
  free requires previous$Heap == $Heap
     && 
    $HeapSucc(previous$Heap, current$Heap)
     && $IsGoodHeap(current$Heap);
  requires $IsAlloc(running#0, Tclass._module.Thread(), previous$Heap);
  // user-defined preconditions
  free requires {:id "id2030"} _module.Object.goodPreAndLegalChanges#canCall(previous$Heap, current$Heap, this, running#0)
     && 
    _module.Object.goodPreAndLegalChanges(previous$Heap, current$Heap, this, running#0)
     && 
    Set#IsMember($Unbox(read(previous$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && (forall $o: ref, $f: Field :: 
      { read(current$Heap, $o, $f) } 
      $o != null
         ==> 
        $o == this
         ==> read(current$Heap, $o, $f) == read(previous$Heap, $o, $f))
     && _module.Universe.legalTransition(previous$Heap, current$Heap, _module.Object.universe(this), running#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     && (_module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       ==> _module.OwnedObject.inv#canCall(current$Heap, this));
  ensures {:id "id2031"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this) || Lit(true));
  ensures {:id "id2032"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.localInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.localInv2(previous$Heap, current$Heap, this)
           || _module.OwnedObject.localUserInv2(previous$Heap, current$Heap, this));
  ensures {:id "id2033"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             <= $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int);
  ensures {:id "id2034"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> Lit(true)));
  ensures {:id "id2035"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
                 == $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2036"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
               == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
             ==> 
            _module.OwnedObject.unchangedNonvolatileFields#canCall(previous$Heap, current$Heap, this)
             ==> _module.OwnedObject.unchangedNonvolatileFields(previous$Heap, current$Heap, this)
               || _module.OwnedObject.unchangedNonvolatileUserFields(previous$Heap, current$Heap, this)));
  ensures {:id "id2037"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || (_module.OwnedObject.sequenceInv2#canCall(previous$Heap, current$Heap, this)
         ==> _module.OwnedObject.sequenceInv2(previous$Heap, current$Heap, this)
           || ($Is($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref, 
              Tclass._module.OwnedObject())
             ==> (var oldOwner#1 := $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref; 
              !_module.OwnedObject.volatileOwns(oldOwner#1)
                   && $Unbox(read(previous$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                     == $Unbox(read(current$Heap, oldOwner#1, _module.OwnedObject.nonvolatileVersion)): int
                 ==> $Unbox(read(previous$Heap, this, _module.OwnedObject.nonvolatileVersion)): int
                   == $Unbox(read(current$Heap, this, _module.OwnedObject.nonvolatileVersion)): int)));
  ensures {:id "id2038"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || _module.OwnedObject.userInv2(previous$Heap, current$Heap, this);
  ensures {:id "id2039"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2040"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv2(previous$Heap, 
          current$Heap, 
          $Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2041"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> _module.Object.localInv(current$Heap, $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref));
  ensures {:id "id2042"} _module.OwnedObject.inv2#canCall(previous$Heap, current$Heap, this)
     ==> _module.OwnedObject.inv2(previous$Heap, current$Heap, this)
       || ($Unbox(read(previous$Heap, this, _module.OwnedObject.owner)): ref
           != $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref
         ==> (var currOwner#1 := $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref; 
          $IsAllocBox($Box(currOwner#1), Tclass._module.Object(), previous$Heap)
             ==> _module.Object.localInv2(previous$Heap, 
              current$Heap, 
              $Unbox(read(current$Heap, this, _module.OwnedObject.owner)): ref)));
  ensures {:id "id2043"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(this))));
  ensures {:id "id2044"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || _module.Object.baseFieldsInv(current$Heap, this)));
  ensures {:id "id2045"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || Lit(true))));
  ensures {:id "id2046"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || (_module.Object.objectGlobalBaseInv#canCall(current$Heap, this)
             ==> _module.Object.objectGlobalBaseInv(current$Heap, this)
               || (_module.Universe.globalBaseInv#canCall(current$Heap, _module.Object.universe(this))
                 ==> _module.Universe.globalBaseInv(current$Heap, _module.Object.universe(this))
                   || (forall o#28: ref :: 
                    { _module.Object.triggerAxioms(current$Heap, o#28) } 
                      { _module.Object.baseFieldsInv(current$Heap, o#28) } 
                      { _module.Object.universe(o#28) } 
                      { Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                        $Box(o#28)) } 
                    $Is(o#28, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(current$Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                          $Box(o#28))
                       ==> _module.Object.universe(o#28) == _module.Object.universe(this)
                         && o#28 != _module.Object.universe(this)
                         && _module.Object.baseFieldsInv(current$Heap, o#28)
                         && _module.Object.triggerAxioms(current$Heap, o#28)))));
  ensures {:id "id2047"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || (_module.OwnedObject.localInv#canCall(current$Heap, this)
         ==> _module.OwnedObject.localInv(current$Heap, this)
           || _module.OwnedObject.localUserInv(current$Heap, this));
  ensures {:id "id2048"} _module.OwnedObject.inv#canCall(current$Heap, this)
     ==> _module.OwnedObject.inv(current$Heap, this)
       || _module.OwnedObject.userInv(current$Heap, this);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32.admissibility (correctness)"} Impl$$_module.MutexGuardU32.admissibility(previous$Heap: Heap, current$Heap: Heap, this: ref, running#0: ref)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: admissibility, Impl$$_module.MutexGuardU32.admissibility
    $Heap := current$Heap;
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



procedure {:verboseName "MutexGuardU32._ctor (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap))
   returns (this: ref);
  free requires 19 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32._ctor (well-formedness)"} CheckWellFormed$$_module.MutexGuardU32.__ctor(universe#0: ref, running#0: ref, mutex#0: ref) returns (this: ref)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##running#0: ref;


    // AddMethodImpl: _ctor, CheckWellFormed$$_module.MutexGuardU32.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || ($o == mutex#0 && $f == _module.Mutex.locked)
           || ($o == mutex#0 && $f == _module.Mutex.guards)
           || ($o == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref
             && $f == _module.OwnedObject.owner)
           || ($o == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref
             && $f == _module.OwnedObject.nonvolatileVersion));
    assert {:id "id2049"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    assume _module.Universe.globalInv#canCall($Heap, universe#0);
    assume {:id "id2050"} _module.Universe.globalInv($Heap, universe#0);
    assert {:id "id2051"} universe#0 != null;
    assume {:id "id2052"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
    assert {:id "id2053"} universe#0 != null;
    assume {:id "id2054"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(mutex#0));
    assert {:id "id2055"} mutex#0 != null;
    assume {:id "id2056"} !$Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;
    assert {:id "id2057"} mutex#0 != null;
    assert {:id "id2058"} mutex#0 != null;
    assert {:id "id2059"} mutex#0 != null;
    assert {:id "id2060"} $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref != null;
    assert {:id "id2061"} mutex#0 != null;
    assert {:id "id2062"} $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref != null;
    havoc $Heap;
    assume (forall $o: ref :: 
      { $Heap[$o] } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> $Heap[$o] == old($Heap)[$o]
           || 
          $o == universe#0
           || $o == mutex#0
           || $o == mutex#0
           || $o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref
           || $o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref);
    assume (forall $o: ref, $f: Field :: 
      { read($Heap, $o, $f) } 
      $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
         ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
           || 
          $o == universe#0
           || ($o == mutex#0 && $f == _module.Mutex.locked)
           || ($o == mutex#0 && $f == _module.Mutex.guards)
           || ($o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref
             && $f == _module.OwnedObject.owner)
           || ($o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref
             && $f == _module.OwnedObject.nonvolatileVersion));
    assume $HeapSucc(old($Heap), $Heap);
    havoc this;
    assume this != null
       && 
      $Is(this, Tclass._module.MutexGuardU32())
       && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap);
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(this), Tclass._module.Object?(), $Heap);
    assume _module.Object.objectGlobalInv#canCall($Heap, this);
    assume {:id "id2063"} _module.Object.objectGlobalInv($Heap, this);
    assert {:id "id2064"} universe#0 != null;
    // assume allocatedness for receiver argument to function
    assume $IsAllocBox($Box(universe#0), Tclass._module.Universe?(), $Heap);
    ##running#0 := running#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##running#0, Tclass._module.Thread(), $Heap);
    assert {:id "id2065"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id2066"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    assume _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id2067"} _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0);
    assume {:id "id2068"} _module.Object.universe(this) == universe#0;
    assume {:id "id2069"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
    assume {:id "id2070"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref == mutex#0;
    assert {:id "id2071"} mutex#0 != null;
    assume {:id "id2072"} $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref
       == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref;
    assert {:id "id2073"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assume {:id "id2074"} $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
        _module.Mutex.locked)): bool;
    assert {:id "id2075"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id2076"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume {:id "id2077"} $Unbox(read($Heap, 
          $Unbox(read($Heap, 
              $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
              _module.Mutex.data)): ref, 
          _module.OwnedObject.owner)): ref
       == this;
    assert {:id "id2078"} universe#0 != null;
    assert {:id "id2079"} universe#0 != null;
    assert {:id "id2080"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assume {:id "id2081"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
      Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
        Set#UnionOne(Set#Empty(): Set, $Box(this))));
}



procedure {:verboseName "MutexGuardU32._ctor (call)"} Call$$_module.MutexGuardU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap))
   returns (this: ref
       where this != null
         && 
        $Is(this, Tclass._module.MutexGuardU32())
         && $IsAlloc(this, Tclass._module.MutexGuardU32(), $Heap));
  // user-defined preconditions
  requires {:id "id2082"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true));
  requires {:id "id2083"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
         ==> _module.Universe.globalBaseInv($Heap, universe#0)
           || (forall o#0: ref :: 
            { _module.Object.triggerAxioms($Heap, o#0) } 
              { _module.Object.baseFieldsInv($Heap, o#0) } 
              { _module.Object.universe(o#0) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0)) } 
            $Is(o#0, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#0))
               ==> _module.Object.universe(o#0) == universe#0
                 && o#0 != universe#0
                 && _module.Object.baseFieldsInv($Heap, o#0)
                 && _module.Object.triggerAxioms($Heap, o#0)));
  requires {:id "id2084"} _module.Universe.globalInv#canCall($Heap, universe#0)
     ==> _module.Universe.globalInv($Heap, universe#0)
       || (forall o#1: ref :: 
        { _module.Object.inv($Heap, o#1) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1)) } 
        $Is(o#1, Tclass._module.Object())
             && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#1))
           ==> _module.Object.inv($Heap, o#1));
  requires {:id "id2085"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  requires {:id "id2086"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(mutex#0));
  requires {:id "id2087"} !$Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  free ensures {:id "id2088"} _module.Object.objectGlobalInv#canCall($Heap, this)
     && 
    _module.Object.objectGlobalInv($Heap, this)
     && 
    Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
      $Box(this))
     && _module.Universe.globalInv($Heap, _module.Object.universe(this));
  free ensures {:id "id2089"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
     && 
    _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
     && _module.Universe.globalInv(old($Heap), universe#0)
     && (forall o#11: ref :: 
      { _module.Object.inv2(old($Heap), $Heap, o#11) } 
        { _module.Object.inv($Heap, o#11) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11)) } 
      $Is(o#11, Tclass._module.Object())
           && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#11))
         ==> ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv($Heap, o#11))
           && ((forall $o: ref, $f: Field :: 
              { read($Heap, $o, $f) } 
              $o != null ==> $o == o#11 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
             || _module.Object.inv2(old($Heap), $Heap, o#11)))
     && (forall o#12: ref :: 
      { _module.Object.inv($Heap, o#12) } 
        { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12)) } 
      $Is(o#12, Tclass._module.Object())
           && 
          Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#12))
           && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#12))
         ==> _module.Object.inv($Heap, o#12));
  free ensures true;
  ensures {:id "id2090"} _module.Object.universe(this) == universe#0;
  ensures {:id "id2091"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id2092"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref == mutex#0;
  ensures {:id "id2093"} $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref
     == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref;
  ensures {:id "id2094"} $Unbox(read($Heap, 
      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
      _module.Mutex.locked)): bool;
  ensures {:id "id2095"} $Unbox(read($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref, 
        _module.OwnedObject.owner)): ref
     == this;
  free ensures true;
  ensures {:id "id2096"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // constructor allocates the object
  ensures !$Unbox(read(old($Heap), this, alloc)): bool;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || $o == mutex#0
         || $o == mutex#0
         || $o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref
         || $o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref);
  // frame condition: field granularity
  free ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || 
        $o == universe#0
         || ($o == mutex#0 && $f == _module.Mutex.locked)
         || ($o == mutex#0 && $f == _module.Mutex.guards)
         || ($o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref
           && $f == _module.OwnedObject.owner)
         || ($o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref
           && $f == _module.OwnedObject.nonvolatileVersion));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "MutexGuardU32._ctor (correctness)"} Impl$$_module.MutexGuardU32.__ctor(universe#0: ref
       where $Is(universe#0, Tclass._module.Universe())
         && $IsAlloc(universe#0, Tclass._module.Universe(), $Heap), 
    running#0: ref
       where $Is(running#0, Tclass._module.Thread())
         && $IsAlloc(running#0, Tclass._module.Thread(), $Heap), 
    mutex#0: ref
       where $Is(mutex#0, Tclass._module.Mutex())
         && $IsAlloc(mutex#0, Tclass._module.Mutex(), $Heap))
   returns (this: ref, $_reverifyPost: bool);
  free requires 19 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2097"} _module.Universe.globalInv#canCall($Heap, universe#0)
     && 
    _module.Universe.globalInv($Heap, universe#0)
     && 
    _module.Universe.globalBaseInv($Heap, universe#0)
     && (forall o#14: ref :: 
      { _module.Object.inv($Heap, o#14) } 
        { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14)) } 
      $Is(o#14, Tclass._module.Object())
           && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#14))
         ==> _module.Object.inv($Heap, o#14));
  requires {:id "id2098"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(running#0));
  requires {:id "id2099"} Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(mutex#0));
  requires {:id "id2100"} !$Unbox(read($Heap, mutex#0, _module.Mutex.locked)): bool;
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.Object.objectGlobalInv#canCall($Heap, this)
     && (_module.Object.objectGlobalInv($Heap, this)
       ==> _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0));
  ensures {:id "id2101"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
        $Box(this));
  ensures {:id "id2102"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || Lit(true)));
  ensures {:id "id2103"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (_module.Universe.globalBaseInv#canCall($Heap, _module.Object.universe(this))
             ==> _module.Universe.globalBaseInv($Heap, _module.Object.universe(this))
               || (forall o#15: ref :: 
                { _module.Object.triggerAxioms($Heap, o#15) } 
                  { _module.Object.baseFieldsInv($Heap, o#15) } 
                  { _module.Object.universe(o#15) } 
                  { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                    $Box(o#15)) } 
                $Is(o#15, Tclass._module.Object())
                     && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                      $Box(o#15))
                   ==> _module.Object.universe(o#15) == _module.Object.universe(this)
                     && o#15 != _module.Object.universe(this)
                     && _module.Object.baseFieldsInv($Heap, o#15)
                     && _module.Object.triggerAxioms($Heap, o#15))));
  ensures {:id "id2104"} _module.Object.objectGlobalInv#canCall($Heap, this)
     ==> _module.Object.objectGlobalInv($Heap, this)
       || (_module.Universe.globalInv#canCall($Heap, _module.Object.universe(this))
         ==> _module.Universe.globalInv($Heap, _module.Object.universe(this))
           || (forall o#16: ref :: 
            { _module.Object.inv($Heap, o#16) } 
              { Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                $Box(o#16)) } 
            $Is(o#16, Tclass._module.Object())
                 && Set#IsMember($Unbox(read($Heap, _module.Object.universe(this), _module.Universe.content)): Set, 
                  $Box(o#16))
               ==> _module.Object.inv($Heap, o#16)));
  ensures {:id "id2105"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true))));
  ensures {:id "id2106"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
                 ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
                   || (forall o#17: ref :: 
                    { _module.Object.triggerAxioms(old($Heap), o#17) } 
                      { _module.Object.baseFieldsInv(old($Heap), o#17) } 
                      { _module.Object.universe(o#17) } 
                      { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17)) } 
                    $Is(o#17, Tclass._module.Object())
                         && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#17))
                       ==> _module.Object.universe(o#17) == universe#0
                         && o#17 != universe#0
                         && _module.Object.baseFieldsInv(old($Heap), o#17)
                         && _module.Object.triggerAxioms(old($Heap), o#17)))));
  ensures {:id "id2107"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0) || Lit(true))));
  ensures {:id "id2108"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (_module.Universe.globalBaseInv#canCall($Heap, universe#0)
                 ==> _module.Universe.globalBaseInv($Heap, universe#0)
                   || (forall o#18: ref :: 
                    { _module.Object.triggerAxioms($Heap, o#18) } 
                      { _module.Object.baseFieldsInv($Heap, o#18) } 
                      { _module.Object.universe(o#18) } 
                      { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18)) } 
                    $Is(o#18, Tclass._module.Object())
                         && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#18))
                       ==> _module.Object.universe(o#18) == universe#0
                         && o#18 != universe#0
                         && _module.Object.baseFieldsInv($Heap, o#18)
                         && _module.Object.triggerAxioms($Heap, o#18)))));
  ensures {:id "id2109"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || Set#Subset($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
                $Unbox(read($Heap, universe#0, _module.Universe.content)): Set)));
  ensures {:id "id2110"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (_module.Universe.baseLegalTransitionsSequence#canCall(old($Heap), $Heap, universe#0)
             ==> _module.Universe.baseLegalTransitionsSequence(old($Heap), $Heap, universe#0)
               || (forall o#19: ref :: 
                { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19)) } 
                $Is(o#19, Tclass._module.Object())
                     && 
                    !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#19))
                     && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#19))
                   ==> !$IsAllocBox($Box(o#19), Tclass._module.Object(), old($Heap)))));
  ensures {:id "id2111"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#20: ref :: 
            { _module.Object.sequenceInv2(old($Heap), $Heap, o#20) } 
              { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20)) } 
            $Is(o#20, Tclass._module.Object())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#20))
                 && Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#20))
               ==> (forall $o: ref, $f: Field :: 
                  { read($Heap, $o, $f) } 
                  $o != null ==> $o == o#20 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
                 || _module.Object.sequenceInv2(old($Heap), $Heap, o#20)));
  ensures {:id "id2112"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.legalTransitionsSequence#canCall(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
         ==> _module.Universe.legalTransitionsSequence(old($Heap), $Heap, universe#0, Set#UnionOne(Set#Empty(): Set, $Box(running#0)))
           || (forall o#21: ref :: 
            { $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int } 
              { $Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21)) } 
            $Is(o#21, Tclass._module.OwnedObject())
                 && 
                Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#21))
                 && $Is($Unbox(read(old($Heap), o#21, _module.OwnedObject.owner)): ref, 
                  Tclass._module.Thread())
               ==> 
              !Set#IsMember(Set#UnionOne(Set#Empty(): Set, $Box(running#0)), 
                  read(old($Heap), o#21, _module.OwnedObject.owner))
                 && $IsAllocBox(read(old($Heap), o#21, _module.OwnedObject.owner), 
                  Tclass._module.Object(), 
                  old($Heap))
               ==> $Unbox(read(old($Heap), o#21, _module.OwnedObject.nonvolatileVersion)): int
                 == $Unbox(read($Heap, o#21, _module.OwnedObject.nonvolatileVersion)): int));
  ensures {:id "id2113"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0) || Lit(true)));
  ensures {:id "id2114"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (_module.Universe.globalBaseInv#canCall(old($Heap), universe#0)
             ==> _module.Universe.globalBaseInv(old($Heap), universe#0)
               || (forall o#22: ref :: 
                { _module.Object.triggerAxioms(old($Heap), o#22) } 
                  { _module.Object.baseFieldsInv(old($Heap), o#22) } 
                  { _module.Object.universe(o#22) } 
                  { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22)) } 
                $Is(o#22, Tclass._module.Object())
                     && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#22))
                   ==> _module.Object.universe(o#22) == universe#0
                     && o#22 != universe#0
                     && _module.Object.baseFieldsInv(old($Heap), o#22)
                     && _module.Object.triggerAxioms(old($Heap), o#22))));
  ensures {:id "id2115"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (_module.Universe.globalInv#canCall(old($Heap), universe#0)
         ==> _module.Universe.globalInv(old($Heap), universe#0)
           || (forall o#23: ref :: 
            { _module.Object.inv(old($Heap), o#23) } 
              { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23)) } 
            $Is(o#23, Tclass._module.Object())
                 && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#23))
               ==> _module.Object.inv(old($Heap), o#23)));
  ensures {:id "id2116"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#24: ref :: 
        { _module.Object.inv2(old($Heap), $Heap, o#24) } 
          { _module.Object.inv($Heap, o#24) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24)) } 
        $Is(o#24, Tclass._module.Object())
             && Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#24))
           ==> ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv($Heap, o#24))
             && ((forall $o: ref, $f: Field :: 
                { read($Heap, $o, $f) } 
                $o != null ==> $o == o#24 ==> read($Heap, $o, $f) == read(old($Heap), $o, $f))
               || _module.Object.inv2(old($Heap), $Heap, o#24)));
  ensures {:id "id2117"} _module.Universe.legalTransition#canCall(old($Heap), $Heap, universe#0, running#0)
     ==> _module.Universe.legalTransition(old($Heap), $Heap, universe#0, running#0)
       || (forall o#25: ref :: 
        { _module.Object.inv($Heap, o#25) } 
          { Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
          { Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25)) } 
        $Is(o#25, Tclass._module.Object())
             && 
            Set#IsMember($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, $Box(o#25))
             && !Set#IsMember($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, $Box(o#25))
           ==> _module.Object.inv($Heap, o#25));
  free ensures true;
  ensures {:id "id2118"} _module.Object.universe(this) == universe#0;
  ensures {:id "id2119"} $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == running#0;
  ensures {:id "id2120"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref == mutex#0;
  ensures {:id "id2121"} $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref
     == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref;
  ensures {:id "id2122"} $Unbox(read($Heap, 
      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
      _module.Mutex.locked)): bool;
  ensures {:id "id2123"} $Unbox(read($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref, 
        _module.OwnedObject.owner)): ref
     == this;
  free ensures true;
  ensures {:id "id2124"} Set#Equal($Unbox(read($Heap, universe#0, _module.Universe.content)): Set, 
    Set#Union($Unbox(read(old($Heap), universe#0, _module.Universe.content)): Set, 
      Set#UnionOne(Set#Empty(): Set, $Box(this))));
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]
         || 
        $o == universe#0
         || $o == mutex#0
         || $o == mutex#0
         || $o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref
         || $o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref);
  // frame condition: field granularity
  free ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || 
        $o == universe#0
         || ($o == mutex#0 && $f == _module.Mutex.locked)
         || ($o == mutex#0 && $f == _module.Mutex.guards)
         || ($o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref
           && $f == _module.OwnedObject.owner)
         || ($o == $Unbox(read(old($Heap), mutex#0, _module.Mutex.data)): ref
           && $f == _module.OwnedObject.nonvolatileVersion));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "MutexGuardU32._ctor (correctness)"} Impl$$_module.MutexGuardU32.__ctor(universe#0: ref, running#0: ref, mutex#0: ref)
   returns (this: ref, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var this.nonvolatileVersion: int;
  var this.owner: ref;
  var this.universe: ref;
  var this.mutex: ref;
  var this.data: ref;
  var defass#this.owner: bool;
  var defass#this.universe: bool;
  var defass#this.mutex: bool;
  var defass#this.data: bool;
  var $rhs#0: bool;
  var $rhs#1: Set;
  var $rhs#2: ref;
  var $obj0: ref;
  var $rhs##0: int;
  var last##0: int;
  var running##0: ref;

    // AddMethodImpl: _ctor, Impl$$_module.MutexGuardU32.__ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool
         ==> $o == universe#0
           || ($o == mutex#0 && $f == _module.Mutex.locked)
           || ($o == mutex#0 && $f == _module.Mutex.guards)
           || ($o == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref
             && $f == _module.OwnedObject.owner)
           || ($o == $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref
             && $f == _module.OwnedObject.nonvolatileVersion));
    $_reverifyPost := false;
    // ----- divided block before new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(578,3)
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(579,19)
    assume true;
    assume true;
    this.universe := universe#0;
    defass#this.universe := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(580,16)
    assume true;
    assume true;
    this.owner := running#0;
    defass#this.owner := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(581,16)
    assume true;
    assume true;
    this.mutex := mutex#0;
    defass#this.mutex := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(582,15)
    assume true;
    assert {:id "id2128"} mutex#0 != null;
    assume true;
    this.data := $Unbox(read($Heap, mutex#0, _module.Mutex.data)): ref;
    defass#this.data := true;
    // ----- new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(578,3)
    assert {:id "id2130"} defass#this.owner;
    assert {:id "id2131"} defass#this.universe;
    assert {:id "id2132"} defass#this.mutex;
    assert {:id "id2133"} defass#this.data;
    assume this != null && $Is(this, Tclass._module.MutexGuardU32?());
    assume !$Unbox(read($Heap, this, alloc)): bool;
    assume $Unbox(read($Heap, this, _module.OwnedObject.nonvolatileVersion)): int
       == this.nonvolatileVersion;
    assume $Unbox(read($Heap, this, _module.OwnedObject.owner)): ref == this.owner;
    assume _module.Object.universe(this) == this.universe;
    assume $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref == this.mutex;
    assume $Unbox(read($Heap, this, _module.MutexGuardU32.data)): ref == this.data;
    $Heap := update($Heap, this, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    // ----- divided block after new; ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(578,3)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(584,9)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2134"} (forall $o: ref, $f: Field :: 
      $o != null
           && $Unbox(read($Heap, $o, alloc)): bool
           && $o == _module.Object.universe(this)
         ==> $_ModifiesFrame[$o, $f]);
    call {:id "id2135"} Call$$_module.Object.join(this);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(586,23)
    assert {:id "id2136"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assume true;
    assert {:id "id2137"} $_ModifiesFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.locked];
    assume true;
    $rhs#0 := Lit(true);
    $Heap := update($Heap, 
      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
      _module.Mutex.locked, 
      $Box($rhs#0));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(587,23)
    assert {:id "id2140"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assume true;
    assert {:id "id2141"} $_ModifiesFrame[$Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, _module.Mutex.guards];
    assume true;
    $rhs#1 := Set#UnionOne(Set#Empty(): Set, $Box(this));
    $Heap := update($Heap, 
      $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
      _module.Mutex.guards, 
      $Box($rhs#1));
    assume $IsGoodHeap($Heap);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(589,27)
    assert {:id "id2144"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id2145"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    assert {:id "id2146"} $_ModifiesFrame[$Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
        _module.Mutex.data)): ref, _module.OwnedObject.owner];
    assume true;
    $rhs#2 := this;
    $Heap := update($Heap, 
      $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref, 
      _module.OwnedObject.owner, 
      $Box($rhs#2));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(590,54)
    assert {:id "id2149"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id2150"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    $obj0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
        _module.Mutex.data)): ref;
    assert {:id "id2151"} $_ModifiesFrame[$obj0, _module.OwnedObject.nonvolatileVersion];
    // TrCallStmt: Adding lhs with type int
    // TrCallStmt: Before ProcessCallStmt
    assert {:id "id2152"} $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref != null;
    assert {:id "id2153"} $Unbox(read($Heap, 
          $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
          _module.Mutex.data)): ref
       != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    last##0 := $Unbox(read($Heap, 
        $Unbox(read($Heap, 
            $Unbox(read($Heap, this, _module.MutexGuardU32.mutex)): ref, 
            _module.Mutex.data)): ref, 
        _module.OwnedObject.nonvolatileVersion)): int;
    call {:id "id2154"} $rhs##0 := Call$$_module.__default.BumpVersion(last##0);
    // TrCallStmt: After ProcessCallStmt
    $Heap := update($Heap, $obj0, _module.OwnedObject.nonvolatileVersion, $Box($rhs##0));
    assume $IsGoodHeap($Heap);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/concurrency/11-MutexGuard2.legacy.dfy(592,17)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    assert {:id "id2156"} universe#0 != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    running##0 := running#0;
    assert {:id "id2157"} $IsAlloc(universe#0, Tclass._module.Universe(), old($Heap));
    assert {:id "id2158"} $IsAlloc(running#0, Tclass._module.Thread(), old($Heap));
    call {:id "id2159"} Call$$_module.Universe.lci(old($Heap), $Heap, universe#0, running##0);
    // TrCallStmt: After ProcessCallStmt
}



// $Is axiom for non-null type _module.MutexGuardU32
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._module.MutexGuardU32()) } 
    { $Is(c#0, Tclass._module.MutexGuardU32?()) } 
  $Is(c#0, Tclass._module.MutexGuardU32())
     <==> $Is(c#0, Tclass._module.MutexGuardU32?()) && c#0 != null);

// $IsAlloc axiom for non-null type _module.MutexGuardU32
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._module.MutexGuardU32(), $h) } 
    { $IsAlloc(c#0, Tclass._module.MutexGuardU32?(), $h) } 
  $IsAlloc(c#0, Tclass._module.MutexGuardU32(), $h)
     <==> $IsAlloc(c#0, Tclass._module.MutexGuardU32?(), $h));

// type axiom for trait parent: Thread? extends Object?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Thread?()) } 
  $Is($o, Tclass._module.Thread?()) ==> $Is($o, Tclass._module.Object?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Thread?()) } 
  $IsBox(bx, Tclass._module.Thread?()) ==> $IsBox(bx, Tclass._module.Object?()));

// allocation axiom for trait parent: Thread? extends Object?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.Thread?(), $heap) } 
  $IsAlloc($o, Tclass._module.Thread?(), $heap)
     ==> $IsAlloc($o, Tclass._module.Object?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.Thread?(), $h) } 
  $IsAllocBox(bx, Tclass._module.Thread?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.Object?(), $h));

// type axiom for trait parent: OwnedObject? extends Object?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedObject?()) } 
  $Is($o, Tclass._module.OwnedObject?()) ==> $Is($o, Tclass._module.Object?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedObject?()) } 
  $IsBox(bx, Tclass._module.OwnedObject?())
     ==> $IsBox(bx, Tclass._module.Object?()));

// allocation axiom for trait parent: OwnedObject? extends Object?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedObject?(), $heap) } 
  $IsAlloc($o, Tclass._module.OwnedObject?(), $heap)
     ==> $IsAlloc($o, Tclass._module.Object?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h) } 
  $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.Object?(), $h));

// type axiom for trait parent: OwnedU32? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.OwnedU32?()) } 
  $Is($o, Tclass._module.OwnedU32?()) ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.OwnedU32?()) } 
  $IsBox(bx, Tclass._module.OwnedU32?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: OwnedU32? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.OwnedU32?(), $heap) } 
  $IsAlloc($o, Tclass._module.OwnedU32?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.OwnedU32?(), $h) } 
  $IsAllocBox(bx, Tclass._module.OwnedU32?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

// type axiom for trait parent: Mutex? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Mutex?()) } 
  $Is($o, Tclass._module.Mutex?()) ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Mutex?()) } 
  $IsBox(bx, Tclass._module.Mutex?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: Mutex? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.Mutex?(), $heap) } 
  $IsAlloc($o, Tclass._module.Mutex?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.Mutex?(), $h) } 
  $IsAllocBox(bx, Tclass._module.Mutex?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

// type axiom for trait parent: MutexGuardU32? extends OwnedObject?
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.MutexGuardU32?()) } 
  $Is($o, Tclass._module.MutexGuardU32?())
     ==> $Is($o, Tclass._module.OwnedObject?()));

axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.MutexGuardU32?()) } 
  $IsBox(bx, Tclass._module.MutexGuardU32?())
     ==> $IsBox(bx, Tclass._module.OwnedObject?()));

// allocation axiom for trait parent: MutexGuardU32? extends OwnedObject?
axiom (forall $o: ref, $heap: Heap :: 
  { $IsAlloc($o, Tclass._module.MutexGuardU32?(), $heap) } 
  $IsAlloc($o, Tclass._module.MutexGuardU32?(), $heap)
     ==> $IsAlloc($o, Tclass._module.OwnedObject?(), $heap));

axiom (forall bx: Box, $h: Heap :: 
  { $IsAllocBox(bx, Tclass._module.MutexGuardU32?(), $h) } 
  $IsAllocBox(bx, Tclass._module.MutexGuardU32?(), $h) && $IsGoodHeap($h)
     ==> $IsAllocBox(bx, Tclass._module.OwnedObject?(), $h));

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$Universe: TyTagFamily;

const unique tytagFamily$Thread: TyTagFamily;

const unique tytagFamily$Mutex: TyTagFamily;

const unique tytagFamily$MutexGuardU32: TyTagFamily;

const unique tytagFamily$Object: TyTagFamily;

const unique tytagFamily$OwnedU32: TyTagFamily;

const unique tytagFamily$OwnedObject: TyTagFamily;

const unique field$content: NameFamily;

const unique field$owner: NameFamily;

const unique field$mutex: NameFamily;

const unique field$locked: NameFamily;

const unique field$guards: NameFamily;

const unique field$data: NameFamily;

const unique field$nonvolatileVersion: NameFamily;

const unique field$value: NameFamily;
