(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._module.Universe () T@U)
(declare-fun Tagclass._module.NonOwnedObject () T@U)
(declare-fun Tagclass._module.OwnedObject () T@U)
(declare-fun class._module.Universe? () T@U)
(declare-fun Tagclass._module.Universe? () T@U)
(declare-fun Tagclass._module.Object () T@U)
(declare-fun Tagclass._module.Thread () T@U)
(declare-fun Tagclass._module.Object? () T@U)
(declare-fun Tagclass._module.NonOwnedObject? () T@U)
(declare-fun class._module.OwnedObject? () T@U)
(declare-fun Tagclass._module.OwnedObject? () T@U)
(declare-fun Tagclass._module.Thread? () T@U)
(declare-fun class._module.AtomicCounter? () T@U)
(declare-fun Tagclass._module.AtomicCounter? () T@U)
(declare-fun Tagclass._module.AtomicCounter () T@U)
(declare-fun class._module.DoubleReadMethod? () T@U)
(declare-fun Tagclass._module.DoubleReadMethod? () T@U)
(declare-fun Tagclass._module.DoubleReadMethod () T@U)
(declare-fun tytagFamily$Universe () T@U)
(declare-fun tytagFamily$NonOwnedObject () T@U)
(declare-fun tytagFamily$OwnedObject () T@U)
(declare-fun tytagFamily$Object () T@U)
(declare-fun tytagFamily$Thread () T@U)
(declare-fun tytagFamily$AtomicCounter () T@U)
(declare-fun tytagFamily$DoubleReadMethod () T@U)
(declare-fun field$content () T@U)
(declare-fun field$owner () T@U)
(declare-fun field$closed () T@U)
(declare-fun field$value () T@U)
(declare-fun field$programCounter () T@U)
(declare-fun field$counter () T@U)
(declare-fun field$initial_value () T@U)
(declare-fun field$final_value () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Universe.globalBaseInv (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.Universe.globalBaseInv#canCall| (T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Universe () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun _module.Object.universe (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.Universe.content () T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tclass._module.Object () T@U)
(declare-fun _module.OwnedObject.closed () T@U)
(declare-fun _module.OwnedObject.owner () T@U)
(declare-fun Tclass._module.OwnedObject () T@U)
(declare-fun Tclass._module.Thread () T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun implements$_module.NonOwnedObject (T@U) Bool)
(declare-fun Tclass._module.Thread? () T@U)
(declare-fun implements$_module.OwnedObject (T@U) Bool)
(declare-fun Tclass._module.AtomicCounter? () T@U)
(declare-fun Tclass._module.DoubleReadMethod? () T@U)
(declare-fun _module.DoubleReadMethod.localUserInv (T@U T@U) Bool)
(declare-fun |_module.DoubleReadMethod.localUserInv#canCall| (T@U T@U) Bool)
(declare-fun Tclass._module.DoubleReadMethod () T@U)
(declare-fun _module.DoubleReadMethod.counter () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun _module.DoubleReadMethod.programCounter () T@U)
(declare-fun _module.DoubleReadMethod.initial__value () T@U)
(declare-fun _module.AtomicCounter.value () T@U)
(declare-fun _module.DoubleReadMethod.final__value () T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun _module.Universe.globalInv (T@U T@U) Bool)
(declare-fun |_module.Universe.globalInv#canCall| (T@U T@U) Bool)
(declare-fun _module.Object.inv (T@U T@U) Bool)
(declare-fun |_module.Object.inv#canCall| (T@U T@U) Bool)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.OwnedObject? () T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass._module.NonOwnedObject? () T@U)
(declare-fun Tclass._module.Object? () T@U)
(declare-fun Tclass._module.Universe? () T@U)
(declare-fun Tclass._module.NonOwnedObject () T@U)
(declare-fun Tclass._module.AtomicCounter () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.OwnedObject.baseUserInv (T@U T@U) Bool)
(declare-fun _module.AtomicCounter.baseUserInv (T@U T@U) Bool)
(declare-fun |_module.AtomicCounter.baseUserInv#canCall| (T@U T@U) Bool)
(declare-fun _module.OwnedObject.localUserInv (T@U T@U) Bool)
(declare-fun _module.AtomicCounter.localUserInv (T@U T@U) Bool)
(declare-fun |_module.AtomicCounter.localUserInv#canCall| (T@U T@U) Bool)
(declare-fun _module.OwnedObject.userInv (T@U T@U) Bool)
(declare-fun _module.AtomicCounter.userInv (T@U T@U) Bool)
(declare-fun |_module.AtomicCounter.userInv#canCall| (T@U T@U) Bool)
(declare-fun _module.DoubleReadMethod.userInv (T@U T@U) Bool)
(declare-fun |_module.DoubleReadMethod.userInv#canCall| (T@U T@U) Bool)
(declare-fun _module.DoubleReadMethod.baseUserInv (T@U T@U) Bool)
(declare-fun |_module.DoubleReadMethod.baseUserInv#canCall| (T@U T@U) Bool)
(declare-fun _module.Object.localInv (T@U T@U) Bool)
(declare-fun _module.OwnedObject.localInv (T@U T@U) Bool)
(declare-fun |_module.OwnedObject.localInv#canCall| (T@U T@U) Bool)
(declare-fun _module.Thread.localInv (T@U T@U) Bool)
(declare-fun |_module.Thread.localInv#canCall| (T@U T@U) Bool)
(declare-fun _module.OwnedObject.inv (T@U T@U) Bool)
(declare-fun |_module.OwnedObject.inv#canCall| (T@U T@U) Bool)
(declare-fun _module.Thread.inv (T@U T@U) Bool)
(declare-fun |_module.Thread.inv#canCall| (T@U T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun _module.Universe.globalInv2 (T@U T@U T@U) Bool)
(declare-fun _module.Object.localInv2 (T@U T@U T@U) Bool)
(declare-fun _module.Object.inv2 (T@U T@U T@U) Bool)
(declare-fun _module.OwnedObject.localInv2 (T@U T@U T@U) Bool)
(declare-fun _module.OwnedObject.inv2 (T@U T@U T@U) Bool)
(declare-fun _module.OwnedObject.userFieldsUnchanged (T@U T@U T@U) Bool)
(declare-fun _module.OwnedObject.localUserInv2 (T@U T@U T@U) Bool)
(declare-fun _module.OwnedObject.userInv2 (T@U T@U T@U) Bool)
(declare-fun _module.Thread.localInv2 (T@U T@U T@U) Bool)
(declare-fun _module.Thread.inv2 (T@U T@U T@U) Bool)
(declare-fun _module.AtomicCounter.userFieldsUnchanged (T@U T@U T@U) Bool)
(declare-fun _module.AtomicCounter.localUserInv2 (T@U T@U T@U) Bool)
(declare-fun _module.AtomicCounter.userInv2 (T@U T@U T@U) Bool)
(declare-fun _module.DoubleReadMethod.userFieldsUnchanged (T@U T@U T@U) Bool)
(declare-fun _module.DoubleReadMethod.localUserInv2 (T@U T@U T@U) Bool)
(declare-fun _module.DoubleReadMethod.userInv2 (T@U T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.AtomicCounter.userFieldsOwnedBy (T@U T@U T@U) Bool)
(declare-fun |_module.AtomicCounter.userFieldsOwnedBy#canCall| (T@U T@U T@U) Bool)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |_module.AtomicCounter.userFieldsUnchanged#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.AtomicCounter.localUserInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.DoubleReadMethod.localUserInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.OwnedObject.localInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.OwnedObject.localUserInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.Thread.localInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.DoubleReadMethod.userFieldsUnchanged#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.Thread.inv2#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.OwnedObject.userFieldsOwnedBy (T@U T@U T@U) Bool)
(declare-fun |_module.AtomicCounter.userInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.DoubleReadMethod.userFieldsOwnedBy (T@U T@U T@U) Bool)
(declare-fun |_module.DoubleReadMethod.userFieldsOwnedBy#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.DoubleReadMethod.userInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.OwnedObject.inv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.OwnedObject.userFieldsOwnedBy#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.Object.baseInv#canCall| (T@U T@U) Bool)
(declare-fun _module.Object.baseInv (T@U T@U) Bool)
(declare-fun |_module.OwnedObject.baseUserInv#canCall| (T@U T@U) Bool)
(declare-fun |_module.OwnedObject.localUserInv#canCall| (T@U T@U) Bool)
(declare-fun _module.Object.objectGlobalInv (T@U T@U) Bool)
(declare-fun |_module.Object.objectGlobalInv#canCall| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun |_module.OwnedObject.userInv#canCall| (T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun implements$_module.Universe (T@U) Bool)
(declare-fun implements$_module.Object (T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#97| (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |_module.Universe.globalInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.Object.inv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.OwnedObject.userInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.OwnedObject.userFieldsUnchanged#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.Object.localInv2#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.Object.localInv#canCall| (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSet alloc allocName Tagclass._module.Universe Tagclass._module.NonOwnedObject Tagclass._module.OwnedObject class._module.Universe? Tagclass._module.Universe? Tagclass._module.Object Tagclass._module.Thread Tagclass._module.Object? Tagclass._module.NonOwnedObject? class._module.OwnedObject? Tagclass._module.OwnedObject? Tagclass._module.Thread? class._module.AtomicCounter? Tagclass._module.AtomicCounter? Tagclass._module.AtomicCounter class._module.DoubleReadMethod? Tagclass._module.DoubleReadMethod? Tagclass._module.DoubleReadMethod tytagFamily$Universe tytagFamily$NonOwnedObject tytagFamily$OwnedObject tytagFamily$Object tytagFamily$Thread tytagFamily$AtomicCounter tytagFamily$DoubleReadMethod field$content field$owner field$closed field$value field$programCounter field$counter field$initial_value field$final_value)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert  (and (and (and (and (and (and (and (and (= (Ctor refType) 3) (= (Ctor SetType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap T@U) (this T@U) ) (!  (=> (or (|_module.Universe.globalBaseInv#canCall| $Heap this) (and (< 2 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.Universe) ($IsAlloc refType this Tclass._module.Universe $Heap)))))) (= (_module.Universe.globalBaseInv $Heap this)  (and (forall ((|o#0| T@U) ) (!  (=> (and ($Is refType |o#0| Tclass._module.Object) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Universe.content)) ($Box refType |o#0|))) (and (= (_module.Object.universe |o#0|) this) (or (not (= |o#0| this)) (not true))))
 :pattern ( (_module.Object.universe |o#0|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Universe.content)) ($Box refType |o#0|)))
)) (forall ((|o#1| T@U) ) (!  (=> (and ($Is refType |o#1| Tclass._module.OwnedObject) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Universe.content)) ($Box refType |o#1|))) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Universe.content)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |o#1|) _module.OwnedObject.owner)) (=> (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |o#1|) _module.OwnedObject.closed)))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |o#1|) _module.OwnedObject.owner)) Tclass._module.Thread))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |o#1|) _module.OwnedObject.closed)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |o#1|) _module.OwnedObject.owner)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Universe.content)) ($Box refType |o#1|)))
)))))
 :pattern ( (_module.Universe.globalBaseInv $Heap this) ($IsGoodHeap $Heap))
))))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (implements$_module.NonOwnedObject Tclass._module.Thread?))
(assert (implements$_module.OwnedObject Tclass._module.AtomicCounter?))
(assert (implements$_module.OwnedObject Tclass._module.DoubleReadMethod?))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@0 T@U) (this@@0 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.localUserInv#canCall| $Heap@@0 this@@0) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@0 Tclass._module.DoubleReadMethod $Heap@@0)))))) (= (_module.DoubleReadMethod.localUserInv $Heap@@0 this@@0)  (and (and (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.counter))) _module.OwnedObject.owner)) this@@0) (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.programCounter)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.programCounter))) (LitInt 4)))) (=> (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.programCounter)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.counter))) _module.AtomicCounter.value)))))) (=> (<= (LitInt 2) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.programCounter)))) (and (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.final__value)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.final__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.DoubleReadMethod.counter))) _module.AtomicCounter.value)))))))))
 :pattern ( (_module.DoubleReadMethod.localUserInv $Heap@@0 this@@0) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@1 T@U) ) (!  (=> (or (|_module.Universe.globalInv#canCall| $Heap@@1 this@@1) (and (< 7 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 Tclass._module.Universe) ($IsAlloc refType this@@1 Tclass._module.Universe $Heap@@1)))))) (and (and (|_module.Universe.globalBaseInv#canCall| $Heap@@1 this@@1) (=> (_module.Universe.globalBaseInv $Heap@@1 this@@1) (forall ((|o#0@@0| T@U) ) (!  (=> ($Is refType |o#0@@0| Tclass._module.Object) (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Universe.content)) ($Box refType |o#0@@0|)) (|_module.Object.inv#canCall| $Heap@@1 |o#0@@0|)))
 :pattern ( (_module.Object.inv $Heap@@1 |o#0@@0|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Universe.content)) ($Box refType |o#0@@0|)))
)))) (= (_module.Universe.globalInv $Heap@@1 this@@1)  (and (_module.Universe.globalBaseInv $Heap@@1 this@@1) (forall ((|o#0@@1| T@U) ) (!  (=> (and ($Is refType |o#0@@1| Tclass._module.Object) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Universe.content)) ($Box refType |o#0@@1|))) (_module.Object.inv $Heap@@1 |o#0@@1|))
 :pattern ( (_module.Object.inv $Heap@@1 |o#0@@1|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Universe.content)) ($Box refType |o#0@@1|)))
))))))
 :pattern ( (_module.Universe.globalInv $Heap@@1 this@@1) ($IsGoodHeap $Heap@@1))
))))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Thread?)  (or (= $o null) (= (dtype $o) Tclass._module.Thread?)))
 :pattern ( ($Is refType $o Tclass._module.Thread?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass._module.AtomicCounter?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass._module.AtomicCounter?)))
 :pattern ( ($Is refType $o@@0 Tclass._module.AtomicCounter?))
)))
(assert (forall (($o@@1 T@U) ) (! (= ($Is refType $o@@1 Tclass._module.DoubleReadMethod?)  (or (= $o@@1 null) (= (dtype $o@@1) Tclass._module.DoubleReadMethod?)))
 :pattern ( ($Is refType $o@@1 Tclass._module.DoubleReadMethod?))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert (forall (($h T@U) ($o@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (or (not (= $o@@2 null)) (not true)) ($Is refType $o@@2 Tclass._module.OwnedObject?))) ($Is boolType ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@2) _module.OwnedObject.closed)) TBool))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@2) _module.OwnedObject.closed)))
)))
(assert (forall ((bx T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.NonOwnedObject? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx Tclass._module.Object? $h@@0))
 :pattern ( ($IsAllocBox bx Tclass._module.NonOwnedObject? $h@@0))
)))
(assert (forall ((bx@@0 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass._module.OwnedObject? $h@@1) ($IsGoodHeap $h@@1)) ($IsAllocBox bx@@0 Tclass._module.Object? $h@@1))
 :pattern ( ($IsAllocBox bx@@0 Tclass._module.OwnedObject? $h@@1))
)))
(assert (forall ((bx@@1 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsAllocBox bx@@1 Tclass._module.Thread? $h@@2) ($IsGoodHeap $h@@2)) ($IsAllocBox bx@@1 Tclass._module.NonOwnedObject? $h@@2))
 :pattern ( ($IsAllocBox bx@@1 Tclass._module.Thread? $h@@2))
)))
(assert (forall ((bx@@2 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsAllocBox bx@@2 Tclass._module.AtomicCounter? $h@@3) ($IsGoodHeap $h@@3)) ($IsAllocBox bx@@2 Tclass._module.OwnedObject? $h@@3))
 :pattern ( ($IsAllocBox bx@@2 Tclass._module.AtomicCounter? $h@@3))
)))
(assert (forall ((bx@@3 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsAllocBox bx@@3 Tclass._module.DoubleReadMethod? $h@@4) ($IsGoodHeap $h@@4)) ($IsAllocBox bx@@3 Tclass._module.OwnedObject? $h@@4))
 :pattern ( ($IsAllocBox bx@@3 Tclass._module.DoubleReadMethod? $h@@4))
)))
(assert (forall ((|c#0| T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Universe $h@@5) ($IsAlloc refType |c#0| Tclass._module.Universe? $h@@5))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Universe $h@@5))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Universe? $h@@5))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Object $h@@6) ($IsAlloc refType |c#0@@0| Tclass._module.Object? $h@@6))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Object $h@@6))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Object? $h@@6))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.NonOwnedObject $h@@7) ($IsAlloc refType |c#0@@1| Tclass._module.NonOwnedObject? $h@@7))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.NonOwnedObject $h@@7))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.NonOwnedObject? $h@@7))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass._module.OwnedObject $h@@8) ($IsAlloc refType |c#0@@2| Tclass._module.OwnedObject? $h@@8))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.OwnedObject $h@@8))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.OwnedObject? $h@@8))
)))
(assert (forall ((|c#0@@3| T@U) ($h@@9 T@U) ) (! (= ($IsAlloc refType |c#0@@3| Tclass._module.Thread $h@@9) ($IsAlloc refType |c#0@@3| Tclass._module.Thread? $h@@9))
 :pattern ( ($IsAlloc refType |c#0@@3| Tclass._module.Thread $h@@9))
 :pattern ( ($IsAlloc refType |c#0@@3| Tclass._module.Thread? $h@@9))
)))
(assert (forall ((|c#0@@4| T@U) ($h@@10 T@U) ) (! (= ($IsAlloc refType |c#0@@4| Tclass._module.AtomicCounter $h@@10) ($IsAlloc refType |c#0@@4| Tclass._module.AtomicCounter? $h@@10))
 :pattern ( ($IsAlloc refType |c#0@@4| Tclass._module.AtomicCounter $h@@10))
 :pattern ( ($IsAlloc refType |c#0@@4| Tclass._module.AtomicCounter? $h@@10))
)))
(assert (forall ((|c#0@@5| T@U) ($h@@11 T@U) ) (! (= ($IsAlloc refType |c#0@@5| Tclass._module.DoubleReadMethod $h@@11) ($IsAlloc refType |c#0@@5| Tclass._module.DoubleReadMethod? $h@@11))
 :pattern ( ($IsAlloc refType |c#0@@5| Tclass._module.DoubleReadMethod $h@@11))
 :pattern ( ($IsAlloc refType |c#0@@5| Tclass._module.DoubleReadMethod? $h@@11))
)))
(assert (= (FDim _module.Universe.content) 0))
(assert (= (FieldOfDecl class._module.Universe? field$content) _module.Universe.content))
(assert ($IsGhostField _module.Universe.content))
(assert (= (FDim _module.OwnedObject.owner) 0))
(assert (= (FieldOfDecl class._module.OwnedObject? field$owner) _module.OwnedObject.owner))
(assert ($IsGhostField _module.OwnedObject.owner))
(assert (= (FDim _module.OwnedObject.closed) 0))
(assert (= (FieldOfDecl class._module.OwnedObject? field$closed) _module.OwnedObject.closed))
(assert ($IsGhostField _module.OwnedObject.closed))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@2 T@U) (this@@2 T@U) ) (!  (=> (or (|_module.AtomicCounter.baseUserInv#canCall| $Heap@@2 this@@2) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 Tclass._module.AtomicCounter)))) (= (_module.OwnedObject.baseUserInv $Heap@@2 this@@2) (_module.AtomicCounter.baseUserInv $Heap@@2 this@@2)))
 :pattern ( (_module.OwnedObject.baseUserInv $Heap@@2 this@@2) ($Is refType this@@2 Tclass._module.AtomicCounter) ($IsGoodHeap $Heap@@2))
 :pattern ( (_module.OwnedObject.baseUserInv $Heap@@2 this@@2) (_module.AtomicCounter.baseUserInv $Heap@@2 this@@2) ($IsGoodHeap $Heap@@2))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@3 T@U) (this@@3 T@U) ) (!  (=> (or (|_module.AtomicCounter.localUserInv#canCall| $Heap@@3 this@@3) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass._module.AtomicCounter)))) (= (_module.OwnedObject.localUserInv $Heap@@3 this@@3) (_module.AtomicCounter.localUserInv $Heap@@3 this@@3)))
 :pattern ( (_module.OwnedObject.localUserInv $Heap@@3 this@@3) ($Is refType this@@3 Tclass._module.AtomicCounter) ($IsGoodHeap $Heap@@3))
 :pattern ( (_module.OwnedObject.localUserInv $Heap@@3 this@@3) (_module.AtomicCounter.localUserInv $Heap@@3 this@@3) ($IsGoodHeap $Heap@@3))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@4 T@U) (this@@4 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.localUserInv#canCall| $Heap@@4 this@@4) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@4 null)) (not true)) ($Is refType this@@4 Tclass._module.DoubleReadMethod)))) (= (_module.OwnedObject.localUserInv $Heap@@4 this@@4) (_module.DoubleReadMethod.localUserInv $Heap@@4 this@@4)))
 :pattern ( (_module.OwnedObject.localUserInv $Heap@@4 this@@4) ($Is refType this@@4 Tclass._module.DoubleReadMethod) ($IsGoodHeap $Heap@@4))
 :pattern ( (_module.OwnedObject.localUserInv $Heap@@4 this@@4) (_module.DoubleReadMethod.localUserInv $Heap@@4 this@@4) ($IsGoodHeap $Heap@@4))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@5 T@U) (this@@5 T@U) ) (!  (=> (or (|_module.AtomicCounter.userInv#canCall| $Heap@@5 this@@5) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@5 null)) (not true)) ($Is refType this@@5 Tclass._module.AtomicCounter)))) (= (_module.OwnedObject.userInv $Heap@@5 this@@5) (_module.AtomicCounter.userInv $Heap@@5 this@@5)))
 :pattern ( (_module.OwnedObject.userInv $Heap@@5 this@@5) ($Is refType this@@5 Tclass._module.AtomicCounter) ($IsGoodHeap $Heap@@5))
 :pattern ( (_module.OwnedObject.userInv $Heap@@5 this@@5) (_module.AtomicCounter.userInv $Heap@@5 this@@5) ($IsGoodHeap $Heap@@5))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@6 T@U) (this@@6 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userInv#canCall| $Heap@@6 this@@6) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@6 null)) (not true)) ($Is refType this@@6 Tclass._module.DoubleReadMethod)))) (= (_module.OwnedObject.userInv $Heap@@6 this@@6) (_module.DoubleReadMethod.userInv $Heap@@6 this@@6)))
 :pattern ( (_module.OwnedObject.userInv $Heap@@6 this@@6) ($Is refType this@@6 Tclass._module.DoubleReadMethod) ($IsGoodHeap $Heap@@6))
 :pattern ( (_module.OwnedObject.userInv $Heap@@6 this@@6) (_module.DoubleReadMethod.userInv $Heap@@6 this@@6) ($IsGoodHeap $Heap@@6))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@7 T@U) (this@@7 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.baseUserInv#canCall| $Heap@@7 this@@7) (and (< 2 $FunctionContextHeight) (and (or (not (= this@@7 null)) (not true)) ($Is refType this@@7 Tclass._module.DoubleReadMethod)))) (= (_module.OwnedObject.baseUserInv $Heap@@7 this@@7) (_module.DoubleReadMethod.baseUserInv $Heap@@7 this@@7)))
 :pattern ( (_module.OwnedObject.baseUserInv $Heap@@7 this@@7) ($Is refType this@@7 Tclass._module.DoubleReadMethod) ($IsGoodHeap $Heap@@7))
 :pattern ( (_module.OwnedObject.baseUserInv $Heap@@7 this@@7) (_module.DoubleReadMethod.baseUserInv $Heap@@7 this@@7) ($IsGoodHeap $Heap@@7))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@8 T@U) (this@@8 T@U) ) (!  (=> (or (|_module.OwnedObject.localInv#canCall| $Heap@@8 this@@8) (and (< 4 $FunctionContextHeight) (and (or (not (= this@@8 null)) (not true)) ($Is refType this@@8 Tclass._module.OwnedObject)))) (= (_module.Object.localInv $Heap@@8 this@@8) (_module.OwnedObject.localInv $Heap@@8 this@@8)))
 :pattern ( (_module.Object.localInv $Heap@@8 this@@8) ($Is refType this@@8 Tclass._module.OwnedObject) ($IsGoodHeap $Heap@@8))
 :pattern ( (_module.Object.localInv $Heap@@8 this@@8) (_module.OwnedObject.localInv $Heap@@8 this@@8) ($IsGoodHeap $Heap@@8))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@9 T@U) (this@@9 T@U) ) (!  (=> (or (|_module.Thread.localInv#canCall| $Heap@@9 this@@9) (and (< 4 $FunctionContextHeight) (and (or (not (= this@@9 null)) (not true)) ($Is refType this@@9 Tclass._module.Thread)))) (= (_module.Object.localInv $Heap@@9 this@@9) (_module.Thread.localInv $Heap@@9 this@@9)))
 :pattern ( (_module.Object.localInv $Heap@@9 this@@9) ($Is refType this@@9 Tclass._module.Thread) ($IsGoodHeap $Heap@@9))
 :pattern ( (_module.Object.localInv $Heap@@9 this@@9) (_module.Thread.localInv $Heap@@9 this@@9) ($IsGoodHeap $Heap@@9))
))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@10 T@U) (this@@10 T@U) ) (!  (=> (or (|_module.OwnedObject.inv#canCall| $Heap@@10 this@@10) (and (< 5 $FunctionContextHeight) (and (or (not (= this@@10 null)) (not true)) ($Is refType this@@10 Tclass._module.OwnedObject)))) (= (_module.Object.inv $Heap@@10 this@@10) (_module.OwnedObject.inv $Heap@@10 this@@10)))
 :pattern ( (_module.Object.inv $Heap@@10 this@@10) ($Is refType this@@10 Tclass._module.OwnedObject) ($IsGoodHeap $Heap@@10))
 :pattern ( (_module.Object.inv $Heap@@10 this@@10) (_module.OwnedObject.inv $Heap@@10 this@@10) ($IsGoodHeap $Heap@@10))
))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@11 T@U) (this@@11 T@U) ) (!  (=> (or (|_module.Thread.inv#canCall| $Heap@@11 this@@11) (and (< 5 $FunctionContextHeight) (and (or (not (= this@@11 null)) (not true)) ($Is refType this@@11 Tclass._module.Thread)))) (= (_module.Object.inv $Heap@@11 this@@11) (_module.Thread.inv $Heap@@11 this@@11)))
 :pattern ( (_module.Object.inv $Heap@@11 this@@11) ($Is refType this@@11 Tclass._module.Thread) ($IsGoodHeap $Heap@@11))
 :pattern ( (_module.Object.inv $Heap@@11 this@@11) (_module.Thread.inv $Heap@@11 this@@11) ($IsGoodHeap $Heap@@11))
))))
(assert (= (FDim _module.AtomicCounter.value) 0))
(assert (= (FieldOfDecl class._module.AtomicCounter? field$value) _module.AtomicCounter.value))
(assert  (not ($IsGhostField _module.AtomicCounter.value)))
(assert (= (FDim _module.DoubleReadMethod.programCounter) 0))
(assert (= (FieldOfDecl class._module.DoubleReadMethod? field$programCounter) _module.DoubleReadMethod.programCounter))
(assert  (not ($IsGhostField _module.DoubleReadMethod.programCounter)))
(assert (= (FDim _module.DoubleReadMethod.counter) 0))
(assert (= (FieldOfDecl class._module.DoubleReadMethod? field$counter) _module.DoubleReadMethod.counter))
(assert  (not ($IsGhostField _module.DoubleReadMethod.counter)))
(assert (= (FDim _module.DoubleReadMethod.initial__value) 0))
(assert (= (FieldOfDecl class._module.DoubleReadMethod? field$initial_value) _module.DoubleReadMethod.initial__value))
(assert  (not ($IsGhostField _module.DoubleReadMethod.initial__value)))
(assert (= (FDim _module.DoubleReadMethod.final__value) 0))
(assert (= (FieldOfDecl class._module.DoubleReadMethod? field$final_value) _module.DoubleReadMethod.final__value))
(assert  (not ($IsGhostField _module.DoubleReadMethod.final__value)))
(assert (forall (($prevHeap T@U) ($h0 T@U) ($h1 T@U) (this@@12 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this@@12 null)) (not true)) (and ($Is refType this@@12 Tclass._module.Universe) ($IsAlloc refType this@@12 Tclass._module.Universe $h0)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@3 T@U) ($f T@U) )  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@3) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@3) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@3) $f)))) (= (_module.Universe.globalInv2 $prevHeap $h0 this@@12) (_module.Universe.globalInv2 $prevHeap $h1 this@@12))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.Universe.globalInv2 $prevHeap $h1 this@@12))
)))
(assert (forall (($prevHeap@@0 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (this@@13 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (and (or (not (= this@@13 null)) (not true)) (and ($Is refType this@@13 Tclass._module.Object) ($IsAlloc refType this@@13 Tclass._module.Object $h0@@0)))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0))) (=> (forall (($o@@4 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@0 $o@@4) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@0 $o@@4) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@0 $o@@4) $f@@0)))) (= (_module.Object.localInv2 $prevHeap@@0 $h0@@0 this@@13) (_module.Object.localInv2 $prevHeap@@0 $h1@@0 this@@13))))
 :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (_module.Object.localInv2 $prevHeap@@0 $h1@@0 this@@13))
)))
(assert (forall (($prevHeap@@1 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (this@@14 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (and (or (not (= this@@14 null)) (not true)) (and ($Is refType this@@14 Tclass._module.Object) ($IsAlloc refType this@@14 Tclass._module.Object $h0@@1)))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1))) (=> (forall (($o@@5 T@U) ($f@@1 T@U) )  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@1 $o@@5) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@1 $o@@5) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@1 $o@@5) $f@@1)))) (= (_module.Object.inv2 $prevHeap@@1 $h0@@1 this@@14) (_module.Object.inv2 $prevHeap@@1 $h1@@1 this@@14))))
 :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (_module.Object.inv2 $prevHeap@@1 $h1@@1 this@@14))
)))
(assert (forall (($prevHeap@@2 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (this@@15 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (and (or (not (= this@@15 null)) (not true)) (and ($Is refType this@@15 Tclass._module.OwnedObject) ($IsAlloc refType this@@15 Tclass._module.OwnedObject $h0@@2)))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2))) (=> (forall (($o@@6 T@U) ($f@@2 T@U) )  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@2 $o@@6) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@2 $o@@6) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@2 $o@@6) $f@@2)))) (= (_module.OwnedObject.localInv2 $prevHeap@@2 $h0@@2 this@@15) (_module.OwnedObject.localInv2 $prevHeap@@2 $h1@@2 this@@15))))
 :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (_module.OwnedObject.localInv2 $prevHeap@@2 $h1@@2 this@@15))
)))
(assert (forall (($prevHeap@@3 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (this@@16 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (and (or (not (= this@@16 null)) (not true)) (and ($Is refType this@@16 Tclass._module.OwnedObject) ($IsAlloc refType this@@16 Tclass._module.OwnedObject $h0@@3)))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3))) (=> (forall (($o@@7 T@U) ($f@@3 T@U) )  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@3 $o@@7) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@3 $o@@7) $f@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@3 $o@@7) $f@@3)))) (= (_module.OwnedObject.inv2 $prevHeap@@3 $h0@@3 this@@16) (_module.OwnedObject.inv2 $prevHeap@@3 $h1@@3 this@@16))))
 :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (_module.OwnedObject.inv2 $prevHeap@@3 $h1@@3 this@@16))
)))
(assert (forall (($prevHeap@@4 T@U) ($h0@@4 T@U) ($h1@@4 T@U) (this@@17 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@4) ($IsGoodHeap $h1@@4)) (and (or (not (= this@@17 null)) (not true)) (and ($Is refType this@@17 Tclass._module.OwnedObject) ($IsAlloc refType this@@17 Tclass._module.OwnedObject $h0@@4)))) (and ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4))) (=> (forall (($o@@8 T@U) ($f@@4 T@U) )  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@4 $o@@8) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@4 $o@@8) $f@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@4 $o@@8) $f@@4)))) (= (_module.OwnedObject.userFieldsUnchanged $prevHeap@@4 $h0@@4 this@@17) (_module.OwnedObject.userFieldsUnchanged $prevHeap@@4 $h1@@4 this@@17))))
 :pattern ( ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4) (_module.OwnedObject.userFieldsUnchanged $prevHeap@@4 $h1@@4 this@@17))
)))
(assert (forall (($prevHeap@@5 T@U) ($h0@@5 T@U) ($h1@@5 T@U) (this@@18 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@5) ($IsGoodHeap $h1@@5)) (and (or (not (= this@@18 null)) (not true)) (and ($Is refType this@@18 Tclass._module.OwnedObject) ($IsAlloc refType this@@18 Tclass._module.OwnedObject $h0@@5)))) (and ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5))) (=> (forall (($o@@9 T@U) ($f@@5 T@U) )  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@5 $o@@9) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@5 $o@@9) $f@@5) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@5 $o@@9) $f@@5)))) (= (_module.OwnedObject.localUserInv2 $prevHeap@@5 $h0@@5 this@@18) (_module.OwnedObject.localUserInv2 $prevHeap@@5 $h1@@5 this@@18))))
 :pattern ( ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5) (_module.OwnedObject.localUserInv2 $prevHeap@@5 $h1@@5 this@@18))
)))
(assert (forall (($prevHeap@@6 T@U) ($h0@@6 T@U) ($h1@@6 T@U) (this@@19 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@6) ($IsGoodHeap $h1@@6)) (and (or (not (= this@@19 null)) (not true)) (and ($Is refType this@@19 Tclass._module.OwnedObject) ($IsAlloc refType this@@19 Tclass._module.OwnedObject $h0@@6)))) (and ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6))) (=> (forall (($o@@10 T@U) ($f@@6 T@U) )  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@6 $o@@10) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@6 $o@@10) $f@@6) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@6 $o@@10) $f@@6)))) (= (_module.OwnedObject.userInv2 $prevHeap@@6 $h0@@6 this@@19) (_module.OwnedObject.userInv2 $prevHeap@@6 $h1@@6 this@@19))))
 :pattern ( ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6) (_module.OwnedObject.userInv2 $prevHeap@@6 $h1@@6 this@@19))
)))
(assert (forall (($prevHeap@@7 T@U) ($h0@@7 T@U) ($h1@@7 T@U) (this@@20 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@7) ($IsGoodHeap $h1@@7)) (and (or (not (= this@@20 null)) (not true)) (and ($Is refType this@@20 Tclass._module.Thread) ($IsAlloc refType this@@20 Tclass._module.Thread $h0@@7)))) (and ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7))) (=> (forall (($o@@11 T@U) ($f@@7 T@U) )  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@7 $o@@11) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@7 $o@@11) $f@@7) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@7 $o@@11) $f@@7)))) (= (_module.Thread.localInv2 $prevHeap@@7 $h0@@7 this@@20) (_module.Thread.localInv2 $prevHeap@@7 $h1@@7 this@@20))))
 :pattern ( ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7) (_module.Thread.localInv2 $prevHeap@@7 $h1@@7 this@@20))
)))
(assert (forall (($prevHeap@@8 T@U) ($h0@@8 T@U) ($h1@@8 T@U) (this@@21 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@8) ($IsGoodHeap $h1@@8)) (and (or (not (= this@@21 null)) (not true)) (and ($Is refType this@@21 Tclass._module.Thread) ($IsAlloc refType this@@21 Tclass._module.Thread $h0@@8)))) (and ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8))) (=> (forall (($o@@12 T@U) ($f@@8 T@U) )  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@8 $o@@12) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@8 $o@@12) $f@@8) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@8 $o@@12) $f@@8)))) (= (_module.Thread.inv2 $prevHeap@@8 $h0@@8 this@@21) (_module.Thread.inv2 $prevHeap@@8 $h1@@8 this@@21))))
 :pattern ( ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8) (_module.Thread.inv2 $prevHeap@@8 $h1@@8 this@@21))
)))
(assert (forall (($prevHeap@@9 T@U) ($h0@@9 T@U) ($h1@@9 T@U) (this@@22 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@9) ($IsGoodHeap $h1@@9)) (and (or (not (= this@@22 null)) (not true)) (and ($Is refType this@@22 Tclass._module.AtomicCounter) ($IsAlloc refType this@@22 Tclass._module.AtomicCounter $h0@@9)))) (and ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9))) (=> (forall (($o@@13 T@U) ($f@@9 T@U) )  (=> (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@9 $o@@13) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@9 $o@@13) $f@@9) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@9 $o@@13) $f@@9)))) (= (_module.AtomicCounter.userFieldsUnchanged $prevHeap@@9 $h0@@9 this@@22) (_module.AtomicCounter.userFieldsUnchanged $prevHeap@@9 $h1@@9 this@@22))))
 :pattern ( ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9) (_module.AtomicCounter.userFieldsUnchanged $prevHeap@@9 $h1@@9 this@@22))
)))
(assert (forall (($prevHeap@@10 T@U) ($h0@@10 T@U) ($h1@@10 T@U) (this@@23 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@10) ($IsGoodHeap $h1@@10)) (and (or (not (= this@@23 null)) (not true)) (and ($Is refType this@@23 Tclass._module.AtomicCounter) ($IsAlloc refType this@@23 Tclass._module.AtomicCounter $h0@@10)))) (and ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10))) (=> (forall (($o@@14 T@U) ($f@@10 T@U) )  (=> (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@10 $o@@14) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@10 $o@@14) $f@@10) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@10 $o@@14) $f@@10)))) (= (_module.AtomicCounter.localUserInv2 $prevHeap@@10 $h0@@10 this@@23) (_module.AtomicCounter.localUserInv2 $prevHeap@@10 $h1@@10 this@@23))))
 :pattern ( ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10) (_module.AtomicCounter.localUserInv2 $prevHeap@@10 $h1@@10 this@@23))
)))
(assert (forall (($prevHeap@@11 T@U) ($h0@@11 T@U) ($h1@@11 T@U) (this@@24 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@11) ($IsGoodHeap $h1@@11)) (and (or (not (= this@@24 null)) (not true)) (and ($Is refType this@@24 Tclass._module.AtomicCounter) ($IsAlloc refType this@@24 Tclass._module.AtomicCounter $h0@@11)))) (and ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11))) (=> (forall (($o@@15 T@U) ($f@@11 T@U) )  (=> (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@11 $o@@15) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@11 $o@@15) $f@@11) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@11 $o@@15) $f@@11)))) (= (_module.AtomicCounter.userInv2 $prevHeap@@11 $h0@@11 this@@24) (_module.AtomicCounter.userInv2 $prevHeap@@11 $h1@@11 this@@24))))
 :pattern ( ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11) (_module.AtomicCounter.userInv2 $prevHeap@@11 $h1@@11 this@@24))
)))
(assert (forall (($prevHeap@@12 T@U) ($h0@@12 T@U) ($h1@@12 T@U) (this@@25 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@12) ($IsGoodHeap $h1@@12)) (and (or (not (= this@@25 null)) (not true)) (and ($Is refType this@@25 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@25 Tclass._module.DoubleReadMethod $h0@@12)))) (and ($IsHeapAnchor $h0@@12) ($HeapSucc $h0@@12 $h1@@12))) (=> (forall (($o@@16 T@U) ($f@@12 T@U) )  (=> (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@12 $o@@16) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@12 $o@@16) $f@@12) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@12 $o@@16) $f@@12)))) (= (_module.DoubleReadMethod.userFieldsUnchanged $prevHeap@@12 $h0@@12 this@@25) (_module.DoubleReadMethod.userFieldsUnchanged $prevHeap@@12 $h1@@12 this@@25))))
 :pattern ( ($IsHeapAnchor $h0@@12) ($HeapSucc $h0@@12 $h1@@12) (_module.DoubleReadMethod.userFieldsUnchanged $prevHeap@@12 $h1@@12 this@@25))
)))
(assert (forall (($prevHeap@@13 T@U) ($h0@@13 T@U) ($h1@@13 T@U) (this@@26 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@13) ($IsGoodHeap $h1@@13)) (and (or (not (= this@@26 null)) (not true)) (and ($Is refType this@@26 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@26 Tclass._module.DoubleReadMethod $h0@@13)))) (and ($IsHeapAnchor $h0@@13) ($HeapSucc $h0@@13 $h1@@13))) (=> (forall (($o@@17 T@U) ($f@@13 T@U) )  (=> (and (or (not (= $o@@17 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@13 $o@@17) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@13 $o@@17) $f@@13) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@13 $o@@17) $f@@13)))) (= (_module.DoubleReadMethod.localUserInv2 $prevHeap@@13 $h0@@13 this@@26) (_module.DoubleReadMethod.localUserInv2 $prevHeap@@13 $h1@@13 this@@26))))
 :pattern ( ($IsHeapAnchor $h0@@13) ($HeapSucc $h0@@13 $h1@@13) (_module.DoubleReadMethod.localUserInv2 $prevHeap@@13 $h1@@13 this@@26))
)))
(assert (forall (($prevHeap@@14 T@U) ($h0@@14 T@U) ($h1@@14 T@U) (this@@27 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@14) ($IsGoodHeap $h1@@14)) (and (or (not (= this@@27 null)) (not true)) (and ($Is refType this@@27 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@27 Tclass._module.DoubleReadMethod $h0@@14)))) (and ($IsHeapAnchor $h0@@14) ($HeapSucc $h0@@14 $h1@@14))) (=> (forall (($o@@18 T@U) ($f@@14 T@U) )  (=> (and (or (not (= $o@@18 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@14 $o@@18) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@14 $o@@18) $f@@14) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@14 $o@@18) $f@@14)))) (= (_module.DoubleReadMethod.userInv2 $prevHeap@@14 $h0@@14 this@@27) (_module.DoubleReadMethod.userInv2 $prevHeap@@14 $h1@@14 this@@27))))
 :pattern ( ($IsHeapAnchor $h0@@14) ($HeapSucc $h0@@14 $h1@@14) (_module.DoubleReadMethod.userInv2 $prevHeap@@14 $h1@@14 this@@27))
)))
(assert (forall (($o@@19 T@U) ($h@@12 T@U) ) (! (= ($IsAlloc refType $o@@19 Tclass._module.Universe? $h@@12)  (or (= $o@@19 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@19) alloc)))))
 :pattern ( ($IsAlloc refType $o@@19 Tclass._module.Universe? $h@@12))
)))
(assert (forall (($o@@20 T@U) ($h@@13 T@U) ) (! (= ($IsAlloc refType $o@@20 Tclass._module.Object? $h@@13)  (or (= $o@@20 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@20) alloc)))))
 :pattern ( ($IsAlloc refType $o@@20 Tclass._module.Object? $h@@13))
)))
(assert (forall (($o@@21 T@U) ($h@@14 T@U) ) (! (= ($IsAlloc refType $o@@21 Tclass._module.NonOwnedObject? $h@@14)  (or (= $o@@21 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@21) alloc)))))
 :pattern ( ($IsAlloc refType $o@@21 Tclass._module.NonOwnedObject? $h@@14))
)))
(assert (forall (($o@@22 T@U) ($h@@15 T@U) ) (! (= ($IsAlloc refType $o@@22 Tclass._module.OwnedObject? $h@@15)  (or (= $o@@22 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@22) alloc)))))
 :pattern ( ($IsAlloc refType $o@@22 Tclass._module.OwnedObject? $h@@15))
)))
(assert (forall (($o@@23 T@U) ($h@@16 T@U) ) (! (= ($IsAlloc refType $o@@23 Tclass._module.Thread? $h@@16)  (or (= $o@@23 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@23) alloc)))))
 :pattern ( ($IsAlloc refType $o@@23 Tclass._module.Thread? $h@@16))
)))
(assert (forall (($o@@24 T@U) ($h@@17 T@U) ) (! (= ($IsAlloc refType $o@@24 Tclass._module.AtomicCounter? $h@@17)  (or (= $o@@24 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@17 $o@@24) alloc)))))
 :pattern ( ($IsAlloc refType $o@@24 Tclass._module.AtomicCounter? $h@@17))
)))
(assert (forall (($o@@25 T@U) ($h@@18 T@U) ) (! (= ($IsAlloc refType $o@@25 Tclass._module.DoubleReadMethod? $h@@18)  (or (= $o@@25 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@18 $o@@25) alloc)))))
 :pattern ( ($IsAlloc refType $o@@25 Tclass._module.DoubleReadMethod? $h@@18))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@12 T@U) (this@@28 T@U) (|owner#0| T@U) ) (!  (=> (or (|_module.AtomicCounter.userFieldsOwnedBy#canCall| $Heap@@12 this@@28 |owner#0|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@12) (and (or (not (= this@@28 null)) (not true)) (and ($Is refType this@@28 Tclass._module.AtomicCounter) ($IsAlloc refType this@@28 Tclass._module.AtomicCounter $Heap@@12)))) ($Is refType |owner#0| Tclass._module.Object)))) (= (_module.AtomicCounter.userFieldsOwnedBy $Heap@@12 this@@28 |owner#0|) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (_module.AtomicCounter.userFieldsOwnedBy $Heap@@12 this@@28 |owner#0|) ($IsGoodHeap $Heap@@12))
))))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@13 T@U) (this@@29 T@U) ) (!  (=> (or (|_module.AtomicCounter.baseUserInv#canCall| $Heap@@13 this@@29) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@13) (and (or (not (= this@@29 null)) (not true)) (and ($Is refType this@@29 Tclass._module.AtomicCounter) ($IsAlloc refType this@@29 Tclass._module.AtomicCounter $Heap@@13)))))) (= (_module.AtomicCounter.baseUserInv $Heap@@13 this@@29) (U_2_bool (Lit boolType (bool_2_U  (and true true))))))
 :pattern ( (_module.AtomicCounter.baseUserInv $Heap@@13 this@@29) ($IsGoodHeap $Heap@@13))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@14 T@U) (this@@30 T@U) ) (!  (=> (or (|_module.AtomicCounter.localUserInv#canCall| $Heap@@14 this@@30) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@14) (and (or (not (= this@@30 null)) (not true)) (and ($Is refType this@@30 Tclass._module.AtomicCounter) ($IsAlloc refType this@@30 Tclass._module.AtomicCounter $Heap@@14)))))) (= (_module.AtomicCounter.localUserInv $Heap@@14 this@@30) (U_2_bool (Lit boolType (bool_2_U  (and true true))))))
 :pattern ( (_module.AtomicCounter.localUserInv $Heap@@14 this@@30) ($IsGoodHeap $Heap@@14))
))))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@7 b@@4) (forall ((o@@3 T@U) ) (!  (or (not (|Set#IsMember| a@@7 o@@3)) (not (|Set#IsMember| b@@4 o@@3)))
 :pattern ( (|Set#IsMember| a@@7 o@@3))
 :pattern ( (|Set#IsMember| b@@4 o@@3))
)))
 :pattern ( (|Set#Disjoint| a@@7 b@@4))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v bx@@4) ($IsBox bx@@4 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@4))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@15 T@U) ($Heap@@15 T@U) (this@@31 T@U) ) (!  (=> (or (|_module.AtomicCounter.userFieldsUnchanged#canCall| $prevHeap@@15 $Heap@@15 this@@31) (and (< 0 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@15) ($IsGoodHeap $Heap@@15)) ($HeapSucc $prevHeap@@15 $Heap@@15)) (and (or (not (= this@@31 null)) (not true)) (and ($Is refType this@@31 Tclass._module.AtomicCounter) ($IsAlloc refType this@@31 Tclass._module.AtomicCounter $prevHeap@@15)))))) (= (_module.AtomicCounter.userFieldsUnchanged $prevHeap@@15 $Heap@@15 this@@31) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@15 this@@31) _module.AtomicCounter.value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@15 this@@31) _module.AtomicCounter.value))))))
 :pattern ( (_module.AtomicCounter.userFieldsUnchanged $prevHeap@@15 $Heap@@15 this@@31) ($IsGoodHeap $Heap@@15))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@16 T@U) ($Heap@@16 T@U) (this@@32 T@U) ) (!  (=> (or (|_module.AtomicCounter.localUserInv2#canCall| $prevHeap@@16 $Heap@@16 this@@32) (and (< 0 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@16) ($IsGoodHeap $Heap@@16)) ($HeapSucc $prevHeap@@16 $Heap@@16)) (and (or (not (= this@@32 null)) (not true)) (and ($Is refType this@@32 Tclass._module.AtomicCounter) ($IsAlloc refType this@@32 Tclass._module.AtomicCounter $prevHeap@@16)))))) (= (_module.AtomicCounter.localUserInv2 $prevHeap@@16 $Heap@@16 this@@32) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@16 this@@32) _module.AtomicCounter.value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@16 this@@32) _module.AtomicCounter.value))))))
 :pattern ( (_module.AtomicCounter.localUserInv2 $prevHeap@@16 $Heap@@16 this@@32) ($IsGoodHeap $Heap@@16))
))))
(assert (forall (($h@@19 T@U) ($o@@26 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@19) (and (or (not (= $o@@26 null)) (not true)) (= (dtype $o@@26) Tclass._module.AtomicCounter?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@19 $o@@26) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@19 $o@@26) _module.AtomicCounter.value)) TInt $h@@19))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@19 $o@@26) _module.AtomicCounter.value)))
)))
(assert (forall (($h@@20 T@U) ($o@@27 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@20) (and (or (not (= $o@@27 null)) (not true)) (= (dtype $o@@27) Tclass._module.DoubleReadMethod?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@20 $o@@27) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@20 $o@@27) _module.DoubleReadMethod.programCounter)) TInt $h@@20))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@20 $o@@27) _module.DoubleReadMethod.programCounter)))
)))
(assert (forall (($h@@21 T@U) ($o@@28 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@21) (and (or (not (= $o@@28 null)) (not true)) (= (dtype $o@@28) Tclass._module.DoubleReadMethod?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@21 $o@@28) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@21 $o@@28) _module.DoubleReadMethod.initial__value)) TInt $h@@21))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@21 $o@@28) _module.DoubleReadMethod.initial__value)))
)))
(assert (forall (($h@@22 T@U) ($o@@29 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@22) (and (or (not (= $o@@29 null)) (not true)) (= (dtype $o@@29) Tclass._module.DoubleReadMethod?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@22 $o@@29) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@22 $o@@29) _module.DoubleReadMethod.final__value)) TInt $h@@22))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@22 $o@@29) _module.DoubleReadMethod.final__value)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@17 T@U) ($Heap@@17 T@U) (this@@33 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.localUserInv2#canCall| $prevHeap@@17 $Heap@@17 this@@33) (and (< 0 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@17) ($IsGoodHeap $Heap@@17)) ($HeapSucc $prevHeap@@17 $Heap@@17)) (and (or (not (= this@@33 null)) (not true)) (and ($Is refType this@@33 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@33 Tclass._module.DoubleReadMethod $prevHeap@@17)))))) (= (_module.DoubleReadMethod.localUserInv2 $prevHeap@@17 $Heap@@17 this@@33)  (and true (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@17 this@@33) _module.DoubleReadMethod.programCounter))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@17 this@@33) _module.DoubleReadMethod.programCounter)))))))
 :pattern ( (_module.DoubleReadMethod.localUserInv2 $prevHeap@@17 $Heap@@17 this@@33) ($IsGoodHeap $Heap@@17))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($prevHeap@@18 T@U) ($Heap@@18 T@U) (this@@34 T@U) ) (!  (=> (or (|_module.OwnedObject.localInv2#canCall| $prevHeap@@18 $Heap@@18 this@@34) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@18) ($IsGoodHeap $Heap@@18)) ($HeapSucc $prevHeap@@18 $Heap@@18)) (and (or (not (= this@@34 null)) (not true)) (and ($Is refType this@@34 Tclass._module.OwnedObject) ($IsAlloc refType this@@34 Tclass._module.OwnedObject $prevHeap@@18)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@18 this@@34) _module.OwnedObject.closed))) (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@18 this@@34) _module.OwnedObject.closed))) (|_module.OwnedObject.localUserInv2#canCall| $prevHeap@@18 $Heap@@18 this@@34)))) (= (_module.OwnedObject.localInv2 $prevHeap@@18 $Heap@@18 this@@34)  (and true (=> (and (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@18 this@@34) _module.OwnedObject.closed))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@18 this@@34) _module.OwnedObject.closed)))) (_module.OwnedObject.localUserInv2 $prevHeap@@18 $Heap@@18 this@@34))))))
 :pattern ( (_module.OwnedObject.localInv2 $prevHeap@@18 $Heap@@18 this@@34) ($IsGoodHeap $Heap@@18))
))))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@5 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@5 t@@0 h@@1) ($IsAllocBox bx@@5 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@5 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert  (=> (< 1 $FunctionContextHeight) (forall (($h@@23 T@U) ($o@@30 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@23) (and (or (not (= $o@@30 null)) (not true)) ($Is refType $o@@30 Tclass._module.Object?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@23 $o@@30) alloc)))) ($IsAlloc refType (_module.Object.universe $o@@30) Tclass._module.Universe $h@@23))
 :pattern ( (_module.Object.universe $o@@30) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@23 $o@@30) alloc)))
))))
(assert  (=> (< 1 $FunctionContextHeight) (forall (($o@@31 T@U) ) (!  (=> (and (or (not (= $o@@31 null)) (not true)) ($Is refType $o@@31 Tclass._module.Object?)) ($Is refType (_module.Object.universe $o@@31) Tclass._module.Universe))
 :pattern ( (_module.Object.universe $o@@31))
))))
(assert (forall (($h@@24 T@U) ($o@@32 T@U) ) (!  (=> (and ($IsGoodHeap $h@@24) (and (or (not (= $o@@32 null)) (not true)) (= (dtype $o@@32) Tclass._module.DoubleReadMethod?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@24 $o@@32) _module.DoubleReadMethod.counter)) Tclass._module.AtomicCounter))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@24 $o@@32) _module.DoubleReadMethod.counter)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@19 T@U) ($Heap@@19 T@U) (this@@35 T@U) ) (!  (=> (or (|_module.Thread.localInv2#canCall| $prevHeap@@19 $Heap@@19 this@@35) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@35 null)) (not true)) ($Is refType this@@35 Tclass._module.Thread)))) (= (_module.Object.localInv2 $prevHeap@@19 $Heap@@19 this@@35) (_module.Thread.localInv2 $prevHeap@@19 $Heap@@19 this@@35)))
 :pattern ( (_module.Object.localInv2 $prevHeap@@19 $Heap@@19 this@@35) ($Is refType this@@35 Tclass._module.Thread) ($IsGoodHeap $Heap@@19))
 :pattern ( (_module.Object.localInv2 $prevHeap@@19 $Heap@@19 this@@35) (_module.Thread.localInv2 $prevHeap@@19 $Heap@@19 this@@35) ($IsGoodHeap $Heap@@19))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@20 T@U) ($Heap@@20 T@U) (this@@36 T@U) ) (!  (=> (or (|_module.AtomicCounter.userFieldsUnchanged#canCall| $prevHeap@@20 $Heap@@20 this@@36) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@36 null)) (not true)) ($Is refType this@@36 Tclass._module.AtomicCounter)))) (= (_module.OwnedObject.userFieldsUnchanged $prevHeap@@20 $Heap@@20 this@@36) (_module.AtomicCounter.userFieldsUnchanged $prevHeap@@20 $Heap@@20 this@@36)))
 :pattern ( (_module.OwnedObject.userFieldsUnchanged $prevHeap@@20 $Heap@@20 this@@36) ($Is refType this@@36 Tclass._module.AtomicCounter) ($IsGoodHeap $Heap@@20))
 :pattern ( (_module.OwnedObject.userFieldsUnchanged $prevHeap@@20 $Heap@@20 this@@36) (_module.AtomicCounter.userFieldsUnchanged $prevHeap@@20 $Heap@@20 this@@36) ($IsGoodHeap $Heap@@20))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@21 T@U) ($Heap@@21 T@U) (this@@37 T@U) ) (!  (=> (or (|_module.AtomicCounter.localUserInv2#canCall| $prevHeap@@21 $Heap@@21 this@@37) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@37 null)) (not true)) ($Is refType this@@37 Tclass._module.AtomicCounter)))) (= (_module.OwnedObject.localUserInv2 $prevHeap@@21 $Heap@@21 this@@37) (_module.AtomicCounter.localUserInv2 $prevHeap@@21 $Heap@@21 this@@37)))
 :pattern ( (_module.OwnedObject.localUserInv2 $prevHeap@@21 $Heap@@21 this@@37) ($Is refType this@@37 Tclass._module.AtomicCounter) ($IsGoodHeap $Heap@@21))
 :pattern ( (_module.OwnedObject.localUserInv2 $prevHeap@@21 $Heap@@21 this@@37) (_module.AtomicCounter.localUserInv2 $prevHeap@@21 $Heap@@21 this@@37) ($IsGoodHeap $Heap@@21))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@22 T@U) ($Heap@@22 T@U) (this@@38 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userFieldsUnchanged#canCall| $prevHeap@@22 $Heap@@22 this@@38) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@38 null)) (not true)) ($Is refType this@@38 Tclass._module.DoubleReadMethod)))) (= (_module.OwnedObject.userFieldsUnchanged $prevHeap@@22 $Heap@@22 this@@38) (_module.DoubleReadMethod.userFieldsUnchanged $prevHeap@@22 $Heap@@22 this@@38)))
 :pattern ( (_module.OwnedObject.userFieldsUnchanged $prevHeap@@22 $Heap@@22 this@@38) ($Is refType this@@38 Tclass._module.DoubleReadMethod) ($IsGoodHeap $Heap@@22))
 :pattern ( (_module.OwnedObject.userFieldsUnchanged $prevHeap@@22 $Heap@@22 this@@38) (_module.DoubleReadMethod.userFieldsUnchanged $prevHeap@@22 $Heap@@22 this@@38) ($IsGoodHeap $Heap@@22))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@23 T@U) ($Heap@@23 T@U) (this@@39 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.localUserInv2#canCall| $prevHeap@@23 $Heap@@23 this@@39) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@39 null)) (not true)) ($Is refType this@@39 Tclass._module.DoubleReadMethod)))) (= (_module.OwnedObject.localUserInv2 $prevHeap@@23 $Heap@@23 this@@39) (_module.DoubleReadMethod.localUserInv2 $prevHeap@@23 $Heap@@23 this@@39)))
 :pattern ( (_module.OwnedObject.localUserInv2 $prevHeap@@23 $Heap@@23 this@@39) ($Is refType this@@39 Tclass._module.DoubleReadMethod) ($IsGoodHeap $Heap@@23))
 :pattern ( (_module.OwnedObject.localUserInv2 $prevHeap@@23 $Heap@@23 this@@39) (_module.DoubleReadMethod.localUserInv2 $prevHeap@@23 $Heap@@23 this@@39) ($IsGoodHeap $Heap@@23))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@24 T@U) ($Heap@@24 T@U) (this@@40 T@U) ) (!  (=> (or (|_module.Thread.inv2#canCall| $prevHeap@@24 $Heap@@24 this@@40) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@40 null)) (not true)) ($Is refType this@@40 Tclass._module.Thread)))) (= (_module.Object.inv2 $prevHeap@@24 $Heap@@24 this@@40) (_module.Thread.inv2 $prevHeap@@24 $Heap@@24 this@@40)))
 :pattern ( (_module.Object.inv2 $prevHeap@@24 $Heap@@24 this@@40) ($Is refType this@@40 Tclass._module.Thread) ($IsGoodHeap $Heap@@24))
 :pattern ( (_module.Object.inv2 $prevHeap@@24 $Heap@@24 this@@40) (_module.Thread.inv2 $prevHeap@@24 $Heap@@24 this@@40) ($IsGoodHeap $Heap@@24))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@25 T@U) (this@@41 T@U) (|owner#0@@0| T@U) ) (!  (=> (or (|_module.AtomicCounter.userFieldsOwnedBy#canCall| $Heap@@25 this@@41 |owner#0@@0|) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@41 null)) (not true)) ($Is refType this@@41 Tclass._module.AtomicCounter)))) (= (_module.OwnedObject.userFieldsOwnedBy $Heap@@25 this@@41 |owner#0@@0|) (_module.AtomicCounter.userFieldsOwnedBy $Heap@@25 this@@41 |owner#0@@0|)))
 :pattern ( (_module.OwnedObject.userFieldsOwnedBy $Heap@@25 this@@41 |owner#0@@0|) ($Is refType this@@41 Tclass._module.AtomicCounter) ($IsGoodHeap $Heap@@25))
 :pattern ( (_module.OwnedObject.userFieldsOwnedBy $Heap@@25 this@@41 |owner#0@@0|) (_module.AtomicCounter.userFieldsOwnedBy $Heap@@25 this@@41 |owner#0@@0|) ($IsGoodHeap $Heap@@25))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@25 T@U) ($Heap@@26 T@U) (this@@42 T@U) ) (!  (=> (or (|_module.AtomicCounter.userInv2#canCall| $prevHeap@@25 $Heap@@26 this@@42) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@42 null)) (not true)) ($Is refType this@@42 Tclass._module.AtomicCounter)))) (= (_module.OwnedObject.userInv2 $prevHeap@@25 $Heap@@26 this@@42) (_module.AtomicCounter.userInv2 $prevHeap@@25 $Heap@@26 this@@42)))
 :pattern ( (_module.OwnedObject.userInv2 $prevHeap@@25 $Heap@@26 this@@42) ($Is refType this@@42 Tclass._module.AtomicCounter) ($IsGoodHeap $Heap@@26))
 :pattern ( (_module.OwnedObject.userInv2 $prevHeap@@25 $Heap@@26 this@@42) (_module.AtomicCounter.userInv2 $prevHeap@@25 $Heap@@26 this@@42) ($IsGoodHeap $Heap@@26))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@27 T@U) (this@@43 T@U) (|owner#0@@1| T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userFieldsOwnedBy#canCall| $Heap@@27 this@@43 |owner#0@@1|) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@43 null)) (not true)) ($Is refType this@@43 Tclass._module.DoubleReadMethod)))) (= (_module.OwnedObject.userFieldsOwnedBy $Heap@@27 this@@43 |owner#0@@1|) (_module.DoubleReadMethod.userFieldsOwnedBy $Heap@@27 this@@43 |owner#0@@1|)))
 :pattern ( (_module.OwnedObject.userFieldsOwnedBy $Heap@@27 this@@43 |owner#0@@1|) ($Is refType this@@43 Tclass._module.DoubleReadMethod) ($IsGoodHeap $Heap@@27))
 :pattern ( (_module.OwnedObject.userFieldsOwnedBy $Heap@@27 this@@43 |owner#0@@1|) (_module.DoubleReadMethod.userFieldsOwnedBy $Heap@@27 this@@43 |owner#0@@1|) ($IsGoodHeap $Heap@@27))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@26 T@U) ($Heap@@28 T@U) (this@@44 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userInv2#canCall| $prevHeap@@26 $Heap@@28 this@@44) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@44 null)) (not true)) ($Is refType this@@44 Tclass._module.DoubleReadMethod)))) (= (_module.OwnedObject.userInv2 $prevHeap@@26 $Heap@@28 this@@44) (_module.DoubleReadMethod.userInv2 $prevHeap@@26 $Heap@@28 this@@44)))
 :pattern ( (_module.OwnedObject.userInv2 $prevHeap@@26 $Heap@@28 this@@44) ($Is refType this@@44 Tclass._module.DoubleReadMethod) ($IsGoodHeap $Heap@@28))
 :pattern ( (_module.OwnedObject.userInv2 $prevHeap@@26 $Heap@@28 this@@44) (_module.DoubleReadMethod.userInv2 $prevHeap@@26 $Heap@@28 this@@44) ($IsGoodHeap $Heap@@28))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($prevHeap@@27 T@U) ($Heap@@29 T@U) (this@@45 T@U) ) (!  (=> (or (|_module.OwnedObject.localInv2#canCall| $prevHeap@@27 $Heap@@29 this@@45) (and (< 2 $FunctionContextHeight) (and (or (not (= this@@45 null)) (not true)) ($Is refType this@@45 Tclass._module.OwnedObject)))) (= (_module.Object.localInv2 $prevHeap@@27 $Heap@@29 this@@45) (_module.OwnedObject.localInv2 $prevHeap@@27 $Heap@@29 this@@45)))
 :pattern ( (_module.Object.localInv2 $prevHeap@@27 $Heap@@29 this@@45) ($Is refType this@@45 Tclass._module.OwnedObject) ($IsGoodHeap $Heap@@29))
 :pattern ( (_module.Object.localInv2 $prevHeap@@27 $Heap@@29 this@@45) (_module.OwnedObject.localInv2 $prevHeap@@27 $Heap@@29 this@@45) ($IsGoodHeap $Heap@@29))
))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($prevHeap@@28 T@U) ($Heap@@30 T@U) (this@@46 T@U) ) (!  (=> (or (|_module.OwnedObject.inv2#canCall| $prevHeap@@28 $Heap@@30 this@@46) (and (< 6 $FunctionContextHeight) (and (or (not (= this@@46 null)) (not true)) ($Is refType this@@46 Tclass._module.OwnedObject)))) (= (_module.Object.inv2 $prevHeap@@28 $Heap@@30 this@@46) (_module.OwnedObject.inv2 $prevHeap@@28 $Heap@@30 this@@46)))
 :pattern ( (_module.Object.inv2 $prevHeap@@28 $Heap@@30 this@@46) ($Is refType this@@46 Tclass._module.OwnedObject) ($IsGoodHeap $Heap@@30))
 :pattern ( (_module.Object.inv2 $prevHeap@@28 $Heap@@30 this@@46) (_module.OwnedObject.inv2 $prevHeap@@28 $Heap@@30 this@@46) ($IsGoodHeap $Heap@@30))
))))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._module.Universe) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._module.Universe)))
 :pattern ( ($IsBox bx@@6 Tclass._module.Universe))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._module.NonOwnedObject) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._module.NonOwnedObject)))
 :pattern ( ($IsBox bx@@7 Tclass._module.NonOwnedObject))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.OwnedObject) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._module.OwnedObject)))
 :pattern ( ($IsBox bx@@8 Tclass._module.OwnedObject))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.Universe?) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass._module.Universe?)))
 :pattern ( ($IsBox bx@@9 Tclass._module.Universe?))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass._module.Object) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) Tclass._module.Object)))
 :pattern ( ($IsBox bx@@10 Tclass._module.Object))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 Tclass._module.Thread) (and (= ($Box refType ($Unbox refType bx@@11)) bx@@11) ($Is refType ($Unbox refType bx@@11) Tclass._module.Thread)))
 :pattern ( ($IsBox bx@@11 Tclass._module.Thread))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 Tclass._module.Object?) (and (= ($Box refType ($Unbox refType bx@@12)) bx@@12) ($Is refType ($Unbox refType bx@@12) Tclass._module.Object?)))
 :pattern ( ($IsBox bx@@12 Tclass._module.Object?))
)))
(assert (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 Tclass._module.NonOwnedObject?) (and (= ($Box refType ($Unbox refType bx@@13)) bx@@13) ($Is refType ($Unbox refType bx@@13) Tclass._module.NonOwnedObject?)))
 :pattern ( ($IsBox bx@@13 Tclass._module.NonOwnedObject?))
)))
(assert (forall ((bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 Tclass._module.OwnedObject?) (and (= ($Box refType ($Unbox refType bx@@14)) bx@@14) ($Is refType ($Unbox refType bx@@14) Tclass._module.OwnedObject?)))
 :pattern ( ($IsBox bx@@14 Tclass._module.OwnedObject?))
)))
(assert (forall ((bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 Tclass._module.Thread?) (and (= ($Box refType ($Unbox refType bx@@15)) bx@@15) ($Is refType ($Unbox refType bx@@15) Tclass._module.Thread?)))
 :pattern ( ($IsBox bx@@15 Tclass._module.Thread?))
)))
(assert (forall ((bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 Tclass._module.AtomicCounter?) (and (= ($Box refType ($Unbox refType bx@@16)) bx@@16) ($Is refType ($Unbox refType bx@@16) Tclass._module.AtomicCounter?)))
 :pattern ( ($IsBox bx@@16 Tclass._module.AtomicCounter?))
)))
(assert (forall ((bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 Tclass._module.AtomicCounter) (and (= ($Box refType ($Unbox refType bx@@17)) bx@@17) ($Is refType ($Unbox refType bx@@17) Tclass._module.AtomicCounter)))
 :pattern ( ($IsBox bx@@17 Tclass._module.AtomicCounter))
)))
(assert (forall ((bx@@18 T@U) ) (!  (=> ($IsBox bx@@18 Tclass._module.DoubleReadMethod?) (and (= ($Box refType ($Unbox refType bx@@18)) bx@@18) ($Is refType ($Unbox refType bx@@18) Tclass._module.DoubleReadMethod?)))
 :pattern ( ($IsBox bx@@18 Tclass._module.DoubleReadMethod?))
)))
(assert (forall ((bx@@19 T@U) ) (!  (=> ($IsBox bx@@19 Tclass._module.DoubleReadMethod) (and (= ($Box refType ($Unbox refType bx@@19)) bx@@19) ($Is refType ($Unbox refType bx@@19) Tclass._module.DoubleReadMethod)))
 :pattern ( ($IsBox bx@@19 Tclass._module.DoubleReadMethod))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass._module.Universe)  (and ($Is refType |c#0@@6| Tclass._module.Universe?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.Universe))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.Universe?))
)))
(assert (forall ((|c#0@@7| T@U) ) (! (= ($Is refType |c#0@@7| Tclass._module.Object)  (and ($Is refType |c#0@@7| Tclass._module.Object?) (or (not (= |c#0@@7| null)) (not true))))
 :pattern ( ($Is refType |c#0@@7| Tclass._module.Object))
 :pattern ( ($Is refType |c#0@@7| Tclass._module.Object?))
)))
(assert (forall ((|c#0@@8| T@U) ) (! (= ($Is refType |c#0@@8| Tclass._module.NonOwnedObject)  (and ($Is refType |c#0@@8| Tclass._module.NonOwnedObject?) (or (not (= |c#0@@8| null)) (not true))))
 :pattern ( ($Is refType |c#0@@8| Tclass._module.NonOwnedObject))
 :pattern ( ($Is refType |c#0@@8| Tclass._module.NonOwnedObject?))
)))
(assert (forall ((|c#0@@9| T@U) ) (! (= ($Is refType |c#0@@9| Tclass._module.OwnedObject)  (and ($Is refType |c#0@@9| Tclass._module.OwnedObject?) (or (not (= |c#0@@9| null)) (not true))))
 :pattern ( ($Is refType |c#0@@9| Tclass._module.OwnedObject))
 :pattern ( ($Is refType |c#0@@9| Tclass._module.OwnedObject?))
)))
(assert (forall ((|c#0@@10| T@U) ) (! (= ($Is refType |c#0@@10| Tclass._module.Thread)  (and ($Is refType |c#0@@10| Tclass._module.Thread?) (or (not (= |c#0@@10| null)) (not true))))
 :pattern ( ($Is refType |c#0@@10| Tclass._module.Thread))
 :pattern ( ($Is refType |c#0@@10| Tclass._module.Thread?))
)))
(assert (forall ((|c#0@@11| T@U) ) (! (= ($Is refType |c#0@@11| Tclass._module.AtomicCounter)  (and ($Is refType |c#0@@11| Tclass._module.AtomicCounter?) (or (not (= |c#0@@11| null)) (not true))))
 :pattern ( ($Is refType |c#0@@11| Tclass._module.AtomicCounter))
 :pattern ( ($Is refType |c#0@@11| Tclass._module.AtomicCounter?))
)))
(assert (forall ((|c#0@@12| T@U) ) (! (= ($Is refType |c#0@@12| Tclass._module.DoubleReadMethod)  (and ($Is refType |c#0@@12| Tclass._module.DoubleReadMethod?) (or (not (= |c#0@@12| null)) (not true))))
 :pattern ( ($Is refType |c#0@@12| Tclass._module.DoubleReadMethod))
 :pattern ( ($Is refType |c#0@@12| Tclass._module.DoubleReadMethod?))
)))
(assert (forall (($h@@25 T@U) ($o@@33 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@25) (and (or (not (= $o@@33 null)) (not true)) (= (dtype $o@@33) Tclass._module.DoubleReadMethod?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@25 $o@@33) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@25 $o@@33) _module.DoubleReadMethod.counter)) Tclass._module.AtomicCounter $h@@25))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@25 $o@@33) _module.DoubleReadMethod.counter)))
)))
(assert (forall (($h0@@15 T@U) ($h1@@15 T@U) (this@@47 T@U) (|owner#0@@2| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0@@15) ($IsGoodHeap $h1@@15)) (and (or (not (= this@@47 null)) (not true)) (and ($Is refType this@@47 Tclass._module.OwnedObject) ($IsAlloc refType this@@47 Tclass._module.OwnedObject $h0@@15)))) (or (|_module.OwnedObject.userFieldsOwnedBy#canCall| $h0@@15 this@@47 |owner#0@@2|) (and ($Is refType |owner#0@@2| Tclass._module.Object) ($IsAlloc refType |owner#0@@2| Tclass._module.Object $h0@@15)))) (and ($IsHeapAnchor $h0@@15) ($HeapSucc $h0@@15 $h1@@15))) (=> (forall (($o@@34 T@U) ($f@@15 T@U) )  (=> (and (or (not (= $o@@34 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@15 $o@@34) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@15 $o@@34) $f@@15) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@15 $o@@34) $f@@15)))) (= (_module.OwnedObject.userFieldsOwnedBy $h0@@15 this@@47 |owner#0@@2|) (_module.OwnedObject.userFieldsOwnedBy $h1@@15 this@@47 |owner#0@@2|))))
 :pattern ( ($IsHeapAnchor $h0@@15) ($HeapSucc $h0@@15 $h1@@15) (_module.OwnedObject.userFieldsOwnedBy $h1@@15 this@@47 |owner#0@@2|))
)))
(assert (forall (($h0@@16 T@U) ($h1@@16 T@U) (this@@48 T@U) (|owner#0@@3| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0@@16) ($IsGoodHeap $h1@@16)) (and (or (not (= this@@48 null)) (not true)) (and ($Is refType this@@48 Tclass._module.AtomicCounter) ($IsAlloc refType this@@48 Tclass._module.AtomicCounter $h0@@16)))) (or (|_module.AtomicCounter.userFieldsOwnedBy#canCall| $h0@@16 this@@48 |owner#0@@3|) (and ($Is refType |owner#0@@3| Tclass._module.Object) ($IsAlloc refType |owner#0@@3| Tclass._module.Object $h0@@16)))) (and ($IsHeapAnchor $h0@@16) ($HeapSucc $h0@@16 $h1@@16))) (=> (forall (($o@@35 T@U) ($f@@16 T@U) )  (=> (and (or (not (= $o@@35 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@16 $o@@35) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@16 $o@@35) $f@@16) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@16 $o@@35) $f@@16)))) (= (_module.AtomicCounter.userFieldsOwnedBy $h0@@16 this@@48 |owner#0@@3|) (_module.AtomicCounter.userFieldsOwnedBy $h1@@16 this@@48 |owner#0@@3|))))
 :pattern ( ($IsHeapAnchor $h0@@16) ($HeapSucc $h0@@16 $h1@@16) (_module.AtomicCounter.userFieldsOwnedBy $h1@@16 this@@48 |owner#0@@3|))
)))
(assert (forall (($h0@@17 T@U) ($h1@@17 T@U) (this@@49 T@U) (|owner#0@@4| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0@@17) ($IsGoodHeap $h1@@17)) (and (or (not (= this@@49 null)) (not true)) (and ($Is refType this@@49 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@49 Tclass._module.DoubleReadMethod $h0@@17)))) (or (|_module.DoubleReadMethod.userFieldsOwnedBy#canCall| $h0@@17 this@@49 |owner#0@@4|) (and ($Is refType |owner#0@@4| Tclass._module.Object) ($IsAlloc refType |owner#0@@4| Tclass._module.Object $h0@@17)))) (and ($IsHeapAnchor $h0@@17) ($HeapSucc $h0@@17 $h1@@17))) (=> (forall (($o@@36 T@U) ($f@@17 T@U) )  (=> (and (or (not (= $o@@36 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@17 $o@@36) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@17 $o@@36) $f@@17) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@17 $o@@36) $f@@17)))) (= (_module.DoubleReadMethod.userFieldsOwnedBy $h0@@17 this@@49 |owner#0@@4|) (_module.DoubleReadMethod.userFieldsOwnedBy $h1@@17 this@@49 |owner#0@@4|))))
 :pattern ( ($IsHeapAnchor $h0@@17) ($HeapSucc $h0@@17 $h1@@17) (_module.DoubleReadMethod.userFieldsOwnedBy $h1@@17 this@@49 |owner#0@@4|))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@31 T@U) (this@@50 T@U) ) (!  (=> (or (|_module.OwnedObject.localInv#canCall| $Heap@@31 this@@50) (and (< 4 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@31) (and (or (not (= this@@50 null)) (not true)) (and ($Is refType this@@50 Tclass._module.OwnedObject) ($IsAlloc refType this@@50 Tclass._module.OwnedObject $Heap@@31)))))) (and (and (|_module.Object.baseInv#canCall| $Heap@@31 this@@50) (=> (_module.Object.baseInv $Heap@@31 this@@50) (=> (= (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@31 this@@50) _module.OwnedObject.owner))) (_module.Object.universe this@@50)) (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@31 (_module.Object.universe this@@50)) _module.Universe.content)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@31 this@@50) _module.OwnedObject.owner)) (and (|_module.OwnedObject.baseUserInv#canCall| $Heap@@31 this@@50) (=> (_module.OwnedObject.baseUserInv $Heap@@31 this@@50) (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@31 this@@50) _module.OwnedObject.closed))) (|_module.OwnedObject.localUserInv#canCall| $Heap@@31 this@@50)))))))) (= (_module.OwnedObject.localInv $Heap@@31 this@@50)  (and (and (and (and (_module.Object.baseInv $Heap@@31 this@@50) (= (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@31 this@@50) _module.OwnedObject.owner))) (_module.Object.universe this@@50))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@31 (_module.Object.universe this@@50)) _module.Universe.content)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@31 this@@50) _module.OwnedObject.owner))) (_module.OwnedObject.baseUserInv $Heap@@31 this@@50)) (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@31 this@@50) _module.OwnedObject.closed))) (_module.OwnedObject.localUserInv $Heap@@31 this@@50))))))
 :pattern ( (_module.OwnedObject.localInv $Heap@@31 this@@50) ($IsGoodHeap $Heap@@31))
))))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@4 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@4)  (or (|Set#IsMember| a@@8 o@@4) (|Set#IsMember| b@@5 o@@4)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@4))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@9 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@6) a@@9) b@@6) (= (|Set#Difference| (|Set#Union| a@@9 b@@6) b@@6) a@@9)))
 :pattern ( (|Set#Union| a@@9 b@@6))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@32 T@U) (this@@51 T@U) ) (!  (=> (or (|_module.Object.baseInv#canCall| $Heap@@32 this@@51) (and (< 3 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@32) (and (or (not (= this@@51 null)) (not true)) (and ($Is refType this@@51 Tclass._module.Object) ($IsAlloc refType this@@51 Tclass._module.Object $Heap@@32)))))) (and (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@32 (_module.Object.universe this@@51)) _module.Universe.content)) ($Box refType this@@51)) (|_module.Universe.globalBaseInv#canCall| $Heap@@32 (_module.Object.universe this@@51))) (= (_module.Object.baseInv $Heap@@32 this@@51)  (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@32 (_module.Object.universe this@@51)) _module.Universe.content)) ($Box refType this@@51)) (_module.Universe.globalBaseInv $Heap@@32 (_module.Object.universe this@@51))))))
 :pattern ( (_module.Object.baseInv $Heap@@32 this@@51) ($IsGoodHeap $Heap@@32))
))))
(assert (forall (($o@@37 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@37 Tclass._module.NonOwnedObject? $heap) ($IsAlloc refType $o@@37 Tclass._module.Object? $heap))
 :pattern ( ($IsAlloc refType $o@@37 Tclass._module.NonOwnedObject? $heap))
)))
(assert (forall (($o@@38 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@38 Tclass._module.OwnedObject? $heap@@0) ($IsAlloc refType $o@@38 Tclass._module.Object? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@38 Tclass._module.OwnedObject? $heap@@0))
)))
(assert (forall (($o@@39 T@U) ($heap@@1 T@U) ) (!  (=> ($IsAlloc refType $o@@39 Tclass._module.Thread? $heap@@1) ($IsAlloc refType $o@@39 Tclass._module.NonOwnedObject? $heap@@1))
 :pattern ( ($IsAlloc refType $o@@39 Tclass._module.Thread? $heap@@1))
)))
(assert (forall (($o@@40 T@U) ($heap@@2 T@U) ) (!  (=> ($IsAlloc refType $o@@40 Tclass._module.AtomicCounter? $heap@@2) ($IsAlloc refType $o@@40 Tclass._module.OwnedObject? $heap@@2))
 :pattern ( ($IsAlloc refType $o@@40 Tclass._module.AtomicCounter? $heap@@2))
)))
(assert (forall (($o@@41 T@U) ($heap@@3 T@U) ) (!  (=> ($IsAlloc refType $o@@41 Tclass._module.DoubleReadMethod? $heap@@3) ($IsAlloc refType $o@@41 Tclass._module.OwnedObject? $heap@@3))
 :pattern ( ($IsAlloc refType $o@@41 Tclass._module.DoubleReadMethod? $heap@@3))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@29 T@U) ($Heap@@33 T@U) (this@@52 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userFieldsUnchanged#canCall| $prevHeap@@29 $Heap@@33 this@@52) (and (< 0 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@29) ($IsGoodHeap $Heap@@33)) ($HeapSucc $prevHeap@@29 $Heap@@33)) (and (or (not (= this@@52 null)) (not true)) (and ($Is refType this@@52 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@52 Tclass._module.DoubleReadMethod $prevHeap@@29)))))) (= (_module.DoubleReadMethod.userFieldsUnchanged $prevHeap@@29 $Heap@@33 this@@52)  (and (and (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@29 this@@52) _module.DoubleReadMethod.programCounter))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@33 this@@52) _module.DoubleReadMethod.programCounter)))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@29 this@@52) _module.DoubleReadMethod.counter)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@33 this@@52) _module.DoubleReadMethod.counter)))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@29 this@@52) _module.DoubleReadMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@33 this@@52) _module.DoubleReadMethod.initial__value))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@29 this@@52) _module.DoubleReadMethod.final__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@33 this@@52) _module.DoubleReadMethod.final__value)))))))
 :pattern ( (_module.DoubleReadMethod.userFieldsUnchanged $prevHeap@@29 $Heap@@33 this@@52) ($IsGoodHeap $Heap@@33))
))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall (($Heap@@34 T@U) (this@@53 T@U) ) (!  (=> (or (|_module.Object.objectGlobalInv#canCall| $Heap@@34 this@@53) (and (< 8 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@34) (and (or (not (= this@@53 null)) (not true)) (and ($Is refType this@@53 Tclass._module.Object) ($IsAlloc refType this@@53 Tclass._module.Object $Heap@@34)))))) (and (and (|_module.Object.baseInv#canCall| $Heap@@34 this@@53) (=> (_module.Object.baseInv $Heap@@34 this@@53) (|_module.Universe.globalInv#canCall| $Heap@@34 (_module.Object.universe this@@53)))) (= (_module.Object.objectGlobalInv $Heap@@34 this@@53)  (and (_module.Object.baseInv $Heap@@34 this@@53) (_module.Universe.globalInv $Heap@@34 (_module.Object.universe this@@53))))))
 :pattern ( (_module.Object.objectGlobalInv $Heap@@34 this@@53) ($IsGoodHeap $Heap@@34))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($prevHeap@@30 T@U) ($Heap@@35 T@U) (this@@54 T@U) ) (!  (=> (or (|_module.Thread.localInv2#canCall| $prevHeap@@30 $Heap@@35 this@@54) (and (< 0 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@30) ($IsGoodHeap $Heap@@35)) ($HeapSucc $prevHeap@@30 $Heap@@35)) (and (or (not (= this@@54 null)) (not true)) (and ($Is refType this@@54 Tclass._module.Thread) ($IsAlloc refType this@@54 Tclass._module.Thread $prevHeap@@30)))))) (= (_module.Thread.localInv2 $prevHeap@@30 $Heap@@35 this@@54) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (_module.Thread.localInv2 $prevHeap@@30 $Heap@@35 this@@54) ($IsGoodHeap $Heap@@35))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@31 T@U) ($Heap@@36 T@U) (this@@55 T@U) ) (!  (=> (or (|_module.AtomicCounter.userInv2#canCall| $prevHeap@@31 $Heap@@36 this@@55) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@31) ($IsGoodHeap $Heap@@36)) ($HeapSucc $prevHeap@@31 $Heap@@36)) (and (or (not (= this@@55 null)) (not true)) (and ($Is refType this@@55 Tclass._module.AtomicCounter) ($IsAlloc refType this@@55 Tclass._module.AtomicCounter $prevHeap@@31)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.AtomicCounter.localUserInv2#canCall| $prevHeap@@31 $Heap@@36 this@@55)) (= (_module.AtomicCounter.userInv2 $prevHeap@@31 $Heap@@36 this@@55)  (and true (_module.AtomicCounter.localUserInv2 $prevHeap@@31 $Heap@@36 this@@55)))))
 :pattern ( (_module.AtomicCounter.userInv2 $prevHeap@@31 $Heap@@36 this@@55) ($IsGoodHeap $Heap@@36))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@32 T@U) ($Heap@@37 T@U) (this@@56 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userInv2#canCall| $prevHeap@@32 $Heap@@37 this@@56) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@32) ($IsGoodHeap $Heap@@37)) ($HeapSucc $prevHeap@@32 $Heap@@37)) (and (or (not (= this@@56 null)) (not true)) (and ($Is refType this@@56 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@56 Tclass._module.DoubleReadMethod $prevHeap@@32)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.DoubleReadMethod.localUserInv2#canCall| $prevHeap@@32 $Heap@@37 this@@56)) (= (_module.DoubleReadMethod.userInv2 $prevHeap@@32 $Heap@@37 this@@56)  (and true (_module.DoubleReadMethod.localUserInv2 $prevHeap@@32 $Heap@@37 this@@56)))))
 :pattern ( (_module.DoubleReadMethod.userInv2 $prevHeap@@32 $Heap@@37 this@@56) ($IsGoodHeap $Heap@@37))
))))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (!  (=> (|Set#Equal| a@@10 b@@7) (= a@@10 b@@7))
 :pattern ( (|Set#Equal| a@@10 b@@7))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) (c T@U) ) (!  (=> (or (not (= a@@11 c)) (not true)) (=> (and ($HeapSucc a@@11 b@@8) ($HeapSucc b@@8 c)) ($HeapSucc a@@11 c)))
 :pattern ( ($HeapSucc a@@11 b@@8) ($HeapSucc b@@8 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@20 T@U) ) (!  (=> ($IsBox bx@@20 TInt) (and (= ($Box intType ($Unbox intType bx@@20)) bx@@20) ($Is intType ($Unbox intType bx@@20) TInt)))
 :pattern ( ($IsBox bx@@20 TInt))
)))
(assert (forall ((bx@@21 T@U) ) (!  (=> ($IsBox bx@@21 TBool) (and (= ($Box boolType ($Unbox boolType bx@@21)) bx@@21) ($Is boolType ($Unbox boolType bx@@21) TBool)))
 :pattern ( ($IsBox bx@@21 TBool))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@38 T@U) (this@@57 T@U) ) (!  (=> (or (|_module.AtomicCounter.userInv#canCall| $Heap@@38 this@@57) (and (< 1 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@38) (and (or (not (= this@@57 null)) (not true)) (and ($Is refType this@@57 Tclass._module.AtomicCounter) ($IsAlloc refType this@@57 Tclass._module.AtomicCounter $Heap@@38)))))) (=> (_module.AtomicCounter.userInv $Heap@@38 this@@57) (_module.AtomicCounter.localUserInv $Heap@@38 this@@57)))
 :pattern ( (_module.AtomicCounter.userInv $Heap@@38 this@@57))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@39 T@U) (this@@58 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userInv#canCall| $Heap@@39 this@@58) (and (< 1 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@39) (and (or (not (= this@@58 null)) (not true)) (and ($Is refType this@@58 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@58 Tclass._module.DoubleReadMethod $Heap@@39)))))) (=> (_module.DoubleReadMethod.userInv $Heap@@39 this@@58) (_module.DoubleReadMethod.localUserInv $Heap@@39 this@@58)))
 :pattern ( (_module.DoubleReadMethod.userInv $Heap@@39 this@@58))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@40 T@U) (this@@59 T@U) ) (!  (=> (or (|_module.OwnedObject.userInv#canCall| $Heap@@40 this@@59) (and (< 2 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@40) (and (or (not (= this@@59 null)) (not true)) (and ($Is refType this@@59 Tclass._module.OwnedObject) ($IsAlloc refType this@@59 Tclass._module.OwnedObject $Heap@@40)))))) (=> (_module.OwnedObject.userInv $Heap@@40 this@@59) (_module.OwnedObject.localUserInv $Heap@@40 this@@59)))
 :pattern ( (_module.OwnedObject.userInv $Heap@@40 this@@59))
))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@41 T@U) (this@@60 T@U) ) (!  (=> (or (|_module.OwnedObject.inv#canCall| $Heap@@41 this@@60) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@41) (and (or (not (= this@@60 null)) (not true)) (and ($Is refType this@@60 Tclass._module.OwnedObject) ($IsAlloc refType this@@60 Tclass._module.OwnedObject $Heap@@41)))))) (=> (_module.OwnedObject.inv $Heap@@41 this@@60) (_module.OwnedObject.localInv $Heap@@41 this@@60)))
 :pattern ( (_module.OwnedObject.inv $Heap@@41 this@@60))
))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@42 T@U) (this@@61 T@U) ) (!  (=> (or (|_module.Thread.inv#canCall| $Heap@@42 this@@61) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@42) (and (or (not (= this@@61 null)) (not true)) (and ($Is refType this@@61 Tclass._module.Thread) ($IsAlloc refType this@@61 Tclass._module.Thread $Heap@@42)))))) (=> (_module.Thread.inv $Heap@@42 this@@61) (_module.Thread.localInv $Heap@@42 this@@61)))
 :pattern ( (_module.Thread.inv $Heap@@42 this@@61))
))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($Heap@@43 T@U) (this@@62 T@U) ) (!  (=> (or (|_module.Object.inv#canCall| $Heap@@43 this@@62) (and (< 6 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@43) (and (or (not (= this@@62 null)) (not true)) (and ($Is refType this@@62 Tclass._module.Object) ($IsAlloc refType this@@62 Tclass._module.Object $Heap@@43)))))) (=> (_module.Object.inv $Heap@@43 this@@62) (_module.Object.localInv $Heap@@43 this@@62)))
 :pattern ( (_module.Object.inv $Heap@@43 this@@62))
))))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@44 T@U) (this@@63 T@U) (|owner#0@@5| T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userFieldsOwnedBy#canCall| $Heap@@44 this@@63 |owner#0@@5|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@44) (and (or (not (= this@@63 null)) (not true)) (and ($Is refType this@@63 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@63 Tclass._module.DoubleReadMethod $Heap@@44)))) ($Is refType |owner#0@@5| Tclass._module.Object)))) (= (_module.DoubleReadMethod.userFieldsOwnedBy $Heap@@44 this@@63 |owner#0@@5|)  (and true (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@44 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@44 this@@63) _module.DoubleReadMethod.counter))) _module.OwnedObject.owner)) |owner#0@@5|))))
 :pattern ( (_module.DoubleReadMethod.userFieldsOwnedBy $Heap@@44 this@@63 |owner#0@@5|) ($IsGoodHeap $Heap@@44))
))))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@22 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@22) ($IsAllocBox bx@@22 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@22))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@45 T@U) (this@@64 T@U) ) (!  (=> (or (|_module.OwnedObject.inv#canCall| $Heap@@45 this@@64) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@45) (and (or (not (= this@@64 null)) (not true)) (and ($Is refType this@@64 Tclass._module.OwnedObject) ($IsAlloc refType this@@64 Tclass._module.OwnedObject $Heap@@45)))))) (and (and (|_module.OwnedObject.localInv#canCall| $Heap@@45 this@@64) (=> (_module.OwnedObject.localInv $Heap@@45 this@@64) (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@45 this@@64) _module.OwnedObject.closed))) (|_module.OwnedObject.userInv#canCall| $Heap@@45 this@@64)))) (= (_module.OwnedObject.inv $Heap@@45 this@@64)  (and (_module.OwnedObject.localInv $Heap@@45 this@@64) (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@45 this@@64) _module.OwnedObject.closed))) (_module.OwnedObject.userInv $Heap@@45 this@@64))))))
 :pattern ( (_module.OwnedObject.inv $Heap@@45 this@@64) ($IsGoodHeap $Heap@@45))
))))
(assert (forall (($h@@26 T@U) ($o@@42 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@26) (and (or (not (= $o@@42 null)) (not true)) ($Is refType $o@@42 Tclass._module.OwnedObject?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@26 $o@@42) alloc)))) ($IsAlloc boolType ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@26 $o@@42) _module.OwnedObject.closed)) TBool $h@@26))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@26 $o@@42) _module.OwnedObject.closed)))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@8)) x@@8)
 :pattern ( ($Box T@@4 x@@8))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@46 T@U) (this@@65 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.baseUserInv#canCall| $Heap@@46 this@@65) (and (< 2 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@46) (and (or (not (= this@@65 null)) (not true)) (and ($Is refType this@@65 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@65 Tclass._module.DoubleReadMethod $Heap@@46)))))) (= (_module.DoubleReadMethod.baseUserInv $Heap@@46 this@@65)  (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@46 (_module.Object.universe this@@65)) _module.Universe.content)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@46 this@@65) _module.DoubleReadMethod.counter)) (= (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@46 this@@65) _module.DoubleReadMethod.counter))) (_module.Object.universe this@@65)))))
 :pattern ( (_module.DoubleReadMethod.baseUserInv $Heap@@46 this@@65) ($IsGoodHeap $Heap@@46))
))))
(assert (forall (($h@@27 T@U) ($o@@43 T@U) ) (!  (=> (and ($IsGoodHeap $h@@27) (and (or (not (= $o@@43 null)) (not true)) (= (dtype $o@@43) Tclass._module.AtomicCounter?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@27 $o@@43) _module.AtomicCounter.value)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@27 $o@@43) _module.AtomicCounter.value)))
)))
(assert (forall (($h@@28 T@U) ($o@@44 T@U) ) (!  (=> (and ($IsGoodHeap $h@@28) (and (or (not (= $o@@44 null)) (not true)) (= (dtype $o@@44) Tclass._module.DoubleReadMethod?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@28 $o@@44) _module.DoubleReadMethod.programCounter)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@28 $o@@44) _module.DoubleReadMethod.programCounter)))
)))
(assert (forall (($h@@29 T@U) ($o@@45 T@U) ) (!  (=> (and ($IsGoodHeap $h@@29) (and (or (not (= $o@@45 null)) (not true)) (= (dtype $o@@45) Tclass._module.DoubleReadMethod?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@29 $o@@45) _module.DoubleReadMethod.initial__value)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@29 $o@@45) _module.DoubleReadMethod.initial__value)))
)))
(assert (forall (($h@@30 T@U) ($o@@46 T@U) ) (!  (=> (and ($IsGoodHeap $h@@30) (and (or (not (= $o@@46 null)) (not true)) (= (dtype $o@@46) Tclass._module.DoubleReadMethod?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@30 $o@@46) _module.DoubleReadMethod.final__value)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@30 $o@@46) _module.DoubleReadMethod.final__value)))
)))
(assert (forall (($h0@@18 T@U) ($h1@@18 T@U) (this@@66 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@18) ($IsGoodHeap $h1@@18)) (and (or (not (= this@@66 null)) (not true)) ($Is refType this@@66 Tclass._module.Universe))) (and ($IsHeapAnchor $h0@@18) ($HeapSucc $h0@@18 $h1@@18))) (=> (forall (($o@@47 T@U) ($f@@18 T@U) )  (=> (and (or (not (= $o@@47 null)) (not true)) (or (= $o@@47 this@@66) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@18 this@@66) _module.Universe.content)) ($Box refType $o@@47)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@18 $o@@47) $f@@18) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@18 $o@@47) $f@@18)))) (= (_module.Universe.globalBaseInv $h0@@18 this@@66) (_module.Universe.globalBaseInv $h1@@18 this@@66))))
 :pattern ( ($IsHeapAnchor $h0@@18) ($HeapSucc $h0@@18 $h1@@18) (_module.Universe.globalBaseInv $h1@@18 this@@66))
)))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (! (= (|Set#Union| a@@12 (|Set#Union| a@@12 b@@9)) (|Set#Union| a@@12 b@@9))
 :pattern ( (|Set#Union| a@@12 (|Set#Union| a@@12 b@@9)))
)))
(assert (forall (($h@@31 T@U) ($o@@48 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@31) (and (or (not (= $o@@48 null)) (not true)) ($Is refType $o@@48 Tclass._module.OwnedObject?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@31 $o@@48) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@31 $o@@48) _module.OwnedObject.owner)) Tclass._module.Object $h@@31))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@31 $o@@48) _module.OwnedObject.owner)))
)))
(assert (forall (($h0@@19 T@U) ($h1@@19 T@U) (this@@67 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@19) ($IsGoodHeap $h1@@19)) (and (or (not (= this@@67 null)) (not true)) (and ($Is refType this@@67 Tclass._module.Universe) ($IsAlloc refType this@@67 Tclass._module.Universe $h0@@19)))) (and ($IsHeapAnchor $h0@@19) ($HeapSucc $h0@@19 $h1@@19))) (=> (forall (($o@@49 T@U) ($f@@19 T@U) )  (=> (and (or (not (= $o@@49 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@19 $o@@49) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@19 $o@@49) $f@@19) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@19 $o@@49) $f@@19)))) (= (_module.Universe.globalInv $h0@@19 this@@67) (_module.Universe.globalInv $h1@@19 this@@67))))
 :pattern ( ($IsHeapAnchor $h0@@19) ($HeapSucc $h0@@19 $h1@@19) (_module.Universe.globalInv $h1@@19 this@@67))
)))
(assert (forall (($h0@@20 T@U) ($h1@@20 T@U) (this@@68 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@20) ($IsGoodHeap $h1@@20)) (and (or (not (= this@@68 null)) (not true)) (and ($Is refType this@@68 Tclass._module.Object) ($IsAlloc refType this@@68 Tclass._module.Object $h0@@20)))) (and ($IsHeapAnchor $h0@@20) ($HeapSucc $h0@@20 $h1@@20))) (=> (forall (($o@@50 T@U) ($f@@20 T@U) )  (=> (and (or (not (= $o@@50 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@20 $o@@50) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@20 $o@@50) $f@@20) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@20 $o@@50) $f@@20)))) (= (_module.Object.baseInv $h0@@20 this@@68) (_module.Object.baseInv $h1@@20 this@@68))))
 :pattern ( ($IsHeapAnchor $h0@@20) ($HeapSucc $h0@@20 $h1@@20) (_module.Object.baseInv $h1@@20 this@@68))
)))
(assert (forall (($h0@@21 T@U) ($h1@@21 T@U) (this@@69 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@21) ($IsGoodHeap $h1@@21)) (and (or (not (= this@@69 null)) (not true)) (and ($Is refType this@@69 Tclass._module.Object) ($IsAlloc refType this@@69 Tclass._module.Object $h0@@21)))) (and ($IsHeapAnchor $h0@@21) ($HeapSucc $h0@@21 $h1@@21))) (=> (forall (($o@@51 T@U) ($f@@21 T@U) )  (=> (and (or (not (= $o@@51 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@21 $o@@51) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@21 $o@@51) $f@@21) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@21 $o@@51) $f@@21)))) (= (_module.Object.objectGlobalInv $h0@@21 this@@69) (_module.Object.objectGlobalInv $h1@@21 this@@69))))
 :pattern ( ($IsHeapAnchor $h0@@21) ($HeapSucc $h0@@21 $h1@@21) (_module.Object.objectGlobalInv $h1@@21 this@@69))
)))
(assert (forall (($h0@@22 T@U) ($h1@@22 T@U) (this@@70 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@22) ($IsGoodHeap $h1@@22)) (and (or (not (= this@@70 null)) (not true)) (and ($Is refType this@@70 Tclass._module.Object) ($IsAlloc refType this@@70 Tclass._module.Object $h0@@22)))) (and ($IsHeapAnchor $h0@@22) ($HeapSucc $h0@@22 $h1@@22))) (=> (forall (($o@@52 T@U) ($f@@22 T@U) )  (=> (and (or (not (= $o@@52 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@22 $o@@52) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@22 $o@@52) $f@@22) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@22 $o@@52) $f@@22)))) (= (_module.Object.localInv $h0@@22 this@@70) (_module.Object.localInv $h1@@22 this@@70))))
 :pattern ( ($IsHeapAnchor $h0@@22) ($HeapSucc $h0@@22 $h1@@22) (_module.Object.localInv $h1@@22 this@@70))
)))
(assert (forall (($h0@@23 T@U) ($h1@@23 T@U) (this@@71 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@23) ($IsGoodHeap $h1@@23)) (and (or (not (= this@@71 null)) (not true)) (and ($Is refType this@@71 Tclass._module.Object) ($IsAlloc refType this@@71 Tclass._module.Object $h0@@23)))) (and ($IsHeapAnchor $h0@@23) ($HeapSucc $h0@@23 $h1@@23))) (=> (forall (($o@@53 T@U) ($f@@23 T@U) )  (=> (and (or (not (= $o@@53 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@23 $o@@53) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@23 $o@@53) $f@@23) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@23 $o@@53) $f@@23)))) (= (_module.Object.inv $h0@@23 this@@71) (_module.Object.inv $h1@@23 this@@71))))
 :pattern ( ($IsHeapAnchor $h0@@23) ($HeapSucc $h0@@23 $h1@@23) (_module.Object.inv $h1@@23 this@@71))
)))
(assert (forall (($h0@@24 T@U) ($h1@@24 T@U) (this@@72 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@24) ($IsGoodHeap $h1@@24)) (and (or (not (= this@@72 null)) (not true)) (and ($Is refType this@@72 Tclass._module.OwnedObject) ($IsAlloc refType this@@72 Tclass._module.OwnedObject $h0@@24)))) (and ($IsHeapAnchor $h0@@24) ($HeapSucc $h0@@24 $h1@@24))) (=> (forall (($o@@54 T@U) ($f@@24 T@U) )  (=> (and (or (not (= $o@@54 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@24 $o@@54) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@24 $o@@54) $f@@24) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@24 $o@@54) $f@@24)))) (= (_module.OwnedObject.localInv $h0@@24 this@@72) (_module.OwnedObject.localInv $h1@@24 this@@72))))
 :pattern ( ($IsHeapAnchor $h0@@24) ($HeapSucc $h0@@24 $h1@@24) (_module.OwnedObject.localInv $h1@@24 this@@72))
)))
(assert (forall (($h0@@25 T@U) ($h1@@25 T@U) (this@@73 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@25) ($IsGoodHeap $h1@@25)) (and (or (not (= this@@73 null)) (not true)) (and ($Is refType this@@73 Tclass._module.OwnedObject) ($IsAlloc refType this@@73 Tclass._module.OwnedObject $h0@@25)))) (and ($IsHeapAnchor $h0@@25) ($HeapSucc $h0@@25 $h1@@25))) (=> (forall (($o@@55 T@U) ($f@@25 T@U) )  (=> (and (or (not (= $o@@55 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@25 $o@@55) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@25 $o@@55) $f@@25) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@25 $o@@55) $f@@25)))) (= (_module.OwnedObject.inv $h0@@25 this@@73) (_module.OwnedObject.inv $h1@@25 this@@73))))
 :pattern ( ($IsHeapAnchor $h0@@25) ($HeapSucc $h0@@25 $h1@@25) (_module.OwnedObject.inv $h1@@25 this@@73))
)))
(assert (forall (($h0@@26 T@U) ($h1@@26 T@U) (this@@74 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@26) ($IsGoodHeap $h1@@26)) (and (or (not (= this@@74 null)) (not true)) (and ($Is refType this@@74 Tclass._module.OwnedObject) ($IsAlloc refType this@@74 Tclass._module.OwnedObject $h0@@26)))) (and ($IsHeapAnchor $h0@@26) ($HeapSucc $h0@@26 $h1@@26))) (=> (forall (($o@@56 T@U) ($f@@26 T@U) )  (=> (and (or (not (= $o@@56 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@26 $o@@56) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@26 $o@@56) $f@@26) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@26 $o@@56) $f@@26)))) (= (_module.OwnedObject.baseUserInv $h0@@26 this@@74) (_module.OwnedObject.baseUserInv $h1@@26 this@@74))))
 :pattern ( ($IsHeapAnchor $h0@@26) ($HeapSucc $h0@@26 $h1@@26) (_module.OwnedObject.baseUserInv $h1@@26 this@@74))
)))
(assert (forall (($h0@@27 T@U) ($h1@@27 T@U) (this@@75 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@27) ($IsGoodHeap $h1@@27)) (and (or (not (= this@@75 null)) (not true)) (and ($Is refType this@@75 Tclass._module.OwnedObject) ($IsAlloc refType this@@75 Tclass._module.OwnedObject $h0@@27)))) (and ($IsHeapAnchor $h0@@27) ($HeapSucc $h0@@27 $h1@@27))) (=> (forall (($o@@57 T@U) ($f@@27 T@U) )  (=> (and (or (not (= $o@@57 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@27 $o@@57) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@27 $o@@57) $f@@27) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@27 $o@@57) $f@@27)))) (= (_module.OwnedObject.localUserInv $h0@@27 this@@75) (_module.OwnedObject.localUserInv $h1@@27 this@@75))))
 :pattern ( ($IsHeapAnchor $h0@@27) ($HeapSucc $h0@@27 $h1@@27) (_module.OwnedObject.localUserInv $h1@@27 this@@75))
)))
(assert (forall (($h0@@28 T@U) ($h1@@28 T@U) (this@@76 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@28) ($IsGoodHeap $h1@@28)) (and (or (not (= this@@76 null)) (not true)) (and ($Is refType this@@76 Tclass._module.OwnedObject) ($IsAlloc refType this@@76 Tclass._module.OwnedObject $h0@@28)))) (and ($IsHeapAnchor $h0@@28) ($HeapSucc $h0@@28 $h1@@28))) (=> (forall (($o@@58 T@U) ($f@@28 T@U) )  (=> (and (or (not (= $o@@58 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@28 $o@@58) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@28 $o@@58) $f@@28) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@28 $o@@58) $f@@28)))) (= (_module.OwnedObject.userInv $h0@@28 this@@76) (_module.OwnedObject.userInv $h1@@28 this@@76))))
 :pattern ( ($IsHeapAnchor $h0@@28) ($HeapSucc $h0@@28 $h1@@28) (_module.OwnedObject.userInv $h1@@28 this@@76))
)))
(assert (forall (($h0@@29 T@U) ($h1@@29 T@U) (this@@77 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@29) ($IsGoodHeap $h1@@29)) (and (or (not (= this@@77 null)) (not true)) (and ($Is refType this@@77 Tclass._module.Thread) ($IsAlloc refType this@@77 Tclass._module.Thread $h0@@29)))) (and ($IsHeapAnchor $h0@@29) ($HeapSucc $h0@@29 $h1@@29))) (=> (forall (($o@@59 T@U) ($f@@29 T@U) )  (=> (and (or (not (= $o@@59 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@29 $o@@59) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@29 $o@@59) $f@@29) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@29 $o@@59) $f@@29)))) (= (_module.Thread.localInv $h0@@29 this@@77) (_module.Thread.localInv $h1@@29 this@@77))))
 :pattern ( ($IsHeapAnchor $h0@@29) ($HeapSucc $h0@@29 $h1@@29) (_module.Thread.localInv $h1@@29 this@@77))
)))
(assert (forall (($h0@@30 T@U) ($h1@@30 T@U) (this@@78 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@30) ($IsGoodHeap $h1@@30)) (and (or (not (= this@@78 null)) (not true)) (and ($Is refType this@@78 Tclass._module.Thread) ($IsAlloc refType this@@78 Tclass._module.Thread $h0@@30)))) (and ($IsHeapAnchor $h0@@30) ($HeapSucc $h0@@30 $h1@@30))) (=> (forall (($o@@60 T@U) ($f@@30 T@U) )  (=> (and (or (not (= $o@@60 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@30 $o@@60) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@30 $o@@60) $f@@30) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@30 $o@@60) $f@@30)))) (= (_module.Thread.inv $h0@@30 this@@78) (_module.Thread.inv $h1@@30 this@@78))))
 :pattern ( ($IsHeapAnchor $h0@@30) ($HeapSucc $h0@@30 $h1@@30) (_module.Thread.inv $h1@@30 this@@78))
)))
(assert (forall (($h0@@31 T@U) ($h1@@31 T@U) (this@@79 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@31) ($IsGoodHeap $h1@@31)) (and (or (not (= this@@79 null)) (not true)) (and ($Is refType this@@79 Tclass._module.AtomicCounter) ($IsAlloc refType this@@79 Tclass._module.AtomicCounter $h0@@31)))) (and ($IsHeapAnchor $h0@@31) ($HeapSucc $h0@@31 $h1@@31))) (=> (forall (($o@@61 T@U) ($f@@31 T@U) )  (=> (and (or (not (= $o@@61 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@31 $o@@61) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@31 $o@@61) $f@@31) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@31 $o@@61) $f@@31)))) (= (_module.AtomicCounter.baseUserInv $h0@@31 this@@79) (_module.AtomicCounter.baseUserInv $h1@@31 this@@79))))
 :pattern ( ($IsHeapAnchor $h0@@31) ($HeapSucc $h0@@31 $h1@@31) (_module.AtomicCounter.baseUserInv $h1@@31 this@@79))
)))
(assert (forall (($h0@@32 T@U) ($h1@@32 T@U) (this@@80 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@32) ($IsGoodHeap $h1@@32)) (and (or (not (= this@@80 null)) (not true)) (and ($Is refType this@@80 Tclass._module.AtomicCounter) ($IsAlloc refType this@@80 Tclass._module.AtomicCounter $h0@@32)))) (and ($IsHeapAnchor $h0@@32) ($HeapSucc $h0@@32 $h1@@32))) (=> (forall (($o@@62 T@U) ($f@@32 T@U) )  (=> (and (or (not (= $o@@62 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@32 $o@@62) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@32 $o@@62) $f@@32) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@32 $o@@62) $f@@32)))) (= (_module.AtomicCounter.localUserInv $h0@@32 this@@80) (_module.AtomicCounter.localUserInv $h1@@32 this@@80))))
 :pattern ( ($IsHeapAnchor $h0@@32) ($HeapSucc $h0@@32 $h1@@32) (_module.AtomicCounter.localUserInv $h1@@32 this@@80))
)))
(assert (forall (($h0@@33 T@U) ($h1@@33 T@U) (this@@81 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@33) ($IsGoodHeap $h1@@33)) (and (or (not (= this@@81 null)) (not true)) (and ($Is refType this@@81 Tclass._module.AtomicCounter) ($IsAlloc refType this@@81 Tclass._module.AtomicCounter $h0@@33)))) (and ($IsHeapAnchor $h0@@33) ($HeapSucc $h0@@33 $h1@@33))) (=> (forall (($o@@63 T@U) ($f@@33 T@U) )  (=> (and (or (not (= $o@@63 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@33 $o@@63) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@33 $o@@63) $f@@33) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@33 $o@@63) $f@@33)))) (= (_module.AtomicCounter.userInv $h0@@33 this@@81) (_module.AtomicCounter.userInv $h1@@33 this@@81))))
 :pattern ( ($IsHeapAnchor $h0@@33) ($HeapSucc $h0@@33 $h1@@33) (_module.AtomicCounter.userInv $h1@@33 this@@81))
)))
(assert (forall (($h0@@34 T@U) ($h1@@34 T@U) (this@@82 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@34) ($IsGoodHeap $h1@@34)) (and (or (not (= this@@82 null)) (not true)) (and ($Is refType this@@82 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@82 Tclass._module.DoubleReadMethod $h0@@34)))) (and ($IsHeapAnchor $h0@@34) ($HeapSucc $h0@@34 $h1@@34))) (=> (forall (($o@@64 T@U) ($f@@34 T@U) )  (=> (and (or (not (= $o@@64 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@34 $o@@64) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@34 $o@@64) $f@@34) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@34 $o@@64) $f@@34)))) (= (_module.DoubleReadMethod.baseUserInv $h0@@34 this@@82) (_module.DoubleReadMethod.baseUserInv $h1@@34 this@@82))))
 :pattern ( ($IsHeapAnchor $h0@@34) ($HeapSucc $h0@@34 $h1@@34) (_module.DoubleReadMethod.baseUserInv $h1@@34 this@@82))
)))
(assert (forall (($h0@@35 T@U) ($h1@@35 T@U) (this@@83 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@35) ($IsGoodHeap $h1@@35)) (and (or (not (= this@@83 null)) (not true)) (and ($Is refType this@@83 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@83 Tclass._module.DoubleReadMethod $h0@@35)))) (and ($IsHeapAnchor $h0@@35) ($HeapSucc $h0@@35 $h1@@35))) (=> (forall (($o@@65 T@U) ($f@@35 T@U) )  (=> (and (or (not (= $o@@65 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@35 $o@@65) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@35 $o@@65) $f@@35) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@35 $o@@65) $f@@35)))) (= (_module.DoubleReadMethod.localUserInv $h0@@35 this@@83) (_module.DoubleReadMethod.localUserInv $h1@@35 this@@83))))
 :pattern ( ($IsHeapAnchor $h0@@35) ($HeapSucc $h0@@35 $h1@@35) (_module.DoubleReadMethod.localUserInv $h1@@35 this@@83))
)))
(assert (forall (($h0@@36 T@U) ($h1@@36 T@U) (this@@84 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@36) ($IsGoodHeap $h1@@36)) (and (or (not (= this@@84 null)) (not true)) (and ($Is refType this@@84 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@84 Tclass._module.DoubleReadMethod $h0@@36)))) (and ($IsHeapAnchor $h0@@36) ($HeapSucc $h0@@36 $h1@@36))) (=> (forall (($o@@66 T@U) ($f@@36 T@U) )  (=> (and (or (not (= $o@@66 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@36 $o@@66) alloc)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@36 $o@@66) $f@@36) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@36 $o@@66) $f@@36)))) (= (_module.DoubleReadMethod.userInv $h0@@36 this@@84) (_module.DoubleReadMethod.userInv $h1@@36 this@@84))))
 :pattern ( ($IsHeapAnchor $h0@@36) ($HeapSucc $h0@@36 $h1@@36) (_module.DoubleReadMethod.userInv $h1@@36 this@@84))
)))
(assert (forall ((bx@@23 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@23 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@23)) bx@@23) ($Is SetType ($Unbox SetType bx@@23) (TSet t@@5))))
 :pattern ( ($IsBox bx@@23 (TSet t@@5)))
)))
(assert (forall (($o@@67 T@U) ) (!  (=> ($Is refType $o@@67 Tclass._module.NonOwnedObject?) ($Is refType $o@@67 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@67 Tclass._module.NonOwnedObject?))
)))
(assert (forall ((bx@@24 T@U) ) (!  (=> ($IsBox bx@@24 Tclass._module.NonOwnedObject?) ($IsBox bx@@24 Tclass._module.Object?))
 :pattern ( ($IsBox bx@@24 Tclass._module.NonOwnedObject?))
)))
(assert (forall (($o@@68 T@U) ) (!  (=> ($Is refType $o@@68 Tclass._module.OwnedObject?) ($Is refType $o@@68 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@68 Tclass._module.OwnedObject?))
)))
(assert (forall ((bx@@25 T@U) ) (!  (=> ($IsBox bx@@25 Tclass._module.OwnedObject?) ($IsBox bx@@25 Tclass._module.Object?))
 :pattern ( ($IsBox bx@@25 Tclass._module.OwnedObject?))
)))
(assert (forall (($o@@69 T@U) ) (!  (=> ($Is refType $o@@69 Tclass._module.Thread?) ($Is refType $o@@69 Tclass._module.NonOwnedObject?))
 :pattern ( ($Is refType $o@@69 Tclass._module.Thread?))
)))
(assert (forall ((bx@@26 T@U) ) (!  (=> ($IsBox bx@@26 Tclass._module.Thread?) ($IsBox bx@@26 Tclass._module.NonOwnedObject?))
 :pattern ( ($IsBox bx@@26 Tclass._module.Thread?))
)))
(assert (forall (($o@@70 T@U) ) (!  (=> ($Is refType $o@@70 Tclass._module.AtomicCounter?) ($Is refType $o@@70 Tclass._module.OwnedObject?))
 :pattern ( ($Is refType $o@@70 Tclass._module.AtomicCounter?))
)))
(assert (forall ((bx@@27 T@U) ) (!  (=> ($IsBox bx@@27 Tclass._module.AtomicCounter?) ($IsBox bx@@27 Tclass._module.OwnedObject?))
 :pattern ( ($IsBox bx@@27 Tclass._module.AtomicCounter?))
)))
(assert (forall (($o@@71 T@U) ) (!  (=> ($Is refType $o@@71 Tclass._module.DoubleReadMethod?) ($Is refType $o@@71 Tclass._module.OwnedObject?))
 :pattern ( ($Is refType $o@@71 Tclass._module.DoubleReadMethod?))
)))
(assert (forall ((bx@@28 T@U) ) (!  (=> ($IsBox bx@@28 Tclass._module.DoubleReadMethod?) ($IsBox bx@@28 Tclass._module.OwnedObject?))
 :pattern ( ($IsBox bx@@28 Tclass._module.DoubleReadMethod?))
)))
(assert (= (Tag Tclass._module.Universe) Tagclass._module.Universe))
(assert (= (TagFamily Tclass._module.Universe) tytagFamily$Universe))
(assert (= (Tag Tclass._module.NonOwnedObject) Tagclass._module.NonOwnedObject))
(assert (= (TagFamily Tclass._module.NonOwnedObject) tytagFamily$NonOwnedObject))
(assert (= (Tag Tclass._module.OwnedObject) Tagclass._module.OwnedObject))
(assert (= (TagFamily Tclass._module.OwnedObject) tytagFamily$OwnedObject))
(assert (= (Tag Tclass._module.Universe?) Tagclass._module.Universe?))
(assert (= (TagFamily Tclass._module.Universe?) tytagFamily$Universe))
(assert (= (Tag Tclass._module.Object) Tagclass._module.Object))
(assert (= (TagFamily Tclass._module.Object) tytagFamily$Object))
(assert (= (Tag Tclass._module.Thread) Tagclass._module.Thread))
(assert (= (TagFamily Tclass._module.Thread) tytagFamily$Thread))
(assert (= (Tag Tclass._module.Object?) Tagclass._module.Object?))
(assert (= (TagFamily Tclass._module.Object?) tytagFamily$Object))
(assert (= (Tag Tclass._module.NonOwnedObject?) Tagclass._module.NonOwnedObject?))
(assert (= (TagFamily Tclass._module.NonOwnedObject?) tytagFamily$NonOwnedObject))
(assert (= (Tag Tclass._module.OwnedObject?) Tagclass._module.OwnedObject?))
(assert (= (TagFamily Tclass._module.OwnedObject?) tytagFamily$OwnedObject))
(assert (= (Tag Tclass._module.Thread?) Tagclass._module.Thread?))
(assert (= (TagFamily Tclass._module.Thread?) tytagFamily$Thread))
(assert (= (Tag Tclass._module.AtomicCounter?) Tagclass._module.AtomicCounter?))
(assert (= (TagFamily Tclass._module.AtomicCounter?) tytagFamily$AtomicCounter))
(assert (= (Tag Tclass._module.AtomicCounter) Tagclass._module.AtomicCounter))
(assert (= (TagFamily Tclass._module.AtomicCounter) tytagFamily$AtomicCounter))
(assert (= (Tag Tclass._module.DoubleReadMethod?) Tagclass._module.DoubleReadMethod?))
(assert (= (TagFamily Tclass._module.DoubleReadMethod?) tytagFamily$DoubleReadMethod))
(assert (= (Tag Tclass._module.DoubleReadMethod) Tagclass._module.DoubleReadMethod))
(assert (= (TagFamily Tclass._module.DoubleReadMethod) tytagFamily$DoubleReadMethod))
(assert (forall (($h@@32 T@U) ($o@@72 T@U) ) (!  (=> (and ($IsGoodHeap $h@@32) (and (or (not (= $o@@72 null)) (not true)) ($Is refType $o@@72 Tclass._module.OwnedObject?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@32 $o@@72) _module.OwnedObject.owner)) Tclass._module.Object))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@32 $o@@72) _module.OwnedObject.owner)))
)))
(assert (forall (($o@@73 T@U) ) (! (= ($Is refType $o@@73 Tclass._module.Universe?)  (or (= $o@@73 null) (implements$_module.Universe (dtype $o@@73))))
 :pattern ( ($Is refType $o@@73 Tclass._module.Universe?))
)))
(assert (forall (($o@@74 T@U) ) (! (= ($Is refType $o@@74 Tclass._module.Object?)  (or (= $o@@74 null) (implements$_module.Object (dtype $o@@74))))
 :pattern ( ($Is refType $o@@74 Tclass._module.Object?))
)))
(assert (forall (($o@@75 T@U) ) (! (= ($Is refType $o@@75 Tclass._module.NonOwnedObject?)  (or (= $o@@75 null) (implements$_module.NonOwnedObject (dtype $o@@75))))
 :pattern ( ($Is refType $o@@75 Tclass._module.NonOwnedObject?))
)))
(assert (forall (($o@@76 T@U) ) (! (= ($Is refType $o@@76 Tclass._module.OwnedObject?)  (or (= $o@@76 null) (implements$_module.OwnedObject (dtype $o@@76))))
 :pattern ( ($Is refType $o@@76 Tclass._module.OwnedObject?))
)))
(assert (forall (($h@@33 T@U) ($o@@77 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@33) (and (or (not (= $o@@77 null)) (not true)) ($Is refType $o@@77 Tclass._module.Universe?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@33 $o@@77) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@33 $o@@77) _module.Universe.content)) (TSet Tclass._module.Object) $h@@33))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@33 $o@@77) _module.Universe.content)))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) ($o@@78 T@U) ($f@@37 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#97| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@78 $f@@37))  (=> (and (or (not (= $o@@78 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@78) |l#2|)))) (or (= $o@@78 |l#3|) (= $o@@78 |l#4|))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#97| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@78 $f@@37))
)))
(assert (forall ((a@@13 T@U) (b@@10 T@U) ) (! (= (|Set#Equal| a@@13 b@@10) (forall ((o@@5 T@U) ) (! (= (|Set#IsMember| a@@13 o@@5) (|Set#IsMember| b@@10 o@@5))
 :pattern ( (|Set#IsMember| a@@13 o@@5))
 :pattern ( (|Set#IsMember| b@@10 o@@5))
)))
 :pattern ( (|Set#Equal| a@@13 b@@10))
)))
(assert  (=> (<= 8 $FunctionContextHeight) (forall (($prevHeap@@33 T@U) ($Heap@@47 T@U) (this@@85 T@U) ) (!  (=> (or (|_module.Universe.globalInv2#canCall| $prevHeap@@33 $Heap@@47 this@@85) (and (< 8 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@33) ($IsGoodHeap $Heap@@47)) ($HeapSucc $prevHeap@@33 $Heap@@47)) (and (or (not (= this@@85 null)) (not true)) (and ($Is refType this@@85 Tclass._module.Universe) ($IsAlloc refType this@@85 Tclass._module.Universe $prevHeap@@33)))))) (and (forall ((|o#0@@2| T@U) ) (!  (=> ($Is refType |o#0@@2| Tclass._module.Object) (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@33 this@@85) _module.Universe.content)) ($Box refType |o#0@@2|)) (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@47 this@@85) _module.Universe.content)) ($Box refType |o#0@@2|)) (|_module.Object.inv2#canCall| $prevHeap@@33 $Heap@@47 |o#0@@2|))))
 :pattern ( (_module.Object.inv2 $prevHeap@@33 $Heap@@47 |o#0@@2|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@47 this@@85) _module.Universe.content)) ($Box refType |o#0@@2|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@33 this@@85) _module.Universe.content)) ($Box refType |o#0@@2|)))
)) (= (_module.Universe.globalInv2 $prevHeap@@33 $Heap@@47 this@@85) (forall ((|o#0@@3| T@U) ) (!  (=> (and ($Is refType |o#0@@3| Tclass._module.Object) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@33 this@@85) _module.Universe.content)) ($Box refType |o#0@@3|))) (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@47 this@@85) _module.Universe.content)) ($Box refType |o#0@@3|)) (_module.Object.inv2 $prevHeap@@33 $Heap@@47 |o#0@@3|)))
 :pattern ( (_module.Object.inv2 $prevHeap@@33 $Heap@@47 |o#0@@3|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@47 this@@85) _module.Universe.content)) ($Box refType |o#0@@3|)))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@33 this@@85) _module.Universe.content)) ($Box refType |o#0@@3|)))
)))))
 :pattern ( (_module.Universe.globalInv2 $prevHeap@@33 $Heap@@47 this@@85) ($IsGoodHeap $Heap@@47))
))))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@10)) (Lit BoxType ($Box T@@5 x@@10)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@10)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@34 T@U) ($Heap@@48 T@U) (this@@86 T@U) ) (!  (=> (or (|_module.Thread.inv2#canCall| $prevHeap@@34 $Heap@@48 this@@86) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@34) ($IsGoodHeap $Heap@@48)) ($HeapSucc $prevHeap@@34 $Heap@@48)) (and (or (not (= this@@86 null)) (not true)) (and ($Is refType this@@86 Tclass._module.Thread) ($IsAlloc refType this@@86 Tclass._module.Thread $prevHeap@@34)))))) (=> (_module.Thread.inv2 $prevHeap@@34 $Heap@@48 this@@86) (_module.Thread.localInv2 $prevHeap@@34 $Heap@@48 this@@86)))
 :pattern ( (_module.Thread.inv2 $prevHeap@@34 $Heap@@48 this@@86))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@35 T@U) ($Heap@@49 T@U) (this@@87 T@U) ) (!  (=> (or (|_module.AtomicCounter.userInv2#canCall| $prevHeap@@35 $Heap@@49 this@@87) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@35) ($IsGoodHeap $Heap@@49)) ($HeapSucc $prevHeap@@35 $Heap@@49)) (and (or (not (= this@@87 null)) (not true)) (and ($Is refType this@@87 Tclass._module.AtomicCounter) ($IsAlloc refType this@@87 Tclass._module.AtomicCounter $prevHeap@@35)))))) (=> (_module.AtomicCounter.userInv2 $prevHeap@@35 $Heap@@49 this@@87) (_module.AtomicCounter.localUserInv2 $prevHeap@@35 $Heap@@49 this@@87)))
 :pattern ( (_module.AtomicCounter.userInv2 $prevHeap@@35 $Heap@@49 this@@87))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@36 T@U) ($Heap@@50 T@U) (this@@88 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userInv2#canCall| $prevHeap@@36 $Heap@@50 this@@88) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@36) ($IsGoodHeap $Heap@@50)) ($HeapSucc $prevHeap@@36 $Heap@@50)) (and (or (not (= this@@88 null)) (not true)) (and ($Is refType this@@88 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@88 Tclass._module.DoubleReadMethod $prevHeap@@36)))))) (=> (_module.DoubleReadMethod.userInv2 $prevHeap@@36 $Heap@@50 this@@88) (_module.DoubleReadMethod.localUserInv2 $prevHeap@@36 $Heap@@50 this@@88)))
 :pattern ( (_module.DoubleReadMethod.userInv2 $prevHeap@@36 $Heap@@50 this@@88))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($prevHeap@@37 T@U) ($Heap@@51 T@U) (this@@89 T@U) ) (!  (=> (or (|_module.OwnedObject.userInv2#canCall| $prevHeap@@37 $Heap@@51 this@@89) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@37) ($IsGoodHeap $Heap@@51)) ($HeapSucc $prevHeap@@37 $Heap@@51)) (and (or (not (= this@@89 null)) (not true)) (and ($Is refType this@@89 Tclass._module.OwnedObject) ($IsAlloc refType this@@89 Tclass._module.OwnedObject $prevHeap@@37)))))) (=> (_module.OwnedObject.userInv2 $prevHeap@@37 $Heap@@51 this@@89) (_module.OwnedObject.localUserInv2 $prevHeap@@37 $Heap@@51 this@@89)))
 :pattern ( (_module.OwnedObject.userInv2 $prevHeap@@37 $Heap@@51 this@@89))
))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($prevHeap@@38 T@U) ($Heap@@52 T@U) (this@@90 T@U) ) (!  (=> (or (|_module.OwnedObject.inv2#canCall| $prevHeap@@38 $Heap@@52 this@@90) (and (< 6 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@38) ($IsGoodHeap $Heap@@52)) ($HeapSucc $prevHeap@@38 $Heap@@52)) (and (or (not (= this@@90 null)) (not true)) (and ($Is refType this@@90 Tclass._module.OwnedObject) ($IsAlloc refType this@@90 Tclass._module.OwnedObject $prevHeap@@38)))))) (=> (_module.OwnedObject.inv2 $prevHeap@@38 $Heap@@52 this@@90) (_module.OwnedObject.localInv2 $prevHeap@@38 $Heap@@52 this@@90)))
 :pattern ( (_module.OwnedObject.inv2 $prevHeap@@38 $Heap@@52 this@@90))
))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($prevHeap@@39 T@U) ($Heap@@53 T@U) (this@@91 T@U) ) (!  (=> (or (|_module.Object.inv2#canCall| $prevHeap@@39 $Heap@@53 this@@91) (and (< 7 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@39) ($IsGoodHeap $Heap@@53)) ($HeapSucc $prevHeap@@39 $Heap@@53)) (and (or (not (= this@@91 null)) (not true)) (and ($Is refType this@@91 Tclass._module.Object) ($IsAlloc refType this@@91 Tclass._module.Object $prevHeap@@39)))))) (=> (_module.Object.inv2 $prevHeap@@39 $Heap@@53 this@@91) (_module.Object.localInv2 $prevHeap@@39 $Heap@@53 this@@91)))
 :pattern ( (_module.Object.inv2 $prevHeap@@39 $Heap@@53 this@@91))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@54 T@U) (this@@92 T@U) ) (!  (=> (or (|_module.AtomicCounter.userInv#canCall| $Heap@@54 this@@92) (and (< 1 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@54) (and (or (not (= this@@92 null)) (not true)) (and ($Is refType this@@92 Tclass._module.AtomicCounter) ($IsAlloc refType this@@92 Tclass._module.AtomicCounter $Heap@@54)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.AtomicCounter.localUserInv#canCall| $Heap@@54 this@@92)) (= (_module.AtomicCounter.userInv $Heap@@54 this@@92)  (and true (_module.AtomicCounter.localUserInv $Heap@@54 this@@92)))))
 :pattern ( (_module.AtomicCounter.userInv $Heap@@54 this@@92) ($IsGoodHeap $Heap@@54))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@55 T@U) (this@@93 T@U) ) (!  (=> (or (|_module.DoubleReadMethod.userInv#canCall| $Heap@@55 this@@93) (and (< 1 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@55) (and (or (not (= this@@93 null)) (not true)) (and ($Is refType this@@93 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@@93 Tclass._module.DoubleReadMethod $Heap@@55)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.DoubleReadMethod.localUserInv#canCall| $Heap@@55 this@@93)) (= (_module.DoubleReadMethod.userInv $Heap@@55 this@@93)  (and true (_module.DoubleReadMethod.localUserInv $Heap@@55 this@@93)))))
 :pattern ( (_module.DoubleReadMethod.userInv $Heap@@55 this@@93) ($IsGoodHeap $Heap@@55))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@56 T@U) (this@@94 T@U) ) (!  (=> (or (|_module.Thread.localInv#canCall| $Heap@@56 this@@94) (and (< 4 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@56) (and (or (not (= this@@94 null)) (not true)) (and ($Is refType this@@94 Tclass._module.Thread) ($IsAlloc refType this@@94 Tclass._module.Thread $Heap@@56)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.Object.baseInv#canCall| $Heap@@56 this@@94)) (= (_module.Thread.localInv $Heap@@56 this@@94)  (and true (_module.Object.baseInv $Heap@@56 this@@94)))))
 :pattern ( (_module.Thread.localInv $Heap@@56 this@@94) ($IsGoodHeap $Heap@@56))
))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@57 T@U) (this@@95 T@U) ) (!  (=> (or (|_module.Thread.inv#canCall| $Heap@@57 this@@95) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@57) (and (or (not (= this@@95 null)) (not true)) (and ($Is refType this@@95 Tclass._module.Thread) ($IsAlloc refType this@@95 Tclass._module.Thread $Heap@@57)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.Thread.localInv#canCall| $Heap@@57 this@@95)) (= (_module.Thread.inv $Heap@@57 this@@95)  (and true (_module.Thread.localInv $Heap@@57 this@@95)))))
 :pattern ( (_module.Thread.inv $Heap@@57 this@@95) ($IsGoodHeap $Heap@@57))
))))
(assert (forall (($h@@34 T@U) ($o@@79 T@U) ) (!  (=> (and ($IsGoodHeap $h@@34) (and (or (not (= $o@@79 null)) (not true)) ($Is refType $o@@79 Tclass._module.Universe?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@34 $o@@79) _module.Universe.content)) (TSet Tclass._module.Object)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@34 $o@@79) _module.Universe.content)))
)))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($prevHeap@@40 T@U) ($Heap@@58 T@U) (this@@96 T@U) ) (!  (=> (or (|_module.OwnedObject.inv2#canCall| $prevHeap@@40 $Heap@@58 this@@96) (and (< 6 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@40) ($IsGoodHeap $Heap@@58)) ($HeapSucc $prevHeap@@40 $Heap@@58)) (and (or (not (= this@@96 null)) (not true)) (and ($Is refType this@@96 Tclass._module.OwnedObject) ($IsAlloc refType this@@96 Tclass._module.OwnedObject $prevHeap@@40)))))) (and (let ((|currOwner#0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner))))
 (and (|_module.OwnedObject.localInv2#canCall| $prevHeap@@40 $Heap@@58 this@@96) (=> (_module.OwnedObject.localInv2 $prevHeap@@40 $Heap@@58 this@@96) (and (|_module.OwnedObject.userInv2#canCall| $prevHeap@@40 $Heap@@58 this@@96) (=> (_module.OwnedObject.userInv2 $prevHeap@@40 $Heap@@58 this@@96) (and (=> (or (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed)))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed))))) (and (|_module.OwnedObject.userFieldsUnchanged#canCall| $prevHeap@@40 $Heap@@58 this@@96) (=> (not (_module.OwnedObject.userFieldsUnchanged $prevHeap@@40 $Heap@@58 this@@96)) (=> (U_2_bool (Lit boolType (bool_2_U true))) (=> ($IsAllocBox ($Box refType |currOwner#0|) Tclass._module.Object $prevHeap@@40) (|_module.Object.localInv2#canCall| $prevHeap@@40 $Heap@@58 |currOwner#0|)))))) (=> (=> (or (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed)))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed))))) (or (_module.OwnedObject.userFieldsUnchanged $prevHeap@@40 $Heap@@58 this@@96) (and true (=> ($IsAllocBox ($Box refType |currOwner#0|) Tclass._module.Object $prevHeap@@40) (_module.Object.localInv2 $prevHeap@@40 $Heap@@58 |currOwner#0|))))) (and (=> (= (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed)))  (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed))))) (=> (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner))) (|_module.Object.localInv2#canCall| $prevHeap@@40 $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner))))) (=> (=> (= (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed)))  (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed))))) (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner))) (_module.Object.localInv2 $prevHeap@@40 $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner))))) (and (=> (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed)))) (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed))) (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.OwnedObject.userFieldsOwnedBy#canCall| $Heap@@58 this@@96 this@@96)))) (=> (=> (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed)))) (and true (_module.OwnedObject.userFieldsOwnedBy $Heap@@58 this@@96 this@@96))) (and (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed))) (=> (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed)))) (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.OwnedObject.userFieldsOwnedBy#canCall| $prevHeap@@40 this@@96 this@@96)))) (=> (=> (and (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed))))) (and true (_module.OwnedObject.userFieldsOwnedBy $prevHeap@@40 this@@96 this@@96))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner)))) (not true)) (and (|_module.Object.localInv2#canCall| $prevHeap@@40 $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner))) (=> (_module.Object.localInv2 $prevHeap@@40 $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner))) (and (|_module.Object.localInv#canCall| $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner))) (=> (_module.Object.localInv $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner))) (and (=> ($IsAllocBox ($Box refType |currOwner#0|) Tclass._module.Object $prevHeap@@40) (|_module.Object.localInv2#canCall| $prevHeap@@40 $Heap@@58 |currOwner#0|)) (=> (=> ($IsAllocBox ($Box refType |currOwner#0|) Tclass._module.Object $prevHeap@@40) (_module.Object.localInv2 $prevHeap@@40 $Heap@@58 |currOwner#0|)) (|_module.Object.localInv#canCall| $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner))))))))))))))))))))))) (= (_module.OwnedObject.inv2 $prevHeap@@40 $Heap@@58 this@@96) (let ((|currOwner#0@@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner))))
 (and (and (and (and (and (and (_module.OwnedObject.localInv2 $prevHeap@@40 $Heap@@58 this@@96) (_module.OwnedObject.userInv2 $prevHeap@@40 $Heap@@58 this@@96)) (=> (or (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed)))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed))))) (or (_module.OwnedObject.userFieldsUnchanged $prevHeap@@40 $Heap@@58 this@@96) (and true (=> ($IsAllocBox ($Box refType |currOwner#0@@0|) Tclass._module.Object $prevHeap@@40) (_module.Object.localInv2 $prevHeap@@40 $Heap@@58 |currOwner#0@@0|)))))) (=> (= (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed)))  (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed))))) (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner))) (_module.Object.localInv2 $prevHeap@@40 $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner)))))) (=> (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed)))) (and true (_module.OwnedObject.userFieldsOwnedBy $Heap@@58 this@@96 this@@96)))) (=> (and (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.closed))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.closed))))) (and true (_module.OwnedObject.userFieldsOwnedBy $prevHeap@@40 this@@96 this@@96)))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner)))) (not true)) (and (and (and (_module.Object.localInv2 $prevHeap@@40 $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner))) (_module.Object.localInv $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@40 this@@96) _module.OwnedObject.owner)))) (=> ($IsAllocBox ($Box refType |currOwner#0@@0|) Tclass._module.Object $prevHeap@@40) (_module.Object.localInv2 $prevHeap@@40 $Heap@@58 |currOwner#0@@0|))) (_module.Object.localInv $Heap@@58 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@58 this@@96) _module.OwnedObject.owner))))))))))
 :pattern ( (_module.OwnedObject.inv2 $prevHeap@@40 $Heap@@58 this@@96) ($IsGoodHeap $Heap@@58))
))))
(assert (forall ((h@@4 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@4))
)))
(assert (forall ((h@@5 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@5)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@41 T@U) ($Heap@@59 T@U) (this@@97 T@U) ) (!  (=> (or (|_module.Thread.inv2#canCall| $prevHeap@@41 $Heap@@59 this@@97) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $prevHeap@@41) ($IsGoodHeap $Heap@@59)) ($HeapSucc $prevHeap@@41 $Heap@@59)) (and (or (not (= this@@97 null)) (not true)) (and ($Is refType this@@97 Tclass._module.Thread) ($IsAlloc refType this@@97 Tclass._module.Thread $prevHeap@@41)))))) (and (|_module.Thread.localInv2#canCall| $prevHeap@@41 $Heap@@59 this@@97) (= (_module.Thread.inv2 $prevHeap@@41 $Heap@@59 this@@97) (_module.Thread.localInv2 $prevHeap@@41 $Heap@@59 this@@97))))
 :pattern ( (_module.Thread.inv2 $prevHeap@@41 $Heap@@59 this@@97) ($IsGoodHeap $Heap@@59))
))))
(assert (forall ((v@@6 T@U) ) (! ($Is intType v@@6 TInt)
 :pattern ( ($Is intType v@@6 TInt))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@60 () T@U)
(declare-fun |universe#0| () T@U)
(declare-fun |counter#0| () T@U)
(declare-fun |running#0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun this@0 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#97| null $Heap@@60 alloc |universe#0| |counter#0|)) (and (=> (= (ControlFlow 0 2) (- 0 13)) (or (not (= |universe#0| null)) (not true))) (=> (or (not (= |universe#0| null)) (not true)) (=> ($IsAllocBox ($Box refType |universe#0|) Tclass._module.Universe? $Heap@@60) (=> (and (|_module.Universe.globalInv#canCall| $Heap@@60 |universe#0|) (_module.Universe.globalInv $Heap@@60 |universe#0|)) (and (=> (= (ControlFlow 0 2) (- 0 12)) (or (not (= |running#0| null)) (not true))) (=> (or (not (= |running#0| null)) (not true)) (=> (= (_module.Object.universe |running#0|) |universe#0|) (and (=> (= (ControlFlow 0 2) (- 0 11)) (or (not (= |running#0| null)) (not true))) (=> (or (not (= |running#0| null)) (not true)) (=> ($IsAllocBox ($Box refType |running#0|) Tclass._module.Thread? $Heap@@60) (=> (and (|_module.Thread.inv#canCall| $Heap@@60 |running#0|) (_module.Thread.inv $Heap@@60 |running#0|)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (or (not (= |counter#0| null)) (not true))) (=> (or (not (= |counter#0| null)) (not true)) (=> (= (_module.Object.universe |counter#0|) |universe#0|) (and (=> (= (ControlFlow 0 2) (- 0 9)) (or (not (= |counter#0| null)) (not true))) (=> (or (not (= |counter#0| null)) (not true)) (=> ($IsAllocBox ($Box refType |counter#0|) Tclass._module.OwnedObject? $Heap@@60) (=> (and (|_module.OwnedObject.inv#canCall| $Heap@@60 |counter#0|) (_module.OwnedObject.inv $Heap@@60 |counter#0|)) (and (=> (= (ControlFlow 0 2) (- 0 8)) (or (not (= |counter#0| null)) (not true))) (=> (or (not (= |counter#0| null)) (not true)) (=> (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@60 |counter#0|) _module.OwnedObject.owner)) |running#0|) (and (=> (= (ControlFlow 0 2) (- 0 7)) (or (not (= |counter#0| null)) (not true))) (=> (or (not (= |counter#0| null)) (not true)) (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@60 |counter#0|) _module.OwnedObject.closed))) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (forall (($o@@80 T@U) ) (!  (=> (and (or (not (= $o@@80 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@60 $o@@80) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@80) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@60 $o@@80)) (or (= $o@@80 |universe#0|) (= $o@@80 |counter#0|))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@80))
)) ($HeapSucc $Heap@@60 $Heap@0))) (=> (and (and (and (or (not (= this@0 null)) (not true)) (and ($Is refType this@0 Tclass._module.DoubleReadMethod) ($IsAlloc refType this@0 Tclass._module.DoubleReadMethod $Heap@0))) ($IsAllocBox ($Box refType this@0) Tclass._module.Object? $Heap@0)) (and (|_module.Object.objectGlobalInv#canCall| $Heap@0 this@0) (_module.Object.objectGlobalInv $Heap@0 this@0))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (or (not (= |universe#0| null)) (not true))) (=> (or (not (= |universe#0| null)) (not true)) (=> ($IsAllocBox ($Box refType |universe#0|) Tclass._module.Universe? $Heap@0) (and (=> (= (ControlFlow 0 2) (- 0 5)) ($IsAlloc refType |universe#0| Tclass._module.Universe $Heap@@60)) (=> ($IsAlloc refType |universe#0| Tclass._module.Universe $Heap@@60) (=> (|_module.Universe.globalInv2#canCall| $Heap@@60 $Heap@0 |universe#0|) (=> (and (_module.Universe.globalInv2 $Heap@@60 $Heap@0 |universe#0|) (= (_module.Object.universe this@0) |universe#0|)) (=> (and (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@0) _module.DoubleReadMethod.counter)) |counter#0|) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@0) _module.DoubleReadMethod.programCounter))) (LitInt 0))) (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@0) _module.OwnedObject.owner)) |running#0|) (= (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@0) _module.OwnedObject.closed))) (U_2_bool (Lit boolType (bool_2_U true)))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= |universe#0| null)) (not true))) (=> (or (not (= |universe#0| null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= |universe#0| null)) (not true))) (=> (or (not (= |universe#0| null)) (not true)) (=> (= (ControlFlow 0 2) (- 0 1)) ($IsAlloc refType |universe#0| Tclass._module.Universe $Heap@@60)))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@60) ($IsHeapAnchor $Heap@@60)) (=> (and (and (and ($Is refType |universe#0| Tclass._module.Universe) ($IsAlloc refType |universe#0| Tclass._module.Universe $Heap@@60)) (and ($Is refType |running#0| Tclass._module.Thread) ($IsAlloc refType |running#0| Tclass._module.Thread $Heap@@60))) (and (and ($Is refType |counter#0| Tclass._module.AtomicCounter) ($IsAlloc refType |counter#0| Tclass._module.AtomicCounter $Heap@@60)) (and (= 14 $FunctionContextHeight) (= (ControlFlow 0 14) 2)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
