(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U) T@U)
(declare-fun $generated@@20 (Int) T@U)
(declare-fun $generated@@21 (T@U) Int)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U T@U Int) Bool)
(declare-fun $generated@@30 (T@U Int) Bool)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@U Int) Bool)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@54 (Int) Bool)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@82 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@83 (T@T T@T) T@T)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@87 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 Int) ($generated@@24 Int) ) (!  (=> (and (and (<= 0 $generated@@23) (<= 0 $generated@@24)) (<= (+ $generated@@23 $generated@@24) ($generated@@21 $generated@@22))) (= ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)) ($generated@@19 $generated@@22 ($generated@@20 (+ $generated@@23 $generated@@24)))))
 :pattern ( ($generated@@19 ($generated@@19 $generated@@22 ($generated@@20 $generated@@23)) ($generated@@20 $generated@@24)))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@27 T@U) ($generated@@28 Int) ($generated@@29 T@U) ) (!  (=> (= $generated@@29 ($generated@@20 0)) ($generated@@26 $generated@@27 $generated@@29 $generated@@28))
 :pattern ( ($generated@@26 $generated@@27 $generated@@29 $generated@@28))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@32 T@U) ($generated@@33 Int) ) (!  (=> (forall (($generated@@34 T@U) ) (! ($generated@@26 ($generated@@31 $generated@@32) $generated@@34 $generated@@33)
 :pattern ( ($generated@@26 ($generated@@31 $generated@@32) $generated@@34 $generated@@33))
)) ($generated@@30 ($generated@@31 $generated@@32) $generated@@33))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@32) $generated@@33))
))))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@35 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 $generated@@38) $generated@@38)
 :pattern ( ($generated@@37 $generated@@39 $generated@@38))
)))
(assert (= ($generated@@0 $generated@@40) 3))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 Int) ) (!  (=> (or ($generated@@41 ($generated@@37 $generated@@40 $generated@@43) $generated@@44) (< 1 $generated@@25)) (and (and (=> (< 0 ($generated@@21 $generated@@43)) (=> ($generated@@5 ($generated@@37 $generated@@1 ($generated@@4 true))) ($generated@@41 ($generated@@19 $generated@@43 ($generated@@20 1)) $generated@@44))) (=> (=> (< 0 ($generated@@21 $generated@@43)) (and true ($generated@@26 ($generated@@31 $generated@@42) ($generated@@19 $generated@@43 ($generated@@20 1)) $generated@@44))) (=> (= ($generated@@35 0) ($generated@@21 $generated@@43)) (forall (($generated@@45 T@U) ) (!  (=> ($generated $generated@@45 $generated@@43) ($generated@@41 $generated@@45 $generated@@44))
 :pattern ( ($generated@@26 ($generated@@31 $generated@@42) $generated@@45 $generated@@44))
))))) (= ($generated@@26 ($generated@@31 $generated@@42) ($generated@@37 $generated@@40 $generated@@43) $generated@@44)  (and (=> (< 0 ($generated@@21 $generated@@43)) (and true ($generated@@26 ($generated@@31 $generated@@42) ($generated@@19 $generated@@43 ($generated@@20 1)) $generated@@44))) (=> (= ($generated@@35 0) ($generated@@21 $generated@@43)) (forall (($generated@@46 T@U) ) (!  (=> ($generated $generated@@46 $generated@@43) ($generated@@26 ($generated@@31 $generated@@42) $generated@@46 $generated@@44))
 :pattern ( ($generated@@26 ($generated@@31 $generated@@42) $generated@@46 $generated@@44))
)))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@31 $generated@@42) ($generated@@37 $generated@@40 $generated@@43) $generated@@44))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@47 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@47 $generated@@50 $generated@@49))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@51 T@U) ($generated@@52 Int) ) (!  (=> ($generated@@30 ($generated@@31 $generated@@51) $generated@@52) (forall (($generated@@53 T@U) ) (! ($generated@@26 ($generated@@31 $generated@@51) $generated@@53 $generated@@52)
 :pattern ( ($generated@@26 ($generated@@31 $generated@@51) $generated@@53 $generated@@52))
)))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@51) $generated@@52))
))))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@55 T@U) ($generated@@56 Int) ) (!  (=> (or ($generated@@54 $generated@@56) (< 0 $generated@@25)) (and (=> ($generated@@5 ($generated@@37 $generated@@1 ($generated@@4 true))) ($generated@@54 $generated@@56)) (= ($generated@@30 ($generated@@31 $generated@@55) $generated@@56)  (and true ($generated@@30 $generated@@55 $generated@@56)))))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@55) $generated@@56))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 Int) ) (! (= ($generated@@26 ($generated@@31 $generated@@57) $generated@@58 $generated@@59) ($generated@@26 $generated@@57 $generated@@58 $generated@@59))
 :pattern ( ($generated@@26 ($generated@@31 $generated@@57) $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (and ($generated@@60 $generated@@62) (<= ($generated@@21 $generated@@62) ($generated@@21 $generated@@61))) (and (= ($generated@@60 ($generated@@19 $generated@@61 $generated@@62)) ($generated@@60 $generated@@61)) (= ($generated@@21 ($generated@@19 $generated@@61 $generated@@62)) (- ($generated@@21 $generated@@61) ($generated@@21 $generated@@62)))))
 :pattern ( ($generated@@19 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 Int) ) (!  (=> (<= 0 $generated@@63) (and ($generated@@60 ($generated@@20 $generated@@63)) (= ($generated@@21 ($generated@@20 $generated@@63)) $generated@@63)))
 :pattern ( ($generated@@20 $generated@@63))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 Int) ) (!  (=> (or ($generated@@41 ($generated@@37 $generated@@40 $generated@@65) ($generated@@35 $generated@@66)) (< 1 $generated@@25)) (and (and (=> (< 0 ($generated@@21 $generated@@65)) (=> ($generated@@5 ($generated@@37 $generated@@1 ($generated@@4 true))) ($generated@@41 ($generated@@19 $generated@@65 ($generated@@20 1)) ($generated@@35 $generated@@66)))) (=> (=> (< 0 ($generated@@21 $generated@@65)) (and true ($generated@@26 ($generated@@31 $generated@@64) ($generated@@19 $generated@@65 ($generated@@20 1)) ($generated@@35 $generated@@66)))) (=> (= ($generated@@35 0) ($generated@@21 $generated@@65)) (forall (($generated@@67 T@U) ) (!  (=> ($generated $generated@@67 $generated@@65) ($generated@@41 $generated@@67 $generated@@66))
 :pattern ( ($generated@@26 ($generated@@31 $generated@@64) $generated@@67 $generated@@66))
))))) (= ($generated@@26 ($generated@@31 $generated@@64) ($generated@@37 $generated@@40 $generated@@65) ($generated@@35 $generated@@66))  (and (=> (< 0 ($generated@@21 $generated@@65)) (and true ($generated@@26 ($generated@@31 $generated@@64) ($generated@@19 $generated@@65 ($generated@@20 1)) ($generated@@35 $generated@@66)))) (=> (= ($generated@@35 0) ($generated@@21 $generated@@65)) (forall (($generated@@68 T@U) ) (!  (=> ($generated $generated@@68 $generated@@65) ($generated@@26 ($generated@@31 $generated@@64) $generated@@68 $generated@@66))
 :pattern ( ($generated@@26 ($generated@@31 $generated@@64) $generated@@68 $generated@@66))
)))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@31 $generated@@64) ($generated@@37 $generated@@40 $generated@@65) ($generated@@35 $generated@@66)))
))))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (!  (or (or ($generated $generated@@69 $generated@@70) (= $generated@@69 $generated@@70)) ($generated $generated@@70 $generated@@69))
 :pattern ( ($generated $generated@@69 $generated@@70) ($generated $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 Int) ) (! (= ($generated@@30 ($generated@@31 $generated@@71) $generated@@72) ($generated@@30 $generated@@71 $generated@@72))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@71) $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ) (! (<= 0 ($generated@@21 $generated@@73))
 :pattern ( ($generated@@21 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@47 $generated@@75 ($generated@@48 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@48 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (and (and (and (=> ($generated $generated@@76 $generated@@77) (or (not (= $generated@@76 $generated@@77)) (not true))) (=> (and ($generated@@60 $generated@@76) (not ($generated@@60 $generated@@77))) ($generated $generated@@76 $generated@@77))) (=> (and ($generated@@60 $generated@@76) ($generated@@60 $generated@@77)) (= ($generated $generated@@76 $generated@@77) (< ($generated@@21 $generated@@76) ($generated@@21 $generated@@77))))) (=> (and ($generated $generated@@76 $generated@@77) ($generated@@60 $generated@@77)) ($generated@@60 $generated@@76)))
 :pattern ( ($generated $generated@@76 $generated@@77))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@78 $generated@@88 $generated@@89 $generated@@90 ($generated@@84 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@93 $generated@@94) $generated@@91)
 :weight 0
)) (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@78 $generated@@95 $generated@@96 $generated@@97 ($generated@@84 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@78 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@78 $generated@@104 $generated@@105 $generated@@106 ($generated@@84 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@78 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)))) (= ($generated@@0 $generated@@79) 4)) (= ($generated@@0 $generated@@80) 5)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@82 $generated@@113 $generated@@114 ($generated@@85 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@115) $generated@@117) $generated@@115)
 :weight 0
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@122 $generated@@123) (= ($generated@@82 $generated@@118 $generated@@119 ($generated@@85 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@82 $generated@@118 $generated@@119 $generated@@121 $generated@@123)))
 :weight 0
))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (= ($generated@@0 ($generated@@83 $generated@@124 $generated@@125)) 6))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@86 ($generated@@83 $generated@@126 $generated@@127)) $generated@@126)
 :pattern ( ($generated@@83 $generated@@126 $generated@@127))
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@87 ($generated@@83 $generated@@128 $generated@@129)) $generated@@129)
 :pattern ( ($generated@@83 $generated@@128 $generated@@129))
))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 Bool) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@5 ($generated@@78 $generated@@79 $generated@@80 $generated@@1 ($generated@@81 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))  (=> (and (or (not (= $generated@@134 $generated@@130)) (not true)) ($generated@@5 ($generated@@47 $generated@@1 ($generated@@82 $generated@@80 $generated@@40 ($generated@@82 $generated@@79 ($generated@@83 $generated@@80 $generated@@40) $generated@@131 $generated@@134) $generated@@132)))) $generated@@133))
 :pattern ( ($generated@@78 $generated@@79 $generated@@80 $generated@@1 ($generated@@81 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ) (!  (=> ($generated@@60 $generated@@136) (= $generated@@136 ($generated@@20 ($generated@@21 $generated@@136))))
 :pattern ( ($generated@@21 $generated@@136))
 :pattern ( ($generated@@60 $generated@@136))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> (and ($generated@@60 $generated@@138) (<= ($generated@@21 $generated@@138) ($generated@@21 $generated@@137))) (or (and (= $generated@@138 ($generated@@20 0)) (= ($generated@@19 $generated@@137 $generated@@138) $generated@@137)) (and (or (not (= $generated@@138 ($generated@@20 0))) (not true)) ($generated ($generated@@19 $generated@@137 $generated@@138) $generated@@137))))
 :pattern ( ($generated@@19 $generated@@137 $generated@@138))
)))
(assert (forall (($generated@@139 Int) ) (! (= ($generated@@48 $generated@@2 ($generated@@6 ($generated@@35 $generated@@139))) ($generated@@37 $generated@@40 ($generated@@48 $generated@@2 ($generated@@6 $generated@@139))))
 :pattern ( ($generated@@48 $generated@@2 ($generated@@6 ($generated@@35 $generated@@139))))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@T) ) (! (= ($generated@@48 $generated@@141 ($generated@@37 $generated@@141 $generated@@140)) ($generated@@37 $generated@@40 ($generated@@48 $generated@@141 $generated@@140)))
 :pattern ( ($generated@@48 $generated@@141 ($generated@@37 $generated@@141 $generated@@140)))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 Int) ) (!  (=> (or ($generated@@41 $generated@@143 $generated@@144) (< 1 $generated@@25)) (and (and (=> (< 0 ($generated@@21 $generated@@143)) (=> ($generated@@5 ($generated@@37 $generated@@1 ($generated@@4 true))) ($generated@@41 ($generated@@19 $generated@@143 ($generated@@20 1)) $generated@@144))) (=> (=> (< 0 ($generated@@21 $generated@@143)) (and true ($generated@@26 $generated@@142 ($generated@@19 $generated@@143 ($generated@@20 1)) $generated@@144))) (=> (= ($generated@@35 0) ($generated@@21 $generated@@143)) (forall (($generated@@145 T@U) ) (!  (=> ($generated $generated@@145 $generated@@143) ($generated@@41 $generated@@145 $generated@@144))
 :pattern ( ($generated@@26 $generated@@142 $generated@@145 $generated@@144))
))))) (= ($generated@@26 ($generated@@31 $generated@@142) $generated@@143 $generated@@144)  (and (=> (< 0 ($generated@@21 $generated@@143)) (and true ($generated@@26 $generated@@142 ($generated@@19 $generated@@143 ($generated@@20 1)) $generated@@144))) (=> (= ($generated@@35 0) ($generated@@21 $generated@@143)) (forall (($generated@@146 T@U) ) (!  (=> ($generated $generated@@146 $generated@@143) ($generated@@26 $generated@@142 $generated@@146 $generated@@144))
 :pattern ( ($generated@@26 $generated@@142 $generated@@146 $generated@@144))
)))))))
 :pattern ( ($generated@@26 ($generated@@31 $generated@@142) $generated@@143 $generated@@144))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 (T@U) Bool)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@157  (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> ($generated@@54 $generated@@147) (or ($generated@@30 ($generated@@31 $generated@@148) $generated@@147) ($generated@@5 ($generated@@37 $generated@@1 ($generated@@4 true)))))) (=> (=> ($generated@@54 $generated@@147) (or ($generated@@30 ($generated@@31 $generated@@148) $generated@@147) ($generated@@5 ($generated@@37 $generated@@1 ($generated@@4 true))))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> ($generated@@54 $generated@@147) (or ($generated@@30 ($generated@@31 $generated@@148) $generated@@147) ($generated@@30 ($generated@@31 ($generated@@31 $generated@@148)) $generated@@147))))))))
(let (($generated@@158  (=> (and (and (and ($generated@@149 $generated@@150) ($generated@@151 $generated@@150)) (= $generated@@152 $generated@@150)) (and (forall (($generated@@159 T@U) ) (!  (=> ($generated@@5 ($generated@@37 $generated@@1 ($generated@@4 true))) ($generated@@26 ($generated@@31 $generated@@148) $generated@@159 $generated@@147))
 :pattern ( ($generated@@26 ($generated@@31 $generated@@148) $generated@@159 $generated@@147))
)) (= (ControlFlow 0 5) 3))) $generated@@157)))
(let (($generated@@160 true))
(let (($generated@@161  (=> (= $generated@@153 ($generated@@81 $generated@@154 $generated@@155 $generated@@156 false)) (=> (and (and ($generated@@149 $generated@@152) ($generated@@151 $generated@@152)) (and (= $generated@@155 $generated@@152) (forall (($generated@@162 Int) ) (!  (=> (and ($generated@@5 ($generated@@37 $generated@@1 ($generated@@4 true))) (and (<= 0 $generated@@162) (< $generated@@162 $generated@@147))) ($generated@@30 ($generated@@31 $generated@@148) $generated@@162))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@148) $generated@@162))
)))) (and (=> (= (ControlFlow 0 6) 1) $generated@@160) (=> (= (ControlFlow 0 6) 5) $generated@@158))))))
(let (($generated@@163  (=> (and (and ($generated@@149 $generated@@155) ($generated@@151 $generated@@155)) (and (= 3 $generated@@25) (= (ControlFlow 0 7) 6))) $generated@@161)))
$generated@@163))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
