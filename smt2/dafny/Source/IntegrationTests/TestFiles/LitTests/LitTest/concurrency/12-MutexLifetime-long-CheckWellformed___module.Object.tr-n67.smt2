(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Object () T@U)
(declare-fun Tagclass._module.Thread () T@U)
(declare-fun Tagclass._module.OwnedObject () T@U)
(declare-fun Tagclass._module.Object? () T@U)
(declare-fun Tagclass._module.Lifetime () T@U)
(declare-fun Tagclass._module.Thread? () T@U)
(declare-fun Tagclass._module.Lifetime? () T@U)
(declare-fun Tagclass._module.OwnedObject? () T@U)
(declare-fun |##_module.ObjectClassKind.Thread| () T@U)
(declare-fun Tagclass._module.ObjectClassKind () T@U)
(declare-fun |##_module.ObjectClassKind.OwnedObject| () T@U)
(declare-fun |##_module.ObjectClassKind.Lifetime| () T@U)
(declare-fun tytagFamily$Object () T@U)
(declare-fun tytagFamily$Thread () T@U)
(declare-fun tytagFamily$OwnedObject () T@U)
(declare-fun tytagFamily$Lifetime () T@U)
(declare-fun tytagFamily$ObjectClassKind () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun implements$_module.Object (T@U) Bool)
(declare-fun Tclass._module.Thread? () T@U)
(declare-fun Tclass._module.Lifetime? () T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.ObjectClassKind.Thread| () T@U)
(declare-fun |#_module.ObjectClassKind.OwnedObject| () T@U)
(declare-fun |#_module.ObjectClassKind.Lifetime| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.Object? () T@U)
(declare-fun Tclass._module.OwnedObject? () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.Object () T@U)
(declare-fun Tclass._module.Thread () T@U)
(declare-fun Tclass._module.OwnedObject () T@U)
(declare-fun Tclass._module.Lifetime () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.ObjectClassKind () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |_module.ObjectClassKind#Equal| (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun _module.ObjectClassKind.Thread_q (T@U) Bool)
(declare-fun _module.ObjectClassKind.OwnedObject_q (T@U) Bool)
(declare-fun _module.ObjectClassKind.Lifetime_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Object.triggerAxioms (T@U T@U) Bool)
(declare-fun |_module.Object.triggerAxioms#canCall| (T@U T@U) Bool)
(declare-fun |_module.Object.nonAliasing#canCall| (T@U T@U) Bool)
(declare-fun _module.Object.nonAliasing (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#140| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |$IsA#_module.ObjectClassKind| (T@U) Bool)
(declare-fun _module.Object.objectClassKind (T@U) T@U)
(declare-fun |_module.Object.objectClassKind#canCall| (T@U) Bool)
(declare-fun _module.Thread.objectClassKind (T@U) T@U)
(declare-fun |_module.Thread.objectClassKind#canCall| (T@U) Bool)
(declare-fun _module.OwnedObject.objectClassKind (T@U) T@U)
(declare-fun |_module.OwnedObject.objectClassKind#canCall| (T@U) Bool)
(declare-fun _module.Lifetime.objectClassKind (T@U) T@U)
(declare-fun |_module.Lifetime.objectClassKind#canCall| (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun implements$_module.OwnedObject (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool alloc Tagclass._module.Object Tagclass._module.Thread Tagclass._module.OwnedObject Tagclass._module.Object? Tagclass._module.Lifetime Tagclass._module.Thread? Tagclass._module.Lifetime? Tagclass._module.OwnedObject? |##_module.ObjectClassKind.Thread| Tagclass._module.ObjectClassKind |##_module.ObjectClassKind.OwnedObject| |##_module.ObjectClassKind.Lifetime| tytagFamily$Object tytagFamily$Thread tytagFamily$OwnedObject tytagFamily$Lifetime tytagFamily$ObjectClassKind)
)
(assert (= (Tag TBool) TagBool))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (implements$_module.Object Tclass._module.Thread?))
(assert (implements$_module.Object Tclass._module.Lifetime?))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (DatatypeCtorId |#_module.ObjectClassKind.Thread|) |##_module.ObjectClassKind.Thread|))
(assert (= (DatatypeCtorId |#_module.ObjectClassKind.OwnedObject|) |##_module.ObjectClassKind.OwnedObject|))
(assert (= (DatatypeCtorId |#_module.ObjectClassKind.Lifetime|) |##_module.ObjectClassKind.Lifetime|))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Thread?)  (or (= $o null) (= (dtype $o) Tclass._module.Thread?)))
 :pattern ( ($Is refType $o Tclass._module.Thread?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass._module.Lifetime?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass._module.Lifetime?)))
 :pattern ( ($Is refType $o@@0 Tclass._module.Lifetime?))
)))
(assert (forall ((bx T@U) ($h T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.Thread? $h) ($IsGoodHeap $h)) ($IsAllocBox bx Tclass._module.Object? $h))
 :pattern ( ($IsAllocBox bx Tclass._module.Thread? $h))
)))
(assert (forall ((bx@@0 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass._module.OwnedObject? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx@@0 Tclass._module.Object? $h@@0))
 :pattern ( ($IsAllocBox bx@@0 Tclass._module.OwnedObject? $h@@0))
)))
(assert (forall ((bx@@1 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsAllocBox bx@@1 Tclass._module.Lifetime? $h@@1) ($IsGoodHeap $h@@1)) ($IsAllocBox bx@@1 Tclass._module.Object? $h@@1))
 :pattern ( ($IsAllocBox bx@@1 Tclass._module.Lifetime? $h@@1))
)))
(assert (forall ((|c#0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Object $h@@2) ($IsAlloc refType |c#0| Tclass._module.Object? $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Object $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Object? $h@@2))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Thread $h@@3) ($IsAlloc refType |c#0@@0| Tclass._module.Thread? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Thread $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Thread? $h@@3))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.OwnedObject $h@@4) ($IsAlloc refType |c#0@@1| Tclass._module.OwnedObject? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.OwnedObject $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.OwnedObject? $h@@4))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass._module.Lifetime $h@@5) ($IsAlloc refType |c#0@@2| Tclass._module.Lifetime? $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.Lifetime $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.Lifetime? $h@@5))
)))
(assert (= (Ctor DatatypeTypeType) 4))
(assert ($Is DatatypeTypeType |#_module.ObjectClassKind.Thread| Tclass._module.ObjectClassKind))
(assert ($Is DatatypeTypeType |#_module.ObjectClassKind.OwnedObject| Tclass._module.ObjectClassKind))
(assert ($Is DatatypeTypeType |#_module.ObjectClassKind.Lifetime| Tclass._module.ObjectClassKind))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@1 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.Object? $h@@6)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.Object? $h@@6))
)))
(assert (forall (($o@@2 T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._module.Thread? $h@@7)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._module.Thread? $h@@7))
)))
(assert (forall (($o@@3 T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.OwnedObject? $h@@8)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.OwnedObject? $h@@8))
)))
(assert (forall (($o@@4 T@U) ($h@@9 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass._module.Lifetime? $h@@9)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._module.Lifetime? $h@@9))
)))
(assert (forall ((a@@2 T@U) (b T@U) ) (! (= (|_module.ObjectClassKind#Equal| a@@2 b) (= a@@2 b))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@2 b))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) ) (! (= (|Set#Subset| a@@3 b@@0) (forall ((o@@1 T@U) ) (!  (=> (|Set#IsMember| a@@3 o@@1) (|Set#IsMember| b@@0 o@@1))
 :pattern ( (|Set#IsMember| a@@3 o@@1))
 :pattern ( (|Set#IsMember| b@@0 o@@1))
)))
 :pattern ( (|Set#Subset| a@@3 b@@0))
)))
(assert (forall ((d T@U) ) (! (= (_module.ObjectClassKind.Thread_q d) (= (DatatypeCtorId d) |##_module.ObjectClassKind.Thread|))
 :pattern ( (_module.ObjectClassKind.Thread_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.ObjectClassKind.OwnedObject_q d@@0) (= (DatatypeCtorId d@@0) |##_module.ObjectClassKind.OwnedObject|))
 :pattern ( (_module.ObjectClassKind.OwnedObject_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.ObjectClassKind.Lifetime_q d@@1) (= (DatatypeCtorId d@@1) |##_module.ObjectClassKind.Lifetime|))
 :pattern ( (_module.ObjectClassKind.Lifetime_q d@@1))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap T@U) (this T@U) ) (!  (=> (or (|_module.Object.triggerAxioms#canCall| $Heap this) (and (< 4 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.Object) ($IsAlloc refType this Tclass._module.Object $Heap)))))) (and (|_module.Object.nonAliasing#canCall| $Heap this) (= (_module.Object.triggerAxioms $Heap this) (_module.Object.nonAliasing $Heap this))))
 :pattern ( (_module.Object.triggerAxioms $Heap this) ($IsGoodHeap $Heap))
))))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.ObjectClassKind.Thread_q d@@2) (= d@@2 |#_module.ObjectClassKind.Thread|))
 :pattern ( (_module.ObjectClassKind.Thread_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.ObjectClassKind.OwnedObject_q d@@3) (= d@@3 |#_module.ObjectClassKind.OwnedObject|))
 :pattern ( (_module.ObjectClassKind.OwnedObject_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.ObjectClassKind.Lifetime_q d@@4) (= d@@4 |#_module.ObjectClassKind.Lifetime|))
 :pattern ( (_module.ObjectClassKind.Lifetime_q d@@4))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#140| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@5) |l#2|)))) (= $o@@5 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#140| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass._module.Object)  (and ($Is refType |c#0@@3| Tclass._module.Object?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.Object))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.Object?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.Thread)  (and ($Is refType |c#0@@4| Tclass._module.Thread?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.Thread))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.Thread?))
)))
(assert (forall ((|c#0@@5| T@U) ) (! (= ($Is refType |c#0@@5| Tclass._module.OwnedObject)  (and ($Is refType |c#0@@5| Tclass._module.OwnedObject?) (or (not (= |c#0@@5| null)) (not true))))
 :pattern ( ($Is refType |c#0@@5| Tclass._module.OwnedObject))
 :pattern ( ($Is refType |c#0@@5| Tclass._module.OwnedObject?))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass._module.Lifetime)  (and ($Is refType |c#0@@6| Tclass._module.Lifetime?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.Lifetime))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.Lifetime?))
)))
(assert (forall (($o@@6 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@6 Tclass._module.Thread? $heap) ($IsAlloc refType $o@@6 Tclass._module.Object? $heap))
 :pattern ( ($IsAlloc refType $o@@6 Tclass._module.Thread? $heap))
)))
(assert (forall (($o@@7 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@7 Tclass._module.OwnedObject? $heap@@0) ($IsAlloc refType $o@@7 Tclass._module.Object? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@7 Tclass._module.OwnedObject? $heap@@0))
)))
(assert (forall (($o@@8 T@U) ($heap@@1 T@U) ) (!  (=> ($IsAlloc refType $o@@8 Tclass._module.Lifetime? $heap@@1) ($IsAlloc refType $o@@8 Tclass._module.Object? $heap@@1))
 :pattern ( ($IsAlloc refType $o@@8 Tclass._module.Lifetime? $heap@@1))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@0 T@U) (this@@0 T@U) ) (!  (=> (or (|_module.Object.nonAliasing#canCall| $Heap@@0 this@@0) (and (< 3 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass._module.Object) ($IsAlloc refType this@@0 Tclass._module.Object $Heap@@0)))))) (and (and (and (|$IsA#_module.ObjectClassKind| (_module.Object.objectClassKind this@@0)) (|_module.Object.objectClassKind#canCall| this@@0)) (=> (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@0) |#_module.ObjectClassKind.Thread|) ($Is refType this@@0 Tclass._module.Thread)) (and (and (|$IsA#_module.ObjectClassKind| (_module.Object.objectClassKind this@@0)) (|_module.Object.objectClassKind#canCall| this@@0)) (=> (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@0) |#_module.ObjectClassKind.OwnedObject|) ($Is refType this@@0 Tclass._module.OwnedObject)) (and (|$IsA#_module.ObjectClassKind| (_module.Object.objectClassKind this@@0)) (|_module.Object.objectClassKind#canCall| this@@0)))))) (= (_module.Object.nonAliasing $Heap@@0 this@@0)  (and (and (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@0) |#_module.ObjectClassKind.Thread|) ($Is refType this@@0 Tclass._module.Thread)) (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@0) |#_module.ObjectClassKind.OwnedObject|) ($Is refType this@@0 Tclass._module.OwnedObject))) (= (|_module.ObjectClassKind#Equal| (_module.Object.objectClassKind this@@0) |#_module.ObjectClassKind.Lifetime|) ($Is refType this@@0 Tclass._module.Lifetime))))))
 :pattern ( (_module.Object.nonAliasing $Heap@@0 this@@0) ($IsGoodHeap $Heap@@0))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@1 T@U) ) (!  (=> (or (|_module.Thread.objectClassKind#canCall| this@@1) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 Tclass._module.Thread)))) (= (_module.Thread.objectClassKind this@@1) (Lit DatatypeTypeType |#_module.ObjectClassKind.Thread|)))
 :pattern ( (_module.Thread.objectClassKind this@@1))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@2 T@U) ) (!  (=> (or (|_module.OwnedObject.objectClassKind#canCall| this@@2) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 Tclass._module.OwnedObject)))) (= (_module.OwnedObject.objectClassKind this@@2) (Lit DatatypeTypeType |#_module.ObjectClassKind.OwnedObject|)))
 :pattern ( (_module.OwnedObject.objectClassKind this@@2))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@3 T@U) ) (!  (=> (or (|_module.Lifetime.objectClassKind#canCall| this@@3) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass._module.Lifetime)))) (= (_module.Lifetime.objectClassKind this@@3) (Lit DatatypeTypeType |#_module.ObjectClassKind.Lifetime|)))
 :pattern ( (_module.Lifetime.objectClassKind this@@3))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@4 T@U) ) (!  (=> (or (|_module.Object.triggerAxioms#canCall| $Heap@@1 this@@4) (and (< 4 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@4 null)) (not true)) (and ($Is refType this@@4 Tclass._module.Object) ($IsAlloc refType this@@4 Tclass._module.Object $Heap@@1)))))) (_module.Object.triggerAxioms $Heap@@1 this@@4))
 :pattern ( (_module.Object.triggerAxioms $Heap@@1 this@@4))
))))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (!  (=> (and (_module.ObjectClassKind.Thread_q a@@4) (_module.ObjectClassKind.Thread_q b@@1)) (|_module.ObjectClassKind#Equal| a@@4 b@@1))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@4 b@@1) (_module.ObjectClassKind.Thread_q a@@4))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@4 b@@1) (_module.ObjectClassKind.Thread_q b@@1))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (!  (=> (and (_module.ObjectClassKind.OwnedObject_q a@@5) (_module.ObjectClassKind.OwnedObject_q b@@2)) (|_module.ObjectClassKind#Equal| a@@5 b@@2))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@5 b@@2) (_module.ObjectClassKind.OwnedObject_q a@@5))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@5 b@@2) (_module.ObjectClassKind.OwnedObject_q b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) ) (!  (=> (and (_module.ObjectClassKind.Lifetime_q a@@6) (_module.ObjectClassKind.Lifetime_q b@@3)) (|_module.ObjectClassKind#Equal| a@@6 b@@3))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@6 b@@3) (_module.ObjectClassKind.Lifetime_q a@@6))
 :pattern ( (|_module.ObjectClassKind#Equal| a@@6 b@@3) (_module.ObjectClassKind.Lifetime_q b@@3))
)))
(assert (forall ((x@@7 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@7)) x@@7)
 :pattern ( ($Box T@@2 x@@7))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (|$IsA#_module.ObjectClassKind| d@@5) (or (or (_module.ObjectClassKind.Thread_q d@@5) (_module.ObjectClassKind.OwnedObject_q d@@5)) (_module.ObjectClassKind.Lifetime_q d@@5)))
 :pattern ( (|$IsA#_module.ObjectClassKind| d@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@5 T@U) ) (!  (=> (or (|_module.Thread.objectClassKind#canCall| (Lit refType this@@5)) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@5 null)) (not true)) ($Is refType this@@5 Tclass._module.Thread)))) (= (_module.Thread.objectClassKind (Lit refType this@@5)) (Lit DatatypeTypeType |#_module.ObjectClassKind.Thread|)))
 :weight 3
 :pattern ( (_module.Thread.objectClassKind (Lit refType this@@5)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@6 T@U) ) (!  (=> (or (|_module.OwnedObject.objectClassKind#canCall| (Lit refType this@@6)) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@6 null)) (not true)) ($Is refType this@@6 Tclass._module.OwnedObject)))) (= (_module.OwnedObject.objectClassKind (Lit refType this@@6)) (Lit DatatypeTypeType |#_module.ObjectClassKind.OwnedObject|)))
 :weight 3
 :pattern ( (_module.OwnedObject.objectClassKind (Lit refType this@@6)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@7 T@U) ) (!  (=> (or (|_module.Lifetime.objectClassKind#canCall| (Lit refType this@@7)) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@7 null)) (not true)) ($Is refType this@@7 Tclass._module.Lifetime)))) (= (_module.Lifetime.objectClassKind (Lit refType this@@7)) (Lit DatatypeTypeType |#_module.ObjectClassKind.Lifetime|)))
 :weight 3
 :pattern ( (_module.Lifetime.objectClassKind (Lit refType this@@7)))
))))
(assert (forall ((d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 Tclass._module.ObjectClassKind) (or (or (_module.ObjectClassKind.Thread_q d@@6) (_module.ObjectClassKind.OwnedObject_q d@@6)) (_module.ObjectClassKind.Lifetime_q d@@6)))
 :pattern ( (_module.ObjectClassKind.Lifetime_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.ObjectClassKind))
 :pattern ( (_module.ObjectClassKind.OwnedObject_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.ObjectClassKind))
 :pattern ( (_module.ObjectClassKind.Thread_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.ObjectClassKind))
)))
(assert (forall (($o@@9 T@U) ) (!  (=> ($Is refType $o@@9 Tclass._module.Thread?) ($Is refType $o@@9 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@9 Tclass._module.Thread?))
)))
(assert (forall (($o@@10 T@U) ) (!  (=> ($Is refType $o@@10 Tclass._module.OwnedObject?) ($Is refType $o@@10 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@10 Tclass._module.OwnedObject?))
)))
(assert (forall (($o@@11 T@U) ) (!  (=> ($Is refType $o@@11 Tclass._module.Lifetime?) ($Is refType $o@@11 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@11 Tclass._module.Lifetime?))
)))
(assert (forall ((d@@7 T@U) ($h@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) ($Is DatatypeTypeType d@@7 Tclass._module.ObjectClassKind)) ($IsAlloc DatatypeTypeType d@@7 Tclass._module.ObjectClassKind $h@@10))
 :pattern ( ($IsAlloc DatatypeTypeType d@@7 Tclass._module.ObjectClassKind $h@@10))
)))
(assert (= (Tag Tclass._module.Object) Tagclass._module.Object))
(assert (= (TagFamily Tclass._module.Object) tytagFamily$Object))
(assert (= (Tag Tclass._module.Thread) Tagclass._module.Thread))
(assert (= (TagFamily Tclass._module.Thread) tytagFamily$Thread))
(assert (= (Tag Tclass._module.OwnedObject) Tagclass._module.OwnedObject))
(assert (= (TagFamily Tclass._module.OwnedObject) tytagFamily$OwnedObject))
(assert (= (Tag Tclass._module.Object?) Tagclass._module.Object?))
(assert (= (TagFamily Tclass._module.Object?) tytagFamily$Object))
(assert (= (Tag Tclass._module.Lifetime) Tagclass._module.Lifetime))
(assert (= (TagFamily Tclass._module.Lifetime) tytagFamily$Lifetime))
(assert (= (Tag Tclass._module.Thread?) Tagclass._module.Thread?))
(assert (= (TagFamily Tclass._module.Thread?) tytagFamily$Thread))
(assert (= (Tag Tclass._module.Lifetime?) Tagclass._module.Lifetime?))
(assert (= (TagFamily Tclass._module.Lifetime?) tytagFamily$Lifetime))
(assert (= (Tag Tclass._module.OwnedObject?) Tagclass._module.OwnedObject?))
(assert (= (TagFamily Tclass._module.OwnedObject?) tytagFamily$OwnedObject))
(assert (= (Tag Tclass._module.ObjectClassKind) Tagclass._module.ObjectClassKind))
(assert (= (TagFamily Tclass._module.ObjectClassKind) tytagFamily$ObjectClassKind))
(assert (= |#_module.ObjectClassKind.Thread| (Lit DatatypeTypeType |#_module.ObjectClassKind.Thread|)))
(assert (= |#_module.ObjectClassKind.OwnedObject| (Lit DatatypeTypeType |#_module.ObjectClassKind.OwnedObject|)))
(assert (= |#_module.ObjectClassKind.Lifetime| (Lit DatatypeTypeType |#_module.ObjectClassKind.Lifetime|)))
(assert (forall (($o@@12 T@U) ) (! (= ($Is refType $o@@12 Tclass._module.Object?)  (or (= $o@@12 null) (implements$_module.Object (dtype $o@@12))))
 :pattern ( ($Is refType $o@@12 Tclass._module.Object?))
)))
(assert (forall (($o@@13 T@U) ) (! (= ($Is refType $o@@13 Tclass._module.OwnedObject?)  (or (= $o@@13 null) (implements$_module.OwnedObject (dtype $o@@13))))
 :pattern ( ($Is refType $o@@13 Tclass._module.OwnedObject?))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@8 T@U) ) (!  (=> (or (|_module.Thread.objectClassKind#canCall| this@@8) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@8 null)) (not true)) ($Is refType this@@8 Tclass._module.Thread)))) (= (_module.Object.objectClassKind this@@8) (_module.Thread.objectClassKind this@@8)))
 :pattern ( (_module.Object.objectClassKind this@@8) ($Is refType this@@8 Tclass._module.Thread))
 :pattern ( (_module.Object.objectClassKind this@@8) (_module.Thread.objectClassKind this@@8))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@9 T@U) ) (!  (=> (or (|_module.OwnedObject.objectClassKind#canCall| this@@9) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@9 null)) (not true)) ($Is refType this@@9 Tclass._module.OwnedObject)))) (= (_module.Object.objectClassKind this@@9) (_module.OwnedObject.objectClassKind this@@9)))
 :pattern ( (_module.Object.objectClassKind this@@9) ($Is refType this@@9 Tclass._module.OwnedObject))
 :pattern ( (_module.Object.objectClassKind this@@9) (_module.OwnedObject.objectClassKind this@@9))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@10 T@U) ) (!  (=> (or (|_module.Lifetime.objectClassKind#canCall| this@@10) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@10 null)) (not true)) ($Is refType this@@10 Tclass._module.Lifetime)))) (= (_module.Object.objectClassKind this@@10) (_module.Lifetime.objectClassKind this@@10)))
 :pattern ( (_module.Object.objectClassKind this@@10) ($Is refType this@@10 Tclass._module.Lifetime))
 :pattern ( (_module.Object.objectClassKind this@@10) (_module.Lifetime.objectClassKind this@@10))
))))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@8)) (Lit BoxType ($Box T@@3 x@@8)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@8)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@11 T@U) ) (!  (=> (or (|_module.Thread.objectClassKind#canCall| this@@11) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@11 null)) (not true)) ($Is refType this@@11 Tclass._module.Thread)))) ($Is DatatypeTypeType (_module.Thread.objectClassKind this@@11) Tclass._module.ObjectClassKind))
 :pattern ( (_module.Thread.objectClassKind this@@11))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@12 T@U) ) (!  (=> (or (|_module.OwnedObject.objectClassKind#canCall| this@@12) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@12 null)) (not true)) ($Is refType this@@12 Tclass._module.OwnedObject)))) ($Is DatatypeTypeType (_module.OwnedObject.objectClassKind this@@12) Tclass._module.ObjectClassKind))
 :pattern ( (_module.OwnedObject.objectClassKind this@@12))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@13 T@U) ) (!  (=> (or (|_module.Lifetime.objectClassKind#canCall| this@@13) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@13 null)) (not true)) ($Is refType this@@13 Tclass._module.Lifetime)))) ($Is DatatypeTypeType (_module.Lifetime.objectClassKind this@@13) Tclass._module.ObjectClassKind))
 :pattern ( (_module.Lifetime.objectClassKind this@@13))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((this@@14 T@U) ) (!  (=> (or (|_module.Object.objectClassKind#canCall| this@@14) (and (< 2 $FunctionContextHeight) (and (or (not (= this@@14 null)) (not true)) ($Is refType this@@14 Tclass._module.Object)))) ($Is DatatypeTypeType (_module.Object.objectClassKind this@@14) Tclass._module.ObjectClassKind))
 :pattern ( (_module.Object.objectClassKind this@@14))
))))
(assert (forall ((h@@0 T@U) (v@@0 T@U) ) (! ($IsAlloc boolType v@@0 TBool h@@0)
 :pattern ( ($IsAlloc boolType v@@0 TBool h@@0))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is boolType v@@1 TBool)
 :pattern ( ($Is boolType v@@1 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@@2 () T@U)
(declare-fun this@@15 () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 4) (- 0 3)) (_module.Object.triggerAxioms $Heap@@2 this@@15))))
(let ((anon5_Else_correct  (=> ($IsAllocBox ($Box refType this@@15) Tclass._module.Object? $Heap@@2) (and (=> (= (ControlFlow 0 5) (- 0 7)) (forall (($o@@14 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@14) alloc)))) (= $o@@14 this@@15)) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@14 $f@@0))))) (=> (|_module.Object.nonAliasing#canCall| $Heap@@2 this@@15) (=> (and (and (and (|_module.Object.nonAliasing#canCall| $Heap@@2 this@@15) (_module.Object.nonAliasing $Heap@@2 this@@15)) (and ($IsAllocBox ($Box refType this@@15) Tclass._module.Object? $Heap@@2) (= |b$reqreads#0@0| (forall (($o@@15 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@15) alloc)))) (= $o@@15 this@@15)) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@15 $f@@1))))))) (and (and (|_module.Object.nonAliasing#canCall| $Heap@@2 this@@15) (= (_module.Object.triggerAxioms $Heap@@2 this@@15) (_module.Object.nonAliasing $Heap@@2 this@@15))) (and (|_module.Object.nonAliasing#canCall| $Heap@@2 this@@15) ($Is boolType (bool_2_U (_module.Object.triggerAxioms $Heap@@2 this@@15)) TBool)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) |b$reqreads#0@0|) (=> |b$reqreads#0@0| (=> (= (ControlFlow 0 5) 4) GeneratedUnifiedExit_correct)))))))))
(let ((anon5_Then_correct  (=> (and ($IsAllocBox ($Box refType this@@15) Tclass._module.Object? $Heap@@2) (= (ControlFlow 0 2) (- 0 1))) (or (= this@@15 this@@15) (and (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType this@@15)) (|Set#UnionOne| |Set#Empty| ($Box refType this@@15))) (not (|Set#Subset| (|Set#UnionOne| |Set#Empty| ($Box refType this@@15)) (|Set#UnionOne| |Set#Empty| ($Box refType this@@15)))))))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#140| null $Heap@@2 alloc this@@15)) (and (=> (= (ControlFlow 0 8) 2) anon5_Then_correct) (=> (= (ControlFlow 0 8) 5) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (=> (and (and (or (not (= this@@15 null)) (not true)) (and ($Is refType this@@15 Tclass._module.Object) ($IsAlloc refType this@@15 Tclass._module.Object $Heap@@2))) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 9) 8))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
