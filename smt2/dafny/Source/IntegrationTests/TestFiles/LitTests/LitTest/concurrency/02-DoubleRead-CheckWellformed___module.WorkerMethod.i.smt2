(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._module.Universe? () T@U)
(declare-fun Tagclass._module.Universe? () T@U)
(declare-fun Tagclass._module.Object () T@U)
(declare-fun Tagclass._module.Universe () T@U)
(declare-fun Tagclass._module.Object? () T@U)
(declare-fun class._module.ArcAtomicIsize? () T@U)
(declare-fun Tagclass._module.ArcAtomicIsize? () T@U)
(declare-fun Tagclass._module.ArcAtomicIsize () T@U)
(declare-fun class._module.WorkerMethod? () T@U)
(declare-fun Tagclass._module.WorkerMethod? () T@U)
(declare-fun Tagclass._module.WorkerMethod () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$Universe () T@U)
(declare-fun tytagFamily$Object () T@U)
(declare-fun tytagFamily$ArcAtomicIsize () T@U)
(declare-fun tytagFamily$WorkerMethod () T@U)
(declare-fun field$content () T@U)
(declare-fun field$data () T@U)
(declare-fun field$next_stmt () T@U)
(declare-fun field$counter () T@U)
(declare-fun field$initial_value () T@U)
(declare-fun field$final_value () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Universe.i0 (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.Universe.i0#canCall| (T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Universe () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun _module.__default.upCast (T@U) T@U)
(declare-fun _module.Object.universe (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.Universe.content () T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tclass._module.Object () T@U)
(declare-fun |_module.__default.upCast#canCall| (T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun implements$_module.Object (T@U) Bool)
(declare-fun Tclass._module.ArcAtomicIsize? () T@U)
(declare-fun Tclass._module.WorkerMethod? () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass._module.Object? () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass._module.Universe? () T@U)
(declare-fun Tclass._module.ArcAtomicIsize () T@U)
(declare-fun Tclass._module.WorkerMethod () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.ArcAtomicIsize.data () T@U)
(declare-fun _module.WorkerMethod.next__stmt () T@U)
(declare-fun _module.WorkerMethod.counter () T@U)
(declare-fun _module.WorkerMethod.initial__value () T@U)
(declare-fun _module.WorkerMethod.final__value () T@U)
(declare-fun _module.WorkerMethod.i (T@U T@U) Bool)
(declare-fun |_module.WorkerMethod.i#canCall| (T@U T@U) Bool)
(declare-fun |_module.Object.i0#canCall| (T@U T@U) Bool)
(declare-fun _module.Object.i0 (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun |_module.ArcAtomicIsize.i#canCall| (T@U T@U) Bool)
(declare-fun _module.ArcAtomicIsize.i (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun implements$_module.Universe (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSet alloc allocName Tagclass._System.object? Tagclass._System.object class._module.Universe? Tagclass._module.Universe? Tagclass._module.Object Tagclass._module.Universe Tagclass._module.Object? class._module.ArcAtomicIsize? Tagclass._module.ArcAtomicIsize? Tagclass._module.ArcAtomicIsize class._module.WorkerMethod? Tagclass._module.WorkerMethod? Tagclass._module.WorkerMethod tytagFamily$object tytagFamily$Universe tytagFamily$Object tytagFamily$ArcAtomicIsize tytagFamily$WorkerMethod field$content field$data field$next_stmt field$counter field$initial_value field$final_value)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (and (= (Ctor refType) 3) (= (Ctor SetType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap T@U) (this T@U) ) (!  (=> (or (|_module.Universe.i0#canCall| $Heap this) (and (< 2 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.Universe) ($IsAlloc refType this Tclass._module.Universe $Heap)))))) (and (forall ((|o#0| T@U) ) (!  (=> ($Is refType |o#0| Tclass._module.Object) (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Universe.content)) ($Box refType |o#0|)) (=> (= (_module.Object.universe |o#0|) this) (|_module.__default.upCast#canCall| |o#0|))))
 :pattern ( (_module.__default.upCast |o#0|))
 :pattern ( (_module.Object.universe |o#0|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Universe.content)) ($Box refType |o#0|)))
)) (= (_module.Universe.i0 $Heap this) (forall ((|o#0@@0| T@U) ) (!  (=> (and ($Is refType |o#0@@0| Tclass._module.Object) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Universe.content)) ($Box refType |o#0@@0|))) (and (= (_module.Object.universe |o#0@@0|) this) (or (not (= (_module.__default.upCast |o#0@@0|) this)) (not true))))
 :pattern ( (_module.__default.upCast |o#0@@0|))
 :pattern ( (_module.Object.universe |o#0@@0|))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Universe.content)) ($Box refType |o#0@@0|)))
)))))
 :pattern ( (_module.Universe.i0 $Heap this) ($IsGoodHeap $Heap))
))))
(assert (implements$_module.Object Tclass._module.ArcAtomicIsize?))
(assert (implements$_module.Object Tclass._module.WorkerMethod?))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.ArcAtomicIsize?)  (or (= $o null) (= (dtype $o) Tclass._module.ArcAtomicIsize?)))
 :pattern ( ($Is refType $o Tclass._module.ArcAtomicIsize?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass._module.WorkerMethod?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass._module.WorkerMethod?)))
 :pattern ( ($Is refType $o@@0 Tclass._module.WorkerMethod?))
)))
(assert (forall ((bx T@U) ($h T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.ArcAtomicIsize? $h) ($IsGoodHeap $h)) ($IsAllocBox bx Tclass._module.Object? $h))
 :pattern ( ($IsAllocBox bx Tclass._module.ArcAtomicIsize? $h))
)))
(assert (forall ((bx@@0 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass._module.WorkerMethod? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx@@0 Tclass._module.Object? $h@@0))
 :pattern ( ($IsAllocBox bx@@0 Tclass._module.WorkerMethod? $h@@0))
)))
(assert (forall ((|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@1) ($IsAlloc refType |c#0| Tclass._System.object? $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@1))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Universe $h@@2) ($IsAlloc refType |c#0@@0| Tclass._module.Universe? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Universe $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Universe? $h@@2))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.Object $h@@3) ($IsAlloc refType |c#0@@1| Tclass._module.Object? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.Object $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.Object? $h@@3))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass._module.ArcAtomicIsize $h@@4) ($IsAlloc refType |c#0@@2| Tclass._module.ArcAtomicIsize? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.ArcAtomicIsize $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.ArcAtomicIsize? $h@@4))
)))
(assert (forall ((|c#0@@3| T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType |c#0@@3| Tclass._module.WorkerMethod $h@@5) ($IsAlloc refType |c#0@@3| Tclass._module.WorkerMethod? $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@3| Tclass._module.WorkerMethod $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@3| Tclass._module.WorkerMethod? $h@@5))
)))
(assert (= (FDim _module.Universe.content) 0))
(assert (= (FieldOfDecl class._module.Universe? field$content) _module.Universe.content))
(assert ($IsGhostField _module.Universe.content))
(assert (= (FDim _module.ArcAtomicIsize.data) 0))
(assert (= (FieldOfDecl class._module.ArcAtomicIsize? field$data) _module.ArcAtomicIsize.data))
(assert  (not ($IsGhostField _module.ArcAtomicIsize.data)))
(assert (= (FDim _module.WorkerMethod.next__stmt) 0))
(assert (= (FieldOfDecl class._module.WorkerMethod? field$next_stmt) _module.WorkerMethod.next__stmt))
(assert  (not ($IsGhostField _module.WorkerMethod.next__stmt)))
(assert (= (FDim _module.WorkerMethod.counter) 0))
(assert (= (FieldOfDecl class._module.WorkerMethod? field$counter) _module.WorkerMethod.counter))
(assert  (not ($IsGhostField _module.WorkerMethod.counter)))
(assert (= (FDim _module.WorkerMethod.initial__value) 0))
(assert (= (FieldOfDecl class._module.WorkerMethod? field$initial_value) _module.WorkerMethod.initial__value))
(assert  (not ($IsGhostField _module.WorkerMethod.initial__value)))
(assert (= (FDim _module.WorkerMethod.final__value) 0))
(assert (= (FieldOfDecl class._module.WorkerMethod? field$final_value) _module.WorkerMethod.final__value))
(assert  (not ($IsGhostField _module.WorkerMethod.final__value)))
(assert (forall (($o@@1 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._System.object? $h@@6)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._System.object? $h@@6))
)))
(assert (forall (($o@@2 T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._module.Universe? $h@@7)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._module.Universe? $h@@7))
)))
(assert (forall (($o@@3 T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.Object? $h@@8)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.Object? $h@@8))
)))
(assert (forall (($o@@4 T@U) ($h@@9 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass._module.ArcAtomicIsize? $h@@9)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._module.ArcAtomicIsize? $h@@9))
)))
(assert (forall (($o@@5 T@U) ($h@@10 T@U) ) (! (= ($IsAlloc refType $o@@5 Tclass._module.WorkerMethod? $h@@10)  (or (= $o@@5 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@5) alloc)))))
 :pattern ( ($IsAlloc refType $o@@5 Tclass._module.WorkerMethod? $h@@10))
)))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@0 T@U) (this@@0 T@U) ) (!  (=> (or (|_module.WorkerMethod.i#canCall| $Heap@@0 this@@0) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass._module.WorkerMethod) ($IsAlloc refType this@@0 Tclass._module.WorkerMethod $Heap@@0)))))) (and (and (|_module.Object.i0#canCall| $Heap@@0 this@@0) (=> (_module.Object.i0 $Heap@@0 this@@0) (=> (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.next__stmt)))) (=> (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.next__stmt))) (LitInt 4)) (=> (= (_module.Object.universe this@@0) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.counter)))) (|_module.ArcAtomicIsize.i#canCall| $Heap@@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.counter)))))))) (= (_module.WorkerMethod.i $Heap@@0 this@@0)  (and (and (and (and (and (_module.Object.i0 $Heap@@0 this@@0) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.next__stmt))) (LitInt 4)))) (= (_module.Object.universe this@@0) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.counter))))) (_module.ArcAtomicIsize.i $Heap@@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.counter)))) (=> (> (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.next__stmt))) 1) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.counter))) _module.ArcAtomicIsize.data)))))) (=> (> (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.next__stmt))) 2) (and (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.final__value)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.final__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.WorkerMethod.counter))) _module.ArcAtomicIsize.data))))))))))
 :pattern ( (_module.WorkerMethod.i $Heap@@0 this@@0) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v bx@@1) ($IsBox bx@@1 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@1))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) ($o@@6 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@6 $f))  (=> (and (or (not (= $o@@6 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@6) |l#2|)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#3| $o@@6) |l#4|)))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@6 $f))
)))
(assert ($IsGhostField alloc))
(assert (forall (($h@@11 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) Tclass._module.ArcAtomicIsize?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@7) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@7) _module.ArcAtomicIsize.data)) TInt $h@@11))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@7) _module.ArcAtomicIsize.data)))
)))
(assert (forall (($h@@12 T@U) ($o@@8 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) Tclass._module.WorkerMethod?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@8) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@8) _module.WorkerMethod.next__stmt)) TInt $h@@12))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@8) _module.WorkerMethod.next__stmt)))
)))
(assert (forall (($h@@13 T@U) ($o@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@13) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) Tclass._module.WorkerMethod?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@9) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@9) _module.WorkerMethod.initial__value)) TInt $h@@13))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@9) _module.WorkerMethod.initial__value)))
)))
(assert (forall (($h@@14 T@U) ($o@@10 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@14) (and (or (not (= $o@@10 null)) (not true)) (= (dtype $o@@10) Tclass._module.WorkerMethod?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@10) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@10) _module.WorkerMethod.final__value)) TInt $h@@14))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@10) _module.WorkerMethod.final__value)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert  (=> (< 1 $FunctionContextHeight) (forall (($h@@15 T@U) ($o@@11 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@15) (and (or (not (= $o@@11 null)) (not true)) ($Is refType $o@@11 Tclass._module.Object?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@11) alloc)))) ($IsAlloc refType (_module.Object.universe $o@@11) Tclass._module.Universe $h@@15))
 :pattern ( (_module.Object.universe $o@@11) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@11) alloc)))
))))
(assert  (=> (< 1 $FunctionContextHeight) (forall (($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) ($Is refType $o@@12 Tclass._module.Object?)) ($Is refType (_module.Object.universe $o@@12) Tclass._module.Universe))
 :pattern ( (_module.Object.universe $o@@12))
))))
(assert (forall (($h@@16 T@U) ($o@@13 T@U) ) (!  (=> (and ($IsGoodHeap $h@@16) (and (or (not (= $o@@13 null)) (not true)) (= (dtype $o@@13) Tclass._module.WorkerMethod?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@13) _module.WorkerMethod.counter)) Tclass._module.ArcAtomicIsize))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@13) _module.WorkerMethod.counter)))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object?))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._System.object)))
 :pattern ( ($IsBox bx@@3 Tclass._System.object))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.Universe?) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._module.Universe?)))
 :pattern ( ($IsBox bx@@4 Tclass._module.Universe?))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._module.Object) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._module.Object)))
 :pattern ( ($IsBox bx@@5 Tclass._module.Object))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._module.Universe) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._module.Universe)))
 :pattern ( ($IsBox bx@@6 Tclass._module.Universe))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._module.Object?) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._module.Object?)))
 :pattern ( ($IsBox bx@@7 Tclass._module.Object?))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.ArcAtomicIsize?) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._module.ArcAtomicIsize?)))
 :pattern ( ($IsBox bx@@8 Tclass._module.ArcAtomicIsize?))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.ArcAtomicIsize) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass._module.ArcAtomicIsize)))
 :pattern ( ($IsBox bx@@9 Tclass._module.ArcAtomicIsize))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass._module.WorkerMethod?) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) Tclass._module.WorkerMethod?)))
 :pattern ( ($IsBox bx@@10 Tclass._module.WorkerMethod?))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 Tclass._module.WorkerMethod) (and (= ($Box refType ($Unbox refType bx@@11)) bx@@11) ($Is refType ($Unbox refType bx@@11) Tclass._module.WorkerMethod)))
 :pattern ( ($IsBox bx@@11 Tclass._module.WorkerMethod))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._System.object)  (and ($Is refType |c#0@@4| Tclass._System.object?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@4| Tclass._System.object?))
)))
(assert (forall ((|c#0@@5| T@U) ) (! (= ($Is refType |c#0@@5| Tclass._module.Universe)  (and ($Is refType |c#0@@5| Tclass._module.Universe?) (or (not (= |c#0@@5| null)) (not true))))
 :pattern ( ($Is refType |c#0@@5| Tclass._module.Universe))
 :pattern ( ($Is refType |c#0@@5| Tclass._module.Universe?))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass._module.Object)  (and ($Is refType |c#0@@6| Tclass._module.Object?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.Object))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.Object?))
)))
(assert (forall ((|c#0@@7| T@U) ) (! (= ($Is refType |c#0@@7| Tclass._module.ArcAtomicIsize)  (and ($Is refType |c#0@@7| Tclass._module.ArcAtomicIsize?) (or (not (= |c#0@@7| null)) (not true))))
 :pattern ( ($Is refType |c#0@@7| Tclass._module.ArcAtomicIsize))
 :pattern ( ($Is refType |c#0@@7| Tclass._module.ArcAtomicIsize?))
)))
(assert (forall ((|c#0@@8| T@U) ) (! (= ($Is refType |c#0@@8| Tclass._module.WorkerMethod)  (and ($Is refType |c#0@@8| Tclass._module.WorkerMethod?) (or (not (= |c#0@@8| null)) (not true))))
 :pattern ( ($Is refType |c#0@@8| Tclass._module.WorkerMethod))
 :pattern ( ($Is refType |c#0@@8| Tclass._module.WorkerMethod?))
)))
(assert (forall (($h@@17 T@U) ($o@@14 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@17) (and (or (not (= $o@@14 null)) (not true)) (= (dtype $o@@14) Tclass._module.WorkerMethod?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@17 $o@@14) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@17 $o@@14) _module.WorkerMethod.counter)) Tclass._module.ArcAtomicIsize $h@@17))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@17 $o@@14) _module.WorkerMethod.counter)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|o#0@@1| T@U) ) (!  (=> (or (|_module.__default.upCast#canCall| |o#0@@1|) (and (< 0 $FunctionContextHeight) ($Is refType |o#0@@1| Tclass._System.object))) (= (_module.__default.upCast |o#0@@1|) |o#0@@1|))
 :pattern ( (_module.__default.upCast |o#0@@1|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@1 T@U) ) (!  (=> (or (|_module.Object.i0#canCall| $Heap@@1 this@@1) (and (< 3 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 Tclass._module.Object) ($IsAlloc refType this@@1 Tclass._module.Object $Heap@@1)))))) (and (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 (_module.Object.universe this@@1)) _module.Universe.content)) ($Box refType this@@1)) (|_module.Universe.i0#canCall| $Heap@@1 (_module.Object.universe this@@1))) (= (_module.Object.i0 $Heap@@1 this@@1)  (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 (_module.Object.universe this@@1)) _module.Universe.content)) ($Box refType this@@1)) (_module.Universe.i0 $Heap@@1 (_module.Object.universe this@@1))))))
 :pattern ( (_module.Object.i0 $Heap@@1 this@@1) ($IsGoodHeap $Heap@@1))
))))
(assert (forall (($o@@15 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@15 Tclass._module.ArcAtomicIsize? $heap) ($IsAlloc refType $o@@15 Tclass._module.Object? $heap))
 :pattern ( ($IsAlloc refType $o@@15 Tclass._module.ArcAtomicIsize? $heap))
)))
(assert (forall (($o@@16 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@16 Tclass._module.WorkerMethod? $heap@@0) ($IsAlloc refType $o@@16 Tclass._module.Object? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@16 Tclass._module.WorkerMethod? $heap@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|o#0@@2| T@U) ) (!  (=> (or (|_module.__default.upCast#canCall| |o#0@@2|) (and (< 0 $FunctionContextHeight) ($Is refType |o#0@@2| Tclass._System.object))) ($Is refType (_module.__default.upCast |o#0@@2|) Tclass._System.object))
 :pattern ( (_module.__default.upCast |o#0@@2|))
))))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 TInt) (and (= ($Box intType ($Unbox intType bx@@12)) bx@@12) ($Is intType ($Unbox intType bx@@12) TInt)))
 :pattern ( ($IsBox bx@@12 TInt))
)))
(assert (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 TBool) (and (= ($Box boolType ($Unbox boolType bx@@13)) bx@@13) ($Is boolType ($Unbox boolType bx@@13) TBool)))
 :pattern ( ($IsBox bx@@13 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@2 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0) (forall ((bx@@14 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@14) ($IsAllocBox bx@@14 t0@@2 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@14))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0))
)))
(assert (forall (($o@@17 T@U) ) (! ($Is refType $o@@17 Tclass._System.object?)
 :pattern ( ($Is refType $o@@17 Tclass._System.object?))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@2 T@U) (|o#0@@3| T@U) ) (!  (=> (and (or (|_module.__default.upCast#canCall| |o#0@@3|) (and (< 0 $FunctionContextHeight) (and ($Is refType |o#0@@3| Tclass._System.object) ($IsAlloc refType |o#0@@3| Tclass._System.object $Heap@@2)))) ($IsGoodHeap $Heap@@2)) ($IsAlloc refType (_module.__default.upCast |o#0@@3|) Tclass._System.object $Heap@@2))
 :pattern ( ($IsAlloc refType (_module.__default.upCast |o#0@@3|) Tclass._System.object $Heap@@2))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|o#0@@4| T@U) ) (!  (=> (or (|_module.__default.upCast#canCall| (Lit refType |o#0@@4|)) (and (< 0 $FunctionContextHeight) ($Is refType |o#0@@4| Tclass._System.object))) (= (_module.__default.upCast (Lit refType |o#0@@4|)) (Lit refType |o#0@@4|)))
 :weight 3
 :pattern ( (_module.__default.upCast (Lit refType |o#0@@4|)))
))))
(assert (forall (($h@@18 T@U) ($o@@18 T@U) ) (!  (=> (and ($IsGoodHeap $h@@18) (and (or (not (= $o@@18 null)) (not true)) (= (dtype $o@@18) Tclass._module.ArcAtomicIsize?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@18 $o@@18) _module.ArcAtomicIsize.data)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@18 $o@@18) _module.ArcAtomicIsize.data)))
)))
(assert (forall (($h@@19 T@U) ($o@@19 T@U) ) (!  (=> (and ($IsGoodHeap $h@@19) (and (or (not (= $o@@19 null)) (not true)) (= (dtype $o@@19) Tclass._module.WorkerMethod?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@19 $o@@19) _module.WorkerMethod.next__stmt)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@19 $o@@19) _module.WorkerMethod.next__stmt)))
)))
(assert (forall (($h@@20 T@U) ($o@@20 T@U) ) (!  (=> (and ($IsGoodHeap $h@@20) (and (or (not (= $o@@20 null)) (not true)) (= (dtype $o@@20) Tclass._module.WorkerMethod?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@20 $o@@20) _module.WorkerMethod.initial__value)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@20 $o@@20) _module.WorkerMethod.initial__value)))
)))
(assert (forall (($h@@21 T@U) ($o@@21 T@U) ) (!  (=> (and ($IsGoodHeap $h@@21) (and (or (not (= $o@@21 null)) (not true)) (= (dtype $o@@21) Tclass._module.WorkerMethod?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@21 $o@@21) _module.WorkerMethod.final__value)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@21 $o@@21) _module.WorkerMethod.final__value)))
)))
(assert (forall ((bx@@15 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@15 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@15)) bx@@15) ($Is SetType ($Unbox SetType bx@@15) (TSet t@@3))))
 :pattern ( ($IsBox bx@@15 (TSet t@@3)))
)))
(assert (forall (($o@@22 T@U) ) (!  (=> ($Is refType $o@@22 Tclass._module.ArcAtomicIsize?) ($Is refType $o@@22 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@22 Tclass._module.ArcAtomicIsize?))
)))
(assert (forall ((bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 Tclass._module.ArcAtomicIsize?) ($IsBox bx@@16 Tclass._module.Object?))
 :pattern ( ($IsBox bx@@16 Tclass._module.ArcAtomicIsize?))
)))
(assert (forall (($o@@23 T@U) ) (!  (=> ($Is refType $o@@23 Tclass._module.WorkerMethod?) ($Is refType $o@@23 Tclass._module.Object?))
 :pattern ( ($Is refType $o@@23 Tclass._module.WorkerMethod?))
)))
(assert (forall ((bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 Tclass._module.WorkerMethod?) ($IsBox bx@@17 Tclass._module.Object?))
 :pattern ( ($IsBox bx@@17 Tclass._module.WorkerMethod?))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.Universe?) Tagclass._module.Universe?))
(assert (= (TagFamily Tclass._module.Universe?) tytagFamily$Universe))
(assert (= (Tag Tclass._module.Object) Tagclass._module.Object))
(assert (= (TagFamily Tclass._module.Object) tytagFamily$Object))
(assert (= (Tag Tclass._module.Universe) Tagclass._module.Universe))
(assert (= (TagFamily Tclass._module.Universe) tytagFamily$Universe))
(assert (= (Tag Tclass._module.Object?) Tagclass._module.Object?))
(assert (= (TagFamily Tclass._module.Object?) tytagFamily$Object))
(assert (= (Tag Tclass._module.ArcAtomicIsize?) Tagclass._module.ArcAtomicIsize?))
(assert (= (TagFamily Tclass._module.ArcAtomicIsize?) tytagFamily$ArcAtomicIsize))
(assert (= (Tag Tclass._module.ArcAtomicIsize) Tagclass._module.ArcAtomicIsize))
(assert (= (TagFamily Tclass._module.ArcAtomicIsize) tytagFamily$ArcAtomicIsize))
(assert (= (Tag Tclass._module.WorkerMethod?) Tagclass._module.WorkerMethod?))
(assert (= (TagFamily Tclass._module.WorkerMethod?) tytagFamily$WorkerMethod))
(assert (= (Tag Tclass._module.WorkerMethod) Tagclass._module.WorkerMethod))
(assert (= (TagFamily Tclass._module.WorkerMethod) tytagFamily$WorkerMethod))
(assert (forall (($o@@24 T@U) ) (! (= ($Is refType $o@@24 Tclass._module.Universe?)  (or (= $o@@24 null) (implements$_module.Universe (dtype $o@@24))))
 :pattern ( ($Is refType $o@@24 Tclass._module.Universe?))
)))
(assert (forall (($o@@25 T@U) ) (! (= ($Is refType $o@@25 Tclass._module.Object?)  (or (= $o@@25 null) (implements$_module.Object (dtype $o@@25))))
 :pattern ( ($Is refType $o@@25 Tclass._module.Object?))
)))
(assert (forall (($h@@22 T@U) ($o@@26 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@22) (and (or (not (= $o@@26 null)) (not true)) ($Is refType $o@@26 Tclass._module.Universe?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@22 $o@@26) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@22 $o@@26) _module.Universe.content)) (TSet Tclass._module.Object) $h@@22))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@22 $o@@26) _module.Universe.content)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@3 T@U) (this@@2 T@U) ) (!  (=> (or (|_module.ArcAtomicIsize.i#canCall| $Heap@@3 this@@2) (and (< 4 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@3) (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 Tclass._module.ArcAtomicIsize) ($IsAlloc refType this@@2 Tclass._module.ArcAtomicIsize $Heap@@3)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.Object.i0#canCall| $Heap@@3 this@@2)) (= (_module.ArcAtomicIsize.i $Heap@@3 this@@2)  (and true (_module.Object.i0 $Heap@@3 this@@2)))))
 :pattern ( (_module.ArcAtomicIsize.i $Heap@@3 this@@2) ($IsGoodHeap $Heap@@3))
))))
(assert (forall (($h@@23 T@U) ($o@@27 T@U) ) (!  (=> (and ($IsGoodHeap $h@@23) (and (or (not (= $o@@27 null)) (not true)) ($Is refType $o@@27 Tclass._module.Universe?))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@23 $o@@27) _module.Universe.content)) (TSet Tclass._module.Object)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@23 $o@@27) _module.Universe.content)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert (forall ((h@@2 T@U) (v@@4 T@U) ) (! ($IsAlloc boolType v@@4 TBool h@@2)
 :pattern ( ($IsAlloc boolType v@@4 TBool h@@2))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is boolType v@@6 TBool)
 :pattern ( ($Is boolType v@@6 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@@4 () T@U)
(declare-fun this@@3 () T@U)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun |b$reqreads#1@1| () Bool)
(declare-fun |b$reqreads#2@1| () Bool)
(declare-fun |b$reqreads#3@1| () Bool)
(declare-fun |b$reqreads#4@1| () Bool)
(declare-fun |b$reqreads#5@1| () Bool)
(declare-fun |b$reqreads#6@1| () Bool)
(declare-fun |b$reqreads#7@1| () Bool)
(declare-fun |b$reqreads#8@1| () Bool)
(declare-fun |b$reqreads#9@1| () Bool)
(declare-fun |b$reqreads#10@1| () Bool)
(declare-fun |b$reqreads#11@1| () Bool)
(declare-fun |b$reqreads#12@1| () Bool)
(declare-fun |b$reqreads#13@1| () Bool)
(declare-fun |b$reqreads#14@1| () Bool)
(declare-fun |b$reqreads#15@1| () Bool)
(declare-fun |b$reqreads#10@0| () Bool)
(declare-fun |b$reqreads#11@0| () Bool)
(declare-fun |b$reqreads#12@0| () Bool)
(declare-fun |b$reqreads#13@0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun |b$reqreads#14@0| () Bool)
(declare-fun |b$reqreads#15@0| () Bool)
(declare-fun |b$reqreads#6@0| () Bool)
(declare-fun |b$reqreads#7@0| () Bool)
(declare-fun |b$reqreads#8@0| () Bool)
(declare-fun |b$reqreads#9@0| () Bool)
(declare-fun |b$reqreads#4@0| () Bool)
(declare-fun |b$reqreads#5@0| () Bool)
(declare-fun |b$reqreads#3@0| () Bool)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun |b$reqreads#2@0| () Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 43) (let ((anon17_correct  (=> (= (_module.WorkerMethod.i $Heap@@4 this@@3)  (and (and (and (and (and (_module.Object.i0 $Heap@@4 this@@3) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4)))) (= (_module.Object.universe this@@3) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))))) (_module.ArcAtomicIsize.i $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)))) (=> (> (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) 1) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))) _module.ArcAtomicIsize.data)))))) (=> (> (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) 2) (and (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.final__value)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.final__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))) _module.ArcAtomicIsize.data)))))))) (=> (and (and (|_module.Object.i0#canCall| $Heap@@4 this@@3) (=> (_module.Object.i0 $Heap@@4 this@@3) (=> (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4))) (=> (= (_module.Object.universe this@@3) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)))) (|_module.ArcAtomicIsize.i#canCall| $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))))))) ($Is boolType (bool_2_U (_module.WorkerMethod.i $Heap@@4 this@@3)) TBool)) (and (=> (= (ControlFlow 0 3) (- 0 18)) |b$reqreads#0@0|) (=> |b$reqreads#0@0| (and (=> (= (ControlFlow 0 3) (- 0 17)) |b$reqreads#1@1|) (=> |b$reqreads#1@1| (and (=> (= (ControlFlow 0 3) (- 0 16)) |b$reqreads#2@1|) (=> |b$reqreads#2@1| (and (=> (= (ControlFlow 0 3) (- 0 15)) |b$reqreads#3@1|) (=> |b$reqreads#3@1| (and (=> (= (ControlFlow 0 3) (- 0 14)) |b$reqreads#4@1|) (=> |b$reqreads#4@1| (and (=> (= (ControlFlow 0 3) (- 0 13)) |b$reqreads#5@1|) (=> |b$reqreads#5@1| (and (=> (= (ControlFlow 0 3) (- 0 12)) |b$reqreads#6@1|) (=> |b$reqreads#6@1| (and (=> (= (ControlFlow 0 3) (- 0 11)) |b$reqreads#7@1|) (=> |b$reqreads#7@1| (and (=> (= (ControlFlow 0 3) (- 0 10)) |b$reqreads#8@1|) (=> |b$reqreads#8@1| (and (=> (= (ControlFlow 0 3) (- 0 9)) |b$reqreads#9@1|) (=> |b$reqreads#9@1| (and (=> (= (ControlFlow 0 3) (- 0 8)) |b$reqreads#10@1|) (=> |b$reqreads#10@1| (and (=> (= (ControlFlow 0 3) (- 0 7)) |b$reqreads#11@1|) (=> |b$reqreads#11@1| (and (=> (= (ControlFlow 0 3) (- 0 6)) |b$reqreads#12@1|) (=> |b$reqreads#12@1| (and (=> (= (ControlFlow 0 3) (- 0 5)) |b$reqreads#13@1|) (=> |b$reqreads#13@1| (and (=> (= (ControlFlow 0 3) (- 0 4)) |b$reqreads#14@1|) (=> |b$reqreads#14@1| (=> (= (ControlFlow 0 3) (- 0 2)) |b$reqreads#15@1|)))))))))))))))))))))))))))))))))))
(let ((anon28_Else_correct  (=> (and (and (and (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.final__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.initial__value)))) (= |b$reqreads#10@1| |b$reqreads#10@0|)) (and (= |b$reqreads#11@1| |b$reqreads#11@0|) (= |b$reqreads#12@1| |b$reqreads#12@0|))) (and (and (= |b$reqreads#13@1| true) (= |b$reqreads#14@1| true)) (and (= |b$reqreads#15@1| true) (= (ControlFlow 0 23) 3)))) anon17_correct)))
(let ((anon28_Then_correct  (=> (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.final__value)))) (=> (and (= |b$reqreads#13@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.final__value))) (= |b$reqreads#14@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.counter)))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) null)) (not true)) (=> (and (and (and (= |b$reqreads#15@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) _module.ArcAtomicIsize.data))) (= |b$reqreads#10@1| |b$reqreads#10@0|)) (and (= |b$reqreads#11@1| |b$reqreads#11@0|) (= |b$reqreads#12@1| |b$reqreads#12@0|))) (and (and (= |b$reqreads#13@1| |b$reqreads#13@0|) (= |b$reqreads#14@1| |b$reqreads#14@0|)) (and (= |b$reqreads#15@1| |b$reqreads#15@0|) (= (ControlFlow 0 21) 3)))) anon17_correct)))))))
(let ((anon27_Then_correct  (=> (> (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) 2) (=> (and (= |b$reqreads#11@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.initial__value))) (= |b$reqreads#12@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.final__value)))) (and (=> (= (ControlFlow 0 24) 21) anon28_Then_correct) (=> (= (ControlFlow 0 24) 23) anon28_Else_correct))))))
(let ((anon27_Else_correct  (=> (and (and (and (>= 2 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (= |b$reqreads#10@1| |b$reqreads#10@0|)) (and (= |b$reqreads#11@1| true) (= |b$reqreads#12@1| true))) (and (and (= |b$reqreads#13@1| true) (= |b$reqreads#14@1| true)) (and (= |b$reqreads#15@1| true) (= (ControlFlow 0 20) 3)))) anon17_correct)))
(let ((anon26_Then_correct  (=> (and (and (and (and (and (_module.Object.i0 $Heap@@4 this@@3) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4)))) (= (_module.Object.universe this@@3) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))))) (_module.ArcAtomicIsize.i $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)))) (=> (> (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) 1) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))) _module.ArcAtomicIsize.data)))))) (= |b$reqreads#10@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.next__stmt)))) (and (=> (= (ControlFlow 0 25) 24) anon27_Then_correct) (=> (= (ControlFlow 0 25) 20) anon27_Else_correct)))))
(let ((anon26_Else_correct  (=> (and (and (and (not (and (and (and (and (_module.Object.i0 $Heap@@4 this@@3) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4)))) (= (_module.Object.universe this@@3) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))))) (_module.ArcAtomicIsize.i $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)))) (=> (> (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) 1) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.initial__value))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))) _module.ArcAtomicIsize.data))))))) (= |b$reqreads#10@1| true)) (and (= |b$reqreads#11@1| true) (= |b$reqreads#12@1| true))) (and (and (= |b$reqreads#13@1| true) (= |b$reqreads#14@1| true)) (and (= |b$reqreads#15@1| true) (= (ControlFlow 0 19) 3)))) anon17_correct)))
(let ((anon25_Else_correct  (=> (>= 1 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (=> (and (and (= |b$reqreads#6@1| |b$reqreads#6@0|) (= |b$reqreads#7@1| true)) (and (= |b$reqreads#8@1| true) (= |b$reqreads#9@1| true))) (and (=> (= (ControlFlow 0 29) 25) anon26_Then_correct) (=> (= (ControlFlow 0 29) 19) anon26_Else_correct))))))
(let ((anon25_Then_correct  (=> (> (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) 1) (=> (and (= |b$reqreads#7@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.initial__value))) (= |b$reqreads#8@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.counter)))) (and (=> (= (ControlFlow 0 27) (- 0 28)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) null)) (not true)) (=> (= |b$reqreads#9@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) _module.ArcAtomicIsize.data))) (=> (and (and (= |b$reqreads#6@1| |b$reqreads#6@0|) (= |b$reqreads#7@1| |b$reqreads#7@0|)) (and (= |b$reqreads#8@1| |b$reqreads#8@0|) (= |b$reqreads#9@1| |b$reqreads#9@0|))) (and (=> (= (ControlFlow 0 27) 25) anon26_Then_correct) (=> (= (ControlFlow 0 27) 19) anon26_Else_correct))))))))))
(let ((anon24_Then_correct  (=> (and (and (and (and (_module.Object.i0 $Heap@@4 this@@3) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4)))) (= (_module.Object.universe this@@3) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))))) (_module.ArcAtomicIsize.i $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)))) (= |b$reqreads#6@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.next__stmt)))) (and (=> (= (ControlFlow 0 30) 27) anon25_Then_correct) (=> (= (ControlFlow 0 30) 29) anon25_Else_correct)))))
(let ((anon24_Else_correct  (=> (not (and (and (and (_module.Object.i0 $Heap@@4 this@@3) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4)))) (= (_module.Object.universe this@@3) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))))) (_module.ArcAtomicIsize.i $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))))) (=> (and (and (= |b$reqreads#6@1| true) (= |b$reqreads#7@1| true)) (and (= |b$reqreads#8@1| true) (= |b$reqreads#9@1| true))) (and (=> (= (ControlFlow 0 26) 25) anon26_Then_correct) (=> (= (ControlFlow 0 26) 19) anon26_Else_correct))))))
(let ((anon23_Else_correct  (=> (not (and (and (_module.Object.i0 $Heap@@4 this@@3) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4)))) (= (_module.Object.universe this@@3) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)))))) (=> (and (= |b$reqreads#4@1| true) (= |b$reqreads#5@1| true)) (and (=> (= (ControlFlow 0 33) 30) anon24_Then_correct) (=> (= (ControlFlow 0 33) 26) anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> (and (and (and (_module.Object.i0 $Heap@@4 this@@3) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4)))) (= (_module.Object.universe this@@3) (_module.Object.universe ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter))))) (= |b$reqreads#4@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.counter)))) (and (=> (= (ControlFlow 0 31) (- 0 32)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) null)) (not true)) (=> ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter) Tclass._module.ArcAtomicIsize? $Heap@@4) (=> (and (and (= |b$reqreads#5@0| (forall (($o@@28 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@28 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 $o@@28) alloc)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 $o@@28) alloc)))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@28 $f@@0))))) (|_module.ArcAtomicIsize.i#canCall| $Heap@@4 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)))) (and (= |b$reqreads#4@1| |b$reqreads#4@0|) (= |b$reqreads#5@1| |b$reqreads#5@0|))) (and (=> (= (ControlFlow 0 31) 30) anon24_Then_correct) (=> (= (ControlFlow 0 31) 26) anon24_Else_correct)))))))))
(let ((anon22_Else_correct  (=> (and (not (and (_module.Object.i0 $Heap@@4 this@@3) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4))))) (= |b$reqreads#3@1| true)) (and (=> (= (ControlFlow 0 36) 31) anon23_Then_correct) (=> (= (ControlFlow 0 36) 33) anon23_Else_correct)))))
(let ((anon22_Then_correct  (=> (and (and (_module.Object.i0 $Heap@@4 this@@3) (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 4)))) (= |b$reqreads#3@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.counter)))) (and (=> (= (ControlFlow 0 34) (- 0 35)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.counter)) null)) (not true)) (=> (= |b$reqreads#3@1| |b$reqreads#3@0|) (and (=> (= (ControlFlow 0 34) 31) anon23_Then_correct) (=> (= (ControlFlow 0 34) 33) anon23_Else_correct))))))))
(let ((anon21_Else_correct  (=> (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt))) (LitInt 1)) (=> (and (= |b$reqreads#1@1| |b$reqreads#1@0|) (= |b$reqreads#2@1| true)) (and (=> (= (ControlFlow 0 39) 34) anon22_Then_correct) (=> (= (ControlFlow 0 39) 36) anon22_Else_correct))))))
(let ((anon21_Then_correct  (=> (and (and (<= (LitInt 1) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 this@@3) _module.WorkerMethod.next__stmt)))) (= |b$reqreads#2@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.next__stmt)))) (and (= |b$reqreads#1@1| |b$reqreads#1@0|) (= |b$reqreads#2@1| |b$reqreads#2@0|))) (and (=> (= (ControlFlow 0 38) 34) anon22_Then_correct) (=> (= (ControlFlow 0 38) 36) anon22_Else_correct)))))
(let ((anon20_Then_correct  (=> (and (_module.Object.i0 $Heap@@4 this@@3) (= |b$reqreads#1@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@3 _module.WorkerMethod.next__stmt)))) (and (=> (= (ControlFlow 0 40) 38) anon21_Then_correct) (=> (= (ControlFlow 0 40) 39) anon21_Else_correct)))))
(let ((anon20_Else_correct  (=> (not (_module.Object.i0 $Heap@@4 this@@3)) (=> (and (= |b$reqreads#1@1| true) (= |b$reqreads#2@1| true)) (and (=> (= (ControlFlow 0 37) 34) anon22_Then_correct) (=> (= (ControlFlow 0 37) 36) anon22_Else_correct))))))
(let ((anon19_Else_correct  (=> ($IsAllocBox ($Box refType this@@3) Tclass._module.Object? $Heap@@4) (=> (and (= |b$reqreads#0@0| (forall (($o@@29 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@29 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 $o@@29) alloc)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 $o@@29) alloc)))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@29 $f@@1))))) (|_module.Object.i0#canCall| $Heap@@4 this@@3)) (and (=> (= (ControlFlow 0 41) 40) anon20_Then_correct) (=> (= (ControlFlow 0 41) 37) anon20_Else_correct))))))
(let ((anon19_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#1| null $Heap@@4 alloc $Heap@@4 alloc)) (and (=> (= (ControlFlow 0 42) 1) anon19_Then_correct) (=> (= (ControlFlow 0 42) 41) anon19_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@4) ($IsHeapAnchor $Heap@@4)) (=> (and (and (or (not (= this@@3 null)) (not true)) (and ($Is refType this@@3 Tclass._module.WorkerMethod) ($IsAlloc refType this@@3 Tclass._module.WorkerMethod $Heap@@4))) (and (= 5 $FunctionContextHeight) (= (ControlFlow 0 43) 42))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
