(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.uint32 () T@U)
(declare-fun Tagclass._module.MyClass () T@U)
(declare-fun Tagclass._module.MyClass? () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$MyClass () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.uint32 () T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun refType () T@T)
(declare-fun Tclass._module.MyClass? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.MyClass () T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.uint32 Tagclass._module.MyClass Tagclass._module.MyClass? |tytagFamily$_tuple#2| tytagFamily$uint32 tytagFamily$MyClass)
)
(assert (forall ((a T@U) (b T@U) (y T@U) ) (!  (=> (|Set#IsMember| a y) (|Set#IsMember| (|Set#Union| a b) y))
 :pattern ( (|Set#Union| a b) (|Set#IsMember| a y))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@0) (|Set#IsMember| (|Set#Union| a@@0 b@@0) y@@0))
 :pattern ( (|Set#Union| a@@0 b@@0) (|Set#IsMember| b@@0 y@@0))
)))
(assert (forall ((|i#0| T@U) ($h T@U) ) (! ($IsAlloc intType |i#0| Tclass._module.uint32 $h)
 :pattern ( ($IsAlloc intType |i#0| Tclass._module.uint32 $h))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@1) (not (|Set#IsMember| (|Set#Difference| a@@1 b@@1) y@@1)))
 :pattern ( (|Set#Difference| a@@1 b@@1) (|Set#IsMember| b@@1 y@@1))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor refType) 4))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.MyClass?)  (or (= $o null) (= (dtype $o) Tclass._module.MyClass?)))
 :pattern ( ($Is refType $o Tclass._module.MyClass?))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2) (|Set#Union| a@@2 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o)  (and (|Set#IsMember| a@@3 o) (not (|Set#IsMember| b@@3 o))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.MyClass $h@@0) ($IsAlloc refType |c#0| Tclass._module.MyClass? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.MyClass $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.MyClass? $h@@0))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.MyClass? $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.MyClass? $h@@1))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@2)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@2) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@2))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@2))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@4 b@@4) (forall ((o@@1 T@U) ) (!  (or (not (|Set#IsMember| a@@4 o@@1)) (not (|Set#IsMember| b@@4 o@@1)))
 :pattern ( (|Set#IsMember| a@@4 o@@1))
 :pattern ( (|Set#IsMember| b@@4 o@@1))
)))
 :pattern ( (|Set#Disjoint| a@@4 b@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (= (Ctor SetType) 8))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((s T@U) (v@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s v@@0)) (+ 1 (|Seq#Length| s)))
 :pattern ( (|Seq#Build| s v@@0))
)))
(assert (forall ((v@@1 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@1) t h@@0) ($IsAlloc T@@1 v@@1 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@1) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@2 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@2 t@@1 h@@2) ($IsAlloc T@@2 v@@2 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@2 t@@1 h@@2))
)))
(assert (forall ((m@@1 T@U) (n T@U) (u T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| (|Map#Merge| m@@1 n)) u) (and (=> (not (|Set#IsMember| (|Map#Domain| n) u)) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Merge| m@@1 n)) u) (MapType0Select BoxType BoxType (|Map#Elements| m@@1) u))) (=> (|Set#IsMember| (|Map#Domain| n) u) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Merge| m@@1 n)) u) (MapType0Select BoxType BoxType (|Map#Elements| n) u)))))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Merge| m@@1 n)) u))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.uint32) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._module.uint32)))
 :pattern ( ($IsBox bx@@1 Tclass._module.uint32))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.MyClass) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.MyClass)))
 :pattern ( ($IsBox bx@@2 Tclass._module.MyClass))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.MyClass?) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.MyClass?)))
 :pattern ( ($IsBox bx@@3 Tclass._module.MyClass?))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.MyClass)  (and ($Is refType |c#0@@0| Tclass._module.MyClass?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.MyClass))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.MyClass?))
)))
(assert (forall ((m@@2 T@U) (|m'| T@U) ) (! (= (|Map#Equal| m@@2 |m'|)  (and (forall ((u@@0 T@U) ) (= (|Set#IsMember| (|Map#Domain| m@@2) u@@0) (|Set#IsMember| (|Map#Domain| |m'|) u@@0))) (forall ((u@@1 T@U) )  (=> (|Set#IsMember| (|Map#Domain| m@@2) u@@1) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@2) u@@1) (MapType0Select BoxType BoxType (|Map#Elements| |m'|) u@@1))))))
 :pattern ( (|Map#Equal| m@@2 |m'|))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) (o@@2 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@5 b@@5) o@@2)  (or (|Set#IsMember| a@@5 o@@2) (|Set#IsMember| b@@5 o@@2)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@5 b@@5) o@@2))
)))
(assert (forall ((a@@6 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@6 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@6 b@@6) a@@6) b@@6) (= (|Set#Difference| (|Set#Union| a@@6 b@@6) b@@6) a@@6)))
 :pattern ( (|Set#Union| a@@6 b@@6))
)))
(assert (forall ((m@@3 T@U) (|m'@@0| T@U) ) (!  (=> (|Map#Equal| m@@3 |m'@@0|) (= m@@3 |m'@@0|))
 :pattern ( (|Map#Equal| m@@3 |m'@@0|))
)))
(assert (forall ((a@@7 T@U) (b@@7 T@U) (c T@U) ) (!  (=> (or (not (= a@@7 c)) (not true)) (=> (and ($HeapSucc a@@7 b@@7) ($HeapSucc b@@7 c)) ($HeapSucc a@@7 c)))
 :pattern ( ($HeapSucc a@@7 b@@7) ($HeapSucc b@@7 c))
)))
(assert (forall ((v@@3 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@3) t@@2) ($Is T@@3 v@@3 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@3) t@@2))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Seq#Length| s@@0))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@4 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@4 (TSet t0@@1) h@@3) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v@@4 bx@@4) ($IsAllocBox bx@@4 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@4 bx@@4))
)))
 :pattern ( ($IsAlloc SetType v@@4 (TSet t0@@1) h@@3))
)))
(assert (forall ((t@@3 T@U) (u@@2 T@U) ) (! (= (Inv0_TMap (TMap t@@3 u@@2)) t@@3)
 :pattern ( (TMap t@@3 u@@2))
)))
(assert (forall ((t@@4 T@U) (u@@3 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@3)) u@@3)
 :pattern ( (TMap t@@4 u@@3))
)))
(assert (forall ((t@@5 T@U) (u@@4 T@U) ) (! (= (Tag (TMap t@@5 u@@4)) TagMap)
 :pattern ( (TMap t@@5 u@@4))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSet (TSet t@@6)) t@@6)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSet t@@7)) TagSet)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (= (Ctor MapType) 9))
(assert (forall ((v@@5 T@U) (t0@@2 T@U) (t1@@0 T@U) (h@@4 T@U) ) (! (= ($IsAlloc MapType v@@5 (TMap t0@@2 t1@@0) h@@4) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@5) bx@@5) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@5) bx@@5) t1@@0 h@@4) ($IsAllocBox bx@@5 t0@@2 h@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@5) bx@@5))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@5) bx@@5))
)))
 :pattern ( ($IsAlloc MapType v@@5 (TMap t0@@2 t1@@0) h@@4))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((a@@8 T@U) (b@@8 T@U) ) (! (= (|Set#Union| a@@8 (|Set#Union| a@@8 b@@8)) (|Set#Union| a@@8 b@@8))
 :pattern ( (|Set#Union| a@@8 (|Set#Union| a@@8 b@@8)))
)))
(assert (forall ((u@@5 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@5))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@5))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (or (and (<= 0 n@@0) (< n@@0 55296)) (and (<= 57344 n@@0) (< n@@0 1114112))) (= (|char#ToInt| (|char#FromInt| n@@0)) n@@0))
 :pattern ( (|char#FromInt| n@@0))
)))
(assert (forall ((bx@@6 T@U) (s@@1 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@6 (TMap s@@1 t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@6)) bx@@6) ($Is MapType ($Unbox MapType bx@@6) (TMap s@@1 t@@8))))
 :pattern ( ($IsBox bx@@6 (TMap s@@1 t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@7)) bx@@7) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@7) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@7 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (forall ((t0@@3 T@T) (t1@@1 T@T) (t2 T@T) (val@@1 T@U) (m@@4 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@1 t2 (MapType1Store t0@@3 t1@@1 t2 m@@4 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@5 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@5 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@5 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@6 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@6 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@6 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((s@@2 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@2 val@@4)) s@@2) (= (|Seq#Build_inv1| (|Seq#Build| s@@2 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@2 val@@4))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@7 T@U) ) (!  (or (= m@@7 |Map#Empty|) (exists ((k@@2 T@U) ) (|Set#IsMember| (|Map#Domain| m@@7) k@@2)))
 :pattern ( (|Map#Domain| m@@7))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |Map#Empty|) (exists ((v@@6 T@U) ) (|Set#IsMember| (|Map#Values| m@@8) v@@6)))
 :pattern ( (|Map#Values| m@@8))
)))
(assert (forall ((m@@9 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@9) item)  (and (|Set#IsMember| (|Map#Domain| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@9) item))
)))
(assert (forall ((m@@10 T@U) (v@@7 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@10) v@@7) (exists ((u@@6 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@10) u@@6) (= v@@7 (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@6)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@10) u@@6))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@6))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@10) v@@7))
)))
(assert (forall ((m@@11 T@U) (u@@7 T@U) (|u'| T@U) (v@@8 T@U) ) (!  (and (=> (= |u'| u@@7) (and (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@11 u@@7 v@@8)) |u'|) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@11 u@@7 v@@8)) |u'|) v@@8))) (=> (or (not (= |u'| u@@7)) (not true)) (and (= (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@11 u@@7 v@@8)) |u'|) (|Set#IsMember| (|Map#Domain| m@@11) |u'|)) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@11 u@@7 v@@8)) |u'|) (MapType0Select BoxType BoxType (|Map#Elements| m@@11) |u'|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@11 u@@7 v@@8)) |u'|))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@11 u@@7 v@@8)) |u'|))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@8 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@8 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@8)) bx@@8) ($Is SetType ($Unbox SetType bx@@8) (TSet t@@9))))
 :pattern ( ($IsBox bx@@8 (TSet t@@9)))
)))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert (forall ((v@@9 T@U) (t0@@4 T@U) (t1@@2 T@U) ) (! (= ($Is MapType v@@9 (TMap t0@@4 t1@@2)) (forall ((bx@@9 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@9) bx@@9) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@9) bx@@9) t1@@2) ($IsBox bx@@9 t0@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@9) bx@@9))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@9) bx@@9))
)))
 :pattern ( ($Is MapType v@@9 (TMap t0@@4 t1@@2)))
)))
(assert (= (Tag Tclass._module.uint32) Tagclass._module.uint32))
(assert (= (TagFamily Tclass._module.uint32) tytagFamily$uint32))
(assert (= (Tag Tclass._module.MyClass) Tagclass._module.MyClass))
(assert (= (TagFamily Tclass._module.MyClass) tytagFamily$MyClass))
(assert (= (Tag Tclass._module.MyClass?) Tagclass._module.MyClass?))
(assert (= (TagFamily Tclass._module.MyClass?) tytagFamily$MyClass))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@3))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@3))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@3))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@4)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@4))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@4))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@4))
)))
(assert (forall ((|i#0@@0| T@U) ) (! (= ($Is intType |i#0@@0| Tclass._module.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@0|)) (< (U_2_int |i#0@@0|) 4294967296)))
 :pattern ( ($Is intType |i#0@@0| Tclass._module.uint32))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((m@@12 T@U) (n@@1 T@U) ) (! (= (|Map#Domain| (|Map#Merge| m@@12 n@@1)) (|Set#Union| (|Map#Domain| m@@12) (|Map#Domain| n@@1)))
 :pattern ( (|Map#Domain| (|Map#Merge| m@@12 n@@1)))
)))
(assert (forall ((s@@3 T@U) ) (!  (=> (= (|Seq#Length| s@@3) 0) (= s@@3 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@3))
)))
(assert (forall ((m@@13 T@U) ) (!  (or (= m@@13 |Map#Empty|) (exists ((k@@3 T@U) (v@@10 T@U) ) (|Set#IsMember| (|Map#Items| m@@13) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@3 v@@10)))))
 :pattern ( (|Map#Items| m@@13))
)))
(assert (forall ((v@@11 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (!  (=> ($Is MapType v@@11 (TMap t0@@5 t1@@3)) (and (and ($Is SetType (|Map#Domain| v@@11) (TSet t0@@5)) ($Is SetType (|Map#Values| v@@11) (TSet t1@@3))) ($Is SetType (|Map#Items| v@@11) (TSet (Tclass._System.Tuple2 t0@@5 t1@@3)))))
 :pattern ( ($Is MapType v@@11 (TMap t0@@5 t1@@3)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun |name##0@0| () T@U)
(declare-fun SeqType () T@T)
(declare-fun charType () T@T)
(declare-fun call2formal@this () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun call2formal@this@0 () T@U)
(declare-fun |name##1@0| () T@U)
(declare-fun call2formal@this@@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun call2formal@this@0@@0 () T@U)
(declare-fun |name##2@0| () T@U)
(declare-fun call2formal@this@@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun call2formal@this@0@@1 () T@U)
(declare-fun |name##3@0| () T@U)
(declare-fun call2formal@this@@2 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun call2formal@this@0@@2 () T@U)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |newtype$check#2@0| () Int)
(declare-fun |newtype$check#3@0| () Int)
(declare-fun |newtype$check#4@0| () Int)
(declare-fun |newtype$check#5@0| () Int)
(declare-fun |m#0@0| () T@U)
(declare-fun |newtype$check#6@0| () Int)
(declare-fun |newtype$check#7@0| () Int)
(declare-fun |newtype$check#8@0| () Int)
(declare-fun |newtype$check#9@0| () Int)
(declare-fun |n#0@0| () T@U)
(declare-fun |newtype$check#10@0| () Int)
(declare-fun |newtype$check#11@0| () Int)
(declare-fun |o#0@0| () T@U)
(declare-fun |newtype$check#12@0| () Int)
(declare-fun |newtype$check#13@0| () Int)
(declare-fun |newtype$check#14@0| () Int)
(declare-fun |o'#0@0| () T@U)
(declare-fun |newtype$check#15@0| () Int)
(declare-fun |newtype$check#16@0| () Int)
(declare-fun |newtype$check#17@0| () Int)
(declare-fun |o''#0@0| () T@U)
(declare-fun |newtype$check#18@0| () Int)
(declare-fun |newtype$check#19@0| () Int)
(declare-fun |o3#0@0| () T@U)
(declare-fun |$rhs#0@0| () Bool)
(declare-fun |$rhs#1@0| () Bool)
(declare-fun |$rhs#2@0| () Bool)
(declare-fun |p#0@0| () T@U)
(declare-fun |q#0@0| () T@U)
(declare-fun |r#0@0| () T@U)
(declare-fun |s#0@0| () T@U)
(declare-fun |$rhs#3@0| () Bool)
(declare-fun |$rhs#4@0| () Bool)
(declare-fun |$rhs#5@0| () Bool)
(declare-fun |$rhs#6@0| () Bool)
(declare-fun |call8formal@p#0| () T@U)
(declare-fun call0formal@_module._default.GenericMap$K () T@U)
(declare-fun call1formal@_module._default.GenericMap$V () T@U)
(declare-fun |call9formal@q#0| () T@U)
(declare-fun |call10formal@r#0| () T@U)
(declare-fun call0formal@_module._default.GenericMap$K@0 () T@U)
(declare-fun call1formal@_module._default.GenericMap$V@0 () T@U)
(declare-fun |call5formal@a#0@0| () T@U)
(declare-fun |call6formal@b#0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |call8formal@p#0@0| () T@U)
(declare-fun |call9formal@q#0@0| () T@U)
(declare-fun |call10formal@r#0@0| () T@U)
(declare-fun |defass#a#0| () Bool)
(declare-fun |a#0| () T@U)
(declare-fun |defass#b#0| () Bool)
(declare-fun |b#0| () T@U)
(declare-fun |c#0@@1| () T@U)
(declare-fun |defass#d#0| () Bool)
(declare-fun |d#0| () T@U)
(declare-fun |defass#e#0| () Bool)
(declare-fun |e#0| () T@U)
(declare-fun |m#0| () T@U)
(declare-fun |n#0| () T@U)
(declare-fun |o#0| () T@U)
(declare-fun |o'#0| () T@U)
(declare-fun |o''#0| () T@U)
(declare-fun |o3#0| () T@U)
(declare-fun |p#0| () T@U)
(declare-fun |q#0| () T@U)
(declare-fun |r#0| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(assert  (and (= (Ctor SeqType) 10) (= (Ctor charType) 11)))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 68) (let ((anon0_correct  (=> (and (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |name##0@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 114))) ($Box charType (|char#FromInt| 111))) ($Box charType (|char#FromInt| 110))) ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 100)))))) (and (or (not (= call2formal@this null)) (not true)) (and ($Is refType call2formal@this Tclass._module.MyClass) ($IsAlloc refType call2formal@this Tclass._module.MyClass $Heap)))) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (or (not (= call2formal@this@0 null)) (not true)) (and ($Is refType call2formal@this@0 Tclass._module.MyClass) ($IsAlloc refType call2formal@this@0 Tclass._module.MyClass $Heap@0)))) (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap call2formal@this@0) alloc)))) (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@2))
))) (and ($HeapSucc $Heap $Heap@0) (= |name##1@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 119))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 110))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 121)))))))) (=> (and (and (and (and (and (or (not (= call2formal@this@@0 null)) (not true)) (and ($Is refType call2formal@this@@0 Tclass._module.MyClass) ($IsAlloc refType call2formal@this@@0 Tclass._module.MyClass $Heap))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (or (not (= call2formal@this@0@@0 null)) (not true)) (and ($Is refType call2formal@this@0@@0 Tclass._module.MyClass) ($IsAlloc refType call2formal@this@0@@0 Tclass._module.MyClass $Heap@1))) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0@@0) alloc)))) (forall (($o@@3 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@3) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@3) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@3)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@3))
))))) (and (and (and ($HeapSucc $Heap@0 $Heap@1) (= |name##2@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 106))) ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 99))) ($Box charType (|char#FromInt| 107)))))) (and (or (not (= call2formal@this@@1 null)) (not true)) (and ($Is refType call2formal@this@@1 Tclass._module.MyClass) ($IsAlloc refType call2formal@this@@1 Tclass._module.MyClass $Heap)))) (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (or (not (= call2formal@this@0@@1 null)) (not true)) (and ($Is refType call2formal@this@0@@1 Tclass._module.MyClass) ($IsAlloc refType call2formal@this@0@@1 Tclass._module.MyClass $Heap@2)))))) (and (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0@@1) alloc)))) (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@4)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@4))
))) (and ($HeapSucc $Heap@1 $Heap@2) (= |name##3@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 115))) ($Box charType (|char#FromInt| 105))) ($Box charType (|char#FromInt| 98))) ($Box charType (|char#FromInt| 121))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 97))))))) (and (and (or (not (= call2formal@this@@2 null)) (not true)) (and ($Is refType call2formal@this@@2 Tclass._module.MyClass) ($IsAlloc refType call2formal@this@@2 Tclass._module.MyClass $Heap))) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)))) (and (and (and (or (not (= call2formal@this@0@@2 null)) (not true)) (and ($Is refType call2formal@this@0@@2 Tclass._module.MyClass) ($IsAlloc refType call2formal@this@0@@2 Tclass._module.MyClass $Heap@3))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0@@2) alloc))))) (and (forall (($o@@5 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@5) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@5) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@5)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@5))
)) ($HeapSucc $Heap@2 $Heap@3))))) (and (=> (= (ControlFlow 0 2) (- 0 67)) true) (=> (= |newtype$check#1@0| (LitInt 0)) (and (=> (= (ControlFlow 0 2) (- 0 66)) (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 4294967296)) (=> (= |newtype$check#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 2) (- 0 65)) (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 64)) true) (=> (= |newtype$check#3@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 63)) (and (<= (LitInt 0) |newtype$check#3@0|) (< |newtype$check#3@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#3@0|) (< |newtype$check#3@0| 4294967296)) (=> (= |newtype$check#4@0| (LitInt 2)) (and (=> (= (ControlFlow 0 2) (- 0 62)) (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 61)) true) (=> (= |newtype$check#5@0| (LitInt 3)) (and (=> (= (ControlFlow 0 2) (- 0 60)) (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| 4294967296)) (=> (= |m#0@0| (|Map#Build| (|Map#Build| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0) ($Box intType (int_2_U (LitInt 0)))) ($Box refType call2formal@this@0@@0) ($Box intType (int_2_U (LitInt 1)))) ($Box refType null) ($Box intType (int_2_U (LitInt 2)))) ($Box refType call2formal@this@0@@1) ($Box intType (int_2_U (LitInt 3))))) (and (=> (= (ControlFlow 0 2) (- 0 59)) true) (=> (= |newtype$check#6@0| (LitInt 0)) (and (=> (= (ControlFlow 0 2) (- 0 58)) (and (<= (LitInt 0) |newtype$check#6@0|) (< |newtype$check#6@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#6@0|) (< |newtype$check#6@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 57)) true) (=> (= |newtype$check#7@0| (LitInt 10)) (and (=> (= (ControlFlow 0 2) (- 0 56)) (and (<= (LitInt 0) |newtype$check#7@0|) (< |newtype$check#7@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#7@0|) (< |newtype$check#7@0| 4294967296)) (=> (= |newtype$check#8@0| (LitInt 20)) (and (=> (= (ControlFlow 0 2) (- 0 55)) (and (<= (LitInt 0) |newtype$check#8@0|) (< |newtype$check#8@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#8@0|) (< |newtype$check#8@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 54)) true) (=> (= |newtype$check#9@0| (LitInt 4)) (and (=> (= (ControlFlow 0 2) (- 0 53)) (and (<= (LitInt 0) |newtype$check#9@0|) (< |newtype$check#9@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#9@0|) (< |newtype$check#9@0| 4294967296)) (=> (= |n#0@0| (|Map#Build| (|Map#Build| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0) ($Box intType (int_2_U (LitInt 0)))) ($Box refType call2formal@this@0@@0) ($Box intType (int_2_U (LitInt 10)))) ($Box refType null) ($Box intType (int_2_U (LitInt 20)))) ($Box refType call2formal@this@0@@2) ($Box intType (int_2_U (LitInt 4))))) (and (=> (= (ControlFlow 0 2) (- 0 52)) true) (=> (= |newtype$check#10@0| (LitInt 199)) (and (=> (= (ControlFlow 0 2) (- 0 51)) (and (<= (LitInt 0) |newtype$check#10@0|) (< |newtype$check#10@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#10@0|) (< |newtype$check#10@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 50)) true) (=> (= |newtype$check#11@0| (LitInt 198)) (and (=> (= (ControlFlow 0 2) (- 0 49)) (and (<= (LitInt 0) |newtype$check#11@0|) (< |newtype$check#11@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#11@0|) (< |newtype$check#11@0| 4294967296)) (=> (= |o#0@0| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box intType (int_2_U (LitInt 199)))) ($Box refType call2formal@this@0) ($Box intType (int_2_U (LitInt 198))))) (and (=> (= (ControlFlow 0 2) (- 0 48)) true) (=> (= |newtype$check#12@0| (LitInt 199)) (and (=> (= (ControlFlow 0 2) (- 0 47)) (and (<= (LitInt 0) |newtype$check#12@0|) (< |newtype$check#12@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#12@0|) (< |newtype$check#12@0| 4294967296)) (=> (= |newtype$check#13@0| (LitInt 55)) (and (=> (= (ControlFlow 0 2) (- 0 46)) (and (<= (LitInt 0) |newtype$check#13@0|) (< |newtype$check#13@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#13@0|) (< |newtype$check#13@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 45)) true) (=> (= |newtype$check#14@0| (LitInt 198)) (and (=> (= (ControlFlow 0 2) (- 0 44)) (and (<= (LitInt 0) |newtype$check#14@0|) (< |newtype$check#14@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#14@0|) (< |newtype$check#14@0| 4294967296)) (=> (= |o'#0@0| (|Map#Build| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box intType (int_2_U (LitInt 199)))) ($Box refType null) ($Box intType (int_2_U (LitInt 55)))) ($Box refType call2formal@this@0) ($Box intType (int_2_U (LitInt 198))))) (and (=> (= (ControlFlow 0 2) (- 0 43)) true) (=> (= |newtype$check#15@0| (LitInt 199)) (and (=> (= (ControlFlow 0 2) (- 0 42)) (and (<= (LitInt 0) |newtype$check#15@0|) (< |newtype$check#15@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#15@0|) (< |newtype$check#15@0| 4294967296)) (=> (= |newtype$check#16@0| (LitInt 56)) (and (=> (= (ControlFlow 0 2) (- 0 41)) (and (<= (LitInt 0) |newtype$check#16@0|) (< |newtype$check#16@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#16@0|) (< |newtype$check#16@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 40)) true) (=> (= |newtype$check#17@0| (LitInt 198)) (and (=> (= (ControlFlow 0 2) (- 0 39)) (and (<= (LitInt 0) |newtype$check#17@0|) (< |newtype$check#17@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#17@0|) (< |newtype$check#17@0| 4294967296)) (=> (and (= |o''#0@0| (|Map#Build| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box intType (int_2_U (LitInt 199)))) ($Box refType null) ($Box intType (int_2_U (LitInt 56)))) ($Box refType call2formal@this@0) ($Box intType (int_2_U (LitInt 198))))) (= |newtype$check#18@0| (LitInt 3))) (and (=> (= (ControlFlow 0 2) (- 0 38)) (and (<= (LitInt 0) |newtype$check#18@0|) (< |newtype$check#18@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#18@0|) (< |newtype$check#18@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 37)) true) (=> (= |newtype$check#19@0| (LitInt 16)) (and (=> (= (ControlFlow 0 2) (- 0 36)) (and (<= (LitInt 0) |newtype$check#19@0|) (< |newtype$check#19@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#19@0|) (< |newtype$check#19@0| 4294967296)) (=> (and (and (= |o3#0@0| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType null) ($Box intType (int_2_U (LitInt 3)))) ($Box refType call2formal@this@0@@1) ($Box intType (int_2_U (LitInt 16))))) (= |$rhs#0@0| (|Map#Equal| |o#0@0| |o'#0@0|))) (and (= |$rhs#1@0| (|Map#Equal| |o'#0@0| |o''#0@0|)) (= |$rhs#2@0| (|Map#Equal| |o'#0@0| |o'#0@0|)))) (=> (and (and (and (= |p#0@0| (|Map#Merge| |m#0@0| |n#0@0|)) (= |q#0@0| (|Map#Merge| |n#0@0| |o#0@0|))) (and (= |r#0@0| (|Map#Merge| |o#0@0| |m#0@0|)) (= |s#0@0| (|Map#Merge| |o3#0@0| |o#0@0|)))) (and (and (= |$rhs#3@0| (|Map#Equal| |p#0@0| (|Map#Merge| |n#0@0| |m#0@0|))) (= |$rhs#4@0| (|Map#Equal| |q#0@0| (|Map#Merge| |o#0@0| |n#0@0|)))) (and (= |$rhs#5@0| (|Map#Equal| |r#0@0| (|Map#Merge| |m#0@0| |o#0@0|))) (= |$rhs#6@0| (|Map#Equal| |s#0@0| (|Map#Merge| |o#0@0| |o3#0@0|)))))) (and (=> (= (ControlFlow 0 2) (- 0 35)) true) (and (=> (= (ControlFlow 0 2) (- 0 34)) (|Set#IsMember| (|Map#Domain| |p#0@0|) ($Box refType call2formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 33)) (|Set#IsMember| (|Map#Domain| |p#0@0|) ($Box refType null))) (and (=> (= (ControlFlow 0 2) (- 0 32)) true) (and (=> (= (ControlFlow 0 2) (- 0 31)) (|Set#IsMember| (|Map#Domain| |p#0@0|) ($Box refType call2formal@this@0@@2))) (and (=> (= (ControlFlow 0 2) (- 0 30)) true) (and (=> (= (ControlFlow 0 2) (- 0 29)) (|Set#IsMember| (|Map#Domain| |q#0@0|) ($Box refType call2formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 28)) (|Set#IsMember| (|Map#Domain| |q#0@0|) ($Box refType null))) (and (=> (= (ControlFlow 0 2) (- 0 27)) true) (and (=> (= (ControlFlow 0 2) (- 0 26)) (|Set#IsMember| (|Map#Domain| |q#0@0|) ($Box refType call2formal@this@0@@2))) (and (=> (= (ControlFlow 0 2) (- 0 25)) true) (and (=> (= (ControlFlow 0 2) (- 0 24)) (|Set#IsMember| (|Map#Domain| |r#0@0|) ($Box refType call2formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 23)) (|Set#IsMember| (|Map#Domain| |r#0@0|) ($Box refType null))) (and (=> (= (ControlFlow 0 2) (- 0 22)) true) (and (=> (= (ControlFlow 0 2) (- 0 21)) true) (and (=> (= (ControlFlow 0 2) (- 0 20)) true) (=> (and ($Is MapType |call8formal@p#0| (TMap call0formal@_module._default.GenericMap$K call1formal@_module._default.GenericMap$V)) ($IsAlloc MapType |call8formal@p#0| (TMap call0formal@_module._default.GenericMap$K call1formal@_module._default.GenericMap$V) $Heap)) (=> (and (and (and ($Is MapType |call9formal@q#0| (TMap call0formal@_module._default.GenericMap$K call1formal@_module._default.GenericMap$V)) ($IsAlloc MapType |call9formal@q#0| (TMap call0formal@_module._default.GenericMap$K call1formal@_module._default.GenericMap$V) $Heap)) (and ($Is MapType |call10formal@r#0| (TMap call0formal@_module._default.GenericMap$K call1formal@_module._default.GenericMap$V)) ($IsAlloc MapType |call10formal@r#0| (TMap call0formal@_module._default.GenericMap$K call1formal@_module._default.GenericMap$V) $Heap))) (and (and (= call0formal@_module._default.GenericMap$K@0 Tclass._module.MyClass?) (= call1formal@_module._default.GenericMap$V@0 Tclass._module.uint32)) (and (= |call5formal@a#0@0| ($Box refType call2formal@this@0)) (= |call6formal@b#0@0| ($Box refType call2formal@this@0@@2))))) (and (=> (= (ControlFlow 0 2) (- 0 19)) (|Set#IsMember| (|Map#Domain| |m#0@0|) |call5formal@a#0@0|)) (=> (|Set#IsMember| (|Map#Domain| |m#0@0|) |call5formal@a#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 18)) (|Set#IsMember| (|Map#Domain| |n#0@0|) |call5formal@a#0@0|)) (=> (|Set#IsMember| (|Map#Domain| |n#0@0|) |call5formal@a#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 17)) (not (|Set#IsMember| (|Map#Domain| |m#0@0|) |call6formal@b#0@0|))) (=> (not (|Set#IsMember| (|Map#Domain| |m#0@0|) |call6formal@b#0@0|)) (and (=> (= (ControlFlow 0 2) (- 0 16)) (not (|Set#IsMember| (|Map#Domain| |o#0@0|) |call6formal@b#0@0|))) (=> (not (|Set#IsMember| (|Map#Domain| |o#0@0|) |call6formal@b#0@0|)) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and ($Is MapType |call8formal@p#0@0| (TMap call0formal@_module._default.GenericMap$K@0 call1formal@_module._default.GenericMap$V@0)) ($IsAlloc MapType |call8formal@p#0@0| (TMap call0formal@_module._default.GenericMap$K@0 call1formal@_module._default.GenericMap$V@0) $Heap@4)) (and ($Is MapType |call9formal@q#0@0| (TMap call0formal@_module._default.GenericMap$K@0 call1formal@_module._default.GenericMap$V@0)) ($IsAlloc MapType |call9formal@q#0@0| (TMap call0formal@_module._default.GenericMap$K@0 call1formal@_module._default.GenericMap$V@0) $Heap@4))) (=> (and (and (and ($Is MapType |call10formal@r#0@0| (TMap call0formal@_module._default.GenericMap$K@0 call1formal@_module._default.GenericMap$V@0)) ($IsAlloc MapType |call10formal@r#0@0| (TMap call0formal@_module._default.GenericMap$K@0 call1formal@_module._default.GenericMap$V@0) $Heap@4)) (|Map#Equal| |call8formal@p#0@0| (|Map#Merge| |m#0@0| |n#0@0|))) (and (and (|Map#Equal| |call9formal@q#0@0| (|Map#Merge| |n#0@0| |o#0@0|)) (|Map#Equal| |call10formal@r#0@0| (|Map#Merge| |o#0@0| |m#0@0|))) (and (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@6))
)) ($HeapSucc $Heap@3 $Heap@4)))) (and (=> (= (ControlFlow 0 2) (- 0 15)) true) (and (=> (= (ControlFlow 0 2) (- 0 14)) (|Set#IsMember| (|Map#Domain| |call8formal@p#0@0|) ($Box refType call2formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 13)) (|Set#IsMember| (|Map#Domain| |call8formal@p#0@0|) ($Box refType null))) (and (=> (= (ControlFlow 0 2) (- 0 12)) true) (and (=> (= (ControlFlow 0 2) (- 0 11)) (|Set#IsMember| (|Map#Domain| |call8formal@p#0@0|) ($Box refType call2formal@this@0@@2))) (and (=> (= (ControlFlow 0 2) (- 0 10)) true) (and (=> (= (ControlFlow 0 2) (- 0 9)) (|Set#IsMember| (|Map#Domain| |call9formal@q#0@0|) ($Box refType call2formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (|Set#IsMember| (|Map#Domain| |call9formal@q#0@0|) ($Box refType null))) (and (=> (= (ControlFlow 0 2) (- 0 7)) true) (and (=> (= (ControlFlow 0 2) (- 0 6)) (|Set#IsMember| (|Map#Domain| |call9formal@q#0@0|) ($Box refType call2formal@this@0@@2))) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (|Set#IsMember| (|Map#Domain| |call10formal@r#0@0|) ($Box refType call2formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (|Set#IsMember| (|Map#Domain| |call10formal@r#0@0|) ($Box refType null))) (=> (= (ControlFlow 0 2) (- 0 1)) true))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (=> |defass#a#0| (and ($Is refType |a#0| Tclass._module.MyClass) ($IsAlloc refType |a#0| Tclass._module.MyClass $Heap))) true) (and (=> |defass#b#0| (and ($Is refType |b#0| Tclass._module.MyClass) ($IsAlloc refType |b#0| Tclass._module.MyClass $Heap))) true)) (and (and ($Is refType |c#0@@1| Tclass._module.MyClass?) ($IsAlloc refType |c#0@@1| Tclass._module.MyClass? $Heap)) true)) (=> (and (and (and (and (=> |defass#d#0| (and ($Is refType |d#0| Tclass._module.MyClass) ($IsAlloc refType |d#0| Tclass._module.MyClass $Heap))) true) (and (=> |defass#e#0| (and ($Is refType |e#0| Tclass._module.MyClass) ($IsAlloc refType |e#0| Tclass._module.MyClass $Heap))) true)) (and (and ($Is MapType |m#0| (TMap Tclass._module.MyClass? Tclass._module.uint32)) ($IsAlloc MapType |m#0| (TMap Tclass._module.MyClass? Tclass._module.uint32) $Heap)) true)) (and (and (and ($Is MapType |n#0| (TMap Tclass._module.MyClass? Tclass._module.uint32)) ($IsAlloc MapType |n#0| (TMap Tclass._module.MyClass? Tclass._module.uint32) $Heap)) true) (and (and ($Is MapType |o#0| (TMap Tclass._module.MyClass Tclass._module.uint32)) ($IsAlloc MapType |o#0| (TMap Tclass._module.MyClass Tclass._module.uint32) $Heap)) true))) (=> (and (and (and (and (and ($Is MapType |o'#0| (TMap Tclass._module.MyClass? Tclass._module.uint32)) ($IsAlloc MapType |o'#0| (TMap Tclass._module.MyClass? Tclass._module.uint32) $Heap)) true) (and (and ($Is MapType |o''#0| (TMap Tclass._module.MyClass? Tclass._module.uint32)) ($IsAlloc MapType |o''#0| (TMap Tclass._module.MyClass? Tclass._module.uint32) $Heap)) true)) (and (and (and ($Is MapType |o3#0| (TMap Tclass._module.MyClass? Tclass._module.uint32)) ($IsAlloc MapType |o3#0| (TMap Tclass._module.MyClass? Tclass._module.uint32) $Heap)) true) (and (and ($Is MapType |p#0| (TMap Tclass._module.MyClass? Tclass._module.uint32)) ($IsAlloc MapType |p#0| (TMap Tclass._module.MyClass? Tclass._module.uint32) $Heap)) true))) (and (and (and (and ($Is MapType |q#0| (TMap Tclass._module.MyClass? Tclass._module.uint32)) ($IsAlloc MapType |q#0| (TMap Tclass._module.MyClass? Tclass._module.uint32) $Heap)) true) (and (and ($Is MapType |r#0| (TMap Tclass._module.MyClass? Tclass._module.uint32)) ($IsAlloc MapType |r#0| (TMap Tclass._module.MyClass? Tclass._module.uint32) $Heap)) true)) (and (and (and ($Is MapType |s#0| (TMap Tclass._module.MyClass? Tclass._module.uint32)) ($IsAlloc MapType |s#0| (TMap Tclass._module.MyClass? Tclass._module.uint32) $Heap)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 68) 2))))) anon0_correct))))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
