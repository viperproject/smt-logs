(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 (T@T) Int)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 (Bool) T@U)
(declare-fun $generated@@15 (T@U) Bool)
(declare-fun $generated@@16 (Int) T@U)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 (Real) T@U)
(declare-fun $generated@@19 (T@U) Real)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 (Int Bool) T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@54 (T@U) T@U)
(declare-fun $generated@@58 (T@U) Bool)
(declare-fun $generated@@63 (T@U) Int)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@71 (T@U) Int)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@77 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@T T@T) T@T)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@T) T@T)
(declare-fun $generated@@83 (T@T) T@T)
(declare-fun $generated@@132 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@10 $generated@@11) 0) (= ($generated@@10 $generated@@12) 1)) (= ($generated@@10 $generated@@13) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@19 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@18 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9)
)
(assert (= ($generated@@26 $generated) $generated@@0))
(assert (= ($generated@@10 $generated@@29) 3))
(assert (forall (($generated@@31 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@31 $generated@@30) ($generated@@27 $generated@@31))
 :pattern ( ($generated@@27 $generated@@31) ($generated@@28 $generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@34 $generated@@33) ($generated@@32 $generated@@34))
 :pattern ( ($generated@@32 $generated@@34) ($generated@@28 $generated@@29 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@35 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 $generated@@38) $generated@@38)
 :pattern ( ($generated@@37 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@27 $generated@@41) (= ($generated@@40 $generated@@41) $generated@@4))
 :pattern ( ($generated@@27 $generated@@41))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@32 $generated@@42) (= ($generated@@40 $generated@@42) $generated@@5))
 :pattern ( ($generated@@32 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@49 Int) ($generated@@50 Bool) ) (! (= ($generated@@28 $generated@@29 ($generated@@47 $generated@@49 $generated@@50) $generated@@30)  (and ($generated@@28 $generated@@12 ($generated@@16 $generated@@49) $generated@@48) ($generated@@28 $generated@@11 ($generated@@14 $generated@@50) $generated)))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@47 $generated@@49 $generated@@50) $generated@@30))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@27 $generated@@51) (exists (($generated@@52 Int) ($generated@@53 Bool) ) (= $generated@@51 ($generated@@47 $generated@@52 $generated@@53))))
 :pattern ( ($generated@@27 $generated@@51))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@32 $generated@@55) (exists (($generated@@56 T@U) ) (= $generated@@55 ($generated@@54 $generated@@56))))
 :pattern ( ($generated@@32 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@28 $generated@@29 ($generated@@54 $generated@@57) $generated@@33) ($generated@@28 $generated@@29 $generated@@57 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@54 $generated@@57) $generated@@33))
)))
(assert (forall (($generated@@59 Int) ($generated@@60 Bool) ) (! (= ($generated@@58 ($generated@@47 $generated@@59 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@47 $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@61 Int) ($generated@@62 Bool) ) (! (= ($generated@@40 ($generated@@47 $generated@@61 $generated@@62)) $generated@@4)
 :pattern ( ($generated@@47 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 Int) ($generated@@65 Bool) ) (! (= ($generated@@63 ($generated@@47 $generated@@64 $generated@@65)) $generated@@64)
 :pattern ( ($generated@@47 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@40 ($generated@@54 $generated@@66)) $generated@@5)
 :pattern ( ($generated@@54 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@67 ($generated@@54 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@54 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@43 $generated@@70 ($generated@@44 $generated@@70 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@44 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ) (! (< ($generated@@71 $generated@@72) ($generated@@71 ($generated@@54 $generated@@72)))
 :pattern ( ($generated@@54 $generated@@72))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@73 $generated@@84 $generated@@85 $generated@@86 ($generated@@80 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@89 $generated@@90) $generated@@87)
 :weight 0
)) (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@73 $generated@@91 $generated@@92 $generated@@93 ($generated@@80 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@73 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@73 $generated@@100 $generated@@101 $generated@@102 ($generated@@80 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@73 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)))) (= ($generated@@10 $generated@@74) 4)) (= ($generated@@10 $generated@@75) 5)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@77 $generated@@109 $generated@@110 ($generated@@81 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@111) $generated@@113) $generated@@111)
 :weight 0
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@77 $generated@@114 $generated@@115 ($generated@@81 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@77 $generated@@114 $generated@@115 $generated@@117 $generated@@119)))
 :weight 0
))) (= ($generated@@10 $generated@@78) 6)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (= ($generated@@10 ($generated@@79 $generated@@120 $generated@@121)) 7))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@82 ($generated@@79 $generated@@122 $generated@@123)) $generated@@122)
 :pattern ( ($generated@@79 $generated@@122 $generated@@123))
))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@83 ($generated@@79 $generated@@124 $generated@@125)) $generated@@125)
 :pattern ( ($generated@@79 $generated@@124 $generated@@125))
))))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 Bool) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@15 ($generated@@73 $generated@@74 $generated@@75 $generated@@11 ($generated@@76 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))  (=> (and (or (not (= $generated@@130 $generated@@126)) (not true)) ($generated@@15 ($generated@@43 $generated@@11 ($generated@@77 $generated@@75 $generated@@78 ($generated@@77 $generated@@74 ($generated@@79 $generated@@75 $generated@@78) $generated@@127 $generated@@130) $generated@@128)))) $generated@@129))
 :pattern ( ($generated@@73 $generated@@74 $generated@@75 $generated@@11 ($generated@@76 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))
)))
(assert (= ($generated@@26 $generated@@30) $generated@@2))
(assert (= ($generated@@132 $generated@@30) $generated@@7))
(assert (= ($generated@@26 $generated@@48) $generated@@3))
(assert (= ($generated@@132 $generated@@48) $generated@@8))
(assert (= ($generated@@26 $generated@@33) $generated@@6))
(assert (= ($generated@@132 $generated@@33) $generated@@9))
(assert (forall (($generated@@133 T@U) ) (! (= ($generated@@28 $generated@@12 $generated@@133 $generated@@48)  (and (<= ($generated@@35 0) ($generated@@17 $generated@@133)) (< ($generated@@17 $generated@@133) 4294967296)))
 :pattern ( ($generated@@28 $generated@@12 $generated@@133 $generated@@48))
)))
(assert (forall (($generated@@134 Int) ($generated@@135 T@U) ) (! (= ($generated@@47 ($generated@@35 $generated@@134) ($generated@@15 ($generated@@37 $generated@@11 $generated@@135))) ($generated@@37 $generated@@29 ($generated@@47 $generated@@134 ($generated@@15 $generated@@135))))
 :pattern ( ($generated@@47 ($generated@@35 $generated@@134) ($generated@@15 ($generated@@37 $generated@@11 $generated@@135))))
)))
(assert (forall (($generated@@136 Int) ) (! (= ($generated@@44 $generated@@12 ($generated@@16 ($generated@@35 $generated@@136))) ($generated@@37 $generated@@78 ($generated@@44 $generated@@12 ($generated@@16 $generated@@136))))
 :pattern ( ($generated@@44 $generated@@12 ($generated@@16 ($generated@@35 $generated@@136))))
)))
(assert (forall (($generated@@137 T@U) ) (! (= ($generated@@54 ($generated@@37 $generated@@29 $generated@@137)) ($generated@@37 $generated@@29 ($generated@@54 $generated@@137)))
 :pattern ( ($generated@@54 ($generated@@37 $generated@@29 $generated@@137)))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@T) ) (! (= ($generated@@44 $generated@@139 ($generated@@37 $generated@@139 $generated@@138)) ($generated@@37 $generated@@78 ($generated@@44 $generated@@139 $generated@@138)))
 :pattern ( ($generated@@44 $generated@@139 ($generated@@37 $generated@@139 $generated@@138)))
)))
(assert (forall (($generated@@140 T@U) ) (! ($generated@@28 $generated@@11 $generated@@140 $generated)
 :pattern ( ($generated@@28 $generated@@11 $generated@@140 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@146 (T@U) Bool)
(declare-fun $generated@@147 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@148  (=> (= $generated@@141 ($generated@@35 42)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (and (<= ($generated@@35 0) $generated@@141) (< $generated@@141 4294967296))) (=> (and (<= ($generated@@35 0) $generated@@141) (< $generated@@141 4294967296)) (=> (and (and ($generated@@32 ($generated@@37 $generated@@29 ($generated@@54 ($generated@@37 $generated@@29 ($generated@@47 ($generated@@35 42) ($generated@@15 ($generated@@37 $generated@@11 ($generated@@14 true)))))))) ($generated@@27 ($generated@@37 $generated@@29 ($generated@@67 ($generated@@37 $generated@@29 ($generated@@54 ($generated@@37 $generated@@29 ($generated@@47 ($generated@@35 42) ($generated@@15 ($generated@@37 $generated@@11 ($generated@@14 true))))))))))) (= (ControlFlow 0 3) (- 0 2))) ($generated@@15 ($generated@@37 $generated@@11 ($generated@@14 ($generated@@58 ($generated@@37 $generated@@29 ($generated@@67 ($generated@@37 $generated@@29 ($generated@@54 ($generated@@37 $generated@@29 ($generated@@47 ($generated@@35 42) ($generated@@15 ($generated@@37 $generated@@11 ($generated@@14 true)))))))))))))))))))
(let (($generated@@149 true))
(let (($generated@@150  (=> (= $generated@@142 ($generated@@76 $generated@@143 $generated@@144 $generated@@1 false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@149) (=> (= (ControlFlow 0 5) 3) $generated@@148)))))
(let (($generated@@151  (=> (and (and ($generated@@145 $generated@@144) ($generated@@146 $generated@@144)) (and (= 3 $generated@@147) (= (ControlFlow 0 6) 5))) $generated@@150)))
$generated@@151)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
