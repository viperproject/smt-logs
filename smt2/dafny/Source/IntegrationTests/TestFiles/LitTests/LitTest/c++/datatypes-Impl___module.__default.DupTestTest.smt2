(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U T@U) Bool)
(declare-fun $generated@@19 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@20 () T@T)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@T T@T) T@T)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@26 (T@T) T@T)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@48 (Int) Int)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@56 (Bool Int) T@U)
(declare-fun $generated@@57 (T@U) Bool)
(declare-fun $generated@@63 (T@U) T@U)
(declare-fun $generated@@66 (T@U) Int)
(declare-fun $generated@@69 (Int) T@U)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@108 () T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@28 T@T) ($generated@@29 T@T) ($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 T@U) ) (! (= ($generated@@19 $generated@@28 $generated@@29 ($generated@@25 $generated@@28 $generated@@29 $generated@@31 $generated@@32 $generated@@30) $generated@@32) $generated@@30)
 :weight 0
)) (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (or (= $generated@@37 $generated@@38) (= ($generated@@19 $generated@@33 $generated@@34 ($generated@@25 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@38) ($generated@@19 $generated@@33 $generated@@34 $generated@@36 $generated@@38)))
 :weight 0
))) (= ($generated@@2 $generated@@20) 3)) (= ($generated@@2 $generated@@21) 4)) (= ($generated@@2 $generated@@22) 5)) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (= ($generated@@2 ($generated@@23 $generated@@39 $generated@@40)) 6))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@26 ($generated@@23 $generated@@41 $generated@@42)) $generated@@41)
 :pattern ( ($generated@@23 $generated@@41 $generated@@42))
))) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (! (= ($generated@@27 ($generated@@23 $generated@@43 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@23 $generated@@43 $generated@@44))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> ($generated@@18 $generated@@45 $generated@@46) (forall (($generated@@47 T@U) ) (!  (=> ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@45 $generated@@47) $generated))) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@46 $generated@@47) $generated))))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@46 $generated@@47) $generated))
)))
 :pattern ( ($generated@@18 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@48 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@24 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@24 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@58 Bool) ($generated@@59 Int) ) (! (= ($generated@@57 ($generated@@56 $generated@@58 $generated@@59)) $generated@@58)
 :pattern ( ($generated@@56 $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (or (not (= $generated@@60 $generated@@62)) (not true)) (=> (and ($generated@@18 $generated@@60 $generated@@61) ($generated@@18 $generated@@61 $generated@@62)) ($generated@@18 $generated@@60 $generated@@62)))
 :pattern ( ($generated@@18 $generated@@60 $generated@@61) ($generated@@18 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 Bool) ($generated@@65 Int) ) (! (= ($generated@@63 ($generated@@56 $generated@@64 $generated@@65)) $generated@@0)
 :pattern ( ($generated@@56 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 Bool) ($generated@@68 Int) ) (! (= ($generated@@66 ($generated@@56 $generated@@67 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@56 $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 Int) ) (! (= ($generated@@63 ($generated@@69 $generated@@70)) $generated@@1)
 :pattern ( ($generated@@69 $generated@@70))
)))
(assert (forall (($generated@@71 Int) ) (! (= ($generated@@66 ($generated@@69 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@69 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@24 $generated@@73 ($generated@@53 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@53 $generated@@73 $generated@@72))
)))
(assert  (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@74 $generated@@77 $generated@@78 $generated@@79 ($generated@@76 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@82 $generated@@83) $generated@@80)
 :weight 0
)) (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@74 $generated@@84 $generated@@85 $generated@@86 ($generated@@76 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@74 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@74 $generated@@93 $generated@@94 $generated@@95 ($generated@@76 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@74 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)))))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 Bool) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@7 ($generated@@74 $generated@@22 $generated@@20 $generated@@3 ($generated@@75 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))  (=> (and (or (not (= $generated@@106 $generated@@102)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@103 $generated@@106) $generated@@104)))) $generated@@105))
 :pattern ( ($generated@@74 $generated@@22 $generated@@20 $generated@@3 ($generated@@75 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))
)))
(assert (= ($generated@@2 $generated@@108) 7))
(assert (forall (($generated@@109 T@U) ($generated@@110 Int) ) (! (= ($generated@@56 ($generated@@7 ($generated@@50 $generated@@3 $generated@@109)) ($generated@@48 $generated@@110)) ($generated@@50 $generated@@108 ($generated@@56 ($generated@@7 $generated@@109) $generated@@110)))
 :pattern ( ($generated@@56 ($generated@@7 ($generated@@50 $generated@@3 $generated@@109)) ($generated@@48 $generated@@110)))
)))
(assert (forall (($generated@@111 Int) ) (! (= ($generated@@53 $generated@@4 ($generated@@8 ($generated@@48 $generated@@111))) ($generated@@50 $generated@@21 ($generated@@53 $generated@@4 ($generated@@8 $generated@@111))))
 :pattern ( ($generated@@53 $generated@@4 ($generated@@8 ($generated@@48 $generated@@111))))
)))
(assert (forall (($generated@@112 Int) ) (! (= ($generated@@69 ($generated@@48 $generated@@112)) ($generated@@50 $generated@@108 ($generated@@69 $generated@@112)))
 :pattern ( ($generated@@69 ($generated@@48 $generated@@112)))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@53 $generated@@114 ($generated@@50 $generated@@114 $generated@@113)) ($generated@@50 $generated@@21 ($generated@@53 $generated@@114 $generated@@113)))
 :pattern ( ($generated@@53 $generated@@114 ($generated@@50 $generated@@114 $generated@@113)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 (T@U) Bool)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@125  (=> (and (= $generated@@115 ($generated@@75 $generated@@116 $generated@@117 $generated false)) (= $generated@@118 ($generated@@48 42))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= ($generated@@48 0) $generated@@118) (< $generated@@118 4294967296))) (=> (and (<= ($generated@@48 0) $generated@@118) (< $generated@@118 4294967296)) (=> (= $generated@@119 ($generated@@50 $generated@@108 ($generated@@56 ($generated@@7 ($generated@@50 $generated@@3 ($generated@@6 false))) ($generated@@48 42)))) (=> (and ($generated@@120 $generated@@121) ($generated@@122 $generated@@121)) (=> (and (and (forall (($generated@@126 T@U) ) (!  (=> (and (or (not (= $generated@@126 $generated@@116)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@117 $generated@@126) $generated)))) (= ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@121 $generated@@126) ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@117 $generated@@126)))
 :pattern ( ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@121 $generated@@126))
)) ($generated@@18 $generated@@117 $generated@@121)) (and (= $generated@@123 ($generated@@48 330)) (= (ControlFlow 0 2) (- 0 1)))) (and (<= ($generated@@48 0) $generated@@123) (< $generated@@123 4294967296))))))))))
(let (($generated@@127  (=> (and (and ($generated@@120 $generated@@117) ($generated@@122 $generated@@117)) (and (= 3 $generated@@124) (= (ControlFlow 0 4) 2))) $generated@@125)))
$generated@@127)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
