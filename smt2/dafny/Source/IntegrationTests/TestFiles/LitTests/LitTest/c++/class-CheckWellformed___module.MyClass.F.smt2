(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U) Int)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T) T@T)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@112 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@5 $generated@@24) 3))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@30 T@U) ) (!  (=> (or ($generated@@25 ($generated@@23 $generated@@24 $generated@@30)) (and (< 1 $generated@@21) (and (or (not (= $generated@@30 $generated@@26)) (not true)) ($generated@@27 $generated@@24 $generated@@30 $generated@@28)))) (= ($generated@@22 ($generated@@23 $generated@@24 $generated@@30)) ($generated@@29 8)))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@23 $generated@@24 $generated@@30)))
))))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (! ($generated@@31 $generated@@7 $generated@@33 $generated@@32 $generated@@34)
 :pattern ( ($generated@@31 $generated@@7 $generated@@33 $generated@@32 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@27 $generated@@24 $generated@@37 $generated@@35)  (or (= $generated@@37 $generated@@26) (= ($generated@@36 $generated@@37) $generated@@35)))
 :pattern ( ($generated@@27 $generated@@24 $generated@@37 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@31 $generated@@24 $generated@@38 $generated@@28 $generated@@39) ($generated@@31 $generated@@24 $generated@@38 $generated@@35 $generated@@39))
 :pattern ( ($generated@@31 $generated@@24 $generated@@38 $generated@@28 $generated@@39))
 :pattern ( ($generated@@31 $generated@@24 $generated@@38 $generated@@35 $generated@@39))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@41 $generated@@48 $generated@@49 ($generated@@45 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@50) $generated@@52) $generated@@50)
 :weight 0
)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (or (= $generated@@57 $generated@@58) (= ($generated@@41 $generated@@53 $generated@@54 ($generated@@45 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@58) ($generated@@41 $generated@@53 $generated@@54 $generated@@56 $generated@@58)))
 :weight 0
))) (= ($generated@@5 $generated@@42) 4)) (= ($generated@@5 $generated@@43) 5)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (= ($generated@@5 ($generated@@44 $generated@@59 $generated@@60)) 6))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@46 ($generated@@44 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@44 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@63 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@44 $generated@@63 $generated@@64))
))))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@31 $generated@@24 $generated@@65 $generated@@35 $generated@@66)  (or (= $generated@@65 $generated@@26) ($generated@@10 ($generated@@40 $generated@@6 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@24 ($generated@@44 $generated@@42 $generated@@43) $generated@@66 $generated@@65) $generated)))))
 :pattern ( ($generated@@31 $generated@@24 $generated@@65 $generated@@35 $generated@@66))
)))
(assert (forall (($generated@@67 Int) ) (! (= ($generated@@29 $generated@@67) $generated@@67)
 :pattern ( ($generated@@29 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@23 $generated@@69 $generated@@68) $generated@@68)
 :pattern ( ($generated@@23 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 ($generated@@40 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@40 $generated@@72 $generated@@71))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@73 T@U) ) (!  (=> (or ($generated@@25 $generated@@73) (and (< 1 $generated@@21) (and (or (not (= $generated@@73 $generated@@26)) (not true)) ($generated@@27 $generated@@24 $generated@@73 $generated@@28)))) (and (<= ($generated@@29 0) ($generated@@22 $generated@@73)) (< ($generated@@22 $generated@@73) 4294967296)))
 :pattern ( ($generated@@22 $generated@@73))
))))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@27 $generated@@24 $generated@@74 $generated@@28)  (and ($generated@@27 $generated@@24 $generated@@74 $generated@@35) (or (not (= $generated@@74 $generated@@26)) (not true))))
 :pattern ( ($generated@@27 $generated@@24 $generated@@74 $generated@@28))
 :pattern ( ($generated@@27 $generated@@24 $generated@@74 $generated@@35))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@40 $generated@@76 ($generated@@70 $generated@@76 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@70 $generated@@76 $generated@@75))
)))
(assert  (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@77 $generated@@80 $generated@@81 $generated@@82 ($generated@@79 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@85 $generated@@86) $generated@@83)
 :weight 0
)) (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@77 $generated@@87 $generated@@88 $generated@@89 ($generated@@79 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@77 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@77 $generated@@96 $generated@@97 $generated@@98 ($generated@@79 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@103 $generated@@104) ($generated@@77 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@103 $generated@@104)))
 :weight 0
)))))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 Bool) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@10 ($generated@@77 $generated@@24 $generated@@42 $generated@@6 ($generated@@78 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))  (=> (and (or (not (= $generated@@109 $generated@@105)) (not true)) ($generated@@10 ($generated@@40 $generated@@6 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@24 ($generated@@44 $generated@@42 $generated@@43) $generated@@106 $generated@@109) $generated@@107)))) $generated@@108))
 :pattern ( ($generated@@77 $generated@@24 $generated@@42 $generated@@6 ($generated@@78 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))
)))
(assert (= ($generated@@111 $generated@@28) $generated@@0))
(assert (= ($generated@@112 $generated@@28) $generated@@3))
(assert (= ($generated@@111 $generated@@35) $generated@@1))
(assert (= ($generated@@112 $generated@@35) $generated@@3))
(assert (= ($generated@@111 $generated@@32) $generated@@2))
(assert (= ($generated@@112 $generated@@32) $generated@@4))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@113 T@U) ) (!  (=> (or ($generated@@25 $generated@@113) (and (< 1 $generated@@21) (and (or (not (= $generated@@113 $generated@@26)) (not true)) ($generated@@27 $generated@@24 $generated@@113 $generated@@28)))) (= ($generated@@22 $generated@@113) ($generated@@29 8)))
 :pattern ( ($generated@@22 $generated@@113))
))))
(assert (forall (($generated@@114 T@U) ) (! (= ($generated@@27 $generated@@7 $generated@@114 $generated@@32)  (and (<= ($generated@@29 0) ($generated@@12 $generated@@114)) (< ($generated@@12 $generated@@114) 4294967296)))
 :pattern ( ($generated@@27 $generated@@7 $generated@@114 $generated@@32))
)))
(assert (forall (($generated@@115 Int) ) (! (= ($generated@@70 $generated@@7 ($generated@@11 ($generated@@29 $generated@@115))) ($generated@@23 $generated@@43 ($generated@@70 $generated@@7 ($generated@@11 $generated@@115))))
 :pattern ( ($generated@@70 $generated@@7 ($generated@@11 ($generated@@29 $generated@@115))))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@70 $generated@@117 ($generated@@23 $generated@@117 $generated@@116)) ($generated@@23 $generated@@43 ($generated@@70 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@70 $generated@@117 ($generated@@23 $generated@@117 $generated@@116)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@124  (=> (and (= $generated@@118 ($generated@@29 8)) (= (ControlFlow 0 3) (- 0 2))) (and (<= ($generated@@29 0) $generated@@118) (< $generated@@118 4294967296)))))
(let (($generated@@125 true))
(let (($generated@@126  (=> (= $generated@@119 ($generated@@78 $generated@@26 $generated@@120 $generated false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@125) (=> (= (ControlFlow 0 4) 3) $generated@@124)))))
(let (($generated@@127  (=> (and ($generated@@121 $generated@@120) ($generated@@122 $generated@@120)) (=> (and (and (or (not (= $generated@@123 $generated@@26)) (not true)) (and ($generated@@27 $generated@@24 $generated@@123 $generated@@28) ($generated@@31 $generated@@24 $generated@@123 $generated@@28 $generated@@120))) (and (= 1 $generated@@21) (= (ControlFlow 0 5) 4))) $generated@@126))))
$generated@@127)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
