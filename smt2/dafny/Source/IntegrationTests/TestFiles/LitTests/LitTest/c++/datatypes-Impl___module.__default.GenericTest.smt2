(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.uint32 () T@U)
(declare-fun Tagclass._module.Option () T@U)
(declare-fun Tagclass._module.Err () T@U)
(declare-fun |##_module.Option.None| () T@U)
(declare-fun |##_module.Option.Some| () T@U)
(declare-fun |##_module.Err.Fail| () T@U)
(declare-fun |##_module.Err.Ok| () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$Err () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.uint32 () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Option.None| () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Option (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Option.None_q (T@U) Bool)
(declare-fun _module.Option.Some_q (T@U) Bool)
(declare-fun _module.Err.Fail_q (T@U) Bool)
(declare-fun _module.Err.Ok_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.Option.Some| (T@U) T@U)
(declare-fun |#_module.Err.Fail| (Bool) T@U)
(declare-fun |#_module.Err.Ok| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._module.Err (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.Err.err (T@U) Bool)
(declare-fun Tclass._module.Option_0 (T@U) T@U)
(declare-fun Tclass._module.Err_0 (T@U) T@U)
(declare-fun _module.Option.value (T@U) T@U)
(declare-fun _module.Err.value (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool alloc Tagclass._module.uint32 Tagclass._module.Option Tagclass._module.Err |##_module.Option.None| |##_module.Option.Some| |##_module.Err.Fail| |##_module.Err.Ok| tytagFamily$uint32 tytagFamily$Option tytagFamily$Err)
)
(assert (= (Tag TBool) TagBool))
(assert (forall ((|i#0| T@U) ($h T@U) ) (! ($IsAlloc intType |i#0| Tclass._module.uint32 $h)
 :pattern ( ($IsAlloc intType |i#0| Tclass._module.uint32 $h))
)))
(assert (= (DatatypeCtorId |#_module.Option.None|) |##_module.Option.None|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.Option$V T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$V) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$V) $h@@0))
)))
(assert (forall ((_module.Option$V@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$V@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$V@@0)))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d T@U) ) (! (= (_module.Option.None_q d) (= (DatatypeCtorId d) |##_module.Option.None|))
 :pattern ( (_module.Option.None_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Option.Some_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Option.Some|))
 :pattern ( (_module.Option.Some_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Err.Fail_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Err.Fail|))
 :pattern ( (_module.Err.Fail_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Err.Ok_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Err.Ok|))
 :pattern ( (_module.Err.Ok_q d@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Option.None_q d@@3) (= d@@3 |#_module.Option.None|))
 :pattern ( (_module.Option.None_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Option.Some_q d@@4) (exists ((|a#23#0#0| T@U) ) (= d@@4 (|#_module.Option.Some| |a#23#0#0|))))
 :pattern ( (_module.Option.Some_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.Err.Fail_q d@@5) (exists ((|a#29#0#0| Bool) ) (= d@@5 (|#_module.Err.Fail| |a#29#0#0|))))
 :pattern ( (_module.Err.Fail_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (_module.Err.Ok_q d@@6) (exists ((|a#34#0#0| T@U) ) (= d@@6 (|#_module.Err.Ok| |a#34#0#0|))))
 :pattern ( (_module.Err.Ok_q d@@6))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_module.Option$V@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Option _module.Option$V@@1)) Tagclass._module.Option) (= (TagFamily (Tclass._module.Option _module.Option$V@@1)) tytagFamily$Option))
 :pattern ( (Tclass._module.Option _module.Option$V@@1))
)))
(assert (forall ((_module.Err$V T@U) ) (!  (and (= (Tag (Tclass._module.Err _module.Err$V)) Tagclass._module.Err) (= (TagFamily (Tclass._module.Err _module.Err$V)) tytagFamily$Err))
 :pattern ( (Tclass._module.Err _module.Err$V))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.uint32) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) Tclass._module.uint32)))
 :pattern ( ($IsBox bx@@0 Tclass._module.uint32))
)))
(assert (forall ((d@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Err.Fail_q d@@7) (exists ((_module.Err$V@@0 T@U) ) (! ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.Err _module.Err$V@@0) $h@@1)
 :pattern ( ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.Err _module.Err$V@@0) $h@@1))
)))) ($IsAlloc boolType (bool_2_U (_module.Err.err d@@7)) TBool $h@@1))
 :pattern ( ($IsAlloc boolType (bool_2_U (_module.Err.err d@@7)) TBool $h@@1))
)))
(assert (forall ((_module.Option$V@@2 T@U) (|a#24#0#0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_module.Option.Some| |a#24#0#0|) (Tclass._module.Option _module.Option$V@@2) $h@@2) ($IsAllocBox |a#24#0#0| _module.Option$V@@2 $h@@2)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Option.Some| |a#24#0#0|) (Tclass._module.Option _module.Option$V@@2) $h@@2))
)))
(assert (forall ((_module.Err$V@@1 T@U) (|a#30#0#0| Bool) ($h@@3 T@U) ) (!  (=> ($IsGoodHeap $h@@3) (= ($IsAlloc DatatypeTypeType (|#_module.Err.Fail| |a#30#0#0|) (Tclass._module.Err _module.Err$V@@1) $h@@3) ($IsAlloc boolType (bool_2_U |a#30#0#0|) TBool $h@@3)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Err.Fail| |a#30#0#0|) (Tclass._module.Err _module.Err$V@@1) $h@@3))
)))
(assert (forall ((_module.Err$V@@2 T@U) (|a#35#0#0| T@U) ($h@@4 T@U) ) (!  (=> ($IsGoodHeap $h@@4) (= ($IsAlloc DatatypeTypeType (|#_module.Err.Ok| |a#35#0#0|) (Tclass._module.Err _module.Err$V@@2) $h@@4) ($IsAllocBox |a#35#0#0| _module.Err$V@@2 $h@@4)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Err.Ok| |a#35#0#0|) (Tclass._module.Err _module.Err$V@@2) $h@@4))
)))
(assert (forall ((_module.Option$V@@3 T@U) (d@@8 T@U) ) (!  (=> ($Is DatatypeTypeType d@@8 (Tclass._module.Option _module.Option$V@@3)) (or (_module.Option.None_q d@@8) (_module.Option.Some_q d@@8)))
 :pattern ( (_module.Option.Some_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass._module.Option _module.Option$V@@3)))
 :pattern ( (_module.Option.None_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass._module.Option _module.Option$V@@3)))
)))
(assert (forall ((_module.Err$V@@3 T@U) (d@@9 T@U) ) (!  (=> ($Is DatatypeTypeType d@@9 (Tclass._module.Err _module.Err$V@@3)) (or (_module.Err.Fail_q d@@9) (_module.Err.Ok_q d@@9)))
 :pattern ( (_module.Err.Ok_q d@@9) ($Is DatatypeTypeType d@@9 (Tclass._module.Err _module.Err$V@@3)))
 :pattern ( (_module.Err.Fail_q d@@9) ($Is DatatypeTypeType d@@9 (Tclass._module.Err _module.Err$V@@3)))
)))
(assert (forall ((|a#32#0#0| Bool) ) (! (= (_module.Err.err (|#_module.Err.Fail| |a#32#0#0|)) |a#32#0#0|)
 :pattern ( (|#_module.Err.Fail| |a#32#0#0|))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TBool) (and (= ($Box boolType ($Unbox boolType bx@@1)) bx@@1) ($Is boolType ($Unbox boolType bx@@1) TBool)))
 :pattern ( ($IsBox bx@@1 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((_module.Option$V@@4 T@U) ) (! (= (Tclass._module.Option_0 (Tclass._module.Option _module.Option$V@@4)) _module.Option$V@@4)
 :pattern ( (Tclass._module.Option _module.Option$V@@4))
)))
(assert (forall ((_module.Err$V@@4 T@U) ) (! (= (Tclass._module.Err_0 (Tclass._module.Err _module.Err$V@@4)) _module.Err$V@@4)
 :pattern ( (Tclass._module.Err _module.Err$V@@4))
)))
(assert (forall ((|a#22#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Option.Some| |a#22#0#0|)) |##_module.Option.Some|)
 :pattern ( (|#_module.Option.Some| |a#22#0#0|))
)))
(assert (forall ((|a#26#0#0| T@U) ) (! (= (_module.Option.value (|#_module.Option.Some| |a#26#0#0|)) |a#26#0#0|)
 :pattern ( (|#_module.Option.Some| |a#26#0#0|))
)))
(assert (forall ((|a#28#0#0| Bool) ) (! (= (DatatypeCtorId (|#_module.Err.Fail| |a#28#0#0|)) |##_module.Err.Fail|)
 :pattern ( (|#_module.Err.Fail| |a#28#0#0|))
)))
(assert (forall ((|a#33#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Err.Ok| |a#33#0#0|)) |##_module.Err.Ok|)
 :pattern ( (|#_module.Err.Ok| |a#33#0#0|))
)))
(assert (forall ((|a#37#0#0| T@U) ) (! (= (_module.Err.value (|#_module.Err.Ok| |a#37#0#0|)) |a#37#0#0|)
 :pattern ( (|#_module.Err.Ok| |a#37#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_module.Option$V@@5 T@U) (|a#24#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Option.Some| |a#24#0#0@@0|) (Tclass._module.Option _module.Option$V@@5)) ($IsBox |a#24#0#0@@0| _module.Option$V@@5))
 :pattern ( ($Is DatatypeTypeType (|#_module.Option.Some| |a#24#0#0@@0|) (Tclass._module.Option _module.Option$V@@5)))
)))
(assert (forall ((_module.Err$V@@5 T@U) (|a#30#0#0@@0| Bool) ) (! (= ($Is DatatypeTypeType (|#_module.Err.Fail| |a#30#0#0@@0|) (Tclass._module.Err _module.Err$V@@5)) ($Is boolType (bool_2_U |a#30#0#0@@0|) TBool))
 :pattern ( ($Is DatatypeTypeType (|#_module.Err.Fail| |a#30#0#0@@0|) (Tclass._module.Err _module.Err$V@@5)))
)))
(assert (forall ((_module.Err$V@@6 T@U) (|a#35#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Err.Ok| |a#35#0#0@@0|) (Tclass._module.Err _module.Err$V@@6)) ($IsBox |a#35#0#0@@0| _module.Err$V@@6))
 :pattern ( ($Is DatatypeTypeType (|#_module.Err.Ok| |a#35#0#0@@0|) (Tclass._module.Err _module.Err$V@@6)))
)))
(assert (forall ((|a#27#0#0| T@U) ) (! (< (BoxRank |a#27#0#0|) (DtRank (|#_module.Option.Some| |a#27#0#0|)))
 :pattern ( (|#_module.Option.Some| |a#27#0#0|))
)))
(assert (forall ((|a#38#0#0| T@U) ) (! (< (BoxRank |a#38#0#0|) (DtRank (|#_module.Err.Ok| |a#38#0#0|)))
 :pattern ( (|#_module.Err.Ok| |a#38#0#0|))
)))
(assert (forall ((d@@10 T@U) (_module.Option$V@@6 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.Option.Some_q d@@10) ($IsAlloc DatatypeTypeType d@@10 (Tclass._module.Option _module.Option$V@@6) $h@@5))) ($IsAllocBox (_module.Option.value d@@10) _module.Option$V@@6 $h@@5))
 :pattern ( ($IsAllocBox (_module.Option.value d@@10) _module.Option$V@@6 $h@@5))
)))
(assert (forall ((d@@11 T@U) (_module.Err$V@@7 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_module.Err.Ok_q d@@11) ($IsAlloc DatatypeTypeType d@@11 (Tclass._module.Err _module.Err$V@@7) $h@@6))) ($IsAllocBox (_module.Err.value d@@11) _module.Err$V@@7 $h@@6))
 :pattern ( ($IsAllocBox (_module.Err.value d@@11) _module.Err$V@@7 $h@@6))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@12 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@12)) (DtRank d@@12))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@12)))
)))
(assert (forall ((_module.Option$V@@7 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._module.Option _module.Option$V@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass._module.Option _module.Option$V@@7))))
 :pattern ( ($IsBox bx@@2 (Tclass._module.Option _module.Option$V@@7)))
)))
(assert (forall ((_module.Err$V@@8 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._module.Err _module.Err$V@@8)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) (Tclass._module.Err _module.Err$V@@8))))
 :pattern ( ($IsBox bx@@3 (Tclass._module.Err _module.Err$V@@8)))
)))
(assert (= (Tag Tclass._module.uint32) Tagclass._module.uint32))
(assert (= (TagFamily Tclass._module.uint32) tytagFamily$uint32))
(assert (= |#_module.Option.None| (Lit DatatypeTypeType |#_module.Option.None|)))
(assert (forall ((|i#0@@0| T@U) ) (! (= ($Is intType |i#0@@0| Tclass._module.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@0|)) (< (U_2_int |i#0@@0|) 4294967296)))
 :pattern ( ($Is intType |i#0@@0| Tclass._module.uint32))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#25#0#0| T@U) ) (! (= (|#_module.Option.Some| (Lit BoxType |a#25#0#0|)) (Lit DatatypeTypeType (|#_module.Option.Some| |a#25#0#0|)))
 :pattern ( (|#_module.Option.Some| (Lit BoxType |a#25#0#0|)))
)))
(assert (forall ((|a#31#0#0| T@U) ) (! (= (|#_module.Err.Fail| (U_2_bool (Lit boolType |a#31#0#0|))) (Lit DatatypeTypeType (|#_module.Err.Fail| (U_2_bool |a#31#0#0|))))
 :pattern ( (|#_module.Err.Fail| (U_2_bool (Lit boolType |a#31#0#0|))))
)))
(assert (forall ((|a#36#0#0| T@U) ) (! (= (|#_module.Err.Ok| (Lit BoxType |a#36#0#0|)) (Lit DatatypeTypeType (|#_module.Err.Ok| |a#36#0#0|)))
 :pattern ( (|#_module.Err.Ok| (Lit BoxType |a#36#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((h@@3 T@U) (v@@2 T@U) ) (! ($IsAlloc boolType v@@2 TBool h@@3)
 :pattern ( ($IsAlloc boolType v@@2 TBool h@@3))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is boolType v@@3 TBool)
 :pattern ( ($Is boolType v@@3 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |v#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |e##0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |e##1@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |v#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let ((anon3_Else_correct true))
(let ((anon3_Then_correct  (=> (and (_module.Option.Some_q |v#0@0|) (= (ControlFlow 0 2) (- 0 1))) (_module.Option.Some_q |v#0@0|))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |newtype$check#0@0| (LitInt 32))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| 4294967296)) (=> (and (= |v#0@0| (Lit DatatypeTypeType (|#_module.Option.Some| ($Box intType (int_2_U (LitInt 32)))))) (= |newtype$check#1@0| (LitInt 42))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 4294967296)) (=> (= |e##0@0| (Lit DatatypeTypeType (|#_module.Err.Ok| ($Box intType (int_2_U (LitInt 42)))))) (=> (and (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
))) (and ($HeapSucc $Heap $Heap@0) (= |e##1@0| (Lit DatatypeTypeType (|#_module.Err.Fail| (U_2_bool (Lit boolType (bool_2_U true)))))))) (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (forall (($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@1) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@1))
)) ($HeapSucc $Heap@0 $Heap@1)))) (and (=> (= (ControlFlow 0 4) 2) anon3_Then_correct) (=> (= (ControlFlow 0 4) 3) anon3_Else_correct))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is DatatypeTypeType |v#0| (Tclass._module.Option Tclass._module.uint32)) ($IsAlloc DatatypeTypeType |v#0| (Tclass._module.Option Tclass._module.uint32) $Heap)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 7) 4))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
