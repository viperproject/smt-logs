(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T) T@T)
(declare-fun $generated@@37 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@60 (Int) Int)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@U) T@U)
(declare-fun $generated@@68 (T@T T@U T@U) Bool)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@80 (T@U) T@U)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@86 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (= ($generated@@5 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@21 $generated@@25 $generated@@29 ($generated@@26 $generated@@28) $generated@@30) ($generated@@21 $generated@@25 $generated@@29 ($generated@@27 $generated@@28) $generated@@30))
 :pattern ( ($generated@@21 $generated@@25 $generated@@29 ($generated@@26 $generated@@28) $generated@@30))
 :pattern ( ($generated@@21 $generated@@25 $generated@@29 ($generated@@27 $generated@@28) $generated@@30))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@33 $generated@@40 $generated@@41 ($generated@@37 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@44) $generated@@42)
 :weight 0
)) (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (or (= $generated@@49 $generated@@50) (= ($generated@@33 $generated@@45 $generated@@46 ($generated@@37 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@50) ($generated@@33 $generated@@45 $generated@@46 $generated@@48 $generated@@50)))
 :weight 0
))) (= ($generated@@5 $generated@@34) 4)) (= ($generated@@5 $generated@@35) 5)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (= ($generated@@5 ($generated@@36 $generated@@51 $generated@@52)) 6))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@38 ($generated@@36 $generated@@53 $generated@@54)) $generated@@53)
 :pattern ( ($generated@@36 $generated@@53 $generated@@54))
))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@55 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@36 $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@21 $generated@@25 $generated@@58 ($generated@@27 $generated@@57) $generated@@59)  (or (= $generated@@58 $generated@@31) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@25 ($generated@@36 $generated@@34 $generated@@35) $generated@@59 $generated@@58) $generated)))))
 :pattern ( ($generated@@21 $generated@@25 $generated@@58 ($generated@@27 $generated@@57) $generated@@59))
)))
(assert (forall (($generated@@61 Int) ) (! (= ($generated@@60 $generated@@61) $generated@@61)
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 $generated@@63) $generated@@63)
 :pattern ( ($generated@@62 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@65 $generated@@67 ($generated@@32 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@32 $generated@@67 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@68 $generated@@25 $generated@@70 ($generated@@26 $generated@@69))  (and ($generated@@68 $generated@@25 $generated@@70 ($generated@@27 $generated@@69)) (or (not (= $generated@@70 $generated@@31)) (not true))))
 :pattern ( ($generated@@68 $generated@@25 $generated@@70 ($generated@@26 $generated@@69)))
 :pattern ( ($generated@@68 $generated@@25 $generated@@70 ($generated@@27 $generated@@69)))
)))
(assert (forall (($generated@@73 T@U) ) (!  (and (= ($generated@@71 ($generated@@27 $generated@@73)) $generated@@0) (= ($generated@@72 ($generated@@27 $generated@@73)) $generated@@3))
 :pattern ( ($generated@@27 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ) (!  (and (= ($generated@@71 ($generated@@26 $generated@@74)) $generated@@1) (= ($generated@@72 ($generated@@26 $generated@@74)) $generated@@3))
 :pattern ( ($generated@@26 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@68 $generated@@25 $generated@@77 ($generated@@27 $generated@@76))  (or (= $generated@@77 $generated@@31) (= ($generated@@75 $generated@@77) ($generated@@27 $generated@@76))))
 :pattern ( ($generated@@68 $generated@@25 $generated@@77 ($generated@@27 $generated@@76)))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@78 ($generated@@27 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@27 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ) (! (= ($generated@@80 ($generated@@26 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@26 $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@32 $generated@@83 ($generated@@65 $generated@@83 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@65 $generated@@83 $generated@@82))
)))
(assert  (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@84 $generated@@87 $generated@@88 $generated@@89 ($generated@@86 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@92 $generated@@93) $generated@@90)
 :weight 0
)) (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@84 $generated@@94 $generated@@95 $generated@@96 ($generated@@86 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@84 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@84 $generated@@103 $generated@@104 $generated@@105 ($generated@@86 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@84 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)))))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 Bool) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@10 ($generated@@84 $generated@@25 $generated@@34 $generated@@6 ($generated@@85 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))  (=> (and (or (not (= $generated@@116 $generated@@112)) (not true)) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@25 ($generated@@36 $generated@@34 $generated@@35) $generated@@113 $generated@@116) $generated@@114)))) $generated@@115))
 :pattern ( ($generated@@84 $generated@@25 $generated@@34 $generated@@6 ($generated@@85 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))
)))
(assert (= ($generated@@71 $generated@@22) $generated@@2))
(assert (= ($generated@@72 $generated@@22) $generated@@4))
(assert (forall (($generated@@118 T@U) ) (! (= ($generated@@68 $generated@@7 $generated@@118 $generated@@22)  (and (<= ($generated@@60 0) ($generated@@12 $generated@@118)) (< ($generated@@12 $generated@@118) 4294967296)))
 :pattern ( ($generated@@68 $generated@@7 $generated@@118 $generated@@22))
)))
(assert (forall (($generated@@119 Int) ) (! (= ($generated@@65 $generated@@7 ($generated@@11 ($generated@@60 $generated@@119))) ($generated@@62 $generated@@35 ($generated@@65 $generated@@7 ($generated@@11 $generated@@119))))
 :pattern ( ($generated@@65 $generated@@7 ($generated@@11 ($generated@@60 $generated@@119))))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@T) ) (! (= ($generated@@65 $generated@@121 ($generated@@62 $generated@@121 $generated@@120)) ($generated@@62 $generated@@35 ($generated@@65 $generated@@121 $generated@@120)))
 :pattern ( ($generated@@65 $generated@@121 ($generated@@62 $generated@@121 $generated@@120)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@128  (=> (and (= $generated@@122 ($generated@@85 $generated@@31 $generated@@123 $generated false)) (= (ControlFlow 0 2) (- 0 1))) (= $generated@@31 $generated@@31))))
(let (($generated@@129  (=> (and ($generated@@124 $generated@@123) ($generated@@125 $generated@@123)) (=> (and (and ($generated@@68 $generated@@25 $generated@@126 ($generated@@27 $generated@@22)) ($generated@@21 $generated@@25 $generated@@126 ($generated@@27 $generated@@22) $generated@@123)) (and (= 1 $generated@@127) (= (ControlFlow 0 3) 2))) $generated@@128))))
$generated@@129)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
