(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@23 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@T T@T) T@T)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@30 (T@T) T@T)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@52 (Int) Int)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@65 () Int)
(declare-fun $generated@@66 (Int) (_ BitVec 64))
(declare-fun $generated@@67 (Int) Bool)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@109 (T@U) T@U)
(declare-fun $generated@@110 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21)
 :pattern ( ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@23 $generated@@32 $generated@@33 ($generated@@29 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@36) $generated@@34)
 :weight 0
)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (!  (or (= $generated@@41 $generated@@42) (= ($generated@@23 $generated@@37 $generated@@38 ($generated@@29 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@42) ($generated@@23 $generated@@37 $generated@@38 $generated@@40 $generated@@42)))
 :weight 0
))) (= ($generated@@2 $generated@@24) 3)) (= ($generated@@2 $generated@@25) 4)) (= ($generated@@2 $generated@@26) 5)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (= ($generated@@2 ($generated@@27 $generated@@43 $generated@@44)) 6))) (forall (($generated@@45 T@T) ($generated@@46 T@T) ) (! (= ($generated@@30 ($generated@@27 $generated@@45 $generated@@46)) $generated@@45)
 :pattern ( ($generated@@27 $generated@@45 $generated@@46))
))) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (! (= ($generated@@31 ($generated@@27 $generated@@47 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@27 $generated@@47 $generated@@48))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> ($generated@@22 $generated@@49 $generated@@50) (forall (($generated@@51 T@U) ) (!  (=> ($generated@@7 ($generated@@28 $generated@@3 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@49 $generated@@51) $generated))) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@51) $generated))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@51) $generated))
)))
 :pattern ( ($generated@@22 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@52 $generated@@53) $generated@@53)
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@28 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@28 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (!  (=> ($generated@@22 $generated@@60 $generated@@61) (=> ($generated@@18 $generated@@64 $generated@@62 $generated@@63 $generated@@60) ($generated@@18 $generated@@64 $generated@@62 $generated@@63 $generated@@61)))
 :pattern ( ($generated@@22 $generated@@60 $generated@@61) ($generated@@18 $generated@@64 $generated@@62 $generated@@63 $generated@@60))
)))
(assert  (=> (<= 1 $generated@@65) (forall (($generated@@68 Int) ) (!  (=> (or ($generated@@67 $generated@@68) (and (< 1 $generated@@65) (and (and (<= ($generated@@52 0) $generated@@68) (< $generated@@68 18446744073709551616)) (< $generated@@68 64)))) (= ($generated@@66 $generated@@68) (bvshl #x0000000000000001 (concat #b000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@68)))))
 :pattern ( ($generated@@66 $generated@@68))
))))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> (or (not (= $generated@@69 $generated@@71)) (not true)) (=> (and ($generated@@22 $generated@@69 $generated@@70) ($generated@@22 $generated@@70 $generated@@71)) ($generated@@22 $generated@@69 $generated@@71)))
 :pattern ( ($generated@@22 $generated@@69 $generated@@70) ($generated@@22 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@28 $generated@@73 ($generated@@57 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@57 $generated@@73 $generated@@72))
)))
(assert  (=> (<= 1 $generated@@65) (forall (($generated@@74 Int) ) (!  (=> (or ($generated@@67 ($generated@@52 $generated@@74)) (and (< 1 $generated@@65) (and (and (<= ($generated@@52 0) $generated@@74) (< $generated@@74 18446744073709551616)) ($generated@@7 ($generated@@54 $generated@@3 ($generated@@6 (< $generated@@74 64))))))) (= ($generated@@66 ($generated@@52 $generated@@74)) (bvshl #x0000000000000001 (concat #b000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) ($generated@@52 $generated@@74))))))
 :weight 3
 :pattern ( ($generated@@66 ($generated@@52 $generated@@74)))
))))
(assert  (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@75 $generated@@78 $generated@@79 $generated@@80 ($generated@@77 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@75 $generated@@85 $generated@@86 $generated@@87 ($generated@@77 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@75 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@75 $generated@@94 $generated@@95 $generated@@96 ($generated@@77 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@75 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 Bool) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@7 ($generated@@75 $generated@@26 $generated@@24 $generated@@3 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))  (=> (and (or (not (= $generated@@107 $generated@@103)) (not true)) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@104 $generated@@107) $generated@@105)))) $generated@@106))
 :pattern ( ($generated@@75 $generated@@26 $generated@@24 $generated@@3 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))
)))
(assert (= ($generated@@109 $generated@@19) $generated@@0))
(assert (= ($generated@@110 $generated@@19) $generated@@1))
(assert (forall (($generated@@111 Int) ) (! (= ($generated@@57 $generated@@4 ($generated@@8 ($generated@@52 $generated@@111))) ($generated@@54 $generated@@25 ($generated@@57 $generated@@4 ($generated@@8 $generated@@111))))
 :pattern ( ($generated@@57 $generated@@4 ($generated@@8 ($generated@@52 $generated@@111))))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@T) ) (! (= ($generated@@57 $generated@@113 ($generated@@54 $generated@@113 $generated@@112)) ($generated@@54 $generated@@25 ($generated@@57 $generated@@113 $generated@@112)))
 :pattern ( ($generated@@57 $generated@@113 ($generated@@54 $generated@@113 $generated@@112)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () (_ BitVec 64))
(declare-fun $generated@@118 (T@U) (_ BitVec 64))
(declare-fun $generated@@119 () T@T)
(declare-fun $generated@@120 ((_ BitVec 64)) T@U)
(declare-fun $generated@@121 () (_ BitVec 64))
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Int)
(assert  (and (and (= ($generated@@2 $generated@@119) 7) (forall (($generated@@130 (_ BitVec 64)) ) (! (= ($generated@@118 ($generated@@120 $generated@@130)) $generated@@130)
 :pattern ( ($generated@@120 $generated@@130))
))) (forall (($generated@@131 T@U) ) (! (= ($generated@@120 ($generated@@118 $generated@@131)) $generated@@131)
 :pattern ( ($generated@@118 $generated@@131))
))))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@132  (=> (= $generated@@114 ($generated@@76 $generated@@115 $generated@@116 $generated false)) (=> (and (= $generated@@117 ($generated@@118 ($generated@@54 $generated@@119 ($generated@@120 #x0000000000000048)))) (= $generated@@121 ($generated@@118 ($generated@@54 $generated@@119 ($generated@@120 #x000000000000000f))))) (=> (and (and (and ($generated@@122 $generated@@123) ($generated@@124 $generated@@123)) (forall (($generated@@133 T@U) ) (!  (=> (and (or (not (= $generated@@133 $generated@@115)) (not true)) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@116 $generated@@133) $generated)))) (= ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@123 $generated@@133) ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@116 $generated@@133)))
 :pattern ( ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@123 $generated@@133))
))) (and ($generated@@22 $generated@@116 $generated@@123) (= $generated@@125 ($generated@@52 42)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= ($generated@@52 0) $generated@@125) (< $generated@@125 18446744073709551616))) (=> (and (<= ($generated@@52 0) $generated@@125) (< $generated@@125 18446744073709551616)) (=> (= $generated@@126 ($generated@@52 42)) (=> (and (and (and ($generated@@122 $generated@@127) ($generated@@124 $generated@@127)) (forall (($generated@@134 T@U) ) (!  (=> (and (or (not (= $generated@@134 $generated@@115)) (not true)) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@123 $generated@@134) $generated)))) (= ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@127 $generated@@134) ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@123 $generated@@134)))
 :pattern ( ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@127 $generated@@134))
))) (and ($generated@@22 $generated@@123 $generated@@127) (= $generated@@128 ($generated@@52 10)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= ($generated@@52 0) $generated@@128) (< $generated@@128 18446744073709551616))) (=> (and (<= ($generated@@52 0) $generated@@128) (< $generated@@128 18446744073709551616)) (=> (= $generated@@129 ($generated@@52 10)) (=> (and ($generated@@18 $generated@@4 ($generated@@8 $generated@@129) $generated@@19 $generated@@127) (= (ControlFlow 0 2) (- 0 1))) (< $generated@@129 64))))))))))))))
(let (($generated@@135  (=> (and (and ($generated@@122 $generated@@116) ($generated@@124 $generated@@116)) (and (= 2 $generated@@65) (= (ControlFlow 0 5) 2))) $generated@@132)))
$generated@@135)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
