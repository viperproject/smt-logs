(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U T@U Int T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U T@U Int T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@U Int) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@U T@U T@U) Bool)
(declare-fun $generated@@41 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@84 (T@T T@T) T@T)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@T) T@T)
(declare-fun $generated@@88 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@17 $generated@@18) 0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (= ($generated@@1 $generated@@26) 3))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 Int) ($generated@@35 T@U) ) (!  (=> (or ($generated@@27 $generated@@32 ($generated@@21 $generated@@26 $generated@@33) ($generated@@19 $generated@@34) $generated@@35) (and (< 1 $generated@@24) (and (and (and ($generated@@28 $generated@@26 $generated@@33 ($generated@@29 $generated@@32)) (and (<= ($generated@@19 0) $generated@@34) (< $generated@@34 4294967296))) ($generated@@30 $generated@@35 $generated@@32)) (< ($generated@@17 ($generated@@21 $generated@@26 $generated@@33)) 1000)))) (= ($generated@@25 $generated@@32 ($generated@@21 $generated@@26 $generated@@33) ($generated@@19 $generated@@34) $generated@@35) (ite (> ($generated@@17 ($generated@@21 $generated@@26 $generated@@33)) $generated@@34) ($generated@@31 ($generated@@21 $generated@@26 $generated@@33) ($generated@@19 $generated@@34)) $generated@@35)))
 :weight 3
 :pattern ( ($generated@@25 $generated@@32 ($generated@@21 $generated@@26 $generated@@33) ($generated@@19 $generated@@34) $generated@@35))
))))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 Int) ($generated@@47 T@U) ) (!  (=> (and (or ($generated@@27 $generated@@44 $generated@@45 $generated@@46 $generated@@47) (and (< 1 $generated@@24) (and (and (and (and ($generated@@28 $generated@@26 $generated@@45 ($generated@@29 $generated@@44)) ($generated@@41 $generated@@26 $generated@@45 ($generated@@29 $generated@@44) $generated@@43)) (and (<= ($generated@@19 0) $generated@@46) (< $generated@@46 4294967296))) (and ($generated@@30 $generated@@47 $generated@@44) ($generated@@40 $generated@@47 $generated@@44 $generated@@43))) (< ($generated@@17 $generated@@45) 1000)))) ($generated@@42 $generated@@43)) ($generated@@40 ($generated@@25 $generated@@44 $generated@@45 $generated@@46 $generated@@47) $generated@@44 $generated@@43))
 :pattern ( ($generated@@40 ($generated@@25 $generated@@44 $generated@@45 $generated@@46 $generated@@47) $generated@@44 $generated@@43))
))))
(assert (= ($generated@@1 $generated@@48) 4))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 Int) ($generated@@52 T@U) ) (!  (=> (or ($generated@@27 $generated@@49 ($generated@@21 $generated@@26 $generated@@50) ($generated@@19 $generated@@51) ($generated@@21 $generated@@48 $generated@@52)) (and (< 1 $generated@@24) (and (and (and ($generated@@28 $generated@@26 $generated@@50 ($generated@@29 $generated@@49)) (and (<= ($generated@@19 0) $generated@@51) (< $generated@@51 4294967296))) ($generated@@30 $generated@@52 $generated@@49)) (< ($generated@@17 ($generated@@21 $generated@@26 $generated@@50)) 1000)))) (= ($generated@@25 $generated@@49 ($generated@@21 $generated@@26 $generated@@50) ($generated@@19 $generated@@51) ($generated@@21 $generated@@48 $generated@@52)) (ite (> ($generated@@17 ($generated@@21 $generated@@26 $generated@@50)) $generated@@51) ($generated@@31 ($generated@@21 $generated@@26 $generated@@50) ($generated@@19 $generated@@51)) $generated@@52)))
 :weight 3
 :pattern ( ($generated@@25 $generated@@49 ($generated@@21 $generated@@26 $generated@@50) ($generated@@19 $generated@@51) ($generated@@21 $generated@@48 $generated@@52)))
))))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 Int) ($generated@@56 T@U) ) (!  (=> (or ($generated@@27 $generated@@53 $generated@@54 $generated@@55 $generated@@56) (and (< 1 $generated@@24) (and (and (and ($generated@@28 $generated@@26 $generated@@54 ($generated@@29 $generated@@53)) (and (<= ($generated@@19 0) $generated@@55) (< $generated@@55 4294967296))) ($generated@@30 $generated@@56 $generated@@53)) (< ($generated@@17 $generated@@54) 1000)))) (= ($generated@@25 $generated@@53 $generated@@54 $generated@@55 $generated@@56) (ite (> ($generated@@17 $generated@@54) $generated@@55) ($generated@@31 $generated@@54 $generated@@55) $generated@@56)))
 :pattern ( ($generated@@25 $generated@@53 $generated@@54 $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@60 $generated@@57) $generated@@58 $generated@@59) ($generated@@41 $generated@@60 $generated@@57 $generated@@58 $generated@@59))
 :pattern ( ($generated@@40 ($generated@@37 $generated@@60 $generated@@57) $generated@@58 $generated@@59))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 Int) ($generated@@64 T@U) ) (!  (=> (or ($generated@@27 $generated@@61 $generated@@62 $generated@@63 $generated@@64) (and (< 1 $generated@@24) (and (and (and ($generated@@28 $generated@@26 $generated@@62 ($generated@@29 $generated@@61)) (and (<= ($generated@@19 0) $generated@@63) (< $generated@@63 4294967296))) ($generated@@30 $generated@@64 $generated@@61)) (< ($generated@@17 $generated@@62) 1000)))) ($generated@@30 ($generated@@25 $generated@@61 $generated@@62 $generated@@63 $generated@@64) $generated@@61))
 :pattern ( ($generated@@25 $generated@@61 $generated@@62 $generated@@63 $generated@@64))
))))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@30 ($generated@@37 $generated@@67 $generated@@65) $generated@@66) ($generated@@28 $generated@@67 $generated@@65 $generated@@66))
 :pattern ( ($generated@@30 ($generated@@37 $generated@@67 $generated@@65) $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ) (! (<= 0 ($generated@@17 $generated@@68))
 :pattern ( ($generated@@17 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@41 $generated@@26 $generated@@69 ($generated@@29 $generated@@70) $generated@@71) (forall (($generated@@72 Int) ) (!  (=> (and (<= 0 $generated@@72) (< $generated@@72 ($generated@@17 $generated@@69))) ($generated@@40 ($generated@@31 $generated@@69 $generated@@72) $generated@@70 $generated@@71))
 :pattern ( ($generated@@31 $generated@@69 $generated@@72))
)))
 :pattern ( ($generated@@41 $generated@@26 $generated@@69 ($generated@@29 $generated@@70) $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@73 ($generated@@29 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@29 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ) (! (= ($generated@@75 ($generated@@29 $generated@@76)) $generated)
 :pattern ( ($generated@@29 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@36 $generated@@78 ($generated@@37 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@37 $generated@@78 $generated@@77))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@79 $generated@@89 $generated@@90 $generated@@91 ($generated@@85 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@94 $generated@@95) $generated@@92)
 :weight 0
)) (and (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@79 $generated@@96 $generated@@97 $generated@@98 ($generated@@85 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@103 $generated@@104) ($generated@@79 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@103 $generated@@104)))
 :weight 0
)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@79 $generated@@105 $generated@@106 $generated@@107 ($generated@@85 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@112 $generated@@113) ($generated@@79 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@112 $generated@@113)))
 :weight 0
)))) (= ($generated@@1 $generated@@80) 5)) (= ($generated@@1 $generated@@81) 6)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@83 $generated@@114 $generated@@115 ($generated@@86 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@116) $generated@@118) $generated@@116)
 :weight 0
))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@123 $generated@@124) (= ($generated@@83 $generated@@119 $generated@@120 ($generated@@86 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@121) $generated@@124) ($generated@@83 $generated@@119 $generated@@120 $generated@@122 $generated@@124)))
 :weight 0
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (= ($generated@@1 ($generated@@84 $generated@@125 $generated@@126)) 7))) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (! (= ($generated@@87 ($generated@@84 $generated@@127 $generated@@128)) $generated@@127)
 :pattern ( ($generated@@84 $generated@@127 $generated@@128))
))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (! (= ($generated@@88 ($generated@@84 $generated@@129 $generated@@130)) $generated@@130)
 :pattern ( ($generated@@84 $generated@@129 $generated@@130))
))))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 Bool) ($generated@@135 T@U) ($generated@@136 T@U) ) (! (= ($generated@@6 ($generated@@79 $generated@@80 $generated@@81 $generated@@2 ($generated@@82 $generated@@131 $generated@@132 $generated@@133 $generated@@134) $generated@@135 $generated@@136))  (=> (and (or (not (= $generated@@135 $generated@@131)) (not true)) ($generated@@6 ($generated@@36 $generated@@2 ($generated@@83 $generated@@81 $generated@@48 ($generated@@83 $generated@@80 ($generated@@84 $generated@@81 $generated@@48) $generated@@132 $generated@@135) $generated@@133)))) $generated@@134))
 :pattern ( ($generated@@79 $generated@@80 $generated@@81 $generated@@2 ($generated@@82 $generated@@131 $generated@@132 $generated@@133 $generated@@134) $generated@@135 $generated@@136))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> ($generated@@30 $generated@@137 ($generated@@29 $generated@@138)) (and (= ($generated@@37 $generated@@26 ($generated@@36 $generated@@26 $generated@@137)) $generated@@137) ($generated@@28 $generated@@26 ($generated@@36 $generated@@26 $generated@@137) ($generated@@29 $generated@@138))))
 :pattern ( ($generated@@30 $generated@@137 ($generated@@29 $generated@@138)))
)))
(assert (forall (($generated@@139 Int) ) (! (= ($generated@@37 $generated@@3 ($generated@@7 ($generated@@19 $generated@@139))) ($generated@@21 $generated@@48 ($generated@@37 $generated@@3 ($generated@@7 $generated@@139))))
 :pattern ( ($generated@@37 $generated@@3 ($generated@@7 ($generated@@19 $generated@@139))))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@T) ) (! (= ($generated@@37 $generated@@141 ($generated@@21 $generated@@141 $generated@@140)) ($generated@@21 $generated@@48 ($generated@@37 $generated@@141 $generated@@140)))
 :pattern ( ($generated@@37 $generated@@141 ($generated@@21 $generated@@141 $generated@@140)))
)))
(assert (forall (($generated@@142 T@U) ) (!  (=> (= ($generated@@17 $generated@@142) 0) (= $generated@@142 $generated@@18))
 :pattern ( ($generated@@17 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (! (= ($generated@@28 $generated@@26 $generated@@143 ($generated@@29 $generated@@144)) (forall (($generated@@145 Int) ) (!  (=> (and (<= 0 $generated@@145) (< $generated@@145 ($generated@@17 $generated@@143))) ($generated@@30 ($generated@@31 $generated@@143 $generated@@145) $generated@@144))
 :pattern ( ($generated@@31 $generated@@143 $generated@@145))
)))
 :pattern ( ($generated@@28 $generated@@26 $generated@@143 ($generated@@29 $generated@@144)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@156 true))
(let (($generated@@157  (=> (and (> ($generated@@17 $generated@@146) $generated@@147) (= (ControlFlow 0 3) (- 0 2))) (and (<= 0 $generated@@147) (< $generated@@147 ($generated@@17 $generated@@146))))))
(let (($generated@@158  (=> (= $generated@@148 ($generated@@17 $generated@@146)) (and (=> (= (ControlFlow 0 5) (- 0 7)) (and (<= ($generated@@19 0) $generated@@148) (< $generated@@148 4294967296))) (=> (and (<= ($generated@@19 0) $generated@@148) (< $generated@@148 4294967296)) (=> (= $generated@@149 ($generated@@17 $generated@@146)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (and (<= ($generated@@19 0) $generated@@149) (< $generated@@149 4294967296))) (=> (and (<= ($generated@@19 0) $generated@@149) (< $generated@@149 4294967296)) (and (=> (= (ControlFlow 0 5) 3) $generated@@157) (=> (= (ControlFlow 0 5) 4) $generated@@156))))))))))
(let (($generated@@159 true))
(let (($generated@@160  (=> (and (= $generated@@150 ($generated@@82 $generated@@151 $generated@@152 $generated@@0 false)) (< ($generated@@17 $generated@@146) 1000)) (and (=> (= (ControlFlow 0 8) 1) $generated@@159) (=> (= (ControlFlow 0 8) 5) $generated@@158)))))
(let (($generated@@161  (=> (and (and ($generated@@42 $generated@@152) ($generated@@153 $generated@@152)) ($generated@@28 $generated@@26 $generated@@146 ($generated@@29 $generated@@154))) (=> (and (and (and (<= ($generated@@19 0) $generated@@147) (< $generated@@147 4294967296)) ($generated@@30 $generated@@155 $generated@@154)) (and (= 1 $generated@@24) (= (ControlFlow 0 9) 8))) $generated@@160))))
$generated@@161)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
