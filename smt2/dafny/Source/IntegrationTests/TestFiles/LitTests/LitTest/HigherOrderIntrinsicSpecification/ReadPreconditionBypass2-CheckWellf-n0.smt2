(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) Int)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@42 (T@U T@U) T@U)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@74 () Int)
(declare-fun $generated@@75 (T@U T@U) T@U)
(declare-fun $generated@@76 (T@U T@U) Bool)
(declare-fun $generated@@77 (T@U) Bool)
(declare-fun $generated@@80 (T@T T@U) T@U)
(declare-fun $generated@@83 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $generated@@84 () T@U)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@U) T@U)
(declare-fun $generated@@135 (T@U) T@U)
(declare-fun $generated@@136 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated) 0))
(assert (= ($generated@@26 $generated) $generated@@0))
(assert (= ($generated@@27 $generated@@28) $generated@@1))
(assert (= ($generated@@9 $generated@@30) 3))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@34 $generated@@31)  (or (= $generated@@34 $generated@@32) (= ($generated@@33 $generated@@34) $generated@@31)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@34 $generated@@31))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@35 $generated@@30 $generated@@37 $generated@@36 $generated@@38) ($generated@@35 $generated@@30 $generated@@37 $generated@@31 $generated@@38))
 :pattern ( ($generated@@35 $generated@@30 $generated@@37 $generated@@36 $generated@@38))
 :pattern ( ($generated@@35 $generated@@30 $generated@@37 $generated@@31 $generated@@38))
)))
(assert (= ($generated@@9 $generated@@39) 4))
(assert ($generated@@29 $generated@@39 $generated@@28 $generated@@40))
(assert (= ($generated@@25 $generated@@41) 0))
(assert (= ($generated@@42 $generated@@4 $generated@@8) $generated@@41))
(assert  (not ($generated@@43 $generated@@41)))
(assert  (and (and (and (and (and (and (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@45 $generated@@52 $generated@@53 ($generated@@49 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@56) $generated@@54)
 :weight 0
)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (or (= $generated@@61 $generated@@62) (= ($generated@@45 $generated@@57 $generated@@58 ($generated@@49 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@59) $generated@@62) ($generated@@45 $generated@@57 $generated@@58 $generated@@60 $generated@@62)))
 :weight 0
))) (= ($generated@@9 $generated@@46) 5)) (= ($generated@@9 $generated@@47) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (= ($generated@@9 ($generated@@48 $generated@@63 $generated@@64)) 7))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@50 ($generated@@48 $generated@@65 $generated@@66)) $generated@@65)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (! (= ($generated@@51 ($generated@@48 $generated@@67 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@48 $generated@@67 $generated@@68))
))))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@35 $generated@@30 $generated@@69 $generated@@31 $generated@@70)  (or (= $generated@@69 $generated@@32) ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@70 $generated@@69) $generated)))))
 :pattern ( ($generated@@35 $generated@@30 $generated@@69 $generated@@31 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@71 $generated@@73 $generated@@72) $generated@@72)
 :pattern ( ($generated@@71 $generated@@73 $generated@@72))
)))
(assert  (=> (<= 1 $generated@@74) (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> (or ($generated@@76 $generated@@78 $generated@@79) (and (< 1 $generated@@74) (and (and ($generated@@77 $generated@@78) (and ($generated@@29 $generated@@30 $generated@@79 $generated@@36) ($generated@@35 $generated@@30 $generated@@79 $generated@@36 $generated@@78))) ($generated@@14 ($generated@@71 $generated@@10 ($generated@@13 false)))))) ($generated@@29 $generated@@39 ($generated@@75 $generated@@78 $generated@@79) $generated@@40))
 :pattern ( ($generated@@75 $generated@@78 $generated@@79))
))))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@80 $generated@@82 ($generated@@44 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@44 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@83 $generated@@36 $generated@@40 $generated@@85 $generated@@84 $generated@@86) ($generated@@80 $generated@@39 ($generated@@75 $generated@@85 ($generated@@44 $generated@@30 $generated@@86))))
 :pattern ( ($generated@@83 $generated@@36 $generated@@40 $generated@@85 $generated@@84 $generated@@86))
)))
(assert ($generated@@43 $generated))
(assert  (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@87 $generated@@90 $generated@@91 $generated@@92 ($generated@@89 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@95 $generated@@96) $generated@@93)
 :weight 0
)) (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@87 $generated@@97 $generated@@98 $generated@@99 ($generated@@89 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@87 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@87 $generated@@106 $generated@@107 $generated@@108 ($generated@@89 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@87 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@14 ($generated@@87 $generated@@30 $generated@@46 $generated@@10 ($generated@@88 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))  (=> (and (or (not (= $generated@@119 $generated@@115)) (not true)) ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@116 $generated@@119) $generated@@117)))) (= $generated@@119 $generated@@118)))
 :pattern ( ($generated@@87 $generated@@30 $generated@@46 $generated@@10 ($generated@@88 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> (and ($generated@@77 $generated@@121) (and (or (not (= $generated@@122 $generated@@32)) (not true)) (= ($generated@@33 $generated@@122) $generated@@31))) ($generated@@29 $generated@@30 ($generated@@44 $generated@@30 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@121 $generated@@122) $generated@@41)) $generated@@36))
 :pattern ( ($generated@@44 $generated@@30 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@121 $generated@@122) $generated@@41)))
)))
(assert (forall (($generated@@123 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@123 $generated@@36)  (and ($generated@@29 $generated@@30 $generated@@123 $generated@@31) (or (not (= $generated@@123 $generated@@32)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@123 $generated@@36))
 :pattern ( ($generated@@29 $generated@@30 $generated@@123 $generated@@31))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (!  (=> (and (and ($generated@@77 $generated@@124) (and (or (not (= $generated@@125 $generated@@32)) (not true)) (= ($generated@@33 $generated@@125) $generated@@31))) ($generated@@14 ($generated@@44 $generated@@10 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@124 $generated@@125) $generated)))) ($generated@@35 $generated@@30 ($generated@@44 $generated@@30 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@124 $generated@@125) $generated@@41)) $generated@@36 $generated@@124))
 :pattern ( ($generated@@44 $generated@@30 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@124 $generated@@125) $generated@@41)))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (and (= ($generated@@126 ($generated@@42 $generated@@127 $generated@@128)) $generated@@127) (= ($generated@@26 ($generated@@42 $generated@@127 $generated@@128)) $generated@@128))
 :pattern ( ($generated@@42 $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@T) ) (! (= ($generated@@44 $generated@@130 ($generated@@80 $generated@@130 $generated@@129)) $generated@@129)
 :pattern ( ($generated@@80 $generated@@130 $generated@@129))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (! (= ($generated@@75 $generated@@131 $generated@@132) ($generated@@44 $generated@@39 ($generated@@83 $generated@@36 $generated@@40 $generated@@131 $generated@@84 ($generated@@80 $generated@@30 $generated@@132))))
 :pattern ( ($generated@@75 $generated@@131 $generated@@132))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (!  (=> (and ($generated@@77 $generated@@134) ($generated@@29 $generated@@39 $generated@@133 $generated@@40)) ($generated@@35 $generated@@39 $generated@@133 $generated@@40 $generated@@134))
 :pattern ( ($generated@@35 $generated@@39 $generated@@133 $generated@@40 $generated@@134))
)))
(assert (= ($generated@@135 $generated@@40) $generated@@2))
(assert (= ($generated@@136 $generated@@40) $generated@@6))
(assert (= ($generated@@135 $generated@@36) $generated@@3))
(assert (= ($generated@@136 $generated@@36) $generated@@7))
(assert (= ($generated@@135 $generated@@31) $generated@@5))
(assert (= ($generated@@136 $generated@@31) $generated@@7))
(assert (= $generated@@28 ($generated@@71 $generated@@39 $generated@@28)))
(assert  (=> (<= 1 $generated@@74) (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> (or ($generated@@76 $generated@@137 $generated@@138) (and (< 1 $generated@@74) (and (and ($generated@@77 $generated@@137) ($generated@@29 $generated@@30 $generated@@138 $generated@@36)) ($generated@@14 ($generated@@71 $generated@@10 ($generated@@13 false)))))) (= ($generated@@75 $generated@@137 $generated@@138) ($generated@@71 $generated@@39 $generated@@28)))
 :pattern ( ($generated@@75 $generated@@137 $generated@@138) ($generated@@77 $generated@@137))
))))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@T) ) (! (= ($generated@@80 $generated@@140 ($generated@@71 $generated@@140 $generated@@139)) ($generated@@71 $generated@@47 ($generated@@80 $generated@@140 $generated@@139)))
 :pattern ( ($generated@@80 $generated@@140 ($generated@@71 $generated@@140 $generated@@139)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () Bool)
(declare-fun $generated@@145 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@146 true))
(let (($generated@@147 true))
(let (($generated@@148  (=> (and (= $generated@@141 ($generated@@88 $generated@@32 $generated@@142 $generated ($generated@@44 $generated@@30 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@142 $generated@@143) $generated@@41)))) ($generated@@14 ($generated@@71 $generated@@10 ($generated@@13 false)))) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (not (= $generated@@143 $generated@@32)) (not true))) (=> (or (not (= $generated@@143 $generated@@32)) (not true)) (=> (= $generated@@144 ($generated@@14 ($generated@@87 $generated@@30 $generated@@46 $generated@@10 $generated@@141 $generated@@143 $generated@@41))) (and (=> (= (ControlFlow 0 3) (- 0 5)) $generated@@144) (=> $generated@@144 (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (not (= $generated@@143 $generated@@32)) (not true))) (=> (or (not (= $generated@@143 $generated@@32)) (not true)) (and (=> (= (ControlFlow 0 3) 1) $generated@@147) (=> (= (ControlFlow 0 3) 2) $generated@@146))))))))))))
(let (($generated@@149  (=> (and (and (and ($generated@@77 $generated@@142) ($generated@@145 $generated@@142)) ($generated@@29 $generated@@30 $generated@@143 $generated@@36)) (and (= 1 $generated@@74) (= (ControlFlow 0 7) 3))) $generated@@148)))
$generated@@149)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
