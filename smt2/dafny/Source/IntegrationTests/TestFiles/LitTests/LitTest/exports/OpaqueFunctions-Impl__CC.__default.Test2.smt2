(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (Bool) Int)
(declare-fun $generated@@0 (Int) Int)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U) T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@31 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@T T@T) T@T)
(declare-fun $generated@@34 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@37 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (= ($generated true) ($generated@@0 0)))
(assert (= ($generated true) ($generated@@0 0)))
(assert (forall (($generated@@17 Int) ) (! (= ($generated@@0 $generated@@17) $generated@@17)
 :pattern ( ($generated@@0 $generated@@17))
)))
(assert (forall (($generated@@19 T@U) ($generated@@20 T@T) ) (! (= ($generated@@18 $generated@@20 $generated@@19) $generated@@19)
 :pattern ( ($generated@@18 $generated@@20 $generated@@19))
)))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@T) ) (! (= ($generated@@22 $generated@@24 ($generated@@21 $generated@@24 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@21 $generated@@24 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@21 $generated@@26 ($generated@@22 $generated@@26 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@22 $generated@@26 $generated@@25))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@27 $generated@@38 $generated@@39 $generated@@40 ($generated@@34 $generated@@38 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@44 $generated@@41) $generated@@43 $generated@@44) $generated@@41)
 :weight 0
)) (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (!  (or (= $generated@@50 $generated@@52) (= ($generated@@27 $generated@@45 $generated@@46 $generated@@47 ($generated@@34 $generated@@45 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@51 $generated@@48) $generated@@52 $generated@@53) ($generated@@27 $generated@@45 $generated@@46 $generated@@47 $generated@@49 $generated@@52 $generated@@53)))
 :weight 0
)) (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (or (= $generated@@60 $generated@@62) (= ($generated@@27 $generated@@54 $generated@@55 $generated@@56 ($generated@@34 $generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@60 $generated@@57) $generated@@61 $generated@@62) ($generated@@27 $generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@61 $generated@@62)))
 :weight 0
)))) (= ($generated@@1 $generated@@28) 3)) (= ($generated@@1 $generated@@29) 4)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@31 $generated@@63 $generated@@64 ($generated@@35 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@65) $generated@@67) $generated@@65)
 :weight 0
))) (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@72 $generated@@73) (= ($generated@@31 $generated@@68 $generated@@69 ($generated@@35 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@70) $generated@@73) ($generated@@31 $generated@@68 $generated@@69 $generated@@71 $generated@@73)))
 :weight 0
))) (= ($generated@@1 $generated@@32) 5)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ) (= ($generated@@1 ($generated@@33 $generated@@74 $generated@@75)) 6))) (forall (($generated@@76 T@T) ($generated@@77 T@T) ) (! (= ($generated@@36 ($generated@@33 $generated@@76 $generated@@77)) $generated@@76)
 :pattern ( ($generated@@33 $generated@@76 $generated@@77))
))) (forall (($generated@@78 T@T) ($generated@@79 T@T) ) (! (= ($generated@@37 ($generated@@33 $generated@@78 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@33 $generated@@78 $generated@@79))
))))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 Bool) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@6 ($generated@@27 $generated@@28 $generated@@29 $generated@@2 ($generated@@30 $generated@@80 $generated@@81 $generated@@82 $generated@@83) $generated@@84 $generated@@85))  (=> (and (or (not (= $generated@@84 $generated@@80)) (not true)) ($generated@@6 ($generated@@21 $generated@@2 ($generated@@31 $generated@@29 $generated@@32 ($generated@@31 $generated@@28 ($generated@@33 $generated@@29 $generated@@32) $generated@@81 $generated@@84) $generated@@82)))) $generated@@83))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 $generated@@2 ($generated@@30 $generated@@80 $generated@@81 $generated@@82 $generated@@83) $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@86 Int) ) (! (= ($generated@@22 $generated@@3 ($generated@@7 ($generated@@0 $generated@@86))) ($generated@@18 $generated@@32 ($generated@@22 $generated@@3 ($generated@@7 $generated@@86))))
 :pattern ( ($generated@@22 $generated@@3 ($generated@@7 ($generated@@0 $generated@@86))))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@22 $generated@@88 ($generated@@18 $generated@@88 $generated@@87)) ($generated@@18 $generated@@32 ($generated@@22 $generated@@88 $generated@@87)))
 :pattern ( ($generated@@22 $generated@@88 ($generated@@18 $generated@@88 $generated@@87)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@89 () T@U)
(declare-fun $generated@@90 () T@U)
(declare-fun $generated@@91 () T@U)
(declare-fun $generated@@92 () T@U)
(declare-fun $generated@@93 (T@U) Bool)
(declare-fun $generated@@94 () T@U)
(declare-fun $generated@@95 (T@U) Bool)
(declare-fun $generated@@96 () Bool)
(declare-fun $generated@@97 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@98  (=> (= $generated@@89 ($generated@@30 $generated@@90 $generated@@91 $generated@@92 false)) (=> (and (and (and ($generated@@93 $generated@@94) ($generated@@95 $generated@@94)) (= $generated@@91 $generated@@94)) (and $generated@@96 (= (ControlFlow 0 2) (- 0 1)))) (= ($generated $generated@@96) ($generated@@0 0))))))
(let (($generated@@99  (=> (and (and ($generated@@93 $generated@@91) ($generated@@95 $generated@@91)) (and (= 0 $generated@@97) (= (ControlFlow 0 3) 2))) $generated@@98)))
$generated@@99)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
