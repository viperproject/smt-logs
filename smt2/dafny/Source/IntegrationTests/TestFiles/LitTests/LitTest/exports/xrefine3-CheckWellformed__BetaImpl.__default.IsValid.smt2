(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@37 () Int)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@40 (T@T T@U T@U) Bool)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 (T@U Int) T@U)
(declare-fun $generated@@44 (Bool) Bool)
(declare-fun $generated@@45 (Bool) Bool)
(declare-fun $generated@@50 (T@U T@U) Bool)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@T T@T) T@T)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 ($generated@@27 $generated@@30 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@27 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@31 ($generated@@28 $generated@@36 $generated@@33) $generated@@34 $generated@@35) ($generated@@32 $generated@@36 $generated@@33 $generated@@34 $generated@@35))
 :pattern ( ($generated@@31 ($generated@@28 $generated@@36 $generated@@33) $generated@@34 $generated@@35))
)))
(assert (= ($generated@@3 $generated@@41) 3))
(assert  (=> (<= 1 $generated@@37) (forall (($generated@@46 T@U) ) (!  (=> (or ($generated@@39 $generated@@46) (and (< 1 $generated@@37) ($generated@@40 $generated@@41 $generated@@46 ($generated@@42 $generated)))) (and (forall (($generated@@47 Int) ) (!  (=> (<= ($generated@@22 0) $generated@@47) (=> (< $generated@@47 ($generated@@20 $generated@@46)) ($generated@@44 ($generated@@8 ($generated@@27 $generated@@4 ($generated@@43 $generated@@46 $generated@@47))))))
 :pattern ( ($generated@@27 $generated@@4 ($generated@@43 $generated@@46 $generated@@47)))
)) (= ($generated@@38 $generated@@46) (forall (($generated@@48 Int) ) (!  (=> (and (<= ($generated@@22 0) $generated@@48) (< $generated@@48 ($generated@@20 $generated@@46))) ($generated@@45 ($generated@@8 ($generated@@27 $generated@@4 ($generated@@43 $generated@@46 $generated@@48)))))
 :pattern ( ($generated@@27 $generated@@4 ($generated@@43 $generated@@46 $generated@@48)))
)))))
 :pattern ( ($generated@@38 $generated@@46))
))))
(assert (forall (($generated@@49 Bool) ) (! (= ($generated@@45 $generated@@49) $generated@@49)
 :pattern ( ($generated@@45 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@50 $generated@@51 $generated) (and (= ($generated@@28 $generated@@4 ($generated@@27 $generated@@4 $generated@@51)) $generated@@51) ($generated@@40 $generated@@4 ($generated@@27 $generated@@4 $generated@@51) $generated)))
 :pattern ( ($generated@@50 $generated@@51 $generated))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@50 ($generated@@28 $generated@@54 $generated@@52) $generated@@53) ($generated@@40 $generated@@54 $generated@@52 $generated@@53))
 :pattern ( ($generated@@50 ($generated@@28 $generated@@54 $generated@@52) $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (<= 0 ($generated@@20 $generated@@55))
 :pattern ( ($generated@@20 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@32 $generated@@41 $generated@@56 ($generated@@42 $generated@@57) $generated@@58) (forall (($generated@@59 Int) ) (!  (=> (and (<= 0 $generated@@59) (< $generated@@59 ($generated@@20 $generated@@56))) ($generated@@31 ($generated@@43 $generated@@56 $generated@@59) $generated@@57 $generated@@58))
 :pattern ( ($generated@@43 $generated@@56 $generated@@59))
)))
 :pattern ( ($generated@@32 $generated@@41 $generated@@56 ($generated@@42 $generated@@57) $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@60 ($generated@@42 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@42 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ) (! (= ($generated@@19 ($generated@@42 $generated@@62)) $generated@@1)
 :pattern ( ($generated@@42 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@27 $generated@@64 ($generated@@28 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@28 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@45 ($generated@@8 ($generated@@24 $generated@@4 $generated@@65))) ($generated@@8 ($generated@@24 $generated@@4 $generated@@65)))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@8 ($generated@@24 $generated@@4 $generated@@65))))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@66 $generated@@77 $generated@@78 $generated@@79 ($generated@@73 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@82 $generated@@83) $generated@@80)
 :weight 0
)) (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@66 $generated@@84 $generated@@85 $generated@@86 ($generated@@73 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@66 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@66 $generated@@93 $generated@@94 $generated@@95 ($generated@@73 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)))) (= ($generated@@3 $generated@@67) 4)) (= ($generated@@3 $generated@@68) 5)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@70 $generated@@102 $generated@@103 ($generated@@74 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@106) $generated@@104)
 :weight 0
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@111 $generated@@112) (= ($generated@@70 $generated@@107 $generated@@108 ($generated@@74 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@112) ($generated@@70 $generated@@107 $generated@@108 $generated@@110 $generated@@112)))
 :weight 0
))) (= ($generated@@3 $generated@@71) 6)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (= ($generated@@3 ($generated@@72 $generated@@113 $generated@@114)) 7))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@75 ($generated@@72 $generated@@115 $generated@@116)) $generated@@115)
 :pattern ( ($generated@@72 $generated@@115 $generated@@116))
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@76 ($generated@@72 $generated@@117 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@72 $generated@@117 $generated@@118))
))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@8 ($generated@@66 $generated@@67 $generated@@68 $generated@@4 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@8 ($generated@@27 $generated@@4 ($generated@@70 $generated@@68 $generated@@71 ($generated@@70 $generated@@67 ($generated@@72 $generated@@68 $generated@@71) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@66 $generated@@67 $generated@@68 $generated@@4 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> ($generated@@50 $generated@@125 ($generated@@42 $generated@@126)) (and (= ($generated@@28 $generated@@41 ($generated@@27 $generated@@41 $generated@@125)) $generated@@125) ($generated@@40 $generated@@41 ($generated@@27 $generated@@41 $generated@@125) ($generated@@42 $generated@@126))))
 :pattern ( ($generated@@50 $generated@@125 ($generated@@42 $generated@@126)))
)))
(assert  (=> (<= 1 $generated@@37) (forall (($generated@@127 T@U) ) (!  (=> (or ($generated@@39 ($generated@@24 $generated@@41 $generated@@127)) (and (< 1 $generated@@37) ($generated@@40 $generated@@41 $generated@@127 ($generated@@42 $generated)))) (and (forall (($generated@@128 Int) ) (!  (=> (<= ($generated@@22 0) $generated@@128) (=> (< $generated@@128 ($generated@@20 ($generated@@24 $generated@@41 $generated@@127))) ($generated@@44 ($generated@@8 ($generated@@27 $generated@@4 ($generated@@43 ($generated@@24 $generated@@41 $generated@@127) $generated@@128))))))
 :pattern ( ($generated@@27 $generated@@4 ($generated@@43 $generated@@127 $generated@@128)))
)) (= ($generated@@38 ($generated@@24 $generated@@41 $generated@@127)) (forall (($generated@@129 Int) ) (!  (=> (and (<= ($generated@@22 0) $generated@@129) (< $generated@@129 ($generated@@20 ($generated@@24 $generated@@41 $generated@@127)))) ($generated@@45 ($generated@@8 ($generated@@27 $generated@@4 ($generated@@43 ($generated@@24 $generated@@41 $generated@@127) $generated@@129)))))
 :pattern ( ($generated@@27 $generated@@4 ($generated@@43 $generated@@127 $generated@@129)))
)))))
 :weight 3
 :pattern ( ($generated@@38 ($generated@@24 $generated@@41 $generated@@127)))
))))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@28 $generated@@5 ($generated@@9 ($generated@@22 $generated@@130))) ($generated@@24 $generated@@71 ($generated@@28 $generated@@5 ($generated@@9 $generated@@130))))
 :pattern ( ($generated@@28 $generated@@5 ($generated@@9 ($generated@@22 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@28 $generated@@132 ($generated@@24 $generated@@132 $generated@@131)) ($generated@@24 $generated@@71 ($generated@@28 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@28 $generated@@132 ($generated@@24 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (!  (=> (= ($generated@@20 $generated@@133) 0) (= $generated@@133 $generated@@21))
 :pattern ( ($generated@@20 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! ($generated@@32 $generated@@4 $generated@@135 $generated $generated@@134)
 :pattern ( ($generated@@32 $generated@@4 $generated@@135 $generated $generated@@134))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@40 $generated@@41 $generated@@136 ($generated@@42 $generated@@137)) (forall (($generated@@138 Int) ) (!  (=> (and (<= 0 $generated@@138) (< $generated@@138 ($generated@@20 $generated@@136))) ($generated@@50 ($generated@@43 $generated@@136 $generated@@138) $generated@@137))
 :pattern ( ($generated@@43 $generated@@136 $generated@@138))
)))
 :pattern ( ($generated@@40 $generated@@41 $generated@@136 ($generated@@42 $generated@@137)))
)))
(assert (forall (($generated@@139 T@U) ) (! ($generated@@40 $generated@@4 $generated@@139 $generated)
 :pattern ( ($generated@@40 $generated@@4 $generated@@139 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () Bool)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 (T@U) Bool)
(declare-fun $generated@@147 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@148 true))
(let (($generated@@149  (=> (and (not (and (<= ($generated@@22 0) $generated@@140) (< $generated@@140 ($generated@@20 $generated@@141)))) (= (ControlFlow 0 6) 3)) $generated@@148)))
(let (($generated@@150  (=> (and (<= ($generated@@22 0) $generated@@140) (< $generated@@140 ($generated@@20 $generated@@141))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= 0 $generated@@140) (< $generated@@140 ($generated@@20 $generated@@141)))) (=> (and (<= 0 $generated@@140) (< $generated@@140 ($generated@@20 $generated@@141))) (=> (and (and (= $generated@@142 ($generated@@8 ($generated@@27 $generated@@4 ($generated@@43 $generated@@141 $generated@@140)))) ($generated@@32 $generated@@4 ($generated@@7 $generated@@142) $generated $generated@@143)) (and ($generated@@44 ($generated@@8 ($generated@@27 $generated@@4 ($generated@@43 $generated@@141 $generated@@140)))) (= (ControlFlow 0 4) 3))) $generated@@148))))))
(let (($generated@@151  (=> (< $generated@@140 ($generated@@22 0)) (and (=> (= (ControlFlow 0 8) 4) $generated@@150) (=> (= (ControlFlow 0 8) 6) $generated@@149)))))
(let (($generated@@152  (=> (<= ($generated@@22 0) $generated@@140) (and (=> (= (ControlFlow 0 7) 4) $generated@@150) (=> (= (ControlFlow 0 7) 6) $generated@@149)))))
(let (($generated@@153  (and (=> (= (ControlFlow 0 9) 7) $generated@@152) (=> (= (ControlFlow 0 9) 8) $generated@@151))))
(let (($generated@@154 true))
(let (($generated@@155 true))
(let (($generated@@156  (=> (= $generated@@144 ($generated@@69 $generated@@145 $generated@@143 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 10) 1) $generated@@155) (=> (= (ControlFlow 0 10) 9) $generated@@153)) (=> (= (ControlFlow 0 10) 2) $generated@@154)))))
(let (($generated@@157  (=> (and (and (and ($generated@@146 $generated@@143) ($generated@@147 $generated@@143)) ($generated@@40 $generated@@41 $generated@@141 ($generated@@42 $generated))) (and (= 1 $generated@@37) (= (ControlFlow 0 11) 10))) $generated@@156)))
$generated@@157)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
