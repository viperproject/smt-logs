(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (Bool) Bool)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T T@U) T@U)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 (Bool) T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@29 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@T T@T) T@T)
(declare-fun $generated@@32 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@35 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@2) 0) (= ($generated@@4 $generated@@5) 1)) (= ($generated@@4 $generated@@6) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@0 ($generated@@3 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@3 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@3 ($generated@@0 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@0 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (= ($generated true) ($generated@@0 ($generated@@1 $generated@@2 ($generated@@3 true)))))
(assert (= ($generated true) ($generated@@0 ($generated@@1 $generated@@2 ($generated@@3 true)))))
(assert (forall (($generated@@17 T@U) ($generated@@18 T@T) ) (! (= ($generated@@1 $generated@@18 $generated@@17) $generated@@17)
 :pattern ( ($generated@@1 $generated@@18 $generated@@17))
)))
(assert (forall (($generated@@21 T@U) ($generated@@22 T@T) ) (! (= ($generated@@20 $generated@@22 ($generated@@19 $generated@@22 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@19 $generated@@22 $generated@@21))
)))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@T) ) (! (= ($generated@@19 $generated@@24 ($generated@@20 $generated@@24 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@20 $generated@@24 $generated@@23))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@25 $generated@@36 $generated@@37 $generated@@38 ($generated@@32 $generated@@36 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@42 $generated@@39) $generated@@41 $generated@@42) $generated@@39)
 :weight 0
)) (and (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (!  (or (= $generated@@48 $generated@@50) (= ($generated@@25 $generated@@43 $generated@@44 $generated@@45 ($generated@@32 $generated@@43 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@49 $generated@@46) $generated@@50 $generated@@51) ($generated@@25 $generated@@43 $generated@@44 $generated@@45 $generated@@47 $generated@@50 $generated@@51)))
 :weight 0
)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (or (= $generated@@58 $generated@@60) (= ($generated@@25 $generated@@52 $generated@@53 $generated@@54 ($generated@@32 $generated@@52 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@58 $generated@@55) $generated@@59 $generated@@60) ($generated@@25 $generated@@52 $generated@@53 $generated@@54 $generated@@56 $generated@@59 $generated@@60)))
 :weight 0
)))) (= ($generated@@4 $generated@@26) 3)) (= ($generated@@4 $generated@@27) 4)) (forall (($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@29 $generated@@61 $generated@@62 ($generated@@33 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@63) $generated@@65) $generated@@63)
 :weight 0
))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (or (= $generated@@70 $generated@@71) (= ($generated@@29 $generated@@66 $generated@@67 ($generated@@33 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@68) $generated@@71) ($generated@@29 $generated@@66 $generated@@67 $generated@@69 $generated@@71)))
 :weight 0
))) (= ($generated@@4 $generated@@30) 5)) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (= ($generated@@4 ($generated@@31 $generated@@72 $generated@@73)) 6))) (forall (($generated@@74 T@T) ($generated@@75 T@T) ) (! (= ($generated@@34 ($generated@@31 $generated@@74 $generated@@75)) $generated@@74)
 :pattern ( ($generated@@31 $generated@@74 $generated@@75))
))) (forall (($generated@@76 T@T) ($generated@@77 T@T) ) (! (= ($generated@@35 ($generated@@31 $generated@@76 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@31 $generated@@76 $generated@@77))
))))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 Bool) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@0 ($generated@@25 $generated@@26 $generated@@27 $generated@@2 ($generated@@28 $generated@@78 $generated@@79 $generated@@80 $generated@@81) $generated@@82 $generated@@83))  (=> (and (or (not (= $generated@@82 $generated@@78)) (not true)) ($generated@@0 ($generated@@19 $generated@@2 ($generated@@29 $generated@@27 $generated@@30 ($generated@@29 $generated@@26 ($generated@@31 $generated@@27 $generated@@30) $generated@@79 $generated@@82) $generated@@80)))) $generated@@81))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27 $generated@@2 ($generated@@28 $generated@@78 $generated@@79 $generated@@80 $generated@@81) $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@T) ) (! (= ($generated@@20 $generated@@85 ($generated@@1 $generated@@85 $generated@@84)) ($generated@@1 $generated@@30 ($generated@@20 $generated@@85 $generated@@84)))
 :pattern ( ($generated@@20 $generated@@85 ($generated@@1 $generated@@85 $generated@@84)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@86 () T@U)
(declare-fun $generated@@87 () T@U)
(declare-fun $generated@@88 () T@U)
(declare-fun $generated@@89 () T@U)
(declare-fun $generated@@90 (T@U) Bool)
(declare-fun $generated@@91 () T@U)
(declare-fun $generated@@92 (T@U) Bool)
(declare-fun $generated@@93 () Bool)
(declare-fun $generated@@94 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@95  (=> (= $generated@@86 ($generated@@28 $generated@@87 $generated@@88 $generated@@89 false)) (=> (and (and (and ($generated@@90 $generated@@91) ($generated@@92 $generated@@91)) (= $generated@@88 $generated@@91)) (and $generated@@93 (= (ControlFlow 0 2) (- 0 1)))) (= ($generated $generated@@93) ($generated@@0 ($generated@@1 $generated@@2 ($generated@@3 true))))))))
(let (($generated@@96  (=> (and (and ($generated@@90 $generated@@88) ($generated@@92 $generated@@88)) (and (= 0 $generated@@94) (= (ControlFlow 0 3) 2))) $generated@@95)))
$generated@@96)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
