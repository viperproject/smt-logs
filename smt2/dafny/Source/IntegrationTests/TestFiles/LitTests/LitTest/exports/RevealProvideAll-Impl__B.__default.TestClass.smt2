(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U T@U T@U) Bool)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@36 (T@U T@U) Bool)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@T T@T) T@T)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@66 (T@U T@U) Bool)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@132 (T@U) T@U)
(declare-fun $generated@@133 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@3 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (!  (=> (and (or ($generated@@22 $generated@@29) (and (or (not (= $generated@@29 $generated@@23)) (not true)) ($generated@@24 $generated@@25 $generated@@29 $generated@@26 $generated@@28))) ($generated@@27 $generated@@28)) ($generated@@19 ($generated@@20 $generated@@29) $generated@@21 $generated@@28))
 :pattern ( ($generated@@19 ($generated@@20 $generated@@29) $generated@@21 $generated@@28))
)))
(assert (forall (($generated@@33 T@U) ) (! (= ($generated@@30 $generated@@25 $generated@@33 $generated@@31)  (or (= $generated@@33 $generated@@23) (= ($generated@@32 $generated@@33) $generated@@31)))
 :pattern ( ($generated@@30 $generated@@25 $generated@@33 $generated@@31))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@34 $generated@@26 $generated@@35) ($generated@@24 $generated@@25 $generated@@34 $generated@@31 $generated@@35))
 :pattern ( ($generated@@24 $generated@@25 $generated@@34 $generated@@26 $generated@@35))
 :pattern ( ($generated@@24 $generated@@25 $generated@@34 $generated@@31 $generated@@35))
)))
(assert ($generated@@36 $generated@@37 $generated@@21))
(assert (forall (($generated@@38 T@U) ) (!  (=> ($generated@@27 $generated@@38) ($generated@@19 $generated@@37 $generated@@21 $generated@@38))
 :pattern ( ($generated@@19 $generated@@37 $generated@@21 $generated@@38))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@40 $generated@@47 $generated@@48 ($generated@@44 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@51) $generated@@49)
 :weight 0
)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@56 $generated@@57) (= ($generated@@40 $generated@@52 $generated@@53 ($generated@@44 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@57) ($generated@@40 $generated@@52 $generated@@53 $generated@@55 $generated@@57)))
 :weight 0
))) (= ($generated@@3 $generated@@41) 4)) (= ($generated@@3 $generated@@42) 5)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (= ($generated@@3 ($generated@@43 $generated@@58 $generated@@59)) 6))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@45 ($generated@@43 $generated@@60 $generated@@61)) $generated@@60)
 :pattern ( ($generated@@43 $generated@@60 $generated@@61))
))) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (! (= ($generated@@46 ($generated@@43 $generated@@62 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@43 $generated@@62 $generated@@63))
))))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@64 $generated@@31 $generated@@65)  (or (= $generated@@64 $generated@@23) ($generated@@8 ($generated@@39 $generated@@4 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@65 $generated@@64) $generated)))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@64 $generated@@31 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> ($generated@@66 $generated@@67 $generated@@68) (forall (($generated@@69 T@U) ) (!  (=> ($generated@@8 ($generated@@39 $generated@@4 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@67 $generated@@69) $generated))) ($generated@@8 ($generated@@39 $generated@@4 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@68 $generated@@69) $generated))))
 :pattern ( ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@68 $generated@@69) $generated))
)))
 :pattern ( ($generated@@66 $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 ($generated@@39 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@39 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> (or ($generated@@22 $generated@@73) (and (or (not (= $generated@@73 $generated@@23)) (not true)) ($generated@@30 $generated@@25 $generated@@73 $generated@@26))) ($generated@@36 ($generated@@20 $generated@@73) $generated@@21))
 :pattern ( ($generated@@20 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@19 ($generated@@70 $generated@@77 $generated@@74) $generated@@75 $generated@@76) ($generated@@24 $generated@@77 $generated@@74 $generated@@75 $generated@@76))
 :pattern ( ($generated@@19 ($generated@@70 $generated@@77 $generated@@74) $generated@@75 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (=> ($generated@@66 $generated@@78 $generated@@79) (=> ($generated@@19 $generated@@80 $generated@@81 $generated@@78) ($generated@@19 $generated@@80 $generated@@81 $generated@@79)))
 :pattern ( ($generated@@66 $generated@@78 $generated@@79) ($generated@@19 $generated@@80 $generated@@81 $generated@@78))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@T) ) (!  (=> ($generated@@66 $generated@@82 $generated@@83) (=> ($generated@@24 $generated@@86 $generated@@84 $generated@@85 $generated@@82) ($generated@@24 $generated@@86 $generated@@84 $generated@@85 $generated@@83)))
 :pattern ( ($generated@@66 $generated@@82 $generated@@83) ($generated@@24 $generated@@86 $generated@@84 $generated@@85 $generated@@82))
)))
(assert (forall (($generated@@87 T@U) ) (!  (=> ($generated@@36 $generated@@87 $generated@@26) (and (= ($generated@@70 $generated@@25 ($generated@@39 $generated@@25 $generated@@87)) $generated@@87) ($generated@@30 $generated@@25 ($generated@@39 $generated@@25 $generated@@87) $generated@@26)))
 :pattern ( ($generated@@36 $generated@@87 $generated@@26))
)))
(assert (forall (($generated@@88 T@U) ) (!  (=> ($generated@@36 $generated@@88 $generated@@31) (and (= ($generated@@70 $generated@@25 ($generated@@39 $generated@@25 $generated@@88)) $generated@@88) ($generated@@30 $generated@@25 ($generated@@39 $generated@@25 $generated@@88) $generated@@31)))
 :pattern ( ($generated@@36 $generated@@88 $generated@@31))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@30 $generated@@25 $generated@@89 $generated@@26)  (and ($generated@@30 $generated@@25 $generated@@89 $generated@@31) (or (not (= $generated@@89 $generated@@23)) (not true))))
 :pattern ( ($generated@@30 $generated@@25 $generated@@89 $generated@@26))
 :pattern ( ($generated@@30 $generated@@25 $generated@@89 $generated@@31))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (=> (or (not (= $generated@@90 $generated@@92)) (not true)) (=> (and ($generated@@66 $generated@@90 $generated@@91) ($generated@@66 $generated@@91 $generated@@92)) ($generated@@66 $generated@@90 $generated@@92)))
 :pattern ( ($generated@@66 $generated@@90 $generated@@91) ($generated@@66 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@36 ($generated@@70 $generated@@95 $generated@@93) $generated@@94) ($generated@@30 $generated@@95 $generated@@93 $generated@@94))
 :pattern ( ($generated@@36 ($generated@@70 $generated@@95 $generated@@93) $generated@@94))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@39 $generated@@97 ($generated@@70 $generated@@97 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@70 $generated@@97 $generated@@96))
)))
(assert  (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@98 $generated@@101 $generated@@102 $generated@@103 ($generated@@100 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@106 $generated@@107) $generated@@104)
 :weight 0
)) (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@98 $generated@@108 $generated@@109 $generated@@110 ($generated@@100 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@98 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@98 $generated@@117 $generated@@118 $generated@@119 ($generated@@100 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@98 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)))))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 Bool) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@8 ($generated@@98 $generated@@25 $generated@@41 $generated@@4 ($generated@@99 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))  (=> (and (or (not (= $generated@@130 $generated@@126)) (not true)) ($generated@@8 ($generated@@39 $generated@@4 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@127 $generated@@130) $generated@@128)))) $generated@@129))
 :pattern ( ($generated@@98 $generated@@25 $generated@@41 $generated@@4 ($generated@@99 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))
)))
(assert (= ($generated@@132 $generated@@26) $generated@@0))
(assert (= ($generated@@133 $generated@@26) $generated@@2))
(assert (= ($generated@@132 $generated@@31) $generated@@1))
(assert (= ($generated@@133 $generated@@31) $generated@@2))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () Bool)
(declare-fun $generated@@142 () Bool)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () Bool)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@147  (=> (= $generated@@134 ($generated@@99 $generated@@23 $generated@@135 $generated false)) (=> (and (and (or (not (= $generated@@136 $generated@@23)) (not true)) (and ($generated@@30 $generated@@25 $generated@@136 $generated@@26) ($generated@@24 $generated@@25 $generated@@136 $generated@@26 $generated@@135))) (and ($generated@@27 $generated@@137) ($generated@@138 $generated@@137))) (=> (and (and (and (or (not (= $generated@@139 $generated@@23)) (not true)) (and ($generated@@30 $generated@@25 $generated@@139 $generated@@26) ($generated@@24 $generated@@25 $generated@@139 $generated@@26 $generated@@137))) (not ($generated@@8 ($generated@@39 $generated@@4 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@135 $generated@@139) $generated))))) (and (forall (($generated@@148 T@U) ) (!  (=> (and (or (not (= $generated@@148 $generated@@23)) (not true)) ($generated@@8 ($generated@@39 $generated@@4 ($generated@@40 $generated@@41 $generated@@42 ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@135 $generated@@148) $generated)))) (= ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@137 $generated@@148) ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@135 $generated@@148)))
 :pattern ( ($generated@@40 $generated@@25 ($generated@@43 $generated@@41 $generated@@42) $generated@@137 $generated@@148))
)) ($generated@@66 $generated@@135 $generated@@137))) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= $generated@@139 $generated@@23)) (not true))) (=> (or (not (= $generated@@139 $generated@@23)) (not true)) (=> (and (and ($generated@@19 ($generated@@70 $generated@@25 $generated@@139) $generated@@31 $generated@@137) ($generated@@22 $generated@@139)) (and ($generated@@22 $generated@@139) (= $generated@@140 ($generated@@20 $generated@@139)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> $generated@@141 (=> (and $generated@@141 (= (ControlFlow 0 2) (- 0 1))) (= $generated@@140 $generated@@37)))))))))))))
(let (($generated@@149  (=> (and (and (and ($generated@@27 $generated@@135) ($generated@@138 $generated@@135)) (and (=> $generated@@142 (and ($generated@@30 $generated@@25 $generated@@143 $generated@@26) ($generated@@24 $generated@@25 $generated@@143 $generated@@26 $generated@@135))) true)) (and (and (=> $generated@@144 (and ($generated@@36 $generated@@145 $generated@@21) ($generated@@19 $generated@@145 $generated@@21 $generated@@135))) true) (and (= 0 $generated@@146) (= (ControlFlow 0 6) 2)))) $generated@@147)))
$generated@@149)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
