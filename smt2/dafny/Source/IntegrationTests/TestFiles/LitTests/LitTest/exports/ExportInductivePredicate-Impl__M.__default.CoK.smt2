(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U Int) Bool)
(declare-fun $generated@@21 (T@U Int) Bool)
(declare-fun $generated@@22 (T@U) Int)
(declare-fun $generated@@23 (Int) Int)
(declare-fun $generated@@28 (Int) Bool)
(declare-fun $generated@@29 (Int) Bool)
(declare-fun $generated@@31 (Int) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@U) Bool)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@68 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@69 (T@T T@T) T@T)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@24 T@U) ($generated@@25 Int) ) (!  (=> (or ($generated@@21 $generated@@24 $generated@@25) (< 1 $generated@@19)) (and (=> (=> (< 0 ($generated@@22 $generated@@24)) (< $generated@@25 100)) (=> (= ($generated@@23 0) ($generated@@22 $generated@@24)) (forall (($generated@@26 T@U) ) (!  (=> ($generated $generated@@26 $generated@@24) ($generated@@21 $generated@@26 $generated@@25))
 :pattern ( ($generated@@20 $generated@@26 $generated@@25))
)))) (= ($generated@@20 $generated@@24 $generated@@25)  (and (=> (< 0 ($generated@@22 $generated@@24)) (< $generated@@25 100)) (=> (= ($generated@@23 0) ($generated@@22 $generated@@24)) (forall (($generated@@27 T@U) ) (!  (=> ($generated $generated@@27 $generated@@24) ($generated@@20 $generated@@27 $generated@@25))
 :pattern ( ($generated@@20 $generated@@27 $generated@@25))
)))))))
 :pattern ( ($generated@@20 $generated@@24 $generated@@25))
))))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@30 Int) ) (!  (=> (or ($generated@@29 $generated@@30) (< 0 $generated@@19)) (= ($generated@@28 $generated@@30) (< $generated@@30 100)))
 :pattern ( ($generated@@28 $generated@@30))
))))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@32 Int) ($generated@@33 T@U) ) (!  (=> (= $generated@@33 ($generated@@31 0)) ($generated@@20 $generated@@33 $generated@@32))
 :pattern ( ($generated@@20 $generated@@33 $generated@@32))
))))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@23 $generated@@34) $generated@@34)
 :pattern ( ($generated@@23 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@38 Int) ) (!  (=> ($generated@@28 $generated@@38) (forall (($generated@@39 T@U) ) (! ($generated@@20 $generated@@39 $generated@@38)
 :pattern ( ($generated@@20 $generated@@39 $generated@@38))
)))
 :pattern ( ($generated@@28 $generated@@38))
))))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@44 Int) ) (!  (=> (forall (($generated@@45 T@U) ) (! ($generated@@20 $generated@@45 $generated@@44)
 :pattern ( ($generated@@20 $generated@@45 $generated@@44))
)) ($generated@@28 $generated@@44))
 :pattern ( ($generated@@28 $generated@@44))
))))
(assert (forall (($generated@@47 Int) ) (!  (=> (<= 0 $generated@@47) (and ($generated@@46 ($generated@@31 $generated@@47)) (= ($generated@@22 ($generated@@31 $generated@@47)) $generated@@47)))
 :pattern ( ($generated@@31 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (!  (or (or ($generated $generated@@48 $generated@@49) (= $generated@@48 $generated@@49)) ($generated $generated@@49 $generated@@48))
 :pattern ( ($generated $generated@@48 $generated@@49) ($generated $generated@@49 $generated@@48))
)))
(assert (= ($generated@@0 $generated@@50) 3))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@51 T@U) ($generated@@52 Int) ) (!  (=> (or ($generated@@21 ($generated@@35 $generated@@50 $generated@@51) $generated@@52) (< 1 $generated@@19)) (and (=> (=> (< 0 ($generated@@22 $generated@@51)) (< $generated@@52 100)) (=> (= ($generated@@23 0) ($generated@@22 $generated@@51)) (forall (($generated@@53 T@U) ) (!  (=> ($generated $generated@@53 $generated@@51) ($generated@@21 $generated@@53 $generated@@52))
 :pattern ( ($generated@@20 $generated@@53 $generated@@52))
)))) (= ($generated@@20 ($generated@@35 $generated@@50 $generated@@51) $generated@@52)  (and (=> (< 0 ($generated@@22 $generated@@51)) (< $generated@@52 100)) (=> (= ($generated@@23 0) ($generated@@22 $generated@@51)) (forall (($generated@@54 T@U) ) (!  (=> ($generated $generated@@54 $generated@@51) ($generated@@20 $generated@@54 $generated@@52))
 :pattern ( ($generated@@20 $generated@@54 $generated@@52))
)))))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@35 $generated@@50 $generated@@51) $generated@@52))
))))
(assert (forall (($generated@@55 T@U) ) (! (<= 0 ($generated@@22 $generated@@55))
 :pattern ( ($generated@@22 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@40 $generated@@57 ($generated@@41 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@41 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (!  (and (and (and (=> ($generated $generated@@58 $generated@@59) (or (not (= $generated@@58 $generated@@59)) (not true))) (=> (and ($generated@@46 $generated@@58) (not ($generated@@46 $generated@@59))) ($generated $generated@@58 $generated@@59))) (=> (and ($generated@@46 $generated@@58) ($generated@@46 $generated@@59)) (= ($generated $generated@@58 $generated@@59) (< ($generated@@22 $generated@@58) ($generated@@22 $generated@@59))))) (=> (and ($generated $generated@@58 $generated@@59) ($generated@@46 $generated@@59)) ($generated@@46 $generated@@58)))
 :pattern ( ($generated $generated@@58 $generated@@59))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@60 T@U) ($generated@@61 Int) ) (!  (=> (or ($generated@@21 ($generated@@35 $generated@@50 $generated@@60) ($generated@@23 $generated@@61)) (< 1 $generated@@19)) (and (=> (=> (< 0 ($generated@@22 $generated@@60)) (< $generated@@61 100)) (=> (= ($generated@@23 0) ($generated@@22 $generated@@60)) (forall (($generated@@62 T@U) ) (!  (=> ($generated $generated@@62 $generated@@60) ($generated@@21 $generated@@62 $generated@@61))
 :pattern ( ($generated@@20 $generated@@62 $generated@@61))
)))) (= ($generated@@20 ($generated@@35 $generated@@50 $generated@@60) ($generated@@23 $generated@@61))  (and (=> (< 0 ($generated@@22 $generated@@60)) (< $generated@@61 100)) (=> (= ($generated@@23 0) ($generated@@22 $generated@@60)) (forall (($generated@@63 T@U) ) (!  (=> ($generated $generated@@63 $generated@@60) ($generated@@20 $generated@@63 $generated@@61))
 :pattern ( ($generated@@20 $generated@@63 $generated@@61))
)))))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@35 $generated@@50 $generated@@60) ($generated@@23 $generated@@61)))
))))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@64 $generated@@74 $generated@@75 $generated@@76 ($generated@@70 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@79 $generated@@80) $generated@@77)
 :weight 0
)) (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@64 $generated@@81 $generated@@82 $generated@@83 ($generated@@70 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@64 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@64 $generated@@90 $generated@@91 $generated@@92 ($generated@@70 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@64 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)))) (= ($generated@@0 $generated@@65) 4)) (= ($generated@@0 $generated@@66) 5)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@68 $generated@@99 $generated@@100 ($generated@@71 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@103) $generated@@101)
 :weight 0
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@108 $generated@@109) (= ($generated@@68 $generated@@104 $generated@@105 ($generated@@71 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@109) ($generated@@68 $generated@@104 $generated@@105 $generated@@107 $generated@@109)))
 :weight 0
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (= ($generated@@0 ($generated@@69 $generated@@110 $generated@@111)) 6))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@72 ($generated@@69 $generated@@112 $generated@@113)) $generated@@112)
 :pattern ( ($generated@@69 $generated@@112 $generated@@113))
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@73 ($generated@@69 $generated@@114 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@69 $generated@@114 $generated@@115))
))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@5 ($generated@@64 $generated@@65 $generated@@66 $generated@@1 ($generated@@67 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@5 ($generated@@40 $generated@@1 ($generated@@68 $generated@@66 $generated@@50 ($generated@@68 $generated@@65 ($generated@@69 $generated@@66 $generated@@50) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@64 $generated@@65 $generated@@66 $generated@@1 ($generated@@67 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@122 T@U) ) (!  (=> ($generated@@46 $generated@@122) (= $generated@@122 ($generated@@31 ($generated@@22 $generated@@122))))
 :pattern ( ($generated@@22 $generated@@122))
 :pattern ( ($generated@@46 $generated@@122))
)))
(assert (forall (($generated@@123 Int) ) (! (= ($generated@@41 $generated@@2 ($generated@@6 ($generated@@23 $generated@@123))) ($generated@@35 $generated@@50 ($generated@@41 $generated@@2 ($generated@@6 $generated@@123))))
 :pattern ( ($generated@@41 $generated@@2 ($generated@@6 ($generated@@23 $generated@@123))))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@T) ) (! (= ($generated@@41 $generated@@125 ($generated@@35 $generated@@125 $generated@@124)) ($generated@@35 $generated@@50 ($generated@@41 $generated@@125 $generated@@124)))
 :pattern ( ($generated@@41 $generated@@125 ($generated@@35 $generated@@125 $generated@@124)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 (T@U) Bool)
(declare-fun $generated@@132 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@133  (=> (and (and (= $generated@@126 ($generated@@67 $generated@@127 $generated@@128 $generated@@129 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@29 $generated@@130)) (or ($generated@@28 $generated@@130) (< $generated@@130 100)))))
(let (($generated@@134  (=> (and (and (and ($generated@@131 $generated@@128) ($generated@@132 $generated@@128)) (= 1 $generated@@19)) (and (< $generated@@130 100) (= (ControlFlow 0 3) 2))) $generated@@133)))
$generated@@134)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
