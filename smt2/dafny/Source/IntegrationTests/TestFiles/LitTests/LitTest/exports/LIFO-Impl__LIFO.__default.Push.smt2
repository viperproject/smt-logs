(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U T@U) T@U)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@U T@U T@U) Bool)
(declare-fun $generated@@37 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@42 (T@U T@U) T@U)
(declare-fun $generated@@45 (T@U Int) T@U)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@T T@T) T@T)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@122 (T@U) T@U)
(declare-fun $generated@@123 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (= ($generated@@3 $generated@@23) 3))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (!  (=> (and ($generated@@22 $generated@@23 $generated@@27 ($generated@@25 $generated@@29)) ($generated@@26 $generated@@28 $generated@@29)) ($generated@@22 $generated@@23 ($generated@@24 $generated@@27 $generated@@28) ($generated@@25 $generated@@29)))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@24 $generated@@27 $generated@@28) ($generated@@25 $generated@@29)))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 ($generated@@30 $generated@@33 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@30 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@20 ($generated@@24 $generated@@34 $generated@@35)) (+ 1 ($generated@@20 $generated@@34)))
 :pattern ( ($generated@@24 $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@36 ($generated@@31 $generated@@41 $generated@@38) $generated@@39 $generated@@40) ($generated@@37 $generated@@41 $generated@@38 $generated@@39 $generated@@40))
 :pattern ( ($generated@@36 ($generated@@31 $generated@@41 $generated@@38) $generated@@39 $generated@@40))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@20 ($generated@@42 $generated@@43 $generated@@44)) (+ ($generated@@20 $generated@@43) ($generated@@20 $generated@@44)))
 :pattern ( ($generated@@20 ($generated@@42 $generated@@43 $generated@@44)))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 Int) ($generated@@48 T@U) ) (!  (and (=> (= $generated@@47 ($generated@@20 $generated@@46)) (= ($generated@@45 ($generated@@24 $generated@@46 $generated@@48) $generated@@47) $generated@@48)) (=> (or (not (= $generated@@47 ($generated@@20 $generated@@46))) (not true)) (= ($generated@@45 ($generated@@24 $generated@@46 $generated@@48) $generated@@47) ($generated@@45 $generated@@46 $generated@@47))))
 :pattern ( ($generated@@45 ($generated@@24 $generated@@46 $generated@@48) $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@26 $generated@@49 $generated) (and (= ($generated@@31 $generated@@5 ($generated@@30 $generated@@5 $generated@@49)) $generated@@49) ($generated@@22 $generated@@5 ($generated@@30 $generated@@5 $generated@@49) $generated)))
 :pattern ( ($generated@@26 $generated@@49 $generated))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@26 ($generated@@31 $generated@@52 $generated@@50) $generated@@51) ($generated@@22 $generated@@52 $generated@@50 $generated@@51))
 :pattern ( ($generated@@26 ($generated@@31 $generated@@52 $generated@@50) $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (<= 0 ($generated@@20 $generated@@53))
 :pattern ( ($generated@@20 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@37 $generated@@23 $generated@@54 ($generated@@25 $generated@@55) $generated@@56) (forall (($generated@@57 Int) ) (!  (=> (and (<= 0 $generated@@57) (< $generated@@57 ($generated@@20 $generated@@54))) ($generated@@36 ($generated@@45 $generated@@54 $generated@@57) $generated@@55 $generated@@56))
 :pattern ( ($generated@@45 $generated@@54 $generated@@57))
)))
 :pattern ( ($generated@@37 $generated@@23 $generated@@54 ($generated@@25 $generated@@55) $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@58 ($generated@@25 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@25 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@19 ($generated@@25 $generated@@60)) $generated@@1)
 :pattern ( ($generated@@25 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@30 $generated@@62 ($generated@@31 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@31 $generated@@62 $generated@@61))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@63 $generated@@74 $generated@@75 $generated@@76 ($generated@@70 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@79 $generated@@80) $generated@@77)
 :weight 0
)) (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@63 $generated@@81 $generated@@82 $generated@@83 ($generated@@70 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@63 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@63 $generated@@90 $generated@@91 $generated@@92 ($generated@@70 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@63 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)))) (= ($generated@@3 $generated@@64) 4)) (= ($generated@@3 $generated@@65) 5)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@67 $generated@@99 $generated@@100 ($generated@@71 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@103) $generated@@101)
 :weight 0
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@108 $generated@@109) (= ($generated@@67 $generated@@104 $generated@@105 ($generated@@71 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@109) ($generated@@67 $generated@@104 $generated@@105 $generated@@107 $generated@@109)))
 :weight 0
))) (= ($generated@@3 $generated@@68) 6)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (= ($generated@@3 ($generated@@69 $generated@@110 $generated@@111)) 7))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@72 ($generated@@69 $generated@@112 $generated@@113)) $generated@@112)
 :pattern ( ($generated@@69 $generated@@112 $generated@@113))
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@73 ($generated@@69 $generated@@114 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@69 $generated@@114 $generated@@115))
))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@8 ($generated@@63 $generated@@64 $generated@@65 $generated@@4 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@8 ($generated@@30 $generated@@4 ($generated@@67 $generated@@65 $generated@@68 ($generated@@67 $generated@@64 ($generated@@69 $generated@@65 $generated@@68) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@63 $generated@@64 $generated@@65 $generated@@4 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (!  (and (= ($generated@@122 ($generated@@24 $generated@@124 $generated@@125)) $generated@@124) (= ($generated@@123 ($generated@@24 $generated@@124 $generated@@125)) $generated@@125))
 :pattern ( ($generated@@24 $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (=> ($generated@@26 $generated@@126 ($generated@@25 $generated@@127)) (and (= ($generated@@31 $generated@@23 ($generated@@30 $generated@@23 $generated@@126)) $generated@@126) ($generated@@22 $generated@@23 ($generated@@30 $generated@@23 $generated@@126) ($generated@@25 $generated@@127))))
 :pattern ( ($generated@@26 $generated@@126 ($generated@@25 $generated@@127)))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 Int) ) (!  (and (=> (< $generated@@130 ($generated@@20 $generated@@128)) (= ($generated@@45 ($generated@@42 $generated@@128 $generated@@129) $generated@@130) ($generated@@45 $generated@@128 $generated@@130))) (=> (<= ($generated@@20 $generated@@128) $generated@@130) (= ($generated@@45 ($generated@@42 $generated@@128 $generated@@129) $generated@@130) ($generated@@45 $generated@@129 (- $generated@@130 ($generated@@20 $generated@@128))))))
 :pattern ( ($generated@@45 ($generated@@42 $generated@@128 $generated@@129) $generated@@130))
)))
(assert (forall (($generated@@131 T@U) ) (!  (=> (= ($generated@@20 $generated@@131) 0) (= $generated@@131 $generated@@21))
 :pattern ( ($generated@@20 $generated@@131))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (! ($generated@@37 $generated@@5 $generated@@133 $generated $generated@@132)
 :pattern ( ($generated@@37 $generated@@5 $generated@@133 $generated $generated@@132))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@134 ($generated@@25 $generated@@135)) (forall (($generated@@136 Int) ) (!  (=> (and (<= 0 $generated@@136) (< $generated@@136 ($generated@@20 $generated@@134))) ($generated@@26 ($generated@@45 $generated@@134 $generated@@136) $generated@@135))
 :pattern ( ($generated@@45 $generated@@134 $generated@@136))
)))
 :pattern ( ($generated@@22 $generated@@23 $generated@@134 ($generated@@25 $generated@@135)))
)))
(assert (forall (($generated@@137 T@U) ) (! ($generated@@22 $generated@@5 $generated@@137 $generated)
 :pattern ( ($generated@@22 $generated@@5 $generated@@137 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@148  (=> (= $generated@@138 ($generated@@66 $generated@@139 $generated@@140 $generated@@2 false)) (=> (and (= $generated@@141 ($generated@@42 ($generated@@24 $generated@@21 ($generated@@31 $generated@@5 ($generated@@9 $generated@@142))) $generated@@143)) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@20 $generated@@141) (+ ($generated@@20 $generated@@143) 1))))))
(let (($generated@@149  (=> (and (and (and ($generated@@144 $generated@@140) ($generated@@145 $generated@@140)) (and ($generated@@22 $generated@@23 $generated@@143 ($generated@@25 $generated)) ($generated@@37 $generated@@23 $generated@@143 ($generated@@25 $generated) $generated@@140))) (and (and ($generated@@22 $generated@@23 $generated@@146 ($generated@@25 $generated)) ($generated@@37 $generated@@23 $generated@@146 ($generated@@25 $generated) $generated@@140)) (and (= 2 $generated@@147) (= (ControlFlow 0 3) 2)))) $generated@@148)))
$generated@@149)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
