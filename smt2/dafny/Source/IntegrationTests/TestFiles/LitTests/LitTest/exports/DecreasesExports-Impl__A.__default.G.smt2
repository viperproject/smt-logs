(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@26 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@T T@T) T@T)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@33 (T@T) T@T)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@U) Bool)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@69 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@76 (T@U) Bool)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@87 (T@U) Int)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@126 (T@U) T@U)
(declare-fun $generated@@127 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@2))
(assert (= ($generated@@4 $generated@@23) 3))
(assert ($generated@@22 $generated@@23 $generated@@21 $generated@@24))
(assert  (and (and (and (and (and (and (and (forall (($generated@@35 T@T) ($generated@@36 T@T) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@26 $generated@@35 $generated@@36 ($generated@@32 $generated@@35 $generated@@36 $generated@@38 $generated@@39 $generated@@37) $generated@@39) $generated@@37)
 :weight 0
)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (!  (or (= $generated@@44 $generated@@45) (= ($generated@@26 $generated@@40 $generated@@41 ($generated@@32 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@45) ($generated@@26 $generated@@40 $generated@@41 $generated@@43 $generated@@45)))
 :weight 0
))) (= ($generated@@4 $generated@@27) 4)) (= ($generated@@4 $generated@@28) 5)) (= ($generated@@4 $generated@@29) 6)) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (= ($generated@@4 ($generated@@30 $generated@@46 $generated@@47)) 7))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@33 ($generated@@30 $generated@@48 $generated@@49)) $generated@@48)
 :pattern ( ($generated@@30 $generated@@48 $generated@@49))
))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@34 ($generated@@30 $generated@@50 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@30 $generated@@50 $generated@@51))
))))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> ($generated@@25 $generated@@52 $generated@@53) (forall (($generated@@54 T@U) ) (!  (=> ($generated@@9 ($generated@@31 $generated@@5 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@52 $generated@@54) $generated))) ($generated@@9 ($generated@@31 $generated@@5 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@53 $generated@@54) $generated))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@53 $generated@@54) $generated))
)))
 :pattern ( ($generated@@25 $generated@@52 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 $generated@@56) $generated@@56)
 :pattern ( ($generated@@55 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@58 $generated@@59) (= ($generated@@20 $generated@@59) $generated@@1))
 :pattern ( ($generated@@58 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@60 $generated@@61) (= ($generated@@20 $generated@@61) $generated@@2))
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 ($generated@@31 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@31 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ) (!  (=> ($generated@@60 $generated@@65) (= $generated@@65 $generated@@21))
 :pattern ( ($generated@@60 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@58 $generated@@67) (exists (($generated@@68 T@U) ) (= $generated@@67 ($generated@@66 $generated@@68))))
 :pattern ( ($generated@@58 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@T) ) (!  (=> ($generated@@25 $generated@@70 $generated@@71) (=> ($generated@@69 $generated@@74 $generated@@72 $generated@@73 $generated@@70) ($generated@@69 $generated@@74 $generated@@72 $generated@@73 $generated@@71)))
 :pattern ( ($generated@@25 $generated@@70 $generated@@71) ($generated@@69 $generated@@74 $generated@@72 $generated@@73 $generated@@70))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@66 $generated@@75) $generated@@24) ($generated@@22 $generated@@23 $generated@@75 $generated@@24))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@66 $generated@@75) $generated@@24))
)))
(assert (forall (($generated@@77 T@U) ) (!  (=> ($generated@@76 $generated@@77) (or ($generated@@58 $generated@@77) ($generated@@60 $generated@@77)))
 :pattern ( ($generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@78 $generated@@24) (or ($generated@@58 $generated@@78) ($generated@@60 $generated@@78)))
 :pattern ( ($generated@@60 $generated@@78) ($generated@@22 $generated@@23 $generated@@78 $generated@@24))
 :pattern ( ($generated@@58 $generated@@78) ($generated@@22 $generated@@23 $generated@@78 $generated@@24))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (=> (or (not (= $generated@@79 $generated@@81)) (not true)) (=> (and ($generated@@25 $generated@@79 $generated@@80) ($generated@@25 $generated@@80 $generated@@81)) ($generated@@25 $generated@@79 $generated@@81)))
 :pattern ( ($generated@@25 $generated@@79 $generated@@80) ($generated@@25 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@20 ($generated@@66 $generated@@82)) $generated@@1)
 :pattern ( ($generated@@66 $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@66 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@66 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@31 $generated@@86 ($generated@@62 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@62 $generated@@86 $generated@@85))
)))
(assert (forall (($generated@@88 T@U) ) (! (< ($generated@@87 $generated@@88) ($generated@@87 ($generated@@66 $generated@@88)))
 :pattern ( ($generated@@66 $generated@@88))
)))
(assert  (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@89 $generated@@92 $generated@@93 $generated@@94 ($generated@@91 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@97 $generated@@98) $generated@@95)
 :weight 0
)) (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@89 $generated@@99 $generated@@100 $generated@@101 ($generated@@91 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@89 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@89 $generated@@108 $generated@@109 $generated@@110 ($generated@@91 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@89 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)))))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 Bool) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@9 ($generated@@89 $generated@@29 $generated@@27 $generated@@5 ($generated@@90 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))  (=> (and (or (not (= $generated@@121 $generated@@117)) (not true)) ($generated@@9 ($generated@@31 $generated@@5 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@118 $generated@@121) $generated@@119)))) $generated@@120))
 :pattern ( ($generated@@89 $generated@@29 $generated@@27 $generated@@5 ($generated@@90 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (!  (=> (and ($generated@@123 $generated@@125) ($generated@@22 $generated@@23 $generated@@124 $generated@@24)) ($generated@@69 $generated@@23 $generated@@124 $generated@@24 $generated@@125))
 :pattern ( ($generated@@69 $generated@@23 $generated@@124 $generated@@24 $generated@@125))
)))
(assert (= ($generated@@126 $generated@@24) $generated@@0))
(assert (= ($generated@@127 $generated@@24) $generated@@3))
(assert (= $generated@@21 ($generated@@55 $generated@@23 $generated@@21)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> (and ($generated@@123 $generated@@129) (and ($generated@@58 $generated@@128) ($generated@@69 $generated@@23 $generated@@128 $generated@@24 $generated@@129))) ($generated@@69 $generated@@23 ($generated@@83 $generated@@128) $generated@@24 $generated@@129))
 :pattern ( ($generated@@69 $generated@@23 ($generated@@83 $generated@@128) $generated@@24 $generated@@129))
)))
(assert (forall (($generated@@130 T@U) ) (! (= ($generated@@66 ($generated@@55 $generated@@23 $generated@@130)) ($generated@@55 $generated@@23 ($generated@@66 $generated@@130)))
 :pattern ( ($generated@@66 ($generated@@55 $generated@@23 $generated@@130)))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@62 $generated@@132 ($generated@@55 $generated@@132 $generated@@131)) ($generated@@55 $generated@@28 ($generated@@62 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@62 $generated@@132 ($generated@@55 $generated@@132 $generated@@131)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@142 true))
(let (($generated@@143  (=> (and (= $generated@@133 $generated@@21) (= (ControlFlow 0 4) (- 0 3))) ($generated@@9 ($generated@@55 $generated@@5 ($generated@@8 true))))))
(let (($generated@@144  (=> (or (not (= $generated@@133 ($generated@@66 $generated@@134))) (not true)) (and (=> (= (ControlFlow 0 6) 4) $generated@@143) (=> (= (ControlFlow 0 6) 5) $generated@@142)))))
(let (($generated@@145  (=> (= $generated@@133 ($generated@@66 $generated@@134)) (=> (and (and (and ($generated@@22 $generated@@23 $generated@@134 $generated@@24) ($generated@@69 $generated@@23 $generated@@134 $generated@@24 $generated@@135)) (and ($generated@@22 $generated@@23 $generated@@136 $generated@@24) ($generated@@69 $generated@@23 $generated@@136 $generated@@24 $generated@@135))) (and (and (= $generated@@137 $generated@@134) ($generated@@22 $generated@@23 $generated@@137 $generated@@24)) (and (= $generated@@136 $generated@@137) (= (ControlFlow 0 2) (- 0 1))))) (< ($generated@@87 $generated@@136) ($generated@@87 $generated@@133))))))
(let (($generated@@146  (=> (= $generated@@138 ($generated@@90 $generated@@139 $generated@@135 $generated false)) (and (=> (= (ControlFlow 0 7) 2) $generated@@145) (=> (= (ControlFlow 0 7) 6) $generated@@144)))))
(let (($generated@@147  (=> (and ($generated@@123 $generated@@135) ($generated@@140 $generated@@135)) (=> (and (and (and ($generated@@22 $generated@@23 $generated@@133 $generated@@24) ($generated@@69 $generated@@23 $generated@@133 $generated@@24 $generated@@135)) ($generated@@76 $generated@@133)) (and (= 2 $generated@@141) (= (ControlFlow 0 8) 7))) $generated@@146))))
$generated@@147)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
