(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 (Int) T@U)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@U) Int)
(declare-fun $generated@@34 (T@U Int) Bool)
(declare-fun $generated@@42 (T@U Int) Bool)
(declare-fun $generated@@47 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@57 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@31 Int) ) (!  (=> (<= 0 $generated@@31) (and ($generated@@29 ($generated@@28 $generated@@31)) (= ($generated@@30 ($generated@@28 $generated@@31)) $generated@@31)))
 :pattern ( ($generated@@28 $generated@@31))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (!  (or (or ($generated $generated@@32 $generated@@33) (= $generated@@32 $generated@@33)) ($generated $generated@@33 $generated@@32))
 :pattern ( ($generated $generated@@32 $generated@@33) ($generated $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@35 Int) ($generated@@36 T@U) ) (!  (=> (= $generated@@36 ($generated@@28 0)) ($generated@@34 $generated@@36 $generated@@35))
 :pattern ( ($generated@@34 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ) (! (<= 0 ($generated@@30 $generated@@37))
 :pattern ( ($generated@@30 $generated@@37))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@24 $generated@@39 ($generated@@25 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@25 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (!  (and (and (and (=> ($generated $generated@@40 $generated@@41) (or (not (= $generated@@40 $generated@@41)) (not true))) (=> (and ($generated@@29 $generated@@40) (not ($generated@@29 $generated@@41))) ($generated $generated@@40 $generated@@41))) (=> (and ($generated@@29 $generated@@40) ($generated@@29 $generated@@41)) (= ($generated $generated@@40 $generated@@41) (< ($generated@@30 $generated@@40) ($generated@@30 $generated@@41))))) (=> (and ($generated $generated@@40 $generated@@41) ($generated@@29 $generated@@41)) ($generated@@29 $generated@@40)))
 :pattern ( ($generated $generated@@40 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 Int) ) (!  (and (=> (=> (< 0 ($generated@@30 $generated@@43)) (< $generated@@44 100)) (=> (= ($generated@@19 0) ($generated@@30 $generated@@43)) (forall (($generated@@45 T@U) ) (!  (=> ($generated $generated@@45 $generated@@43) ($generated@@42 $generated@@45 $generated@@44))
 :pattern ( ($generated@@34 $generated@@45 $generated@@44))
)))) (= ($generated@@34 $generated@@43 $generated@@44)  (and (=> (< 0 ($generated@@30 $generated@@43)) (< $generated@@44 100)) (=> (= ($generated@@19 0) ($generated@@30 $generated@@43)) (forall (($generated@@46 T@U) ) (!  (=> ($generated $generated@@46 $generated@@43) ($generated@@34 $generated@@46 $generated@@44))
 :pattern ( ($generated@@34 $generated@@46 $generated@@44))
))))))
 :pattern ( ($generated@@34 $generated@@43 $generated@@44))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@47 $generated@@58 $generated@@59 $generated@@60 ($generated@@54 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@63 $generated@@64) $generated@@61)
 :weight 0
)) (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@70 $generated@@72) (= ($generated@@47 $generated@@65 $generated@@66 $generated@@67 ($generated@@54 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@72 $generated@@73) ($generated@@47 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@72 $generated@@73)))
 :weight 0
)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@47 $generated@@74 $generated@@75 $generated@@76 ($generated@@54 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@47 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)))) (= ($generated@@0 $generated@@48) 3)) (= ($generated@@0 $generated@@49) 4)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@51 $generated@@83 $generated@@84 ($generated@@55 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@85) $generated@@87) $generated@@85)
 :weight 0
))) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@92 $generated@@93) (= ($generated@@51 $generated@@88 $generated@@89 ($generated@@55 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@51 $generated@@88 $generated@@89 $generated@@91 $generated@@93)))
 :weight 0
))) (= ($generated@@0 $generated@@52) 5)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (= ($generated@@0 ($generated@@53 $generated@@94 $generated@@95)) 6))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (! (= ($generated@@56 ($generated@@53 $generated@@96 $generated@@97)) $generated@@96)
 :pattern ( ($generated@@53 $generated@@96 $generated@@97))
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (! (= ($generated@@57 ($generated@@53 $generated@@98 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@53 $generated@@98 $generated@@99))
))))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 Bool) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@5 ($generated@@47 $generated@@48 $generated@@49 $generated@@1 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))  (=> (and (or (not (= $generated@@104 $generated@@100)) (not true)) ($generated@@5 ($generated@@24 $generated@@1 ($generated@@51 $generated@@49 $generated@@52 ($generated@@51 $generated@@48 ($generated@@53 $generated@@49 $generated@@52) $generated@@101 $generated@@104) $generated@@102)))) $generated@@103))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49 $generated@@1 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 Int) ) (!  (and (=> (=> (< 0 ($generated@@30 $generated@@106)) (< $generated@@107 100)) (=> (= ($generated@@19 0) ($generated@@30 $generated@@106)) (forall (($generated@@108 T@U) ) (!  (=> ($generated $generated@@108 $generated@@106) ($generated@@42 $generated@@108 $generated@@107))
 :pattern ( ($generated@@34 $generated@@108 $generated@@107))
)))) (= ($generated@@34 ($generated@@21 $generated@@52 $generated@@106) $generated@@107)  (and (=> (< 0 ($generated@@30 $generated@@106)) (< $generated@@107 100)) (=> (= ($generated@@19 0) ($generated@@30 $generated@@106)) (forall (($generated@@109 T@U) ) (!  (=> ($generated $generated@@109 $generated@@106) ($generated@@34 $generated@@109 $generated@@107))
 :pattern ( ($generated@@34 $generated@@109 $generated@@107))
))))))
 :weight 3
 :pattern ( ($generated@@34 ($generated@@21 $generated@@52 $generated@@106) $generated@@107))
)))
(assert (forall (($generated@@110 T@U) ) (!  (=> ($generated@@29 $generated@@110) (= $generated@@110 ($generated@@28 ($generated@@30 $generated@@110))))
 :pattern ( ($generated@@30 $generated@@110))
 :pattern ( ($generated@@29 $generated@@110))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 Int) ) (!  (and (=> (=> (< 0 ($generated@@30 $generated@@111)) (< $generated@@112 100)) (=> (= ($generated@@19 0) ($generated@@30 $generated@@111)) (forall (($generated@@113 T@U) ) (!  (=> ($generated $generated@@113 $generated@@111) ($generated@@42 $generated@@113 $generated@@112))
 :pattern ( ($generated@@34 $generated@@113 $generated@@112))
)))) (= ($generated@@34 ($generated@@21 $generated@@52 $generated@@111) ($generated@@19 $generated@@112))  (and (=> (< 0 ($generated@@30 $generated@@111)) (< $generated@@112 100)) (=> (= ($generated@@19 0) ($generated@@30 $generated@@111)) (forall (($generated@@114 T@U) ) (!  (=> ($generated $generated@@114 $generated@@111) ($generated@@34 $generated@@114 $generated@@112))
 :pattern ( ($generated@@34 $generated@@114 $generated@@112))
))))))
 :weight 3
 :pattern ( ($generated@@34 ($generated@@21 $generated@@52 $generated@@111) ($generated@@19 $generated@@112)))
)))
(assert (forall (($generated@@115 Int) ) (! (= ($generated@@25 $generated@@2 ($generated@@6 ($generated@@19 $generated@@115))) ($generated@@21 $generated@@52 ($generated@@25 $generated@@2 ($generated@@6 $generated@@115))))
 :pattern ( ($generated@@25 $generated@@2 ($generated@@6 ($generated@@19 $generated@@115))))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@25 $generated@@117 ($generated@@21 $generated@@117 $generated@@116)) ($generated@@21 $generated@@52 ($generated@@25 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@25 $generated@@117 ($generated@@21 $generated@@117 $generated@@116)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@126  (=> (= $generated@@118 ($generated@@50 $generated@@119 $generated@@120 $generated@@121 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@42 ($generated@@21 $generated@@52 ($generated@@28 3)) $generated@@122) (or ($generated@@34 ($generated@@21 $generated@@52 ($generated@@28 3)) $generated@@122) (=> ($generated@@5 ($generated@@21 $generated@@1 ($generated@@4 (< 0 ($generated@@30 ($generated@@21 $generated@@52 ($generated@@28 3))))))) (< $generated@@122 100))))) (=> (=> ($generated@@42 ($generated@@21 $generated@@52 ($generated@@28 3)) $generated@@122) (or ($generated@@34 ($generated@@21 $generated@@52 ($generated@@28 3)) $generated@@122) (=> ($generated@@5 ($generated@@21 $generated@@1 ($generated@@4 (< 0 ($generated@@30 ($generated@@21 $generated@@52 ($generated@@28 3))))))) (< $generated@@122 100)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@42 ($generated@@21 $generated@@52 ($generated@@28 3)) $generated@@122) (or ($generated@@34 ($generated@@21 $generated@@52 ($generated@@28 3)) $generated@@122) (=> (= ($generated@@19 0) ($generated@@19 ($generated@@30 ($generated@@21 $generated@@52 ($generated@@28 3))))) (forall (($generated@@127 T@U) ) (!  (=> ($generated $generated@@127 ($generated@@28 3)) ($generated@@34 $generated@@127 $generated@@122))
 :pattern ( ($generated@@34 $generated@@127 $generated@@122))
)))))))))))
(let (($generated@@128  (=> (and (and (and ($generated@@123 $generated@@120) ($generated@@124 $generated@@120)) (= 0 $generated@@125)) (and (< $generated@@122 100) (= (ControlFlow 0 4) 2))) $generated@@126)))
$generated@@128)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
