(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (Int) Bool)
(declare-fun $generated@@30 (Int) Bool)
(declare-fun $generated@@31 (Int Int) Int)
(declare-fun $generated@@34 (Int Int) Int)
(declare-fun $generated@@41 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@T T@T) T@T)
(declare-fun $generated@@48 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@102 (Int Int) Int)
(declare-fun $generated@@108 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@111 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@32 Int) ) (!  (=> (or ($generated@@30 $generated@@32) (< 0 $generated@@28)) (= ($generated@@29 $generated@@32)  (and (<= ($generated@@19 2) $generated@@32) (forall (($generated@@33 Int) ) (!  (=> (and (<= ($generated@@19 2) $generated@@33) (< $generated@@33 $generated@@32)) (or (not (= ($generated@@31 $generated@@32 $generated@@33) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@32 $generated@@33))
)))))
 :pattern ( ($generated@@29 $generated@@32))
))))
(assert (forall (($generated@@35 Int) ($generated@@36 Int) ) (! (= ($generated@@34 $generated@@35 $generated@@36) (div $generated@@35 $generated@@36))
 :pattern ( ($generated@@34 $generated@@35 $generated@@36))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@24 $generated@@38 ($generated@@25 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@25 $generated@@38 $generated@@37))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@39 Int) ) (!  (=> (or ($generated@@30 ($generated@@19 $generated@@39)) (< 0 $generated@@28)) (= ($generated@@29 ($generated@@19 $generated@@39))  (and (<= ($generated@@19 2) ($generated@@19 $generated@@39)) (forall (($generated@@40 Int) ) (!  (=> (and (<= ($generated@@19 2) $generated@@40) (< $generated@@40 $generated@@39)) (or (not (= ($generated@@31 $generated@@39 $generated@@40) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@39 $generated@@40))
)))))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@19 $generated@@39)))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@41 $generated@@52 $generated@@53 $generated@@54 ($generated@@48 $generated@@52 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@58 $generated@@55) $generated@@57 $generated@@58) $generated@@55)
 :weight 0
)) (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (or (= $generated@@64 $generated@@66) (= ($generated@@41 $generated@@59 $generated@@60 $generated@@61 ($generated@@48 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@65 $generated@@62) $generated@@66 $generated@@67) ($generated@@41 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@66 $generated@@67)))
 :weight 0
)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@41 $generated@@68 $generated@@69 $generated@@70 ($generated@@48 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@75 $generated@@76) ($generated@@41 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@75 $generated@@76)))
 :weight 0
)))) (= ($generated@@2 $generated@@42) 3)) (= ($generated@@2 $generated@@43) 4)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@45 $generated@@77 $generated@@78 ($generated@@49 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@79) $generated@@81) $generated@@79)
 :weight 0
))) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@45 $generated@@82 $generated@@83 ($generated@@49 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@45 $generated@@82 $generated@@83 $generated@@85 $generated@@87)))
 :weight 0
))) (= ($generated@@2 $generated@@46) 5)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ) (= ($generated@@2 ($generated@@47 $generated@@88 $generated@@89)) 6))) (forall (($generated@@90 T@T) ($generated@@91 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@90 $generated@@91)) $generated@@90)
 :pattern ( ($generated@@47 $generated@@90 $generated@@91))
))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@47 $generated@@92 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@47 $generated@@92 $generated@@93))
))))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 Bool) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@7 ($generated@@41 $generated@@42 $generated@@43 $generated@@3 ($generated@@44 $generated@@94 $generated@@95 $generated@@96 $generated@@97) $generated@@98 $generated@@99))  (=> (and (or (not (= $generated@@98 $generated@@94)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@45 $generated@@43 $generated@@46 ($generated@@45 $generated@@42 ($generated@@47 $generated@@43 $generated@@46) $generated@@95 $generated@@98) $generated@@96)))) $generated@@97))
 :pattern ( ($generated@@41 $generated@@42 $generated@@43 $generated@@3 ($generated@@44 $generated@@94 $generated@@95 $generated@@96 $generated@@97) $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@100 Int) ($generated@@101 Int) ) (! (= ($generated@@31 $generated@@100 $generated@@101) (mod $generated@@100 $generated@@101))
 :pattern ( ($generated@@31 $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@103 Int) ($generated@@104 Int) ) (! (= ($generated@@102 $generated@@103 $generated@@104) (* $generated@@103 $generated@@104))
 :pattern ( ($generated@@102 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@105))) ($generated@@21 $generated@@46 ($generated@@25 $generated@@4 ($generated@@8 $generated@@105))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@105))))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@T) ) (! (= ($generated@@25 $generated@@107 ($generated@@21 $generated@@107 $generated@@106)) ($generated@@21 $generated@@46 ($generated@@25 $generated@@107 $generated@@106)))
 :pattern ( ($generated@@25 $generated@@107 ($generated@@21 $generated@@107 $generated@@106)))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ) (! ($generated@@108 $generated@@4 $generated@@110 $generated $generated@@109)
 :pattern ( ($generated@@108 $generated@@4 $generated@@110 $generated $generated@@109))
)))
(assert (forall (($generated@@112 T@U) ) (! ($generated@@111 $generated@@4 $generated@@112 $generated)
 :pattern ( ($generated@@111 $generated@@4 $generated@@112 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 (T@U) Bool)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 70) (let (($generated@@131 true))
(let (($generated@@132  (=> (= (ControlFlow 0 58) (- 0 57)) (=> (not ($generated@@29 $generated@@113)) (not (and (<= ($generated@@19 2) $generated@@113) (forall (($generated@@133 Int) ) (!  (=> (and (<= ($generated@@19 2) $generated@@133) (< $generated@@133 $generated@@113)) (or (not (= ($generated@@31 $generated@@113 $generated@@133) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@113 $generated@@133))
))))))))
(let (($generated@@134  (=> (and (not (and (<= ($generated@@19 2) $generated@@114) (< $generated@@114 $generated@@113))) (= (ControlFlow 0 63) 58)) $generated@@132)))
(let (($generated@@135  (=> (and (<= ($generated@@19 2) $generated@@114) (< $generated@@114 $generated@@113)) (and (=> (= (ControlFlow 0 61) (- 0 62)) (or (not (= $generated@@114 0)) (not true))) (=> (= (ControlFlow 0 61) 58) $generated@@132)))))
(let (($generated@@136  (=> (< $generated@@114 ($generated@@19 2)) (and (=> (= (ControlFlow 0 65) 61) $generated@@135) (=> (= (ControlFlow 0 65) 63) $generated@@134)))))
(let (($generated@@137  (=> (<= ($generated@@19 2) $generated@@114) (and (=> (= (ControlFlow 0 64) 61) $generated@@135) (=> (= (ControlFlow 0 64) 63) $generated@@134)))))
(let (($generated@@138  (and (=> (= (ControlFlow 0 66) 64) $generated@@137) (=> (= (ControlFlow 0 66) 65) $generated@@136))))
(let (($generated@@139  (=> (<= ($generated@@19 2) $generated@@113) (and (=> (= (ControlFlow 0 67) 66) $generated@@138) (=> (= (ControlFlow 0 67) 60) $generated@@131)))))
(let (($generated@@140  (=> (and (< $generated@@113 ($generated@@19 2)) (= (ControlFlow 0 59) 58)) $generated@@132)))
(let (($generated@@141  (=> (and (and ($generated@@108 $generated@@4 ($generated@@8 $generated@@113) $generated $generated@@115) ($generated@@30 $generated@@113)) (and ($generated@@30 $generated@@113) (not ($generated@@29 $generated@@113)))) (and (=> (= (ControlFlow 0 68) 67) $generated@@139) (=> (= (ControlFlow 0 68) 59) $generated@@140)))))
(let (($generated@@142  (and (=> (= (ControlFlow 0 24) (- 0 29)) (<= ($generated@@19 2) $generated@@116)) (=> (<= ($generated@@19 2) $generated@@116) (and (=> (= (ControlFlow 0 24) (- 0 28)) (< $generated@@116 $generated@@113)) (=> (< $generated@@116 $generated@@113) (and (=> (= (ControlFlow 0 24) (- 0 27)) (<= ($generated@@19 2) $generated@@117)) (=> (<= ($generated@@19 2) $generated@@117) (and (=> (= (ControlFlow 0 24) (- 0 26)) (= ($generated@@102 $generated@@116 $generated@@117) $generated@@113)) (=> (= ($generated@@102 $generated@@116 $generated@@117) $generated@@113) (and (=> (= (ControlFlow 0 24) (- 0 25)) (=> ($generated@@30 $generated@@116) (or ($generated@@29 $generated@@116) (<= ($generated@@19 2) $generated@@116)))) (=> (=> ($generated@@30 $generated@@116) (or ($generated@@29 $generated@@116) (<= ($generated@@19 2) $generated@@116))) (=> (= (ControlFlow 0 24) (- 0 23)) (=> ($generated@@30 $generated@@116) (or ($generated@@29 $generated@@116) (forall (($generated@@143 Int) ) (!  (=> (and (<= ($generated@@19 2) $generated@@143) (< $generated@@143 $generated@@116)) (or (not (= ($generated@@31 $generated@@116 $generated@@143) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@116 $generated@@143))
)))))))))))))))))
(let (($generated@@144  (=> (and (and ($generated@@29 $generated@@118) (= $generated@@116 $generated@@118)) (and (= $generated@@117 $generated@@119) (= (ControlFlow 0 35) 24))) $generated@@142)))
(let (($generated@@145  (=> (not ($generated@@29 $generated@@118)) (and (=> (= (ControlFlow 0 30) (- 0 34)) (or (<= 0 $generated@@113) (= $generated@@118 $generated@@113))) (=> (or (<= 0 $generated@@113) (= $generated@@118 $generated@@113)) (and (=> (= (ControlFlow 0 30) (- 0 33)) (< $generated@@118 $generated@@113)) (=> (< $generated@@118 $generated@@113) (and (=> (= (ControlFlow 0 30) (- 0 32)) (<= ($generated@@19 2) $generated@@118)) (=> (<= ($generated@@19 2) $generated@@118) (and (=> (= (ControlFlow 0 30) (- 0 31)) (not ($generated@@29 $generated@@118))) (=> (not ($generated@@29 $generated@@118)) (=> (and (and (and (and ($generated@@120 $generated@@121) ($generated@@122 $generated@@121)) (<= ($generated@@19 2) $generated@@123)) (and (and (< $generated@@123 $generated@@118) (<= ($generated@@19 2) $generated@@124)) (and (= ($generated@@102 $generated@@123 $generated@@124) $generated@@118) ($generated@@30 $generated@@123)))) (and (and (and ($generated@@30 $generated@@123) (and ($generated@@29 $generated@@123) (and (<= ($generated@@19 2) $generated@@123) (forall (($generated@@146 Int) ) (!  (=> (and (<= ($generated@@19 2) $generated@@146) (< $generated@@146 $generated@@123)) (or (not (= ($generated@@31 $generated@@123 $generated@@146) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@123 $generated@@146))
))))) (= $generated@@115 $generated@@121)) (and (and (= $generated@@125 ($generated@@102 $generated@@124 $generated@@119)) (= $generated@@116 $generated@@123)) (and (= $generated@@117 $generated@@125) (= (ControlFlow 0 30) 24))))) $generated@@142))))))))))))
(let (($generated@@147  (and (=> (= (ControlFlow 0 36) (- 0 40)) (<= ($generated@@19 2) $generated@@118)) (and (=> (= (ControlFlow 0 36) (- 0 39)) (< $generated@@118 $generated@@113)) (and (=> (= (ControlFlow 0 36) (- 0 38)) (<= ($generated@@19 2) $generated@@119)) (and (=> (= (ControlFlow 0 36) (- 0 37)) (= ($generated@@102 $generated@@118 $generated@@119) $generated@@113)) (=> (and (and (and (and (and (<= ($generated@@19 2) $generated@@118) (< $generated@@118 $generated@@113)) (<= ($generated@@19 2) $generated@@119)) (= ($generated@@102 $generated@@118 $generated@@119) $generated@@113)) ($generated@@108 $generated@@4 ($generated@@8 $generated@@118) $generated $generated@@115)) (and ($generated@@30 $generated@@118) ($generated@@30 $generated@@118))) (and (=> (= (ControlFlow 0 36) 30) $generated@@145) (=> (= (ControlFlow 0 36) 35) $generated@@144)))))))))
(let (($generated@@148  (=> (and (not (and (and (<= ($generated@@19 2) $generated@@118) (< $generated@@118 $generated@@113)) (<= ($generated@@19 2) $generated@@119))) (= (ControlFlow 0 42) 36)) $generated@@147)))
(let (($generated@@149  (=> (and (and (and (<= ($generated@@19 2) $generated@@118) (< $generated@@118 $generated@@113)) (<= ($generated@@19 2) $generated@@119)) (= (ControlFlow 0 41) 36)) $generated@@147)))
(let (($generated@@150  (=> (not (and (<= ($generated@@19 2) $generated@@118) (< $generated@@118 $generated@@113))) (and (=> (= (ControlFlow 0 44) 41) $generated@@149) (=> (= (ControlFlow 0 44) 42) $generated@@148)))))
(let (($generated@@151  (=> (and (<= ($generated@@19 2) $generated@@118) (< $generated@@118 $generated@@113)) (and (=> (= (ControlFlow 0 43) 41) $generated@@149) (=> (= (ControlFlow 0 43) 42) $generated@@148)))))
(let (($generated@@152  (=> (< $generated@@118 ($generated@@19 2)) (and (=> (= (ControlFlow 0 46) 43) $generated@@151) (=> (= (ControlFlow 0 46) 44) $generated@@150)))))
(let (($generated@@153  (=> (<= ($generated@@19 2) $generated@@118) (and (=> (= (ControlFlow 0 45) 43) $generated@@151) (=> (= (ControlFlow 0 45) 44) $generated@@150)))))
(let (($generated@@154  (and (=> (= (ControlFlow 0 47) (- 0 49)) (or (and ($generated@@111 $generated@@4 ($generated@@8 (- $generated@@113 1)) $generated) (and (and (<= ($generated@@19 2) (- $generated@@113 1)) (< (- $generated@@113 1) $generated@@113)) (= ($generated@@31 $generated@@113 (- $generated@@113 1)) ($generated@@19 0)))) (or (and ($generated@@111 $generated@@4 ($generated@@8 ($generated@@19 2)) $generated) (and (and (<= ($generated@@19 2) ($generated@@19 2)) (< 2 $generated@@113)) (= ($generated@@31 $generated@@113 ($generated@@19 2)) ($generated@@19 0)))) (or (and ($generated@@111 $generated@@4 ($generated@@8 ($generated@@19 0)) $generated) (and (and (<= ($generated@@19 2) ($generated@@19 0)) (< 0 $generated@@113)) (= ($generated@@31 $generated@@113 ($generated@@19 0)) ($generated@@19 0)))) (exists (($generated@@155 Int) )  (and (and (<= ($generated@@19 2) $generated@@155) (< $generated@@155 $generated@@113)) (= ($generated@@31 $generated@@113 $generated@@155) ($generated@@19 0)))))))) (=> (or (and ($generated@@111 $generated@@4 ($generated@@8 (- $generated@@113 1)) $generated) (and (and (<= ($generated@@19 2) (- $generated@@113 1)) (< (- $generated@@113 1) $generated@@113)) (= ($generated@@31 $generated@@113 (- $generated@@113 1)) ($generated@@19 0)))) (or (and ($generated@@111 $generated@@4 ($generated@@8 ($generated@@19 2)) $generated) (and (and (<= ($generated@@19 2) ($generated@@19 2)) (< 2 $generated@@113)) (= ($generated@@31 $generated@@113 ($generated@@19 2)) ($generated@@19 0)))) (or (and ($generated@@111 $generated@@4 ($generated@@8 ($generated@@19 0)) $generated) (and (and (<= ($generated@@19 2) ($generated@@19 0)) (< 0 $generated@@113)) (= ($generated@@31 $generated@@113 ($generated@@19 0)) ($generated@@19 0)))) (exists (($generated@@156 Int) )  (and (and (<= ($generated@@19 2) $generated@@156) (< $generated@@156 $generated@@113)) (= ($generated@@31 $generated@@113 $generated@@156) ($generated@@19 0))))))) (=> (and (and (<= ($generated@@19 2) $generated@@118) (< $generated@@118 $generated@@113)) (= ($generated@@31 $generated@@113 $generated@@118) ($generated@@19 0))) (and (=> (= (ControlFlow 0 47) (- 0 48)) (or (not (= $generated@@118 0)) (not true))) (=> (or (not (= $generated@@118 0)) (not true)) (=> (= $generated@@119 ($generated@@34 $generated@@113 $generated@@118)) (and (=> (= (ControlFlow 0 47) 45) $generated@@153) (=> (= (ControlFlow 0 47) 46) $generated@@152))))))))))
(let (($generated@@157  (=> (and (not (and (<= ($generated@@19 2) $generated@@126) (< $generated@@126 $generated@@113))) (= (ControlFlow 0 52) 47)) $generated@@154)))
(let (($generated@@158  (=> (and (<= ($generated@@19 2) $generated@@126) (< $generated@@126 $generated@@113)) (and (=> (= (ControlFlow 0 50) (- 0 51)) (or (not (= $generated@@126 0)) (not true))) (=> (= (ControlFlow 0 50) 47) $generated@@154)))))
(let (($generated@@159  (=> (< $generated@@126 ($generated@@19 2)) (and (=> (= (ControlFlow 0 54) 50) $generated@@158) (=> (= (ControlFlow 0 54) 52) $generated@@157)))))
(let (($generated@@160  (=> (<= ($generated@@19 2) $generated@@126) (and (=> (= (ControlFlow 0 53) 50) $generated@@158) (=> (= (ControlFlow 0 53) 52) $generated@@157)))))
(let (($generated@@161  (and (=> (= (ControlFlow 0 55) 53) $generated@@160) (=> (= (ControlFlow 0 55) 54) $generated@@159))))
(let (($generated@@162 true))
(let (($generated@@163  (=> (=> true (exists (($generated@@164 Int) ) (!  (and (and (<= ($generated@@19 2) $generated@@164) (< $generated@@164 $generated@@113)) (= ($generated@@31 $generated@@113 $generated@@164) ($generated@@19 0)))
 :pattern ( ($generated@@31 $generated@@113 $generated@@164))
))) (and (=> (= (ControlFlow 0 56) 55) $generated@@161) (=> (= (ControlFlow 0 56) 22) $generated@@162)))))
(let (($generated@@165 true))
(let (($generated@@166  (=> (= (ControlFlow 0 6) (- 0 5)) (=> (not (and (<= ($generated@@19 2) $generated@@113) (forall (($generated@@167 Int) ) (!  (=> (and (<= ($generated@@19 2) $generated@@167) (< $generated@@167 $generated@@113)) (or (not (= ($generated@@31 $generated@@113 $generated@@167) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@113 $generated@@167))
)))) (exists (($generated@@168 Int) ) (!  (and (and (<= ($generated@@19 2) $generated@@168) (< $generated@@168 $generated@@113)) (= ($generated@@31 $generated@@113 $generated@@168) ($generated@@19 0)))
 :pattern ( ($generated@@31 $generated@@113 $generated@@168))
))))))
(let (($generated@@169  (=> (and (not (and (<= ($generated@@19 2) $generated@@127) (< $generated@@127 $generated@@113))) (= (ControlFlow 0 9) 6)) $generated@@166)))
(let (($generated@@170  (=> (and (<= ($generated@@19 2) $generated@@127) (< $generated@@127 $generated@@113)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (not (= $generated@@127 0)) (not true))) (=> (= (ControlFlow 0 7) 6) $generated@@166)))))
(let (($generated@@171  (=> (< $generated@@127 ($generated@@19 2)) (and (=> (= (ControlFlow 0 11) 7) $generated@@170) (=> (= (ControlFlow 0 11) 9) $generated@@169)))))
(let (($generated@@172  (=> (<= ($generated@@19 2) $generated@@127) (and (=> (= (ControlFlow 0 10) 7) $generated@@170) (=> (= (ControlFlow 0 10) 9) $generated@@169)))))
(let (($generated@@173  (and (=> (= (ControlFlow 0 12) 10) $generated@@172) (=> (= (ControlFlow 0 12) 11) $generated@@171))))
(let (($generated@@174 true))
(let (($generated@@175  (=> (not (and (<= ($generated@@19 2) $generated@@113) (forall (($generated@@176 Int) ) (!  (=> (and (<= ($generated@@19 2) $generated@@176) (< $generated@@176 $generated@@113)) (or (not (= ($generated@@31 $generated@@113 $generated@@176) 0)) (not true)))
 :pattern ( ($generated@@31 $generated@@113 $generated@@176))
)))) (and (=> (= (ControlFlow 0 13) 12) $generated@@173) (=> (= (ControlFlow 0 13) 4) $generated@@174)))))
(let (($generated@@177  (=> (and (not (and (<= ($generated@@19 2) $generated@@128) (< $generated@@128 $generated@@113))) (= (ControlFlow 0 17) 13)) $generated@@175)))
(let (($generated@@178  (=> (and (and (<= ($generated@@19 2) $generated@@128) (< $generated@@128 $generated@@113)) (and (or (not (= $generated@@128 0)) (not true)) (= (ControlFlow 0 16) 13))) $generated@@175)))
(let (($generated@@179  (=> (< $generated@@128 ($generated@@19 2)) (and (=> (= (ControlFlow 0 19) 16) $generated@@178) (=> (= (ControlFlow 0 19) 17) $generated@@177)))))
(let (($generated@@180  (=> (<= ($generated@@19 2) $generated@@128) (and (=> (= (ControlFlow 0 18) 16) $generated@@178) (=> (= (ControlFlow 0 18) 17) $generated@@177)))))
(let (($generated@@181  (and (=> (= (ControlFlow 0 20) 18) $generated@@180) (=> (= (ControlFlow 0 20) 19) $generated@@179))))
(let (($generated@@182  (=> (<= ($generated@@19 2) $generated@@113) (and (=> (= (ControlFlow 0 21) 20) $generated@@181) (=> (= (ControlFlow 0 21) 15) $generated@@165)))))
(let (($generated@@183  (=> (and (< $generated@@113 ($generated@@19 2)) (= (ControlFlow 0 14) 13)) $generated@@175)))
(let (($generated@@184  (=> (and ($generated@@108 $generated@@4 ($generated@@8 $generated@@113) $generated $generated@@115) ($generated@@30 $generated@@113)) (=> (and (and ($generated@@30 $generated@@113) (= (ControlFlow 0 3) (- 0 2))) ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (not ($generated@@29 $generated@@113))))))
(let (($generated@@185 true))
(let (($generated@@186  (=> (= $generated@@129 ($generated@@44 $generated@@130 $generated@@115 $generated@@1 false)) (and (and (and (and (and (=> (= (ControlFlow 0 69) 1) $generated@@185) (=> (= (ControlFlow 0 69) 3) $generated@@184)) (=> (= (ControlFlow 0 69) 68) $generated@@141)) (=> (= (ControlFlow 0 69) 56) $generated@@163)) (=> (= (ControlFlow 0 69) 21) $generated@@182)) (=> (= (ControlFlow 0 69) 14) $generated@@183)))))
(let (($generated@@187  (=> (and ($generated@@120 $generated@@115) ($generated@@122 $generated@@115)) (=> (and (and (= 1 $generated@@28) (<= ($generated@@19 2) $generated@@113)) (and (not ($generated@@29 $generated@@113)) (= (ControlFlow 0 70) 69))) $generated@@186))))
$generated@@187)))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
