(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 (T@T) Int)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 (Bool) T@U)
(declare-fun $generated@@15 (T@U) Bool)
(declare-fun $generated@@16 (Int) T@U)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 (Real) T@U)
(declare-fun $generated@@19 (T@U) Real)
(declare-fun $generated@@26 (T@U) Int)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 (T@U T@U) T@U)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@T T@T) T@T)
(declare-fun $generated@@47 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@72 (T@U) Bool)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@117 (T@U) T@U)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 (T@U T@U) Bool)
(declare-fun $generated@@120 (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@10 $generated@@11) 0) (= ($generated@@10 $generated@@12) 1)) (= ($generated@@10 $generated@@13) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@19 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@18 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9)
)
(assert (= ($generated@@26 $generated@@3) 0))
(assert (= ($generated@@27 $generated) $generated@@1))
(assert (= ($generated@@27 $generated@@0) $generated@@2))
(assert (= ($generated@@28 $generated@@3) $generated@@4))
(assert (= ($generated@@10 $generated@@30) 3))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@34 $generated@@31)  (or (= $generated@@34 $generated@@32) (= ($generated@@33 $generated@@34) $generated@@31)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@34 $generated@@31))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@35 $generated@@30 $generated@@37 $generated@@36 $generated@@38) ($generated@@35 $generated@@30 $generated@@37 $generated@@31 $generated@@38))
 :pattern ( ($generated@@35 $generated@@30 $generated@@37 $generated@@36 $generated@@38))
 :pattern ( ($generated@@35 $generated@@30 $generated@@37 $generated@@31 $generated@@38))
)))
(assert (= ($generated@@26 $generated@@39) 0))
(assert (= ($generated@@40 $generated@@5 $generated@@9) $generated@@39))
(assert  (not ($generated@@41 $generated@@39)))
(assert  (and (and (and (and (and (and (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@43 $generated@@50 $generated@@51 ($generated@@47 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@54) $generated@@52)
 :weight 0
)) (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (or (= $generated@@59 $generated@@60) (= ($generated@@43 $generated@@55 $generated@@56 ($generated@@47 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@57) $generated@@60) ($generated@@43 $generated@@55 $generated@@56 $generated@@58 $generated@@60)))
 :weight 0
))) (= ($generated@@10 $generated@@44) 4)) (= ($generated@@10 $generated@@45) 5)) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@10 ($generated@@46 $generated@@61 $generated@@62)) 6))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@48 ($generated@@46 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@46 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@49 ($generated@@46 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@46 $generated@@65 $generated@@66))
))))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@35 $generated@@30 $generated@@67 $generated@@31 $generated@@68)  (or (= $generated@@67 $generated@@32) ($generated@@15 ($generated@@42 $generated@@11 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@30 ($generated@@46 $generated@@44 $generated@@45) $generated@@68 $generated@@67) $generated@@3)))))
 :pattern ( ($generated@@35 $generated@@30 $generated@@67 $generated@@31 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 ($generated@@42 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@42 $generated@@71 $generated@@70))
)))
(assert ($generated@@41 $generated@@3))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> (and (and ($generated@@72 $generated@@73) (and (or (not (= $generated@@74 $generated@@32)) (not true)) (= ($generated@@33 $generated@@74) $generated@@31))) ($generated@@15 ($generated@@42 $generated@@11 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@30 ($generated@@46 $generated@@44 $generated@@45) $generated@@73 $generated@@74) $generated@@3)))) ($generated@@35 $generated@@12 ($generated@@42 $generated@@12 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@30 ($generated@@46 $generated@@44 $generated@@45) $generated@@73 $generated@@74) $generated@@39)) $generated@@0 $generated@@73))
 :pattern ( ($generated@@42 $generated@@12 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@30 ($generated@@46 $generated@@44 $generated@@45) $generated@@73 $generated@@74) $generated@@39)))
)))
(assert  (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@75 $generated@@78 $generated@@79 $generated@@80 ($generated@@77 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@75 $generated@@85 $generated@@86 $generated@@87 ($generated@@77 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@75 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@75 $generated@@94 $generated@@95 $generated@@96 ($generated@@77 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@75 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@15 ($generated@@75 $generated@@30 $generated@@44 $generated@@11 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))  (=> (and (or (not (= $generated@@107 $generated@@103)) (not true)) ($generated@@15 ($generated@@42 $generated@@11 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@30 ($generated@@46 $generated@@44 $generated@@45) $generated@@104 $generated@@107) $generated@@105)))) (= $generated@@107 $generated@@106)))
 :pattern ( ($generated@@75 $generated@@30 $generated@@44 $generated@@11 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@109 $generated@@36)  (and ($generated@@29 $generated@@30 $generated@@109 $generated@@31) (or (not (= $generated@@109 $generated@@32)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@109 $generated@@36))
 :pattern ( ($generated@@29 $generated@@30 $generated@@109 $generated@@31))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (!  (and (= ($generated@@110 ($generated@@40 $generated@@111 $generated@@112)) $generated@@111) (= ($generated@@28 ($generated@@40 $generated@@111 $generated@@112)) $generated@@112))
 :pattern ( ($generated@@40 $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@42 $generated@@114 ($generated@@69 $generated@@114 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@69 $generated@@114 $generated@@113))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (!  (=> (and ($generated@@72 $generated@@115) (and (or (not (= $generated@@116 $generated@@32)) (not true)) (= ($generated@@33 $generated@@116) $generated@@31))) ($generated@@29 $generated@@12 ($generated@@42 $generated@@12 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@30 ($generated@@46 $generated@@44 $generated@@45) $generated@@115 $generated@@116) $generated@@39)) $generated@@0))
 :pattern ( ($generated@@42 $generated@@12 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@30 ($generated@@46 $generated@@44 $generated@@45) $generated@@115 $generated@@116) $generated@@39)))
)))
(assert (= ($generated@@27 $generated@@31) $generated@@6))
(assert (= ($generated@@117 $generated@@31) $generated@@8))
(assert (= ($generated@@27 $generated@@36) $generated@@7))
(assert (= ($generated@@117 $generated@@36) $generated@@8))
(assert  (=> (<= 0 $generated@@118) (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> (or ($generated@@120 $generated@@121 $generated@@122) (and (< 0 $generated@@118) (and ($generated@@72 $generated@@121) (and (or (not (= $generated@@122 $generated@@32)) (not true)) (and ($generated@@29 $generated@@30 $generated@@122 $generated@@36) ($generated@@35 $generated@@30 $generated@@122 $generated@@36 $generated@@121)))))) (= ($generated@@119 $generated@@121 $generated@@122) (< ($generated@@17 ($generated@@42 $generated@@12 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@30 ($generated@@46 $generated@@44 $generated@@45) $generated@@121 $generated@@122) $generated@@39))) 0)))
 :pattern ( ($generated@@119 $generated@@121 $generated@@122) ($generated@@72 $generated@@121))
))))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (! ($generated@@35 $generated@@12 $generated@@124 $generated@@0 $generated@@123)
 :pattern ( ($generated@@35 $generated@@12 $generated@@124 $generated@@0 $generated@@123))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! ($generated@@35 $generated@@11 $generated@@126 $generated $generated@@125)
 :pattern ( ($generated@@35 $generated@@11 $generated@@126 $generated $generated@@125))
)))
(assert (forall (($generated@@127 T@U) ) (! ($generated@@29 $generated@@12 $generated@@127 $generated@@0)
 :pattern ( ($generated@@29 $generated@@12 $generated@@127 $generated@@0))
)))
(assert (forall (($generated@@128 T@U) ) (! ($generated@@29 $generated@@11 $generated@@128 $generated)
 :pattern ( ($generated@@29 $generated@@11 $generated@@128 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@129 () Bool)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@134  (=> (and (and (= $generated@@129 ($generated@@15 ($generated@@75 $generated@@30 $generated@@44 $generated@@11 $generated@@130 $generated@@131 $generated@@39))) (= ($generated@@119 $generated@@132 $generated@@131) (< ($generated@@17 ($generated@@42 $generated@@12 ($generated@@43 $generated@@44 $generated@@45 ($generated@@43 $generated@@30 ($generated@@46 $generated@@44 $generated@@45) $generated@@132 $generated@@131) $generated@@39))) 0))) (and ($generated@@29 $generated@@11 ($generated@@14 ($generated@@119 $generated@@132 $generated@@131)) $generated) (= (ControlFlow 0 3) (- 0 2)))) $generated@@129)))
(let (($generated@@135 true))
(let (($generated@@136  (=> (= $generated@@130 ($generated@@76 $generated@@32 $generated@@132 $generated@@3 $generated@@131)) (and (=> (= (ControlFlow 0 4) 1) $generated@@135) (=> (= (ControlFlow 0 4) 3) $generated@@134)))))
(let (($generated@@137  (=> (and ($generated@@72 $generated@@132) ($generated@@133 $generated@@132)) (=> (and (and (or (not (= $generated@@131 $generated@@32)) (not true)) (and ($generated@@29 $generated@@30 $generated@@131 $generated@@36) ($generated@@35 $generated@@30 $generated@@131 $generated@@36 $generated@@132))) (and (= 0 $generated@@118) (= (ControlFlow 0 5) 4))) $generated@@136))))
$generated@@137)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
