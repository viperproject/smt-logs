(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 () Int)
(declare-fun $generated@@42 (T@U T@U) Bool)
(declare-fun $generated@@43 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@U) Int)
(declare-fun $generated@@47 (Int) T@U)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@63 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@T T@T) T@T)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@118 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@119 (T@U) Bool)
(declare-fun $generated@@124 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (forall (($generated@@24 T@U) ) (!  (=> ($generated@@22 $generated@@24) ($generated@@23 $generated@@24))
 :pattern ( ($generated@@22 $generated@@24))
)))
(assert (= ($generated@@5 $generated@@26) 3))
(assert (forall (($generated@@28 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@28 $generated@@27) ($generated@@23 $generated@@28))
 :pattern ( ($generated@@23 $generated@@28) ($generated@@25 $generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@31) (= $generated@@30 $generated@@31))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@23 $generated@@36) (= ($generated@@35 $generated@@36) $generated@@3))
 :pattern ( ($generated@@23 $generated@@36))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 ($generated@@37 $generated@@40 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@37 $generated@@40 $generated@@39))
)))
(assert  (=> (<= 1 $generated@@41) (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> (or ($generated@@43 ($generated@@32 $generated@@26 $generated@@45) ($generated@@32 $generated@@26 $generated@@46)) (and (< 1 $generated@@41) (and ($generated@@25 $generated@@26 $generated@@45 $generated@@27) ($generated@@25 $generated@@26 $generated@@46 $generated@@27)))) (and (and ($generated@@23 ($generated@@32 $generated@@26 $generated@@45)) ($generated@@23 ($generated@@32 $generated@@26 $generated@@46))) (= ($generated@@42 ($generated@@32 $generated@@26 $generated@@45) ($generated@@32 $generated@@26 $generated@@46)) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@9 (< ($generated@@44 ($generated@@32 $generated@@26 $generated@@45)) ($generated@@44 ($generated@@32 $generated@@26 $generated@@46)))))))))
 :weight 3
 :pattern ( ($generated@@42 ($generated@@32 $generated@@26 $generated@@45) ($generated@@32 $generated@@26 $generated@@46)))
))))
(assert (forall (($generated@@48 T@U) ) (!  (=> ($generated@@23 $generated@@48) (exists (($generated@@49 Int) ) (= $generated@@48 ($generated@@47 $generated@@49))))
 :pattern ( ($generated@@23 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@29 $generated@@50 $generated@@51) (= ($generated@@44 $generated@@50) ($generated@@44 $generated@@51)))
 :pattern ( ($generated@@29 $generated@@50 $generated@@51))
)))
(assert  (=> (<= 1 $generated@@41) (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> (or ($generated@@43 $generated@@52 $generated@@53) (and (< 1 $generated@@41) (and ($generated@@25 $generated@@26 $generated@@52 $generated@@27) ($generated@@25 $generated@@26 $generated@@53 $generated@@27)))) (and (and ($generated@@23 $generated@@52) ($generated@@23 $generated@@53)) (= ($generated@@42 $generated@@52 $generated@@53) (< ($generated@@44 $generated@@52) ($generated@@44 $generated@@53)))))
 :pattern ( ($generated@@42 $generated@@52 $generated@@53))
))))
(assert (forall (($generated@@54 Int) ) (! (= ($generated@@35 ($generated@@47 $generated@@54)) $generated@@3)
 :pattern ( ($generated@@47 $generated@@54))
)))
(assert (forall (($generated@@55 Int) ) (! (= ($generated@@44 ($generated@@47 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@47 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@37 $generated@@57 ($generated@@38 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@38 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 Int) ) (! (= ($generated@@25 $generated@@26 ($generated@@47 $generated@@58) $generated@@27) ($generated@@25 $generated@@7 ($generated@@11 $generated@@58) $generated))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@47 $generated@@58) $generated@@27))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@59 $generated@@70 $generated@@71 $generated@@72 ($generated@@66 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@75 $generated@@76) $generated@@73)
 :weight 0
)) (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@59 $generated@@77 $generated@@78 $generated@@79 ($generated@@66 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@84 $generated@@85) ($generated@@59 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@84 $generated@@85)))
 :weight 0
)) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@59 $generated@@86 $generated@@87 $generated@@88 ($generated@@66 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@59 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)))) (= ($generated@@5 $generated@@60) 4)) (= ($generated@@5 $generated@@61) 5)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@63 $generated@@95 $generated@@96 ($generated@@67 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@99) $generated@@97)
 :weight 0
))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@104 $generated@@105) (= ($generated@@63 $generated@@100 $generated@@101 ($generated@@67 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@102) $generated@@105) ($generated@@63 $generated@@100 $generated@@101 $generated@@103 $generated@@105)))
 :weight 0
))) (= ($generated@@5 $generated@@64) 6)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (= ($generated@@5 ($generated@@65 $generated@@106 $generated@@107)) 7))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@68 ($generated@@65 $generated@@108 $generated@@109)) $generated@@108)
 :pattern ( ($generated@@65 $generated@@108 $generated@@109))
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@69 ($generated@@65 $generated@@110 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@65 $generated@@110 $generated@@111))
))))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 Bool) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@10 ($generated@@59 $generated@@60 $generated@@61 $generated@@6 ($generated@@62 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))  (=> (and (or (not (= $generated@@116 $generated@@112)) (not true)) ($generated@@10 ($generated@@37 $generated@@6 ($generated@@63 $generated@@61 $generated@@64 ($generated@@63 $generated@@60 ($generated@@65 $generated@@61 $generated@@64) $generated@@113 $generated@@116) $generated@@114)))) $generated@@115))
 :pattern ( ($generated@@59 $generated@@60 $generated@@61 $generated@@6 ($generated@@62 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ) (!  (=> (and ($generated@@119 $generated@@121) (and ($generated@@23 $generated@@120) ($generated@@118 $generated@@26 $generated@@120 $generated@@27 $generated@@121))) ($generated@@118 $generated@@7 ($generated@@11 ($generated@@44 $generated@@120)) $generated $generated@@121))
 :pattern ( ($generated@@118 $generated@@7 ($generated@@11 ($generated@@44 $generated@@120)) $generated $generated@@121))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ) (!  (=> (and ($generated@@119 $generated@@123) ($generated@@25 $generated@@26 $generated@@122 $generated@@27)) ($generated@@118 $generated@@26 $generated@@122 $generated@@27 $generated@@123))
 :pattern ( ($generated@@118 $generated@@26 $generated@@122 $generated@@27 $generated@@123))
)))
(assert (= ($generated@@21 $generated@@27) $generated@@2))
(assert (= ($generated@@124 $generated@@27) $generated@@4))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@T) ) (! (= ($generated@@38 $generated@@126 ($generated@@32 $generated@@126 $generated@@125)) ($generated@@32 $generated@@64 ($generated@@38 $generated@@126 $generated@@125)))
 :pattern ( ($generated@@38 $generated@@126 ($generated@@32 $generated@@126 $generated@@125)))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (! ($generated@@118 $generated@@7 $generated@@128 $generated $generated@@127)
 :pattern ( ($generated@@118 $generated@@7 $generated@@128 $generated $generated@@127))
)))
(assert (forall (($generated@@129 T@U) ) (! ($generated@@25 $generated@@7 $generated@@129 $generated)
 :pattern ( ($generated@@25 $generated@@7 $generated@@129 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@138  (=> (and (and (and (not ($generated@@42 $generated@@130 $generated@@131)) ($generated@@118 $generated@@26 $generated@@131 $generated@@27 $generated@@132)) (and ($generated@@118 $generated@@26 $generated@@130 $generated@@27 $generated@@132) ($generated@@43 $generated@@131 $generated@@130))) (and (and ($generated@@43 $generated@@131 $generated@@130) (= (ControlFlow 0 4) (- 0 3))) ($generated@@43 $generated@@131 $generated@@130))) (or ($generated@@42 $generated@@131 $generated@@130) (< ($generated@@44 $generated@@131) ($generated@@44 $generated@@130))))))
(let (($generated@@139 true))
(let (($generated@@140  (=> (not ($generated@@29 $generated@@130 $generated@@131)) (=> (and (and ($generated@@118 $generated@@26 $generated@@130 $generated@@27 $generated@@132) ($generated@@118 $generated@@26 $generated@@131 $generated@@27 $generated@@132)) (and ($generated@@43 $generated@@130 $generated@@131) ($generated@@43 $generated@@130 $generated@@131))) (and (=> (= (ControlFlow 0 5) 2) $generated@@139) (=> (= (ControlFlow 0 5) 4) $generated@@138))))))
(let (($generated@@141 true))
(let (($generated@@142  (=> (= $generated@@133 ($generated@@62 $generated@@134 $generated@@132 $generated@@1 false)) (=> (and ($generated@@25 $generated@@26 $generated@@130 $generated@@27) ($generated@@118 $generated@@26 $generated@@130 $generated@@27 $generated@@132)) (=> (and (and ($generated@@25 $generated@@26 $generated@@131 $generated@@27) ($generated@@118 $generated@@26 $generated@@131 $generated@@27 $generated@@132)) (and ($generated@@22 $generated@@130) ($generated@@22 $generated@@131))) (and (=> (= (ControlFlow 0 6) 1) $generated@@141) (=> (= (ControlFlow 0 6) 5) $generated@@140)))))))
(let (($generated@@143  (=> (and ($generated@@119 $generated@@132) ($generated@@135 $generated@@132)) (=> (and (and ($generated@@25 $generated@@26 $generated@@136 $generated@@27) ($generated@@118 $generated@@26 $generated@@136 $generated@@27 $generated@@132)) true) (=> (and (and (and ($generated@@25 $generated@@26 $generated@@137 $generated@@27) ($generated@@118 $generated@@26 $generated@@137 $generated@@27 $generated@@132)) true) (and (= 2 $generated@@41) (= (ControlFlow 0 7) 6))) $generated@@142)))))
$generated@@143)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
