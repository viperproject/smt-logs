(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U) Int)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@U) Bool)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (T@U) Int)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@51 (Int T@U) T@U)
(declare-fun $generated@@70 (T@U) Int)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@77 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@T T@T) T@T)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 (T@T) T@T)
(declare-fun $generated@@83 (T@T) T@T)
(declare-fun $generated@@132 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@138 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@6 $generated@@26) 3))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@34 T@U) ) (!  (=> (or ($generated@@27 ($generated@@25 $generated@@26 $generated@@34)) (and (< 1 $generated@@23) (and ($generated@@28 $generated@@26 $generated@@34 $generated@@29) ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10  (and ($generated@@30 ($generated@@25 $generated@@26 $generated@@34)) ($generated@@31 ($generated@@25 $generated@@26 ($generated@@32 ($generated@@25 $generated@@26 $generated@@34))))))))))) (= ($generated@@24 ($generated@@25 $generated@@26 $generated@@34)) (let (($generated@@35 ($generated@@33 ($generated@@25 $generated@@26 $generated@@34))))
$generated@@35)))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@25 $generated@@26 $generated@@34)))
))))
(assert (= ($generated@@36 $generated@@37) $generated@@3))
(assert ($generated@@28 $generated@@26 $generated@@37 $generated@@29))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@38 $generated@@39 $generated@@40) (= $generated@@39 $generated@@40))
 :pattern ( ($generated@@38 $generated@@39 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (!  (=> (and ($generated@@30 $generated@@41) ($generated@@30 $generated@@42)) (= ($generated@@38 $generated@@41 $generated@@42)  (and (= ($generated@@33 $generated@@41) ($generated@@33 $generated@@42)) ($generated@@38 ($generated@@32 $generated@@41) ($generated@@32 $generated@@42)))))
 :pattern ( ($generated@@38 $generated@@41 $generated@@42) ($generated@@30 $generated@@41))
 :pattern ( ($generated@@38 $generated@@41 $generated@@42) ($generated@@30 $generated@@42))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@25 $generated@@44 $generated@@43) $generated@@43)
 :pattern ( ($generated@@25 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ) (! (= ($generated@@31 $generated@@45) (= ($generated@@36 $generated@@45) $generated@@3))
 :pattern ( ($generated@@31 $generated@@45))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@30 $generated@@46) (= ($generated@@36 $generated@@46) $generated@@4))
 :pattern ( ($generated@@30 $generated@@46))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@47 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@47 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@30 $generated@@52) (exists (($generated@@53 Int) ($generated@@54 T@U) ) (= $generated@@52 ($generated@@51 $generated@@53 $generated@@54))))
 :pattern ( ($generated@@30 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@31 $generated@@55) (= $generated@@55 $generated@@37))
 :pattern ( ($generated@@31 $generated@@55))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@56 T@U) ) (!  (=> (or ($generated@@27 $generated@@56) (and (< 1 $generated@@23) (and ($generated@@28 $generated@@26 $generated@@56 $generated@@29) (and ($generated@@30 $generated@@56) ($generated@@31 ($generated@@32 $generated@@56)))))) (= ($generated@@24 $generated@@56) ($generated@@33 $generated@@56)))
 :pattern ( ($generated@@24 $generated@@56))
))))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@57 T@U) ) (!  (=> (or ($generated@@27 $generated@@57) (and (< 1 $generated@@23) (and ($generated@@28 $generated@@26 $generated@@57 $generated@@29) (and ($generated@@30 $generated@@57) ($generated@@31 ($generated@@32 $generated@@57)))))) (= ($generated@@24 $generated@@57) (let (($generated@@58 ($generated@@33 $generated@@57)))
$generated@@58)))
 :pattern ( ($generated@@24 $generated@@57))
))))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@28 $generated@@26 $generated@@59 $generated@@29) (or ($generated@@31 $generated@@59) ($generated@@30 $generated@@59)))
 :pattern ( ($generated@@30 $generated@@59) ($generated@@28 $generated@@26 $generated@@59 $generated@@29))
 :pattern ( ($generated@@31 $generated@@59) ($generated@@28 $generated@@26 $generated@@59 $generated@@29))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ) (!  (=> (and ($generated@@31 $generated@@60) ($generated@@31 $generated@@61)) ($generated@@38 $generated@@60 $generated@@61))
 :pattern ( ($generated@@38 $generated@@60 $generated@@61) ($generated@@31 $generated@@60))
 :pattern ( ($generated@@38 $generated@@60 $generated@@61) ($generated@@31 $generated@@61))
)))
(assert (forall (($generated@@62 Int) ($generated@@63 T@U) ) (! (= ($generated@@36 ($generated@@51 $generated@@62 $generated@@63)) $generated@@4)
 :pattern ( ($generated@@51 $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@64 Int) ($generated@@65 T@U) ) (! (= ($generated@@33 ($generated@@51 $generated@@64 $generated@@65)) $generated@@64)
 :pattern ( ($generated@@51 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@66 Int) ($generated@@67 T@U) ) (! (= ($generated@@32 ($generated@@51 $generated@@66 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@51 $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@47 $generated@@69 ($generated@@48 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@48 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@71 Int) ($generated@@72 T@U) ) (! (< ($generated@@70 $generated@@72) ($generated@@70 ($generated@@51 $generated@@71 $generated@@72)))
 :pattern ( ($generated@@51 $generated@@71 $generated@@72))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@73 $generated@@84 $generated@@85 $generated@@86 ($generated@@80 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@89 $generated@@90) $generated@@87)
 :weight 0
)) (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@73 $generated@@91 $generated@@92 $generated@@93 ($generated@@80 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@73 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@73 $generated@@100 $generated@@101 $generated@@102 ($generated@@80 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@73 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)))) (= ($generated@@6 $generated@@74) 4)) (= ($generated@@6 $generated@@75) 5)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@77 $generated@@109 $generated@@110 ($generated@@81 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@111) $generated@@113) $generated@@111)
 :weight 0
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@77 $generated@@114 $generated@@115 ($generated@@81 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@77 $generated@@114 $generated@@115 $generated@@117 $generated@@119)))
 :weight 0
))) (= ($generated@@6 $generated@@78) 6)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (= ($generated@@6 ($generated@@79 $generated@@120 $generated@@121)) 7))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@82 ($generated@@79 $generated@@122 $generated@@123)) $generated@@122)
 :pattern ( ($generated@@79 $generated@@122 $generated@@123))
))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@83 ($generated@@79 $generated@@124 $generated@@125)) $generated@@125)
 :pattern ( ($generated@@79 $generated@@124 $generated@@125))
))))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 Bool) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@11 ($generated@@73 $generated@@74 $generated@@75 $generated@@7 ($generated@@76 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))  (=> (and (or (not (= $generated@@130 $generated@@126)) (not true)) ($generated@@11 ($generated@@47 $generated@@7 ($generated@@77 $generated@@75 $generated@@78 ($generated@@77 $generated@@74 ($generated@@79 $generated@@75 $generated@@78) $generated@@127 $generated@@130) $generated@@128)))) $generated@@129))
 :pattern ( ($generated@@73 $generated@@74 $generated@@75 $generated@@7 ($generated@@76 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> (and ($generated@@133 $generated@@135) (and ($generated@@30 $generated@@134) ($generated@@132 $generated@@26 $generated@@134 $generated@@29 $generated@@135))) ($generated@@132 $generated@@8 ($generated@@12 ($generated@@33 $generated@@134)) $generated $generated@@135))
 :pattern ( ($generated@@132 $generated@@8 ($generated@@12 ($generated@@33 $generated@@134)) $generated $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (!  (=> (and ($generated@@133 $generated@@137) ($generated@@28 $generated@@26 $generated@@136 $generated@@29)) ($generated@@132 $generated@@26 $generated@@136 $generated@@29 $generated@@137))
 :pattern ( ($generated@@132 $generated@@26 $generated@@136 $generated@@29 $generated@@137))
)))
(assert (= ($generated@@22 $generated@@29) $generated@@2))
(assert (= ($generated@@138 $generated@@29) $generated@@5))
(assert (= $generated@@37 ($generated@@25 $generated@@26 $generated@@37)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> (and ($generated@@133 $generated@@140) (and ($generated@@30 $generated@@139) ($generated@@132 $generated@@26 $generated@@139 $generated@@29 $generated@@140))) ($generated@@132 $generated@@26 ($generated@@32 $generated@@139) $generated@@29 $generated@@140))
 :pattern ( ($generated@@132 $generated@@26 ($generated@@32 $generated@@139) $generated@@29 $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@T) ) (! (= ($generated@@48 $generated@@142 ($generated@@25 $generated@@142 $generated@@141)) ($generated@@25 $generated@@78 ($generated@@48 $generated@@142 $generated@@141)))
 :pattern ( ($generated@@48 $generated@@142 ($generated@@25 $generated@@142 $generated@@141)))
)))
(assert (forall (($generated@@143 Int) ($generated@@144 T@U) ) (! (= ($generated@@28 $generated@@26 ($generated@@51 $generated@@143 $generated@@144) $generated@@29)  (and ($generated@@28 $generated@@8 ($generated@@12 $generated@@143) $generated) ($generated@@28 $generated@@26 $generated@@144 $generated@@29)))
 :pattern ( ($generated@@28 $generated@@26 ($generated@@51 $generated@@143 $generated@@144) $generated@@29))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! ($generated@@132 $generated@@8 $generated@@146 $generated $generated@@145)
 :pattern ( ($generated@@132 $generated@@8 $generated@@146 $generated $generated@@145))
)))
(assert (forall (($generated@@147 T@U) ) (! ($generated@@28 $generated@@8 $generated@@147 $generated)
 :pattern ( ($generated@@28 $generated@@8 $generated@@147 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@155  (=> (= (ControlFlow 0 7) (- 0 6)) (= ($generated@@24 $generated@@148) ($generated@@33 $generated@@148)))))
(let (($generated@@156  (=> (and (= $generated@@149 $generated@@148) ($generated@@28 $generated@@26 $generated@@149 $generated@@29)) (and (=> (= (ControlFlow 0 8) (- 0 10)) ($generated@@30 $generated@@149)) (=> ($generated@@30 $generated@@149) (and (=> (= (ControlFlow 0 8) (- 0 9)) ($generated@@31 ($generated@@32 $generated@@149))) (=> ($generated@@31 ($generated@@32 $generated@@149)) (=> (and (and (= ($generated@@51 $generated@@150 ($generated@@25 $generated@@26 $generated@@37)) $generated@@149) (= ($generated@@24 $generated@@148) $generated@@150)) (and ($generated@@28 $generated@@8 ($generated@@12 ($generated@@24 $generated@@148)) $generated) (= (ControlFlow 0 8) 7))) $generated@@155))))))))
(let (($generated@@157  (=> ($generated@@132 $generated@@26 $generated@@148 $generated@@29 $generated@@151) (and (=> (= (ControlFlow 0 2) (- 0 5)) ($generated@@30 $generated@@148)) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($generated@@31 ($generated@@32 $generated@@148))) (=> (and ($generated@@30 $generated@@148) ($generated@@31 ($generated@@32 $generated@@148))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or ($generated@@38 $generated@@148 $generated@@148) (< ($generated@@70 $generated@@148) ($generated@@70 $generated@@148)))) (=> (or ($generated@@38 $generated@@148 $generated@@148) (< ($generated@@70 $generated@@148) ($generated@@70 $generated@@148))) (=> (and (or ($generated@@38 $generated@@148 $generated@@148) ($generated@@27 $generated@@148)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@30 $generated@@148))))))))))
(let (($generated@@158  (=> (and (= $generated@@152 ($generated@@76 $generated@@153 $generated@@151 $generated@@1 false)) ($generated@@30 $generated@@148)) (and (=> (= (ControlFlow 0 11) (- 0 12)) ($generated@@30 $generated@@148)) (=> ($generated@@30 $generated@@148) (=> ($generated@@31 ($generated@@32 $generated@@148)) (and (=> (= (ControlFlow 0 11) 2) $generated@@157) (=> (= (ControlFlow 0 11) 8) $generated@@156))))))))
(let (($generated@@159  (=> (and (and (and ($generated@@133 $generated@@151) ($generated@@154 $generated@@151)) ($generated@@28 $generated@@26 $generated@@148 $generated@@29)) (and (= 1 $generated@@23) (= (ControlFlow 0 13) 11))) $generated@@158)))
$generated@@159))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
