(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) T@U)
(declare-fun $generated@@0 (T@U T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@27 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@T T@T) T@T)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@U T@U) Bool)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (forall (($generated@@17 T@U) ($generated@@18 T@U) ) (! ($generated@@0 ($generated $generated@@17 $generated@@18) $generated@@18)
 :pattern ( ($generated $generated@@17 $generated@@18))
)))
(assert (forall (($generated@@19 T@U) ($generated@@20 T@U) ($generated@@21 T@U) ) (!  (=> ($generated@@0 $generated@@19 $generated@@21) ($generated@@0 ($generated $generated@@19 $generated@@20) $generated@@21))
 :pattern ( ($generated $generated@@19 $generated@@20) ($generated@@0 $generated@@19 $generated@@21))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ($generated@@24 T@U) ) (! (= ($generated@@0 ($generated $generated@@22 $generated@@23) $generated@@24)  (or (= $generated@@24 $generated@@23) ($generated@@0 $generated@@22 $generated@@24)))
 :pattern ( ($generated@@0 ($generated $generated@@22 $generated@@23) $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ) (!  (not ($generated@@0 $generated@@25 $generated@@26))
 :pattern ( ($generated@@0 $generated@@25 $generated@@26))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@28 $generated@@38 $generated@@39 ($generated@@35 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@42) $generated@@40)
 :weight 0
)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (or (= $generated@@47 $generated@@48) (= ($generated@@28 $generated@@43 $generated@@44 ($generated@@35 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@45) $generated@@48) ($generated@@28 $generated@@43 $generated@@44 $generated@@46 $generated@@48)))
 :weight 0
))) (= ($generated@@1 $generated@@29) 3)) (= ($generated@@1 $generated@@30) 4)) (= ($generated@@1 $generated@@31) 5)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (= ($generated@@1 ($generated@@32 $generated@@49 $generated@@50)) 6))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@36 ($generated@@32 $generated@@51 $generated@@52)) $generated@@51)
 :pattern ( ($generated@@32 $generated@@51 $generated@@52))
))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@37 ($generated@@32 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@32 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> ($generated@@27 $generated@@55 $generated@@56) (forall (($generated@@57 T@U) ) (!  (=> ($generated@@6 ($generated@@34 $generated@@2 ($generated@@28 $generated@@29 $generated@@30 ($generated@@28 $generated@@31 ($generated@@32 $generated@@29 $generated@@30) $generated@@55 $generated@@57) $generated@@33))) ($generated@@6 ($generated@@34 $generated@@2 ($generated@@28 $generated@@29 $generated@@30 ($generated@@28 $generated@@31 ($generated@@32 $generated@@29 $generated@@30) $generated@@56 $generated@@57) $generated@@33))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@30 ($generated@@28 $generated@@31 ($generated@@32 $generated@@29 $generated@@30) $generated@@56 $generated@@57) $generated@@33))
)))
 :pattern ( ($generated@@27 $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 ($generated@@34 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@34 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> ($generated@@61 $generated@@62 $generated@@63) (= $generated@@62 $generated@@63))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> (or (not (= $generated@@64 $generated@@66)) (not true)) (=> (and ($generated@@27 $generated@@64 $generated@@65) ($generated@@27 $generated@@65 $generated@@66)) ($generated@@27 $generated@@64 $generated@@66)))
 :pattern ( ($generated@@27 $generated@@64 $generated@@65) ($generated@@27 $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@34 $generated@@68 ($generated@@58 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@58 $generated@@68 $generated@@67))
)))
(assert  (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@69 $generated@@72 $generated@@73 $generated@@74 ($generated@@71 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@77 $generated@@78) $generated@@75)
 :weight 0
)) (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@69 $generated@@79 $generated@@80 $generated@@81 ($generated@@71 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@69 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@69 $generated@@88 $generated@@89 $generated@@90 ($generated@@71 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@69 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)))))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 Bool) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@6 ($generated@@69 $generated@@31 $generated@@29 $generated@@2 ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))  (=> (and (or (not (= $generated@@101 $generated@@97)) (not true)) ($generated@@6 ($generated@@34 $generated@@2 ($generated@@28 $generated@@29 $generated@@30 ($generated@@28 $generated@@31 ($generated@@32 $generated@@29 $generated@@30) $generated@@98 $generated@@101) $generated@@99)))) $generated@@100))
 :pattern ( ($generated@@69 $generated@@31 $generated@@29 $generated@@2 ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@61 $generated@@103 $generated@@104) (forall (($generated@@105 T@U) ) (! (= ($generated@@0 $generated@@103 $generated@@105) ($generated@@0 $generated@@104 $generated@@105))
 :pattern ( ($generated@@0 $generated@@103 $generated@@105))
 :pattern ( ($generated@@0 $generated@@104 $generated@@105))
)))
 :pattern ( ($generated@@61 $generated@@103 $generated@@104))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
