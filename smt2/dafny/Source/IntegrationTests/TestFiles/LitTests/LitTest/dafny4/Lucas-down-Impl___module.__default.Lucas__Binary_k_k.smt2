(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (Int) Bool)
(declare-fun $generated@@20 (Int) Int)
(declare-fun $generated@@21 (Int) Bool)
(declare-fun $generated@@22 (Int Int) Int)
(declare-fun $generated@@24 (T@U Int Int) Int)
(declare-fun $generated@@25 (Int Int) Bool)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@47 (Int Int) Int)
(declare-fun $generated@@55 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@59 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@T T@T) T@T)
(declare-fun $generated@@62 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@117 (T@U) T@U)
(declare-fun $generated@@118 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@23 Int) ) (!  (=> (or ($generated@@21 ($generated@@20 $generated@@23)) (and (< 0 $generated@@18) (<= ($generated@@20 0) $generated@@23))) (= ($generated@@19 ($generated@@20 $generated@@23)) (= ($generated@@20 ($generated@@22 $generated@@23 ($generated@@20 2))) ($generated@@20 0))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@23)))
))))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@26 T@U) ($generated@@27 Int) ($generated@@28 Int) ) (!  (=> (or ($generated@@25 $generated@@27 $generated@@28) (and (< 0 $generated@@18) (and (<= ($generated@@20 0) $generated@@27) (<= ($generated@@20 0) $generated@@28)))) (<= ($generated@@20 0) ($generated@@24 $generated@@26 $generated@@27 $generated@@28)))
 :pattern ( ($generated@@24 $generated@@26 $generated@@27 $generated@@28))
))))
(assert (forall (($generated@@29 Int) ) (! (= ($generated@@20 $generated@@29) $generated@@29)
 :pattern ( ($generated@@20 $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@32 $generated@@31))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@34 T@U) ($generated@@35 Int) ($generated@@36 Int) ) (!  (=> (or ($generated@@25 ($generated@@20 $generated@@35) ($generated@@20 $generated@@36)) (and (< 0 $generated@@18) (and (<= ($generated@@20 0) $generated@@35) (<= ($generated@@20 0) $generated@@36)))) (and (=> (or (not (= ($generated@@20 $generated@@36) ($generated@@20 0))) (not true)) (=> (or (not (= ($generated@@20 $generated@@35) ($generated@@20 0))) (not true)) (and ($generated@@25 ($generated@@20 (- $generated@@35 1)) ($generated@@20 $generated@@36)) ($generated@@25 ($generated@@20 (- $generated@@35 1)) ($generated@@20 (- $generated@@36 1)))))) (= ($generated@@24 ($generated@@33 $generated@@34) ($generated@@20 $generated@@35) ($generated@@20 $generated@@36)) (ite (= ($generated@@20 $generated@@36) ($generated@@20 0)) 1 (ite (= ($generated@@20 $generated@@35) ($generated@@20 0)) 0 (+ ($generated@@24 ($generated@@33 $generated@@34) ($generated@@20 (- $generated@@35 1)) ($generated@@20 $generated@@36)) ($generated@@24 ($generated@@33 $generated@@34) ($generated@@20 (- $generated@@35 1)) ($generated@@20 (- $generated@@36 1)))))))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@33 $generated@@34) ($generated@@20 $generated@@35) ($generated@@20 $generated@@36)))
))))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 ($generated@@37 $generated@@40 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@37 $generated@@40 $generated@@39))
)))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@41 $generated@@4 $generated@@43 $generated@@42) (<= ($generated@@20 0) ($generated@@9 $generated@@43)))
 :pattern ( ($generated@@41 $generated@@4 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 Int) ($generated@@46 Int) ) (! (= ($generated@@24 ($generated@@33 $generated@@44) $generated@@45 $generated@@46) ($generated@@24 $generated@@44 $generated@@45 $generated@@46))
 :pattern ( ($generated@@24 ($generated@@33 $generated@@44) $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@48 Int) ($generated@@49 Int) ) (! (= ($generated@@47 $generated@@48 $generated@@49) (div $generated@@48 $generated@@49))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@50 T@U) ($generated@@51 Int) ($generated@@52 Int) ) (!  (=> (or ($generated@@25 $generated@@51 $generated@@52) (and (< 0 $generated@@18) (and (<= ($generated@@20 0) $generated@@51) (<= ($generated@@20 0) $generated@@52)))) (and (=> (or (not (= $generated@@52 ($generated@@20 0))) (not true)) (=> (or (not (= $generated@@51 ($generated@@20 0))) (not true)) (and ($generated@@25 (- $generated@@51 1) $generated@@52) ($generated@@25 (- $generated@@51 1) (- $generated@@52 1))))) (= ($generated@@24 ($generated@@33 $generated@@50) $generated@@51 $generated@@52) (ite (= $generated@@52 ($generated@@20 0)) 1 (ite (= $generated@@51 ($generated@@20 0)) 0 (+ ($generated@@24 $generated@@50 (- $generated@@51 1) $generated@@52) ($generated@@24 $generated@@50 (- $generated@@51 1) (- $generated@@52 1))))))))
 :pattern ( ($generated@@24 ($generated@@33 $generated@@50) $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@37 $generated@@54 ($generated@@38 $generated@@54 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@38 $generated@@54 $generated@@53))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@55 $generated@@66 $generated@@67 $generated@@68 ($generated@@62 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@72 $generated@@69) $generated@@71 $generated@@72) $generated@@69)
 :weight 0
)) (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@78 $generated@@80) (= ($generated@@55 $generated@@73 $generated@@74 $generated@@75 ($generated@@62 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@55 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@55 $generated@@82 $generated@@83 $generated@@84 ($generated@@62 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@89 $generated@@90) ($generated@@55 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@89 $generated@@90)))
 :weight 0
)))) (= ($generated@@2 $generated@@56) 3)) (= ($generated@@2 $generated@@57) 4)) (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@59 $generated@@91 $generated@@92 ($generated@@63 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@93) $generated@@95) $generated@@93)
 :weight 0
))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@100 $generated@@101) (= ($generated@@59 $generated@@96 $generated@@97 ($generated@@63 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@98) $generated@@101) ($generated@@59 $generated@@96 $generated@@97 $generated@@99 $generated@@101)))
 :weight 0
))) (= ($generated@@2 $generated@@60) 5)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (= ($generated@@2 ($generated@@61 $generated@@102 $generated@@103)) 6))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (! (= ($generated@@64 ($generated@@61 $generated@@104 $generated@@105)) $generated@@104)
 :pattern ( ($generated@@61 $generated@@104 $generated@@105))
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (! (= ($generated@@65 ($generated@@61 $generated@@106 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@61 $generated@@106 $generated@@107))
))))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 Bool) ($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@7 ($generated@@55 $generated@@56 $generated@@57 $generated@@3 ($generated@@58 $generated@@108 $generated@@109 $generated@@110 $generated@@111) $generated@@112 $generated@@113))  (=> (and (or (not (= $generated@@112 $generated@@108)) (not true)) ($generated@@7 ($generated@@37 $generated@@3 ($generated@@59 $generated@@57 $generated@@60 ($generated@@59 $generated@@56 ($generated@@61 $generated@@57 $generated@@60) $generated@@109 $generated@@112) $generated@@110)))) $generated@@111))
 :pattern ( ($generated@@55 $generated@@56 $generated@@57 $generated@@3 ($generated@@58 $generated@@108 $generated@@109 $generated@@110 $generated@@111) $generated@@112 $generated@@113))
)))
(assert (forall (($generated@@114 Int) ($generated@@115 Int) ) (! (= ($generated@@22 $generated@@114 $generated@@115) (mod $generated@@114 $generated@@115))
 :pattern ( ($generated@@22 $generated@@114 $generated@@115))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@116 Int) ) (!  (=> (or ($generated@@21 $generated@@116) (and (< 0 $generated@@18) (<= ($generated@@20 0) $generated@@116))) (= ($generated@@19 $generated@@116) (= ($generated@@22 $generated@@116 ($generated@@20 2)) ($generated@@20 0))))
 :pattern ( ($generated@@19 $generated@@116))
))))
(assert (= ($generated@@117 $generated@@42) $generated@@0))
(assert (= ($generated@@118 $generated@@42) $generated@@1))
(assert (forall (($generated@@119 Int) ) (! (= ($generated@@38 $generated@@4 ($generated@@8 ($generated@@20 $generated@@119))) ($generated@@30 $generated@@60 ($generated@@38 $generated@@4 ($generated@@8 $generated@@119))))
 :pattern ( ($generated@@38 $generated@@4 ($generated@@8 ($generated@@20 $generated@@119))))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@T) ) (! (= ($generated@@38 $generated@@121 ($generated@@30 $generated@@121 $generated@@120)) ($generated@@30 $generated@@60 ($generated@@38 $generated@@121 $generated@@120)))
 :pattern ( ($generated@@38 $generated@@121 ($generated@@30 $generated@@121 $generated@@120)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 (T@U) Bool)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let (($generated@@136  (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@22 ($generated@@24 ($generated@@33 ($generated@@33 $generated@@122)) $generated@@123 $generated@@124) ($generated@@20 2)) (ite  (and ($generated@@19 $generated@@123) (not ($generated@@19 $generated@@124))) 0 ($generated@@22 ($generated@@24 ($generated@@33 ($generated@@33 $generated@@122)) ($generated@@47 $generated@@123 ($generated@@20 2)) ($generated@@47 $generated@@124 ($generated@@20 2))) ($generated@@20 2)))))))
(let (($generated@@137  (=> (not (or (= $generated@@123 ($generated@@20 0)) (= $generated@@124 ($generated@@20 0)))) (and (=> (= (ControlFlow 0 4) (- 0 13)) ($generated@@41 $generated@@4 ($generated@@8 (- $generated@@123 1)) $generated@@42)) (=> ($generated@@41 $generated@@4 ($generated@@8 (- $generated@@123 1)) $generated@@42) (=> (= $generated@@125 (- $generated@@123 1)) (and (=> (= (ControlFlow 0 4) (- 0 12)) (or (<= 0 $generated@@123) (= $generated@@125 $generated@@123))) (=> (or (<= 0 $generated@@123) (= $generated@@125 $generated@@123)) (and (=> (= (ControlFlow 0 4) (- 0 11)) (or (or (<= 0 $generated@@124) (< $generated@@125 $generated@@123)) (= $generated@@124 $generated@@124))) (=> (or (or (<= 0 $generated@@124) (< $generated@@125 $generated@@123)) (= $generated@@124 $generated@@124)) (and (=> (= (ControlFlow 0 4) (- 0 10)) (or (< $generated@@125 $generated@@123) (and (= $generated@@125 $generated@@123) (< $generated@@124 $generated@@124)))) (=> (or (< $generated@@125 $generated@@123) (and (= $generated@@125 $generated@@123) (< $generated@@124 $generated@@124))) (=> (and ($generated@@126 $generated@@127) ($generated@@128 $generated@@127)) (=> (and (and ($generated@@25 $generated@@125 $generated@@124) (and (and ($generated@@21 $generated@@125) (=> ($generated@@19 $generated@@125) ($generated@@21 $generated@@124))) (=> (not (and ($generated@@19 $generated@@125) (not ($generated@@19 $generated@@124)))) ($generated@@25 ($generated@@47 $generated@@125 ($generated@@20 2)) ($generated@@47 $generated@@124 ($generated@@20 2)))))) (and (= ($generated@@22 ($generated@@24 ($generated@@33 ($generated@@33 $generated@@122)) $generated@@125 $generated@@124) ($generated@@20 2)) (ite  (and ($generated@@19 $generated@@125) (not ($generated@@19 $generated@@124))) 0 ($generated@@22 ($generated@@24 ($generated@@33 ($generated@@33 $generated@@122)) ($generated@@47 $generated@@125 ($generated@@20 2)) ($generated@@47 $generated@@124 ($generated@@20 2))) ($generated@@20 2)))) (= $generated@@129 $generated@@127))) (and (=> (= (ControlFlow 0 4) (- 0 9)) ($generated@@41 $generated@@4 ($generated@@8 (- $generated@@123 1)) $generated@@42)) (=> ($generated@@41 $generated@@4 ($generated@@8 (- $generated@@123 1)) $generated@@42) (=> (= $generated@@130 (- $generated@@123 1)) (and (=> (= (ControlFlow 0 4) (- 0 8)) ($generated@@41 $generated@@4 ($generated@@8 (- $generated@@124 1)) $generated@@42)) (=> ($generated@@41 $generated@@4 ($generated@@8 (- $generated@@124 1)) $generated@@42) (=> (= $generated@@131 (- $generated@@124 1)) (and (=> (= (ControlFlow 0 4) (- 0 7)) (or (<= 0 $generated@@123) (= $generated@@130 $generated@@123))) (=> (or (<= 0 $generated@@123) (= $generated@@130 $generated@@123)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (or (<= 0 $generated@@124) (< $generated@@130 $generated@@123)) (= $generated@@131 $generated@@124))) (=> (or (or (<= 0 $generated@@124) (< $generated@@130 $generated@@123)) (= $generated@@131 $generated@@124)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (< $generated@@130 $generated@@123) (and (= $generated@@130 $generated@@123) (< $generated@@131 $generated@@124)))) (=> (or (< $generated@@130 $generated@@123) (and (= $generated@@130 $generated@@123) (< $generated@@131 $generated@@124))) (=> (and ($generated@@126 $generated@@132) ($generated@@128 $generated@@132)) (=> (and (and (and ($generated@@25 $generated@@130 $generated@@131) (and (and ($generated@@21 $generated@@130) (=> ($generated@@19 $generated@@130) ($generated@@21 $generated@@131))) (=> (not (and ($generated@@19 $generated@@130) (not ($generated@@19 $generated@@131)))) ($generated@@25 ($generated@@47 $generated@@130 ($generated@@20 2)) ($generated@@47 $generated@@131 ($generated@@20 2)))))) (= ($generated@@22 ($generated@@24 ($generated@@33 ($generated@@33 $generated@@122)) $generated@@130 $generated@@131) ($generated@@20 2)) (ite  (and ($generated@@19 $generated@@130) (not ($generated@@19 $generated@@131))) 0 ($generated@@22 ($generated@@24 ($generated@@33 ($generated@@33 $generated@@122)) ($generated@@47 $generated@@130 ($generated@@20 2)) ($generated@@47 $generated@@131 ($generated@@20 2))) ($generated@@20 2))))) (and (= $generated@@127 $generated@@132) (= (ControlFlow 0 4) 2))) $generated@@136))))))))))))))))))))))))))))
(let (($generated@@138  (=> (and (or (= $generated@@123 ($generated@@20 0)) (= $generated@@124 ($generated@@20 0))) (= (ControlFlow 0 3) 2)) $generated@@136)))
(let (($generated@@139  (and (=> (= (ControlFlow 0 14) 3) $generated@@138) (=> (= (ControlFlow 0 14) 4) $generated@@137))))
(let (($generated@@140  (=> (and (= $generated@@123 ($generated@@20 0)) (= (ControlFlow 0 16) 14)) $generated@@139)))
(let (($generated@@141  (=> (and (or (not (= $generated@@123 ($generated@@20 0))) (not true)) (= (ControlFlow 0 15) 14)) $generated@@139)))
(let (($generated@@142  (=> (= $generated@@133 ($generated@@58 $generated@@134 $generated@@135 $generated false)) (=> (and (and ($generated@@126 $generated@@129) ($generated@@128 $generated@@129)) (and (= $generated@@135 $generated@@129) (forall (($generated@@143 Int) ($generated@@144 Int) ) (!  (=> (and (and (and (<= ($generated@@20 0) $generated@@143) (<= ($generated@@20 0) $generated@@144)) ($generated@@7 ($generated@@30 $generated@@3 ($generated@@6 true)))) (or (and (<= 0 $generated@@143) (< $generated@@143 $generated@@123)) (and (= $generated@@143 $generated@@123) (and (<= 0 $generated@@144) (< $generated@@144 $generated@@124))))) (= ($generated@@22 ($generated@@24 ($generated@@33 $generated@@122) $generated@@143 $generated@@144) ($generated@@20 2)) (ite  (and ($generated@@19 $generated@@143) (not ($generated@@19 $generated@@144))) 0 ($generated@@22 ($generated@@24 ($generated@@33 $generated@@122) ($generated@@47 $generated@@143 ($generated@@20 2)) ($generated@@47 $generated@@144 ($generated@@20 2))) ($generated@@20 2)))))
 :pattern ( ($generated@@47 $generated@@144 ($generated@@20 2)) ($generated@@47 $generated@@143 ($generated@@20 2)))
 :pattern ( ($generated@@47 $generated@@144 ($generated@@20 2)) ($generated@@19 $generated@@143))
 :pattern ( ($generated@@47 $generated@@143 ($generated@@20 2)) ($generated@@19 $generated@@144))
 :pattern ( ($generated@@19 $generated@@144) ($generated@@19 $generated@@143))
)))) (and (=> (= (ControlFlow 0 17) 15) $generated@@141) (=> (= (ControlFlow 0 17) 16) $generated@@140))))))
(let (($generated@@145  (=> (and ($generated@@126 $generated@@135) ($generated@@128 $generated@@135)) (=> (and (and (<= ($generated@@20 0) $generated@@123) (<= ($generated@@20 0) $generated@@124)) (and (= 1 $generated@@18) (= (ControlFlow 0 18) 17))) $generated@@142))))
$generated@@145)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
