(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.ValidGlobalStateOpaque (Bool T@U) Bool)
(declare-fun |_module.__default.ValidGlobalStateOpaque#canCall| (T@U) Bool)
(declare-fun MapType () T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun _module.__default.ValidGlobal (T@U) Bool)
(declare-fun |_module.__default.ValidGlobal#canCall| (T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun charType () T@T)
(declare-fun _module.__default.GlobalUpdate (T@U T@U Int) T@U)
(declare-fun |_module.__default.GlobalUpdate#canCall| (T@U T@U Int) Bool)
(declare-fun reveal__module._default.ValidGlobalStateOpaque () Bool)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TInt TagChar TagInt TagSet TagSeq TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 |tytagFamily$_tuple#2|)
)
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) (i Int) (v T@U) (n Int) ) (!  (=> (and (<= 0 n) (< n (|Seq#Length| s))) (and (=> (= i n) (= (|Seq#Index| (|Seq#Update| s i v) n) v)) (=> (or (not (= i n)) (not true)) (= (|Seq#Index| (|Seq#Update| s i v) n) (|Seq#Index| s n)))))
 :pattern ( (|Seq#Index| (|Seq#Update| s i v) n))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|Set#Subset| a b) (forall ((o T@U) ) (!  (=> (|Set#IsMember| a o) (|Set#IsMember| b o))
 :pattern ( (|Set#IsMember| a o))
 :pattern ( (|Set#IsMember| b o))
)))
 :pattern ( (|Set#Subset| a b))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (= (Ctor SetType) 4))
(assert (forall ((v@@0 T@U) (t0 T@U) ) (! (= ($Is SetType v@@0 (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v@@0 bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v@@0 bx))
)))
 :pattern ( ($Is SetType v@@0 (TSet t0)))
)))
(assert  (and (and (and (and (= (Ctor MapType) 5) (= (Ctor SeqType) 6)) (forall ((t0@@0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@0 t1 (MapType0Store t0@@0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 7)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|globals#0| T@U) ) (!  (=> (or (|_module.__default.ValidGlobalStateOpaque#canCall| |globals#0|) (and (< 1 $FunctionContextHeight) ($Is MapType |globals#0| (TMap (TSeq TChar) (TSeq TInt))))) (and (forall ((|g#0| T@U) ) (!  (=> ($Is SeqType |g#0| (TSeq TChar)) (|_module.__default.ValidGlobal#canCall| |g#0|))
 :pattern ( ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| |globals#0|) ($Box SeqType |g#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |globals#0|) ($Box SeqType |g#0|)))
 :pattern ( (_module.__default.ValidGlobal |g#0|))
)) (= (_module.__default.ValidGlobalStateOpaque true |globals#0|) (forall ((|g#0@@0| T@U) ) (!  (=> ($Is SeqType |g#0@@0| (TSeq TChar)) (= (_module.__default.ValidGlobal |g#0@@0|)  (and (|Set#IsMember| (|Map#Domain| |globals#0|) ($Box SeqType |g#0@@0|)) (= (|Seq#Length| ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| |globals#0|) ($Box SeqType |g#0@@0|)))) (LitInt 1)))))
 :pattern ( ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| |globals#0|) ($Box SeqType |g#0@@0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |globals#0|) ($Box SeqType |g#0@@0|)))
 :pattern ( (_module.__default.ValidGlobal |g#0@@0|))
)))))
 :pattern ( (_module.__default.ValidGlobalStateOpaque true |globals#0|))
))))
(assert (forall ((v@@1 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@1) t h) ($IsAlloc T@@1 v@@1 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@1) t h))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|globals#0@@0| T@U) ) (!  (=> (or (|_module.__default.ValidGlobalStateOpaque#canCall| (Lit MapType |globals#0@@0|)) (and (< 1 $FunctionContextHeight) ($Is MapType |globals#0@@0| (TMap (TSeq TChar) (TSeq TInt))))) (and (forall ((|g#1| T@U) ) (!  (=> ($Is SeqType |g#1| (TSeq TChar)) (|_module.__default.ValidGlobal#canCall| |g#1|))
 :pattern ( ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| |globals#0@@0|) ($Box SeqType |g#1|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |globals#0@@0|) ($Box SeqType |g#1|)))
 :pattern ( (_module.__default.ValidGlobal |g#1|))
)) (= (_module.__default.ValidGlobalStateOpaque true (Lit MapType |globals#0@@0|)) (forall ((|g#1@@0| T@U) ) (!  (=> ($Is SeqType |g#1@@0| (TSeq TChar)) (= (_module.__default.ValidGlobal |g#1@@0|)  (and (|Set#IsMember| (|Map#Domain| |globals#0@@0|) ($Box SeqType |g#1@@0|)) (= (|Seq#Length| ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |globals#0@@0|)) ($Box SeqType |g#1@@0|)))) (LitInt 1)))))
 :pattern ( ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| |globals#0@@0|) ($Box SeqType |g#1@@0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |globals#0@@0|) ($Box SeqType |g#1@@0|)))
 :pattern ( (_module.__default.ValidGlobal |g#1@@0|))
)))))
 :weight 3
 :pattern ( (_module.__default.ValidGlobalStateOpaque true (Lit MapType |globals#0@@0|)))
))))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (|Set#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (= (Ctor charType) 8))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TChar) (and (= ($Box charType ($Unbox charType bx@@1)) bx@@1) ($Is charType ($Unbox charType bx@@1) TChar)))
 :pattern ( ($IsBox bx@@1 TChar))
)))
(assert (forall ((v@@2 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@2) t@@0) ($Is T@@2 v@@2 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@2) t@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|gm#0| T@U) (|g#0@@1| T@U) (|v#0| Int) ) (!  (=> (or (|_module.__default.GlobalUpdate#canCall| |gm#0| |g#0@@1| |v#0|) (and (< 2 $FunctionContextHeight) (and (and ($Is MapType |gm#0| (TMap (TSeq TChar) (TSeq TInt))) ($Is SeqType |g#0@@1| (TSeq TChar))) (and (_module.__default.ValidGlobalStateOpaque reveal__module._default.ValidGlobalStateOpaque |gm#0|) (_module.__default.ValidGlobal |g#0@@1|))))) (and (_module.__default.ValidGlobalStateOpaque reveal__module._default.ValidGlobalStateOpaque (_module.__default.GlobalUpdate |gm#0| |g#0@@1| |v#0|)) ($Is MapType (_module.__default.GlobalUpdate |gm#0| |g#0@@1| |v#0|) (TMap (TSeq TChar) (TSeq TInt)))))
 :pattern ( (_module.__default.GlobalUpdate |gm#0| |g#0@@1| |v#0|))
))))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Seq#Length| s@@0))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@0) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@2) ($IsAllocBox bx@@2 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@3 bx@@2))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@1 u)) t@@1)
 :pattern ( (TMap t@@1 u))
)))
(assert (forall ((t@@2 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@2 u@@0)) u@@0)
 :pattern ( (TMap t@@2 u@@0))
)))
(assert (forall ((t@@3 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@3 u@@1)) TagMap)
 :pattern ( (TMap t@@3 u@@1))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@2) h@@1) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i@@0) t0@@2 h@@1))
 :pattern ( (|Seq#Index| v@@4 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@2) h@@1))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSet (TSet t@@4)) t@@4)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSet t@@5)) TagSet)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSeq (TSeq t@@6)) t@@6)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSeq t@@7)) TagSeq)
 :pattern ( (TSeq t@@7))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((v@@5 T@U) (t0@@3 T@U) (t1@@0 T@U) (h@@2 T@U) ) (! (= ($IsAlloc MapType v@@5 (TMap t0@@3 t1@@0) h@@2) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@5) bx@@3) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@5) bx@@3) t1@@0 h@@2) ($IsAllocBox bx@@3 t0@@3 h@@2)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@5) bx@@3))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@5) bx@@3))
)))
 :pattern ( ($IsAlloc MapType v@@5 (TMap t0@@3 t1@@0) h@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|gm#0@@0| T@U) (|g#0@@2| T@U) (|v#0@@0| Int) ) (!  (=> (or (|_module.__default.GlobalUpdate#canCall| |gm#0@@0| |g#0@@2| |v#0@@0|) (and (< 2 $FunctionContextHeight) (and (and ($Is MapType |gm#0@@0| (TMap (TSeq TChar) (TSeq TInt))) ($Is SeqType |g#0@@2| (TSeq TChar))) (and (_module.__default.ValidGlobalStateOpaque reveal__module._default.ValidGlobalStateOpaque |gm#0@@0|) (_module.__default.ValidGlobal |g#0@@2|))))) (= (_module.__default.GlobalUpdate |gm#0@@0| |g#0@@2| |v#0@@0|) (|Map#Build| |gm#0@@0| ($Box SeqType |g#0@@2|) ($Box SeqType (|Seq#Update| ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| |gm#0@@0|) ($Box SeqType |g#0@@2|))) (LitInt 0) ($Box intType (int_2_U |v#0@@0|)))))))
 :pattern ( (_module.__default.GlobalUpdate |gm#0@@0| |g#0@@2| |v#0@@0|))
))))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((bx@@4 T@U) (s@@1 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@4 (TMap s@@1 t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@4)) bx@@4) ($Is MapType ($Unbox MapType bx@@4) (TMap s@@1 t@@8))))
 :pattern ( ($IsBox bx@@4 (TMap s@@1 t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@5)) bx@@5) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@5) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@4 T@T) (t1@@1 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@4 t1@@1 t2 (MapType1Store t0@@4 t1@@1 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 9)) (= (Ctor FieldType) 10)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 11))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((s@@2 T@U) (i@@1 Int) (v@@6 T@U) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| s@@2))) (= (|Seq#Length| (|Seq#Update| s@@2 i@@1 v@@6)) (|Seq#Length| s@@2)))
 :pattern ( (|Seq#Length| (|Seq#Update| s@@2 i@@1 v@@6)))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@4 T@U) ) (!  (or (= m@@4 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@4) k)))
 :pattern ( (|Map#Domain| m@@4))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((v@@7 T@U) ) (|Set#IsMember| (|Map#Values| m@@5) v@@7)))
 :pattern ( (|Map#Values| m@@5))
)))
(assert (forall ((m@@6 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@6) item)  (and (|Set#IsMember| (|Map#Domain| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@6) item))
)))
(assert (forall ((m@@7 T@U) (v@@8 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@7) v@@8) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@7) u@@3) (= v@@8 (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@7) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@7) v@@8))
)))
(assert (forall ((m@@8 T@U) (u@@4 T@U) (|u'| T@U) (v@@9 T@U) ) (!  (and (=> (= |u'| u@@4) (and (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@9)) |u'|) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@9)) |u'|) v@@9))) (=> (or (not (= |u'| u@@4)) (not true)) (and (= (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@9)) |u'|) (|Set#IsMember| (|Map#Domain| m@@8) |u'|)) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@9)) |u'|) (MapType0Select BoxType BoxType (|Map#Elements| m@@8) |u'|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@9)) |u'|))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@9)) |u'|))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@6 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@6 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@6)) bx@@6) ($Is SetType ($Unbox SetType bx@@6) (TSet t@@9))))
 :pattern ( ($IsBox bx@@6 (TSet t@@9)))
)))
(assert (forall ((bx@@7 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@7 (TSeq t@@10)) (and (= ($Box SeqType ($Unbox SeqType bx@@7)) bx@@7) ($Is SeqType ($Unbox SeqType bx@@7) (TSeq t@@10))))
 :pattern ( ($IsBox bx@@7 (TSeq t@@10)))
)))
(assert (forall ((v@@10 T@U) (t0@@5 T@U) (t1@@2 T@U) ) (! (= ($Is MapType v@@10 (TMap t0@@5 t1@@2)) (forall ((bx@@8 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@10) bx@@8) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@10) bx@@8) t1@@2) ($IsBox bx@@8 t0@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@10) bx@@8))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@10) bx@@8))
)))
 :pattern ( ($Is MapType v@@10 (TMap t0@@5 t1@@2)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@1 o@@0) (|Set#IsMember| b@@1 o@@0))
 :pattern ( (|Set#IsMember| a@@1 o@@0))
 :pattern ( (|Set#IsMember| b@@1 o@@0))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@0)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@0))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@0))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@0))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@1)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@1))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@1))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@1))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|gm#0@@1| T@U) (|g#0@@3| T@U) (|v#0@@1| Int) ) (!  (=> (or (|_module.__default.GlobalUpdate#canCall| (Lit MapType |gm#0@@1|) (Lit SeqType |g#0@@3|) (LitInt |v#0@@1|)) (and (< 2 $FunctionContextHeight) (and (and ($Is MapType |gm#0@@1| (TMap (TSeq TChar) (TSeq TInt))) ($Is SeqType |g#0@@3| (TSeq TChar))) (and (_module.__default.ValidGlobalStateOpaque reveal__module._default.ValidGlobalStateOpaque (Lit MapType |gm#0@@1|)) (_module.__default.ValidGlobal (Lit SeqType |g#0@@3|)))))) (= (_module.__default.GlobalUpdate (Lit MapType |gm#0@@1|) (Lit SeqType |g#0@@3|) (LitInt |v#0@@1|)) (|Map#Build| (Lit MapType |gm#0@@1|) ($Box SeqType (Lit SeqType |g#0@@3|)) ($Box SeqType (|Seq#Update| ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |gm#0@@1|)) ($Box SeqType (Lit SeqType |g#0@@3|)))) (LitInt 0) ($Box intType (int_2_U (LitInt |v#0@@1|))))))))
 :weight 3
 :pattern ( (_module.__default.GlobalUpdate (Lit MapType |gm#0@@1|) (Lit SeqType |g#0@@3|) (LitInt |v#0@@1|)))
))))
(assert (forall ((s@@3 T@U) ) (!  (=> (= (|Seq#Length| s@@3) 0) (= s@@3 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@3))
)))
(assert (forall ((h@@3 T@U) (v@@11 T@U) ) (! ($IsAlloc intType v@@11 TInt h@@3)
 :pattern ( ($IsAlloc intType v@@11 TInt h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@12 T@U) ) (! ($IsAlloc charType v@@12 TChar h@@4)
 :pattern ( ($IsAlloc charType v@@12 TChar h@@4))
)))
(assert (forall ((v@@13 T@U) (t0@@6 T@U) ) (! (= ($Is SeqType v@@13 (TSeq t0@@6)) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@13))) ($IsBox (|Seq#Index| v@@13 i@@2) t0@@6))
 :pattern ( (|Seq#Index| v@@13 i@@2))
)))
 :pattern ( ($Is SeqType v@@13 (TSeq t0@@6)))
)))
(assert (forall ((m@@9 T@U) ) (!  (or (= m@@9 |Map#Empty|) (exists ((k@@0 T@U) (v@@14 T@U) ) (|Set#IsMember| (|Map#Items| m@@9) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@14)))))
 :pattern ( (|Map#Items| m@@9))
)))
(assert (forall ((s@@4 T@U) (i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| s@@4))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@4 i@@3))) (|Seq#Rank| s@@4)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@4 i@@3))))
)))
(assert (forall ((v@@15 T@U) (t0@@7 T@U) (t1@@3 T@U) ) (!  (=> ($Is MapType v@@15 (TMap t0@@7 t1@@3)) (and (and ($Is SetType (|Map#Domain| v@@15) (TSet t0@@7)) ($Is SetType (|Map#Values| v@@15) (TSet t1@@3))) ($Is SetType (|Map#Items| v@@15) (TSet (Tclass._System.Tuple2 t0@@7 t1@@3)))))
 :pattern ( ($Is MapType v@@15 (TMap t0@@7 t1@@3)))
)))
(assert (forall ((v@@16 T@U) ) (! ($Is intType v@@16 TInt)
 :pattern ( ($Is intType v@@16 TInt))
)))
(assert (forall ((v@@17 T@U) ) (! ($Is charType v@@17 TChar)
 :pattern ( ($Is charType v@@17 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |gm#0@@2| () T@U)
(declare-fun |g#0@@4| () T@U)
(declare-fun |v#0@@2| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 7) (- 0 6)) (_module.__default.ValidGlobalStateOpaque reveal__module._default.ValidGlobalStateOpaque (_module.__default.GlobalUpdate |gm#0@@2| |g#0@@4| |v#0@@2|)))))
(let ((anon5_Else_correct  (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap $Heap@0) reveal__module._default.ValidGlobalStateOpaque)) (and (=> (= (ControlFlow 0 8) (- 0 10)) (|Set#IsMember| (|Map#Domain| |gm#0@@2|) ($Box SeqType |g#0@@4|))) (=> (|Set#IsMember| (|Map#Domain| |gm#0@@2|) ($Box SeqType |g#0@@4|)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| |gm#0@@2|) ($Box SeqType |g#0@@4|))))))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| |gm#0@@2|) ($Box SeqType |g#0@@4|)))))) (=> (= (_module.__default.GlobalUpdate |gm#0@@2| |g#0@@4| |v#0@@2|) (|Map#Build| |gm#0@@2| ($Box SeqType |g#0@@4|) ($Box SeqType (|Seq#Update| ($Unbox SeqType (MapType0Select BoxType BoxType (|Map#Elements| |gm#0@@2|) ($Box SeqType |g#0@@4|))) (LitInt 0) ($Box intType (int_2_U |v#0@@2|)))))) (=> (and ($Is MapType (_module.__default.GlobalUpdate |gm#0@@2| |g#0@@4| |v#0@@2|) (TMap (TSeq TChar) (TSeq TInt))) (= (ControlFlow 0 8) 7)) GeneratedUnifiedExit_correct)))))))))
(let ((anon5_Then_correct  (=> (and (and ($Is MapType (_module.__default.GlobalUpdate |gm#0@@2| |g#0@@4| |v#0@@2|) (TMap (TSeq TChar) (TSeq TInt))) ($IsAlloc MapType |gm#0@@2| (TMap (TSeq TChar) (TSeq TInt)) $Heap)) (and ($IsAlloc SeqType |g#0@@4| (TSeq TChar) $Heap) ($IsAlloc intType (int_2_U |v#0@@2|) TInt $Heap))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (_module.__default.ValidGlobalStateOpaque reveal__module._default.ValidGlobalStateOpaque |gm#0@@2|)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (_module.__default.ValidGlobal |g#0@@4|)) (=> (and (_module.__default.ValidGlobalStateOpaque reveal__module._default.ValidGlobalStateOpaque |gm#0@@2|) (_module.__default.ValidGlobal |g#0@@4|)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (or (or (<= 0 |v#0@@2|) (and (|Set#Subset| (|Map#Domain| |gm#0@@2|) (|Map#Domain| |gm#0@@2|)) (not (|Set#Subset| (|Map#Domain| |gm#0@@2|) (|Map#Domain| |gm#0@@2|))))) (< (|Seq#Rank| |g#0@@4|) (|Seq#Rank| |g#0@@4|))) (= |v#0@@2| |v#0@@2|))) (=> (or (or (or (<= 0 |v#0@@2|) (and (|Set#Subset| (|Map#Domain| |gm#0@@2|) (|Map#Domain| |gm#0@@2|)) (not (|Set#Subset| (|Map#Domain| |gm#0@@2|) (|Map#Domain| |gm#0@@2|))))) (< (|Seq#Rank| |g#0@@4|) (|Seq#Rank| |g#0@@4|))) (= |v#0@@2| |v#0@@2|)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (and (= |gm#0@@2| |gm#0@@2|) (= |g#0@@4| |g#0@@4|)) (= |v#0@@2| |v#0@@2|)) (or (and (|Set#Subset| (|Map#Domain| |gm#0@@2|) (|Map#Domain| |gm#0@@2|)) (not (|Set#Subset| (|Map#Domain| |gm#0@@2|) (|Map#Domain| |gm#0@@2|)))) (and (|Set#Equal| (|Map#Domain| |gm#0@@2|) (|Map#Domain| |gm#0@@2|)) (or (< (|Seq#Rank| |g#0@@4|) (|Seq#Rank| |g#0@@4|)) (and (= (|Seq#Rank| |g#0@@4|) (|Seq#Rank| |g#0@@4|)) (< |v#0@@2| |v#0@@2|)))))))))))))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and ($IsAlloc MapType |gm#0@@2| (TMap (TSeq TChar) (TSeq TInt)) $Heap) (|_module.__default.ValidGlobalStateOpaque#canCall| |gm#0@@2|)) (=> (and (and (_module.__default.ValidGlobalStateOpaque reveal__module._default.ValidGlobalStateOpaque |gm#0@@2|) ($IsAlloc SeqType |g#0@@4| (TSeq TChar) $Heap)) (and (|_module.__default.ValidGlobal#canCall| |g#0@@4|) (_module.__default.ValidGlobal |g#0@@4|))) (and (=> (= (ControlFlow 0 11) 2) anon5_Then_correct) (=> (= (ControlFlow 0 11) 8) anon5_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is MapType |gm#0@@2| (TMap (TSeq TChar) (TSeq TInt))) ($Is SeqType |g#0@@4| (TSeq TChar))) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 12) 11))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
