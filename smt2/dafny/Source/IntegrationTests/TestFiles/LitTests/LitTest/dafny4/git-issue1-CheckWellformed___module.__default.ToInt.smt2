(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@34 (T@U T@U) Bool)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@46 (Int) T@U)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@117 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@118 (T@U) Bool)
(declare-fun $generated@@123 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@25) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@32 T@U) ) (!  (=> (or ($generated@@26 ($generated@@24 $generated@@25 $generated@@32)) (and (< 1 $generated@@22) ($generated@@27 $generated@@25 $generated@@32 $generated@@28))) (and ($generated@@29 ($generated@@24 $generated@@25 $generated@@32)) (= ($generated@@23 ($generated@@24 $generated@@25 $generated@@32)) ($generated@@30 ($generated@@31 ($generated@@24 $generated@@25 $generated@@32))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@25 $generated@@32)))
))))
(assert (forall (($generated@@33 T@U) ) (!  (=> ($generated@@27 $generated@@25 $generated@@33 $generated@@28) ($generated@@29 $generated@@33))
 :pattern ( ($generated@@29 $generated@@33) ($generated@@27 $generated@@25 $generated@@33 $generated@@28))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@34 $generated@@35 $generated@@36) (= $generated@@35 $generated@@36))
 :pattern ( ($generated@@34 $generated@@35 $generated@@36))
)))
(assert (forall (($generated@@37 Int) ) (! (= ($generated@@30 $generated@@37) $generated@@37)
 :pattern ( ($generated@@30 $generated@@37))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@24 $generated@@39 $generated@@38) $generated@@38)
 :pattern ( ($generated@@24 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@29 $generated@@41) (= ($generated@@40 $generated@@41) $generated@@3))
 :pattern ( ($generated@@29 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 ($generated@@42 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@42 $generated@@45 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@29 $generated@@47) (exists (($generated@@48 Int) ) (= $generated@@47 ($generated@@46 $generated@@48))))
 :pattern ( ($generated@@29 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@34 $generated@@49 $generated@@50) (= ($generated@@31 $generated@@49) ($generated@@31 $generated@@50)))
 :pattern ( ($generated@@34 $generated@@49 $generated@@50))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@51 T@U) ) (!  (=> (or ($generated@@26 $generated@@51) (and (< 1 $generated@@22) ($generated@@27 $generated@@25 $generated@@51 $generated@@28))) (= ($generated@@23 $generated@@51) ($generated@@31 $generated@@51)))
 :pattern ( ($generated@@23 $generated@@51))
))))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@52 T@U) ) (!  (=> (or ($generated@@26 $generated@@52) (and (< 1 $generated@@22) ($generated@@27 $generated@@25 $generated@@52 $generated@@28))) (and ($generated@@29 $generated@@52) (= ($generated@@23 $generated@@52) ($generated@@31 $generated@@52))))
 :pattern ( ($generated@@23 $generated@@52))
))))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@40 ($generated@@46 $generated@@53)) $generated@@3)
 :pattern ( ($generated@@46 $generated@@53))
)))
(assert (forall (($generated@@54 Int) ) (! (= ($generated@@31 ($generated@@46 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@46 $generated@@54))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@42 $generated@@56 ($generated@@43 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@43 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@57 Int) ) (! (= ($generated@@27 $generated@@25 ($generated@@46 $generated@@57) $generated@@28) ($generated@@27 $generated@@7 ($generated@@11 $generated@@57) $generated))
 :pattern ( ($generated@@27 $generated@@25 ($generated@@46 $generated@@57) $generated@@28))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@58 $generated@@69 $generated@@70 $generated@@71 ($generated@@65 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@74 $generated@@75) $generated@@72)
 :weight 0
)) (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@81 $generated@@83) (= ($generated@@58 $generated@@76 $generated@@77 $generated@@78 ($generated@@65 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@58 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@58 $generated@@85 $generated@@86 $generated@@87 ($generated@@65 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@58 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)))) (= ($generated@@5 $generated@@59) 4)) (= ($generated@@5 $generated@@60) 5)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@62 $generated@@94 $generated@@95 ($generated@@66 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@96) $generated@@98) $generated@@96)
 :weight 0
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@103 $generated@@104) (= ($generated@@62 $generated@@99 $generated@@100 ($generated@@66 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@104) ($generated@@62 $generated@@99 $generated@@100 $generated@@102 $generated@@104)))
 :weight 0
))) (= ($generated@@5 $generated@@63) 6)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (= ($generated@@5 ($generated@@64 $generated@@105 $generated@@106)) 7))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@67 ($generated@@64 $generated@@107 $generated@@108)) $generated@@107)
 :pattern ( ($generated@@64 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@68 ($generated@@64 $generated@@109 $generated@@110)) $generated@@110)
 :pattern ( ($generated@@64 $generated@@109 $generated@@110))
))))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 Bool) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@10 ($generated@@58 $generated@@59 $generated@@60 $generated@@6 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))  (=> (and (or (not (= $generated@@115 $generated@@111)) (not true)) ($generated@@10 ($generated@@42 $generated@@6 ($generated@@62 $generated@@60 $generated@@63 ($generated@@62 $generated@@59 ($generated@@64 $generated@@60 $generated@@63) $generated@@112 $generated@@115) $generated@@113)))) $generated@@114))
 :pattern ( ($generated@@58 $generated@@59 $generated@@60 $generated@@6 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ) (!  (=> (and ($generated@@118 $generated@@120) (and ($generated@@29 $generated@@119) ($generated@@117 $generated@@25 $generated@@119 $generated@@28 $generated@@120))) ($generated@@117 $generated@@7 ($generated@@11 ($generated@@31 $generated@@119)) $generated $generated@@120))
 :pattern ( ($generated@@117 $generated@@7 ($generated@@11 ($generated@@31 $generated@@119)) $generated $generated@@120))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> (and ($generated@@118 $generated@@122) ($generated@@27 $generated@@25 $generated@@121 $generated@@28)) ($generated@@117 $generated@@25 $generated@@121 $generated@@28 $generated@@122))
 :pattern ( ($generated@@117 $generated@@25 $generated@@121 $generated@@28 $generated@@122))
)))
(assert (= ($generated@@21 $generated@@28) $generated@@2))
(assert (= ($generated@@123 $generated@@28) $generated@@4))
(assert (forall (($generated@@124 Int) ) (! (= ($generated@@43 $generated@@7 ($generated@@11 ($generated@@30 $generated@@124))) ($generated@@24 $generated@@63 ($generated@@43 $generated@@7 ($generated@@11 $generated@@124))))
 :pattern ( ($generated@@43 $generated@@7 ($generated@@11 ($generated@@30 $generated@@124))))
)))
(assert (forall (($generated@@125 Int) ) (! (= ($generated@@46 ($generated@@30 $generated@@125)) ($generated@@24 $generated@@25 ($generated@@46 $generated@@125)))
 :pattern ( ($generated@@46 ($generated@@30 $generated@@125)))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@T) ) (! (= ($generated@@43 $generated@@127 ($generated@@24 $generated@@127 $generated@@126)) ($generated@@24 $generated@@63 ($generated@@43 $generated@@127 $generated@@126)))
 :pattern ( ($generated@@43 $generated@@127 ($generated@@24 $generated@@127 $generated@@126)))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (! ($generated@@117 $generated@@7 $generated@@129 $generated $generated@@128)
 :pattern ( ($generated@@117 $generated@@7 $generated@@129 $generated $generated@@128))
)))
(assert (forall (($generated@@130 T@U) ) (! ($generated@@27 $generated@@7 $generated@@130 $generated)
 :pattern ( ($generated@@27 $generated@@7 $generated@@130 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 (T@U) Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@137  (=> (= (ControlFlow 0 4) (- 0 3)) (= ($generated@@23 $generated@@131) ($generated@@31 $generated@@131)))))
(let (($generated@@138  (=> ($generated@@29 $generated@@131) (=> (and (and (= ($generated@@23 $generated@@131) ($generated@@31 $generated@@131)) ($generated@@29 $generated@@131)) (and ($generated@@27 $generated@@7 ($generated@@11 ($generated@@23 $generated@@131)) $generated) (= (ControlFlow 0 5) 4))) $generated@@137))))
(let (($generated@@139  (=> (and ($generated@@117 $generated@@25 $generated@@131 $generated@@28 $generated@@132) (= (ControlFlow 0 2) (- 0 1))) (or ($generated@@34 $generated@@131 $generated@@131) (< ($generated@@133 $generated@@131) ($generated@@133 $generated@@131))))))
(let (($generated@@140  (=> (= $generated@@134 ($generated@@61 $generated@@135 $generated@@132 $generated@@1 false)) (and (=> (= (ControlFlow 0 6) 2) $generated@@139) (=> (= (ControlFlow 0 6) 5) $generated@@138)))))
(let (($generated@@141  (=> (and (and (and ($generated@@118 $generated@@132) ($generated@@136 $generated@@132)) ($generated@@27 $generated@@25 $generated@@131 $generated@@28)) (and (= 1 $generated@@22) (= (ControlFlow 0 7) 6))) $generated@@140)))
$generated@@141))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
